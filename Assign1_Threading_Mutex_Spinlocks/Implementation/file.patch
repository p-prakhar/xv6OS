Binary files xv6-public-original/bio.o and xv6-public/bio.o differ
Binary files xv6-public-original/bootasm.o and xv6-public/bootasm.o differ
Binary files xv6-public-original/bootblock.o and xv6-public/bootblock.o differ
Binary files xv6-public-original/bootblockother.o and xv6-public/bootblockother.o differ
Binary files xv6-public-original/bootmain.o and xv6-public/bootmain.o differ
Binary files xv6-public-original/_cat and xv6-public/_cat differ
diff -ruN xv6-public-original/cat.asm xv6-public/cat.asm
--- xv6-public-original/cat.asm	2022-08-13 16:28:53.924465000 +0530
+++ xv6-public/cat.asm	2022-09-05 20:56:49.258960000 +0530
@@ -71,9 +71,9 @@
       printf(1, "cat: cannot open %s\n", argv[i]);
   69:	50                   	push   %eax
   6a:	ff 33                	pushl  (%ebx)
-  6c:	68 5b 08 00 00       	push   $0x85b
+  6c:	68 6b 08 00 00       	push   $0x86b
   71:	6a 01                	push   $0x1
-  73:	e8 58 04 00 00       	call   4d0 <printf>
+  73:	e8 68 04 00 00       	call   4e0 <printf>
       exit();
   78:	e8 f6 02 00 00       	call   373 <exit>
     cat(0);
@@ -99,7 +99,7 @@
     if (write(1, buf, n) != n) {
   a0:	83 ec 04             	sub    $0x4,%esp
   a3:	53                   	push   %ebx
-  a4:	68 80 0b 00 00       	push   $0xb80
+  a4:	68 a0 0b 00 00       	push   $0xba0
   a9:	6a 01                	push   $0x1
   ab:	e8 e3 02 00 00       	call   393 <write>
   b0:	83 c4 10             	add    $0x10,%esp
@@ -108,7 +108,7 @@
   while((n = read(fd, buf, sizeof(buf))) > 0) {
   b7:	83 ec 04             	sub    $0x4,%esp
   ba:	68 00 02 00 00       	push   $0x200
-  bf:	68 80 0b 00 00       	push   $0xb80
+  bf:	68 a0 0b 00 00       	push   $0xba0
   c4:	56                   	push   %esi
   c5:	e8 c1 02 00 00       	call   38b <read>
   ca:	83 c4 10             	add    $0x10,%esp
@@ -125,17 +125,17 @@
   db:	c3                   	ret    
       printf(1, "cat: write error\n");
   dc:	83 ec 08             	sub    $0x8,%esp
-  df:	68 38 08 00 00       	push   $0x838
+  df:	68 48 08 00 00       	push   $0x848
   e4:	6a 01                	push   $0x1
-  e6:	e8 e5 03 00 00       	call   4d0 <printf>
+  e6:	e8 f5 03 00 00       	call   4e0 <printf>
       exit();
   eb:	e8 83 02 00 00       	call   373 <exit>
     printf(1, "cat: read error\n");
   f0:	50                   	push   %eax
   f1:	50                   	push   %eax
-  f2:	68 4a 08 00 00       	push   $0x84a
+  f2:	68 5a 08 00 00       	push   $0x85a
   f7:	6a 01                	push   $0x1
-  f9:	e8 d2 03 00 00       	call   4d0 <printf>
+  f9:	e8 e2 03 00 00       	call   4e0 <printf>
     exit();
   fe:	e8 70 02 00 00       	call   373 <exit>
  103:	66 90                	xchg   %ax,%ax
@@ -672,609 +672,623 @@
  40b:	b8 0e 00 00 00       	mov    $0xe,%eax
  410:	cd 40                	int    $0x40
  412:	c3                   	ret    
- 413:	66 90                	xchg   %ax,%ax
- 415:	66 90                	xchg   %ax,%ax
- 417:	66 90                	xchg   %ax,%ax
- 419:	66 90                	xchg   %ax,%ax
- 41b:	66 90                	xchg   %ax,%ax
- 41d:	66 90                	xchg   %ax,%ax
- 41f:	90                   	nop
 
-00000420 <printint>:
+00000413 <thread_create>:
+SYSCALL(thread_create)
+ 413:	b8 16 00 00 00       	mov    $0x16,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <thread_join>:
+SYSCALL(thread_join)
+ 41b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <thread_exit>:
+SYSCALL(thread_exit)
+ 423:	b8 18 00 00 00       	mov    $0x18,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+ 42b:	66 90                	xchg   %ax,%ax
+ 42d:	66 90                	xchg   %ax,%ax
+ 42f:	90                   	nop
+
+00000430 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 420:	55                   	push   %ebp
- 421:	89 e5                	mov    %esp,%ebp
- 423:	57                   	push   %edi
- 424:	56                   	push   %esi
- 425:	53                   	push   %ebx
- 426:	83 ec 3c             	sub    $0x3c,%esp
- 429:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+ 436:	83 ec 3c             	sub    $0x3c,%esp
+ 439:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 42c:	89 d1                	mov    %edx,%ecx
+ 43c:	89 d1                	mov    %edx,%ecx
 {
- 42e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 43e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 431:	85 d2                	test   %edx,%edx
- 433:	0f 89 7f 00 00 00    	jns    4b8 <printint+0x98>
- 439:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 43d:	74 79                	je     4b8 <printint+0x98>
+ 441:	85 d2                	test   %edx,%edx
+ 443:	0f 89 7f 00 00 00    	jns    4c8 <printint+0x98>
+ 449:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 44d:	74 79                	je     4c8 <printint+0x98>
     neg = 1;
- 43f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 44f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 446:	f7 d9                	neg    %ecx
+ 456:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 448:	31 db                	xor    %ebx,%ebx
- 44a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 44d:	8d 76 00             	lea    0x0(%esi),%esi
+ 458:	31 db                	xor    %ebx,%ebx
+ 45a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 45d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 450:	89 c8                	mov    %ecx,%eax
- 452:	31 d2                	xor    %edx,%edx
- 454:	89 cf                	mov    %ecx,%edi
- 456:	f7 75 c4             	divl   -0x3c(%ebp)
- 459:	0f b6 92 78 08 00 00 	movzbl 0x878(%edx),%edx
- 460:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 463:	89 d8                	mov    %ebx,%eax
- 465:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 460:	89 c8                	mov    %ecx,%eax
+ 462:	31 d2                	xor    %edx,%edx
+ 464:	89 cf                	mov    %ecx,%edi
+ 466:	f7 75 c4             	divl   -0x3c(%ebp)
+ 469:	0f b6 92 88 08 00 00 	movzbl 0x888(%edx),%edx
+ 470:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 473:	89 d8                	mov    %ebx,%eax
+ 475:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 468:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 478:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 46b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 47b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 46e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 471:	76 dd                	jbe    450 <printint+0x30>
+ 47e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 481:	76 dd                	jbe    460 <printint+0x30>
   if(neg)
- 473:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 476:	85 c9                	test   %ecx,%ecx
- 478:	74 0c                	je     486 <printint+0x66>
+ 483:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 486:	85 c9                	test   %ecx,%ecx
+ 488:	74 0c                	je     496 <printint+0x66>
     buf[i++] = '-';
- 47a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 48a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 47f:	89 d8                	mov    %ebx,%eax
+ 48f:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 481:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 491:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 486:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 489:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 48d:	eb 07                	jmp    496 <printint+0x76>
- 48f:	90                   	nop
- 490:	0f b6 13             	movzbl (%ebx),%edx
- 493:	83 eb 01             	sub    $0x1,%ebx
+ 496:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 499:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 49d:	eb 07                	jmp    4a6 <printint+0x76>
+ 49f:	90                   	nop
+ 4a0:	0f b6 13             	movzbl (%ebx),%edx
+ 4a3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 496:	83 ec 04             	sub    $0x4,%esp
- 499:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 49c:	6a 01                	push   $0x1
- 49e:	56                   	push   %esi
- 49f:	57                   	push   %edi
- 4a0:	e8 ee fe ff ff       	call   393 <write>
+ 4a6:	83 ec 04             	sub    $0x4,%esp
+ 4a9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4ac:	6a 01                	push   $0x1
+ 4ae:	56                   	push   %esi
+ 4af:	57                   	push   %edi
+ 4b0:	e8 de fe ff ff       	call   393 <write>
   while(--i >= 0)
- 4a5:	83 c4 10             	add    $0x10,%esp
- 4a8:	39 de                	cmp    %ebx,%esi
- 4aa:	75 e4                	jne    490 <printint+0x70>
+ 4b5:	83 c4 10             	add    $0x10,%esp
+ 4b8:	39 de                	cmp    %ebx,%esi
+ 4ba:	75 e4                	jne    4a0 <printint+0x70>
     putc(fd, buf[i]);
 }
- 4ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4af:	5b                   	pop    %ebx
- 4b0:	5e                   	pop    %esi
- 4b1:	5f                   	pop    %edi
- 4b2:	5d                   	pop    %ebp
- 4b3:	c3                   	ret    
- 4b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4bf:	5b                   	pop    %ebx
+ 4c0:	5e                   	pop    %esi
+ 4c1:	5f                   	pop    %edi
+ 4c2:	5d                   	pop    %ebp
+ 4c3:	c3                   	ret    
+ 4c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 4b8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 4bf:	eb 87                	jmp    448 <printint+0x28>
- 4c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4cf:	90                   	nop
+ 4c8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4cf:	eb 87                	jmp    458 <printint+0x28>
+ 4d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4df:	90                   	nop
 
-000004d0 <printf>:
+000004e0 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 4d0:	f3 0f 1e fb          	endbr32 
- 4d4:	55                   	push   %ebp
- 4d5:	89 e5                	mov    %esp,%ebp
- 4d7:	57                   	push   %edi
- 4d8:	56                   	push   %esi
- 4d9:	53                   	push   %ebx
- 4da:	83 ec 2c             	sub    $0x2c,%esp
+ 4e0:	f3 0f 1e fb          	endbr32 
+ 4e4:	55                   	push   %ebp
+ 4e5:	89 e5                	mov    %esp,%ebp
+ 4e7:	57                   	push   %edi
+ 4e8:	56                   	push   %esi
+ 4e9:	53                   	push   %ebx
+ 4ea:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 4dd:	8b 75 0c             	mov    0xc(%ebp),%esi
- 4e0:	0f b6 1e             	movzbl (%esi),%ebx
- 4e3:	84 db                	test   %bl,%bl
- 4e5:	0f 84 b4 00 00 00    	je     59f <printf+0xcf>
+ 4ed:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 4f0:	0f b6 1e             	movzbl (%esi),%ebx
+ 4f3:	84 db                	test   %bl,%bl
+ 4f5:	0f 84 b4 00 00 00    	je     5af <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 4eb:	8d 45 10             	lea    0x10(%ebp),%eax
- 4ee:	83 c6 01             	add    $0x1,%esi
+ 4fb:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4fe:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 4f1:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 501:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 4f4:	31 d2                	xor    %edx,%edx
+ 504:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 4f6:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 4f9:	eb 33                	jmp    52e <printf+0x5e>
- 4fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 4ff:	90                   	nop
- 500:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 506:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 509:	eb 33                	jmp    53e <printf+0x5e>
+ 50b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 50f:	90                   	nop
+ 510:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 503:	ba 25 00 00 00       	mov    $0x25,%edx
+ 513:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 508:	83 f8 25             	cmp    $0x25,%eax
- 50b:	74 17                	je     524 <printf+0x54>
+ 518:	83 f8 25             	cmp    $0x25,%eax
+ 51b:	74 17                	je     534 <printf+0x54>
   write(fd, &c, 1);
- 50d:	83 ec 04             	sub    $0x4,%esp
- 510:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 513:	6a 01                	push   $0x1
- 515:	57                   	push   %edi
- 516:	ff 75 08             	pushl  0x8(%ebp)
- 519:	e8 75 fe ff ff       	call   393 <write>
- 51e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 51d:	83 ec 04             	sub    $0x4,%esp
+ 520:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 523:	6a 01                	push   $0x1
+ 525:	57                   	push   %edi
+ 526:	ff 75 08             	pushl  0x8(%ebp)
+ 529:	e8 65 fe ff ff       	call   393 <write>
+ 52e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 521:	83 c4 10             	add    $0x10,%esp
+ 531:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 524:	0f b6 1e             	movzbl (%esi),%ebx
- 527:	83 c6 01             	add    $0x1,%esi
- 52a:	84 db                	test   %bl,%bl
- 52c:	74 71                	je     59f <printf+0xcf>
+ 534:	0f b6 1e             	movzbl (%esi),%ebx
+ 537:	83 c6 01             	add    $0x1,%esi
+ 53a:	84 db                	test   %bl,%bl
+ 53c:	74 71                	je     5af <printf+0xcf>
     c = fmt[i] & 0xff;
- 52e:	0f be cb             	movsbl %bl,%ecx
- 531:	0f b6 c3             	movzbl %bl,%eax
+ 53e:	0f be cb             	movsbl %bl,%ecx
+ 541:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 534:	85 d2                	test   %edx,%edx
- 536:	74 c8                	je     500 <printf+0x30>
+ 544:	85 d2                	test   %edx,%edx
+ 546:	74 c8                	je     510 <printf+0x30>
       }
     } else if(state == '%'){
- 538:	83 fa 25             	cmp    $0x25,%edx
- 53b:	75 e7                	jne    524 <printf+0x54>
+ 548:	83 fa 25             	cmp    $0x25,%edx
+ 54b:	75 e7                	jne    534 <printf+0x54>
       if(c == 'd'){
- 53d:	83 f8 64             	cmp    $0x64,%eax
- 540:	0f 84 9a 00 00 00    	je     5e0 <printf+0x110>
+ 54d:	83 f8 64             	cmp    $0x64,%eax
+ 550:	0f 84 9a 00 00 00    	je     5f0 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 546:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 54c:	83 f9 70             	cmp    $0x70,%ecx
- 54f:	74 5f                	je     5b0 <printf+0xe0>
+ 556:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 55c:	83 f9 70             	cmp    $0x70,%ecx
+ 55f:	74 5f                	je     5c0 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 551:	83 f8 73             	cmp    $0x73,%eax
- 554:	0f 84 d6 00 00 00    	je     630 <printf+0x160>
+ 561:	83 f8 73             	cmp    $0x73,%eax
+ 564:	0f 84 d6 00 00 00    	je     640 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 55a:	83 f8 63             	cmp    $0x63,%eax
- 55d:	0f 84 8d 00 00 00    	je     5f0 <printf+0x120>
+ 56a:	83 f8 63             	cmp    $0x63,%eax
+ 56d:	0f 84 8d 00 00 00    	je     600 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 563:	83 f8 25             	cmp    $0x25,%eax
- 566:	0f 84 b4 00 00 00    	je     620 <printf+0x150>
+ 573:	83 f8 25             	cmp    $0x25,%eax
+ 576:	0f 84 b4 00 00 00    	je     630 <printf+0x150>
   write(fd, &c, 1);
- 56c:	83 ec 04             	sub    $0x4,%esp
- 56f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 573:	6a 01                	push   $0x1
- 575:	57                   	push   %edi
- 576:	ff 75 08             	pushl  0x8(%ebp)
- 579:	e8 15 fe ff ff       	call   393 <write>
+ 57c:	83 ec 04             	sub    $0x4,%esp
+ 57f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 583:	6a 01                	push   $0x1
+ 585:	57                   	push   %edi
+ 586:	ff 75 08             	pushl  0x8(%ebp)
+ 589:	e8 05 fe ff ff       	call   393 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 57e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 58e:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 581:	83 c4 0c             	add    $0xc,%esp
- 584:	6a 01                	push   $0x1
- 586:	83 c6 01             	add    $0x1,%esi
- 589:	57                   	push   %edi
- 58a:	ff 75 08             	pushl  0x8(%ebp)
- 58d:	e8 01 fe ff ff       	call   393 <write>
+ 591:	83 c4 0c             	add    $0xc,%esp
+ 594:	6a 01                	push   $0x1
+ 596:	83 c6 01             	add    $0x1,%esi
+ 599:	57                   	push   %edi
+ 59a:	ff 75 08             	pushl  0x8(%ebp)
+ 59d:	e8 f1 fd ff ff       	call   393 <write>
   for(i = 0; fmt[i]; i++){
- 592:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 5a2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 596:	83 c4 10             	add    $0x10,%esp
+ 5a6:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 599:	31 d2                	xor    %edx,%edx
+ 5a9:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 59b:	84 db                	test   %bl,%bl
- 59d:	75 8f                	jne    52e <printf+0x5e>
+ 5ab:	84 db                	test   %bl,%bl
+ 5ad:	75 8f                	jne    53e <printf+0x5e>
     }
   }
 }
- 59f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 5a2:	5b                   	pop    %ebx
- 5a3:	5e                   	pop    %esi
- 5a4:	5f                   	pop    %edi
- 5a5:	5d                   	pop    %ebp
- 5a6:	c3                   	ret    
- 5a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5ae:	66 90                	xchg   %ax,%ax
+ 5af:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5b2:	5b                   	pop    %ebx
+ 5b3:	5e                   	pop    %esi
+ 5b4:	5f                   	pop    %edi
+ 5b5:	5d                   	pop    %ebp
+ 5b6:	c3                   	ret    
+ 5b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5be:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 5b0:	83 ec 0c             	sub    $0xc,%esp
- 5b3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 5b8:	6a 00                	push   $0x0
- 5ba:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 5bd:	8b 45 08             	mov    0x8(%ebp),%eax
- 5c0:	8b 13                	mov    (%ebx),%edx
- 5c2:	e8 59 fe ff ff       	call   420 <printint>
+ 5c0:	83 ec 0c             	sub    $0xc,%esp
+ 5c3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5c8:	6a 00                	push   $0x0
+ 5ca:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 5cd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5d0:	8b 13                	mov    (%ebx),%edx
+ 5d2:	e8 59 fe ff ff       	call   430 <printint>
         ap++;
- 5c7:	89 d8                	mov    %ebx,%eax
- 5c9:	83 c4 10             	add    $0x10,%esp
+ 5d7:	89 d8                	mov    %ebx,%eax
+ 5d9:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5cc:	31 d2                	xor    %edx,%edx
+ 5dc:	31 d2                	xor    %edx,%edx
         ap++;
- 5ce:	83 c0 04             	add    $0x4,%eax
- 5d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 5d4:	e9 4b ff ff ff       	jmp    524 <printf+0x54>
- 5d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5de:	83 c0 04             	add    $0x4,%eax
+ 5e1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5e4:	e9 4b ff ff ff       	jmp    534 <printf+0x54>
+ 5e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 5e0:	83 ec 0c             	sub    $0xc,%esp
- 5e3:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 5e8:	6a 01                	push   $0x1
- 5ea:	eb ce                	jmp    5ba <printf+0xea>
- 5ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5f0:	83 ec 0c             	sub    $0xc,%esp
+ 5f3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5f8:	6a 01                	push   $0x1
+ 5fa:	eb ce                	jmp    5ca <printf+0xea>
+ 5fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 5f0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 600:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 5f3:	83 ec 04             	sub    $0x4,%esp
+ 603:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 5f6:	8b 03                	mov    (%ebx),%eax
+ 606:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 5f8:	6a 01                	push   $0x1
+ 608:	6a 01                	push   $0x1
         ap++;
- 5fa:	83 c3 04             	add    $0x4,%ebx
+ 60a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 5fd:	57                   	push   %edi
- 5fe:	ff 75 08             	pushl  0x8(%ebp)
+ 60d:	57                   	push   %edi
+ 60e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 601:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 611:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 604:	e8 8a fd ff ff       	call   393 <write>
+ 614:	e8 7a fd ff ff       	call   393 <write>
         ap++;
- 609:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 60c:	83 c4 10             	add    $0x10,%esp
+ 619:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 61c:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 60f:	31 d2                	xor    %edx,%edx
- 611:	e9 0e ff ff ff       	jmp    524 <printf+0x54>
- 616:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 61d:	8d 76 00             	lea    0x0(%esi),%esi
+ 61f:	31 d2                	xor    %edx,%edx
+ 621:	e9 0e ff ff ff       	jmp    534 <printf+0x54>
+ 626:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 62d:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 620:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 630:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 623:	83 ec 04             	sub    $0x4,%esp
- 626:	e9 59 ff ff ff       	jmp    584 <printf+0xb4>
- 62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 62f:	90                   	nop
+ 633:	83 ec 04             	sub    $0x4,%esp
+ 636:	e9 59 ff ff ff       	jmp    594 <printf+0xb4>
+ 63b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 63f:	90                   	nop
         s = (char*)*ap;
- 630:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 633:	8b 18                	mov    (%eax),%ebx
+ 640:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 643:	8b 18                	mov    (%eax),%ebx
         ap++;
- 635:	83 c0 04             	add    $0x4,%eax
- 638:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 645:	83 c0 04             	add    $0x4,%eax
+ 648:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 63b:	85 db                	test   %ebx,%ebx
- 63d:	74 17                	je     656 <printf+0x186>
+ 64b:	85 db                	test   %ebx,%ebx
+ 64d:	74 17                	je     666 <printf+0x186>
         while(*s != 0){
- 63f:	0f b6 03             	movzbl (%ebx),%eax
+ 64f:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 642:	31 d2                	xor    %edx,%edx
+ 652:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 644:	84 c0                	test   %al,%al
- 646:	0f 84 d8 fe ff ff    	je     524 <printf+0x54>
- 64c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 64f:	89 de                	mov    %ebx,%esi
- 651:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 654:	eb 1a                	jmp    670 <printf+0x1a0>
+ 654:	84 c0                	test   %al,%al
+ 656:	0f 84 d8 fe ff ff    	je     534 <printf+0x54>
+ 65c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 65f:	89 de                	mov    %ebx,%esi
+ 661:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 664:	eb 1a                	jmp    680 <printf+0x1a0>
           s = "(null)";
- 656:	bb 70 08 00 00       	mov    $0x870,%ebx
+ 666:	bb 80 08 00 00       	mov    $0x880,%ebx
         while(*s != 0){
- 65b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 65e:	b8 28 00 00 00       	mov    $0x28,%eax
- 663:	89 de                	mov    %ebx,%esi
- 665:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 668:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 66f:	90                   	nop
+ 66b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 66e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 673:	89 de                	mov    %ebx,%esi
+ 675:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 678:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 67f:	90                   	nop
   write(fd, &c, 1);
- 670:	83 ec 04             	sub    $0x4,%esp
+ 680:	83 ec 04             	sub    $0x4,%esp
           s++;
- 673:	83 c6 01             	add    $0x1,%esi
- 676:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 683:	83 c6 01             	add    $0x1,%esi
+ 686:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 679:	6a 01                	push   $0x1
- 67b:	57                   	push   %edi
- 67c:	53                   	push   %ebx
- 67d:	e8 11 fd ff ff       	call   393 <write>
+ 689:	6a 01                	push   $0x1
+ 68b:	57                   	push   %edi
+ 68c:	53                   	push   %ebx
+ 68d:	e8 01 fd ff ff       	call   393 <write>
         while(*s != 0){
- 682:	0f b6 06             	movzbl (%esi),%eax
- 685:	83 c4 10             	add    $0x10,%esp
- 688:	84 c0                	test   %al,%al
- 68a:	75 e4                	jne    670 <printf+0x1a0>
- 68c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 692:	0f b6 06             	movzbl (%esi),%eax
+ 695:	83 c4 10             	add    $0x10,%esp
+ 698:	84 c0                	test   %al,%al
+ 69a:	75 e4                	jne    680 <printf+0x1a0>
+ 69c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 68f:	31 d2                	xor    %edx,%edx
- 691:	e9 8e fe ff ff       	jmp    524 <printf+0x54>
- 696:	66 90                	xchg   %ax,%ax
- 698:	66 90                	xchg   %ax,%ax
- 69a:	66 90                	xchg   %ax,%ax
- 69c:	66 90                	xchg   %ax,%ax
- 69e:	66 90                	xchg   %ax,%ax
+ 69f:	31 d2                	xor    %edx,%edx
+ 6a1:	e9 8e fe ff ff       	jmp    534 <printf+0x54>
+ 6a6:	66 90                	xchg   %ax,%ax
+ 6a8:	66 90                	xchg   %ax,%ax
+ 6aa:	66 90                	xchg   %ax,%ax
+ 6ac:	66 90                	xchg   %ax,%ax
+ 6ae:	66 90                	xchg   %ax,%ax
 
-000006a0 <free>:
+000006b0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 6a0:	f3 0f 1e fb          	endbr32 
- 6a4:	55                   	push   %ebp
+ 6b0:	f3 0f 1e fb          	endbr32 
+ 6b4:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6a5:	a1 60 0b 00 00       	mov    0xb60,%eax
+ 6b5:	a1 80 0b 00 00       	mov    0xb80,%eax
 {
- 6aa:	89 e5                	mov    %esp,%ebp
- 6ac:	57                   	push   %edi
- 6ad:	56                   	push   %esi
- 6ae:	53                   	push   %ebx
- 6af:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 6b2:	8b 10                	mov    (%eax),%edx
+ 6ba:	89 e5                	mov    %esp,%ebp
+ 6bc:	57                   	push   %edi
+ 6bd:	56                   	push   %esi
+ 6be:	53                   	push   %ebx
+ 6bf:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6c2:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 6b4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 6c4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6b7:	39 c8                	cmp    %ecx,%eax
- 6b9:	73 15                	jae    6d0 <free+0x30>
- 6bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 6bf:	90                   	nop
- 6c0:	39 d1                	cmp    %edx,%ecx
- 6c2:	72 14                	jb     6d8 <free+0x38>
+ 6c7:	39 c8                	cmp    %ecx,%eax
+ 6c9:	73 15                	jae    6e0 <free+0x30>
+ 6cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6cf:	90                   	nop
+ 6d0:	39 d1                	cmp    %edx,%ecx
+ 6d2:	72 14                	jb     6e8 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6c4:	39 d0                	cmp    %edx,%eax
- 6c6:	73 10                	jae    6d8 <free+0x38>
+ 6d4:	39 d0                	cmp    %edx,%eax
+ 6d6:	73 10                	jae    6e8 <free+0x38>
 {
- 6c8:	89 d0                	mov    %edx,%eax
+ 6d8:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6ca:	8b 10                	mov    (%eax),%edx
- 6cc:	39 c8                	cmp    %ecx,%eax
- 6ce:	72 f0                	jb     6c0 <free+0x20>
+ 6da:	8b 10                	mov    (%eax),%edx
+ 6dc:	39 c8                	cmp    %ecx,%eax
+ 6de:	72 f0                	jb     6d0 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6d0:	39 d0                	cmp    %edx,%eax
- 6d2:	72 f4                	jb     6c8 <free+0x28>
- 6d4:	39 d1                	cmp    %edx,%ecx
- 6d6:	73 f0                	jae    6c8 <free+0x28>
+ 6e0:	39 d0                	cmp    %edx,%eax
+ 6e2:	72 f4                	jb     6d8 <free+0x28>
+ 6e4:	39 d1                	cmp    %edx,%ecx
+ 6e6:	73 f0                	jae    6d8 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 6d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 6db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 6de:	39 fa                	cmp    %edi,%edx
- 6e0:	74 1e                	je     700 <free+0x60>
+ 6e8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6eb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6ee:	39 fa                	cmp    %edi,%edx
+ 6f0:	74 1e                	je     710 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 6e2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 6f2:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 6e5:	8b 50 04             	mov    0x4(%eax),%edx
- 6e8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 6eb:	39 f1                	cmp    %esi,%ecx
- 6ed:	74 28                	je     717 <free+0x77>
+ 6f5:	8b 50 04             	mov    0x4(%eax),%edx
+ 6f8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6fb:	39 f1                	cmp    %esi,%ecx
+ 6fd:	74 28                	je     727 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 6ef:	89 08                	mov    %ecx,(%eax)
+ 6ff:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 6f1:	5b                   	pop    %ebx
+ 701:	5b                   	pop    %ebx
   freep = p;
- 6f2:	a3 60 0b 00 00       	mov    %eax,0xb60
+ 702:	a3 80 0b 00 00       	mov    %eax,0xb80
 }
- 6f7:	5e                   	pop    %esi
- 6f8:	5f                   	pop    %edi
- 6f9:	5d                   	pop    %ebp
- 6fa:	c3                   	ret    
- 6fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 6ff:	90                   	nop
+ 707:	5e                   	pop    %esi
+ 708:	5f                   	pop    %edi
+ 709:	5d                   	pop    %ebp
+ 70a:	c3                   	ret    
+ 70b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 70f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 700:	03 72 04             	add    0x4(%edx),%esi
- 703:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 710:	03 72 04             	add    0x4(%edx),%esi
+ 713:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 706:	8b 10                	mov    (%eax),%edx
- 708:	8b 12                	mov    (%edx),%edx
- 70a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 716:	8b 10                	mov    (%eax),%edx
+ 718:	8b 12                	mov    (%edx),%edx
+ 71a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 70d:	8b 50 04             	mov    0x4(%eax),%edx
- 710:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 713:	39 f1                	cmp    %esi,%ecx
- 715:	75 d8                	jne    6ef <free+0x4f>
+ 71d:	8b 50 04             	mov    0x4(%eax),%edx
+ 720:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 723:	39 f1                	cmp    %esi,%ecx
+ 725:	75 d8                	jne    6ff <free+0x4f>
     p->s.size += bp->s.size;
- 717:	03 53 fc             	add    -0x4(%ebx),%edx
+ 727:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 71a:	a3 60 0b 00 00       	mov    %eax,0xb60
+ 72a:	a3 80 0b 00 00       	mov    %eax,0xb80
     p->s.size += bp->s.size;
- 71f:	89 50 04             	mov    %edx,0x4(%eax)
+ 72f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 722:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 725:	89 10                	mov    %edx,(%eax)
+ 732:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 735:	89 10                	mov    %edx,(%eax)
 }
- 727:	5b                   	pop    %ebx
- 728:	5e                   	pop    %esi
- 729:	5f                   	pop    %edi
- 72a:	5d                   	pop    %ebp
- 72b:	c3                   	ret    
- 72c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 737:	5b                   	pop    %ebx
+ 738:	5e                   	pop    %esi
+ 739:	5f                   	pop    %edi
+ 73a:	5d                   	pop    %ebp
+ 73b:	c3                   	ret    
+ 73c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000730 <malloc>:
+00000740 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 730:	f3 0f 1e fb          	endbr32 
- 734:	55                   	push   %ebp
- 735:	89 e5                	mov    %esp,%ebp
- 737:	57                   	push   %edi
- 738:	56                   	push   %esi
- 739:	53                   	push   %ebx
- 73a:	83 ec 1c             	sub    $0x1c,%esp
+ 740:	f3 0f 1e fb          	endbr32 
+ 744:	55                   	push   %ebp
+ 745:	89 e5                	mov    %esp,%ebp
+ 747:	57                   	push   %edi
+ 748:	56                   	push   %esi
+ 749:	53                   	push   %ebx
+ 74a:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 73d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 74d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 740:	8b 3d 60 0b 00 00    	mov    0xb60,%edi
+ 750:	8b 3d 80 0b 00 00    	mov    0xb80,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 746:	8d 70 07             	lea    0x7(%eax),%esi
- 749:	c1 ee 03             	shr    $0x3,%esi
- 74c:	83 c6 01             	add    $0x1,%esi
+ 756:	8d 70 07             	lea    0x7(%eax),%esi
+ 759:	c1 ee 03             	shr    $0x3,%esi
+ 75c:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 74f:	85 ff                	test   %edi,%edi
- 751:	0f 84 a9 00 00 00    	je     800 <malloc+0xd0>
+ 75f:	85 ff                	test   %edi,%edi
+ 761:	0f 84 a9 00 00 00    	je     810 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 757:	8b 07                	mov    (%edi),%eax
+ 767:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 759:	8b 48 04             	mov    0x4(%eax),%ecx
- 75c:	39 f1                	cmp    %esi,%ecx
- 75e:	73 6d                	jae    7cd <malloc+0x9d>
- 760:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 766:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 76b:	0f 43 de             	cmovae %esi,%ebx
+ 769:	8b 48 04             	mov    0x4(%eax),%ecx
+ 76c:	39 f1                	cmp    %esi,%ecx
+ 76e:	73 6d                	jae    7dd <malloc+0x9d>
+ 770:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 776:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 77b:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 76e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 775:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 778:	eb 17                	jmp    791 <malloc+0x61>
- 77a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 77e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 785:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 788:	eb 17                	jmp    7a1 <malloc+0x61>
+ 78a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 780:	8b 10                	mov    (%eax),%edx
+ 790:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 782:	8b 4a 04             	mov    0x4(%edx),%ecx
- 785:	39 f1                	cmp    %esi,%ecx
- 787:	73 4f                	jae    7d8 <malloc+0xa8>
- 789:	8b 3d 60 0b 00 00    	mov    0xb60,%edi
- 78f:	89 d0                	mov    %edx,%eax
+ 792:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 795:	39 f1                	cmp    %esi,%ecx
+ 797:	73 4f                	jae    7e8 <malloc+0xa8>
+ 799:	8b 3d 80 0b 00 00    	mov    0xb80,%edi
+ 79f:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 791:	39 c7                	cmp    %eax,%edi
- 793:	75 eb                	jne    780 <malloc+0x50>
+ 7a1:	39 c7                	cmp    %eax,%edi
+ 7a3:	75 eb                	jne    790 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 795:	83 ec 0c             	sub    $0xc,%esp
- 798:	ff 75 e4             	pushl  -0x1c(%ebp)
- 79b:	e8 5b fc ff ff       	call   3fb <sbrk>
+ 7a5:	83 ec 0c             	sub    $0xc,%esp
+ 7a8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 7ab:	e8 4b fc ff ff       	call   3fb <sbrk>
   if(p == (char*)-1)
- 7a0:	83 c4 10             	add    $0x10,%esp
- 7a3:	83 f8 ff             	cmp    $0xffffffff,%eax
- 7a6:	74 1b                	je     7c3 <malloc+0x93>
+ 7b0:	83 c4 10             	add    $0x10,%esp
+ 7b3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7b6:	74 1b                	je     7d3 <malloc+0x93>
   hp->s.size = nu;
- 7a8:	89 58 04             	mov    %ebx,0x4(%eax)
+ 7b8:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 7ab:	83 ec 0c             	sub    $0xc,%esp
- 7ae:	83 c0 08             	add    $0x8,%eax
- 7b1:	50                   	push   %eax
- 7b2:	e8 e9 fe ff ff       	call   6a0 <free>
+ 7bb:	83 ec 0c             	sub    $0xc,%esp
+ 7be:	83 c0 08             	add    $0x8,%eax
+ 7c1:	50                   	push   %eax
+ 7c2:	e8 e9 fe ff ff       	call   6b0 <free>
   return freep;
- 7b7:	a1 60 0b 00 00       	mov    0xb60,%eax
+ 7c7:	a1 80 0b 00 00       	mov    0xb80,%eax
       if((p = morecore(nunits)) == 0)
- 7bc:	83 c4 10             	add    $0x10,%esp
- 7bf:	85 c0                	test   %eax,%eax
- 7c1:	75 bd                	jne    780 <malloc+0x50>
+ 7cc:	83 c4 10             	add    $0x10,%esp
+ 7cf:	85 c0                	test   %eax,%eax
+ 7d1:	75 bd                	jne    790 <malloc+0x50>
         return 0;
   }
 }
- 7c3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 7c6:	31 c0                	xor    %eax,%eax
+ 7d6:	31 c0                	xor    %eax,%eax
 }
- 7c8:	5b                   	pop    %ebx
- 7c9:	5e                   	pop    %esi
- 7ca:	5f                   	pop    %edi
- 7cb:	5d                   	pop    %ebp
- 7cc:	c3                   	ret    
+ 7d8:	5b                   	pop    %ebx
+ 7d9:	5e                   	pop    %esi
+ 7da:	5f                   	pop    %edi
+ 7db:	5d                   	pop    %ebp
+ 7dc:	c3                   	ret    
     if(p->s.size >= nunits){
- 7cd:	89 c2                	mov    %eax,%edx
- 7cf:	89 f8                	mov    %edi,%eax
- 7d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7dd:	89 c2                	mov    %eax,%edx
+ 7df:	89 f8                	mov    %edi,%eax
+ 7e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 7d8:	39 ce                	cmp    %ecx,%esi
- 7da:	74 54                	je     830 <malloc+0x100>
+ 7e8:	39 ce                	cmp    %ecx,%esi
+ 7ea:	74 54                	je     840 <malloc+0x100>
         p->s.size -= nunits;
- 7dc:	29 f1                	sub    %esi,%ecx
- 7de:	89 4a 04             	mov    %ecx,0x4(%edx)
+ 7ec:	29 f1                	sub    %esi,%ecx
+ 7ee:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- 7e1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ 7f1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- 7e4:	89 72 04             	mov    %esi,0x4(%edx)
+ 7f4:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 7e7:	a3 60 0b 00 00       	mov    %eax,0xb60
+ 7f7:	a3 80 0b 00 00       	mov    %eax,0xb80
 }
- 7ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 7ef:	8d 42 08             	lea    0x8(%edx),%eax
+ 7ff:	8d 42 08             	lea    0x8(%edx),%eax
 }
- 7f2:	5b                   	pop    %ebx
- 7f3:	5e                   	pop    %esi
- 7f4:	5f                   	pop    %edi
- 7f5:	5d                   	pop    %ebp
- 7f6:	c3                   	ret    
- 7f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 7fe:	66 90                	xchg   %ax,%ax
+ 802:	5b                   	pop    %ebx
+ 803:	5e                   	pop    %esi
+ 804:	5f                   	pop    %edi
+ 805:	5d                   	pop    %ebp
+ 806:	c3                   	ret    
+ 807:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 80e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 800:	c7 05 60 0b 00 00 64 	movl   $0xb64,0xb60
- 807:	0b 00 00 
+ 810:	c7 05 80 0b 00 00 84 	movl   $0xb84,0xb80
+ 817:	0b 00 00 
     base.s.size = 0;
- 80a:	bf 64 0b 00 00       	mov    $0xb64,%edi
+ 81a:	bf 84 0b 00 00       	mov    $0xb84,%edi
     base.s.ptr = freep = prevp = &base;
- 80f:	c7 05 64 0b 00 00 64 	movl   $0xb64,0xb64
- 816:	0b 00 00 
+ 81f:	c7 05 84 0b 00 00 84 	movl   $0xb84,0xb84
+ 826:	0b 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 819:	89 f8                	mov    %edi,%eax
+ 829:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 81b:	c7 05 68 0b 00 00 00 	movl   $0x0,0xb68
- 822:	00 00 00 
+ 82b:	c7 05 88 0b 00 00 00 	movl   $0x0,0xb88
+ 832:	00 00 00 
     if(p->s.size >= nunits){
- 825:	e9 36 ff ff ff       	jmp    760 <malloc+0x30>
- 82a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 835:	e9 36 ff ff ff       	jmp    770 <malloc+0x30>
+ 83a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 830:	8b 0a                	mov    (%edx),%ecx
- 832:	89 08                	mov    %ecx,(%eax)
- 834:	eb b1                	jmp    7e7 <malloc+0xb7>
+ 840:	8b 0a                	mov    (%edx),%ecx
+ 842:	89 08                	mov    %ecx,(%eax)
+ 844:	eb b1                	jmp    7f7 <malloc+0xb7>
Binary files xv6-public-original/cat.o and xv6-public/cat.o differ
diff -ruN xv6-public-original/cat.sym xv6-public/cat.sym
--- xv6-public-original/cat.sym	2022-08-13 16:28:53.924465000 +0530
+++ xv6-public/cat.sym	2022-09-05 20:56:49.262960000 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000838 .rodata
-0000088c .eh_frame
-00000b60 .bss
+00000848 .rodata
+0000089c .eh_frame
+00000b80 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,19 +13,20 @@
 00000000 cat.c
 00000000 ulib.c
 00000000 printf.c
-00000420 printint
-00000878 digits.1085
+00000430 printint
+00000888 digits.1094
 00000000 umalloc.c
-00000b60 freep
-00000b64 base
+00000b80 freep
+00000b84 base
 00000110 strcpy
-000004d0 printf
+000004e0 printf
+00000423 thread_exit
 00000340 memmove
 000003bb mknod
 00000230 gets
 000003f3 getpid
 00000090 cat
-00000730 malloc
+00000740 malloc
 00000403 sleep
 00000383 pipe
 00000393 write
@@ -39,21 +40,23 @@
 0000036b fork
 000003fb sbrk
 0000040b uptime
-00000b5c __bss_start
+00000b6c __bss_start
 000001d0 memset
 00000000 main
 00000140 strcmp
 000003eb dup
-00000b80 buf
+00000ba0 buf
 000002b0 stat
-00000b5c _edata
-00000d80 _end
+00000b6c _edata
+00000da0 _end
 000003d3 link
 00000373 exit
 00000300 atoi
 00000190 strlen
 000003b3 open
 000001f0 strchr
+00000413 thread_create
 000003db mkdir
 0000039b close
-000006a0 free
+0000041b thread_join
+000006b0 free
Binary files xv6-public-original/console.o and xv6-public/console.o differ
Binary files xv6-public-original/_echo and xv6-public/_echo differ
diff -ruN xv6-public-original/echo.asm xv6-public/echo.asm
--- xv6-public-original/echo.asm	2022-08-13 16:28:54.000441000 +0530
+++ xv6-public/echo.asm	2022-09-05 20:56:49.350960000 +0530
@@ -36,23 +36,23 @@
   2d:	39 f3                	cmp    %esi,%ebx
   2f:	74 26                	je     57 <main+0x57>
   31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  38:	68 a8 07 00 00       	push   $0x7a8
+  38:	68 b8 07 00 00       	push   $0x7b8
   3d:	83 c3 04             	add    $0x4,%ebx
   40:	50                   	push   %eax
-  41:	68 aa 07 00 00       	push   $0x7aa
+  41:	68 ba 07 00 00       	push   $0x7ba
   46:	6a 01                	push   $0x1
-  48:	e8 f3 03 00 00       	call   440 <printf>
+  48:	e8 03 04 00 00       	call   450 <printf>
   for(i = 1; i < argc; i++)
   4d:	8b 43 fc             	mov    -0x4(%ebx),%eax
     printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
   50:	83 c4 10             	add    $0x10,%esp
   53:	39 f3                	cmp    %esi,%ebx
   55:	75 e1                	jne    38 <main+0x38>
-  57:	68 af 07 00 00       	push   $0x7af
+  57:	68 bf 07 00 00       	push   $0x7bf
   5c:	50                   	push   %eax
-  5d:	68 aa 07 00 00       	push   $0x7aa
+  5d:	68 ba 07 00 00       	push   $0x7ba
   62:	6a 01                	push   $0x1
-  64:	e8 d7 03 00 00       	call   440 <printf>
+  64:	e8 e7 03 00 00       	call   450 <printf>
   69:	83 c4 10             	add    $0x10,%esp
   exit();
   6c:	e8 72 02 00 00       	call   2e3 <exit>
@@ -591,609 +591,623 @@
  37b:	b8 0e 00 00 00       	mov    $0xe,%eax
  380:	cd 40                	int    $0x40
  382:	c3                   	ret    
- 383:	66 90                	xchg   %ax,%ax
- 385:	66 90                	xchg   %ax,%ax
- 387:	66 90                	xchg   %ax,%ax
- 389:	66 90                	xchg   %ax,%ax
- 38b:	66 90                	xchg   %ax,%ax
- 38d:	66 90                	xchg   %ax,%ax
- 38f:	90                   	nop
 
-00000390 <printint>:
+00000383 <thread_create>:
+SYSCALL(thread_create)
+ 383:	b8 16 00 00 00       	mov    $0x16,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <thread_join>:
+SYSCALL(thread_join)
+ 38b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <thread_exit>:
+SYSCALL(thread_exit)
+ 393:	b8 18 00 00 00       	mov    $0x18,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+ 39b:	66 90                	xchg   %ax,%ax
+ 39d:	66 90                	xchg   %ax,%ax
+ 39f:	90                   	nop
+
+000003a0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 390:	55                   	push   %ebp
- 391:	89 e5                	mov    %esp,%ebp
- 393:	57                   	push   %edi
- 394:	56                   	push   %esi
- 395:	53                   	push   %ebx
- 396:	83 ec 3c             	sub    $0x3c,%esp
- 399:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	56                   	push   %esi
+ 3a5:	53                   	push   %ebx
+ 3a6:	83 ec 3c             	sub    $0x3c,%esp
+ 3a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 39c:	89 d1                	mov    %edx,%ecx
+ 3ac:	89 d1                	mov    %edx,%ecx
 {
- 39e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 3ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 3a1:	85 d2                	test   %edx,%edx
- 3a3:	0f 89 7f 00 00 00    	jns    428 <printint+0x98>
- 3a9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 3ad:	74 79                	je     428 <printint+0x98>
+ 3b1:	85 d2                	test   %edx,%edx
+ 3b3:	0f 89 7f 00 00 00    	jns    438 <printint+0x98>
+ 3b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3bd:	74 79                	je     438 <printint+0x98>
     neg = 1;
- 3af:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 3bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 3b6:	f7 d9                	neg    %ecx
+ 3c6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 3b8:	31 db                	xor    %ebx,%ebx
- 3ba:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 3bd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3c8:	31 db                	xor    %ebx,%ebx
+ 3ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 3c0:	89 c8                	mov    %ecx,%eax
- 3c2:	31 d2                	xor    %edx,%edx
- 3c4:	89 cf                	mov    %ecx,%edi
- 3c6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3c9:	0f b6 92 b8 07 00 00 	movzbl 0x7b8(%edx),%edx
- 3d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3d3:	89 d8                	mov    %ebx,%eax
- 3d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 3d0:	89 c8                	mov    %ecx,%eax
+ 3d2:	31 d2                	xor    %edx,%edx
+ 3d4:	89 cf                	mov    %ecx,%edi
+ 3d6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3d9:	0f b6 92 c8 07 00 00 	movzbl 0x7c8(%edx),%edx
+ 3e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3e3:	89 d8                	mov    %ebx,%eax
+ 3e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 3d8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 3e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 3db:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 3eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 3de:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3e1:	76 dd                	jbe    3c0 <printint+0x30>
+ 3ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3f1:	76 dd                	jbe    3d0 <printint+0x30>
   if(neg)
- 3e3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3e6:	85 c9                	test   %ecx,%ecx
- 3e8:	74 0c                	je     3f6 <printint+0x66>
+ 3f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3f6:	85 c9                	test   %ecx,%ecx
+ 3f8:	74 0c                	je     406 <printint+0x66>
     buf[i++] = '-';
- 3ea:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 3fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 3ef:	89 d8                	mov    %ebx,%eax
+ 3ff:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 3f1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 401:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 3f6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3f9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3fd:	eb 07                	jmp    406 <printint+0x76>
- 3ff:	90                   	nop
- 400:	0f b6 13             	movzbl (%ebx),%edx
- 403:	83 eb 01             	sub    $0x1,%ebx
+ 406:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 409:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 40d:	eb 07                	jmp    416 <printint+0x76>
+ 40f:	90                   	nop
+ 410:	0f b6 13             	movzbl (%ebx),%edx
+ 413:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 406:	83 ec 04             	sub    $0x4,%esp
- 409:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 40c:	6a 01                	push   $0x1
- 40e:	56                   	push   %esi
- 40f:	57                   	push   %edi
- 410:	e8 ee fe ff ff       	call   303 <write>
+ 416:	83 ec 04             	sub    $0x4,%esp
+ 419:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 41c:	6a 01                	push   $0x1
+ 41e:	56                   	push   %esi
+ 41f:	57                   	push   %edi
+ 420:	e8 de fe ff ff       	call   303 <write>
   while(--i >= 0)
- 415:	83 c4 10             	add    $0x10,%esp
- 418:	39 de                	cmp    %ebx,%esi
- 41a:	75 e4                	jne    400 <printint+0x70>
+ 425:	83 c4 10             	add    $0x10,%esp
+ 428:	39 de                	cmp    %ebx,%esi
+ 42a:	75 e4                	jne    410 <printint+0x70>
     putc(fd, buf[i]);
 }
- 41c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 41f:	5b                   	pop    %ebx
- 420:	5e                   	pop    %esi
- 421:	5f                   	pop    %edi
- 422:	5d                   	pop    %ebp
- 423:	c3                   	ret    
- 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 42c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 42f:	5b                   	pop    %ebx
+ 430:	5e                   	pop    %esi
+ 431:	5f                   	pop    %edi
+ 432:	5d                   	pop    %ebp
+ 433:	c3                   	ret    
+ 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 428:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 42f:	eb 87                	jmp    3b8 <printint+0x28>
- 431:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 438:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 43f:	90                   	nop
+ 438:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 43f:	eb 87                	jmp    3c8 <printint+0x28>
+ 441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 448:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44f:	90                   	nop
 
-00000440 <printf>:
+00000450 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 440:	f3 0f 1e fb          	endbr32 
- 444:	55                   	push   %ebp
- 445:	89 e5                	mov    %esp,%ebp
- 447:	57                   	push   %edi
- 448:	56                   	push   %esi
- 449:	53                   	push   %ebx
- 44a:	83 ec 2c             	sub    $0x2c,%esp
+ 450:	f3 0f 1e fb          	endbr32 
+ 454:	55                   	push   %ebp
+ 455:	89 e5                	mov    %esp,%ebp
+ 457:	57                   	push   %edi
+ 458:	56                   	push   %esi
+ 459:	53                   	push   %ebx
+ 45a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 44d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 450:	0f b6 1e             	movzbl (%esi),%ebx
- 453:	84 db                	test   %bl,%bl
- 455:	0f 84 b4 00 00 00    	je     50f <printf+0xcf>
+ 45d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 460:	0f b6 1e             	movzbl (%esi),%ebx
+ 463:	84 db                	test   %bl,%bl
+ 465:	0f 84 b4 00 00 00    	je     51f <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 45b:	8d 45 10             	lea    0x10(%ebp),%eax
- 45e:	83 c6 01             	add    $0x1,%esi
+ 46b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 46e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 461:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 471:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 464:	31 d2                	xor    %edx,%edx
+ 474:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 466:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 469:	eb 33                	jmp    49e <printf+0x5e>
- 46b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 46f:	90                   	nop
- 470:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 476:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 479:	eb 33                	jmp    4ae <printf+0x5e>
+ 47b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 47f:	90                   	nop
+ 480:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 473:	ba 25 00 00 00       	mov    $0x25,%edx
+ 483:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 478:	83 f8 25             	cmp    $0x25,%eax
- 47b:	74 17                	je     494 <printf+0x54>
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	74 17                	je     4a4 <printf+0x54>
   write(fd, &c, 1);
- 47d:	83 ec 04             	sub    $0x4,%esp
- 480:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 483:	6a 01                	push   $0x1
- 485:	57                   	push   %edi
- 486:	ff 75 08             	pushl  0x8(%ebp)
- 489:	e8 75 fe ff ff       	call   303 <write>
- 48e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 48d:	83 ec 04             	sub    $0x4,%esp
+ 490:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 493:	6a 01                	push   $0x1
+ 495:	57                   	push   %edi
+ 496:	ff 75 08             	pushl  0x8(%ebp)
+ 499:	e8 65 fe ff ff       	call   303 <write>
+ 49e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 491:	83 c4 10             	add    $0x10,%esp
+ 4a1:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 494:	0f b6 1e             	movzbl (%esi),%ebx
- 497:	83 c6 01             	add    $0x1,%esi
- 49a:	84 db                	test   %bl,%bl
- 49c:	74 71                	je     50f <printf+0xcf>
+ 4a4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4a7:	83 c6 01             	add    $0x1,%esi
+ 4aa:	84 db                	test   %bl,%bl
+ 4ac:	74 71                	je     51f <printf+0xcf>
     c = fmt[i] & 0xff;
- 49e:	0f be cb             	movsbl %bl,%ecx
- 4a1:	0f b6 c3             	movzbl %bl,%eax
+ 4ae:	0f be cb             	movsbl %bl,%ecx
+ 4b1:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 4a4:	85 d2                	test   %edx,%edx
- 4a6:	74 c8                	je     470 <printf+0x30>
+ 4b4:	85 d2                	test   %edx,%edx
+ 4b6:	74 c8                	je     480 <printf+0x30>
       }
     } else if(state == '%'){
- 4a8:	83 fa 25             	cmp    $0x25,%edx
- 4ab:	75 e7                	jne    494 <printf+0x54>
+ 4b8:	83 fa 25             	cmp    $0x25,%edx
+ 4bb:	75 e7                	jne    4a4 <printf+0x54>
       if(c == 'd'){
- 4ad:	83 f8 64             	cmp    $0x64,%eax
- 4b0:	0f 84 9a 00 00 00    	je     550 <printf+0x110>
+ 4bd:	83 f8 64             	cmp    $0x64,%eax
+ 4c0:	0f 84 9a 00 00 00    	je     560 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 4b6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 4bc:	83 f9 70             	cmp    $0x70,%ecx
- 4bf:	74 5f                	je     520 <printf+0xe0>
+ 4c6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4cc:	83 f9 70             	cmp    $0x70,%ecx
+ 4cf:	74 5f                	je     530 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 4c1:	83 f8 73             	cmp    $0x73,%eax
- 4c4:	0f 84 d6 00 00 00    	je     5a0 <printf+0x160>
+ 4d1:	83 f8 73             	cmp    $0x73,%eax
+ 4d4:	0f 84 d6 00 00 00    	je     5b0 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 4ca:	83 f8 63             	cmp    $0x63,%eax
- 4cd:	0f 84 8d 00 00 00    	je     560 <printf+0x120>
+ 4da:	83 f8 63             	cmp    $0x63,%eax
+ 4dd:	0f 84 8d 00 00 00    	je     570 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 4d3:	83 f8 25             	cmp    $0x25,%eax
- 4d6:	0f 84 b4 00 00 00    	je     590 <printf+0x150>
+ 4e3:	83 f8 25             	cmp    $0x25,%eax
+ 4e6:	0f 84 b4 00 00 00    	je     5a0 <printf+0x150>
   write(fd, &c, 1);
- 4dc:	83 ec 04             	sub    $0x4,%esp
- 4df:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4e3:	6a 01                	push   $0x1
- 4e5:	57                   	push   %edi
- 4e6:	ff 75 08             	pushl  0x8(%ebp)
- 4e9:	e8 15 fe ff ff       	call   303 <write>
+ 4ec:	83 ec 04             	sub    $0x4,%esp
+ 4ef:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4f3:	6a 01                	push   $0x1
+ 4f5:	57                   	push   %edi
+ 4f6:	ff 75 08             	pushl  0x8(%ebp)
+ 4f9:	e8 05 fe ff ff       	call   303 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 4ee:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4fe:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 4f1:	83 c4 0c             	add    $0xc,%esp
- 4f4:	6a 01                	push   $0x1
- 4f6:	83 c6 01             	add    $0x1,%esi
- 4f9:	57                   	push   %edi
- 4fa:	ff 75 08             	pushl  0x8(%ebp)
- 4fd:	e8 01 fe ff ff       	call   303 <write>
+ 501:	83 c4 0c             	add    $0xc,%esp
+ 504:	6a 01                	push   $0x1
+ 506:	83 c6 01             	add    $0x1,%esi
+ 509:	57                   	push   %edi
+ 50a:	ff 75 08             	pushl  0x8(%ebp)
+ 50d:	e8 f1 fd ff ff       	call   303 <write>
   for(i = 0; fmt[i]; i++){
- 502:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 512:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 506:	83 c4 10             	add    $0x10,%esp
+ 516:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 509:	31 d2                	xor    %edx,%edx
+ 519:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 50b:	84 db                	test   %bl,%bl
- 50d:	75 8f                	jne    49e <printf+0x5e>
+ 51b:	84 db                	test   %bl,%bl
+ 51d:	75 8f                	jne    4ae <printf+0x5e>
     }
   }
 }
- 50f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 512:	5b                   	pop    %ebx
- 513:	5e                   	pop    %esi
- 514:	5f                   	pop    %edi
- 515:	5d                   	pop    %ebp
- 516:	c3                   	ret    
- 517:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 51e:	66 90                	xchg   %ax,%ax
+ 51f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 522:	5b                   	pop    %ebx
+ 523:	5e                   	pop    %esi
+ 524:	5f                   	pop    %edi
+ 525:	5d                   	pop    %ebp
+ 526:	c3                   	ret    
+ 527:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 52e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 520:	83 ec 0c             	sub    $0xc,%esp
- 523:	b9 10 00 00 00       	mov    $0x10,%ecx
- 528:	6a 00                	push   $0x0
- 52a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 52d:	8b 45 08             	mov    0x8(%ebp),%eax
- 530:	8b 13                	mov    (%ebx),%edx
- 532:	e8 59 fe ff ff       	call   390 <printint>
+ 530:	83 ec 0c             	sub    $0xc,%esp
+ 533:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 538:	6a 00                	push   $0x0
+ 53a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 53d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 540:	8b 13                	mov    (%ebx),%edx
+ 542:	e8 59 fe ff ff       	call   3a0 <printint>
         ap++;
- 537:	89 d8                	mov    %ebx,%eax
- 539:	83 c4 10             	add    $0x10,%esp
+ 547:	89 d8                	mov    %ebx,%eax
+ 549:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 53c:	31 d2                	xor    %edx,%edx
+ 54c:	31 d2                	xor    %edx,%edx
         ap++;
- 53e:	83 c0 04             	add    $0x4,%eax
- 541:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 544:	e9 4b ff ff ff       	jmp    494 <printf+0x54>
- 549:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54e:	83 c0 04             	add    $0x4,%eax
+ 551:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 554:	e9 4b ff ff ff       	jmp    4a4 <printf+0x54>
+ 559:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 550:	83 ec 0c             	sub    $0xc,%esp
- 553:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 558:	6a 01                	push   $0x1
- 55a:	eb ce                	jmp    52a <printf+0xea>
- 55c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 560:	83 ec 0c             	sub    $0xc,%esp
+ 563:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 568:	6a 01                	push   $0x1
+ 56a:	eb ce                	jmp    53a <printf+0xea>
+ 56c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 560:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 570:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 563:	83 ec 04             	sub    $0x4,%esp
+ 573:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 566:	8b 03                	mov    (%ebx),%eax
+ 576:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 568:	6a 01                	push   $0x1
+ 578:	6a 01                	push   $0x1
         ap++;
- 56a:	83 c3 04             	add    $0x4,%ebx
+ 57a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 56d:	57                   	push   %edi
- 56e:	ff 75 08             	pushl  0x8(%ebp)
+ 57d:	57                   	push   %edi
+ 57e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 571:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 581:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 574:	e8 8a fd ff ff       	call   303 <write>
+ 584:	e8 7a fd ff ff       	call   303 <write>
         ap++;
- 579:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 57c:	83 c4 10             	add    $0x10,%esp
+ 589:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 58c:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 57f:	31 d2                	xor    %edx,%edx
- 581:	e9 0e ff ff ff       	jmp    494 <printf+0x54>
- 586:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 58d:	8d 76 00             	lea    0x0(%esi),%esi
+ 58f:	31 d2                	xor    %edx,%edx
+ 591:	e9 0e ff ff ff       	jmp    4a4 <printf+0x54>
+ 596:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 59d:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 590:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 5a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 593:	83 ec 04             	sub    $0x4,%esp
- 596:	e9 59 ff ff ff       	jmp    4f4 <printf+0xb4>
- 59b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 59f:	90                   	nop
+ 5a3:	83 ec 04             	sub    $0x4,%esp
+ 5a6:	e9 59 ff ff ff       	jmp    504 <printf+0xb4>
+ 5ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5af:	90                   	nop
         s = (char*)*ap;
- 5a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 5a3:	8b 18                	mov    (%eax),%ebx
+ 5b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5b3:	8b 18                	mov    (%eax),%ebx
         ap++;
- 5a5:	83 c0 04             	add    $0x4,%eax
- 5a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5b5:	83 c0 04             	add    $0x4,%eax
+ 5b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 5ab:	85 db                	test   %ebx,%ebx
- 5ad:	74 17                	je     5c6 <printf+0x186>
+ 5bb:	85 db                	test   %ebx,%ebx
+ 5bd:	74 17                	je     5d6 <printf+0x186>
         while(*s != 0){
- 5af:	0f b6 03             	movzbl (%ebx),%eax
+ 5bf:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 5b2:	31 d2                	xor    %edx,%edx
+ 5c2:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 5b4:	84 c0                	test   %al,%al
- 5b6:	0f 84 d8 fe ff ff    	je     494 <printf+0x54>
- 5bc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5bf:	89 de                	mov    %ebx,%esi
- 5c1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5c4:	eb 1a                	jmp    5e0 <printf+0x1a0>
+ 5c4:	84 c0                	test   %al,%al
+ 5c6:	0f 84 d8 fe ff ff    	je     4a4 <printf+0x54>
+ 5cc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5cf:	89 de                	mov    %ebx,%esi
+ 5d1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d4:	eb 1a                	jmp    5f0 <printf+0x1a0>
           s = "(null)";
- 5c6:	bb b1 07 00 00       	mov    $0x7b1,%ebx
+ 5d6:	bb c1 07 00 00       	mov    $0x7c1,%ebx
         while(*s != 0){
- 5cb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5ce:	b8 28 00 00 00       	mov    $0x28,%eax
- 5d3:	89 de                	mov    %ebx,%esi
- 5d5:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5df:	90                   	nop
+ 5db:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5de:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5e3:	89 de                	mov    %ebx,%esi
+ 5e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ef:	90                   	nop
   write(fd, &c, 1);
- 5e0:	83 ec 04             	sub    $0x4,%esp
+ 5f0:	83 ec 04             	sub    $0x4,%esp
           s++;
- 5e3:	83 c6 01             	add    $0x1,%esi
- 5e6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 5f3:	83 c6 01             	add    $0x1,%esi
+ 5f6:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 5e9:	6a 01                	push   $0x1
- 5eb:	57                   	push   %edi
- 5ec:	53                   	push   %ebx
- 5ed:	e8 11 fd ff ff       	call   303 <write>
+ 5f9:	6a 01                	push   $0x1
+ 5fb:	57                   	push   %edi
+ 5fc:	53                   	push   %ebx
+ 5fd:	e8 01 fd ff ff       	call   303 <write>
         while(*s != 0){
- 5f2:	0f b6 06             	movzbl (%esi),%eax
- 5f5:	83 c4 10             	add    $0x10,%esp
- 5f8:	84 c0                	test   %al,%al
- 5fa:	75 e4                	jne    5e0 <printf+0x1a0>
- 5fc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 602:	0f b6 06             	movzbl (%esi),%eax
+ 605:	83 c4 10             	add    $0x10,%esp
+ 608:	84 c0                	test   %al,%al
+ 60a:	75 e4                	jne    5f0 <printf+0x1a0>
+ 60c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 5ff:	31 d2                	xor    %edx,%edx
- 601:	e9 8e fe ff ff       	jmp    494 <printf+0x54>
- 606:	66 90                	xchg   %ax,%ax
- 608:	66 90                	xchg   %ax,%ax
- 60a:	66 90                	xchg   %ax,%ax
- 60c:	66 90                	xchg   %ax,%ax
- 60e:	66 90                	xchg   %ax,%ax
+ 60f:	31 d2                	xor    %edx,%edx
+ 611:	e9 8e fe ff ff       	jmp    4a4 <printf+0x54>
+ 616:	66 90                	xchg   %ax,%ax
+ 618:	66 90                	xchg   %ax,%ax
+ 61a:	66 90                	xchg   %ax,%ax
+ 61c:	66 90                	xchg   %ax,%ax
+ 61e:	66 90                	xchg   %ax,%ax
 
-00000610 <free>:
+00000620 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 610:	f3 0f 1e fb          	endbr32 
- 614:	55                   	push   %ebp
+ 620:	f3 0f 1e fb          	endbr32 
+ 624:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 615:	a1 68 0a 00 00       	mov    0xa68,%eax
+ 625:	a1 78 0a 00 00       	mov    0xa78,%eax
 {
- 61a:	89 e5                	mov    %esp,%ebp
- 61c:	57                   	push   %edi
- 61d:	56                   	push   %esi
- 61e:	53                   	push   %ebx
- 61f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 622:	8b 10                	mov    (%eax),%edx
+ 62a:	89 e5                	mov    %esp,%ebp
+ 62c:	57                   	push   %edi
+ 62d:	56                   	push   %esi
+ 62e:	53                   	push   %ebx
+ 62f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 632:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 624:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 634:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 627:	39 c8                	cmp    %ecx,%eax
- 629:	73 15                	jae    640 <free+0x30>
- 62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 62f:	90                   	nop
- 630:	39 d1                	cmp    %edx,%ecx
- 632:	72 14                	jb     648 <free+0x38>
+ 637:	39 c8                	cmp    %ecx,%eax
+ 639:	73 15                	jae    650 <free+0x30>
+ 63b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 63f:	90                   	nop
+ 640:	39 d1                	cmp    %edx,%ecx
+ 642:	72 14                	jb     658 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 634:	39 d0                	cmp    %edx,%eax
- 636:	73 10                	jae    648 <free+0x38>
+ 644:	39 d0                	cmp    %edx,%eax
+ 646:	73 10                	jae    658 <free+0x38>
 {
- 638:	89 d0                	mov    %edx,%eax
+ 648:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 63a:	8b 10                	mov    (%eax),%edx
- 63c:	39 c8                	cmp    %ecx,%eax
- 63e:	72 f0                	jb     630 <free+0x20>
+ 64a:	8b 10                	mov    (%eax),%edx
+ 64c:	39 c8                	cmp    %ecx,%eax
+ 64e:	72 f0                	jb     640 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 640:	39 d0                	cmp    %edx,%eax
- 642:	72 f4                	jb     638 <free+0x28>
- 644:	39 d1                	cmp    %edx,%ecx
- 646:	73 f0                	jae    638 <free+0x28>
+ 650:	39 d0                	cmp    %edx,%eax
+ 652:	72 f4                	jb     648 <free+0x28>
+ 654:	39 d1                	cmp    %edx,%ecx
+ 656:	73 f0                	jae    648 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 64e:	39 fa                	cmp    %edi,%edx
- 650:	74 1e                	je     670 <free+0x60>
+ 658:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 65b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 65e:	39 fa                	cmp    %edi,%edx
+ 660:	74 1e                	je     680 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 652:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 662:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 655:	8b 50 04             	mov    0x4(%eax),%edx
- 658:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 65b:	39 f1                	cmp    %esi,%ecx
- 65d:	74 28                	je     687 <free+0x77>
+ 665:	8b 50 04             	mov    0x4(%eax),%edx
+ 668:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 66b:	39 f1                	cmp    %esi,%ecx
+ 66d:	74 28                	je     697 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 65f:	89 08                	mov    %ecx,(%eax)
+ 66f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 661:	5b                   	pop    %ebx
+ 671:	5b                   	pop    %ebx
   freep = p;
- 662:	a3 68 0a 00 00       	mov    %eax,0xa68
+ 672:	a3 78 0a 00 00       	mov    %eax,0xa78
 }
- 667:	5e                   	pop    %esi
- 668:	5f                   	pop    %edi
- 669:	5d                   	pop    %ebp
- 66a:	c3                   	ret    
- 66b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 66f:	90                   	nop
+ 677:	5e                   	pop    %esi
+ 678:	5f                   	pop    %edi
+ 679:	5d                   	pop    %ebp
+ 67a:	c3                   	ret    
+ 67b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 67f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 670:	03 72 04             	add    0x4(%edx),%esi
- 673:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 680:	03 72 04             	add    0x4(%edx),%esi
+ 683:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 676:	8b 10                	mov    (%eax),%edx
- 678:	8b 12                	mov    (%edx),%edx
- 67a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 686:	8b 10                	mov    (%eax),%edx
+ 688:	8b 12                	mov    (%edx),%edx
+ 68a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 67d:	8b 50 04             	mov    0x4(%eax),%edx
- 680:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 683:	39 f1                	cmp    %esi,%ecx
- 685:	75 d8                	jne    65f <free+0x4f>
+ 68d:	8b 50 04             	mov    0x4(%eax),%edx
+ 690:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 693:	39 f1                	cmp    %esi,%ecx
+ 695:	75 d8                	jne    66f <free+0x4f>
     p->s.size += bp->s.size;
- 687:	03 53 fc             	add    -0x4(%ebx),%edx
+ 697:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 68a:	a3 68 0a 00 00       	mov    %eax,0xa68
+ 69a:	a3 78 0a 00 00       	mov    %eax,0xa78
     p->s.size += bp->s.size;
- 68f:	89 50 04             	mov    %edx,0x4(%eax)
+ 69f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 692:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 695:	89 10                	mov    %edx,(%eax)
+ 6a2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6a5:	89 10                	mov    %edx,(%eax)
 }
- 697:	5b                   	pop    %ebx
- 698:	5e                   	pop    %esi
- 699:	5f                   	pop    %edi
- 69a:	5d                   	pop    %ebp
- 69b:	c3                   	ret    
- 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6a7:	5b                   	pop    %ebx
+ 6a8:	5e                   	pop    %esi
+ 6a9:	5f                   	pop    %edi
+ 6aa:	5d                   	pop    %ebp
+ 6ab:	c3                   	ret    
+ 6ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-000006a0 <malloc>:
+000006b0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 6a0:	f3 0f 1e fb          	endbr32 
- 6a4:	55                   	push   %ebp
- 6a5:	89 e5                	mov    %esp,%ebp
- 6a7:	57                   	push   %edi
- 6a8:	56                   	push   %esi
- 6a9:	53                   	push   %ebx
- 6aa:	83 ec 1c             	sub    $0x1c,%esp
+ 6b0:	f3 0f 1e fb          	endbr32 
+ 6b4:	55                   	push   %ebp
+ 6b5:	89 e5                	mov    %esp,%ebp
+ 6b7:	57                   	push   %edi
+ 6b8:	56                   	push   %esi
+ 6b9:	53                   	push   %ebx
+ 6ba:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6ad:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6bd:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 6b0:	8b 3d 68 0a 00 00    	mov    0xa68,%edi
+ 6c0:	8b 3d 78 0a 00 00    	mov    0xa78,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6b6:	8d 70 07             	lea    0x7(%eax),%esi
- 6b9:	c1 ee 03             	shr    $0x3,%esi
- 6bc:	83 c6 01             	add    $0x1,%esi
+ 6c6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6c9:	c1 ee 03             	shr    $0x3,%esi
+ 6cc:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 6bf:	85 ff                	test   %edi,%edi
- 6c1:	0f 84 a9 00 00 00    	je     770 <malloc+0xd0>
+ 6cf:	85 ff                	test   %edi,%edi
+ 6d1:	0f 84 a9 00 00 00    	je     780 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6c7:	8b 07                	mov    (%edi),%eax
+ 6d7:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 6c9:	8b 48 04             	mov    0x4(%eax),%ecx
- 6cc:	39 f1                	cmp    %esi,%ecx
- 6ce:	73 6d                	jae    73d <malloc+0x9d>
- 6d0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 6d6:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6db:	0f 43 de             	cmovae %esi,%ebx
+ 6d9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6dc:	39 f1                	cmp    %esi,%ecx
+ 6de:	73 6d                	jae    74d <malloc+0x9d>
+ 6e0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6e6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6eb:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 6de:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 6e5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 6e8:	eb 17                	jmp    701 <malloc+0x61>
- 6ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6ee:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6f5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6f8:	eb 17                	jmp    711 <malloc+0x61>
+ 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6f0:	8b 10                	mov    (%eax),%edx
+ 700:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 6f2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 6f5:	39 f1                	cmp    %esi,%ecx
- 6f7:	73 4f                	jae    748 <malloc+0xa8>
- 6f9:	8b 3d 68 0a 00 00    	mov    0xa68,%edi
- 6ff:	89 d0                	mov    %edx,%eax
+ 702:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 705:	39 f1                	cmp    %esi,%ecx
+ 707:	73 4f                	jae    758 <malloc+0xa8>
+ 709:	8b 3d 78 0a 00 00    	mov    0xa78,%edi
+ 70f:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 701:	39 c7                	cmp    %eax,%edi
- 703:	75 eb                	jne    6f0 <malloc+0x50>
+ 711:	39 c7                	cmp    %eax,%edi
+ 713:	75 eb                	jne    700 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 705:	83 ec 0c             	sub    $0xc,%esp
- 708:	ff 75 e4             	pushl  -0x1c(%ebp)
- 70b:	e8 5b fc ff ff       	call   36b <sbrk>
+ 715:	83 ec 0c             	sub    $0xc,%esp
+ 718:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 71b:	e8 4b fc ff ff       	call   36b <sbrk>
   if(p == (char*)-1)
- 710:	83 c4 10             	add    $0x10,%esp
- 713:	83 f8 ff             	cmp    $0xffffffff,%eax
- 716:	74 1b                	je     733 <malloc+0x93>
+ 720:	83 c4 10             	add    $0x10,%esp
+ 723:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 726:	74 1b                	je     743 <malloc+0x93>
   hp->s.size = nu;
- 718:	89 58 04             	mov    %ebx,0x4(%eax)
+ 728:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 71b:	83 ec 0c             	sub    $0xc,%esp
- 71e:	83 c0 08             	add    $0x8,%eax
- 721:	50                   	push   %eax
- 722:	e8 e9 fe ff ff       	call   610 <free>
+ 72b:	83 ec 0c             	sub    $0xc,%esp
+ 72e:	83 c0 08             	add    $0x8,%eax
+ 731:	50                   	push   %eax
+ 732:	e8 e9 fe ff ff       	call   620 <free>
   return freep;
- 727:	a1 68 0a 00 00       	mov    0xa68,%eax
+ 737:	a1 78 0a 00 00       	mov    0xa78,%eax
       if((p = morecore(nunits)) == 0)
- 72c:	83 c4 10             	add    $0x10,%esp
- 72f:	85 c0                	test   %eax,%eax
- 731:	75 bd                	jne    6f0 <malloc+0x50>
+ 73c:	83 c4 10             	add    $0x10,%esp
+ 73f:	85 c0                	test   %eax,%eax
+ 741:	75 bd                	jne    700 <malloc+0x50>
         return 0;
   }
 }
- 733:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 743:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 736:	31 c0                	xor    %eax,%eax
+ 746:	31 c0                	xor    %eax,%eax
 }
- 738:	5b                   	pop    %ebx
- 739:	5e                   	pop    %esi
- 73a:	5f                   	pop    %edi
- 73b:	5d                   	pop    %ebp
- 73c:	c3                   	ret    
+ 748:	5b                   	pop    %ebx
+ 749:	5e                   	pop    %esi
+ 74a:	5f                   	pop    %edi
+ 74b:	5d                   	pop    %ebp
+ 74c:	c3                   	ret    
     if(p->s.size >= nunits){
- 73d:	89 c2                	mov    %eax,%edx
- 73f:	89 f8                	mov    %edi,%eax
- 741:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 74d:	89 c2                	mov    %eax,%edx
+ 74f:	89 f8                	mov    %edi,%eax
+ 751:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 748:	39 ce                	cmp    %ecx,%esi
- 74a:	74 54                	je     7a0 <malloc+0x100>
+ 758:	39 ce                	cmp    %ecx,%esi
+ 75a:	74 54                	je     7b0 <malloc+0x100>
         p->s.size -= nunits;
- 74c:	29 f1                	sub    %esi,%ecx
- 74e:	89 4a 04             	mov    %ecx,0x4(%edx)
+ 75c:	29 f1                	sub    %esi,%ecx
+ 75e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- 751:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ 761:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- 754:	89 72 04             	mov    %esi,0x4(%edx)
+ 764:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 757:	a3 68 0a 00 00       	mov    %eax,0xa68
+ 767:	a3 78 0a 00 00       	mov    %eax,0xa78
 }
- 75c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 76c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 75f:	8d 42 08             	lea    0x8(%edx),%eax
+ 76f:	8d 42 08             	lea    0x8(%edx),%eax
 }
- 762:	5b                   	pop    %ebx
- 763:	5e                   	pop    %esi
- 764:	5f                   	pop    %edi
- 765:	5d                   	pop    %ebp
- 766:	c3                   	ret    
- 767:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 76e:	66 90                	xchg   %ax,%ax
+ 772:	5b                   	pop    %ebx
+ 773:	5e                   	pop    %esi
+ 774:	5f                   	pop    %edi
+ 775:	5d                   	pop    %ebp
+ 776:	c3                   	ret    
+ 777:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 77e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 770:	c7 05 68 0a 00 00 6c 	movl   $0xa6c,0xa68
- 777:	0a 00 00 
+ 780:	c7 05 78 0a 00 00 7c 	movl   $0xa7c,0xa78
+ 787:	0a 00 00 
     base.s.size = 0;
- 77a:	bf 6c 0a 00 00       	mov    $0xa6c,%edi
+ 78a:	bf 7c 0a 00 00       	mov    $0xa7c,%edi
     base.s.ptr = freep = prevp = &base;
- 77f:	c7 05 6c 0a 00 00 6c 	movl   $0xa6c,0xa6c
- 786:	0a 00 00 
+ 78f:	c7 05 7c 0a 00 00 7c 	movl   $0xa7c,0xa7c
+ 796:	0a 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 789:	89 f8                	mov    %edi,%eax
+ 799:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 78b:	c7 05 70 0a 00 00 00 	movl   $0x0,0xa70
- 792:	00 00 00 
+ 79b:	c7 05 80 0a 00 00 00 	movl   $0x0,0xa80
+ 7a2:	00 00 00 
     if(p->s.size >= nunits){
- 795:	e9 36 ff ff ff       	jmp    6d0 <malloc+0x30>
- 79a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7a5:	e9 36 ff ff ff       	jmp    6e0 <malloc+0x30>
+ 7aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 7a0:	8b 0a                	mov    (%edx),%ecx
- 7a2:	89 08                	mov    %ecx,(%eax)
- 7a4:	eb b1                	jmp    757 <malloc+0xb7>
+ 7b0:	8b 0a                	mov    (%edx),%ecx
+ 7b2:	89 08                	mov    %ecx,(%eax)
+ 7b4:	eb b1                	jmp    767 <malloc+0xb7>
Binary files xv6-public-original/echo.o and xv6-public/echo.o differ
diff -ruN xv6-public-original/echo.sym xv6-public/echo.sym
--- xv6-public-original/echo.sym	2022-08-13 16:28:54.016436000 +0530
+++ xv6-public/echo.sym	2022-09-05 20:56:49.358960000 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-000007a8 .rodata
-000007cc .eh_frame
-00000a68 .bss
+000007b8 .rodata
+000007dc .eh_frame
+00000a78 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,18 +13,19 @@
 00000000 echo.c
 00000000 ulib.c
 00000000 printf.c
-00000390 printint
-000007b8 digits.1085
+000003a0 printint
+000007c8 digits.1094
 00000000 umalloc.c
-00000a68 freep
-00000a6c base
+00000a78 freep
+00000a7c base
 00000080 strcpy
-00000440 printf
+00000450 printf
+00000393 thread_exit
 000002b0 memmove
 0000032b mknod
 000001a0 gets
 00000363 getpid
-000006a0 malloc
+000006b0 malloc
 00000373 sleep
 000002f3 pipe
 00000303 write
@@ -38,20 +39,22 @@
 000002db fork
 0000036b sbrk
 0000037b uptime
-00000a68 __bss_start
+00000a78 __bss_start
 00000140 memset
 00000000 main
 000000b0 strcmp
 0000035b dup
 00000220 stat
-00000a68 _edata
-00000a74 _end
+00000a78 _edata
+00000a84 _end
 00000343 link
 000002e3 exit
 00000270 atoi
 00000100 strlen
 00000323 open
 00000160 strchr
+00000383 thread_create
 0000034b mkdir
 0000030b close
-00000610 free
+0000038b thread_join
+00000620 free
Binary files xv6-public-original/entry.o and xv6-public/entry.o differ
Binary files xv6-public-original/entryother.o and xv6-public/entryother.o differ
Binary files xv6-public-original/exec.o and xv6-public/exec.o differ
Binary files xv6-public-original/file.o and xv6-public/file.o differ
Binary files xv6-public-original/_forktest and xv6-public/_forktest differ
diff -ruN xv6-public-original/forktest.asm xv6-public/forktest.asm
--- xv6-public-original/forktest.asm	2022-08-13 16:28:54.096410000 +0530
+++ xv6-public/forktest.asm	2022-09-05 20:56:49.450960000 +0530
@@ -60,11 +60,11 @@
 {
   5a:	83 ec 10             	sub    $0x10,%esp
   write(fd, s, strlen(s));
-  5d:	68 54 04 00 00       	push   $0x454
+  5d:	68 6c 04 00 00       	push   $0x46c
   62:	e8 69 01 00 00       	call   1d0 <strlen>
   67:	83 c4 0c             	add    $0xc,%esp
   6a:	50                   	push   %eax
-  6b:	68 54 04 00 00       	push   $0x454
+  6b:	68 6c 04 00 00       	push   $0x46c
   70:	6a 01                	push   $0x1
   72:	e8 5c 03 00 00       	call   3d3 <write>
   77:	83 c4 10             	add    $0x10,%esp
@@ -98,11 +98,11 @@
   b6:	75 49                	jne    101 <forktest+0xb1>
   write(fd, s, strlen(s));
   b8:	83 ec 0c             	sub    $0xc,%esp
-  bb:	68 86 04 00 00       	push   $0x486
+  bb:	68 9e 04 00 00       	push   $0x49e
   c0:	e8 0b 01 00 00       	call   1d0 <strlen>
   c5:	83 c4 0c             	add    $0xc,%esp
   c8:	50                   	push   %eax
-  c9:	68 86 04 00 00       	push   $0x486
+  c9:	68 9e 04 00 00       	push   $0x49e
   ce:	6a 01                	push   $0x1
   d0:	e8 fe 02 00 00       	call   3d3 <write>
 }
@@ -113,33 +113,33 @@
   da:	e8 d4 02 00 00       	call   3b3 <exit>
   write(fd, s, strlen(s));
   df:	83 ec 0c             	sub    $0xc,%esp
-  e2:	68 5f 04 00 00       	push   $0x45f
+  e2:	68 77 04 00 00       	push   $0x477
   e7:	e8 e4 00 00 00       	call   1d0 <strlen>
   ec:	83 c4 0c             	add    $0xc,%esp
   ef:	50                   	push   %eax
-  f0:	68 5f 04 00 00       	push   $0x45f
+  f0:	68 77 04 00 00       	push   $0x477
   f5:	6a 01                	push   $0x1
   f7:	e8 d7 02 00 00       	call   3d3 <write>
       exit();
   fc:	e8 b2 02 00 00       	call   3b3 <exit>
   write(fd, s, strlen(s));
  101:	83 ec 0c             	sub    $0xc,%esp
- 104:	68 73 04 00 00       	push   $0x473
+ 104:	68 8b 04 00 00       	push   $0x48b
  109:	e8 c2 00 00 00       	call   1d0 <strlen>
  10e:	83 c4 0c             	add    $0xc,%esp
  111:	50                   	push   %eax
- 112:	68 73 04 00 00       	push   $0x473
+ 112:	68 8b 04 00 00       	push   $0x48b
  117:	6a 01                	push   $0x1
  119:	e8 b5 02 00 00       	call   3d3 <write>
     exit();
  11e:	e8 90 02 00 00       	call   3b3 <exit>
   write(fd, s, strlen(s));
  123:	83 ec 0c             	sub    $0xc,%esp
- 126:	68 94 04 00 00       	push   $0x494
+ 126:	68 ac 04 00 00       	push   $0x4ac
  12b:	e8 a0 00 00 00       	call   1d0 <strlen>
  130:	83 c4 0c             	add    $0xc,%esp
  133:	50                   	push   %eax
- 134:	68 94 04 00 00       	push   $0x494
+ 134:	68 ac 04 00 00       	push   $0x4ac
  139:	6a 01                	push   $0x1
  13b:	e8 93 02 00 00       	call   3d3 <write>
     exit();
@@ -677,3 +677,21 @@
  44b:	b8 0e 00 00 00       	mov    $0xe,%eax
  450:	cd 40                	int    $0x40
  452:	c3                   	ret    
+
+00000453 <thread_create>:
+SYSCALL(thread_create)
+ 453:	b8 16 00 00 00       	mov    $0x16,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+
+0000045b <thread_join>:
+SYSCALL(thread_join)
+ 45b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 460:	cd 40                	int    $0x40
+ 462:	c3                   	ret    
+
+00000463 <thread_exit>:
+SYSCALL(thread_exit)
+ 463:	b8 18 00 00 00       	mov    $0x18,%eax
+ 468:	cd 40                	int    $0x40
+ 46a:	c3                   	ret    
Binary files xv6-public-original/forktest.o and xv6-public/forktest.o differ
Binary files xv6-public-original/fs.img and xv6-public/fs.img differ
Binary files xv6-public-original/fs.o and xv6-public/fs.o differ
diff -ruN xv6-public-original/.gdbinit xv6-public/.gdbinit
--- xv6-public-original/.gdbinit	2022-08-13 16:28:55.631922000 +0530
+++ xv6-public/.gdbinit	1970-01-01 05:30:00.000000000 +0530
@@ -1,27 +0,0 @@
-set $lastcs = -1
-
-define hook-stop
-  # There doesn't seem to be a good way to detect if we're in 16- or
-  # 32-bit mode, but in 32-bit mode we always run with CS == 8 in the
-  # kernel and CS == 35 in user space
-  if $cs == 8 || $cs == 35
-    if $lastcs != 8 && $lastcs != 35
-      set architecture i386
-    end
-    x/i $pc
-  else
-    if $lastcs == -1 || $lastcs == 8 || $lastcs == 35
-      set architecture i8086
-    end
-    # Translate the segment:offset into a physical address
-    printf "[%4x:%4x] ", $cs, $eip
-    x/i $cs*16+$eip
-  end
-  set $lastcs = $cs
-end
-
-echo + target remote localhost:26000\n
-target remote localhost:26000
-
-echo + symbol-file kernel\n
-symbol-file kernel
Binary files xv6-public-original/_grep and xv6-public/_grep differ
diff -ruN xv6-public-original/grep.asm xv6-public/grep.asm
--- xv6-public-original/grep.asm	2022-08-13 16:28:54.216372000 +0530
+++ xv6-public/grep.asm	2022-09-05 20:56:49.602960000 +0530
@@ -85,9 +85,9 @@
       printf(1, "grep: cannot open %s\n", argv[i]);
   77:	50                   	push   %eax
   78:	ff 33                	pushl  (%ebx)
-  7a:	68 88 0a 00 00       	push   $0xa88
+  7a:	68 98 0a 00 00       	push   $0xa98
   7f:	6a 01                	push   $0x1
-  81:	e8 7a 06 00 00       	call   700 <printf>
+  81:	e8 8a 06 00 00       	call   710 <printf>
       exit();
   86:	e8 18 05 00 00       	call   5a3 <exit>
   }
@@ -96,9 +96,9 @@
     printf(2, "usage: grep pattern [file ...]\n");
   90:	51                   	push   %ecx
   91:	51                   	push   %ecx
-  92:	68 68 0a 00 00       	push   $0xa68
+  92:	68 78 0a 00 00       	push   $0xa78
   97:	6a 02                	push   $0x2
-  99:	e8 62 06 00 00       	call   700 <printf>
+  99:	e8 72 06 00 00       	call   710 <printf>
     exit();
   9e:	e8 00 05 00 00       	call   5a3 <exit>
     grep(pattern, 0);
@@ -957,609 +957,623 @@
  63b:	b8 0e 00 00 00       	mov    $0xe,%eax
  640:	cd 40                	int    $0x40
  642:	c3                   	ret    
- 643:	66 90                	xchg   %ax,%ax
- 645:	66 90                	xchg   %ax,%ax
- 647:	66 90                	xchg   %ax,%ax
- 649:	66 90                	xchg   %ax,%ax
- 64b:	66 90                	xchg   %ax,%ax
- 64d:	66 90                	xchg   %ax,%ax
- 64f:	90                   	nop
 
-00000650 <printint>:
+00000643 <thread_create>:
+SYSCALL(thread_create)
+ 643:	b8 16 00 00 00       	mov    $0x16,%eax
+ 648:	cd 40                	int    $0x40
+ 64a:	c3                   	ret    
+
+0000064b <thread_join>:
+SYSCALL(thread_join)
+ 64b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 650:	cd 40                	int    $0x40
+ 652:	c3                   	ret    
+
+00000653 <thread_exit>:
+SYSCALL(thread_exit)
+ 653:	b8 18 00 00 00       	mov    $0x18,%eax
+ 658:	cd 40                	int    $0x40
+ 65a:	c3                   	ret    
+ 65b:	66 90                	xchg   %ax,%ax
+ 65d:	66 90                	xchg   %ax,%ax
+ 65f:	90                   	nop
+
+00000660 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 650:	55                   	push   %ebp
- 651:	89 e5                	mov    %esp,%ebp
- 653:	57                   	push   %edi
- 654:	56                   	push   %esi
- 655:	53                   	push   %ebx
- 656:	83 ec 3c             	sub    $0x3c,%esp
- 659:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 660:	55                   	push   %ebp
+ 661:	89 e5                	mov    %esp,%ebp
+ 663:	57                   	push   %edi
+ 664:	56                   	push   %esi
+ 665:	53                   	push   %ebx
+ 666:	83 ec 3c             	sub    $0x3c,%esp
+ 669:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 65c:	89 d1                	mov    %edx,%ecx
+ 66c:	89 d1                	mov    %edx,%ecx
 {
- 65e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 66e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 661:	85 d2                	test   %edx,%edx
- 663:	0f 89 7f 00 00 00    	jns    6e8 <printint+0x98>
- 669:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 66d:	74 79                	je     6e8 <printint+0x98>
+ 671:	85 d2                	test   %edx,%edx
+ 673:	0f 89 7f 00 00 00    	jns    6f8 <printint+0x98>
+ 679:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 67d:	74 79                	je     6f8 <printint+0x98>
     neg = 1;
- 66f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 67f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 676:	f7 d9                	neg    %ecx
+ 686:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 678:	31 db                	xor    %ebx,%ebx
- 67a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 67d:	8d 76 00             	lea    0x0(%esi),%esi
+ 688:	31 db                	xor    %ebx,%ebx
+ 68a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 68d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 680:	89 c8                	mov    %ecx,%eax
- 682:	31 d2                	xor    %edx,%edx
- 684:	89 cf                	mov    %ecx,%edi
- 686:	f7 75 c4             	divl   -0x3c(%ebp)
- 689:	0f b6 92 a8 0a 00 00 	movzbl 0xaa8(%edx),%edx
- 690:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 693:	89 d8                	mov    %ebx,%eax
- 695:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 690:	89 c8                	mov    %ecx,%eax
+ 692:	31 d2                	xor    %edx,%edx
+ 694:	89 cf                	mov    %ecx,%edi
+ 696:	f7 75 c4             	divl   -0x3c(%ebp)
+ 699:	0f b6 92 b8 0a 00 00 	movzbl 0xab8(%edx),%edx
+ 6a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 6a3:	89 d8                	mov    %ebx,%eax
+ 6a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 698:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 6a8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 69b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 6ab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 69e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 6a1:	76 dd                	jbe    680 <printint+0x30>
+ 6ae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 6b1:	76 dd                	jbe    690 <printint+0x30>
   if(neg)
- 6a3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 6a6:	85 c9                	test   %ecx,%ecx
- 6a8:	74 0c                	je     6b6 <printint+0x66>
+ 6b3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 6b6:	85 c9                	test   %ecx,%ecx
+ 6b8:	74 0c                	je     6c6 <printint+0x66>
     buf[i++] = '-';
- 6aa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 6ba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 6af:	89 d8                	mov    %ebx,%eax
+ 6bf:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 6b1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 6c1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 6b6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 6b9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 6bd:	eb 07                	jmp    6c6 <printint+0x76>
- 6bf:	90                   	nop
- 6c0:	0f b6 13             	movzbl (%ebx),%edx
- 6c3:	83 eb 01             	sub    $0x1,%ebx
+ 6c6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 6c9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6cd:	eb 07                	jmp    6d6 <printint+0x76>
+ 6cf:	90                   	nop
+ 6d0:	0f b6 13             	movzbl (%ebx),%edx
+ 6d3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 6c6:	83 ec 04             	sub    $0x4,%esp
- 6c9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 6cc:	6a 01                	push   $0x1
- 6ce:	56                   	push   %esi
- 6cf:	57                   	push   %edi
- 6d0:	e8 ee fe ff ff       	call   5c3 <write>
+ 6d6:	83 ec 04             	sub    $0x4,%esp
+ 6d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 6dc:	6a 01                	push   $0x1
+ 6de:	56                   	push   %esi
+ 6df:	57                   	push   %edi
+ 6e0:	e8 de fe ff ff       	call   5c3 <write>
   while(--i >= 0)
- 6d5:	83 c4 10             	add    $0x10,%esp
- 6d8:	39 de                	cmp    %ebx,%esi
- 6da:	75 e4                	jne    6c0 <printint+0x70>
+ 6e5:	83 c4 10             	add    $0x10,%esp
+ 6e8:	39 de                	cmp    %ebx,%esi
+ 6ea:	75 e4                	jne    6d0 <printint+0x70>
     putc(fd, buf[i]);
 }
- 6dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 6df:	5b                   	pop    %ebx
- 6e0:	5e                   	pop    %esi
- 6e1:	5f                   	pop    %edi
- 6e2:	5d                   	pop    %ebp
- 6e3:	c3                   	ret    
- 6e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6ef:	5b                   	pop    %ebx
+ 6f0:	5e                   	pop    %esi
+ 6f1:	5f                   	pop    %edi
+ 6f2:	5d                   	pop    %ebp
+ 6f3:	c3                   	ret    
+ 6f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 6e8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 6ef:	eb 87                	jmp    678 <printint+0x28>
- 6f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 6f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 6ff:	90                   	nop
+ 6f8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 6ff:	eb 87                	jmp    688 <printint+0x28>
+ 701:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 708:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 70f:	90                   	nop
 
-00000700 <printf>:
+00000710 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 700:	f3 0f 1e fb          	endbr32 
- 704:	55                   	push   %ebp
- 705:	89 e5                	mov    %esp,%ebp
- 707:	57                   	push   %edi
- 708:	56                   	push   %esi
- 709:	53                   	push   %ebx
- 70a:	83 ec 2c             	sub    $0x2c,%esp
+ 710:	f3 0f 1e fb          	endbr32 
+ 714:	55                   	push   %ebp
+ 715:	89 e5                	mov    %esp,%ebp
+ 717:	57                   	push   %edi
+ 718:	56                   	push   %esi
+ 719:	53                   	push   %ebx
+ 71a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 70d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 710:	0f b6 1e             	movzbl (%esi),%ebx
- 713:	84 db                	test   %bl,%bl
- 715:	0f 84 b4 00 00 00    	je     7cf <printf+0xcf>
+ 71d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 720:	0f b6 1e             	movzbl (%esi),%ebx
+ 723:	84 db                	test   %bl,%bl
+ 725:	0f 84 b4 00 00 00    	je     7df <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 71b:	8d 45 10             	lea    0x10(%ebp),%eax
- 71e:	83 c6 01             	add    $0x1,%esi
+ 72b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 72e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 721:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 731:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 724:	31 d2                	xor    %edx,%edx
+ 734:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 726:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 729:	eb 33                	jmp    75e <printf+0x5e>
- 72b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 72f:	90                   	nop
- 730:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 736:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 739:	eb 33                	jmp    76e <printf+0x5e>
+ 73b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 73f:	90                   	nop
+ 740:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 733:	ba 25 00 00 00       	mov    $0x25,%edx
+ 743:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 738:	83 f8 25             	cmp    $0x25,%eax
- 73b:	74 17                	je     754 <printf+0x54>
+ 748:	83 f8 25             	cmp    $0x25,%eax
+ 74b:	74 17                	je     764 <printf+0x54>
   write(fd, &c, 1);
- 73d:	83 ec 04             	sub    $0x4,%esp
- 740:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 743:	6a 01                	push   $0x1
- 745:	57                   	push   %edi
- 746:	ff 75 08             	pushl  0x8(%ebp)
- 749:	e8 75 fe ff ff       	call   5c3 <write>
- 74e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 74d:	83 ec 04             	sub    $0x4,%esp
+ 750:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 753:	6a 01                	push   $0x1
+ 755:	57                   	push   %edi
+ 756:	ff 75 08             	pushl  0x8(%ebp)
+ 759:	e8 65 fe ff ff       	call   5c3 <write>
+ 75e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 751:	83 c4 10             	add    $0x10,%esp
+ 761:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 754:	0f b6 1e             	movzbl (%esi),%ebx
- 757:	83 c6 01             	add    $0x1,%esi
- 75a:	84 db                	test   %bl,%bl
- 75c:	74 71                	je     7cf <printf+0xcf>
+ 764:	0f b6 1e             	movzbl (%esi),%ebx
+ 767:	83 c6 01             	add    $0x1,%esi
+ 76a:	84 db                	test   %bl,%bl
+ 76c:	74 71                	je     7df <printf+0xcf>
     c = fmt[i] & 0xff;
- 75e:	0f be cb             	movsbl %bl,%ecx
- 761:	0f b6 c3             	movzbl %bl,%eax
+ 76e:	0f be cb             	movsbl %bl,%ecx
+ 771:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 764:	85 d2                	test   %edx,%edx
- 766:	74 c8                	je     730 <printf+0x30>
+ 774:	85 d2                	test   %edx,%edx
+ 776:	74 c8                	je     740 <printf+0x30>
       }
     } else if(state == '%'){
- 768:	83 fa 25             	cmp    $0x25,%edx
- 76b:	75 e7                	jne    754 <printf+0x54>
+ 778:	83 fa 25             	cmp    $0x25,%edx
+ 77b:	75 e7                	jne    764 <printf+0x54>
       if(c == 'd'){
- 76d:	83 f8 64             	cmp    $0x64,%eax
- 770:	0f 84 9a 00 00 00    	je     810 <printf+0x110>
+ 77d:	83 f8 64             	cmp    $0x64,%eax
+ 780:	0f 84 9a 00 00 00    	je     820 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 776:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 77c:	83 f9 70             	cmp    $0x70,%ecx
- 77f:	74 5f                	je     7e0 <printf+0xe0>
+ 786:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 78c:	83 f9 70             	cmp    $0x70,%ecx
+ 78f:	74 5f                	je     7f0 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 781:	83 f8 73             	cmp    $0x73,%eax
- 784:	0f 84 d6 00 00 00    	je     860 <printf+0x160>
+ 791:	83 f8 73             	cmp    $0x73,%eax
+ 794:	0f 84 d6 00 00 00    	je     870 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 78a:	83 f8 63             	cmp    $0x63,%eax
- 78d:	0f 84 8d 00 00 00    	je     820 <printf+0x120>
+ 79a:	83 f8 63             	cmp    $0x63,%eax
+ 79d:	0f 84 8d 00 00 00    	je     830 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 793:	83 f8 25             	cmp    $0x25,%eax
- 796:	0f 84 b4 00 00 00    	je     850 <printf+0x150>
+ 7a3:	83 f8 25             	cmp    $0x25,%eax
+ 7a6:	0f 84 b4 00 00 00    	je     860 <printf+0x150>
   write(fd, &c, 1);
- 79c:	83 ec 04             	sub    $0x4,%esp
- 79f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 7a3:	6a 01                	push   $0x1
- 7a5:	57                   	push   %edi
- 7a6:	ff 75 08             	pushl  0x8(%ebp)
- 7a9:	e8 15 fe ff ff       	call   5c3 <write>
+ 7ac:	83 ec 04             	sub    $0x4,%esp
+ 7af:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7b3:	6a 01                	push   $0x1
+ 7b5:	57                   	push   %edi
+ 7b6:	ff 75 08             	pushl  0x8(%ebp)
+ 7b9:	e8 05 fe ff ff       	call   5c3 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 7ae:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 7be:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 7b1:	83 c4 0c             	add    $0xc,%esp
- 7b4:	6a 01                	push   $0x1
- 7b6:	83 c6 01             	add    $0x1,%esi
- 7b9:	57                   	push   %edi
- 7ba:	ff 75 08             	pushl  0x8(%ebp)
- 7bd:	e8 01 fe ff ff       	call   5c3 <write>
+ 7c1:	83 c4 0c             	add    $0xc,%esp
+ 7c4:	6a 01                	push   $0x1
+ 7c6:	83 c6 01             	add    $0x1,%esi
+ 7c9:	57                   	push   %edi
+ 7ca:	ff 75 08             	pushl  0x8(%ebp)
+ 7cd:	e8 f1 fd ff ff       	call   5c3 <write>
   for(i = 0; fmt[i]; i++){
- 7c2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 7d2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 7c6:	83 c4 10             	add    $0x10,%esp
+ 7d6:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 7c9:	31 d2                	xor    %edx,%edx
+ 7d9:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 7cb:	84 db                	test   %bl,%bl
- 7cd:	75 8f                	jne    75e <printf+0x5e>
+ 7db:	84 db                	test   %bl,%bl
+ 7dd:	75 8f                	jne    76e <printf+0x5e>
     }
   }
 }
- 7cf:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 7d2:	5b                   	pop    %ebx
- 7d3:	5e                   	pop    %esi
- 7d4:	5f                   	pop    %edi
- 7d5:	5d                   	pop    %ebp
- 7d6:	c3                   	ret    
- 7d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 7de:	66 90                	xchg   %ax,%ax
+ 7df:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7e2:	5b                   	pop    %ebx
+ 7e3:	5e                   	pop    %esi
+ 7e4:	5f                   	pop    %edi
+ 7e5:	5d                   	pop    %ebp
+ 7e6:	c3                   	ret    
+ 7e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7ee:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 7e0:	83 ec 0c             	sub    $0xc,%esp
- 7e3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 7e8:	6a 00                	push   $0x0
- 7ea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 7ed:	8b 45 08             	mov    0x8(%ebp),%eax
- 7f0:	8b 13                	mov    (%ebx),%edx
- 7f2:	e8 59 fe ff ff       	call   650 <printint>
+ 7f0:	83 ec 0c             	sub    $0xc,%esp
+ 7f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 7f8:	6a 00                	push   $0x0
+ 7fa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 7fd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 800:	8b 13                	mov    (%ebx),%edx
+ 802:	e8 59 fe ff ff       	call   660 <printint>
         ap++;
- 7f7:	89 d8                	mov    %ebx,%eax
- 7f9:	83 c4 10             	add    $0x10,%esp
+ 807:	89 d8                	mov    %ebx,%eax
+ 809:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 7fc:	31 d2                	xor    %edx,%edx
+ 80c:	31 d2                	xor    %edx,%edx
         ap++;
- 7fe:	83 c0 04             	add    $0x4,%eax
- 801:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 804:	e9 4b ff ff ff       	jmp    754 <printf+0x54>
- 809:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 80e:	83 c0 04             	add    $0x4,%eax
+ 811:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 814:	e9 4b ff ff ff       	jmp    764 <printf+0x54>
+ 819:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 810:	83 ec 0c             	sub    $0xc,%esp
- 813:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 818:	6a 01                	push   $0x1
- 81a:	eb ce                	jmp    7ea <printf+0xea>
- 81c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 820:	83 ec 0c             	sub    $0xc,%esp
+ 823:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 828:	6a 01                	push   $0x1
+ 82a:	eb ce                	jmp    7fa <printf+0xea>
+ 82c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 820:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 830:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 823:	83 ec 04             	sub    $0x4,%esp
+ 833:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 826:	8b 03                	mov    (%ebx),%eax
+ 836:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 828:	6a 01                	push   $0x1
+ 838:	6a 01                	push   $0x1
         ap++;
- 82a:	83 c3 04             	add    $0x4,%ebx
+ 83a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 82d:	57                   	push   %edi
- 82e:	ff 75 08             	pushl  0x8(%ebp)
+ 83d:	57                   	push   %edi
+ 83e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 831:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 841:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 834:	e8 8a fd ff ff       	call   5c3 <write>
+ 844:	e8 7a fd ff ff       	call   5c3 <write>
         ap++;
- 839:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 83c:	83 c4 10             	add    $0x10,%esp
+ 849:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 84c:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 83f:	31 d2                	xor    %edx,%edx
- 841:	e9 0e ff ff ff       	jmp    754 <printf+0x54>
- 846:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 84d:	8d 76 00             	lea    0x0(%esi),%esi
+ 84f:	31 d2                	xor    %edx,%edx
+ 851:	e9 0e ff ff ff       	jmp    764 <printf+0x54>
+ 856:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 85d:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 850:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 860:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 853:	83 ec 04             	sub    $0x4,%esp
- 856:	e9 59 ff ff ff       	jmp    7b4 <printf+0xb4>
- 85b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 85f:	90                   	nop
+ 863:	83 ec 04             	sub    $0x4,%esp
+ 866:	e9 59 ff ff ff       	jmp    7c4 <printf+0xb4>
+ 86b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 86f:	90                   	nop
         s = (char*)*ap;
- 860:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 863:	8b 18                	mov    (%eax),%ebx
+ 870:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 873:	8b 18                	mov    (%eax),%ebx
         ap++;
- 865:	83 c0 04             	add    $0x4,%eax
- 868:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 875:	83 c0 04             	add    $0x4,%eax
+ 878:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 86b:	85 db                	test   %ebx,%ebx
- 86d:	74 17                	je     886 <printf+0x186>
+ 87b:	85 db                	test   %ebx,%ebx
+ 87d:	74 17                	je     896 <printf+0x186>
         while(*s != 0){
- 86f:	0f b6 03             	movzbl (%ebx),%eax
+ 87f:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 872:	31 d2                	xor    %edx,%edx
+ 882:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 874:	84 c0                	test   %al,%al
- 876:	0f 84 d8 fe ff ff    	je     754 <printf+0x54>
- 87c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 87f:	89 de                	mov    %ebx,%esi
- 881:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 884:	eb 1a                	jmp    8a0 <printf+0x1a0>
+ 884:	84 c0                	test   %al,%al
+ 886:	0f 84 d8 fe ff ff    	je     764 <printf+0x54>
+ 88c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 88f:	89 de                	mov    %ebx,%esi
+ 891:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 894:	eb 1a                	jmp    8b0 <printf+0x1a0>
           s = "(null)";
- 886:	bb 9e 0a 00 00       	mov    $0xa9e,%ebx
+ 896:	bb ae 0a 00 00       	mov    $0xaae,%ebx
         while(*s != 0){
- 88b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 88e:	b8 28 00 00 00       	mov    $0x28,%eax
- 893:	89 de                	mov    %ebx,%esi
- 895:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 898:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 89f:	90                   	nop
+ 89b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 89e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8a3:	89 de                	mov    %ebx,%esi
+ 8a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8af:	90                   	nop
   write(fd, &c, 1);
- 8a0:	83 ec 04             	sub    $0x4,%esp
+ 8b0:	83 ec 04             	sub    $0x4,%esp
           s++;
- 8a3:	83 c6 01             	add    $0x1,%esi
- 8a6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 8b3:	83 c6 01             	add    $0x1,%esi
+ 8b6:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 8a9:	6a 01                	push   $0x1
- 8ab:	57                   	push   %edi
- 8ac:	53                   	push   %ebx
- 8ad:	e8 11 fd ff ff       	call   5c3 <write>
+ 8b9:	6a 01                	push   $0x1
+ 8bb:	57                   	push   %edi
+ 8bc:	53                   	push   %ebx
+ 8bd:	e8 01 fd ff ff       	call   5c3 <write>
         while(*s != 0){
- 8b2:	0f b6 06             	movzbl (%esi),%eax
- 8b5:	83 c4 10             	add    $0x10,%esp
- 8b8:	84 c0                	test   %al,%al
- 8ba:	75 e4                	jne    8a0 <printf+0x1a0>
- 8bc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 8c2:	0f b6 06             	movzbl (%esi),%eax
+ 8c5:	83 c4 10             	add    $0x10,%esp
+ 8c8:	84 c0                	test   %al,%al
+ 8ca:	75 e4                	jne    8b0 <printf+0x1a0>
+ 8cc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 8bf:	31 d2                	xor    %edx,%edx
- 8c1:	e9 8e fe ff ff       	jmp    754 <printf+0x54>
- 8c6:	66 90                	xchg   %ax,%ax
- 8c8:	66 90                	xchg   %ax,%ax
- 8ca:	66 90                	xchg   %ax,%ax
- 8cc:	66 90                	xchg   %ax,%ax
- 8ce:	66 90                	xchg   %ax,%ax
+ 8cf:	31 d2                	xor    %edx,%edx
+ 8d1:	e9 8e fe ff ff       	jmp    764 <printf+0x54>
+ 8d6:	66 90                	xchg   %ax,%ax
+ 8d8:	66 90                	xchg   %ax,%ax
+ 8da:	66 90                	xchg   %ax,%ax
+ 8dc:	66 90                	xchg   %ax,%ax
+ 8de:	66 90                	xchg   %ax,%ax
 
-000008d0 <free>:
+000008e0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 8d0:	f3 0f 1e fb          	endbr32 
- 8d4:	55                   	push   %ebp
+ 8e0:	f3 0f 1e fb          	endbr32 
+ 8e4:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8d5:	a1 60 0e 00 00       	mov    0xe60,%eax
+ 8e5:	a1 60 0e 00 00       	mov    0xe60,%eax
 {
- 8da:	89 e5                	mov    %esp,%ebp
- 8dc:	57                   	push   %edi
- 8dd:	56                   	push   %esi
- 8de:	53                   	push   %ebx
- 8df:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 8e2:	8b 10                	mov    (%eax),%edx
+ 8ea:	89 e5                	mov    %esp,%ebp
+ 8ec:	57                   	push   %edi
+ 8ed:	56                   	push   %esi
+ 8ee:	53                   	push   %ebx
+ 8ef:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8f2:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 8e4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 8f4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8e7:	39 c8                	cmp    %ecx,%eax
- 8e9:	73 15                	jae    900 <free+0x30>
- 8eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 8ef:	90                   	nop
- 8f0:	39 d1                	cmp    %edx,%ecx
- 8f2:	72 14                	jb     908 <free+0x38>
+ 8f7:	39 c8                	cmp    %ecx,%eax
+ 8f9:	73 15                	jae    910 <free+0x30>
+ 8fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 8ff:	90                   	nop
+ 900:	39 d1                	cmp    %edx,%ecx
+ 902:	72 14                	jb     918 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 8f4:	39 d0                	cmp    %edx,%eax
- 8f6:	73 10                	jae    908 <free+0x38>
+ 904:	39 d0                	cmp    %edx,%eax
+ 906:	73 10                	jae    918 <free+0x38>
 {
- 8f8:	89 d0                	mov    %edx,%eax
+ 908:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8fa:	8b 10                	mov    (%eax),%edx
- 8fc:	39 c8                	cmp    %ecx,%eax
- 8fe:	72 f0                	jb     8f0 <free+0x20>
+ 90a:	8b 10                	mov    (%eax),%edx
+ 90c:	39 c8                	cmp    %ecx,%eax
+ 90e:	72 f0                	jb     900 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 900:	39 d0                	cmp    %edx,%eax
- 902:	72 f4                	jb     8f8 <free+0x28>
- 904:	39 d1                	cmp    %edx,%ecx
- 906:	73 f0                	jae    8f8 <free+0x28>
+ 910:	39 d0                	cmp    %edx,%eax
+ 912:	72 f4                	jb     908 <free+0x28>
+ 914:	39 d1                	cmp    %edx,%ecx
+ 916:	73 f0                	jae    908 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 908:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 90b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 90e:	39 fa                	cmp    %edi,%edx
- 910:	74 1e                	je     930 <free+0x60>
+ 918:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 91b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 91e:	39 fa                	cmp    %edi,%edx
+ 920:	74 1e                	je     940 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 912:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 922:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 915:	8b 50 04             	mov    0x4(%eax),%edx
- 918:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 91b:	39 f1                	cmp    %esi,%ecx
- 91d:	74 28                	je     947 <free+0x77>
+ 925:	8b 50 04             	mov    0x4(%eax),%edx
+ 928:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 92b:	39 f1                	cmp    %esi,%ecx
+ 92d:	74 28                	je     957 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 91f:	89 08                	mov    %ecx,(%eax)
+ 92f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 921:	5b                   	pop    %ebx
+ 931:	5b                   	pop    %ebx
   freep = p;
- 922:	a3 60 0e 00 00       	mov    %eax,0xe60
+ 932:	a3 60 0e 00 00       	mov    %eax,0xe60
 }
- 927:	5e                   	pop    %esi
- 928:	5f                   	pop    %edi
- 929:	5d                   	pop    %ebp
- 92a:	c3                   	ret    
- 92b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 92f:	90                   	nop
+ 937:	5e                   	pop    %esi
+ 938:	5f                   	pop    %edi
+ 939:	5d                   	pop    %ebp
+ 93a:	c3                   	ret    
+ 93b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 93f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 930:	03 72 04             	add    0x4(%edx),%esi
- 933:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 940:	03 72 04             	add    0x4(%edx),%esi
+ 943:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 936:	8b 10                	mov    (%eax),%edx
- 938:	8b 12                	mov    (%edx),%edx
- 93a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 946:	8b 10                	mov    (%eax),%edx
+ 948:	8b 12                	mov    (%edx),%edx
+ 94a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 93d:	8b 50 04             	mov    0x4(%eax),%edx
- 940:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 943:	39 f1                	cmp    %esi,%ecx
- 945:	75 d8                	jne    91f <free+0x4f>
+ 94d:	8b 50 04             	mov    0x4(%eax),%edx
+ 950:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 953:	39 f1                	cmp    %esi,%ecx
+ 955:	75 d8                	jne    92f <free+0x4f>
     p->s.size += bp->s.size;
- 947:	03 53 fc             	add    -0x4(%ebx),%edx
+ 957:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 94a:	a3 60 0e 00 00       	mov    %eax,0xe60
+ 95a:	a3 60 0e 00 00       	mov    %eax,0xe60
     p->s.size += bp->s.size;
- 94f:	89 50 04             	mov    %edx,0x4(%eax)
+ 95f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 952:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 955:	89 10                	mov    %edx,(%eax)
+ 962:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 965:	89 10                	mov    %edx,(%eax)
 }
- 957:	5b                   	pop    %ebx
- 958:	5e                   	pop    %esi
- 959:	5f                   	pop    %edi
- 95a:	5d                   	pop    %ebp
- 95b:	c3                   	ret    
- 95c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 967:	5b                   	pop    %ebx
+ 968:	5e                   	pop    %esi
+ 969:	5f                   	pop    %edi
+ 96a:	5d                   	pop    %ebp
+ 96b:	c3                   	ret    
+ 96c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000960 <malloc>:
+00000970 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 960:	f3 0f 1e fb          	endbr32 
- 964:	55                   	push   %ebp
- 965:	89 e5                	mov    %esp,%ebp
- 967:	57                   	push   %edi
- 968:	56                   	push   %esi
- 969:	53                   	push   %ebx
- 96a:	83 ec 1c             	sub    $0x1c,%esp
+ 970:	f3 0f 1e fb          	endbr32 
+ 974:	55                   	push   %ebp
+ 975:	89 e5                	mov    %esp,%ebp
+ 977:	57                   	push   %edi
+ 978:	56                   	push   %esi
+ 979:	53                   	push   %ebx
+ 97a:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 96d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 97d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 970:	8b 3d 60 0e 00 00    	mov    0xe60,%edi
+ 980:	8b 3d 60 0e 00 00    	mov    0xe60,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 976:	8d 70 07             	lea    0x7(%eax),%esi
- 979:	c1 ee 03             	shr    $0x3,%esi
- 97c:	83 c6 01             	add    $0x1,%esi
+ 986:	8d 70 07             	lea    0x7(%eax),%esi
+ 989:	c1 ee 03             	shr    $0x3,%esi
+ 98c:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 97f:	85 ff                	test   %edi,%edi
- 981:	0f 84 a9 00 00 00    	je     a30 <malloc+0xd0>
+ 98f:	85 ff                	test   %edi,%edi
+ 991:	0f 84 a9 00 00 00    	je     a40 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 987:	8b 07                	mov    (%edi),%eax
+ 997:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 989:	8b 48 04             	mov    0x4(%eax),%ecx
- 98c:	39 f1                	cmp    %esi,%ecx
- 98e:	73 6d                	jae    9fd <malloc+0x9d>
- 990:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 996:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 99b:	0f 43 de             	cmovae %esi,%ebx
+ 999:	8b 48 04             	mov    0x4(%eax),%ecx
+ 99c:	39 f1                	cmp    %esi,%ecx
+ 99e:	73 6d                	jae    a0d <malloc+0x9d>
+ 9a0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 9a6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 9ab:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 99e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 9a5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 9a8:	eb 17                	jmp    9c1 <malloc+0x61>
- 9aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 9ae:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 9b5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 9b8:	eb 17                	jmp    9d1 <malloc+0x61>
+ 9ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 9b0:	8b 10                	mov    (%eax),%edx
+ 9c0:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 9b2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 9b5:	39 f1                	cmp    %esi,%ecx
- 9b7:	73 4f                	jae    a08 <malloc+0xa8>
- 9b9:	8b 3d 60 0e 00 00    	mov    0xe60,%edi
- 9bf:	89 d0                	mov    %edx,%eax
+ 9c2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 9c5:	39 f1                	cmp    %esi,%ecx
+ 9c7:	73 4f                	jae    a18 <malloc+0xa8>
+ 9c9:	8b 3d 60 0e 00 00    	mov    0xe60,%edi
+ 9cf:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 9c1:	39 c7                	cmp    %eax,%edi
- 9c3:	75 eb                	jne    9b0 <malloc+0x50>
+ 9d1:	39 c7                	cmp    %eax,%edi
+ 9d3:	75 eb                	jne    9c0 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 9c5:	83 ec 0c             	sub    $0xc,%esp
- 9c8:	ff 75 e4             	pushl  -0x1c(%ebp)
- 9cb:	e8 5b fc ff ff       	call   62b <sbrk>
+ 9d5:	83 ec 0c             	sub    $0xc,%esp
+ 9d8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 9db:	e8 4b fc ff ff       	call   62b <sbrk>
   if(p == (char*)-1)
- 9d0:	83 c4 10             	add    $0x10,%esp
- 9d3:	83 f8 ff             	cmp    $0xffffffff,%eax
- 9d6:	74 1b                	je     9f3 <malloc+0x93>
+ 9e0:	83 c4 10             	add    $0x10,%esp
+ 9e3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 9e6:	74 1b                	je     a03 <malloc+0x93>
   hp->s.size = nu;
- 9d8:	89 58 04             	mov    %ebx,0x4(%eax)
+ 9e8:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 9db:	83 ec 0c             	sub    $0xc,%esp
- 9de:	83 c0 08             	add    $0x8,%eax
- 9e1:	50                   	push   %eax
- 9e2:	e8 e9 fe ff ff       	call   8d0 <free>
+ 9eb:	83 ec 0c             	sub    $0xc,%esp
+ 9ee:	83 c0 08             	add    $0x8,%eax
+ 9f1:	50                   	push   %eax
+ 9f2:	e8 e9 fe ff ff       	call   8e0 <free>
   return freep;
- 9e7:	a1 60 0e 00 00       	mov    0xe60,%eax
+ 9f7:	a1 60 0e 00 00       	mov    0xe60,%eax
       if((p = morecore(nunits)) == 0)
- 9ec:	83 c4 10             	add    $0x10,%esp
- 9ef:	85 c0                	test   %eax,%eax
- 9f1:	75 bd                	jne    9b0 <malloc+0x50>
+ 9fc:	83 c4 10             	add    $0x10,%esp
+ 9ff:	85 c0                	test   %eax,%eax
+ a01:	75 bd                	jne    9c0 <malloc+0x50>
         return 0;
   }
 }
- 9f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ a03:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 9f6:	31 c0                	xor    %eax,%eax
+ a06:	31 c0                	xor    %eax,%eax
 }
- 9f8:	5b                   	pop    %ebx
- 9f9:	5e                   	pop    %esi
- 9fa:	5f                   	pop    %edi
- 9fb:	5d                   	pop    %ebp
- 9fc:	c3                   	ret    
+ a08:	5b                   	pop    %ebx
+ a09:	5e                   	pop    %esi
+ a0a:	5f                   	pop    %edi
+ a0b:	5d                   	pop    %ebp
+ a0c:	c3                   	ret    
     if(p->s.size >= nunits){
- 9fd:	89 c2                	mov    %eax,%edx
- 9ff:	89 f8                	mov    %edi,%eax
- a01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a0d:	89 c2                	mov    %eax,%edx
+ a0f:	89 f8                	mov    %edi,%eax
+ a11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- a08:	39 ce                	cmp    %ecx,%esi
- a0a:	74 54                	je     a60 <malloc+0x100>
+ a18:	39 ce                	cmp    %ecx,%esi
+ a1a:	74 54                	je     a70 <malloc+0x100>
         p->s.size -= nunits;
- a0c:	29 f1                	sub    %esi,%ecx
- a0e:	89 4a 04             	mov    %ecx,0x4(%edx)
+ a1c:	29 f1                	sub    %esi,%ecx
+ a1e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- a11:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ a21:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- a14:	89 72 04             	mov    %esi,0x4(%edx)
+ a24:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- a17:	a3 60 0e 00 00       	mov    %eax,0xe60
+ a27:	a3 60 0e 00 00       	mov    %eax,0xe60
 }
- a1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ a2c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- a1f:	8d 42 08             	lea    0x8(%edx),%eax
+ a2f:	8d 42 08             	lea    0x8(%edx),%eax
 }
- a22:	5b                   	pop    %ebx
- a23:	5e                   	pop    %esi
- a24:	5f                   	pop    %edi
- a25:	5d                   	pop    %ebp
- a26:	c3                   	ret    
- a27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- a2e:	66 90                	xchg   %ax,%ax
+ a32:	5b                   	pop    %ebx
+ a33:	5e                   	pop    %esi
+ a34:	5f                   	pop    %edi
+ a35:	5d                   	pop    %ebp
+ a36:	c3                   	ret    
+ a37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a3e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- a30:	c7 05 60 0e 00 00 64 	movl   $0xe64,0xe60
- a37:	0e 00 00 
+ a40:	c7 05 60 0e 00 00 64 	movl   $0xe64,0xe60
+ a47:	0e 00 00 
     base.s.size = 0;
- a3a:	bf 64 0e 00 00       	mov    $0xe64,%edi
+ a4a:	bf 64 0e 00 00       	mov    $0xe64,%edi
     base.s.ptr = freep = prevp = &base;
- a3f:	c7 05 64 0e 00 00 64 	movl   $0xe64,0xe64
- a46:	0e 00 00 
+ a4f:	c7 05 64 0e 00 00 64 	movl   $0xe64,0xe64
+ a56:	0e 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- a49:	89 f8                	mov    %edi,%eax
+ a59:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- a4b:	c7 05 68 0e 00 00 00 	movl   $0x0,0xe68
- a52:	00 00 00 
+ a5b:	c7 05 68 0e 00 00 00 	movl   $0x0,0xe68
+ a62:	00 00 00 
     if(p->s.size >= nunits){
- a55:	e9 36 ff ff ff       	jmp    990 <malloc+0x30>
- a5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ a65:	e9 36 ff ff ff       	jmp    9a0 <malloc+0x30>
+ a6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- a60:	8b 0a                	mov    (%edx),%ecx
- a62:	89 08                	mov    %ecx,(%eax)
- a64:	eb b1                	jmp    a17 <malloc+0xb7>
+ a70:	8b 0a                	mov    (%edx),%ecx
+ a72:	89 08                	mov    %ecx,(%eax)
+ a74:	eb b1                	jmp    a27 <malloc+0xb7>
Binary files xv6-public-original/grep.o and xv6-public/grep.o differ
diff -ruN xv6-public-original/grep.sym xv6-public/grep.sym
--- xv6-public-original/grep.sym	2022-08-13 16:28:54.220371000 +0530
+++ xv6-public/grep.sym	2022-09-05 20:56:49.606960000 +0530
@@ -1,6 +1,6 @@
 00000000 .text
-00000a68 .rodata
-00000abc .eh_frame
+00000a78 .rodata
+00000acc .eh_frame
 00000e60 .bss
 00000000 .comment
 00000000 .debug_aranges
@@ -13,20 +13,21 @@
 00000000 grep.c
 00000000 ulib.c
 00000000 printf.c
-00000650 printint
-00000aa8 digits.1085
+00000660 printint
+00000ab8 digits.1094
 00000000 umalloc.c
 00000e60 freep
 00000e64 base
 00000340 strcpy
-00000700 printf
+00000710 printf
+00000653 thread_exit
 00000570 memmove
 00000120 matchhere
 000005eb mknod
 00000460 gets
 00000623 getpid
 00000230 grep
-00000960 malloc
+00000970 malloc
 00000633 sleep
 000005b3 pipe
 000005c3 write
@@ -40,7 +41,7 @@
 0000059b fork
 0000062b sbrk
 0000063b uptime
-00000e44 __bss_start
+00000e54 __bss_start
 00000400 memset
 00000000 main
 000000c0 matchstar
@@ -48,7 +49,7 @@
 0000061b dup
 00000e80 buf
 000004e0 stat
-00000e44 _edata
+00000e54 _edata
 00001280 _end
 000001c0 match
 00000603 link
@@ -57,6 +58,8 @@
 000003c0 strlen
 000005e3 open
 00000420 strchr
+00000643 thread_create
 0000060b mkdir
 000005cb close
-000008d0 free
+0000064b thread_join
+000008e0 free
Binary files xv6-public-original/ide.o and xv6-public/ide.o differ
Binary files xv6-public-original/_init and xv6-public/_init differ
diff -ruN xv6-public-original/init.asm xv6-public/init.asm
--- xv6-public-original/init.asm	2022-08-13 16:28:54.264357000 +0530
+++ xv6-public/init.asm	2022-09-05 20:56:49.690960000 +0530
@@ -24,7 +24,7 @@
   if(open("console", O_RDWR) < 0){
   13:	83 ec 08             	sub    $0x8,%esp
   16:	6a 02                	push   $0x2
-  18:	68 18 08 00 00       	push   $0x818
+  18:	68 28 08 00 00       	push   $0x828
   1d:	e8 71 03 00 00       	call   393 <open>
   22:	83 c4 10             	add    $0x10,%esp
   25:	85 c0                	test   %eax,%eax
@@ -46,9 +46,9 @@
   for(;;){
     printf(1, "init: starting sh\n");
   50:	83 ec 08             	sub    $0x8,%esp
-  53:	68 20 08 00 00       	push   $0x820
+  53:	68 30 08 00 00       	push   $0x830
   58:	6a 01                	push   $0x1
-  5a:	e8 51 04 00 00       	call   4b0 <printf>
+  5a:	e8 61 04 00 00       	call   4c0 <printf>
     pid = fork();
   5f:	e8 e7 02 00 00       	call   34b <fork>
     if(pid < 0){
@@ -76,44 +76,44 @@
   7b:	74 d3                	je     50 <main+0x50>
       printf(1, "zombie!\n");
   7d:	83 ec 08             	sub    $0x8,%esp
-  80:	68 5f 08 00 00       	push   $0x85f
+  80:	68 6f 08 00 00       	push   $0x86f
   85:	6a 01                	push   $0x1
-  87:	e8 24 04 00 00       	call   4b0 <printf>
+  87:	e8 34 04 00 00       	call   4c0 <printf>
   8c:	83 c4 10             	add    $0x10,%esp
   8f:	eb df                	jmp    70 <main+0x70>
       printf(1, "init: fork failed\n");
   91:	53                   	push   %ebx
   92:	53                   	push   %ebx
-  93:	68 33 08 00 00       	push   $0x833
+  93:	68 43 08 00 00       	push   $0x843
   98:	6a 01                	push   $0x1
-  9a:	e8 11 04 00 00       	call   4b0 <printf>
+  9a:	e8 21 04 00 00       	call   4c0 <printf>
       exit();
   9f:	e8 af 02 00 00       	call   353 <exit>
       exec("sh", argv);
   a4:	50                   	push   %eax
   a5:	50                   	push   %eax
-  a6:	68 1c 0b 00 00       	push   $0xb1c
-  ab:	68 46 08 00 00       	push   $0x846
+  a6:	68 2c 0b 00 00       	push   $0xb2c
+  ab:	68 56 08 00 00       	push   $0x856
   b0:	e8 d6 02 00 00       	call   38b <exec>
       printf(1, "init: exec sh failed\n");
   b5:	5a                   	pop    %edx
   b6:	59                   	pop    %ecx
-  b7:	68 49 08 00 00       	push   $0x849
+  b7:	68 59 08 00 00       	push   $0x859
   bc:	6a 01                	push   $0x1
-  be:	e8 ed 03 00 00       	call   4b0 <printf>
+  be:	e8 fd 03 00 00       	call   4c0 <printf>
       exit();
   c3:	e8 8b 02 00 00       	call   353 <exit>
     mknod("console", 1, 1);
   c8:	50                   	push   %eax
   c9:	6a 01                	push   $0x1
   cb:	6a 01                	push   $0x1
-  cd:	68 18 08 00 00       	push   $0x818
+  cd:	68 28 08 00 00       	push   $0x828
   d2:	e8 c4 02 00 00       	call   39b <mknod>
     open("console", O_RDWR);
   d7:	58                   	pop    %eax
   d8:	5a                   	pop    %edx
   d9:	6a 02                	push   $0x2
-  db:	68 18 08 00 00       	push   $0x818
+  db:	68 28 08 00 00       	push   $0x828
   e0:	e8 ae 02 00 00       	call   393 <open>
   e5:	83 c4 10             	add    $0x10,%esp
   e8:	e9 40 ff ff ff       	jmp    2d <main+0x2d>
@@ -646,609 +646,623 @@
  3eb:	b8 0e 00 00 00       	mov    $0xe,%eax
  3f0:	cd 40                	int    $0x40
  3f2:	c3                   	ret    
- 3f3:	66 90                	xchg   %ax,%ax
- 3f5:	66 90                	xchg   %ax,%ax
- 3f7:	66 90                	xchg   %ax,%ax
- 3f9:	66 90                	xchg   %ax,%ax
- 3fb:	66 90                	xchg   %ax,%ax
- 3fd:	66 90                	xchg   %ax,%ax
- 3ff:	90                   	nop
 
-00000400 <printint>:
+000003f3 <thread_create>:
+SYSCALL(thread_create)
+ 3f3:	b8 16 00 00 00       	mov    $0x16,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <thread_join>:
+SYSCALL(thread_join)
+ 3fb:	b8 17 00 00 00       	mov    $0x17,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <thread_exit>:
+SYSCALL(thread_exit)
+ 403:	b8 18 00 00 00       	mov    $0x18,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+ 40b:	66 90                	xchg   %ax,%ax
+ 40d:	66 90                	xchg   %ax,%ax
+ 40f:	90                   	nop
+
+00000410 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 400:	55                   	push   %ebp
- 401:	89 e5                	mov    %esp,%ebp
- 403:	57                   	push   %edi
- 404:	56                   	push   %esi
- 405:	53                   	push   %ebx
- 406:	83 ec 3c             	sub    $0x3c,%esp
- 409:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 410:	55                   	push   %ebp
+ 411:	89 e5                	mov    %esp,%ebp
+ 413:	57                   	push   %edi
+ 414:	56                   	push   %esi
+ 415:	53                   	push   %ebx
+ 416:	83 ec 3c             	sub    $0x3c,%esp
+ 419:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 40c:	89 d1                	mov    %edx,%ecx
+ 41c:	89 d1                	mov    %edx,%ecx
 {
- 40e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 41e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 411:	85 d2                	test   %edx,%edx
- 413:	0f 89 7f 00 00 00    	jns    498 <printint+0x98>
- 419:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 41d:	74 79                	je     498 <printint+0x98>
+ 421:	85 d2                	test   %edx,%edx
+ 423:	0f 89 7f 00 00 00    	jns    4a8 <printint+0x98>
+ 429:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 42d:	74 79                	je     4a8 <printint+0x98>
     neg = 1;
- 41f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 42f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 426:	f7 d9                	neg    %ecx
+ 436:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 428:	31 db                	xor    %ebx,%ebx
- 42a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 42d:	8d 76 00             	lea    0x0(%esi),%esi
+ 438:	31 db                	xor    %ebx,%ebx
+ 43a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 43d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 430:	89 c8                	mov    %ecx,%eax
- 432:	31 d2                	xor    %edx,%edx
- 434:	89 cf                	mov    %ecx,%edi
- 436:	f7 75 c4             	divl   -0x3c(%ebp)
- 439:	0f b6 92 70 08 00 00 	movzbl 0x870(%edx),%edx
- 440:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 443:	89 d8                	mov    %ebx,%eax
- 445:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 440:	89 c8                	mov    %ecx,%eax
+ 442:	31 d2                	xor    %edx,%edx
+ 444:	89 cf                	mov    %ecx,%edi
+ 446:	f7 75 c4             	divl   -0x3c(%ebp)
+ 449:	0f b6 92 80 08 00 00 	movzbl 0x880(%edx),%edx
+ 450:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 453:	89 d8                	mov    %ebx,%eax
+ 455:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 448:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 458:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 44b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 45b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 44e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 451:	76 dd                	jbe    430 <printint+0x30>
+ 45e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 461:	76 dd                	jbe    440 <printint+0x30>
   if(neg)
- 453:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 456:	85 c9                	test   %ecx,%ecx
- 458:	74 0c                	je     466 <printint+0x66>
+ 463:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 466:	85 c9                	test   %ecx,%ecx
+ 468:	74 0c                	je     476 <printint+0x66>
     buf[i++] = '-';
- 45a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 46a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 45f:	89 d8                	mov    %ebx,%eax
+ 46f:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 461:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 471:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 466:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 469:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 46d:	eb 07                	jmp    476 <printint+0x76>
- 46f:	90                   	nop
- 470:	0f b6 13             	movzbl (%ebx),%edx
- 473:	83 eb 01             	sub    $0x1,%ebx
+ 476:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 479:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 47d:	eb 07                	jmp    486 <printint+0x76>
+ 47f:	90                   	nop
+ 480:	0f b6 13             	movzbl (%ebx),%edx
+ 483:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 476:	83 ec 04             	sub    $0x4,%esp
- 479:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 47c:	6a 01                	push   $0x1
- 47e:	56                   	push   %esi
- 47f:	57                   	push   %edi
- 480:	e8 ee fe ff ff       	call   373 <write>
+ 486:	83 ec 04             	sub    $0x4,%esp
+ 489:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 48c:	6a 01                	push   $0x1
+ 48e:	56                   	push   %esi
+ 48f:	57                   	push   %edi
+ 490:	e8 de fe ff ff       	call   373 <write>
   while(--i >= 0)
- 485:	83 c4 10             	add    $0x10,%esp
- 488:	39 de                	cmp    %ebx,%esi
- 48a:	75 e4                	jne    470 <printint+0x70>
+ 495:	83 c4 10             	add    $0x10,%esp
+ 498:	39 de                	cmp    %ebx,%esi
+ 49a:	75 e4                	jne    480 <printint+0x70>
     putc(fd, buf[i]);
 }
- 48c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 48f:	5b                   	pop    %ebx
- 490:	5e                   	pop    %esi
- 491:	5f                   	pop    %edi
- 492:	5d                   	pop    %ebp
- 493:	c3                   	ret    
- 494:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 49c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 49f:	5b                   	pop    %ebx
+ 4a0:	5e                   	pop    %esi
+ 4a1:	5f                   	pop    %edi
+ 4a2:	5d                   	pop    %ebp
+ 4a3:	c3                   	ret    
+ 4a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 498:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 49f:	eb 87                	jmp    428 <printint+0x28>
- 4a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4af:	90                   	nop
+ 4a8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4af:	eb 87                	jmp    438 <printint+0x28>
+ 4b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4bf:	90                   	nop
 
-000004b0 <printf>:
+000004c0 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 4b0:	f3 0f 1e fb          	endbr32 
- 4b4:	55                   	push   %ebp
- 4b5:	89 e5                	mov    %esp,%ebp
- 4b7:	57                   	push   %edi
- 4b8:	56                   	push   %esi
- 4b9:	53                   	push   %ebx
- 4ba:	83 ec 2c             	sub    $0x2c,%esp
+ 4c0:	f3 0f 1e fb          	endbr32 
+ 4c4:	55                   	push   %ebp
+ 4c5:	89 e5                	mov    %esp,%ebp
+ 4c7:	57                   	push   %edi
+ 4c8:	56                   	push   %esi
+ 4c9:	53                   	push   %ebx
+ 4ca:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 4bd:	8b 75 0c             	mov    0xc(%ebp),%esi
- 4c0:	0f b6 1e             	movzbl (%esi),%ebx
- 4c3:	84 db                	test   %bl,%bl
- 4c5:	0f 84 b4 00 00 00    	je     57f <printf+0xcf>
+ 4cd:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 4d0:	0f b6 1e             	movzbl (%esi),%ebx
+ 4d3:	84 db                	test   %bl,%bl
+ 4d5:	0f 84 b4 00 00 00    	je     58f <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 4cb:	8d 45 10             	lea    0x10(%ebp),%eax
- 4ce:	83 c6 01             	add    $0x1,%esi
+ 4db:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4de:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 4d1:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 4e1:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 4d4:	31 d2                	xor    %edx,%edx
+ 4e4:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 4d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 4d9:	eb 33                	jmp    50e <printf+0x5e>
- 4db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 4df:	90                   	nop
- 4e0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 4e6:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4e9:	eb 33                	jmp    51e <printf+0x5e>
+ 4eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4ef:	90                   	nop
+ 4f0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 4e3:	ba 25 00 00 00       	mov    $0x25,%edx
+ 4f3:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 4e8:	83 f8 25             	cmp    $0x25,%eax
- 4eb:	74 17                	je     504 <printf+0x54>
+ 4f8:	83 f8 25             	cmp    $0x25,%eax
+ 4fb:	74 17                	je     514 <printf+0x54>
   write(fd, &c, 1);
- 4ed:	83 ec 04             	sub    $0x4,%esp
- 4f0:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 4f3:	6a 01                	push   $0x1
- 4f5:	57                   	push   %edi
- 4f6:	ff 75 08             	pushl  0x8(%ebp)
- 4f9:	e8 75 fe ff ff       	call   373 <write>
- 4fe:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 4fd:	83 ec 04             	sub    $0x4,%esp
+ 500:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 503:	6a 01                	push   $0x1
+ 505:	57                   	push   %edi
+ 506:	ff 75 08             	pushl  0x8(%ebp)
+ 509:	e8 65 fe ff ff       	call   373 <write>
+ 50e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 501:	83 c4 10             	add    $0x10,%esp
+ 511:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 504:	0f b6 1e             	movzbl (%esi),%ebx
- 507:	83 c6 01             	add    $0x1,%esi
- 50a:	84 db                	test   %bl,%bl
- 50c:	74 71                	je     57f <printf+0xcf>
+ 514:	0f b6 1e             	movzbl (%esi),%ebx
+ 517:	83 c6 01             	add    $0x1,%esi
+ 51a:	84 db                	test   %bl,%bl
+ 51c:	74 71                	je     58f <printf+0xcf>
     c = fmt[i] & 0xff;
- 50e:	0f be cb             	movsbl %bl,%ecx
- 511:	0f b6 c3             	movzbl %bl,%eax
+ 51e:	0f be cb             	movsbl %bl,%ecx
+ 521:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 514:	85 d2                	test   %edx,%edx
- 516:	74 c8                	je     4e0 <printf+0x30>
+ 524:	85 d2                	test   %edx,%edx
+ 526:	74 c8                	je     4f0 <printf+0x30>
       }
     } else if(state == '%'){
- 518:	83 fa 25             	cmp    $0x25,%edx
- 51b:	75 e7                	jne    504 <printf+0x54>
+ 528:	83 fa 25             	cmp    $0x25,%edx
+ 52b:	75 e7                	jne    514 <printf+0x54>
       if(c == 'd'){
- 51d:	83 f8 64             	cmp    $0x64,%eax
- 520:	0f 84 9a 00 00 00    	je     5c0 <printf+0x110>
+ 52d:	83 f8 64             	cmp    $0x64,%eax
+ 530:	0f 84 9a 00 00 00    	je     5d0 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 526:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 52c:	83 f9 70             	cmp    $0x70,%ecx
- 52f:	74 5f                	je     590 <printf+0xe0>
+ 536:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 53c:	83 f9 70             	cmp    $0x70,%ecx
+ 53f:	74 5f                	je     5a0 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 531:	83 f8 73             	cmp    $0x73,%eax
- 534:	0f 84 d6 00 00 00    	je     610 <printf+0x160>
+ 541:	83 f8 73             	cmp    $0x73,%eax
+ 544:	0f 84 d6 00 00 00    	je     620 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 53a:	83 f8 63             	cmp    $0x63,%eax
- 53d:	0f 84 8d 00 00 00    	je     5d0 <printf+0x120>
+ 54a:	83 f8 63             	cmp    $0x63,%eax
+ 54d:	0f 84 8d 00 00 00    	je     5e0 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 543:	83 f8 25             	cmp    $0x25,%eax
- 546:	0f 84 b4 00 00 00    	je     600 <printf+0x150>
+ 553:	83 f8 25             	cmp    $0x25,%eax
+ 556:	0f 84 b4 00 00 00    	je     610 <printf+0x150>
   write(fd, &c, 1);
- 54c:	83 ec 04             	sub    $0x4,%esp
- 54f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 553:	6a 01                	push   $0x1
- 555:	57                   	push   %edi
- 556:	ff 75 08             	pushl  0x8(%ebp)
- 559:	e8 15 fe ff ff       	call   373 <write>
+ 55c:	83 ec 04             	sub    $0x4,%esp
+ 55f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 563:	6a 01                	push   $0x1
+ 565:	57                   	push   %edi
+ 566:	ff 75 08             	pushl  0x8(%ebp)
+ 569:	e8 05 fe ff ff       	call   373 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 55e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 56e:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 561:	83 c4 0c             	add    $0xc,%esp
- 564:	6a 01                	push   $0x1
- 566:	83 c6 01             	add    $0x1,%esi
- 569:	57                   	push   %edi
- 56a:	ff 75 08             	pushl  0x8(%ebp)
- 56d:	e8 01 fe ff ff       	call   373 <write>
+ 571:	83 c4 0c             	add    $0xc,%esp
+ 574:	6a 01                	push   $0x1
+ 576:	83 c6 01             	add    $0x1,%esi
+ 579:	57                   	push   %edi
+ 57a:	ff 75 08             	pushl  0x8(%ebp)
+ 57d:	e8 f1 fd ff ff       	call   373 <write>
   for(i = 0; fmt[i]; i++){
- 572:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 582:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 576:	83 c4 10             	add    $0x10,%esp
+ 586:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 579:	31 d2                	xor    %edx,%edx
+ 589:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 57b:	84 db                	test   %bl,%bl
- 57d:	75 8f                	jne    50e <printf+0x5e>
+ 58b:	84 db                	test   %bl,%bl
+ 58d:	75 8f                	jne    51e <printf+0x5e>
     }
   }
 }
- 57f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 582:	5b                   	pop    %ebx
- 583:	5e                   	pop    %esi
- 584:	5f                   	pop    %edi
- 585:	5d                   	pop    %ebp
- 586:	c3                   	ret    
- 587:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 58e:	66 90                	xchg   %ax,%ax
+ 58f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 592:	5b                   	pop    %ebx
+ 593:	5e                   	pop    %esi
+ 594:	5f                   	pop    %edi
+ 595:	5d                   	pop    %ebp
+ 596:	c3                   	ret    
+ 597:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 59e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 590:	83 ec 0c             	sub    $0xc,%esp
- 593:	b9 10 00 00 00       	mov    $0x10,%ecx
- 598:	6a 00                	push   $0x0
- 59a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 59d:	8b 45 08             	mov    0x8(%ebp),%eax
- 5a0:	8b 13                	mov    (%ebx),%edx
- 5a2:	e8 59 fe ff ff       	call   400 <printint>
+ 5a0:	83 ec 0c             	sub    $0xc,%esp
+ 5a3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5a8:	6a 00                	push   $0x0
+ 5aa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 5ad:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5b0:	8b 13                	mov    (%ebx),%edx
+ 5b2:	e8 59 fe ff ff       	call   410 <printint>
         ap++;
- 5a7:	89 d8                	mov    %ebx,%eax
- 5a9:	83 c4 10             	add    $0x10,%esp
+ 5b7:	89 d8                	mov    %ebx,%eax
+ 5b9:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5ac:	31 d2                	xor    %edx,%edx
+ 5bc:	31 d2                	xor    %edx,%edx
         ap++;
- 5ae:	83 c0 04             	add    $0x4,%eax
- 5b1:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 5b4:	e9 4b ff ff ff       	jmp    504 <printf+0x54>
- 5b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5be:	83 c0 04             	add    $0x4,%eax
+ 5c1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5c4:	e9 4b ff ff ff       	jmp    514 <printf+0x54>
+ 5c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 5c0:	83 ec 0c             	sub    $0xc,%esp
- 5c3:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 5c8:	6a 01                	push   $0x1
- 5ca:	eb ce                	jmp    59a <printf+0xea>
- 5cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5d0:	83 ec 0c             	sub    $0xc,%esp
+ 5d3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5d8:	6a 01                	push   $0x1
+ 5da:	eb ce                	jmp    5aa <printf+0xea>
+ 5dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 5d0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 5e0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 5d3:	83 ec 04             	sub    $0x4,%esp
+ 5e3:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 5d6:	8b 03                	mov    (%ebx),%eax
+ 5e6:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 5d8:	6a 01                	push   $0x1
+ 5e8:	6a 01                	push   $0x1
         ap++;
- 5da:	83 c3 04             	add    $0x4,%ebx
+ 5ea:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 5dd:	57                   	push   %edi
- 5de:	ff 75 08             	pushl  0x8(%ebp)
+ 5ed:	57                   	push   %edi
+ 5ee:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 5e1:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 5f1:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 5e4:	e8 8a fd ff ff       	call   373 <write>
+ 5f4:	e8 7a fd ff ff       	call   373 <write>
         ap++;
- 5e9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 5ec:	83 c4 10             	add    $0x10,%esp
+ 5f9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 5fc:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5ef:	31 d2                	xor    %edx,%edx
- 5f1:	e9 0e ff ff ff       	jmp    504 <printf+0x54>
- 5f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 5ff:	31 d2                	xor    %edx,%edx
+ 601:	e9 0e ff ff ff       	jmp    514 <printf+0x54>
+ 606:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 60d:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 600:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 610:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 603:	83 ec 04             	sub    $0x4,%esp
- 606:	e9 59 ff ff ff       	jmp    564 <printf+0xb4>
- 60b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 60f:	90                   	nop
+ 613:	83 ec 04             	sub    $0x4,%esp
+ 616:	e9 59 ff ff ff       	jmp    574 <printf+0xb4>
+ 61b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 61f:	90                   	nop
         s = (char*)*ap;
- 610:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 613:	8b 18                	mov    (%eax),%ebx
+ 620:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 623:	8b 18                	mov    (%eax),%ebx
         ap++;
- 615:	83 c0 04             	add    $0x4,%eax
- 618:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 625:	83 c0 04             	add    $0x4,%eax
+ 628:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 61b:	85 db                	test   %ebx,%ebx
- 61d:	74 17                	je     636 <printf+0x186>
+ 62b:	85 db                	test   %ebx,%ebx
+ 62d:	74 17                	je     646 <printf+0x186>
         while(*s != 0){
- 61f:	0f b6 03             	movzbl (%ebx),%eax
+ 62f:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 622:	31 d2                	xor    %edx,%edx
+ 632:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 624:	84 c0                	test   %al,%al
- 626:	0f 84 d8 fe ff ff    	je     504 <printf+0x54>
- 62c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 62f:	89 de                	mov    %ebx,%esi
- 631:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 634:	eb 1a                	jmp    650 <printf+0x1a0>
+ 634:	84 c0                	test   %al,%al
+ 636:	0f 84 d8 fe ff ff    	je     514 <printf+0x54>
+ 63c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 63f:	89 de                	mov    %ebx,%esi
+ 641:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 644:	eb 1a                	jmp    660 <printf+0x1a0>
           s = "(null)";
- 636:	bb 68 08 00 00       	mov    $0x868,%ebx
+ 646:	bb 78 08 00 00       	mov    $0x878,%ebx
         while(*s != 0){
- 63b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 63e:	b8 28 00 00 00       	mov    $0x28,%eax
- 643:	89 de                	mov    %ebx,%esi
- 645:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 648:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 64f:	90                   	nop
+ 64b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 64e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 653:	89 de                	mov    %ebx,%esi
+ 655:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 658:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 65f:	90                   	nop
   write(fd, &c, 1);
- 650:	83 ec 04             	sub    $0x4,%esp
+ 660:	83 ec 04             	sub    $0x4,%esp
           s++;
- 653:	83 c6 01             	add    $0x1,%esi
- 656:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 663:	83 c6 01             	add    $0x1,%esi
+ 666:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 659:	6a 01                	push   $0x1
- 65b:	57                   	push   %edi
- 65c:	53                   	push   %ebx
- 65d:	e8 11 fd ff ff       	call   373 <write>
+ 669:	6a 01                	push   $0x1
+ 66b:	57                   	push   %edi
+ 66c:	53                   	push   %ebx
+ 66d:	e8 01 fd ff ff       	call   373 <write>
         while(*s != 0){
- 662:	0f b6 06             	movzbl (%esi),%eax
- 665:	83 c4 10             	add    $0x10,%esp
- 668:	84 c0                	test   %al,%al
- 66a:	75 e4                	jne    650 <printf+0x1a0>
- 66c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 672:	0f b6 06             	movzbl (%esi),%eax
+ 675:	83 c4 10             	add    $0x10,%esp
+ 678:	84 c0                	test   %al,%al
+ 67a:	75 e4                	jne    660 <printf+0x1a0>
+ 67c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 66f:	31 d2                	xor    %edx,%edx
- 671:	e9 8e fe ff ff       	jmp    504 <printf+0x54>
- 676:	66 90                	xchg   %ax,%ax
- 678:	66 90                	xchg   %ax,%ax
- 67a:	66 90                	xchg   %ax,%ax
- 67c:	66 90                	xchg   %ax,%ax
- 67e:	66 90                	xchg   %ax,%ax
+ 67f:	31 d2                	xor    %edx,%edx
+ 681:	e9 8e fe ff ff       	jmp    514 <printf+0x54>
+ 686:	66 90                	xchg   %ax,%ax
+ 688:	66 90                	xchg   %ax,%ax
+ 68a:	66 90                	xchg   %ax,%ax
+ 68c:	66 90                	xchg   %ax,%ax
+ 68e:	66 90                	xchg   %ax,%ax
 
-00000680 <free>:
+00000690 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 680:	f3 0f 1e fb          	endbr32 
- 684:	55                   	push   %ebp
+ 690:	f3 0f 1e fb          	endbr32 
+ 694:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 685:	a1 24 0b 00 00       	mov    0xb24,%eax
+ 695:	a1 34 0b 00 00       	mov    0xb34,%eax
 {
- 68a:	89 e5                	mov    %esp,%ebp
- 68c:	57                   	push   %edi
- 68d:	56                   	push   %esi
- 68e:	53                   	push   %ebx
- 68f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 692:	8b 10                	mov    (%eax),%edx
+ 69a:	89 e5                	mov    %esp,%ebp
+ 69c:	57                   	push   %edi
+ 69d:	56                   	push   %esi
+ 69e:	53                   	push   %ebx
+ 69f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6a2:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 694:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 6a4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 697:	39 c8                	cmp    %ecx,%eax
- 699:	73 15                	jae    6b0 <free+0x30>
- 69b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 69f:	90                   	nop
- 6a0:	39 d1                	cmp    %edx,%ecx
- 6a2:	72 14                	jb     6b8 <free+0x38>
+ 6a7:	39 c8                	cmp    %ecx,%eax
+ 6a9:	73 15                	jae    6c0 <free+0x30>
+ 6ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6af:	90                   	nop
+ 6b0:	39 d1                	cmp    %edx,%ecx
+ 6b2:	72 14                	jb     6c8 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6a4:	39 d0                	cmp    %edx,%eax
- 6a6:	73 10                	jae    6b8 <free+0x38>
+ 6b4:	39 d0                	cmp    %edx,%eax
+ 6b6:	73 10                	jae    6c8 <free+0x38>
 {
- 6a8:	89 d0                	mov    %edx,%eax
+ 6b8:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6aa:	8b 10                	mov    (%eax),%edx
- 6ac:	39 c8                	cmp    %ecx,%eax
- 6ae:	72 f0                	jb     6a0 <free+0x20>
+ 6ba:	8b 10                	mov    (%eax),%edx
+ 6bc:	39 c8                	cmp    %ecx,%eax
+ 6be:	72 f0                	jb     6b0 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6b0:	39 d0                	cmp    %edx,%eax
- 6b2:	72 f4                	jb     6a8 <free+0x28>
- 6b4:	39 d1                	cmp    %edx,%ecx
- 6b6:	73 f0                	jae    6a8 <free+0x28>
+ 6c0:	39 d0                	cmp    %edx,%eax
+ 6c2:	72 f4                	jb     6b8 <free+0x28>
+ 6c4:	39 d1                	cmp    %edx,%ecx
+ 6c6:	73 f0                	jae    6b8 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 6b8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 6bb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 6be:	39 fa                	cmp    %edi,%edx
- 6c0:	74 1e                	je     6e0 <free+0x60>
+ 6c8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6cb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6ce:	39 fa                	cmp    %edi,%edx
+ 6d0:	74 1e                	je     6f0 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 6c2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 6d2:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 6c5:	8b 50 04             	mov    0x4(%eax),%edx
- 6c8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 6cb:	39 f1                	cmp    %esi,%ecx
- 6cd:	74 28                	je     6f7 <free+0x77>
+ 6d5:	8b 50 04             	mov    0x4(%eax),%edx
+ 6d8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6db:	39 f1                	cmp    %esi,%ecx
+ 6dd:	74 28                	je     707 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 6cf:	89 08                	mov    %ecx,(%eax)
+ 6df:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 6d1:	5b                   	pop    %ebx
+ 6e1:	5b                   	pop    %ebx
   freep = p;
- 6d2:	a3 24 0b 00 00       	mov    %eax,0xb24
+ 6e2:	a3 34 0b 00 00       	mov    %eax,0xb34
 }
- 6d7:	5e                   	pop    %esi
- 6d8:	5f                   	pop    %edi
- 6d9:	5d                   	pop    %ebp
- 6da:	c3                   	ret    
- 6db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 6df:	90                   	nop
+ 6e7:	5e                   	pop    %esi
+ 6e8:	5f                   	pop    %edi
+ 6e9:	5d                   	pop    %ebp
+ 6ea:	c3                   	ret    
+ 6eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6ef:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 6e0:	03 72 04             	add    0x4(%edx),%esi
- 6e3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 6f0:	03 72 04             	add    0x4(%edx),%esi
+ 6f3:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 6e6:	8b 10                	mov    (%eax),%edx
- 6e8:	8b 12                	mov    (%edx),%edx
- 6ea:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 6f6:	8b 10                	mov    (%eax),%edx
+ 6f8:	8b 12                	mov    (%edx),%edx
+ 6fa:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 6ed:	8b 50 04             	mov    0x4(%eax),%edx
- 6f0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 6f3:	39 f1                	cmp    %esi,%ecx
- 6f5:	75 d8                	jne    6cf <free+0x4f>
+ 6fd:	8b 50 04             	mov    0x4(%eax),%edx
+ 700:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 703:	39 f1                	cmp    %esi,%ecx
+ 705:	75 d8                	jne    6df <free+0x4f>
     p->s.size += bp->s.size;
- 6f7:	03 53 fc             	add    -0x4(%ebx),%edx
+ 707:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 6fa:	a3 24 0b 00 00       	mov    %eax,0xb24
+ 70a:	a3 34 0b 00 00       	mov    %eax,0xb34
     p->s.size += bp->s.size;
- 6ff:	89 50 04             	mov    %edx,0x4(%eax)
+ 70f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 702:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 705:	89 10                	mov    %edx,(%eax)
+ 712:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 715:	89 10                	mov    %edx,(%eax)
 }
- 707:	5b                   	pop    %ebx
- 708:	5e                   	pop    %esi
- 709:	5f                   	pop    %edi
- 70a:	5d                   	pop    %ebp
- 70b:	c3                   	ret    
- 70c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 717:	5b                   	pop    %ebx
+ 718:	5e                   	pop    %esi
+ 719:	5f                   	pop    %edi
+ 71a:	5d                   	pop    %ebp
+ 71b:	c3                   	ret    
+ 71c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000710 <malloc>:
+00000720 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 710:	f3 0f 1e fb          	endbr32 
- 714:	55                   	push   %ebp
- 715:	89 e5                	mov    %esp,%ebp
- 717:	57                   	push   %edi
- 718:	56                   	push   %esi
- 719:	53                   	push   %ebx
- 71a:	83 ec 1c             	sub    $0x1c,%esp
+ 720:	f3 0f 1e fb          	endbr32 
+ 724:	55                   	push   %ebp
+ 725:	89 e5                	mov    %esp,%ebp
+ 727:	57                   	push   %edi
+ 728:	56                   	push   %esi
+ 729:	53                   	push   %ebx
+ 72a:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 71d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 72d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 720:	8b 3d 24 0b 00 00    	mov    0xb24,%edi
+ 730:	8b 3d 34 0b 00 00    	mov    0xb34,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 726:	8d 70 07             	lea    0x7(%eax),%esi
- 729:	c1 ee 03             	shr    $0x3,%esi
- 72c:	83 c6 01             	add    $0x1,%esi
+ 736:	8d 70 07             	lea    0x7(%eax),%esi
+ 739:	c1 ee 03             	shr    $0x3,%esi
+ 73c:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 72f:	85 ff                	test   %edi,%edi
- 731:	0f 84 a9 00 00 00    	je     7e0 <malloc+0xd0>
+ 73f:	85 ff                	test   %edi,%edi
+ 741:	0f 84 a9 00 00 00    	je     7f0 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 737:	8b 07                	mov    (%edi),%eax
+ 747:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 739:	8b 48 04             	mov    0x4(%eax),%ecx
- 73c:	39 f1                	cmp    %esi,%ecx
- 73e:	73 6d                	jae    7ad <malloc+0x9d>
- 740:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 746:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 74b:	0f 43 de             	cmovae %esi,%ebx
+ 749:	8b 48 04             	mov    0x4(%eax),%ecx
+ 74c:	39 f1                	cmp    %esi,%ecx
+ 74e:	73 6d                	jae    7bd <malloc+0x9d>
+ 750:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 756:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 75b:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 74e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 755:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 758:	eb 17                	jmp    771 <malloc+0x61>
- 75a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 75e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 765:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 768:	eb 17                	jmp    781 <malloc+0x61>
+ 76a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 760:	8b 10                	mov    (%eax),%edx
+ 770:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 762:	8b 4a 04             	mov    0x4(%edx),%ecx
- 765:	39 f1                	cmp    %esi,%ecx
- 767:	73 4f                	jae    7b8 <malloc+0xa8>
- 769:	8b 3d 24 0b 00 00    	mov    0xb24,%edi
- 76f:	89 d0                	mov    %edx,%eax
+ 772:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 775:	39 f1                	cmp    %esi,%ecx
+ 777:	73 4f                	jae    7c8 <malloc+0xa8>
+ 779:	8b 3d 34 0b 00 00    	mov    0xb34,%edi
+ 77f:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 771:	39 c7                	cmp    %eax,%edi
- 773:	75 eb                	jne    760 <malloc+0x50>
+ 781:	39 c7                	cmp    %eax,%edi
+ 783:	75 eb                	jne    770 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 775:	83 ec 0c             	sub    $0xc,%esp
- 778:	ff 75 e4             	pushl  -0x1c(%ebp)
- 77b:	e8 5b fc ff ff       	call   3db <sbrk>
+ 785:	83 ec 0c             	sub    $0xc,%esp
+ 788:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 78b:	e8 4b fc ff ff       	call   3db <sbrk>
   if(p == (char*)-1)
- 780:	83 c4 10             	add    $0x10,%esp
- 783:	83 f8 ff             	cmp    $0xffffffff,%eax
- 786:	74 1b                	je     7a3 <malloc+0x93>
+ 790:	83 c4 10             	add    $0x10,%esp
+ 793:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 796:	74 1b                	je     7b3 <malloc+0x93>
   hp->s.size = nu;
- 788:	89 58 04             	mov    %ebx,0x4(%eax)
+ 798:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 78b:	83 ec 0c             	sub    $0xc,%esp
- 78e:	83 c0 08             	add    $0x8,%eax
- 791:	50                   	push   %eax
- 792:	e8 e9 fe ff ff       	call   680 <free>
+ 79b:	83 ec 0c             	sub    $0xc,%esp
+ 79e:	83 c0 08             	add    $0x8,%eax
+ 7a1:	50                   	push   %eax
+ 7a2:	e8 e9 fe ff ff       	call   690 <free>
   return freep;
- 797:	a1 24 0b 00 00       	mov    0xb24,%eax
+ 7a7:	a1 34 0b 00 00       	mov    0xb34,%eax
       if((p = morecore(nunits)) == 0)
- 79c:	83 c4 10             	add    $0x10,%esp
- 79f:	85 c0                	test   %eax,%eax
- 7a1:	75 bd                	jne    760 <malloc+0x50>
+ 7ac:	83 c4 10             	add    $0x10,%esp
+ 7af:	85 c0                	test   %eax,%eax
+ 7b1:	75 bd                	jne    770 <malloc+0x50>
         return 0;
   }
 }
- 7a3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7b3:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 7a6:	31 c0                	xor    %eax,%eax
+ 7b6:	31 c0                	xor    %eax,%eax
 }
- 7a8:	5b                   	pop    %ebx
- 7a9:	5e                   	pop    %esi
- 7aa:	5f                   	pop    %edi
- 7ab:	5d                   	pop    %ebp
- 7ac:	c3                   	ret    
+ 7b8:	5b                   	pop    %ebx
+ 7b9:	5e                   	pop    %esi
+ 7ba:	5f                   	pop    %edi
+ 7bb:	5d                   	pop    %ebp
+ 7bc:	c3                   	ret    
     if(p->s.size >= nunits){
- 7ad:	89 c2                	mov    %eax,%edx
- 7af:	89 f8                	mov    %edi,%eax
- 7b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7bd:	89 c2                	mov    %eax,%edx
+ 7bf:	89 f8                	mov    %edi,%eax
+ 7c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 7b8:	39 ce                	cmp    %ecx,%esi
- 7ba:	74 54                	je     810 <malloc+0x100>
+ 7c8:	39 ce                	cmp    %ecx,%esi
+ 7ca:	74 54                	je     820 <malloc+0x100>
         p->s.size -= nunits;
- 7bc:	29 f1                	sub    %esi,%ecx
- 7be:	89 4a 04             	mov    %ecx,0x4(%edx)
+ 7cc:	29 f1                	sub    %esi,%ecx
+ 7ce:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- 7c1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ 7d1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- 7c4:	89 72 04             	mov    %esi,0x4(%edx)
+ 7d4:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 7c7:	a3 24 0b 00 00       	mov    %eax,0xb24
+ 7d7:	a3 34 0b 00 00       	mov    %eax,0xb34
 }
- 7cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 7cf:	8d 42 08             	lea    0x8(%edx),%eax
+ 7df:	8d 42 08             	lea    0x8(%edx),%eax
 }
- 7d2:	5b                   	pop    %ebx
- 7d3:	5e                   	pop    %esi
- 7d4:	5f                   	pop    %edi
- 7d5:	5d                   	pop    %ebp
- 7d6:	c3                   	ret    
- 7d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 7de:	66 90                	xchg   %ax,%ax
+ 7e2:	5b                   	pop    %ebx
+ 7e3:	5e                   	pop    %esi
+ 7e4:	5f                   	pop    %edi
+ 7e5:	5d                   	pop    %ebp
+ 7e6:	c3                   	ret    
+ 7e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7ee:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 7e0:	c7 05 24 0b 00 00 28 	movl   $0xb28,0xb24
- 7e7:	0b 00 00 
+ 7f0:	c7 05 34 0b 00 00 38 	movl   $0xb38,0xb34
+ 7f7:	0b 00 00 
     base.s.size = 0;
- 7ea:	bf 28 0b 00 00       	mov    $0xb28,%edi
+ 7fa:	bf 38 0b 00 00       	mov    $0xb38,%edi
     base.s.ptr = freep = prevp = &base;
- 7ef:	c7 05 28 0b 00 00 28 	movl   $0xb28,0xb28
- 7f6:	0b 00 00 
+ 7ff:	c7 05 38 0b 00 00 38 	movl   $0xb38,0xb38
+ 806:	0b 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7f9:	89 f8                	mov    %edi,%eax
+ 809:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 7fb:	c7 05 2c 0b 00 00 00 	movl   $0x0,0xb2c
- 802:	00 00 00 
+ 80b:	c7 05 3c 0b 00 00 00 	movl   $0x0,0xb3c
+ 812:	00 00 00 
     if(p->s.size >= nunits){
- 805:	e9 36 ff ff ff       	jmp    740 <malloc+0x30>
- 80a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 815:	e9 36 ff ff ff       	jmp    750 <malloc+0x30>
+ 81a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 810:	8b 0a                	mov    (%edx),%ecx
- 812:	89 08                	mov    %ecx,(%eax)
- 814:	eb b1                	jmp    7c7 <malloc+0xb7>
+ 820:	8b 0a                	mov    (%edx),%ecx
+ 822:	89 08                	mov    %ecx,(%eax)
+ 824:	eb b1                	jmp    7d7 <malloc+0xb7>
Binary files xv6-public-original/initcode.o and xv6-public/initcode.o differ
Binary files xv6-public-original/initcode.out and xv6-public/initcode.out differ
Binary files xv6-public-original/init.o and xv6-public/init.o differ
diff -ruN xv6-public-original/init.sym xv6-public/init.sym
--- xv6-public-original/init.sym	2022-08-13 16:28:54.268356000 +0530
+++ xv6-public/init.sym	2022-09-05 20:56:49.702960000 +0530
@@ -1,8 +1,8 @@
 00000000 .text
-00000818 .rodata
-00000884 .eh_frame
-00000b1c .data
-00000b24 .bss
+00000828 .rodata
+00000894 .eh_frame
+00000b2c .data
+00000b34 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -14,19 +14,20 @@
 00000000 init.c
 00000000 ulib.c
 00000000 printf.c
-00000400 printint
-00000870 digits.1085
+00000410 printint
+00000880 digits.1094
 00000000 umalloc.c
-00000b24 freep
-00000b28 base
+00000b34 freep
+00000b38 base
 000000f0 strcpy
-000004b0 printf
-00000b1c argv
+000004c0 printf
+00000403 thread_exit
+00000b2c argv
 00000320 memmove
 0000039b mknod
 00000210 gets
 000003d3 getpid
-00000710 malloc
+00000720 malloc
 000003e3 sleep
 00000363 pipe
 00000373 write
@@ -40,20 +41,22 @@
 0000034b fork
 000003db sbrk
 000003eb uptime
-00000b24 __bss_start
+00000b34 __bss_start
 000001b0 memset
 00000000 main
 00000120 strcmp
 000003cb dup
 00000290 stat
-00000b24 _edata
-00000b30 _end
+00000b34 _edata
+00000b40 _end
 000003b3 link
 00000353 exit
 000002e0 atoi
 00000170 strlen
 00000393 open
 000001d0 strchr
+000003f3 thread_create
 000003bb mkdir
 0000037b close
-00000680 free
+000003fb thread_join
+00000690 free
Binary files xv6-public-original/ioapic.o and xv6-public/ioapic.o differ
Binary files xv6-public-original/kalloc.o and xv6-public/kalloc.o differ
Binary files xv6-public-original/kbd.o and xv6-public/kbd.o differ
Binary files xv6-public-original/kernel and xv6-public/kernel differ
diff -ruN xv6-public-original/kernel.asm xv6-public/kernel.asm
--- xv6-public-original/kernel.asm	2022-08-13 16:28:45.563028000 +0530
+++ xv6-public/kernel.asm	2022-09-05 20:56:54.726960000 +0530
@@ -75,9 +75,9 @@
 {
 8010004d:	83 ec 0c             	sub    $0xc,%esp
   initlock(&bcache.lock, "bcache");
-80100050:	68 e0 70 10 80       	push   $0x801070e0
+80100050:	68 80 74 10 80       	push   $0x80107480
 80100055:	68 c0 b5 10 80       	push   $0x8010b5c0
-8010005a:	e8 81 43 00 00       	call   801043e0 <initlock>
+8010005a:	e8 f1 46 00 00       	call   80104750 <initlock>
   bcache.head.next = &bcache.head;
 8010005f:	83 c4 10             	add    $0x10,%esp
 80100062:	b8 bc fc 10 80       	mov    $0x8010fcbc,%eax
@@ -100,9 +100,9 @@
     b->prev = &bcache.head;
 8010008b:	c7 43 50 bc fc 10 80 	movl   $0x8010fcbc,0x50(%ebx)
     initsleeplock(&b->lock, "buffer");
-80100092:	68 e7 70 10 80       	push   $0x801070e7
+80100092:	68 87 74 10 80       	push   $0x80107487
 80100097:	50                   	push   %eax
-80100098:	e8 03 42 00 00       	call   801042a0 <initsleeplock>
+80100098:	e8 73 45 00 00       	call   80104610 <initsleeplock>
     bcache.head.next->prev = b;
 8010009d:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
@@ -142,7 +142,7 @@
 801000e0:	8b 75 0c             	mov    0xc(%ebp),%esi
   acquire(&bcache.lock);
 801000e3:	68 c0 b5 10 80       	push   $0x8010b5c0
-801000e8:	e8 73 44 00 00       	call   80104560 <acquire>
+801000e8:	e8 e3 47 00 00       	call   801048d0 <acquire>
   for(b = bcache.head.next; b != &bcache.head; b = b->next){
 801000ed:	8b 1d 10 fd 10 80    	mov    0x8010fd10,%ebx
 801000f3:	83 c4 10             	add    $0x10,%esp
@@ -188,11 +188,11 @@
       release(&bcache.lock);
 8010015a:	83 ec 0c             	sub    $0xc,%esp
 8010015d:	68 c0 b5 10 80       	push   $0x8010b5c0
-80100162:	e8 b9 44 00 00       	call   80104620 <release>
+80100162:	e8 29 48 00 00       	call   80104990 <release>
       acquiresleep(&b->lock);
 80100167:	8d 43 0c             	lea    0xc(%ebx),%eax
 8010016a:	89 04 24             	mov    %eax,(%esp)
-8010016d:	e8 6e 41 00 00       	call   801042e0 <acquiresleep>
+8010016d:	e8 de 44 00 00       	call   80104650 <acquiresleep>
       return b;
 80100172:	83 c4 10             	add    $0x10,%esp
   struct buf *b;
@@ -229,7 +229,7 @@
 8010019e:	66 90                	xchg   %ax,%ax
   panic("bget: no buffers");
 801001a0:	83 ec 0c             	sub    $0xc,%esp
-801001a3:	68 ee 70 10 80       	push   $0x801070ee
+801001a3:	68 8e 74 10 80       	push   $0x8010748e
 801001a8:	e8 e3 01 00 00       	call   80100390 <panic>
 801001ad:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -248,7 +248,7 @@
   if(!holdingsleep(&b->lock))
 801001be:	8d 43 0c             	lea    0xc(%ebx),%eax
 801001c1:	50                   	push   %eax
-801001c2:	e8 b9 41 00 00       	call   80104380 <holdingsleep>
+801001c2:	e8 29 45 00 00       	call   801046f0 <holdingsleep>
 801001c7:	83 c4 10             	add    $0x10,%esp
 801001ca:	85 c0                	test   %eax,%eax
 801001cc:	74 0f                	je     801001dd <bwrite+0x2d>
@@ -264,7 +264,7 @@
 801001d8:	e9 a3 20 00 00       	jmp    80102280 <iderw>
     panic("bwrite");
 801001dd:	83 ec 0c             	sub    $0xc,%esp
-801001e0:	68 ff 70 10 80       	push   $0x801070ff
+801001e0:	68 9f 74 10 80       	push   $0x8010749f
 801001e5:	e8 a6 01 00 00       	call   80100390 <panic>
 801001ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
@@ -285,7 +285,7 @@
 801001fc:	8d 73 0c             	lea    0xc(%ebx),%esi
 801001ff:	83 ec 0c             	sub    $0xc,%esp
 80100202:	56                   	push   %esi
-80100203:	e8 78 41 00 00       	call   80104380 <holdingsleep>
+80100203:	e8 e8 44 00 00       	call   801046f0 <holdingsleep>
 80100208:	83 c4 10             	add    $0x10,%esp
 8010020b:	85 c0                	test   %eax,%eax
 8010020d:	74 66                	je     80100275 <brelse+0x85>
@@ -294,11 +294,11 @@
   releasesleep(&b->lock);
 8010020f:	83 ec 0c             	sub    $0xc,%esp
 80100212:	56                   	push   %esi
-80100213:	e8 28 41 00 00       	call   80104340 <releasesleep>
+80100213:	e8 98 44 00 00       	call   801046b0 <releasesleep>
 
   acquire(&bcache.lock);
 80100218:	c7 04 24 c0 b5 10 80 	movl   $0x8010b5c0,(%esp)
-8010021f:	e8 3c 43 00 00       	call   80104560 <acquire>
+8010021f:	e8 ac 46 00 00       	call   801048d0 <acquire>
   b->refcnt--;
 80100224:	8b 43 4c             	mov    0x4c(%ebx),%eax
   if (b->refcnt == 0) {
@@ -339,10 +339,10 @@
 8010026e:	5e                   	pop    %esi
 8010026f:	5d                   	pop    %ebp
   release(&bcache.lock);
-80100270:	e9 ab 43 00 00       	jmp    80104620 <release>
+80100270:	e9 1b 47 00 00       	jmp    80104990 <release>
     panic("brelse");
 80100275:	83 ec 0c             	sub    $0xc,%esp
-80100278:	68 06 71 10 80       	push   $0x80107106
+80100278:	68 a6 74 10 80       	push   $0x801074a6
 8010027d:	e8 0e 01 00 00       	call   80100390 <panic>
 80100282:	66 90                	xchg   %ax,%ax
 80100284:	66 90                	xchg   %ax,%ax
@@ -379,7 +379,7 @@
 801002a5:	e8 96 15 00 00       	call   80101840 <iunlock>
   acquire(&cons.lock);
 801002aa:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-801002b1:	e8 aa 42 00 00       	call   80104560 <acquire>
+801002b1:	e8 1a 46 00 00       	call   801048d0 <acquire>
         // caller gets a 0-byte result.
         input.r--;
       }
@@ -412,13 +412,13 @@
 801002f8:	75 36                	jne    80100330 <consoleread+0xa0>
       if(myproc()->killed){
 801002fa:	e8 61 36 00 00       	call   80103960 <myproc>
-801002ff:	8b 48 24             	mov    0x24(%eax),%ecx
+801002ff:	8b 48 28             	mov    0x28(%eax),%ecx
 80100302:	85 c9                	test   %ecx,%ecx
 80100304:	74 d2                	je     801002d8 <consoleread+0x48>
         release(&cons.lock);
 80100306:	83 ec 0c             	sub    $0xc,%esp
 80100309:	68 20 a5 10 80       	push   $0x8010a520
-8010030e:	e8 0d 43 00 00       	call   80104620 <release>
+8010030e:	e8 7d 46 00 00       	call   80104990 <release>
         ilock(ip);
 80100313:	5a                   	pop    %edx
 80100314:	ff 75 08             	pushl  0x8(%ebp)
@@ -463,7 +463,7 @@
   release(&cons.lock);
 8010035d:	83 ec 0c             	sub    $0xc,%esp
 80100360:	68 20 a5 10 80       	push   $0x8010a520
-80100365:	e8 b6 42 00 00       	call   80104620 <release>
+80100365:	e8 26 46 00 00       	call   80104990 <release>
   ilock(ip);
 8010036a:	58                   	pop    %eax
 8010036b:	ff 75 08             	pushl  0x8(%ebp)
@@ -514,14 +514,14 @@
 801003ad:	e8 ee 24 00 00       	call   801028a0 <lapicid>
 801003b2:	83 ec 08             	sub    $0x8,%esp
 801003b5:	50                   	push   %eax
-801003b6:	68 0d 71 10 80       	push   $0x8010710d
+801003b6:	68 ad 74 10 80       	push   $0x801074ad
 801003bb:	e8 f0 02 00 00       	call   801006b0 <cprintf>
   cprintf(s);
 801003c0:	58                   	pop    %eax
 801003c1:	ff 75 08             	pushl  0x8(%ebp)
 801003c4:	e8 e7 02 00 00       	call   801006b0 <cprintf>
   cprintf("\n");
-801003c9:	c7 04 24 37 7a 10 80 	movl   $0x80107a37,(%esp)
+801003c9:	c7 04 24 e3 7d 10 80 	movl   $0x80107de3,(%esp)
 801003d0:	e8 db 02 00 00       	call   801006b0 <cprintf>
   getcallerpcs(&s, pcs);
 801003d5:	8d 45 08             	lea    0x8(%ebp),%eax
@@ -529,14 +529,14 @@
 801003d9:	59                   	pop    %ecx
 801003da:	53                   	push   %ebx
 801003db:	50                   	push   %eax
-801003dc:	e8 1f 40 00 00       	call   80104400 <getcallerpcs>
+801003dc:	e8 8f 43 00 00       	call   80104770 <getcallerpcs>
   for(i=0; i<10; i++)
 801003e1:	83 c4 10             	add    $0x10,%esp
     cprintf(" %p", pcs[i]);
 801003e4:	83 ec 08             	sub    $0x8,%esp
 801003e7:	ff 33                	pushl  (%ebx)
 801003e9:	83 c3 04             	add    $0x4,%ebx
-801003ec:	68 21 71 10 80       	push   $0x80107121
+801003ec:	68 c1 74 10 80       	push   $0x801074c1
 801003f1:	e8 ba 02 00 00       	call   801006b0 <cprintf>
   for(i=0; i<10; i++)
 801003f6:	83 c4 10             	add    $0x10,%esp
@@ -564,7 +564,7 @@
     uartputc(c);
 80100426:	83 ec 0c             	sub    $0xc,%esp
 80100429:	50                   	push   %eax
-8010042a:	e8 b1 58 00 00       	call   80105ce0 <uartputc>
+8010042a:	e8 41 5c 00 00       	call   80106070 <uartputc>
 8010042f:	83 c4 10             	add    $0x10,%esp
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
 80100432:	bf d4 03 00 00       	mov    $0x3d4,%edi
@@ -657,11 +657,11 @@
     uartputc('\b'); uartputc(' '); uartputc('\b');
 80100510:	83 ec 0c             	sub    $0xc,%esp
 80100513:	6a 08                	push   $0x8
-80100515:	e8 c6 57 00 00       	call   80105ce0 <uartputc>
+80100515:	e8 56 5b 00 00       	call   80106070 <uartputc>
 8010051a:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
-80100521:	e8 ba 57 00 00       	call   80105ce0 <uartputc>
+80100521:	e8 4a 5b 00 00       	call   80106070 <uartputc>
 80100526:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-8010052d:	e8 ae 57 00 00       	call   80105ce0 <uartputc>
+8010052d:	e8 3e 5b 00 00       	call   80106070 <uartputc>
 80100532:	83 c4 10             	add    $0x10,%esp
 80100535:	e9 f8 fe ff ff       	jmp    80100432 <consputc.part.0+0x22>
 8010053a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -676,7 +676,7 @@
 80100552:	68 60 0e 00 00       	push   $0xe60
 80100557:	68 a0 80 0b 80       	push   $0x800b80a0
 8010055c:	68 00 80 0b 80       	push   $0x800b8000
-80100561:	e8 aa 41 00 00       	call   80104710 <memmove>
+80100561:	e8 1a 45 00 00       	call   80104a80 <memmove>
     memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
 80100566:	b8 80 07 00 00       	mov    $0x780,%eax
 8010056b:	83 c4 0c             	add    $0xc,%esp
@@ -685,13 +685,13 @@
 80100572:	50                   	push   %eax
 80100573:	6a 00                	push   $0x0
 80100575:	56                   	push   %esi
-80100576:	e8 f5 40 00 00       	call   80104670 <memset>
+80100576:	e8 65 44 00 00       	call   801049e0 <memset>
 8010057b:	88 5d e7             	mov    %bl,-0x19(%ebp)
 8010057e:	83 c4 10             	add    $0x10,%esp
 80100581:	e9 22 ff ff ff       	jmp    801004a8 <consputc.part.0+0x98>
     panic("pos under/overflow");
 80100586:	83 ec 0c             	sub    $0xc,%esp
-80100589:	68 25 71 10 80       	push   $0x80107125
+80100589:	68 c5 74 10 80       	push   $0x801074c5
 8010058e:	e8 fd fd ff ff       	call   80100390 <panic>
 80100593:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010059a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -722,7 +722,7 @@
 801005c2:	31 d2                	xor    %edx,%edx
 801005c4:	89 ce                	mov    %ecx,%esi
 801005c6:	f7 75 d4             	divl   -0x2c(%ebp)
-801005c9:	0f b6 92 50 71 10 80 	movzbl -0x7fef8eb0(%edx),%edx
+801005c9:	0f b6 92 f0 74 10 80 	movzbl -0x7fef8b10(%edx),%edx
 801005d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
 801005d3:	89 d8                	mov    %ebx,%eax
 801005d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
@@ -801,7 +801,7 @@
 80100653:	e8 e8 11 00 00       	call   80101840 <iunlock>
   acquire(&cons.lock);
 80100658:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-8010065f:	e8 fc 3e 00 00       	call   80104560 <acquire>
+8010065f:	e8 6c 42 00 00       	call   801048d0 <acquire>
   for(i = 0; i < n; i++)
 80100664:	83 c4 10             	add    $0x10,%esp
 80100667:	85 db                	test   %ebx,%ebx
@@ -826,7 +826,7 @@
   release(&cons.lock);
 8010068f:	83 ec 0c             	sub    $0xc,%esp
 80100692:	68 20 a5 10 80       	push   $0x8010a520
-80100697:	e8 84 3f 00 00       	call   80104620 <release>
+80100697:	e8 f4 42 00 00       	call   80104990 <release>
   ilock(ip);
 8010069c:	58                   	pop    %eax
 8010069d:	ff 75 08             	pushl  0x8(%ebp)
@@ -936,7 +936,7 @@
 80100779:	85 db                	test   %ebx,%ebx
 8010077b:	75 55                	jne    801007d2 <cprintf+0x122>
         s = "(null)";
-8010077d:	bb 38 71 10 80       	mov    $0x80107138,%ebx
+8010077d:	bb d8 74 10 80       	mov    $0x801074d8,%ebx
       for(; *s; s++)
 80100782:	b8 28 00 00 00       	mov    $0x28,%eax
   if(panicked){
@@ -962,7 +962,7 @@
     acquire(&cons.lock);
 801007b5:	83 ec 0c             	sub    $0xc,%esp
 801007b8:	68 20 a5 10 80       	push   $0x8010a520
-801007bd:	e8 9e 3d 00 00       	call   80104560 <acquire>
+801007bd:	e8 0e 41 00 00       	call   801048d0 <acquire>
 801007c2:	83 c4 10             	add    $0x10,%esp
 801007c5:	e9 03 ff ff ff       	jmp    801006cd <cprintf+0x1d>
 801007ca:	e8 41 fc ff ff       	call   80100410 <consputc.part.0>
@@ -1003,13 +1003,13 @@
     release(&cons.lock);
 80100820:	83 ec 0c             	sub    $0xc,%esp
 80100823:	68 20 a5 10 80       	push   $0x8010a520
-80100828:	e8 f3 3d 00 00       	call   80104620 <release>
+80100828:	e8 63 41 00 00       	call   80104990 <release>
 8010082d:	83 c4 10             	add    $0x10,%esp
 }
 80100830:	e9 ee fe ff ff       	jmp    80100723 <cprintf+0x73>
     panic("null fmt");
 80100835:	83 ec 0c             	sub    $0xc,%esp
-80100838:	68 3f 71 10 80       	push   $0x8010713f
+80100838:	68 df 74 10 80       	push   $0x801074df
 8010083d:	e8 4e fb ff ff       	call   80100390 <panic>
 80100842:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80100848:	89 f8                	mov    %edi,%eax
@@ -1034,7 +1034,7 @@
 8010086f:	8b 7d 08             	mov    0x8(%ebp),%edi
   acquire(&cons.lock);
 80100872:	68 20 a5 10 80       	push   $0x8010a520
-80100877:	e8 e4 3c 00 00       	call   80104560 <acquire>
+80100877:	e8 54 40 00 00       	call   801048d0 <acquire>
   while((c = getc()) >= 0){
 8010087c:	83 c4 10             	add    $0x10,%esp
 8010087f:	eb 17                	jmp    80100898 <consoleintr+0x38>
@@ -1145,7 +1145,7 @@
   release(&cons.lock);
 801009c7:	83 ec 0c             	sub    $0xc,%esp
 801009ca:	68 20 a5 10 80       	push   $0x8010a520
-801009cf:	e8 4c 3c 00 00       	call   80104620 <release>
+801009cf:	e8 bc 3f 00 00       	call   80104990 <release>
   if(doprocdump) {
 801009d4:	83 c4 10             	add    $0x10,%esp
 801009d7:	85 f6                	test   %esi,%esi
@@ -1199,9 +1199,9 @@
 80100a35:	89 e5                	mov    %esp,%ebp
 80100a37:	83 ec 10             	sub    $0x10,%esp
   initlock(&cons.lock, "console");
-80100a3a:	68 48 71 10 80       	push   $0x80107148
+80100a3a:	68 e8 74 10 80       	push   $0x801074e8
 80100a3f:	68 20 a5 10 80       	push   $0x8010a520
-80100a44:	e8 97 39 00 00       	call   801043e0 <initlock>
+80100a44:	e8 07 3d 00 00       	call   80104750 <initlock>
 
   devsw[CONSOLE].write = consolewrite;
   devsw[CONSOLE].read = consoleread;
@@ -1317,7 +1317,7 @@
 80100b07:	45 4c 46 
 80100b0a:	75 ce                	jne    80100ada <exec+0x5a>
   if((pgdir = setupkvm()) == 0)
-80100b0c:	e8 3f 63 00 00       	call   80106e50 <setupkvm>
+80100b0c:	e8 cf 66 00 00       	call   801071e0 <setupkvm>
 80100b11:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
 80100b17:	85 c0                	test   %eax,%eax
 80100b19:	74 bf                	je     80100ada <exec+0x5a>
@@ -1347,7 +1347,7 @@
 80100b66:	50                   	push   %eax
 80100b67:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
 80100b6d:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100b73:	e8 f8 60 00 00       	call   80106c70 <allocuvm>
+80100b73:	e8 88 64 00 00       	call   80107000 <allocuvm>
 80100b78:	83 c4 10             	add    $0x10,%esp
 80100b7b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
 80100b81:	85 c0                	test   %eax,%eax
@@ -1363,7 +1363,7 @@
 80100ba1:	53                   	push   %ebx
 80100ba2:	50                   	push   %eax
 80100ba3:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100ba9:	e8 f2 5f 00 00       	call   80106ba0 <loaduvm>
+80100ba9:	e8 82 63 00 00       	call   80106f30 <loaduvm>
 80100bae:	83 c4 20             	add    $0x20,%esp
 80100bb1:	85 c0                	test   %eax,%eax
 80100bb3:	78 2d                	js     80100be2 <exec+0x162>
@@ -1386,7 +1386,7 @@
     freevm(pgdir);
 80100be2:	83 ec 0c             	sub    $0xc,%esp
 80100be5:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100beb:	e8 e0 61 00 00       	call   80106dd0 <freevm>
+80100beb:	e8 70 65 00 00       	call   80107160 <freevm>
   if(ip){
 80100bf0:	83 c4 10             	add    $0x10,%esp
 80100bf3:	e9 e2 fe ff ff       	jmp    80100ada <exec+0x5a>
@@ -1408,7 +1408,7 @@
 80100c2a:	57                   	push   %edi
 80100c2b:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
 80100c31:	57                   	push   %edi
-80100c32:	e8 39 60 00 00       	call   80106c70 <allocuvm>
+80100c32:	e8 c9 63 00 00       	call   80107000 <allocuvm>
 80100c37:	83 c4 10             	add    $0x10,%esp
 80100c3a:	89 c6                	mov    %eax,%esi
 80100c3c:	85 c0                	test   %eax,%eax
@@ -1424,7 +1424,7 @@
   for(argc = 0; argv[argc]; argc++) {
 80100c51:	31 ff                	xor    %edi,%edi
   clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
-80100c53:	e8 98 62 00 00       	call   80106ef0 <clearpteu>
+80100c53:	e8 28 66 00 00       	call   80107280 <clearpteu>
   for(argc = 0; argv[argc]; argc++) {
 80100c58:	8b 45 0c             	mov    0xc(%ebp),%eax
 80100c5b:	83 c4 10             	add    $0x10,%esp
@@ -1453,7 +1453,7 @@
     sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
 80100c9f:	83 ec 0c             	sub    $0xc,%esp
 80100ca2:	50                   	push   %eax
-80100ca3:	e8 c8 3b 00 00       	call   80104870 <strlen>
+80100ca3:	e8 38 3f 00 00       	call   80104be0 <strlen>
 80100ca8:	f7 d0                	not    %eax
 80100caa:	01 c3                	add    %eax,%ebx
     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
@@ -1463,14 +1463,14 @@
 80100cb0:	83 e3 fc             	and    $0xfffffffc,%ebx
     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
 80100cb3:	ff 34 b8             	pushl  (%eax,%edi,4)
-80100cb6:	e8 b5 3b 00 00       	call   80104870 <strlen>
+80100cb6:	e8 25 3f 00 00       	call   80104be0 <strlen>
 80100cbb:	83 c0 01             	add    $0x1,%eax
 80100cbe:	50                   	push   %eax
 80100cbf:	8b 45 0c             	mov    0xc(%ebp),%eax
 80100cc2:	ff 34 b8             	pushl  (%eax,%edi,4)
 80100cc5:	53                   	push   %ebx
 80100cc6:	56                   	push   %esi
-80100cc7:	e8 84 63 00 00       	call   80107050 <copyout>
+80100cc7:	e8 14 67 00 00       	call   801073e0 <copyout>
 80100ccc:	83 c4 20             	add    $0x20,%esp
 80100ccf:	85 c0                	test   %eax,%eax
 80100cd1:	79 ad                	jns    80100c80 <exec+0x200>
@@ -1479,7 +1479,7 @@
     freevm(pgdir);
 80100cd8:	83 ec 0c             	sub    $0xc,%esp
 80100cdb:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100ce1:	e8 ea 60 00 00       	call   80106dd0 <freevm>
+80100ce1:	e8 7a 64 00 00       	call   80107160 <freevm>
 80100ce6:	83 c4 10             	add    $0x10,%esp
   return -1;
 80100ce9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
@@ -1510,7 +1510,7 @@
   ustack[2] = sp - (argc+1)*4;  // argv pointer
 80100d2d:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
   if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
-80100d33:	e8 18 63 00 00       	call   80107050 <copyout>
+80100d33:	e8 a8 66 00 00       	call   801073e0 <copyout>
 80100d38:	83 c4 10             	add    $0x10,%esp
 80100d3b:	85 c0                	test   %eax,%eax
 80100d3d:	78 99                	js     80100cd8 <exec+0x258>
@@ -1538,9 +1538,9 @@
 80100d68:	6a 10                	push   $0x10
 80100d6a:	89 f8                	mov    %edi,%eax
 80100d6c:	52                   	push   %edx
-80100d6d:	83 c0 6c             	add    $0x6c,%eax
+80100d6d:	83 c0 70             	add    $0x70,%eax
 80100d70:	50                   	push   %eax
-80100d71:	e8 ba 3a 00 00       	call   80104830 <safestrcpy>
+80100d71:	e8 2a 3e 00 00       	call   80104ba0 <safestrcpy>
   curproc->pgdir = pgdir;
 80100d76:	8b 8d f4 fe ff ff    	mov    -0x10c(%ebp),%ecx
   oldpgdir = curproc->pgdir;
@@ -1553,17 +1553,17 @@
   curproc->tf->eip = elf.entry;  // main
 80100d86:	89 c1                	mov    %eax,%ecx
 80100d88:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
-80100d8e:	8b 40 18             	mov    0x18(%eax),%eax
+80100d8e:	8b 40 1c             	mov    0x1c(%eax),%eax
 80100d91:	89 50 38             	mov    %edx,0x38(%eax)
   curproc->tf->esp = sp;
-80100d94:	8b 41 18             	mov    0x18(%ecx),%eax
+80100d94:	8b 41 1c             	mov    0x1c(%ecx),%eax
 80100d97:	89 58 44             	mov    %ebx,0x44(%eax)
   switchuvm(curproc);
 80100d9a:	89 0c 24             	mov    %ecx,(%esp)
-80100d9d:	e8 6e 5c 00 00       	call   80106a10 <switchuvm>
+80100d9d:	e8 fe 5f 00 00       	call   80106da0 <switchuvm>
   freevm(oldpgdir);
 80100da2:	89 3c 24             	mov    %edi,(%esp)
-80100da5:	e8 26 60 00 00       	call   80106dd0 <freevm>
+80100da5:	e8 b6 63 00 00       	call   80107160 <freevm>
   return 0;
 80100daa:	83 c4 10             	add    $0x10,%esp
 80100dad:	31 c0                	xor    %eax,%eax
@@ -1572,7 +1572,7 @@
 80100db4:	e8 e7 1f 00 00       	call   80102da0 <end_op>
     cprintf("exec: fail\n");
 80100db9:	83 ec 0c             	sub    $0xc,%esp
-80100dbc:	68 61 71 10 80       	push   $0x80107161
+80100dbc:	68 01 75 10 80       	push   $0x80107501
 80100dc1:	e8 ea f8 ff ff       	call   801006b0 <cprintf>
     return -1;
 80100dc6:	83 c4 10             	add    $0x10,%esp
@@ -1596,9 +1596,9 @@
 80100de5:	89 e5                	mov    %esp,%ebp
 80100de7:	83 ec 10             	sub    $0x10,%esp
   initlock(&ftable.lock, "ftable");
-80100dea:	68 6d 71 10 80       	push   $0x8010716d
+80100dea:	68 0d 75 10 80       	push   $0x8010750d
 80100def:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100df4:	e8 e7 35 00 00       	call   801043e0 <initlock>
+80100df4:	e8 57 39 00 00       	call   80104750 <initlock>
 }
 80100df9:	83 c4 10             	add    $0x10,%esp
 80100dfc:	c9                   	leave  
@@ -1624,7 +1624,7 @@
 80100e0d:	83 ec 10             	sub    $0x10,%esp
   acquire(&ftable.lock);
 80100e10:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e15:	e8 46 37 00 00       	call   80104560 <acquire>
+80100e15:	e8 b6 3a 00 00       	call   801048d0 <acquire>
 80100e1a:	83 c4 10             	add    $0x10,%esp
 80100e1d:	eb 0c                	jmp    80100e2b <filealloc+0x2b>
 80100e1f:	90                   	nop
@@ -1643,7 +1643,7 @@
 80100e35:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
       release(&ftable.lock);
 80100e3c:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e41:	e8 da 37 00 00       	call   80104620 <release>
+80100e41:	e8 4a 3b 00 00       	call   80104990 <release>
       return f;
     }
   }
@@ -1663,7 +1663,7 @@
 80100e53:	31 db                	xor    %ebx,%ebx
   release(&ftable.lock);
 80100e55:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e5a:	e8 c1 37 00 00       	call   80104620 <release>
+80100e5a:	e8 31 3b 00 00       	call   80104990 <release>
 }
 80100e5f:	89 d8                	mov    %ebx,%eax
   return 0;
@@ -1688,7 +1688,7 @@
 80100e7b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ftable.lock);
 80100e7e:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e83:	e8 d8 36 00 00       	call   80104560 <acquire>
+80100e83:	e8 48 3a 00 00       	call   801048d0 <acquire>
   if(f->ref < 1)
 80100e88:	8b 43 04             	mov    0x4(%ebx),%eax
 80100e8b:	83 c4 10             	add    $0x10,%esp
@@ -1703,7 +1703,7 @@
 80100e98:	89 43 04             	mov    %eax,0x4(%ebx)
   release(&ftable.lock);
 80100e9b:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100ea0:	e8 7b 37 00 00       	call   80104620 <release>
+80100ea0:	e8 eb 3a 00 00       	call   80104990 <release>
   return f;
 }
 80100ea5:	89 d8                	mov    %ebx,%eax
@@ -1712,7 +1712,7 @@
 80100eab:	c3                   	ret    
     panic("filedup");
 80100eac:	83 ec 0c             	sub    $0xc,%esp
-80100eaf:	68 74 71 10 80       	push   $0x80107174
+80100eaf:	68 14 75 10 80       	push   $0x80107514
 80100eb4:	e8 d7 f4 ff ff       	call   80100390 <panic>
 80100eb9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
@@ -1734,7 +1734,7 @@
 
   acquire(&ftable.lock);
 80100ed0:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100ed5:	e8 86 36 00 00       	call   80104560 <acquire>
+80100ed5:	e8 f6 39 00 00       	call   801048d0 <acquire>
   if(f->ref < 1)
 80100eda:	8b 53 04             	mov    0x4(%ebx),%edx
 80100edd:	83 c4 10             	add    $0x10,%esp
@@ -1767,7 +1767,7 @@
   ff = *f;
 80100f0d:	89 45 e0             	mov    %eax,-0x20(%ebp)
   release(&ftable.lock);
-80100f10:	e8 0b 37 00 00       	call   80104620 <release>
+80100f10:	e8 7b 3a 00 00       	call   80104990 <release>
 
   if(ff.type == FD_PIPE)
 80100f15:	83 c4 10             	add    $0x10,%esp
@@ -1798,7 +1798,7 @@
 80100f3c:	5f                   	pop    %edi
 80100f3d:	5d                   	pop    %ebp
     release(&ftable.lock);
-80100f3e:	e9 dd 36 00 00       	jmp    80104620 <release>
+80100f3e:	e9 4d 3a 00 00       	jmp    80104990 <release>
 80100f43:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80100f47:	90                   	nop
     begin_op();
@@ -1835,7 +1835,7 @@
 80100f88:	c3                   	ret    
     panic("fileclose");
 80100f89:	83 ec 0c             	sub    $0xc,%esp
-80100f8c:	68 7c 71 10 80       	push   $0x8010717c
+80100f8c:	68 1c 75 10 80       	push   $0x8010751c
 80100f91:	e8 fa f3 ff ff       	call   80100390 <panic>
 80100f96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80100f9d:	8d 76 00             	lea    0x0(%esi),%esi
@@ -1969,7 +1969,7 @@
 80101075:	eb d3                	jmp    8010104a <fileread+0x5a>
   panic("fileread");
 80101077:	83 ec 0c             	sub    $0xc,%esp
-8010107a:	68 86 71 10 80       	push   $0x80107186
+8010107a:	68 26 75 10 80       	push   $0x80107526
 8010107f:	e8 0c f3 ff ff       	call   80100390 <panic>
 80101084:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010108b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2093,7 +2093,7 @@
 8010115e:	75 17                	jne    80101177 <filewrite+0xe7>
         panic("short filewrite");
 80101160:	83 ec 0c             	sub    $0xc,%esp
-80101163:	68 8f 71 10 80       	push   $0x8010718f
+80101163:	68 2f 75 10 80       	push   $0x8010752f
 80101168:	e8 23 f2 ff ff       	call   80100390 <panic>
 8010116d:	8d 76 00             	lea    0x0(%esi),%esi
     }
@@ -2124,7 +2124,7 @@
 80101191:	e9 0a 24 00 00       	jmp    801035a0 <pipewrite>
   panic("filewrite");
 80101196:	83 ec 0c             	sub    $0xc,%esp
-80101199:	68 95 71 10 80       	push   $0x80107195
+80101199:	68 35 75 10 80       	push   $0x80107535
 8010119e:	e8 ed f1 ff ff       	call   80100390 <panic>
 801011a3:	66 90                	xchg   %ax,%ax
 801011a5:	66 90                	xchg   %ax,%ax
@@ -2201,7 +2201,7 @@
 80101213:	c3                   	ret    
     panic("freeing free block");
 80101214:	83 ec 0c             	sub    $0xc,%esp
-80101217:	68 9f 71 10 80       	push   $0x8010719f
+80101217:	68 3f 75 10 80       	push   $0x8010753f
 8010121c:	e8 6f f1 ff ff       	call   80100390 <panic>
 80101221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80101228:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -2274,7 +2274,7 @@
 801012cf:	77 80                	ja     80101251 <balloc+0x21>
   panic("balloc: out of blocks");
 801012d1:	83 ec 0c             	sub    $0xc,%esp
-801012d4:	68 b2 71 10 80       	push   $0x801071b2
+801012d4:	68 52 75 10 80       	push   $0x80107552
 801012d9:	e8 b2 f0 ff ff       	call   80100390 <panic>
 801012de:	66 90                	xchg   %ax,%ax
         bp->data[bi/8] |= m;  // Mark block in use.
@@ -2305,7 +2305,7 @@
 8010130d:	68 00 02 00 00       	push   $0x200
 80101312:	6a 00                	push   $0x0
 80101314:	50                   	push   %eax
-80101315:	e8 56 33 00 00       	call   80104670 <memset>
+80101315:	e8 c6 36 00 00       	call   801049e0 <memset>
   log_write(bp);
 8010131a:	89 1c 24             	mov    %ebx,(%esp)
 8010131d:	e8 ee 1b 00 00       	call   80102f10 <log_write>
@@ -2352,7 +2352,7 @@
 80101352:	89 55 e4             	mov    %edx,-0x1c(%ebp)
   acquire(&icache.lock);
 80101355:	68 e0 09 11 80       	push   $0x801109e0
-8010135a:	e8 01 32 00 00       	call   80104560 <acquire>
+8010135a:	e8 71 35 00 00       	call   801048d0 <acquire>
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
 8010135f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   acquire(&icache.lock);
@@ -2412,7 +2412,7 @@
 801013bb:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
   release(&icache.lock);
 801013c2:	68 e0 09 11 80       	push   $0x801109e0
-801013c7:	e8 54 32 00 00       	call   80104620 <release>
+801013c7:	e8 c4 35 00 00       	call   80104990 <release>
 
   return ip;
 801013cc:	83 c4 10             	add    $0x10,%esp
@@ -2439,7 +2439,7 @@
       ip->ref++;
 801013f2:	89 4b 08             	mov    %ecx,0x8(%ebx)
       release(&icache.lock);
-801013f5:	e8 26 32 00 00       	call   80104620 <release>
+801013f5:	e8 96 35 00 00       	call   80104990 <release>
       return ip;
 801013fa:	83 c4 10             	add    $0x10,%esp
 }
@@ -2460,7 +2460,7 @@
 8010141a:	e9 6e ff ff ff       	jmp    8010138d <iget+0x4d>
     panic("iget: no inodes");
 8010141f:	83 ec 0c             	sub    $0xc,%esp
-80101422:	68 c8 71 10 80       	push   $0x801071c8
+80101422:	68 68 75 10 80       	push   $0x80107568
 80101427:	e8 64 ef ff ff       	call   80100390 <panic>
 8010142c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
@@ -2581,7 +2581,7 @@
 801014e7:	c3                   	ret    
   panic("bmap: out of range");
 801014e8:	83 ec 0c             	sub    $0xc,%esp
-801014eb:	68 d8 71 10 80       	push   $0x801071d8
+801014eb:	68 78 75 10 80       	push   $0x80107578
 801014f0:	e8 9b ee ff ff       	call   80100390 <panic>
 801014f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 801014fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2608,7 +2608,7 @@
 80101521:	6a 1c                	push   $0x1c
 80101523:	50                   	push   %eax
 80101524:	56                   	push   %esi
-80101525:	e8 e6 31 00 00       	call   80104710 <memmove>
+80101525:	e8 56 35 00 00       	call   80104a80 <memmove>
   brelse(bp);
 8010152a:	89 5d 08             	mov    %ebx,0x8(%ebp)
 8010152d:	83 c4 10             	add    $0x10,%esp
@@ -2631,18 +2631,18 @@
 80101548:	bb 20 0a 11 80       	mov    $0x80110a20,%ebx
 8010154d:	83 ec 0c             	sub    $0xc,%esp
   initlock(&icache.lock, "icache");
-80101550:	68 eb 71 10 80       	push   $0x801071eb
+80101550:	68 8b 75 10 80       	push   $0x8010758b
 80101555:	68 e0 09 11 80       	push   $0x801109e0
-8010155a:	e8 81 2e 00 00       	call   801043e0 <initlock>
+8010155a:	e8 f1 31 00 00       	call   80104750 <initlock>
   for(i = 0; i < NINODE; i++) {
 8010155f:	83 c4 10             	add    $0x10,%esp
 80101562:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     initsleeplock(&icache.inode[i].lock, "inode");
 80101568:	83 ec 08             	sub    $0x8,%esp
-8010156b:	68 f2 71 10 80       	push   $0x801071f2
+8010156b:	68 92 75 10 80       	push   $0x80107592
 80101570:	53                   	push   %ebx
 80101571:	81 c3 90 00 00 00    	add    $0x90,%ebx
-80101577:	e8 24 2d 00 00       	call   801042a0 <initsleeplock>
+80101577:	e8 94 30 00 00       	call   80104610 <initsleeplock>
   for(i = 0; i < NINODE; i++) {
 8010157c:	83 c4 10             	add    $0x10,%esp
 8010157f:	81 fb 40 26 11 80    	cmp    $0x80112640,%ebx
@@ -2660,7 +2660,7 @@
 801015af:	ff 35 c8 09 11 80    	pushl  0x801109c8
 801015b5:	ff 35 c4 09 11 80    	pushl  0x801109c4
 801015bb:	ff 35 c0 09 11 80    	pushl  0x801109c0
-801015c1:	68 58 72 10 80       	push   $0x80107258
+801015c1:	68 f8 75 10 80       	push   $0x801075f8
 801015c6:	e8 e5 f0 ff ff       	call   801006b0 <cprintf>
 }
 801015cb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
@@ -2727,7 +2727,7 @@
 80101659:	6a 40                	push   $0x40
 8010165b:	6a 00                	push   $0x0
 8010165d:	51                   	push   %ecx
-8010165e:	e8 0d 30 00 00       	call   80104670 <memset>
+8010165e:	e8 7d 33 00 00       	call   801049e0 <memset>
       dip->type = type;
 80101663:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
 80101667:	8b 4d e0             	mov    -0x20(%ebp),%ecx
@@ -2756,7 +2756,7 @@
 8010168b:	e9 b0 fc ff ff       	jmp    80101340 <iget>
   panic("ialloc: no inodes");
 80101690:	83 ec 0c             	sub    $0xc,%esp
-80101693:	68 f8 71 10 80       	push   $0x801071f8
+80101693:	68 98 75 10 80       	push   $0x80107598
 80101698:	e8 f3 ec ff ff       	call   80100390 <panic>
 8010169d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -2811,7 +2811,7 @@
 80101701:	6a 34                	push   $0x34
 80101703:	53                   	push   %ebx
 80101704:	50                   	push   %eax
-80101705:	e8 06 30 00 00       	call   80104710 <memmove>
+80101705:	e8 76 33 00 00       	call   80104a80 <memmove>
   log_write(bp);
 8010170a:	89 34 24             	mov    %esi,(%esp)
 8010170d:	e8 fe 17 00 00       	call   80102f10 <log_write>
@@ -2838,12 +2838,12 @@
 8010173b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&icache.lock);
 8010173e:	68 e0 09 11 80       	push   $0x801109e0
-80101743:	e8 18 2e 00 00       	call   80104560 <acquire>
+80101743:	e8 88 31 00 00       	call   801048d0 <acquire>
   ip->ref++;
 80101748:	83 43 08 01          	addl   $0x1,0x8(%ebx)
   release(&icache.lock);
 8010174c:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101753:	e8 c8 2e 00 00       	call   80104620 <release>
+80101753:	e8 38 32 00 00       	call   80104990 <release>
 }
 80101758:	89 d8                	mov    %ebx,%eax
 8010175a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
@@ -2869,7 +2869,7 @@
 8010177f:	83 ec 0c             	sub    $0xc,%esp
 80101782:	8d 43 0c             	lea    0xc(%ebx),%eax
 80101785:	50                   	push   %eax
-80101786:	e8 55 2b 00 00       	call   801042e0 <acquiresleep>
+80101786:	e8 c5 2e 00 00       	call   80104650 <acquiresleep>
   if(ip->valid == 0){
 8010178b:	8b 43 4c             	mov    0x4c(%ebx),%eax
 8010178e:	83 c4 10             	add    $0x10,%esp
@@ -2922,7 +2922,7 @@
 801017f3:	50                   	push   %eax
 801017f4:	8d 43 5c             	lea    0x5c(%ebx),%eax
 801017f7:	50                   	push   %eax
-801017f8:	e8 13 2f 00 00       	call   80104710 <memmove>
+801017f8:	e8 83 32 00 00       	call   80104a80 <memmove>
     brelse(bp);
 801017fd:	89 34 24             	mov    %esi,(%esp)
 80101800:	e8 eb e9 ff ff       	call   801001f0 <brelse>
@@ -2935,11 +2935,11 @@
 80101814:	0f 85 7b ff ff ff    	jne    80101795 <ilock+0x35>
       panic("ilock: no type");
 8010181a:	83 ec 0c             	sub    $0xc,%esp
-8010181d:	68 10 72 10 80       	push   $0x80107210
+8010181d:	68 b0 75 10 80       	push   $0x801075b0
 80101822:	e8 69 eb ff ff       	call   80100390 <panic>
     panic("ilock");
 80101827:	83 ec 0c             	sub    $0xc,%esp
-8010182a:	68 0a 72 10 80       	push   $0x8010720a
+8010182a:	68 aa 75 10 80       	push   $0x801075aa
 8010182f:	e8 5c eb ff ff       	call   80100390 <panic>
 80101834:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010183b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2959,7 +2959,7 @@
 80101850:	83 ec 0c             	sub    $0xc,%esp
 80101853:	8d 73 0c             	lea    0xc(%ebx),%esi
 80101856:	56                   	push   %esi
-80101857:	e8 24 2b 00 00       	call   80104380 <holdingsleep>
+80101857:	e8 94 2e 00 00       	call   801046f0 <holdingsleep>
 8010185c:	83 c4 10             	add    $0x10,%esp
 8010185f:	85 c0                	test   %eax,%eax
 80101861:	74 15                	je     80101878 <iunlock+0x38>
@@ -2974,10 +2974,10 @@
 80101871:	5e                   	pop    %esi
 80101872:	5d                   	pop    %ebp
   releasesleep(&ip->lock);
-80101873:	e9 c8 2a 00 00       	jmp    80104340 <releasesleep>
+80101873:	e9 38 2e 00 00       	jmp    801046b0 <releasesleep>
     panic("iunlock");
 80101878:	83 ec 0c             	sub    $0xc,%esp
-8010187b:	68 1f 72 10 80       	push   $0x8010721f
+8010187b:	68 bf 75 10 80       	push   $0x801075bf
 80101880:	e8 0b eb ff ff       	call   80100390 <panic>
 80101885:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010188c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2995,7 +2995,7 @@
   acquiresleep(&ip->lock);
 801018a0:	8d 7b 0c             	lea    0xc(%ebx),%edi
 801018a3:	57                   	push   %edi
-801018a4:	e8 37 2a 00 00       	call   801042e0 <acquiresleep>
+801018a4:	e8 a7 2d 00 00       	call   80104650 <acquiresleep>
   if(ip->valid && ip->nlink == 0){
 801018a9:	8b 53 4c             	mov    0x4c(%ebx),%edx
 801018ac:	83 c4 10             	add    $0x10,%esp
@@ -3006,10 +3006,10 @@
   releasesleep(&ip->lock);
 801018ba:	83 ec 0c             	sub    $0xc,%esp
 801018bd:	57                   	push   %edi
-801018be:	e8 7d 2a 00 00       	call   80104340 <releasesleep>
+801018be:	e8 ed 2d 00 00       	call   801046b0 <releasesleep>
   acquire(&icache.lock);
 801018c3:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-801018ca:	e8 91 2c 00 00       	call   80104560 <acquire>
+801018ca:	e8 01 30 00 00       	call   801048d0 <acquire>
   ip->ref--;
 801018cf:	83 6b 08 01          	subl   $0x1,0x8(%ebx)
   release(&icache.lock);
@@ -3022,17 +3022,17 @@
 801018e2:	5f                   	pop    %edi
 801018e3:	5d                   	pop    %ebp
   release(&icache.lock);
-801018e4:	e9 37 2d 00 00       	jmp    80104620 <release>
+801018e4:	e9 a7 30 00 00       	jmp    80104990 <release>
 801018e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     acquire(&icache.lock);
 801018f0:	83 ec 0c             	sub    $0xc,%esp
 801018f3:	68 e0 09 11 80       	push   $0x801109e0
-801018f8:	e8 63 2c 00 00       	call   80104560 <acquire>
+801018f8:	e8 d3 2f 00 00       	call   801048d0 <acquire>
     int r = ip->ref;
 801018fd:	8b 73 08             	mov    0x8(%ebx),%esi
     release(&icache.lock);
 80101900:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101907:	e8 14 2d 00 00       	call   80104620 <release>
+80101907:	e8 84 30 00 00       	call   80104990 <release>
     if(r == 1){
 8010190c:	83 c4 10             	add    $0x10,%esp
 8010190f:	83 fe 01             	cmp    $0x1,%esi
@@ -3287,7 +3287,7 @@
     memmove(dst, bp->data + off%BSIZE, m);
 80101b03:	50                   	push   %eax
 80101b04:	ff 75 e0             	pushl  -0x20(%ebp)
-80101b07:	e8 04 2c 00 00       	call   80104710 <memmove>
+80101b07:	e8 74 2f 00 00       	call   80104a80 <memmove>
     brelse(bp);
 80101b0c:	8b 55 dc             	mov    -0x24(%ebp),%edx
 80101b0f:	89 14 24             	mov    %edx,(%esp)
@@ -3417,7 +3417,7 @@
     memmove(bp->data + off%BSIZE, src, m);
 80101bff:	ff 75 dc             	pushl  -0x24(%ebp)
 80101c02:	50                   	push   %eax
-80101c03:	e8 08 2b 00 00       	call   80104710 <memmove>
+80101c03:	e8 78 2e 00 00       	call   80104a80 <memmove>
     log_write(bp);
 80101c08:	89 3c 24             	mov    %edi,(%esp)
 80101c0b:	e8 00 13 00 00       	call   80102f10 <log_write>
@@ -3500,7 +3500,7 @@
 80101c9a:	6a 0e                	push   $0xe
 80101c9c:	ff 75 0c             	pushl  0xc(%ebp)
 80101c9f:	ff 75 08             	pushl  0x8(%ebp)
-80101ca2:	e8 d9 2a 00 00       	call   80104780 <strncmp>
+80101ca2:	e8 49 2e 00 00       	call   80104af0 <strncmp>
 }
 80101ca7:	c9                   	leave  
 80101ca8:	c3                   	ret    
@@ -3556,7 +3556,7 @@
 80101cff:	6a 0e                	push   $0xe
 80101d01:	50                   	push   %eax
 80101d02:	ff 75 0c             	pushl  0xc(%ebp)
-80101d05:	e8 76 2a 00 00       	call   80104780 <strncmp>
+80101d05:	e8 e6 2d 00 00       	call   80104af0 <strncmp>
       continue;
     if(namecmp(name, de.name) == 0){
 80101d0a:	83 c4 10             	add    $0x10,%esp
@@ -3604,11 +3604,11 @@
 80101d46:	c3                   	ret    
       panic("dirlookup read");
 80101d47:	83 ec 0c             	sub    $0xc,%esp
-80101d4a:	68 39 72 10 80       	push   $0x80107239
+80101d4a:	68 d9 75 10 80       	push   $0x801075d9
 80101d4f:	e8 3c e6 ff ff       	call   80100390 <panic>
     panic("dirlookup not DIR");
 80101d54:	83 ec 0c             	sub    $0xc,%esp
-80101d57:	68 27 72 10 80       	push   $0x80107227
+80101d57:	68 c7 75 10 80       	push   $0x801075c7
 80101d5c:	e8 2f e6 ff ff       	call   80100390 <panic>
 80101d61:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80101d68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -3645,15 +3645,15 @@
 80101d8f:	83 ec 0c             	sub    $0xc,%esp
 80101d92:	89 df                	mov    %ebx,%edi
     ip = idup(myproc()->cwd);
-80101d94:	8b 70 68             	mov    0x68(%eax),%esi
+80101d94:	8b 70 6c             	mov    0x6c(%eax),%esi
   acquire(&icache.lock);
 80101d97:	68 e0 09 11 80       	push   $0x801109e0
-80101d9c:	e8 bf 27 00 00       	call   80104560 <acquire>
+80101d9c:	e8 2f 2b 00 00       	call   801048d0 <acquire>
   ip->ref++;
 80101da1:	83 46 08 01          	addl   $0x1,0x8(%esi)
   release(&icache.lock);
 80101da5:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101dac:	e8 6f 28 00 00       	call   80104620 <release>
+80101dac:	e8 df 2b 00 00       	call   80104990 <release>
 80101db1:	83 c4 10             	add    $0x10,%esp
 80101db4:	eb 0d                	jmp    80101dc3 <namex+0x53>
 80101db6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -3698,7 +3698,7 @@
 80101e12:	89 df                	mov    %ebx,%edi
     memmove(name, s, DIRSIZ);
 80101e14:	ff 75 e4             	pushl  -0x1c(%ebp)
-80101e17:	e8 f4 28 00 00       	call   80104710 <memmove>
+80101e17:	e8 64 2c 00 00       	call   80104a80 <memmove>
 80101e1c:	83 c4 10             	add    $0x10,%esp
   while(*path == '/')
 80101e1f:	80 3b 2f             	cmpb   $0x2f,(%ebx)
@@ -3764,7 +3764,7 @@
 80101e9e:	89 df                	mov    %ebx,%edi
     memmove(name, s, len);
 80101ea0:	ff 75 e4             	pushl  -0x1c(%ebp)
-80101ea3:	e8 68 28 00 00       	call   80104710 <memmove>
+80101ea3:	e8 d8 2b 00 00       	call   80104a80 <memmove>
     name[len] = 0;
 80101ea8:	8b 45 dc             	mov    -0x24(%ebp),%eax
 80101eab:	83 c4 10             	add    $0x10,%esp
@@ -3910,7 +3910,7 @@
 80101fcf:	6a 0e                	push   $0xe
 80101fd1:	ff 75 0c             	pushl  0xc(%ebp)
 80101fd4:	50                   	push   %eax
-80101fd5:	e8 f6 27 00 00       	call   801047d0 <strncpy>
+80101fd5:	e8 66 2b 00 00       	call   80104b40 <strncpy>
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
 80101fda:	6a 10                	push   $0x10
   de.inum = inum;
@@ -3945,11 +3945,11 @@
 8010200e:	eb e5                	jmp    80101ff5 <dirlink+0x85>
       panic("dirlink read");
 80102010:	83 ec 0c             	sub    $0xc,%esp
-80102013:	68 48 72 10 80       	push   $0x80107248
+80102013:	68 e8 75 10 80       	push   $0x801075e8
 80102018:	e8 73 e3 ff ff       	call   80100390 <panic>
     panic("dirlink");
 8010201d:	83 ec 0c             	sub    $0xc,%esp
-80102020:	68 1e 78 10 80       	push   $0x8010781e
+80102020:	68 ca 7b 10 80       	push   $0x80107bca
 80102025:	e8 66 e3 ff ff       	call   80100390 <panic>
 8010202a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
@@ -4100,11 +4100,11 @@
 80102127:	c3                   	ret    
     panic("incorrect blockno");
 80102128:	83 ec 0c             	sub    $0xc,%esp
-8010212b:	68 b4 72 10 80       	push   $0x801072b4
+8010212b:	68 54 76 10 80       	push   $0x80107654
 80102130:	e8 5b e2 ff ff       	call   80100390 <panic>
     panic("idestart");
 80102135:	83 ec 0c             	sub    $0xc,%esp
-80102138:	68 ab 72 10 80       	push   $0x801072ab
+80102138:	68 4b 76 10 80       	push   $0x8010764b
 8010213d:	e8 4e e2 ff ff       	call   80100390 <panic>
 80102142:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80102149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -4116,9 +4116,9 @@
 80102155:	89 e5                	mov    %esp,%ebp
 80102157:	83 ec 10             	sub    $0x10,%esp
   initlock(&idelock, "ide");
-8010215a:	68 c6 72 10 80       	push   $0x801072c6
+8010215a:	68 66 76 10 80       	push   $0x80107666
 8010215f:	68 80 a5 10 80       	push   $0x8010a580
-80102164:	e8 77 22 00 00       	call   801043e0 <initlock>
+80102164:	e8 e7 25 00 00       	call   80104750 <initlock>
   ioapicenable(IRQ_IDE, ncpu - 1);
 80102169:	58                   	pop    %eax
 8010216a:	a1 00 2d 11 80       	mov    0x80112d00,%eax
@@ -4186,7 +4186,7 @@
   // First queued buffer is the active request.
   acquire(&idelock);
 801021ed:	68 80 a5 10 80       	push   $0x8010a580
-801021f2:	e8 69 23 00 00       	call   80104560 <acquire>
+801021f2:	e8 d9 26 00 00       	call   801048d0 <acquire>
 
   if((b = idequeue) == 0){
 801021f7:	8b 1d 64 a5 10 80    	mov    0x8010a564,%ebx
@@ -4251,7 +4251,7 @@
     release(&idelock);
 80102263:	83 ec 0c             	sub    $0xc,%esp
 80102266:	68 80 a5 10 80       	push   $0x8010a580
-8010226b:	e8 b0 23 00 00       	call   80104620 <release>
+8010226b:	e8 20 27 00 00       	call   80104990 <release>
 
   release(&idelock);
 }
@@ -4282,7 +4282,7 @@
   if(!holdingsleep(&b->lock))
 8010228e:	8d 43 0c             	lea    0xc(%ebx),%eax
 80102291:	50                   	push   %eax
-80102292:	e8 e9 20 00 00       	call   80104380 <holdingsleep>
+80102292:	e8 59 24 00 00       	call   801046f0 <holdingsleep>
 80102297:	83 c4 10             	add    $0x10,%esp
 8010229a:	85 c0                	test   %eax,%eax
 8010229c:	0f 84 cf 00 00 00    	je     80102371 <iderw+0xf1>
@@ -4305,7 +4305,7 @@
   acquire(&idelock);  //DOC:acquire-lock
 801022c4:	83 ec 0c             	sub    $0xc,%esp
 801022c7:	68 80 a5 10 80       	push   $0x8010a580
-801022cc:	e8 8f 22 00 00       	call   80104560 <acquire>
+801022cc:	e8 ff 25 00 00       	call   801048d0 <acquire>
 
   // Append b to idequeue.
   b->qnext = 0;
@@ -4361,7 +4361,7 @@
 80102332:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 80102335:	c9                   	leave  
   release(&idelock);
-80102336:	e9 e5 22 00 00       	jmp    80104620 <release>
+80102336:	e9 55 26 00 00       	jmp    80104990 <release>
 8010233b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8010233f:	90                   	nop
     idestart(b);
@@ -4374,15 +4374,15 @@
 80102355:	eb 9d                	jmp    801022f4 <iderw+0x74>
     panic("iderw: ide disk 1 not present");
 80102357:	83 ec 0c             	sub    $0xc,%esp
-8010235a:	68 f5 72 10 80       	push   $0x801072f5
+8010235a:	68 95 76 10 80       	push   $0x80107695
 8010235f:	e8 2c e0 ff ff       	call   80100390 <panic>
     panic("iderw: nothing to do");
 80102364:	83 ec 0c             	sub    $0xc,%esp
-80102367:	68 e0 72 10 80       	push   $0x801072e0
+80102367:	68 80 76 10 80       	push   $0x80107680
 8010236c:	e8 1f e0 ff ff       	call   80100390 <panic>
     panic("iderw: buf not locked");
 80102371:	83 ec 0c             	sub    $0xc,%esp
-80102374:	68 ca 72 10 80       	push   $0x801072ca
+80102374:	68 6a 76 10 80       	push   $0x8010766a
 80102379:	e8 12 e0 ff ff       	call   80100390 <panic>
 8010237e:	66 90                	xchg   %ax,%ax
 
@@ -4431,7 +4431,7 @@
 801023c9:	74 16                	je     801023e1 <ioapicinit+0x61>
     cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
 801023cb:	83 ec 0c             	sub    $0xc,%esp
-801023ce:	68 14 73 10 80       	push   $0x80107314
+801023ce:	68 b4 76 10 80       	push   $0x801076b4
 801023d3:	e8 d8 e2 ff ff       	call   801006b0 <cprintf>
 801023d8:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
 801023de:	83 c4 10             	add    $0x10,%esp
@@ -4539,7 +4539,7 @@
   if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
 8010247e:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
 80102484:	75 7a                	jne    80102500 <kfree+0x90>
-80102486:	81 fb a8 54 11 80    	cmp    $0x801154a8,%ebx
+80102486:	81 fb a8 55 11 80    	cmp    $0x801155a8,%ebx
 8010248c:	72 72                	jb     80102500 <kfree+0x90>
 8010248e:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
 80102494:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
@@ -4552,7 +4552,7 @@
 8010249e:	68 00 10 00 00       	push   $0x1000
 801024a3:	6a 01                	push   $0x1
 801024a5:	53                   	push   %ebx
-801024a6:	e8 c5 21 00 00       	call   80104670 <memset>
+801024a6:	e8 35 25 00 00       	call   801049e0 <memset>
 
   if(kmem.use_lock)
 801024ab:	8b 15 74 26 11 80    	mov    0x80112674,%edx
@@ -4582,7 +4582,7 @@
     acquire(&kmem.lock);
 801024d8:	83 ec 0c             	sub    $0xc,%esp
 801024db:	68 40 26 11 80       	push   $0x80112640
-801024e0:	e8 7b 20 00 00       	call   80104560 <acquire>
+801024e0:	e8 eb 23 00 00       	call   801048d0 <acquire>
 801024e5:	83 c4 10             	add    $0x10,%esp
 801024e8:	eb ce                	jmp    801024b8 <kfree+0x48>
 801024ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -4592,10 +4592,10 @@
 801024f7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 801024fa:	c9                   	leave  
     release(&kmem.lock);
-801024fb:	e9 20 21 00 00       	jmp    80104620 <release>
+801024fb:	e9 90 24 00 00       	jmp    80104990 <release>
     panic("kfree");
 80102500:	83 ec 0c             	sub    $0xc,%esp
-80102503:	68 46 73 10 80       	push   $0x80107346
+80102503:	68 e6 76 10 80       	push   $0x801076e6
 80102508:	e8 83 de ff ff       	call   80100390 <panic>
 8010250d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -4649,9 +4649,9 @@
 80102569:	8b 75 0c             	mov    0xc(%ebp),%esi
   initlock(&kmem.lock, "kmem");
 8010256c:	83 ec 08             	sub    $0x8,%esp
-8010256f:	68 4c 73 10 80       	push   $0x8010734c
+8010256f:	68 ec 76 10 80       	push   $0x801076ec
 80102574:	68 40 26 11 80       	push   $0x80112640
-80102579:	e8 62 1e 00 00       	call   801043e0 <initlock>
+80102579:	e8 d2 21 00 00       	call   80104750 <initlock>
   p = (char*)PGROUNDUP((uint)vstart);
 8010257e:	8b 45 08             	mov    0x8(%ebp),%eax
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
@@ -4768,7 +4768,7 @@
 8010265b:	83 ec 24             	sub    $0x24,%esp
     acquire(&kmem.lock);
 8010265e:	68 40 26 11 80       	push   $0x80112640
-80102663:	e8 f8 1e 00 00       	call   80104560 <acquire>
+80102663:	e8 68 22 00 00       	call   801048d0 <acquire>
   r = kmem.freelist;
 80102668:	a1 78 26 11 80       	mov    0x80112678,%eax
   if(r)
@@ -4786,7 +4786,7 @@
 80102686:	83 ec 0c             	sub    $0xc,%esp
 80102689:	89 45 f4             	mov    %eax,-0xc(%ebp)
 8010268c:	68 40 26 11 80       	push   $0x80112640
-80102691:	e8 8a 1f 00 00       	call   80104620 <release>
+80102691:	e8 fa 22 00 00       	call   80104990 <release>
   return (char*)r;
 80102696:	8b 45 f4             	mov    -0xc(%ebp),%eax
     release(&kmem.lock);
@@ -4854,9 +4854,9 @@
   }
 
   shift |= shiftcode[data];
-801026df:	0f b6 8a 80 74 10 80 	movzbl -0x7fef8b80(%edx),%ecx
+801026df:	0f b6 8a 20 78 10 80 	movzbl -0x7fef87e0(%edx),%ecx
   shift ^= togglecode[data];
-801026e6:	0f b6 82 80 73 10 80 	movzbl -0x7fef8c80(%edx),%eax
+801026e6:	0f b6 82 20 77 10 80 	movzbl -0x7fef88e0(%edx),%eax
   shift |= shiftcode[data];
 801026ed:	09 d9                	or     %ebx,%ecx
   shift ^= togglecode[data];
@@ -4870,7 +4870,7 @@
   if(shift & CAPSLOCK){
 801026fc:	83 e1 08             	and    $0x8,%ecx
   c = charcode[shift & (CTL | SHIFT)][data];
-801026ff:	8b 04 85 60 73 10 80 	mov    -0x7fef8ca0(,%eax,4),%eax
+801026ff:	8b 04 85 00 77 10 80 	mov    -0x7fef8900(,%eax,4),%eax
 80102706:	0f b6 04 10          	movzbl (%eax,%edx,1),%eax
   if(shift & CAPSLOCK){
 8010270a:	74 0b                	je     80102717 <kbdgetc+0x77>
@@ -4907,7 +4907,7 @@
     return 0;
 80102738:	31 c0                	xor    %eax,%eax
     shift &= ~(shiftcode[data] | E0ESC);
-8010273a:	0f b6 8a 80 74 10 80 	movzbl -0x7fef8b80(%edx),%ecx
+8010273a:	0f b6 8a 20 78 10 80 	movzbl -0x7fef87e0(%edx),%ecx
 80102741:	83 c9 40             	or     $0x40,%ecx
 80102744:	0f b6 c9             	movzbl %cl,%ecx
 80102747:	f7 d1                	not    %ecx
@@ -5402,7 +5402,7 @@
 80102aba:	50                   	push   %eax
 80102abb:	8d 45 b8             	lea    -0x48(%ebp),%eax
 80102abe:	50                   	push   %eax
-80102abf:	e8 fc 1b 00 00       	call   801046c0 <memcmp>
+80102abf:	e8 6c 1f 00 00       	call   80104a30 <memcmp>
 80102ac4:	83 c4 10             	add    $0x10,%esp
 80102ac7:	85 c0                	test   %eax,%eax
 80102ac9:	0f 85 f1 fe ff ff    	jne    801029c0 <cmostime+0x30>
@@ -5545,7 +5545,7 @@
 80102bef:	50                   	push   %eax
 80102bf0:	8d 43 5c             	lea    0x5c(%ebx),%eax
 80102bf3:	50                   	push   %eax
-80102bf4:	e8 17 1b 00 00       	call   80104710 <memmove>
+80102bf4:	e8 87 1e 00 00       	call   80104a80 <memmove>
     bwrite(dbuf);  // write dst to disk
 80102bf9:	89 1c 24             	mov    %ebx,(%esp)
 80102bfc:	e8 af d5 ff ff       	call   801001b0 <bwrite>
@@ -5634,9 +5634,9 @@
 80102c98:	83 ec 2c             	sub    $0x2c,%esp
 80102c9b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&log.lock, "log");
-80102c9e:	68 80 75 10 80       	push   $0x80107580
+80102c9e:	68 20 79 10 80       	push   $0x80107920
 80102ca3:	68 80 26 11 80       	push   $0x80112680
-80102ca8:	e8 33 17 00 00       	call   801043e0 <initlock>
+80102ca8:	e8 a3 1a 00 00       	call   80104750 <initlock>
   readsb(dev, &sb);
 80102cad:	58                   	pop    %eax
 80102cae:	8d 45 dc             	lea    -0x24(%ebp),%eax
@@ -5716,7 +5716,7 @@
 80102d37:	83 ec 14             	sub    $0x14,%esp
   acquire(&log.lock);
 80102d3a:	68 80 26 11 80       	push   $0x80112680
-80102d3f:	e8 1c 18 00 00       	call   80104560 <acquire>
+80102d3f:	e8 8c 1b 00 00       	call   801048d0 <acquire>
 80102d44:	83 c4 10             	add    $0x10,%esp
 80102d47:	eb 1c                	jmp    80102d65 <begin_op+0x35>
 80102d49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -5750,7 +5750,7 @@
 80102d8a:	a3 bc 26 11 80       	mov    %eax,0x801126bc
       release(&log.lock);
 80102d8f:	68 80 26 11 80       	push   $0x80112680
-80102d94:	e8 87 18 00 00       	call   80104620 <release>
+80102d94:	e8 f7 1b 00 00       	call   80104990 <release>
       break;
     }
   }
@@ -5778,7 +5778,7 @@
 
   acquire(&log.lock);
 80102dad:	68 80 26 11 80       	push   $0x80112680
-80102db2:	e8 a9 17 00 00       	call   80104560 <acquire>
+80102db2:	e8 19 1b 00 00       	call   801048d0 <acquire>
   log.outstanding -= 1;
 80102db7:	a1 bc 26 11 80       	mov    0x801126bc,%eax
   if(log.committing)
@@ -5806,7 +5806,7 @@
   release(&log.lock);
 80102de8:	83 ec 0c             	sub    $0xc,%esp
 80102deb:	68 80 26 11 80       	push   $0x80112680
-80102df0:	e8 2b 18 00 00       	call   80104620 <release>
+80102df0:	e8 9b 1b 00 00       	call   80104990 <release>
 }
 
 static void
@@ -5820,7 +5820,7 @@
     acquire(&log.lock);
 80102e02:	83 ec 0c             	sub    $0xc,%esp
 80102e05:	68 80 26 11 80       	push   $0x80112680
-80102e0a:	e8 51 17 00 00       	call   80104560 <acquire>
+80102e0a:	e8 c1 1a 00 00       	call   801048d0 <acquire>
     wakeup(&log);
 80102e0f:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
     log.committing = 0;
@@ -5830,7 +5830,7 @@
 80102e20:	e8 bb 12 00 00       	call   801040e0 <wakeup>
     release(&log.lock);
 80102e25:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
-80102e2c:	e8 ef 17 00 00       	call   80104620 <release>
+80102e2c:	e8 5f 1b 00 00       	call   80104990 <release>
 80102e31:	83 c4 10             	add    $0x10,%esp
 }
 80102e34:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -5868,7 +5868,7 @@
 80102e7f:	50                   	push   %eax
 80102e80:	8d 46 5c             	lea    0x5c(%esi),%eax
 80102e83:	50                   	push   %eax
-80102e84:	e8 87 18 00 00       	call   80104710 <memmove>
+80102e84:	e8 f7 1b 00 00       	call   80104a80 <memmove>
     bwrite(to);  // write the log
 80102e89:	89 34 24             	mov    %esi,(%esp)
 80102e8c:	e8 1f d3 ff ff       	call   801001b0 <bwrite>
@@ -5900,7 +5900,7 @@
 80102ed8:	e8 03 12 00 00       	call   801040e0 <wakeup>
   release(&log.lock);
 80102edd:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
-80102ee4:	e8 37 17 00 00       	call   80104620 <release>
+80102ee4:	e8 a7 1a 00 00       	call   80104990 <release>
 80102ee9:	83 c4 10             	add    $0x10,%esp
 }
 80102eec:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -5911,7 +5911,7 @@
 80102ef3:	c3                   	ret    
     panic("log.committing");
 80102ef4:	83 ec 0c             	sub    $0xc,%esp
-80102ef7:	68 84 75 10 80       	push   $0x80107584
+80102ef7:	68 24 79 10 80       	push   $0x80107924
 80102efc:	e8 8f d4 ff ff       	call   80100390 <panic>
 80102f01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80102f08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -5952,7 +5952,7 @@
   acquire(&log.lock);
 80102f4a:	83 ec 0c             	sub    $0xc,%esp
 80102f4d:	68 80 26 11 80       	push   $0x80112680
-80102f52:	e8 09 16 00 00       	call   80104560 <acquire>
+80102f52:	e8 79 19 00 00       	call   801048d0 <acquire>
   for (i = 0; i < log.lh.n; i++) {
 80102f57:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
 80102f5d:	83 c4 10             	add    $0x10,%esp
@@ -5987,7 +5987,7 @@
 }
 80102f94:	c9                   	leave  
   release(&log.lock);
-80102f95:	e9 86 16 00 00       	jmp    80104620 <release>
+80102f95:	e9 f6 19 00 00       	jmp    80104990 <release>
 80102f9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   log.lh.block[i] = b->blockno;
 80102fa0:	89 0c 95 cc 26 11 80 	mov    %ecx,-0x7feed934(,%edx,4)
@@ -6003,11 +6003,11 @@
 80102fbc:	eb e9                	jmp    80102fa7 <log_write+0x97>
     panic("too big a transaction");
 80102fbe:	83 ec 0c             	sub    $0xc,%esp
-80102fc1:	68 93 75 10 80       	push   $0x80107593
+80102fc1:	68 33 79 10 80       	push   $0x80107933
 80102fc6:	e8 c5 d3 ff ff       	call   80100390 <panic>
     panic("log_write outside of trans");
 80102fcb:	83 ec 0c             	sub    $0xc,%esp
-80102fce:	68 a9 75 10 80       	push   $0x801075a9
+80102fce:	68 49 79 10 80       	push   $0x80107949
 80102fd3:	e8 b8 d3 ff ff       	call   80100390 <panic>
 80102fd8:	66 90                	xchg   %ax,%ax
 80102fda:	66 90                	xchg   %ax,%ax
@@ -6032,10 +6032,10 @@
 80102ff3:	83 ec 04             	sub    $0x4,%esp
 80102ff6:	53                   	push   %ebx
 80102ff7:	50                   	push   %eax
-80102ff8:	68 c4 75 10 80       	push   $0x801075c4
+80102ff8:	68 64 79 10 80       	push   $0x80107964
 80102ffd:	e8 ae d6 ff ff       	call   801006b0 <cprintf>
   idtinit();       // load idt register
-80103002:	e8 19 29 00 00       	call   80105920 <idtinit>
+80103002:	e8 a9 2c 00 00       	call   80105cb0 <idtinit>
   xchg(&(mycpu()->started), 1); // tell startothers() we're up
 80103007:	e8 c4 08 00 00       	call   801038d0 <mycpu>
 8010300c:	89 c2                	mov    %eax,%edx
@@ -6058,9 +6058,9 @@
 80103025:	89 e5                	mov    %esp,%ebp
 80103027:	83 ec 08             	sub    $0x8,%esp
   switchkvm();
-8010302a:	e8 c1 39 00 00       	call   801069f0 <switchkvm>
+8010302a:	e8 51 3d 00 00       	call   80106d80 <switchkvm>
   seginit();
-8010302f:	e8 2c 39 00 00       	call   80106960 <seginit>
+8010302f:	e8 bc 3c 00 00       	call   80106cf0 <seginit>
   lapicinit();
 80103034:	e8 67 f7 ff ff       	call   801027a0 <lapicinit>
   mpmain();
@@ -6080,16 +6080,16 @@
   kinit1(end, P2V(4*1024*1024)); // phys page allocator
 80103053:	83 ec 08             	sub    $0x8,%esp
 80103056:	68 00 00 40 80       	push   $0x80400000
-8010305b:	68 a8 54 11 80       	push   $0x801154a8
+8010305b:	68 a8 55 11 80       	push   $0x801155a8
 80103060:	e8 fb f4 ff ff       	call   80102560 <kinit1>
   kvmalloc();      // kernel page table
-80103065:	e8 66 3e 00 00       	call   80106ed0 <kvmalloc>
+80103065:	e8 f6 41 00 00       	call   80107260 <kvmalloc>
   mpinit();        // detect other processors
 8010306a:	e8 81 01 00 00       	call   801031f0 <mpinit>
   lapicinit();     // interrupt controller
 8010306f:	e8 2c f7 ff ff       	call   801027a0 <lapicinit>
   seginit();       // segment descriptors
-80103074:	e8 e7 38 00 00       	call   80106960 <seginit>
+80103074:	e8 77 3c 00 00       	call   80106cf0 <seginit>
   picinit();       // disable pic
 80103079:	e8 52 03 00 00       	call   801033d0 <picinit>
   ioapicinit();    // another interrupt controller
@@ -6097,11 +6097,11 @@
   consoleinit();   // console hardware
 80103083:	e8 a8 d9 ff ff       	call   80100a30 <consoleinit>
   uartinit();      // serial port
-80103088:	e8 93 2b 00 00       	call   80105c20 <uartinit>
+80103088:	e8 23 2f 00 00       	call   80105fb0 <uartinit>
   pinit();         // process table
 8010308d:	e8 1e 08 00 00       	call   801038b0 <pinit>
   tvinit();        // trap vectors
-80103092:	e8 09 28 00 00       	call   801058a0 <tvinit>
+80103092:	e8 99 2b 00 00       	call   80105c30 <tvinit>
   binit();         // buffer cache
 80103097:	e8 a4 cf ff ff       	call   80100040 <binit>
   fileinit();      // file table
@@ -6118,7 +6118,7 @@
 801030a9:	68 8a 00 00 00       	push   $0x8a
 801030ae:	68 8c a4 10 80       	push   $0x8010a48c
 801030b3:	68 00 70 00 80       	push   $0x80007000
-801030b8:	e8 53 16 00 00       	call   80104710 <memmove>
+801030b8:	e8 c3 19 00 00       	call   80104a80 <memmove>
 
   for(c = cpus; c < cpus+ncpu; c++){
 801030bd:	83 c4 10             	add    $0x10,%esp
@@ -6223,9 +6223,9 @@
 80103196:	83 ec 04             	sub    $0x4,%esp
 80103199:	8d 7e 10             	lea    0x10(%esi),%edi
 8010319c:	6a 04                	push   $0x4
-8010319e:	68 d8 75 10 80       	push   $0x801075d8
+8010319e:	68 78 79 10 80       	push   $0x80107978
 801031a3:	56                   	push   %esi
-801031a4:	e8 17 15 00 00       	call   801046c0 <memcmp>
+801031a4:	e8 87 18 00 00       	call   80104a30 <memcmp>
 801031a9:	83 c4 10             	add    $0x10,%esp
 801031ac:	85 c0                	test   %eax,%eax
 801031ae:	75 e0                	jne    80103190 <mpsearch1+0x20>
@@ -6311,12 +6311,12 @@
 80103252:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
   if(memcmp(conf, "PCMP", 4) != 0)
 80103258:	6a 04                	push   $0x4
-8010325a:	68 dd 75 10 80       	push   $0x801075dd
+8010325a:	68 7d 79 10 80       	push   $0x8010797d
 8010325f:	50                   	push   %eax
   conf = (struct mpconf*) P2V((uint) mp->physaddr);
 80103260:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(memcmp(conf, "PCMP", 4) != 0)
-80103263:	e8 58 14 00 00       	call   801046c0 <memcmp>
+80103263:	e8 c8 17 00 00       	call   80104a30 <memcmp>
 80103268:	83 c4 10             	add    $0x10,%esp
 8010326b:	85 c0                	test   %eax,%eax
 8010326d:	0f 85 3d 01 00 00    	jne    801033b0 <mpinit+0x1c0>
@@ -6466,11 +6466,11 @@
 801033a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     panic("Expect to run on an SMP");
 801033b0:	83 ec 0c             	sub    $0xc,%esp
-801033b3:	68 e2 75 10 80       	push   $0x801075e2
+801033b3:	68 82 79 10 80       	push   $0x80107982
 801033b8:	e8 d3 cf ff ff       	call   80100390 <panic>
     panic("Didn't find a suitable machine");
 801033bd:	83 ec 0c             	sub    $0xc,%esp
-801033c0:	68 fc 75 10 80       	push   $0x801075fc
+801033c0:	68 9c 79 10 80       	push   $0x8010799c
 801033c5:	e8 c6 cf ff ff       	call   80100390 <panic>
 801033ca:	66 90                	xchg   %ax,%ax
 801033cc:	66 90                	xchg   %ax,%ax
@@ -6556,9 +6556,9 @@
 8010345d:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
 80103464:	00 00 00 
   initlock(&p->lock, "pipe");
-80103467:	68 1b 76 10 80       	push   $0x8010761b
+80103467:	68 bb 79 10 80       	push   $0x801079bb
 8010346c:	50                   	push   %eax
-8010346d:	e8 6e 0f 00 00       	call   801043e0 <initlock>
+8010346d:	e8 de 12 00 00       	call   80104750 <initlock>
   (*f0)->type = FD_PIPE;
 80103472:	8b 03                	mov    (%ebx),%eax
   (*f0)->pipe = p;
@@ -6659,7 +6659,7 @@
   acquire(&p->lock);
 8010350f:	83 ec 0c             	sub    $0xc,%esp
 80103512:	53                   	push   %ebx
-80103513:	e8 48 10 00 00       	call   80104560 <acquire>
+80103513:	e8 b8 13 00 00       	call   801048d0 <acquire>
   if(writable){
 80103518:	83 c4 10             	add    $0x10,%esp
 8010351b:	85 f6                	test   %esi,%esi
@@ -6697,7 +6697,7 @@
 80103556:	5e                   	pop    %esi
 80103557:	5d                   	pop    %ebp
     release(&p->lock);
-80103558:	e9 c3 10 00 00       	jmp    80104620 <release>
+80103558:	e9 33 14 00 00       	jmp    80104990 <release>
 8010355d:	8d 76 00             	lea    0x0(%esi),%esi
     wakeup(&p->nwrite);
 80103560:	83 ec 0c             	sub    $0xc,%esp
@@ -6714,7 +6714,7 @@
     release(&p->lock);
 80103580:	83 ec 0c             	sub    $0xc,%esp
 80103583:	53                   	push   %ebx
-80103584:	e8 97 10 00 00       	call   80104620 <release>
+80103584:	e8 07 14 00 00       	call   80104990 <release>
     kfree((char*)p);
 80103589:	89 5d 08             	mov    %ebx,0x8(%ebp)
 8010358c:	83 c4 10             	add    $0x10,%esp
@@ -6745,7 +6745,7 @@
 
   acquire(&p->lock);
 801035b0:	53                   	push   %ebx
-801035b1:	e8 aa 0f 00 00       	call   80104560 <acquire>
+801035b1:	e8 1a 13 00 00       	call   801048d0 <acquire>
   for(i = 0; i < n; i++){
 801035b6:	8b 45 10             	mov    0x10(%ebp),%eax
 801035b9:	83 c4 10             	add    $0x10,%esp
@@ -6776,7 +6776,7 @@
 801035f5:	8d 76 00             	lea    0x0(%esi),%esi
       if(p->readopen == 0 || myproc()->killed){
 801035f8:	e8 63 03 00 00       	call   80103960 <myproc>
-801035fd:	8b 48 24             	mov    0x24(%eax),%ecx
+801035fd:	8b 48 28             	mov    0x28(%eax),%ecx
 80103600:	85 c9                	test   %ecx,%ecx
 80103602:	75 34                	jne    80103638 <pipewrite+0x98>
       wakeup(&p->nread);
@@ -6803,7 +6803,7 @@
         release(&p->lock);
 80103638:	83 ec 0c             	sub    $0xc,%esp
 8010363b:	53                   	push   %ebx
-8010363c:	e8 df 0f 00 00       	call   80104620 <release>
+8010363c:	e8 4f 13 00 00       	call   80104990 <release>
         return -1;
 80103641:	83 c4 10             	add    $0x10,%esp
 80103644:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
@@ -6839,7 +6839,7 @@
 8010368a:	e8 51 0a 00 00       	call   801040e0 <wakeup>
   release(&p->lock);
 8010368f:	89 1c 24             	mov    %ebx,(%esp)
-80103692:	e8 89 0f 00 00       	call   80104620 <release>
+80103692:	e8 f9 12 00 00       	call   80104990 <release>
   return n;
 80103697:	8b 45 10             	mov    0x10(%ebp),%eax
 8010369a:	83 c4 10             	add    $0x10,%esp
@@ -6865,7 +6865,7 @@
   acquire(&p->lock);
 801036b3:	56                   	push   %esi
 801036b4:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
-801036ba:	e8 a1 0e 00 00       	call   80104560 <acquire>
+801036ba:	e8 11 12 00 00       	call   801048d0 <acquire>
   while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
 801036bf:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
 801036c5:	83 c4 10             	add    $0x10,%esp
@@ -6875,7 +6875,7 @@
 801036d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(myproc()->killed){
 801036d8:	e8 83 02 00 00       	call   80103960 <myproc>
-801036dd:	8b 48 24             	mov    0x24(%eax),%ecx
+801036dd:	8b 48 28             	mov    0x28(%eax),%ecx
 801036e0:	85 c9                	test   %ecx,%ecx
 801036e2:	0f 85 88 00 00 00    	jne    80103770 <piperead+0xd0>
       release(&p->lock);
@@ -6927,7 +6927,7 @@
 80103756:	e8 85 09 00 00       	call   801040e0 <wakeup>
   release(&p->lock);
 8010375b:	89 34 24             	mov    %esi,(%esp)
-8010375e:	e8 bd 0e 00 00       	call   80104620 <release>
+8010375e:	e8 2d 12 00 00       	call   80104990 <release>
   return i;
 80103763:	83 c4 10             	add    $0x10,%esp
 }
@@ -6944,7 +6944,7 @@
 80103773:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
       release(&p->lock);
 80103778:	56                   	push   %esi
-80103779:	e8 a2 0e 00 00       	call   80104620 <release>
+80103779:	e8 12 12 00 00       	call   80104990 <release>
       return -1;
 8010377e:	83 c4 10             	add    $0x10,%esp
 }
@@ -6980,17 +6980,17 @@
 80103799:	83 ec 10             	sub    $0x10,%esp
   acquire(&ptable.lock);
 8010379c:	68 20 2d 11 80       	push   $0x80112d20
-801037a1:	e8 ba 0d 00 00       	call   80104560 <acquire>
+801037a1:	e8 2a 11 00 00       	call   801048d0 <acquire>
 801037a6:	83 c4 10             	add    $0x10,%esp
 801037a9:	eb 10                	jmp    801037bb <allocproc+0x2b>
 801037ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 801037af:	90                   	nop
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801037b0:	83 c3 7c             	add    $0x7c,%ebx
-801037b3:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
+801037b0:	83 eb 80             	sub    $0xffffff80,%ebx
+801037b3:	81 fb 54 4d 11 80    	cmp    $0x80114d54,%ebx
 801037b9:	74 75                	je     80103830 <allocproc+0xa0>
     if(p->state == UNUSED)
-801037bb:	8b 43 0c             	mov    0xc(%ebx),%eax
+801037bb:	8b 43 10             	mov    0x10(%ebx),%eax
 801037be:	85 c0                	test   %eax,%eax
 801037c0:	75 ee                	jne    801037b0 <allocproc+0x20>
   release(&ptable.lock);
@@ -7004,16 +7004,16 @@
   release(&ptable.lock);
 801037c7:	83 ec 0c             	sub    $0xc,%esp
   p->state = EMBRYO;
-801037ca:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
+801037ca:	c7 43 10 01 00 00 00 	movl   $0x1,0x10(%ebx)
   p->pid = nextpid++;
-801037d1:	89 43 10             	mov    %eax,0x10(%ebx)
+801037d1:	89 43 14             	mov    %eax,0x14(%ebx)
 801037d4:	8d 50 01             	lea    0x1(%eax),%edx
   release(&ptable.lock);
 801037d7:	68 20 2d 11 80       	push   $0x80112d20
   p->pid = nextpid++;
 801037dc:	89 15 04 a0 10 80    	mov    %edx,0x8010a004
   release(&ptable.lock);
-801037e2:	e8 39 0e 00 00       	call   80104620 <release>
+801037e2:	e8 a9 11 00 00       	call   80104990 <release>
 
   // Allocate kernel stack.
   if((p->kstack = kalloc()) == 0){
@@ -7039,18 +7039,18 @@
   sp -= sizeof *p->context;
 801037ff:	05 9c 0f 00 00       	add    $0xf9c,%eax
   sp -= sizeof *p->tf;
-80103804:	89 53 18             	mov    %edx,0x18(%ebx)
+80103804:	89 53 1c             	mov    %edx,0x1c(%ebx)
   *(uint*)sp = (uint)trapret;
-80103807:	c7 40 14 86 58 10 80 	movl   $0x80105886,0x14(%eax)
+80103807:	c7 40 14 21 5c 10 80 	movl   $0x80105c21,0x14(%eax)
   p->context = (struct context*)sp;
-8010380e:	89 43 1c             	mov    %eax,0x1c(%ebx)
+8010380e:	89 43 20             	mov    %eax,0x20(%ebx)
   memset(p->context, 0, sizeof *p->context);
 80103811:	6a 14                	push   $0x14
 80103813:	6a 00                	push   $0x0
 80103815:	50                   	push   %eax
-80103816:	e8 55 0e 00 00       	call   80104670 <memset>
+80103816:	e8 c5 11 00 00       	call   801049e0 <memset>
   p->context->eip = (uint)forkret;
-8010381b:	8b 43 1c             	mov    0x1c(%ebx),%eax
+8010381b:	8b 43 20             	mov    0x20(%ebx),%eax
 
   return p;
 8010381e:	83 c4 10             	add    $0x10,%esp
@@ -7068,7 +7068,7 @@
 80103833:	31 db                	xor    %ebx,%ebx
   release(&ptable.lock);
 80103835:	68 20 2d 11 80       	push   $0x80112d20
-8010383a:	e8 e1 0d 00 00       	call   80104620 <release>
+8010383a:	e8 51 11 00 00       	call   80104990 <release>
 }
 8010383f:	89 d8                	mov    %ebx,%eax
   return 0;
@@ -7078,7 +7078,7 @@
 80103847:	c9                   	leave  
 80103848:	c3                   	ret    
     p->state = UNUSED;
-80103849:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80103849:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
     return 0;
 80103850:	31 db                	xor    %ebx,%ebx
 }
@@ -7103,7 +7103,7 @@
   // Still holding ptable.lock from scheduler.
   release(&ptable.lock);
 8010386a:	68 20 2d 11 80       	push   $0x80112d20
-8010386f:	e8 ac 0d 00 00       	call   80104620 <release>
+8010386f:	e8 1c 11 00 00       	call   80104990 <release>
 
   if (first) {
 80103874:	a1 00 a0 10 80       	mov    0x8010a000,%eax
@@ -7142,9 +7142,9 @@
 801038b5:	89 e5                	mov    %esp,%ebp
 801038b7:	83 ec 10             	sub    $0x10,%esp
   initlock(&ptable.lock, "ptable");
-801038ba:	68 20 76 10 80       	push   $0x80107620
+801038ba:	68 c0 79 10 80       	push   $0x801079c0
 801038bf:	68 20 2d 11 80       	push   $0x80112d20
-801038c4:	e8 17 0b 00 00       	call   801043e0 <initlock>
+801038c4:	e8 87 0e 00 00       	call   80104750 <initlock>
 }
 801038c9:	83 c4 10             	add    $0x10,%esp
 801038cc:	c9                   	leave  
@@ -7195,11 +7195,11 @@
 8010391c:	c3                   	ret    
   panic("unknown apicid\n");
 8010391d:	83 ec 0c             	sub    $0xc,%esp
-80103920:	68 27 76 10 80       	push   $0x80107627
+80103920:	68 c7 79 10 80       	push   $0x801079c7
 80103925:	e8 66 ca ff ff       	call   80100390 <panic>
     panic("mycpu called with interrupts enabled\n");
 8010392a:	83 ec 0c             	sub    $0xc,%esp
-8010392d:	68 04 77 10 80       	push   $0x80107704
+8010392d:	68 a4 7a 10 80       	push   $0x80107aa4
 80103932:	e8 59 ca ff ff       	call   80100390 <panic>
 80103937:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010393e:	66 90                	xchg   %ax,%ax
@@ -7230,13 +7230,13 @@
 80103967:	53                   	push   %ebx
 80103968:	83 ec 04             	sub    $0x4,%esp
   pushcli();
-8010396b:	e8 f0 0a 00 00       	call   80104460 <pushcli>
+8010396b:	e8 60 0e 00 00       	call   801047d0 <pushcli>
   c = mycpu();
 80103970:	e8 5b ff ff ff       	call   801038d0 <mycpu>
   p = c->proc;
 80103975:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-8010397b:	e8 30 0b 00 00       	call   801044b0 <popcli>
+8010397b:	e8 a0 0e 00 00       	call   80104820 <popcli>
 }
 80103980:	83 c4 04             	add    $0x4,%esp
 80103983:	89 d8                	mov    %ebx,%eax
@@ -7259,7 +7259,7 @@
   initproc = p;
 801039a2:	a3 b8 a5 10 80       	mov    %eax,0x8010a5b8
   if((p->pgdir = setupkvm()) == 0)
-801039a7:	e8 a4 34 00 00       	call   80106e50 <setupkvm>
+801039a7:	e8 34 38 00 00       	call   801071e0 <setupkvm>
 801039ac:	89 43 04             	mov    %eax,0x4(%ebx)
 801039af:	85 c0                	test   %eax,%eax
 801039b1:	0f 84 bd 00 00 00    	je     80103a74 <userinit+0xe4>
@@ -7268,7 +7268,7 @@
 801039ba:	68 2c 00 00 00       	push   $0x2c
 801039bf:	68 60 a4 10 80       	push   $0x8010a460
 801039c4:	50                   	push   %eax
-801039c5:	e8 56 31 00 00       	call   80106b20 <inituvm>
+801039c5:	e8 e6 34 00 00       	call   80106eb0 <inituvm>
   memset(p->tf, 0, sizeof(*p->tf));
 801039ca:	83 c4 0c             	add    $0xc,%esp
   p->sz = PGSIZE;
@@ -7276,10 +7276,10 @@
   memset(p->tf, 0, sizeof(*p->tf));
 801039d3:	6a 4c                	push   $0x4c
 801039d5:	6a 00                	push   $0x0
-801039d7:	ff 73 18             	pushl  0x18(%ebx)
-801039da:	e8 91 0c 00 00       	call   80104670 <memset>
+801039d7:	ff 73 1c             	pushl  0x1c(%ebx)
+801039da:	e8 01 10 00 00       	call   801049e0 <memset>
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-801039df:	8b 43 18             	mov    0x18(%ebx),%eax
+801039df:	8b 43 1c             	mov    0x1c(%ebx),%eax
 801039e2:	ba 1b 00 00 00       	mov    $0x1b,%edx
   safestrcpy(p->name, "initcode", sizeof(p->name));
 801039e7:	83 c4 0c             	add    $0xc,%esp
@@ -7288,43 +7288,43 @@
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
 801039ef:	66 89 50 3c          	mov    %dx,0x3c(%eax)
   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-801039f3:	8b 43 18             	mov    0x18(%ebx),%eax
+801039f3:	8b 43 1c             	mov    0x1c(%ebx),%eax
 801039f6:	66 89 48 2c          	mov    %cx,0x2c(%eax)
   p->tf->es = p->tf->ds;
-801039fa:	8b 43 18             	mov    0x18(%ebx),%eax
+801039fa:	8b 43 1c             	mov    0x1c(%ebx),%eax
 801039fd:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
 80103a01:	66 89 50 28          	mov    %dx,0x28(%eax)
   p->tf->ss = p->tf->ds;
-80103a05:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a05:	8b 43 1c             	mov    0x1c(%ebx),%eax
 80103a08:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
 80103a0c:	66 89 50 48          	mov    %dx,0x48(%eax)
   p->tf->eflags = FL_IF;
-80103a10:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a10:	8b 43 1c             	mov    0x1c(%ebx),%eax
 80103a13:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
   p->tf->esp = PGSIZE;
-80103a1a:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a1a:	8b 43 1c             	mov    0x1c(%ebx),%eax
 80103a1d:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
   p->tf->eip = 0;  // beginning of initcode.S
-80103a24:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a24:	8b 43 1c             	mov    0x1c(%ebx),%eax
 80103a27:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
   safestrcpy(p->name, "initcode", sizeof(p->name));
-80103a2e:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80103a2e:	8d 43 70             	lea    0x70(%ebx),%eax
 80103a31:	6a 10                	push   $0x10
-80103a33:	68 50 76 10 80       	push   $0x80107650
+80103a33:	68 f0 79 10 80       	push   $0x801079f0
 80103a38:	50                   	push   %eax
-80103a39:	e8 f2 0d 00 00       	call   80104830 <safestrcpy>
+80103a39:	e8 62 11 00 00       	call   80104ba0 <safestrcpy>
   p->cwd = namei("/");
-80103a3e:	c7 04 24 59 76 10 80 	movl   $0x80107659,(%esp)
+80103a3e:	c7 04 24 f9 79 10 80 	movl   $0x801079f9,(%esp)
 80103a45:	e8 e6 e5 ff ff       	call   80102030 <namei>
-80103a4a:	89 43 68             	mov    %eax,0x68(%ebx)
+80103a4a:	89 43 6c             	mov    %eax,0x6c(%ebx)
   acquire(&ptable.lock);
 80103a4d:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103a54:	e8 07 0b 00 00       	call   80104560 <acquire>
+80103a54:	e8 77 0e 00 00       	call   801048d0 <acquire>
   p->state = RUNNABLE;
-80103a59:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+80103a59:	c7 43 10 03 00 00 00 	movl   $0x3,0x10(%ebx)
   release(&ptable.lock);
 80103a60:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103a67:	e8 b4 0b 00 00       	call   80104620 <release>
+80103a67:	e8 24 0f 00 00       	call   80104990 <release>
 }
 80103a6c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 80103a6f:	83 c4 10             	add    $0x10,%esp
@@ -7332,7 +7332,7 @@
 80103a73:	c3                   	ret    
     panic("userinit: out of memory?");
 80103a74:	83 ec 0c             	sub    $0xc,%esp
-80103a77:	68 37 76 10 80       	push   $0x80107637
+80103a77:	68 d7 79 10 80       	push   $0x801079d7
 80103a7c:	e8 0f c9 ff ff       	call   80100390 <panic>
 80103a81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80103a88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -7347,13 +7347,13 @@
 80103a98:	53                   	push   %ebx
 80103a99:	8b 75 08             	mov    0x8(%ebp),%esi
   pushcli();
-80103a9c:	e8 bf 09 00 00       	call   80104460 <pushcli>
+80103a9c:	e8 2f 0d 00 00       	call   801047d0 <pushcli>
   c = mycpu();
 80103aa1:	e8 2a fe ff ff       	call   801038d0 <mycpu>
   p = c->proc;
 80103aa6:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103aac:	e8 ff 09 00 00       	call   801044b0 <popcli>
+80103aac:	e8 6f 0d 00 00       	call   80104820 <popcli>
   sz = curproc->sz;
 80103ab1:	8b 03                	mov    (%ebx),%eax
   if(n > 0){
@@ -7367,7 +7367,7 @@
 80103abc:	89 03                	mov    %eax,(%ebx)
   switchuvm(curproc);
 80103abe:	53                   	push   %ebx
-80103abf:	e8 4c 2f 00 00       	call   80106a10 <switchuvm>
+80103abf:	e8 dc 32 00 00       	call   80106da0 <switchuvm>
   return 0;
 80103ac4:	83 c4 10             	add    $0x10,%esp
 80103ac7:	31 c0                	xor    %eax,%eax
@@ -7383,7 +7383,7 @@
 80103ad5:	56                   	push   %esi
 80103ad6:	50                   	push   %eax
 80103ad7:	ff 73 04             	pushl  0x4(%ebx)
-80103ada:	e8 91 31 00 00       	call   80106c70 <allocuvm>
+80103ada:	e8 21 35 00 00       	call   80107000 <allocuvm>
 80103adf:	83 c4 10             	add    $0x10,%esp
 80103ae2:	85 c0                	test   %eax,%eax
 80103ae4:	75 d3                	jne    80103ab9 <growproc+0x29>
@@ -7397,7 +7397,7 @@
 80103af5:	56                   	push   %esi
 80103af6:	50                   	push   %eax
 80103af7:	ff 73 04             	pushl  0x4(%ebx)
-80103afa:	e8 a1 32 00 00       	call   80106da0 <deallocuvm>
+80103afa:	e8 31 36 00 00       	call   80107130 <deallocuvm>
 80103aff:	83 c4 10             	add    $0x10,%esp
 80103b02:	85 c0                	test   %eax,%eax
 80103b04:	75 b3                	jne    80103ab9 <growproc+0x29>
@@ -7415,13 +7415,13 @@
 80103b19:	53                   	push   %ebx
 80103b1a:	83 ec 1c             	sub    $0x1c,%esp
   pushcli();
-80103b1d:	e8 3e 09 00 00       	call   80104460 <pushcli>
+80103b1d:	e8 ae 0c 00 00       	call   801047d0 <pushcli>
   c = mycpu();
 80103b22:	e8 a9 fd ff ff       	call   801038d0 <mycpu>
   p = c->proc;
 80103b27:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103b2d:	e8 7e 09 00 00       	call   801044b0 <popcli>
+80103b2d:	e8 ee 0c 00 00       	call   80104820 <popcli>
   if((np = allocproc()) == 0){
 80103b32:	e8 59 fc ff ff       	call   80103790 <allocproc>
 80103b37:	89 45 e4             	mov    %eax,-0x1c(%ebp)
@@ -7432,7 +7432,7 @@
 80103b45:	ff 33                	pushl  (%ebx)
 80103b47:	89 c7                	mov    %eax,%edi
 80103b49:	ff 73 04             	pushl  0x4(%ebx)
-80103b4c:	e8 cf 33 00 00       	call   80106f20 <copyuvm>
+80103b4c:	e8 5f 37 00 00       	call   801072b0 <copyuvm>
 80103b51:	83 c4 10             	add    $0x10,%esp
 80103b54:	89 47 04             	mov    %eax,0x4(%edi)
 80103b57:	85 c0                	test   %eax,%eax
@@ -7442,23 +7442,23 @@
 80103b61:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
 80103b64:	89 01                	mov    %eax,(%ecx)
   *np->tf = *curproc->tf;
-80103b66:	8b 79 18             	mov    0x18(%ecx),%edi
+80103b66:	8b 79 1c             	mov    0x1c(%ecx),%edi
   np->parent = curproc;
 80103b69:	89 c8                	mov    %ecx,%eax
-80103b6b:	89 59 14             	mov    %ebx,0x14(%ecx)
+80103b6b:	89 59 18             	mov    %ebx,0x18(%ecx)
   *np->tf = *curproc->tf;
 80103b6e:	b9 13 00 00 00       	mov    $0x13,%ecx
-80103b73:	8b 73 18             	mov    0x18(%ebx),%esi
+80103b73:	8b 73 1c             	mov    0x1c(%ebx),%esi
 80103b76:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   for(i = 0; i < NOFILE; i++)
 80103b78:	31 f6                	xor    %esi,%esi
   np->tf->eax = 0;
-80103b7a:	8b 40 18             	mov    0x18(%eax),%eax
+80103b7a:	8b 40 1c             	mov    0x1c(%eax),%eax
 80103b7d:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   for(i = 0; i < NOFILE; i++)
 80103b84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[i])
-80103b88:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
+80103b88:	8b 44 b3 2c          	mov    0x2c(%ebx,%esi,4),%eax
 80103b8c:	85 c0                	test   %eax,%eax
 80103b8e:	74 13                	je     80103ba3 <fork+0x93>
       np->ofile[i] = filedup(curproc->ofile[i]);
@@ -7467,39 +7467,39 @@
 80103b94:	e8 d7 d2 ff ff       	call   80100e70 <filedup>
 80103b99:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 80103b9c:	83 c4 10             	add    $0x10,%esp
-80103b9f:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
+80103b9f:	89 44 b2 2c          	mov    %eax,0x2c(%edx,%esi,4)
   for(i = 0; i < NOFILE; i++)
 80103ba3:	83 c6 01             	add    $0x1,%esi
 80103ba6:	83 fe 10             	cmp    $0x10,%esi
 80103ba9:	75 dd                	jne    80103b88 <fork+0x78>
   np->cwd = idup(curproc->cwd);
 80103bab:	83 ec 0c             	sub    $0xc,%esp
-80103bae:	ff 73 68             	pushl  0x68(%ebx)
+80103bae:	ff 73 6c             	pushl  0x6c(%ebx)
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103bb1:	83 c3 6c             	add    $0x6c,%ebx
+80103bb1:	83 c3 70             	add    $0x70,%ebx
   np->cwd = idup(curproc->cwd);
 80103bb4:	e8 77 db ff ff       	call   80101730 <idup>
 80103bb9:	8b 7d e4             	mov    -0x1c(%ebp),%edi
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
 80103bbc:	83 c4 0c             	add    $0xc,%esp
   np->cwd = idup(curproc->cwd);
-80103bbf:	89 47 68             	mov    %eax,0x68(%edi)
+80103bbf:	89 47 6c             	mov    %eax,0x6c(%edi)
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103bc2:	8d 47 6c             	lea    0x6c(%edi),%eax
+80103bc2:	8d 47 70             	lea    0x70(%edi),%eax
 80103bc5:	6a 10                	push   $0x10
 80103bc7:	53                   	push   %ebx
 80103bc8:	50                   	push   %eax
-80103bc9:	e8 62 0c 00 00       	call   80104830 <safestrcpy>
+80103bc9:	e8 d2 0f 00 00       	call   80104ba0 <safestrcpy>
   pid = np->pid;
-80103bce:	8b 5f 10             	mov    0x10(%edi),%ebx
+80103bce:	8b 5f 14             	mov    0x14(%edi),%ebx
   acquire(&ptable.lock);
 80103bd1:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103bd8:	e8 83 09 00 00       	call   80104560 <acquire>
+80103bd8:	e8 f3 0c 00 00       	call   801048d0 <acquire>
   np->state = RUNNABLE;
-80103bdd:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
+80103bdd:	c7 47 10 03 00 00 00 	movl   $0x3,0x10(%edi)
   release(&ptable.lock);
 80103be4:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103beb:	e8 30 0a 00 00       	call   80104620 <release>
+80103beb:	e8 a0 0d 00 00       	call   80104990 <release>
   return pid;
 80103bf0:	83 c4 10             	add    $0x10,%esp
 }
@@ -7523,7 +7523,7 @@
     return -1;
 80103c19:	83 c4 10             	add    $0x10,%esp
     np->state = UNUSED;
-80103c1c:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80103c1c:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
     return -1;
 80103c23:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
 80103c28:	eb c9                	jmp    80103bf3 <fork+0xe3>
@@ -7556,11 +7556,11 @@
 80103c5c:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
     acquire(&ptable.lock);
 80103c61:	68 20 2d 11 80       	push   $0x80112d20
-80103c66:	e8 f5 08 00 00       	call   80104560 <acquire>
+80103c66:	e8 65 0c 00 00       	call   801048d0 <acquire>
 80103c6b:	83 c4 10             	add    $0x10,%esp
 80103c6e:	66 90                	xchg   %ax,%ax
       if(p->state != RUNNABLE)
-80103c70:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
+80103c70:	83 7b 10 03          	cmpl   $0x3,0x10(%ebx)
 80103c74:	75 33                	jne    80103ca9 <scheduler+0x79>
       switchuvm(p);
 80103c76:	83 ec 0c             	sub    $0xc,%esp
@@ -7568,30 +7568,30 @@
 80103c79:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
       switchuvm(p);
 80103c7f:	53                   	push   %ebx
-80103c80:	e8 8b 2d 00 00       	call   80106a10 <switchuvm>
+80103c80:	e8 1b 31 00 00       	call   80106da0 <switchuvm>
       swtch(&(c->scheduler), p->context);
 80103c85:	58                   	pop    %eax
 80103c86:	5a                   	pop    %edx
-80103c87:	ff 73 1c             	pushl  0x1c(%ebx)
+80103c87:	ff 73 20             	pushl  0x20(%ebx)
 80103c8a:	57                   	push   %edi
       p->state = RUNNING;
-80103c8b:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
+80103c8b:	c7 43 10 04 00 00 00 	movl   $0x4,0x10(%ebx)
       swtch(&(c->scheduler), p->context);
-80103c92:	e8 fc 0b 00 00       	call   80104893 <swtch>
+80103c92:	e8 6c 0f 00 00       	call   80104c03 <swtch>
       switchkvm();
-80103c97:	e8 54 2d 00 00       	call   801069f0 <switchkvm>
+80103c97:	e8 e4 30 00 00       	call   80106d80 <switchkvm>
       c->proc = 0;
 80103c9c:	83 c4 10             	add    $0x10,%esp
 80103c9f:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
 80103ca6:	00 00 00 
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103ca9:	83 c3 7c             	add    $0x7c,%ebx
-80103cac:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
+80103ca9:	83 eb 80             	sub    $0xffffff80,%ebx
+80103cac:	81 fb 54 4d 11 80    	cmp    $0x80114d54,%ebx
 80103cb2:	75 bc                	jne    80103c70 <scheduler+0x40>
     release(&ptable.lock);
 80103cb4:	83 ec 0c             	sub    $0xc,%esp
 80103cb7:	68 20 2d 11 80       	push   $0x80112d20
-80103cbc:	e8 5f 09 00 00       	call   80104620 <release>
+80103cbc:	e8 cf 0c 00 00       	call   80104990 <release>
     sti();
 80103cc1:	83 c4 10             	add    $0x10,%esp
 80103cc4:	eb 92                	jmp    80103c58 <scheduler+0x28>
@@ -7606,17 +7606,17 @@
 80103cd7:	56                   	push   %esi
 80103cd8:	53                   	push   %ebx
   pushcli();
-80103cd9:	e8 82 07 00 00       	call   80104460 <pushcli>
+80103cd9:	e8 f2 0a 00 00       	call   801047d0 <pushcli>
   c = mycpu();
 80103cde:	e8 ed fb ff ff       	call   801038d0 <mycpu>
   p = c->proc;
 80103ce3:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103ce9:	e8 c2 07 00 00       	call   801044b0 <popcli>
+80103ce9:	e8 32 0b 00 00       	call   80104820 <popcli>
   if(!holding(&ptable.lock))
 80103cee:	83 ec 0c             	sub    $0xc,%esp
 80103cf1:	68 20 2d 11 80       	push   $0x80112d20
-80103cf6:	e8 15 08 00 00       	call   80104510 <holding>
+80103cf6:	e8 85 0b 00 00       	call   80104880 <holding>
 80103cfb:	83 c4 10             	add    $0x10,%esp
 80103cfe:	85 c0                	test   %eax,%eax
 80103d00:	74 4f                	je     80103d51 <sched+0x81>
@@ -7625,7 +7625,7 @@
 80103d07:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
 80103d0e:	75 68                	jne    80103d78 <sched+0xa8>
   if(p->state == RUNNING)
-80103d10:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
+80103d10:	83 7b 10 04          	cmpl   $0x4,0x10(%ebx)
 80103d14:	74 55                	je     80103d6b <sched+0x9b>
   asm volatile("pushfl; popl %0" : "=r" (eflags));
 80103d16:	9c                   	pushf  
@@ -7636,7 +7636,7 @@
   intena = mycpu()->intena;
 80103d1d:	e8 ae fb ff ff       	call   801038d0 <mycpu>
   swtch(&p->context, mycpu()->scheduler);
-80103d22:	83 c3 1c             	add    $0x1c,%ebx
+80103d22:	83 c3 20             	add    $0x20,%ebx
   intena = mycpu()->intena;
 80103d25:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
   swtch(&p->context, mycpu()->scheduler);
@@ -7644,7 +7644,7 @@
 80103d30:	83 ec 08             	sub    $0x8,%esp
 80103d33:	ff 70 04             	pushl  0x4(%eax)
 80103d36:	53                   	push   %ebx
-80103d37:	e8 57 0b 00 00       	call   80104893 <swtch>
+80103d37:	e8 c7 0e 00 00       	call   80104c03 <swtch>
   mycpu()->intena = intena;
 80103d3c:	e8 8f fb ff ff       	call   801038d0 <mycpu>
 }
@@ -7659,19 +7659,19 @@
 80103d50:	c3                   	ret    
     panic("sched ptable.lock");
 80103d51:	83 ec 0c             	sub    $0xc,%esp
-80103d54:	68 5b 76 10 80       	push   $0x8010765b
+80103d54:	68 fb 79 10 80       	push   $0x801079fb
 80103d59:	e8 32 c6 ff ff       	call   80100390 <panic>
     panic("sched interruptible");
 80103d5e:	83 ec 0c             	sub    $0xc,%esp
-80103d61:	68 87 76 10 80       	push   $0x80107687
+80103d61:	68 27 7a 10 80       	push   $0x80107a27
 80103d66:	e8 25 c6 ff ff       	call   80100390 <panic>
     panic("sched running");
 80103d6b:	83 ec 0c             	sub    $0xc,%esp
-80103d6e:	68 79 76 10 80       	push   $0x80107679
+80103d6e:	68 19 7a 10 80       	push   $0x80107a19
 80103d73:	e8 18 c6 ff ff       	call   80100390 <panic>
     panic("sched locks");
 80103d78:	83 ec 0c             	sub    $0xc,%esp
-80103d7b:	68 6d 76 10 80       	push   $0x8010766d
+80103d7b:	68 0d 7a 10 80       	push   $0x80107a0d
 80103d80:	e8 0b c6 ff ff       	call   80100390 <panic>
 80103d85:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80103d8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -7686,49 +7686,49 @@
 80103d99:	53                   	push   %ebx
 80103d9a:	83 ec 0c             	sub    $0xc,%esp
   pushcli();
-80103d9d:	e8 be 06 00 00       	call   80104460 <pushcli>
+80103d9d:	e8 2e 0a 00 00       	call   801047d0 <pushcli>
   c = mycpu();
 80103da2:	e8 29 fb ff ff       	call   801038d0 <mycpu>
   p = c->proc;
 80103da7:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
   popcli();
-80103dad:	e8 fe 06 00 00       	call   801044b0 <popcli>
+80103dad:	e8 6e 0a 00 00       	call   80104820 <popcli>
   if(curproc == initproc)
-80103db2:	8d 5e 28             	lea    0x28(%esi),%ebx
-80103db5:	8d 7e 68             	lea    0x68(%esi),%edi
+80103db2:	8d 5e 2c             	lea    0x2c(%esi),%ebx
+80103db5:	8d 7e 6c             	lea    0x6c(%esi),%edi
 80103db8:	39 35 b8 a5 10 80    	cmp    %esi,0x8010a5b8
 80103dbe:	0f 84 f3 00 00 00    	je     80103eb7 <exit+0x127>
 80103dc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    if(curproc->ofile[fd]){
+		if(curproc->ofile[fd]){
 80103dc8:	8b 03                	mov    (%ebx),%eax
 80103dca:	85 c0                	test   %eax,%eax
 80103dcc:	74 12                	je     80103de0 <exit+0x50>
-      fileclose(curproc->ofile[fd]);
+		  fileclose(curproc->ofile[fd]);
 80103dce:	83 ec 0c             	sub    $0xc,%esp
 80103dd1:	50                   	push   %eax
 80103dd2:	e8 e9 d0 ff ff       	call   80100ec0 <fileclose>
-      curproc->ofile[fd] = 0;
+		  curproc->ofile[fd] = 0;
 80103dd7:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
 80103ddd:	83 c4 10             	add    $0x10,%esp
-  for(fd = 0; fd < NOFILE; fd++){
+	for(fd = 0; fd < NOFILE; fd++){
 80103de0:	83 c3 04             	add    $0x4,%ebx
 80103de3:	39 df                	cmp    %ebx,%edi
 80103de5:	75 e1                	jne    80103dc8 <exit+0x38>
-  begin_op();
+	begin_op();
 80103de7:	e8 44 ef ff ff       	call   80102d30 <begin_op>
-  iput(curproc->cwd);
+	iput(curproc->cwd);
 80103dec:	83 ec 0c             	sub    $0xc,%esp
-80103def:	ff 76 68             	pushl  0x68(%esi)
+80103def:	ff 76 6c             	pushl  0x6c(%esi)
 80103df2:	e8 99 da ff ff       	call   80101890 <iput>
-  end_op();
+	end_op();
 80103df7:	e8 a4 ef ff ff       	call   80102da0 <end_op>
-  curproc->cwd = 0;
-80103dfc:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
+	curproc->cwd = 0;
+80103dfc:	c7 46 6c 00 00 00 00 	movl   $0x0,0x6c(%esi)
   acquire(&ptable.lock);
 80103e03:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103e0a:	e8 51 07 00 00       	call   80104560 <acquire>
+80103e0a:	e8 c1 0a 00 00       	call   801048d0 <acquire>
   wakeup1(curproc->parent);
-80103e0f:	8b 56 14             	mov    0x14(%esi),%edx
+80103e0f:	8b 56 18             	mov    0x18(%esi),%edx
 80103e12:	83 c4 10             	add    $0x10,%esp
 static void
 wakeup1(void *chan)
@@ -7739,19 +7739,19 @@
 80103e15:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
 80103e1a:	eb 0e                	jmp    80103e2a <exit+0x9a>
 80103e1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103e20:	83 c0 7c             	add    $0x7c,%eax
-80103e23:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80103e20:	83 e8 80             	sub    $0xffffff80,%eax
+80103e23:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
 80103e28:	74 1c                	je     80103e46 <exit+0xb6>
     if(p->state == SLEEPING && p->chan == chan)
-80103e2a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80103e2a:	83 78 10 02          	cmpl   $0x2,0x10(%eax)
 80103e2e:	75 f0                	jne    80103e20 <exit+0x90>
-80103e30:	3b 50 20             	cmp    0x20(%eax),%edx
+80103e30:	3b 50 24             	cmp    0x24(%eax),%edx
 80103e33:	75 eb                	jne    80103e20 <exit+0x90>
       p->state = RUNNABLE;
-80103e35:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80103e35:	c7 40 10 03 00 00 00 	movl   $0x3,0x10(%eax)
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e3c:	83 c0 7c             	add    $0x7c,%eax
-80103e3f:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80103e3c:	83 e8 80             	sub    $0xffffff80,%eax
+80103e3f:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
 80103e44:	75 e4                	jne    80103e2a <exit+0x9a>
       p->parent = initproc;
 80103e46:	8b 0d b8 a5 10 80    	mov    0x8010a5b8,%ecx
@@ -7760,16 +7760,16 @@
 80103e51:	eb 10                	jmp    80103e63 <exit+0xd3>
 80103e53:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80103e57:	90                   	nop
-80103e58:	83 c2 7c             	add    $0x7c,%edx
-80103e5b:	81 fa 54 4c 11 80    	cmp    $0x80114c54,%edx
+80103e58:	83 ea 80             	sub    $0xffffff80,%edx
+80103e5b:	81 fa 54 4d 11 80    	cmp    $0x80114d54,%edx
 80103e61:	74 3b                	je     80103e9e <exit+0x10e>
     if(p->parent == curproc){
-80103e63:	39 72 14             	cmp    %esi,0x14(%edx)
+80103e63:	39 72 18             	cmp    %esi,0x18(%edx)
 80103e66:	75 f0                	jne    80103e58 <exit+0xc8>
       if(p->state == ZOMBIE)
-80103e68:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
+80103e68:	83 7a 10 05          	cmpl   $0x5,0x10(%edx)
       p->parent = initproc;
-80103e6c:	89 4a 14             	mov    %ecx,0x14(%edx)
+80103e6c:	89 4a 18             	mov    %ecx,0x18(%edx)
       if(p->state == ZOMBIE)
 80103e6f:	75 e7                	jne    80103e58 <exit+0xc8>
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
@@ -7777,28 +7777,28 @@
 80103e76:	eb 12                	jmp    80103e8a <exit+0xfa>
 80103e78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80103e7f:	90                   	nop
-80103e80:	83 c0 7c             	add    $0x7c,%eax
-80103e83:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80103e80:	83 e8 80             	sub    $0xffffff80,%eax
+80103e83:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
 80103e88:	74 ce                	je     80103e58 <exit+0xc8>
     if(p->state == SLEEPING && p->chan == chan)
-80103e8a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80103e8a:	83 78 10 02          	cmpl   $0x2,0x10(%eax)
 80103e8e:	75 f0                	jne    80103e80 <exit+0xf0>
-80103e90:	3b 48 20             	cmp    0x20(%eax),%ecx
+80103e90:	3b 48 24             	cmp    0x24(%eax),%ecx
 80103e93:	75 eb                	jne    80103e80 <exit+0xf0>
       p->state = RUNNABLE;
-80103e95:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80103e95:	c7 40 10 03 00 00 00 	movl   $0x3,0x10(%eax)
 80103e9c:	eb e2                	jmp    80103e80 <exit+0xf0>
   curproc->state = ZOMBIE;
-80103e9e:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
+80103e9e:	c7 46 10 05 00 00 00 	movl   $0x5,0x10(%esi)
   sched();
 80103ea5:	e8 26 fe ff ff       	call   80103cd0 <sched>
   panic("zombie exit");
 80103eaa:	83 ec 0c             	sub    $0xc,%esp
-80103ead:	68 a8 76 10 80       	push   $0x801076a8
+80103ead:	68 48 7a 10 80       	push   $0x80107a48
 80103eb2:	e8 d9 c4 ff ff       	call   80100390 <panic>
     panic("init exiting");
 80103eb7:	83 ec 0c             	sub    $0xc,%esp
-80103eba:	68 9b 76 10 80       	push   $0x8010769b
+80103eba:	68 3b 7a 10 80       	push   $0x80107a3b
 80103ebf:	e8 cc c4 ff ff       	call   80100390 <panic>
 80103ec4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80103ecb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -7813,22 +7813,22 @@
 80103ed8:	83 ec 10             	sub    $0x10,%esp
   acquire(&ptable.lock);  //DOC: yieldlock
 80103edb:	68 20 2d 11 80       	push   $0x80112d20
-80103ee0:	e8 7b 06 00 00       	call   80104560 <acquire>
+80103ee0:	e8 eb 09 00 00       	call   801048d0 <acquire>
   pushcli();
-80103ee5:	e8 76 05 00 00       	call   80104460 <pushcli>
+80103ee5:	e8 e6 08 00 00       	call   801047d0 <pushcli>
   c = mycpu();
 80103eea:	e8 e1 f9 ff ff       	call   801038d0 <mycpu>
   p = c->proc;
 80103eef:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103ef5:	e8 b6 05 00 00       	call   801044b0 <popcli>
+80103ef5:	e8 26 09 00 00       	call   80104820 <popcli>
   myproc()->state = RUNNABLE;
-80103efa:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+80103efa:	c7 43 10 03 00 00 00 	movl   $0x3,0x10(%ebx)
   sched();
 80103f01:	e8 ca fd ff ff       	call   80103cd0 <sched>
   release(&ptable.lock);
 80103f06:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103f0d:	e8 0e 07 00 00       	call   80104620 <release>
+80103f0d:	e8 7e 0a 00 00       	call   80104990 <release>
 }
 80103f12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 80103f15:	83 c4 10             	add    $0x10,%esp
@@ -7848,13 +7848,13 @@
 80103f2d:	8b 7d 08             	mov    0x8(%ebp),%edi
 80103f30:	8b 75 0c             	mov    0xc(%ebp),%esi
   pushcli();
-80103f33:	e8 28 05 00 00       	call   80104460 <pushcli>
+80103f33:	e8 98 08 00 00       	call   801047d0 <pushcli>
   c = mycpu();
 80103f38:	e8 93 f9 ff ff       	call   801038d0 <mycpu>
   p = c->proc;
 80103f3d:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103f43:	e8 68 05 00 00       	call   801044b0 <popcli>
+80103f43:	e8 d8 08 00 00       	call   80104820 <popcli>
   if(p == 0)
 80103f48:	85 db                	test   %ebx,%ebx
 80103f4a:	0f 84 83 00 00 00    	je     80103fd3 <sleep+0xb3>
@@ -7867,21 +7867,21 @@
     acquire(&ptable.lock);  //DOC: sleeplock1
 80103f5c:	83 ec 0c             	sub    $0xc,%esp
 80103f5f:	68 20 2d 11 80       	push   $0x80112d20
-80103f64:	e8 f7 05 00 00       	call   80104560 <acquire>
+80103f64:	e8 67 09 00 00       	call   801048d0 <acquire>
     release(lk);
 80103f69:	89 34 24             	mov    %esi,(%esp)
-80103f6c:	e8 af 06 00 00       	call   80104620 <release>
+80103f6c:	e8 1f 0a 00 00       	call   80104990 <release>
   p->chan = chan;
-80103f71:	89 7b 20             	mov    %edi,0x20(%ebx)
+80103f71:	89 7b 24             	mov    %edi,0x24(%ebx)
   p->state = SLEEPING;
-80103f74:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+80103f74:	c7 43 10 02 00 00 00 	movl   $0x2,0x10(%ebx)
   sched();
 80103f7b:	e8 50 fd ff ff       	call   80103cd0 <sched>
   p->chan = 0;
-80103f80:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+80103f80:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
     release(&ptable.lock);
 80103f87:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103f8e:	e8 8d 06 00 00       	call   80104620 <release>
+80103f8e:	e8 fd 09 00 00       	call   80104990 <release>
     acquire(lk);
 80103f93:	89 75 08             	mov    %esi,0x8(%ebp)
 80103f96:	83 c4 10             	add    $0x10,%esp
@@ -7892,16 +7892,16 @@
 80103f9e:	5f                   	pop    %edi
 80103f9f:	5d                   	pop    %ebp
     acquire(lk);
-80103fa0:	e9 bb 05 00 00       	jmp    80104560 <acquire>
+80103fa0:	e9 2b 09 00 00       	jmp    801048d0 <acquire>
 80103fa5:	8d 76 00             	lea    0x0(%esi),%esi
   p->chan = chan;
-80103fa8:	89 7b 20             	mov    %edi,0x20(%ebx)
+80103fa8:	89 7b 24             	mov    %edi,0x24(%ebx)
   p->state = SLEEPING;
-80103fab:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+80103fab:	c7 43 10 02 00 00 00 	movl   $0x2,0x10(%ebx)
   sched();
 80103fb2:	e8 19 fd ff ff       	call   80103cd0 <sched>
   p->chan = 0;
-80103fb7:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+80103fb7:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
 }
 80103fbe:	8d 65 f4             	lea    -0xc(%ebp),%esp
 80103fc1:	5b                   	pop    %ebx
@@ -7911,11 +7911,11 @@
 80103fc5:	c3                   	ret    
     panic("sleep without lk");
 80103fc6:	83 ec 0c             	sub    $0xc,%esp
-80103fc9:	68 ba 76 10 80       	push   $0x801076ba
+80103fc9:	68 5a 7a 10 80       	push   $0x80107a5a
 80103fce:	e8 bd c3 ff ff       	call   80100390 <panic>
     panic("sleep");
 80103fd3:	83 ec 0c             	sub    $0xc,%esp
-80103fd6:	68 b4 76 10 80       	push   $0x801076b4
+80103fd6:	68 54 7a 10 80       	push   $0x80107a54
 80103fdb:	e8 b0 c3 ff ff       	call   80100390 <panic>
 
 80103fe0 <wait>:
@@ -7926,17 +7926,17 @@
 80103fe7:	56                   	push   %esi
 80103fe8:	53                   	push   %ebx
   pushcli();
-80103fe9:	e8 72 04 00 00       	call   80104460 <pushcli>
+80103fe9:	e8 e2 07 00 00       	call   801047d0 <pushcli>
   c = mycpu();
 80103fee:	e8 dd f8 ff ff       	call   801038d0 <mycpu>
   p = c->proc;
 80103ff3:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
   popcli();
-80103ff9:	e8 b2 04 00 00       	call   801044b0 <popcli>
+80103ff9:	e8 22 08 00 00       	call   80104820 <popcli>
   acquire(&ptable.lock);
 80103ffe:	83 ec 0c             	sub    $0xc,%esp
 80104001:	68 20 2d 11 80       	push   $0x80112d20
-80104006:	e8 55 05 00 00       	call   80104560 <acquire>
+80104006:	e8 c5 08 00 00       	call   801048d0 <acquire>
 8010400b:	83 c4 10             	add    $0x10,%esp
     havekids = 0;
 8010400e:	31 c0                	xor    %eax,%eax
@@ -7945,86 +7945,88 @@
 80104015:	eb 14                	jmp    8010402b <wait+0x4b>
 80104017:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010401e:	66 90                	xchg   %ax,%ax
-80104020:	83 c3 7c             	add    $0x7c,%ebx
-80104023:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
-80104029:	74 1b                	je     80104046 <wait+0x66>
-      if(p->parent != curproc)
-8010402b:	39 73 14             	cmp    %esi,0x14(%ebx)
+80104020:	83 eb 80             	sub    $0xffffff80,%ebx
+80104023:	81 fb 54 4d 11 80    	cmp    $0x80114d54,%ebx
+80104029:	74 23                	je     8010404e <wait+0x6e>
+      if(p->parent != curproc || curproc->pgdir == p->pgdir)
+8010402b:	39 73 18             	cmp    %esi,0x18(%ebx)
 8010402e:	75 f0                	jne    80104020 <wait+0x40>
+80104030:	8b 53 04             	mov    0x4(%ebx),%edx
+80104033:	39 56 04             	cmp    %edx,0x4(%esi)
+80104036:	74 e8                	je     80104020 <wait+0x40>
       if(p->state == ZOMBIE){
-80104030:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
-80104034:	74 32                	je     80104068 <wait+0x88>
+80104038:	83 7b 10 05          	cmpl   $0x5,0x10(%ebx)
+8010403c:	74 32                	je     80104070 <wait+0x90>
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104036:	83 c3 7c             	add    $0x7c,%ebx
+8010403e:	83 eb 80             	sub    $0xffffff80,%ebx
       havekids = 1;
-80104039:	b8 01 00 00 00       	mov    $0x1,%eax
+80104041:	b8 01 00 00 00       	mov    $0x1,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-8010403e:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
-80104044:	75 e5                	jne    8010402b <wait+0x4b>
+80104046:	81 fb 54 4d 11 80    	cmp    $0x80114d54,%ebx
+8010404c:	75 dd                	jne    8010402b <wait+0x4b>
     if(!havekids || curproc->killed){
-80104046:	85 c0                	test   %eax,%eax
-80104048:	74 74                	je     801040be <wait+0xde>
-8010404a:	8b 46 24             	mov    0x24(%esi),%eax
-8010404d:	85 c0                	test   %eax,%eax
-8010404f:	75 6d                	jne    801040be <wait+0xde>
+8010404e:	85 c0                	test   %eax,%eax
+80104050:	74 74                	je     801040c6 <wait+0xe6>
+80104052:	8b 46 28             	mov    0x28(%esi),%eax
+80104055:	85 c0                	test   %eax,%eax
+80104057:	75 6d                	jne    801040c6 <wait+0xe6>
     sleep(curproc, &ptable.lock);  //DOC: wait-sleep
-80104051:	83 ec 08             	sub    $0x8,%esp
-80104054:	68 20 2d 11 80       	push   $0x80112d20
-80104059:	56                   	push   %esi
-8010405a:	e8 c1 fe ff ff       	call   80103f20 <sleep>
+80104059:	83 ec 08             	sub    $0x8,%esp
+8010405c:	68 20 2d 11 80       	push   $0x80112d20
+80104061:	56                   	push   %esi
+80104062:	e8 b9 fe ff ff       	call   80103f20 <sleep>
     havekids = 0;
-8010405f:	83 c4 10             	add    $0x10,%esp
-80104062:	eb aa                	jmp    8010400e <wait+0x2e>
-80104064:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104067:	83 c4 10             	add    $0x10,%esp
+8010406a:	eb a2                	jmp    8010400e <wait+0x2e>
+8010406c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         kfree(p->kstack);
-80104068:	83 ec 0c             	sub    $0xc,%esp
-8010406b:	ff 73 08             	pushl  0x8(%ebx)
+80104070:	83 ec 0c             	sub    $0xc,%esp
+80104073:	ff 73 08             	pushl  0x8(%ebx)
         pid = p->pid;
-8010406e:	8b 73 10             	mov    0x10(%ebx),%esi
+80104076:	8b 73 14             	mov    0x14(%ebx),%esi
         kfree(p->kstack);
-80104071:	e8 fa e3 ff ff       	call   80102470 <kfree>
+80104079:	e8 f2 e3 ff ff       	call   80102470 <kfree>
         freevm(p->pgdir);
-80104076:	5a                   	pop    %edx
-80104077:	ff 73 04             	pushl  0x4(%ebx)
+8010407e:	5a                   	pop    %edx
+8010407f:	ff 73 04             	pushl  0x4(%ebx)
         p->kstack = 0;
-8010407a:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+80104082:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
         freevm(p->pgdir);
-80104081:	e8 4a 2d 00 00       	call   80106dd0 <freevm>
+80104089:	e8 d2 30 00 00       	call   80107160 <freevm>
         release(&ptable.lock);
-80104086:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+8010408e:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
         p->pid = 0;
-8010408d:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
+80104095:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
         p->parent = 0;
-80104094:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+8010409c:	c7 43 18 00 00 00 00 	movl   $0x0,0x18(%ebx)
         p->name[0] = 0;
-8010409b:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
+801040a3:	c6 43 70 00          	movb   $0x0,0x70(%ebx)
         p->killed = 0;
-8010409f:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+801040a7:	c7 43 28 00 00 00 00 	movl   $0x0,0x28(%ebx)
         p->state = UNUSED;
-801040a6:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+801040ae:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
         release(&ptable.lock);
-801040ad:	e8 6e 05 00 00       	call   80104620 <release>
+801040b5:	e8 d6 08 00 00       	call   80104990 <release>
         return pid;
-801040b2:	83 c4 10             	add    $0x10,%esp
+801040ba:	83 c4 10             	add    $0x10,%esp
 }
-801040b5:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801040b8:	89 f0                	mov    %esi,%eax
-801040ba:	5b                   	pop    %ebx
-801040bb:	5e                   	pop    %esi
-801040bc:	5d                   	pop    %ebp
-801040bd:	c3                   	ret    
+801040bd:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801040c0:	89 f0                	mov    %esi,%eax
+801040c2:	5b                   	pop    %ebx
+801040c3:	5e                   	pop    %esi
+801040c4:	5d                   	pop    %ebp
+801040c5:	c3                   	ret    
       release(&ptable.lock);
-801040be:	83 ec 0c             	sub    $0xc,%esp
+801040c6:	83 ec 0c             	sub    $0xc,%esp
       return -1;
-801040c1:	be ff ff ff ff       	mov    $0xffffffff,%esi
+801040c9:	be ff ff ff ff       	mov    $0xffffffff,%esi
       release(&ptable.lock);
-801040c6:	68 20 2d 11 80       	push   $0x80112d20
-801040cb:	e8 50 05 00 00       	call   80104620 <release>
+801040ce:	68 20 2d 11 80       	push   $0x80112d20
+801040d3:	e8 b8 08 00 00       	call   80104990 <release>
       return -1;
-801040d0:	83 c4 10             	add    $0x10,%esp
-801040d3:	eb e0                	jmp    801040b5 <wait+0xd5>
-801040d5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801040dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801040d8:	83 c4 10             	add    $0x10,%esp
+801040db:	eb e0                	jmp    801040bd <wait+0xdd>
+801040dd:	8d 76 00             	lea    0x0(%esi),%esi
 
 801040e0 <wakeup>:
 }
@@ -8041,25 +8043,25 @@
 801040eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ptable.lock);
 801040ee:	68 20 2d 11 80       	push   $0x80112d20
-801040f3:	e8 68 04 00 00       	call   80104560 <acquire>
+801040f3:	e8 d8 07 00 00       	call   801048d0 <acquire>
 801040f8:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
 801040fb:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
 80104100:	eb 10                	jmp    80104112 <wakeup+0x32>
 80104102:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104108:	83 c0 7c             	add    $0x7c,%eax
-8010410b:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80104108:	83 e8 80             	sub    $0xffffff80,%eax
+8010410b:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
 80104110:	74 1c                	je     8010412e <wakeup+0x4e>
     if(p->state == SLEEPING && p->chan == chan)
-80104112:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80104112:	83 78 10 02          	cmpl   $0x2,0x10(%eax)
 80104116:	75 f0                	jne    80104108 <wakeup+0x28>
-80104118:	3b 58 20             	cmp    0x20(%eax),%ebx
+80104118:	3b 58 24             	cmp    0x24(%eax),%ebx
 8010411b:	75 eb                	jne    80104108 <wakeup+0x28>
       p->state = RUNNABLE;
-8010411d:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+8010411d:	c7 40 10 03 00 00 00 	movl   $0x3,0x10(%eax)
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80104124:	83 c0 7c             	add    $0x7c,%eax
-80104127:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80104124:	83 e8 80             	sub    $0xffffff80,%eax
+80104127:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
 8010412c:	75 e4                	jne    80104112 <wakeup+0x32>
   wakeup1(chan);
   release(&ptable.lock);
@@ -8068,7 +8070,7 @@
 80104135:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 80104138:	c9                   	leave  
   release(&ptable.lock);
-80104139:	e9 e2 04 00 00       	jmp    80104620 <release>
+80104139:	e9 52 08 00 00       	jmp    80104990 <release>
 8010413e:	66 90                	xchg   %ax,%ax
 
 80104140 <kill>:
@@ -8088,32 +8090,32 @@
 
   acquire(&ptable.lock);
 8010414e:	68 20 2d 11 80       	push   $0x80112d20
-80104153:	e8 08 04 00 00       	call   80104560 <acquire>
+80104153:	e8 78 07 00 00       	call   801048d0 <acquire>
 80104158:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
 8010415b:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
 80104160:	eb 10                	jmp    80104172 <kill+0x32>
 80104162:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104168:	83 c0 7c             	add    $0x7c,%eax
-8010416b:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80104168:	83 e8 80             	sub    $0xffffff80,%eax
+8010416b:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
 80104170:	74 36                	je     801041a8 <kill+0x68>
     if(p->pid == pid){
-80104172:	39 58 10             	cmp    %ebx,0x10(%eax)
+80104172:	39 58 14             	cmp    %ebx,0x14(%eax)
 80104175:	75 f1                	jne    80104168 <kill+0x28>
       p->killed = 1;
       // Wake process from sleep if necessary.
       if(p->state == SLEEPING)
-80104177:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80104177:	83 78 10 02          	cmpl   $0x2,0x10(%eax)
       p->killed = 1;
-8010417b:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+8010417b:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
       if(p->state == SLEEPING)
 80104182:	75 07                	jne    8010418b <kill+0x4b>
         p->state = RUNNABLE;
-80104184:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80104184:	c7 40 10 03 00 00 00 	movl   $0x3,0x10(%eax)
       release(&ptable.lock);
 8010418b:	83 ec 0c             	sub    $0xc,%esp
 8010418e:	68 20 2d 11 80       	push   $0x80112d20
-80104193:	e8 88 04 00 00       	call   80104620 <release>
+80104193:	e8 f8 07 00 00       	call   80104990 <release>
       return 0;
     }
   }
@@ -8131,7 +8133,7 @@
   release(&ptable.lock);
 801041a8:	83 ec 0c             	sub    $0xc,%esp
 801041ab:	68 20 2d 11 80       	push   $0x80112d20
-801041b0:	e8 6b 04 00 00       	call   80104620 <release>
+801041b0:	e8 db 07 00 00       	call   80104990 <release>
 }
 801041b5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   return -1;
@@ -8157,7 +8159,7 @@
 801041d8:	56                   	push   %esi
 801041d9:	8d 75 e8             	lea    -0x18(%ebp),%esi
 801041dc:	53                   	push   %ebx
-801041dd:	bb c0 2d 11 80       	mov    $0x80112dc0,%ebx
+801041dd:	bb c4 2d 11 80       	mov    $0x80112dc4,%ebx
 801041e2:	83 ec 3c             	sub    $0x3c,%esp
 801041e5:	eb 28                	jmp    8010420f <procdump+0x3f>
 801041e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -8169,32 +8171,32 @@
     }
     cprintf("\n");
 801041f0:	83 ec 0c             	sub    $0xc,%esp
-801041f3:	68 37 7a 10 80       	push   $0x80107a37
+801041f3:	68 e3 7d 10 80       	push   $0x80107de3
 801041f8:	e8 b3 c4 ff ff       	call   801006b0 <cprintf>
 801041fd:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104200:	83 c3 7c             	add    $0x7c,%ebx
-80104203:	81 fb c0 4c 11 80    	cmp    $0x80114cc0,%ebx
+80104200:	83 eb 80             	sub    $0xffffff80,%ebx
+80104203:	81 fb c4 4d 11 80    	cmp    $0x80114dc4,%ebx
 80104209:	0f 84 81 00 00 00    	je     80104290 <procdump+0xc0>
     if(p->state == UNUSED)
 8010420f:	8b 43 a0             	mov    -0x60(%ebx),%eax
 80104212:	85 c0                	test   %eax,%eax
 80104214:	74 ea                	je     80104200 <procdump+0x30>
       state = "???";
-80104216:	ba cb 76 10 80       	mov    $0x801076cb,%edx
+80104216:	ba 6b 7a 10 80       	mov    $0x80107a6b,%edx
     if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
 8010421b:	83 f8 05             	cmp    $0x5,%eax
 8010421e:	77 11                	ja     80104231 <procdump+0x61>
-80104220:	8b 14 85 2c 77 10 80 	mov    -0x7fef88d4(,%eax,4),%edx
+80104220:	8b 14 85 cc 7a 10 80 	mov    -0x7fef8534(,%eax,4),%edx
       state = "???";
-80104227:	b8 cb 76 10 80       	mov    $0x801076cb,%eax
+80104227:	b8 6b 7a 10 80       	mov    $0x80107a6b,%eax
 8010422c:	85 d2                	test   %edx,%edx
 8010422e:	0f 44 d0             	cmove  %eax,%edx
     cprintf("%d %s %s", p->pid, state, p->name);
 80104231:	53                   	push   %ebx
 80104232:	52                   	push   %edx
 80104233:	ff 73 a4             	pushl  -0x5c(%ebx)
-80104236:	68 cf 76 10 80       	push   $0x801076cf
+80104236:	68 6f 7a 10 80       	push   $0x80107a6f
 8010423b:	e8 70 c4 ff ff       	call   801006b0 <cprintf>
     if(p->state == SLEEPING){
 80104240:	83 c4 10             	add    $0x10,%esp
@@ -8209,7 +8211,7 @@
 80104256:	8b 40 0c             	mov    0xc(%eax),%eax
 80104259:	83 c0 08             	add    $0x8,%eax
 8010425c:	50                   	push   %eax
-8010425d:	e8 9e 01 00 00       	call   80104400 <getcallerpcs>
+8010425d:	e8 0e 05 00 00       	call   80104770 <getcallerpcs>
       for(i=0; i<10 && pc[i] != 0; i++)
 80104262:	83 c4 10             	add    $0x10,%esp
 80104265:	8d 76 00             	lea    0x0(%esi),%esi
@@ -8220,7 +8222,7 @@
 8010426e:	83 ec 08             	sub    $0x8,%esp
 80104271:	83 c7 04             	add    $0x4,%edi
 80104274:	52                   	push   %edx
-80104275:	68 21 71 10 80       	push   $0x80107121
+80104275:	68 c1 74 10 80       	push   $0x801074c1
 8010427a:	e8 31 c4 ff ff       	call   801006b0 <cprintf>
       for(i=0; i<10 && pc[i] != 0; i++)
 8010427f:	83 c4 10             	add    $0x10,%esp
@@ -8237,7349 +8239,7805 @@
 80104295:	5f                   	pop    %edi
 80104296:	5d                   	pop    %ebp
 80104297:	c3                   	ret    
-80104298:	66 90                	xchg   %ax,%ax
-8010429a:	66 90                	xchg   %ax,%ax
-8010429c:	66 90                	xchg   %ax,%ax
-8010429e:	66 90                	xchg   %ax,%ax
+80104298:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010429f:	90                   	nop
+
+801042a0 <thread_create>:
+
+// newly created threads
+int
+thread_create(void)
+{
+801042a0:	f3 0f 1e fb          	endbr32 
+801042a4:	55                   	push   %ebp
+801042a5:	89 e5                	mov    %esp,%ebp
+801042a7:	57                   	push   %edi
+801042a8:	56                   	push   %esi
+	void* stack;
+	void* args;
+	void (*fnptr) (void*);
+	if(argptr(0, (void*)&fnptr, sizeof(*fnptr)) < 0 || argptr(1, (void*)&args, sizeof(*args)) < 0|| argptr(2, (void*)&stack, sizeof(*stack)) < 0 ) return -1;
+801042a9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+{
+801042ac:	53                   	push   %ebx
+801042ad:	83 ec 30             	sub    $0x30,%esp
+	if(argptr(0, (void*)&fnptr, sizeof(*fnptr)) < 0 || argptr(1, (void*)&args, sizeof(*args)) < 0|| argptr(2, (void*)&stack, sizeof(*stack)) < 0 ) return -1;
+801042b0:	6a 01                	push   $0x1
+801042b2:	50                   	push   %eax
+801042b3:	6a 00                	push   $0x0
+801042b5:	e8 56 0a 00 00       	call   80104d10 <argptr>
+801042ba:	83 c4 10             	add    $0x10,%esp
+801042bd:	85 c0                	test   %eax,%eax
+801042bf:	0f 88 36 01 00 00    	js     801043fb <thread_create+0x15b>
+801042c5:	83 ec 04             	sub    $0x4,%esp
+801042c8:	8d 45 e0             	lea    -0x20(%ebp),%eax
+801042cb:	6a 01                	push   $0x1
+801042cd:	50                   	push   %eax
+801042ce:	6a 01                	push   $0x1
+801042d0:	e8 3b 0a 00 00       	call   80104d10 <argptr>
+801042d5:	83 c4 10             	add    $0x10,%esp
+801042d8:	85 c0                	test   %eax,%eax
+801042da:	0f 88 1b 01 00 00    	js     801043fb <thread_create+0x15b>
+801042e0:	83 ec 04             	sub    $0x4,%esp
+801042e3:	8d 45 dc             	lea    -0x24(%ebp),%eax
+801042e6:	6a 01                	push   $0x1
+801042e8:	50                   	push   %eax
+801042e9:	6a 02                	push   $0x2
+801042eb:	e8 20 0a 00 00       	call   80104d10 <argptr>
+801042f0:	83 c4 10             	add    $0x10,%esp
+801042f3:	85 c0                	test   %eax,%eax
+801042f5:	0f 88 00 01 00 00    	js     801043fb <thread_create+0x15b>
+  pushcli();
+801042fb:	e8 d0 04 00 00       	call   801047d0 <pushcli>
+  c = mycpu();
+80104300:	e8 cb f5 ff ff       	call   801038d0 <mycpu>
+  p = c->proc;
+80104305:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
+8010430b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  popcli();
+8010430e:	e8 0d 05 00 00       	call   80104820 <popcli>
+	int i, pid;
+	struct proc *np;
+	struct proc *curproc = myproc();
+
+	// Allocate process.
+	if((np = allocproc()) == 0){
+80104313:	e8 78 f4 ff ff       	call   80103790 <allocproc>
+80104318:	89 c3                	mov    %eax,%ebx
+8010431a:	85 c0                	test   %eax,%eax
+8010431c:	0f 84 d9 00 00 00    	je     801043fb <thread_create+0x15b>
+		return -1;
+	}
+
+	// Copy process state from proc.
+	np->pgdir = curproc->pgdir;					// not copying the page directory
+80104322:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+	np->sz = curproc->sz;
+	np->parent = curproc;
+	*np->tf = *curproc->tf;
+80104325:	8b 7b 1c             	mov    0x1c(%ebx),%edi
+80104328:	b9 13 00 00 00       	mov    $0x13,%ecx
+	np->pgdir = curproc->pgdir;					// not copying the page directory
+8010432d:	8b 42 04             	mov    0x4(%edx),%eax
+80104330:	89 43 04             	mov    %eax,0x4(%ebx)
+	np->sz = curproc->sz;
+80104333:	8b 02                	mov    (%edx),%eax
+	np->parent = curproc;
+80104335:	89 53 18             	mov    %edx,0x18(%ebx)
+	np->sz = curproc->sz;
+80104338:	89 03                	mov    %eax,(%ebx)
+	*np->tf = *curproc->tf;
+8010433a:	8b 72 1c             	mov    0x1c(%edx),%esi
+8010433d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+	np->tf->eip = (uint) fnptr;
+	
+	// Clear %eax so that fork returns 0 in the child.
+	np->tf->eax = 0;
+
+	for(i = 0; i < NOFILE; i++)
+8010433f:	31 f6                	xor    %esi,%esi
+	void* args1 = stack + PGSIZE - 1*sizeof(void*);
+80104341:	8b 45 dc             	mov    -0x24(%ebp),%eax
+	*(void**)args1 = args;
+80104344:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+	*(uint*)ret_addr = 0xFFFFFFFF;
+80104347:	c7 80 f8 0f 00 00 ff 	movl   $0xffffffff,0xff8(%eax)
+8010434e:	ff ff ff 
+	np->tf->esp = (uint) stack+PGSIZE-2*sizeof(void*);
+80104351:	05 f8 0f 00 00       	add    $0xff8,%eax
+	*(void**)args1 = args;
+80104356:	89 48 04             	mov    %ecx,0x4(%eax)
+	np->tf->esp = (uint) stack+PGSIZE-2*sizeof(void*);
+80104359:	8b 4b 1c             	mov    0x1c(%ebx),%ecx
+8010435c:	89 41 44             	mov    %eax,0x44(%ecx)
+	np->tf->ebp = np->tf->esp;
+8010435f:	8b 43 1c             	mov    0x1c(%ebx),%eax
+80104362:	8b 48 44             	mov    0x44(%eax),%ecx
+80104365:	89 48 08             	mov    %ecx,0x8(%eax)
+	np->tf->eip = (uint) fnptr;
+80104368:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+8010436b:	8b 43 1c             	mov    0x1c(%ebx),%eax
+8010436e:	89 48 38             	mov    %ecx,0x38(%eax)
+	np->tf->eax = 0;
+80104371:	8b 43 1c             	mov    0x1c(%ebx),%eax
+80104374:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+	for(i = 0; i < NOFILE; i++)
+8010437b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010437f:	90                   	nop
+	if(curproc->ofile[i])
+80104380:	8b 44 b2 2c          	mov    0x2c(%edx,%esi,4),%eax
+80104384:	85 c0                	test   %eax,%eax
+80104386:	74 16                	je     8010439e <thread_create+0xfe>
+	  np->ofile[i] = filedup(curproc->ofile[i]);
+80104388:	83 ec 0c             	sub    $0xc,%esp
+8010438b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+8010438e:	50                   	push   %eax
+8010438f:	e8 dc ca ff ff       	call   80100e70 <filedup>
+80104394:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+80104397:	83 c4 10             	add    $0x10,%esp
+8010439a:	89 44 b3 2c          	mov    %eax,0x2c(%ebx,%esi,4)
+	for(i = 0; i < NOFILE; i++)
+8010439e:	83 c6 01             	add    $0x1,%esi
+801043a1:	83 fe 10             	cmp    $0x10,%esi
+801043a4:	75 da                	jne    80104380 <thread_create+0xe0>
+	np->cwd = idup(curproc->cwd);
+801043a6:	83 ec 0c             	sub    $0xc,%esp
+801043a9:	ff 72 6c             	pushl  0x6c(%edx)
+801043ac:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+801043af:	e8 7c d3 ff ff       	call   80101730 <idup>
+
+	safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+801043b4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+801043b7:	83 c4 0c             	add    $0xc,%esp
+	np->cwd = idup(curproc->cwd);
+801043ba:	89 43 6c             	mov    %eax,0x6c(%ebx)
+	safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+801043bd:	8d 43 70             	lea    0x70(%ebx),%eax
+801043c0:	83 c2 70             	add    $0x70,%edx
+801043c3:	6a 10                	push   $0x10
+801043c5:	52                   	push   %edx
+801043c6:	50                   	push   %eax
+801043c7:	e8 d4 07 00 00       	call   80104ba0 <safestrcpy>
+
+	pid = np->pid;
+801043cc:	8b 73 14             	mov    0x14(%ebx),%esi
+
+	acquire(&ptable.lock);
+801043cf:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+801043d6:	e8 f5 04 00 00       	call   801048d0 <acquire>
+
+	np->state = RUNNABLE;
+801043db:	c7 43 10 03 00 00 00 	movl   $0x3,0x10(%ebx)
+
+	release(&ptable.lock);
+801043e2:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+801043e9:	e8 a2 05 00 00       	call   80104990 <release>
+	return pid;
+801043ee:	83 c4 10             	add    $0x10,%esp
+}
+801043f1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801043f4:	89 f0                	mov    %esi,%eax
+801043f6:	5b                   	pop    %ebx
+801043f7:	5e                   	pop    %esi
+801043f8:	5f                   	pop    %edi
+801043f9:	5d                   	pop    %ebp
+801043fa:	c3                   	ret    
+	if(argptr(0, (void*)&fnptr, sizeof(*fnptr)) < 0 || argptr(1, (void*)&args, sizeof(*args)) < 0|| argptr(2, (void*)&stack, sizeof(*stack)) < 0 ) return -1;
+801043fb:	be ff ff ff ff       	mov    $0xffffffff,%esi
+80104400:	eb ef                	jmp    801043f1 <thread_create+0x151>
+80104402:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104409:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80104410 <thread_join>:
+
+int
+thread_join(void)
+{
+80104410:	f3 0f 1e fb          	endbr32 
+80104414:	55                   	push   %ebp
+80104415:	89 e5                	mov    %esp,%ebp
+80104417:	56                   	push   %esi
+80104418:	53                   	push   %ebx
+  pushcli();
+80104419:	e8 b2 03 00 00       	call   801047d0 <pushcli>
+  c = mycpu();
+8010441e:	e8 ad f4 ff ff       	call   801038d0 <mycpu>
+  p = c->proc;
+80104423:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+80104429:	e8 f2 03 00 00       	call   80104820 <popcli>
+	struct proc *p;
+	int havekids, pid;
+	struct proc *curproc = myproc();
+
+	acquire(&ptable.lock);
+8010442e:	83 ec 0c             	sub    $0xc,%esp
+80104431:	68 20 2d 11 80       	push   $0x80112d20
+80104436:	e8 95 04 00 00       	call   801048d0 <acquire>
+8010443b:	83 c4 10             	add    $0x10,%esp
+	for(;;){
+	// Scan through table looking for exited children.
+		havekids = 0;
+8010443e:	31 c0                	xor    %eax,%eax
+		for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104440:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+80104445:	eb 14                	jmp    8010445b <thread_join+0x4b>
+80104447:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010444e:	66 90                	xchg   %ax,%ax
+80104450:	83 eb 80             	sub    $0xffffff80,%ebx
+80104453:	81 fb 54 4d 11 80    	cmp    $0x80114d54,%ebx
+80104459:	74 23                	je     8010447e <thread_join+0x6e>
+			if(p->parent != curproc || curproc->pgdir != p->pgdir)	// changed - thread_join should only wait for child threads, not other child processes
+8010445b:	39 73 18             	cmp    %esi,0x18(%ebx)
+8010445e:	75 f0                	jne    80104450 <thread_join+0x40>
+80104460:	8b 53 04             	mov    0x4(%ebx),%edx
+80104463:	39 56 04             	cmp    %edx,0x4(%esi)
+80104466:	75 e8                	jne    80104450 <thread_join+0x40>
+				continue;
+			havekids = 1;
+			if(p->state == ZOMBIE){
+80104468:	83 7b 10 05          	cmpl   $0x5,0x10(%ebx)
+8010446c:	74 32                	je     801044a0 <thread_join+0x90>
+		for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+8010446e:	83 eb 80             	sub    $0xffffff80,%ebx
+			havekids = 1;
+80104471:	b8 01 00 00 00       	mov    $0x1,%eax
+		for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104476:	81 fb 54 4d 11 80    	cmp    $0x80114d54,%ebx
+8010447c:	75 dd                	jne    8010445b <thread_join+0x4b>
+				return pid;
+		  	}
+		}	
+
+		// No point waiting if we don't have any children.
+		if(!havekids || curproc->killed){
+8010447e:	85 c0                	test   %eax,%eax
+80104480:	74 6b                	je     801044ed <thread_join+0xdd>
+80104482:	8b 46 28             	mov    0x28(%esi),%eax
+80104485:	85 c0                	test   %eax,%eax
+80104487:	75 64                	jne    801044ed <thread_join+0xdd>
+		  release(&ptable.lock);
+		  return -1;
+		}
+
+		// Wait for children to exit.  (See wakeup1 call in proc_exit.)
+		sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+80104489:	83 ec 08             	sub    $0x8,%esp
+8010448c:	68 20 2d 11 80       	push   $0x80112d20
+80104491:	56                   	push   %esi
+80104492:	e8 89 fa ff ff       	call   80103f20 <sleep>
+		havekids = 0;
+80104497:	83 c4 10             	add    $0x10,%esp
+8010449a:	eb a2                	jmp    8010443e <thread_join+0x2e>
+8010449c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+				kfree(p->kstack);
+801044a0:	83 ec 0c             	sub    $0xc,%esp
+801044a3:	ff 73 08             	pushl  0x8(%ebx)
+				pid = p->pid;
+801044a6:	8b 73 14             	mov    0x14(%ebx),%esi
+				kfree(p->kstack);
+801044a9:	e8 c2 df ff ff       	call   80102470 <kfree>
+				release(&ptable.lock);
+801044ae:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+				p->kstack = 0;
+801044b5:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+				p->pid = 0;
+801044bc:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+				p->parent = 0;
+801044c3:	c7 43 18 00 00 00 00 	movl   $0x0,0x18(%ebx)
+				p->name[0] = 0;
+801044ca:	c6 43 70 00          	movb   $0x0,0x70(%ebx)
+				p->killed = 0;
+801044ce:	c7 43 28 00 00 00 00 	movl   $0x0,0x28(%ebx)
+				p->state = UNUSED;
+801044d5:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
+				release(&ptable.lock);
+801044dc:	e8 af 04 00 00       	call   80104990 <release>
+				return pid;
+801044e1:	83 c4 10             	add    $0x10,%esp
+	}
+}
+801044e4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801044e7:	89 f0                	mov    %esi,%eax
+801044e9:	5b                   	pop    %ebx
+801044ea:	5e                   	pop    %esi
+801044eb:	5d                   	pop    %ebp
+801044ec:	c3                   	ret    
+		  release(&ptable.lock);
+801044ed:	83 ec 0c             	sub    $0xc,%esp
+		  return -1;
+801044f0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+		  release(&ptable.lock);
+801044f5:	68 20 2d 11 80       	push   $0x80112d20
+801044fa:	e8 91 04 00 00       	call   80104990 <release>
+		  return -1;
+801044ff:	83 c4 10             	add    $0x10,%esp
+80104502:	eb e0                	jmp    801044e4 <thread_join+0xd4>
+80104504:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010450b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010450f:	90                   	nop
+
+80104510 <thread_exit>:
+int
+thread_exit(void)
+{
+80104510:	f3 0f 1e fb          	endbr32 
+80104514:	55                   	push   %ebp
+80104515:	89 e5                	mov    %esp,%ebp
+80104517:	53                   	push   %ebx
+80104518:	83 ec 04             	sub    $0x4,%esp
+  pushcli();
+8010451b:	e8 b0 02 00 00       	call   801047d0 <pushcli>
+  c = mycpu();
+80104520:	e8 ab f3 ff ff       	call   801038d0 <mycpu>
+  p = c->proc;
+80104525:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+8010452b:	e8 f0 02 00 00       	call   80104820 <popcli>
+	struct proc *curproc = myproc();
+	struct proc *p;
+	
+	int pid = curproc->pid;
+	if(curproc == initproc)
+80104530:	39 1d b8 a5 10 80    	cmp    %ebx,0x8010a5b8
+80104536:	0f 84 bb 00 00 00    	je     801045f7 <thread_exit+0xe7>
+		panic("init exiting");
+
+	acquire(&ptable.lock);
+8010453c:	83 ec 0c             	sub    $0xc,%esp
+8010453f:	68 20 2d 11 80       	push   $0x80112d20
+80104544:	e8 87 03 00 00       	call   801048d0 <acquire>
+
+	// Parent might be sleeping in wait().
+	wakeup1(curproc->parent);
+80104549:	8b 53 18             	mov    0x18(%ebx),%edx
+8010454c:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+8010454f:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80104554:	eb 14                	jmp    8010456a <thread_exit+0x5a>
+80104556:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010455d:	8d 76 00             	lea    0x0(%esi),%esi
+80104560:	83 e8 80             	sub    $0xffffff80,%eax
+80104563:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
+80104568:	74 1c                	je     80104586 <thread_exit+0x76>
+    if(p->state == SLEEPING && p->chan == chan)
+8010456a:	83 78 10 02          	cmpl   $0x2,0x10(%eax)
+8010456e:	75 f0                	jne    80104560 <thread_exit+0x50>
+80104570:	3b 50 24             	cmp    0x24(%eax),%edx
+80104573:	75 eb                	jne    80104560 <thread_exit+0x50>
+      p->state = RUNNABLE;
+80104575:	c7 40 10 03 00 00 00 	movl   $0x3,0x10(%eax)
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+8010457c:	83 e8 80             	sub    $0xffffff80,%eax
+8010457f:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
+80104584:	75 e4                	jne    8010456a <thread_exit+0x5a>
+
+	// Pass abandoned children to init.
+	for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+		if(p->parent == curproc){
+		  p->parent = initproc;
+80104586:	8b 0d b8 a5 10 80    	mov    0x8010a5b8,%ecx
+	for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+8010458c:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
+80104591:	eb 10                	jmp    801045a3 <thread_exit+0x93>
+80104593:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104597:	90                   	nop
+80104598:	83 ea 80             	sub    $0xffffff80,%edx
+8010459b:	81 fa 54 4d 11 80    	cmp    $0x80114d54,%edx
+801045a1:	74 3b                	je     801045de <thread_exit+0xce>
+		if(p->parent == curproc){
+801045a3:	39 5a 18             	cmp    %ebx,0x18(%edx)
+801045a6:	75 f0                	jne    80104598 <thread_exit+0x88>
+		  if(p->state == ZOMBIE)
+801045a8:	83 7a 10 05          	cmpl   $0x5,0x10(%edx)
+		  p->parent = initproc;
+801045ac:	89 4a 18             	mov    %ecx,0x18(%edx)
+		  if(p->state == ZOMBIE)
+801045af:	75 e7                	jne    80104598 <thread_exit+0x88>
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+801045b1:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+801045b6:	eb 12                	jmp    801045ca <thread_exit+0xba>
+801045b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801045bf:	90                   	nop
+801045c0:	83 e8 80             	sub    $0xffffff80,%eax
+801045c3:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
+801045c8:	74 ce                	je     80104598 <thread_exit+0x88>
+    if(p->state == SLEEPING && p->chan == chan)
+801045ca:	83 78 10 02          	cmpl   $0x2,0x10(%eax)
+801045ce:	75 f0                	jne    801045c0 <thread_exit+0xb0>
+801045d0:	3b 48 24             	cmp    0x24(%eax),%ecx
+801045d3:	75 eb                	jne    801045c0 <thread_exit+0xb0>
+      p->state = RUNNABLE;
+801045d5:	c7 40 10 03 00 00 00 	movl   $0x3,0x10(%eax)
+801045dc:	eb e2                	jmp    801045c0 <thread_exit+0xb0>
+			wakeup1(initproc);
+		}
+	}
+
+	// Jump into the scheduler, never to return.
+	curproc->state = ZOMBIE;
+801045de:	c7 43 10 05 00 00 00 	movl   $0x5,0x10(%ebx)
+	sched();
+801045e5:	e8 e6 f6 ff ff       	call   80103cd0 <sched>
+	panic("zombie exit");
+801045ea:	83 ec 0c             	sub    $0xc,%esp
+801045ed:	68 48 7a 10 80       	push   $0x80107a48
+801045f2:	e8 99 bd ff ff       	call   80100390 <panic>
+		panic("init exiting");
+801045f7:	83 ec 0c             	sub    $0xc,%esp
+801045fa:	68 3b 7a 10 80       	push   $0x80107a3b
+801045ff:	e8 8c bd ff ff       	call   80100390 <panic>
+80104604:	66 90                	xchg   %ax,%ax
+80104606:	66 90                	xchg   %ax,%ax
+80104608:	66 90                	xchg   %ax,%ax
+8010460a:	66 90                	xchg   %ax,%ax
+8010460c:	66 90                	xchg   %ax,%ax
+8010460e:	66 90                	xchg   %ax,%ax
 
-801042a0 <initsleeplock>:
+80104610 <initsleeplock>:
 #include "spinlock.h"
 #include "sleeplock.h"
 
 void
 initsleeplock(struct sleeplock *lk, char *name)
 {
-801042a0:	f3 0f 1e fb          	endbr32 
-801042a4:	55                   	push   %ebp
-801042a5:	89 e5                	mov    %esp,%ebp
-801042a7:	53                   	push   %ebx
-801042a8:	83 ec 0c             	sub    $0xc,%esp
-801042ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104610:	f3 0f 1e fb          	endbr32 
+80104614:	55                   	push   %ebp
+80104615:	89 e5                	mov    %esp,%ebp
+80104617:	53                   	push   %ebx
+80104618:	83 ec 0c             	sub    $0xc,%esp
+8010461b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&lk->lk, "sleep lock");
-801042ae:	68 44 77 10 80       	push   $0x80107744
-801042b3:	8d 43 04             	lea    0x4(%ebx),%eax
-801042b6:	50                   	push   %eax
-801042b7:	e8 24 01 00 00       	call   801043e0 <initlock>
+8010461e:	68 e4 7a 10 80       	push   $0x80107ae4
+80104623:	8d 43 04             	lea    0x4(%ebx),%eax
+80104626:	50                   	push   %eax
+80104627:	e8 24 01 00 00       	call   80104750 <initlock>
   lk->name = name;
-801042bc:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010462c:	8b 45 0c             	mov    0xc(%ebp),%eax
   lk->locked = 0;
-801042bf:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+8010462f:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   lk->pid = 0;
 }
-801042c5:	83 c4 10             	add    $0x10,%esp
+80104635:	83 c4 10             	add    $0x10,%esp
   lk->pid = 0;
-801042c8:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+80104638:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
   lk->name = name;
-801042cf:	89 43 38             	mov    %eax,0x38(%ebx)
+8010463f:	89 43 38             	mov    %eax,0x38(%ebx)
 }
-801042d2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801042d5:	c9                   	leave  
-801042d6:	c3                   	ret    
-801042d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801042de:	66 90                	xchg   %ax,%ax
+80104642:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104645:	c9                   	leave  
+80104646:	c3                   	ret    
+80104647:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010464e:	66 90                	xchg   %ax,%ax
 
-801042e0 <acquiresleep>:
+80104650 <acquiresleep>:
 
 void
 acquiresleep(struct sleeplock *lk)
 {
-801042e0:	f3 0f 1e fb          	endbr32 
-801042e4:	55                   	push   %ebp
-801042e5:	89 e5                	mov    %esp,%ebp
-801042e7:	56                   	push   %esi
-801042e8:	53                   	push   %ebx
-801042e9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104650:	f3 0f 1e fb          	endbr32 
+80104654:	55                   	push   %ebp
+80104655:	89 e5                	mov    %esp,%ebp
+80104657:	56                   	push   %esi
+80104658:	53                   	push   %ebx
+80104659:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&lk->lk);
-801042ec:	8d 73 04             	lea    0x4(%ebx),%esi
-801042ef:	83 ec 0c             	sub    $0xc,%esp
-801042f2:	56                   	push   %esi
-801042f3:	e8 68 02 00 00       	call   80104560 <acquire>
+8010465c:	8d 73 04             	lea    0x4(%ebx),%esi
+8010465f:	83 ec 0c             	sub    $0xc,%esp
+80104662:	56                   	push   %esi
+80104663:	e8 68 02 00 00       	call   801048d0 <acquire>
   while (lk->locked) {
-801042f8:	8b 13                	mov    (%ebx),%edx
-801042fa:	83 c4 10             	add    $0x10,%esp
-801042fd:	85 d2                	test   %edx,%edx
-801042ff:	74 1a                	je     8010431b <acquiresleep+0x3b>
-80104301:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104668:	8b 13                	mov    (%ebx),%edx
+8010466a:	83 c4 10             	add    $0x10,%esp
+8010466d:	85 d2                	test   %edx,%edx
+8010466f:	74 1a                	je     8010468b <acquiresleep+0x3b>
+80104671:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     sleep(lk, &lk->lk);
-80104308:	83 ec 08             	sub    $0x8,%esp
-8010430b:	56                   	push   %esi
-8010430c:	53                   	push   %ebx
-8010430d:	e8 0e fc ff ff       	call   80103f20 <sleep>
+80104678:	83 ec 08             	sub    $0x8,%esp
+8010467b:	56                   	push   %esi
+8010467c:	53                   	push   %ebx
+8010467d:	e8 9e f8 ff ff       	call   80103f20 <sleep>
   while (lk->locked) {
-80104312:	8b 03                	mov    (%ebx),%eax
-80104314:	83 c4 10             	add    $0x10,%esp
-80104317:	85 c0                	test   %eax,%eax
-80104319:	75 ed                	jne    80104308 <acquiresleep+0x28>
+80104682:	8b 03                	mov    (%ebx),%eax
+80104684:	83 c4 10             	add    $0x10,%esp
+80104687:	85 c0                	test   %eax,%eax
+80104689:	75 ed                	jne    80104678 <acquiresleep+0x28>
   }
   lk->locked = 1;
-8010431b:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+8010468b:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
   lk->pid = myproc()->pid;
-80104321:	e8 3a f6 ff ff       	call   80103960 <myproc>
-80104326:	8b 40 10             	mov    0x10(%eax),%eax
-80104329:	89 43 3c             	mov    %eax,0x3c(%ebx)
+80104691:	e8 ca f2 ff ff       	call   80103960 <myproc>
+80104696:	8b 40 14             	mov    0x14(%eax),%eax
+80104699:	89 43 3c             	mov    %eax,0x3c(%ebx)
   release(&lk->lk);
-8010432c:	89 75 08             	mov    %esi,0x8(%ebp)
+8010469c:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-8010432f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104332:	5b                   	pop    %ebx
-80104333:	5e                   	pop    %esi
-80104334:	5d                   	pop    %ebp
+8010469f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801046a2:	5b                   	pop    %ebx
+801046a3:	5e                   	pop    %esi
+801046a4:	5d                   	pop    %ebp
   release(&lk->lk);
-80104335:	e9 e6 02 00 00       	jmp    80104620 <release>
-8010433a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801046a5:	e9 e6 02 00 00       	jmp    80104990 <release>
+801046aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104340 <releasesleep>:
+801046b0 <releasesleep>:
 
 void
 releasesleep(struct sleeplock *lk)
 {
-80104340:	f3 0f 1e fb          	endbr32 
-80104344:	55                   	push   %ebp
-80104345:	89 e5                	mov    %esp,%ebp
-80104347:	56                   	push   %esi
-80104348:	53                   	push   %ebx
-80104349:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801046b0:	f3 0f 1e fb          	endbr32 
+801046b4:	55                   	push   %ebp
+801046b5:	89 e5                	mov    %esp,%ebp
+801046b7:	56                   	push   %esi
+801046b8:	53                   	push   %ebx
+801046b9:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&lk->lk);
-8010434c:	8d 73 04             	lea    0x4(%ebx),%esi
-8010434f:	83 ec 0c             	sub    $0xc,%esp
-80104352:	56                   	push   %esi
-80104353:	e8 08 02 00 00       	call   80104560 <acquire>
+801046bc:	8d 73 04             	lea    0x4(%ebx),%esi
+801046bf:	83 ec 0c             	sub    $0xc,%esp
+801046c2:	56                   	push   %esi
+801046c3:	e8 08 02 00 00       	call   801048d0 <acquire>
   lk->locked = 0;
-80104358:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+801046c8:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   lk->pid = 0;
-8010435e:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+801046ce:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
   wakeup(lk);
-80104365:	89 1c 24             	mov    %ebx,(%esp)
-80104368:	e8 73 fd ff ff       	call   801040e0 <wakeup>
+801046d5:	89 1c 24             	mov    %ebx,(%esp)
+801046d8:	e8 03 fa ff ff       	call   801040e0 <wakeup>
   release(&lk->lk);
-8010436d:	89 75 08             	mov    %esi,0x8(%ebp)
-80104370:	83 c4 10             	add    $0x10,%esp
+801046dd:	89 75 08             	mov    %esi,0x8(%ebp)
+801046e0:	83 c4 10             	add    $0x10,%esp
 }
-80104373:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104376:	5b                   	pop    %ebx
-80104377:	5e                   	pop    %esi
-80104378:	5d                   	pop    %ebp
+801046e3:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801046e6:	5b                   	pop    %ebx
+801046e7:	5e                   	pop    %esi
+801046e8:	5d                   	pop    %ebp
   release(&lk->lk);
-80104379:	e9 a2 02 00 00       	jmp    80104620 <release>
-8010437e:	66 90                	xchg   %ax,%ax
+801046e9:	e9 a2 02 00 00       	jmp    80104990 <release>
+801046ee:	66 90                	xchg   %ax,%ax
 
-80104380 <holdingsleep>:
+801046f0 <holdingsleep>:
 
 int
 holdingsleep(struct sleeplock *lk)
 {
-80104380:	f3 0f 1e fb          	endbr32 
-80104384:	55                   	push   %ebp
-80104385:	89 e5                	mov    %esp,%ebp
-80104387:	57                   	push   %edi
-80104388:	31 ff                	xor    %edi,%edi
-8010438a:	56                   	push   %esi
-8010438b:	53                   	push   %ebx
-8010438c:	83 ec 18             	sub    $0x18,%esp
-8010438f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801046f0:	f3 0f 1e fb          	endbr32 
+801046f4:	55                   	push   %ebp
+801046f5:	89 e5                	mov    %esp,%ebp
+801046f7:	57                   	push   %edi
+801046f8:	31 ff                	xor    %edi,%edi
+801046fa:	56                   	push   %esi
+801046fb:	53                   	push   %ebx
+801046fc:	83 ec 18             	sub    $0x18,%esp
+801046ff:	8b 5d 08             	mov    0x8(%ebp),%ebx
   int r;
   
   acquire(&lk->lk);
-80104392:	8d 73 04             	lea    0x4(%ebx),%esi
-80104395:	56                   	push   %esi
-80104396:	e8 c5 01 00 00       	call   80104560 <acquire>
+80104702:	8d 73 04             	lea    0x4(%ebx),%esi
+80104705:	56                   	push   %esi
+80104706:	e8 c5 01 00 00       	call   801048d0 <acquire>
   r = lk->locked && (lk->pid == myproc()->pid);
-8010439b:	8b 03                	mov    (%ebx),%eax
-8010439d:	83 c4 10             	add    $0x10,%esp
-801043a0:	85 c0                	test   %eax,%eax
-801043a2:	75 1c                	jne    801043c0 <holdingsleep+0x40>
+8010470b:	8b 03                	mov    (%ebx),%eax
+8010470d:	83 c4 10             	add    $0x10,%esp
+80104710:	85 c0                	test   %eax,%eax
+80104712:	75 1c                	jne    80104730 <holdingsleep+0x40>
   release(&lk->lk);
-801043a4:	83 ec 0c             	sub    $0xc,%esp
-801043a7:	56                   	push   %esi
-801043a8:	e8 73 02 00 00       	call   80104620 <release>
+80104714:	83 ec 0c             	sub    $0xc,%esp
+80104717:	56                   	push   %esi
+80104718:	e8 73 02 00 00       	call   80104990 <release>
   return r;
 }
-801043ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801043b0:	89 f8                	mov    %edi,%eax
-801043b2:	5b                   	pop    %ebx
-801043b3:	5e                   	pop    %esi
-801043b4:	5f                   	pop    %edi
-801043b5:	5d                   	pop    %ebp
-801043b6:	c3                   	ret    
-801043b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801043be:	66 90                	xchg   %ax,%ax
+8010471d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104720:	89 f8                	mov    %edi,%eax
+80104722:	5b                   	pop    %ebx
+80104723:	5e                   	pop    %esi
+80104724:	5f                   	pop    %edi
+80104725:	5d                   	pop    %ebp
+80104726:	c3                   	ret    
+80104727:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010472e:	66 90                	xchg   %ax,%ax
   r = lk->locked && (lk->pid == myproc()->pid);
-801043c0:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
-801043c3:	e8 98 f5 ff ff       	call   80103960 <myproc>
-801043c8:	39 58 10             	cmp    %ebx,0x10(%eax)
-801043cb:	0f 94 c0             	sete   %al
-801043ce:	0f b6 c0             	movzbl %al,%eax
-801043d1:	89 c7                	mov    %eax,%edi
-801043d3:	eb cf                	jmp    801043a4 <holdingsleep+0x24>
-801043d5:	66 90                	xchg   %ax,%ax
-801043d7:	66 90                	xchg   %ax,%ax
-801043d9:	66 90                	xchg   %ax,%ax
-801043db:	66 90                	xchg   %ax,%ax
-801043dd:	66 90                	xchg   %ax,%ax
-801043df:	90                   	nop
+80104730:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
+80104733:	e8 28 f2 ff ff       	call   80103960 <myproc>
+80104738:	39 58 14             	cmp    %ebx,0x14(%eax)
+8010473b:	0f 94 c0             	sete   %al
+8010473e:	0f b6 c0             	movzbl %al,%eax
+80104741:	89 c7                	mov    %eax,%edi
+80104743:	eb cf                	jmp    80104714 <holdingsleep+0x24>
+80104745:	66 90                	xchg   %ax,%ax
+80104747:	66 90                	xchg   %ax,%ax
+80104749:	66 90                	xchg   %ax,%ax
+8010474b:	66 90                	xchg   %ax,%ax
+8010474d:	66 90                	xchg   %ax,%ax
+8010474f:	90                   	nop
 
-801043e0 <initlock>:
+80104750 <initlock>:
 #include "proc.h"
 #include "spinlock.h"
 
 void
 initlock(struct spinlock *lk, char *name)
 {
-801043e0:	f3 0f 1e fb          	endbr32 
-801043e4:	55                   	push   %ebp
-801043e5:	89 e5                	mov    %esp,%ebp
-801043e7:	8b 45 08             	mov    0x8(%ebp),%eax
+80104750:	f3 0f 1e fb          	endbr32 
+80104754:	55                   	push   %ebp
+80104755:	89 e5                	mov    %esp,%ebp
+80104757:	8b 45 08             	mov    0x8(%ebp),%eax
   lk->name = name;
-801043ea:	8b 55 0c             	mov    0xc(%ebp),%edx
+8010475a:	8b 55 0c             	mov    0xc(%ebp),%edx
   lk->locked = 0;
-801043ed:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+8010475d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   lk->name = name;
-801043f3:	89 50 04             	mov    %edx,0x4(%eax)
+80104763:	89 50 04             	mov    %edx,0x4(%eax)
   lk->cpu = 0;
-801043f6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+80104766:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
 }
-801043fd:	5d                   	pop    %ebp
-801043fe:	c3                   	ret    
-801043ff:	90                   	nop
+8010476d:	5d                   	pop    %ebp
+8010476e:	c3                   	ret    
+8010476f:	90                   	nop
 
-80104400 <getcallerpcs>:
+80104770 <getcallerpcs>:
 }
 
 // Record the current call stack in pcs[] by following the %ebp chain.
 void
 getcallerpcs(void *v, uint pcs[])
 {
-80104400:	f3 0f 1e fb          	endbr32 
-80104404:	55                   	push   %ebp
+80104770:	f3 0f 1e fb          	endbr32 
+80104774:	55                   	push   %ebp
   uint *ebp;
   int i;
 
   ebp = (uint*)v - 2;
   for(i = 0; i < 10; i++){
-80104405:	31 d2                	xor    %edx,%edx
+80104775:	31 d2                	xor    %edx,%edx
 {
-80104407:	89 e5                	mov    %esp,%ebp
-80104409:	53                   	push   %ebx
+80104777:	89 e5                	mov    %esp,%ebp
+80104779:	53                   	push   %ebx
   ebp = (uint*)v - 2;
-8010440a:	8b 45 08             	mov    0x8(%ebp),%eax
+8010477a:	8b 45 08             	mov    0x8(%ebp),%eax
 {
-8010440d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+8010477d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   ebp = (uint*)v - 2;
-80104410:	83 e8 08             	sub    $0x8,%eax
+80104780:	83 e8 08             	sub    $0x8,%eax
   for(i = 0; i < 10; i++){
-80104413:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104417:	90                   	nop
+80104783:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104787:	90                   	nop
     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-80104418:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
-8010441e:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
-80104424:	77 1a                	ja     80104440 <getcallerpcs+0x40>
+80104788:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
+8010478e:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+80104794:	77 1a                	ja     801047b0 <getcallerpcs+0x40>
       break;
     pcs[i] = ebp[1];     // saved %eip
-80104426:	8b 58 04             	mov    0x4(%eax),%ebx
-80104429:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
+80104796:	8b 58 04             	mov    0x4(%eax),%ebx
+80104799:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
   for(i = 0; i < 10; i++){
-8010442c:	83 c2 01             	add    $0x1,%edx
+8010479c:	83 c2 01             	add    $0x1,%edx
     ebp = (uint*)ebp[0]; // saved %ebp
-8010442f:	8b 00                	mov    (%eax),%eax
+8010479f:	8b 00                	mov    (%eax),%eax
   for(i = 0; i < 10; i++){
-80104431:	83 fa 0a             	cmp    $0xa,%edx
-80104434:	75 e2                	jne    80104418 <getcallerpcs+0x18>
+801047a1:	83 fa 0a             	cmp    $0xa,%edx
+801047a4:	75 e2                	jne    80104788 <getcallerpcs+0x18>
   }
   for(; i < 10; i++)
     pcs[i] = 0;
 }
-80104436:	5b                   	pop    %ebx
-80104437:	5d                   	pop    %ebp
-80104438:	c3                   	ret    
-80104439:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801047a6:	5b                   	pop    %ebx
+801047a7:	5d                   	pop    %ebp
+801047a8:	c3                   	ret    
+801047a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(; i < 10; i++)
-80104440:	8d 04 91             	lea    (%ecx,%edx,4),%eax
-80104443:	8d 51 28             	lea    0x28(%ecx),%edx
-80104446:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010444d:	8d 76 00             	lea    0x0(%esi),%esi
+801047b0:	8d 04 91             	lea    (%ecx,%edx,4),%eax
+801047b3:	8d 51 28             	lea    0x28(%ecx),%edx
+801047b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801047bd:	8d 76 00             	lea    0x0(%esi),%esi
     pcs[i] = 0;
-80104450:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+801047c0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   for(; i < 10; i++)
-80104456:	83 c0 04             	add    $0x4,%eax
-80104459:	39 d0                	cmp    %edx,%eax
-8010445b:	75 f3                	jne    80104450 <getcallerpcs+0x50>
-}
-8010445d:	5b                   	pop    %ebx
-8010445e:	5d                   	pop    %ebp
-8010445f:	c3                   	ret    
+801047c6:	83 c0 04             	add    $0x4,%eax
+801047c9:	39 d0                	cmp    %edx,%eax
+801047cb:	75 f3                	jne    801047c0 <getcallerpcs+0x50>
+}
+801047cd:	5b                   	pop    %ebx
+801047ce:	5d                   	pop    %ebp
+801047cf:	c3                   	ret    
 
-80104460 <pushcli>:
+801047d0 <pushcli>:
 // it takes two popcli to undo two pushcli.  Also, if interrupts
 // are off, then pushcli, popcli leaves them off.
 
 void
 pushcli(void)
 {
-80104460:	f3 0f 1e fb          	endbr32 
-80104464:	55                   	push   %ebp
-80104465:	89 e5                	mov    %esp,%ebp
-80104467:	53                   	push   %ebx
-80104468:	83 ec 04             	sub    $0x4,%esp
-8010446b:	9c                   	pushf  
-8010446c:	5b                   	pop    %ebx
+801047d0:	f3 0f 1e fb          	endbr32 
+801047d4:	55                   	push   %ebp
+801047d5:	89 e5                	mov    %esp,%ebp
+801047d7:	53                   	push   %ebx
+801047d8:	83 ec 04             	sub    $0x4,%esp
+801047db:	9c                   	pushf  
+801047dc:	5b                   	pop    %ebx
   asm volatile("cli");
-8010446d:	fa                   	cli    
+801047dd:	fa                   	cli    
   int eflags;
 
   eflags = readeflags();
   cli();
   if(mycpu()->ncli == 0)
-8010446e:	e8 5d f4 ff ff       	call   801038d0 <mycpu>
-80104473:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
-80104479:	85 c0                	test   %eax,%eax
-8010447b:	74 13                	je     80104490 <pushcli+0x30>
+801047de:	e8 ed f0 ff ff       	call   801038d0 <mycpu>
+801047e3:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+801047e9:	85 c0                	test   %eax,%eax
+801047eb:	74 13                	je     80104800 <pushcli+0x30>
     mycpu()->intena = eflags & FL_IF;
   mycpu()->ncli += 1;
-8010447d:	e8 4e f4 ff ff       	call   801038d0 <mycpu>
-80104482:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
+801047ed:	e8 de f0 ff ff       	call   801038d0 <mycpu>
+801047f2:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
 }
-80104489:	83 c4 04             	add    $0x4,%esp
-8010448c:	5b                   	pop    %ebx
-8010448d:	5d                   	pop    %ebp
-8010448e:	c3                   	ret    
-8010448f:	90                   	nop
+801047f9:	83 c4 04             	add    $0x4,%esp
+801047fc:	5b                   	pop    %ebx
+801047fd:	5d                   	pop    %ebp
+801047fe:	c3                   	ret    
+801047ff:	90                   	nop
     mycpu()->intena = eflags & FL_IF;
-80104490:	e8 3b f4 ff ff       	call   801038d0 <mycpu>
-80104495:	81 e3 00 02 00 00    	and    $0x200,%ebx
-8010449b:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
-801044a1:	eb da                	jmp    8010447d <pushcli+0x1d>
-801044a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801044aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104800:	e8 cb f0 ff ff       	call   801038d0 <mycpu>
+80104805:	81 e3 00 02 00 00    	and    $0x200,%ebx
+8010480b:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
+80104811:	eb da                	jmp    801047ed <pushcli+0x1d>
+80104813:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010481a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801044b0 <popcli>:
+80104820 <popcli>:
 
 void
 popcli(void)
 {
-801044b0:	f3 0f 1e fb          	endbr32 
-801044b4:	55                   	push   %ebp
-801044b5:	89 e5                	mov    %esp,%ebp
-801044b7:	83 ec 08             	sub    $0x8,%esp
+80104820:	f3 0f 1e fb          	endbr32 
+80104824:	55                   	push   %ebp
+80104825:	89 e5                	mov    %esp,%ebp
+80104827:	83 ec 08             	sub    $0x8,%esp
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-801044ba:	9c                   	pushf  
-801044bb:	58                   	pop    %eax
+8010482a:	9c                   	pushf  
+8010482b:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-801044bc:	f6 c4 02             	test   $0x2,%ah
-801044bf:	75 31                	jne    801044f2 <popcli+0x42>
+8010482c:	f6 c4 02             	test   $0x2,%ah
+8010482f:	75 31                	jne    80104862 <popcli+0x42>
     panic("popcli - interruptible");
   if(--mycpu()->ncli < 0)
-801044c1:	e8 0a f4 ff ff       	call   801038d0 <mycpu>
-801044c6:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
-801044cd:	78 30                	js     801044ff <popcli+0x4f>
+80104831:	e8 9a f0 ff ff       	call   801038d0 <mycpu>
+80104836:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
+8010483d:	78 30                	js     8010486f <popcli+0x4f>
     panic("popcli");
   if(mycpu()->ncli == 0 && mycpu()->intena)
-801044cf:	e8 fc f3 ff ff       	call   801038d0 <mycpu>
-801044d4:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
-801044da:	85 d2                	test   %edx,%edx
-801044dc:	74 02                	je     801044e0 <popcli+0x30>
+8010483f:	e8 8c f0 ff ff       	call   801038d0 <mycpu>
+80104844:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
+8010484a:	85 d2                	test   %edx,%edx
+8010484c:	74 02                	je     80104850 <popcli+0x30>
     sti();
 }
-801044de:	c9                   	leave  
-801044df:	c3                   	ret    
+8010484e:	c9                   	leave  
+8010484f:	c3                   	ret    
   if(mycpu()->ncli == 0 && mycpu()->intena)
-801044e0:	e8 eb f3 ff ff       	call   801038d0 <mycpu>
-801044e5:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
-801044eb:	85 c0                	test   %eax,%eax
-801044ed:	74 ef                	je     801044de <popcli+0x2e>
+80104850:	e8 7b f0 ff ff       	call   801038d0 <mycpu>
+80104855:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
+8010485b:	85 c0                	test   %eax,%eax
+8010485d:	74 ef                	je     8010484e <popcli+0x2e>
   asm volatile("sti");
-801044ef:	fb                   	sti    
+8010485f:	fb                   	sti    
 }
-801044f0:	c9                   	leave  
-801044f1:	c3                   	ret    
+80104860:	c9                   	leave  
+80104861:	c3                   	ret    
     panic("popcli - interruptible");
-801044f2:	83 ec 0c             	sub    $0xc,%esp
-801044f5:	68 4f 77 10 80       	push   $0x8010774f
-801044fa:	e8 91 be ff ff       	call   80100390 <panic>
+80104862:	83 ec 0c             	sub    $0xc,%esp
+80104865:	68 ef 7a 10 80       	push   $0x80107aef
+8010486a:	e8 21 bb ff ff       	call   80100390 <panic>
     panic("popcli");
-801044ff:	83 ec 0c             	sub    $0xc,%esp
-80104502:	68 66 77 10 80       	push   $0x80107766
-80104507:	e8 84 be ff ff       	call   80100390 <panic>
-8010450c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80104510 <holding>:
-{
-80104510:	f3 0f 1e fb          	endbr32 
-80104514:	55                   	push   %ebp
-80104515:	89 e5                	mov    %esp,%ebp
-80104517:	56                   	push   %esi
-80104518:	53                   	push   %ebx
-80104519:	8b 75 08             	mov    0x8(%ebp),%esi
-8010451c:	31 db                	xor    %ebx,%ebx
+8010486f:	83 ec 0c             	sub    $0xc,%esp
+80104872:	68 06 7b 10 80       	push   $0x80107b06
+80104877:	e8 14 bb ff ff       	call   80100390 <panic>
+8010487c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104880 <holding>:
+{
+80104880:	f3 0f 1e fb          	endbr32 
+80104884:	55                   	push   %ebp
+80104885:	89 e5                	mov    %esp,%ebp
+80104887:	56                   	push   %esi
+80104888:	53                   	push   %ebx
+80104889:	8b 75 08             	mov    0x8(%ebp),%esi
+8010488c:	31 db                	xor    %ebx,%ebx
   pushcli();
-8010451e:	e8 3d ff ff ff       	call   80104460 <pushcli>
+8010488e:	e8 3d ff ff ff       	call   801047d0 <pushcli>
   r = lock->locked && lock->cpu == mycpu();
-80104523:	8b 06                	mov    (%esi),%eax
-80104525:	85 c0                	test   %eax,%eax
-80104527:	75 0f                	jne    80104538 <holding+0x28>
+80104893:	8b 06                	mov    (%esi),%eax
+80104895:	85 c0                	test   %eax,%eax
+80104897:	75 0f                	jne    801048a8 <holding+0x28>
   popcli();
-80104529:	e8 82 ff ff ff       	call   801044b0 <popcli>
+80104899:	e8 82 ff ff ff       	call   80104820 <popcli>
 }
-8010452e:	89 d8                	mov    %ebx,%eax
-80104530:	5b                   	pop    %ebx
-80104531:	5e                   	pop    %esi
-80104532:	5d                   	pop    %ebp
-80104533:	c3                   	ret    
-80104534:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010489e:	89 d8                	mov    %ebx,%eax
+801048a0:	5b                   	pop    %ebx
+801048a1:	5e                   	pop    %esi
+801048a2:	5d                   	pop    %ebp
+801048a3:	c3                   	ret    
+801048a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   r = lock->locked && lock->cpu == mycpu();
-80104538:	8b 5e 08             	mov    0x8(%esi),%ebx
-8010453b:	e8 90 f3 ff ff       	call   801038d0 <mycpu>
-80104540:	39 c3                	cmp    %eax,%ebx
-80104542:	0f 94 c3             	sete   %bl
+801048a8:	8b 5e 08             	mov    0x8(%esi),%ebx
+801048ab:	e8 20 f0 ff ff       	call   801038d0 <mycpu>
+801048b0:	39 c3                	cmp    %eax,%ebx
+801048b2:	0f 94 c3             	sete   %bl
   popcli();
-80104545:	e8 66 ff ff ff       	call   801044b0 <popcli>
+801048b5:	e8 66 ff ff ff       	call   80104820 <popcli>
   r = lock->locked && lock->cpu == mycpu();
-8010454a:	0f b6 db             	movzbl %bl,%ebx
+801048ba:	0f b6 db             	movzbl %bl,%ebx
 }
-8010454d:	89 d8                	mov    %ebx,%eax
-8010454f:	5b                   	pop    %ebx
-80104550:	5e                   	pop    %esi
-80104551:	5d                   	pop    %ebp
-80104552:	c3                   	ret    
-80104553:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010455a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80104560 <acquire>:
-{
-80104560:	f3 0f 1e fb          	endbr32 
-80104564:	55                   	push   %ebp
-80104565:	89 e5                	mov    %esp,%ebp
-80104567:	56                   	push   %esi
-80104568:	53                   	push   %ebx
+801048bd:	89 d8                	mov    %ebx,%eax
+801048bf:	5b                   	pop    %ebx
+801048c0:	5e                   	pop    %esi
+801048c1:	5d                   	pop    %ebp
+801048c2:	c3                   	ret    
+801048c3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801048ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801048d0 <acquire>:
+{
+801048d0:	f3 0f 1e fb          	endbr32 
+801048d4:	55                   	push   %ebp
+801048d5:	89 e5                	mov    %esp,%ebp
+801048d7:	56                   	push   %esi
+801048d8:	53                   	push   %ebx
   pushcli(); // disable interrupts to avoid deadlock.
-80104569:	e8 f2 fe ff ff       	call   80104460 <pushcli>
+801048d9:	e8 f2 fe ff ff       	call   801047d0 <pushcli>
   if(holding(lk))
-8010456e:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80104571:	83 ec 0c             	sub    $0xc,%esp
-80104574:	53                   	push   %ebx
-80104575:	e8 96 ff ff ff       	call   80104510 <holding>
-8010457a:	83 c4 10             	add    $0x10,%esp
-8010457d:	85 c0                	test   %eax,%eax
-8010457f:	0f 85 7f 00 00 00    	jne    80104604 <acquire+0xa4>
-80104585:	89 c6                	mov    %eax,%esi
+801048de:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801048e1:	83 ec 0c             	sub    $0xc,%esp
+801048e4:	53                   	push   %ebx
+801048e5:	e8 96 ff ff ff       	call   80104880 <holding>
+801048ea:	83 c4 10             	add    $0x10,%esp
+801048ed:	85 c0                	test   %eax,%eax
+801048ef:	0f 85 7f 00 00 00    	jne    80104974 <acquire+0xa4>
+801048f5:	89 c6                	mov    %eax,%esi
   asm volatile("lock; xchgl %0, %1" :
-80104587:	ba 01 00 00 00       	mov    $0x1,%edx
-8010458c:	eb 05                	jmp    80104593 <acquire+0x33>
-8010458e:	66 90                	xchg   %ax,%ax
-80104590:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80104593:	89 d0                	mov    %edx,%eax
-80104595:	f0 87 03             	lock xchg %eax,(%ebx)
+801048f7:	ba 01 00 00 00       	mov    $0x1,%edx
+801048fc:	eb 05                	jmp    80104903 <acquire+0x33>
+801048fe:	66 90                	xchg   %ax,%ax
+80104900:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104903:	89 d0                	mov    %edx,%eax
+80104905:	f0 87 03             	lock xchg %eax,(%ebx)
   while(xchg(&lk->locked, 1) != 0)
-80104598:	85 c0                	test   %eax,%eax
-8010459a:	75 f4                	jne    80104590 <acquire+0x30>
+80104908:	85 c0                	test   %eax,%eax
+8010490a:	75 f4                	jne    80104900 <acquire+0x30>
   __sync_synchronize();
-8010459c:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+8010490c:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
   lk->cpu = mycpu();
-801045a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
-801045a4:	e8 27 f3 ff ff       	call   801038d0 <mycpu>
-801045a9:	89 43 08             	mov    %eax,0x8(%ebx)
+80104911:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104914:	e8 b7 ef ff ff       	call   801038d0 <mycpu>
+80104919:	89 43 08             	mov    %eax,0x8(%ebx)
   ebp = (uint*)v - 2;
-801045ac:	89 e8                	mov    %ebp,%eax
-801045ae:	66 90                	xchg   %ax,%ax
+8010491c:	89 e8                	mov    %ebp,%eax
+8010491e:	66 90                	xchg   %ax,%ax
     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-801045b0:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
-801045b6:	81 fa fe ff ff 7f    	cmp    $0x7ffffffe,%edx
-801045bc:	77 22                	ja     801045e0 <acquire+0x80>
+80104920:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
+80104926:	81 fa fe ff ff 7f    	cmp    $0x7ffffffe,%edx
+8010492c:	77 22                	ja     80104950 <acquire+0x80>
     pcs[i] = ebp[1];     // saved %eip
-801045be:	8b 50 04             	mov    0x4(%eax),%edx
-801045c1:	89 54 b3 0c          	mov    %edx,0xc(%ebx,%esi,4)
+8010492e:	8b 50 04             	mov    0x4(%eax),%edx
+80104931:	89 54 b3 0c          	mov    %edx,0xc(%ebx,%esi,4)
   for(i = 0; i < 10; i++){
-801045c5:	83 c6 01             	add    $0x1,%esi
+80104935:	83 c6 01             	add    $0x1,%esi
     ebp = (uint*)ebp[0]; // saved %ebp
-801045c8:	8b 00                	mov    (%eax),%eax
+80104938:	8b 00                	mov    (%eax),%eax
   for(i = 0; i < 10; i++){
-801045ca:	83 fe 0a             	cmp    $0xa,%esi
-801045cd:	75 e1                	jne    801045b0 <acquire+0x50>
+8010493a:	83 fe 0a             	cmp    $0xa,%esi
+8010493d:	75 e1                	jne    80104920 <acquire+0x50>
 }
-801045cf:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801045d2:	5b                   	pop    %ebx
-801045d3:	5e                   	pop    %esi
-801045d4:	5d                   	pop    %ebp
-801045d5:	c3                   	ret    
-801045d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801045dd:	8d 76 00             	lea    0x0(%esi),%esi
+8010493f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104942:	5b                   	pop    %ebx
+80104943:	5e                   	pop    %esi
+80104944:	5d                   	pop    %ebp
+80104945:	c3                   	ret    
+80104946:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010494d:	8d 76 00             	lea    0x0(%esi),%esi
   for(; i < 10; i++)
-801045e0:	8d 44 b3 0c          	lea    0xc(%ebx,%esi,4),%eax
-801045e4:	83 c3 34             	add    $0x34,%ebx
-801045e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801045ee:	66 90                	xchg   %ax,%ax
+80104950:	8d 44 b3 0c          	lea    0xc(%ebx,%esi,4),%eax
+80104954:	83 c3 34             	add    $0x34,%ebx
+80104957:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010495e:	66 90                	xchg   %ax,%ax
     pcs[i] = 0;
-801045f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80104960:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   for(; i < 10; i++)
-801045f6:	83 c0 04             	add    $0x4,%eax
-801045f9:	39 d8                	cmp    %ebx,%eax
-801045fb:	75 f3                	jne    801045f0 <acquire+0x90>
-}
-801045fd:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104600:	5b                   	pop    %ebx
-80104601:	5e                   	pop    %esi
-80104602:	5d                   	pop    %ebp
-80104603:	c3                   	ret    
+80104966:	83 c0 04             	add    $0x4,%eax
+80104969:	39 d8                	cmp    %ebx,%eax
+8010496b:	75 f3                	jne    80104960 <acquire+0x90>
+}
+8010496d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104970:	5b                   	pop    %ebx
+80104971:	5e                   	pop    %esi
+80104972:	5d                   	pop    %ebp
+80104973:	c3                   	ret    
     panic("acquire");
-80104604:	83 ec 0c             	sub    $0xc,%esp
-80104607:	68 6d 77 10 80       	push   $0x8010776d
-8010460c:	e8 7f bd ff ff       	call   80100390 <panic>
-80104611:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104618:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010461f:	90                   	nop
-
-80104620 <release>:
-{
-80104620:	f3 0f 1e fb          	endbr32 
-80104624:	55                   	push   %ebp
-80104625:	89 e5                	mov    %esp,%ebp
-80104627:	53                   	push   %ebx
-80104628:	83 ec 10             	sub    $0x10,%esp
-8010462b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104974:	83 ec 0c             	sub    $0xc,%esp
+80104977:	68 0d 7b 10 80       	push   $0x80107b0d
+8010497c:	e8 0f ba ff ff       	call   80100390 <panic>
+80104981:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104988:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010498f:	90                   	nop
+
+80104990 <release>:
+{
+80104990:	f3 0f 1e fb          	endbr32 
+80104994:	55                   	push   %ebp
+80104995:	89 e5                	mov    %esp,%ebp
+80104997:	53                   	push   %ebx
+80104998:	83 ec 10             	sub    $0x10,%esp
+8010499b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(!holding(lk))
-8010462e:	53                   	push   %ebx
-8010462f:	e8 dc fe ff ff       	call   80104510 <holding>
-80104634:	83 c4 10             	add    $0x10,%esp
-80104637:	85 c0                	test   %eax,%eax
-80104639:	74 22                	je     8010465d <release+0x3d>
+8010499e:	53                   	push   %ebx
+8010499f:	e8 dc fe ff ff       	call   80104880 <holding>
+801049a4:	83 c4 10             	add    $0x10,%esp
+801049a7:	85 c0                	test   %eax,%eax
+801049a9:	74 22                	je     801049cd <release+0x3d>
   lk->pcs[0] = 0;
-8010463b:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+801049ab:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
   lk->cpu = 0;
-80104642:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+801049b2:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
   __sync_synchronize();
-80104649:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+801049b9:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
   asm volatile("movl $0, %0" : "+m" (lk->locked) : );
-8010464e:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+801049be:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
 }
-80104654:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104657:	c9                   	leave  
+801049c4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801049c7:	c9                   	leave  
   popcli();
-80104658:	e9 53 fe ff ff       	jmp    801044b0 <popcli>
+801049c8:	e9 53 fe ff ff       	jmp    80104820 <popcli>
     panic("release");
-8010465d:	83 ec 0c             	sub    $0xc,%esp
-80104660:	68 75 77 10 80       	push   $0x80107775
-80104665:	e8 26 bd ff ff       	call   80100390 <panic>
-8010466a:	66 90                	xchg   %ax,%ax
-8010466c:	66 90                	xchg   %ax,%ax
-8010466e:	66 90                	xchg   %ax,%ax
+801049cd:	83 ec 0c             	sub    $0xc,%esp
+801049d0:	68 15 7b 10 80       	push   $0x80107b15
+801049d5:	e8 b6 b9 ff ff       	call   80100390 <panic>
+801049da:	66 90                	xchg   %ax,%ax
+801049dc:	66 90                	xchg   %ax,%ax
+801049de:	66 90                	xchg   %ax,%ax
 
-80104670 <memset>:
+801049e0 <memset>:
 #include "types.h"
 #include "x86.h"
 
 void*
 memset(void *dst, int c, uint n)
 {
-80104670:	f3 0f 1e fb          	endbr32 
-80104674:	55                   	push   %ebp
-80104675:	89 e5                	mov    %esp,%ebp
-80104677:	57                   	push   %edi
-80104678:	8b 55 08             	mov    0x8(%ebp),%edx
-8010467b:	8b 4d 10             	mov    0x10(%ebp),%ecx
-8010467e:	53                   	push   %ebx
-8010467f:	8b 45 0c             	mov    0xc(%ebp),%eax
+801049e0:	f3 0f 1e fb          	endbr32 
+801049e4:	55                   	push   %ebp
+801049e5:	89 e5                	mov    %esp,%ebp
+801049e7:	57                   	push   %edi
+801049e8:	8b 55 08             	mov    0x8(%ebp),%edx
+801049eb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+801049ee:	53                   	push   %ebx
+801049ef:	8b 45 0c             	mov    0xc(%ebp),%eax
   if ((int)dst%4 == 0 && n%4 == 0){
-80104682:	89 d7                	mov    %edx,%edi
-80104684:	09 cf                	or     %ecx,%edi
-80104686:	83 e7 03             	and    $0x3,%edi
-80104689:	75 25                	jne    801046b0 <memset+0x40>
+801049f2:	89 d7                	mov    %edx,%edi
+801049f4:	09 cf                	or     %ecx,%edi
+801049f6:	83 e7 03             	and    $0x3,%edi
+801049f9:	75 25                	jne    80104a20 <memset+0x40>
     c &= 0xFF;
-8010468b:	0f b6 f8             	movzbl %al,%edi
+801049fb:	0f b6 f8             	movzbl %al,%edi
     stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
-8010468e:	c1 e0 18             	shl    $0x18,%eax
-80104691:	89 fb                	mov    %edi,%ebx
-80104693:	c1 e9 02             	shr    $0x2,%ecx
-80104696:	c1 e3 10             	shl    $0x10,%ebx
-80104699:	09 d8                	or     %ebx,%eax
-8010469b:	09 f8                	or     %edi,%eax
-8010469d:	c1 e7 08             	shl    $0x8,%edi
-801046a0:	09 f8                	or     %edi,%eax
+801049fe:	c1 e0 18             	shl    $0x18,%eax
+80104a01:	89 fb                	mov    %edi,%ebx
+80104a03:	c1 e9 02             	shr    $0x2,%ecx
+80104a06:	c1 e3 10             	shl    $0x10,%ebx
+80104a09:	09 d8                	or     %ebx,%eax
+80104a0b:	09 f8                	or     %edi,%eax
+80104a0d:	c1 e7 08             	shl    $0x8,%edi
+80104a10:	09 f8                	or     %edi,%eax
   asm volatile("cld; rep stosl" :
-801046a2:	89 d7                	mov    %edx,%edi
-801046a4:	fc                   	cld    
-801046a5:	f3 ab                	rep stos %eax,%es:(%edi)
+80104a12:	89 d7                	mov    %edx,%edi
+80104a14:	fc                   	cld    
+80104a15:	f3 ab                	rep stos %eax,%es:(%edi)
   } else
     stosb(dst, c, n);
   return dst;
 }
-801046a7:	5b                   	pop    %ebx
-801046a8:	89 d0                	mov    %edx,%eax
-801046aa:	5f                   	pop    %edi
-801046ab:	5d                   	pop    %ebp
-801046ac:	c3                   	ret    
-801046ad:	8d 76 00             	lea    0x0(%esi),%esi
+80104a17:	5b                   	pop    %ebx
+80104a18:	89 d0                	mov    %edx,%eax
+80104a1a:	5f                   	pop    %edi
+80104a1b:	5d                   	pop    %ebp
+80104a1c:	c3                   	ret    
+80104a1d:	8d 76 00             	lea    0x0(%esi),%esi
   asm volatile("cld; rep stosb" :
-801046b0:	89 d7                	mov    %edx,%edi
-801046b2:	fc                   	cld    
-801046b3:	f3 aa                	rep stos %al,%es:(%edi)
-801046b5:	5b                   	pop    %ebx
-801046b6:	89 d0                	mov    %edx,%eax
-801046b8:	5f                   	pop    %edi
-801046b9:	5d                   	pop    %ebp
-801046ba:	c3                   	ret    
-801046bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801046bf:	90                   	nop
+80104a20:	89 d7                	mov    %edx,%edi
+80104a22:	fc                   	cld    
+80104a23:	f3 aa                	rep stos %al,%es:(%edi)
+80104a25:	5b                   	pop    %ebx
+80104a26:	89 d0                	mov    %edx,%eax
+80104a28:	5f                   	pop    %edi
+80104a29:	5d                   	pop    %ebp
+80104a2a:	c3                   	ret    
+80104a2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104a2f:	90                   	nop
 
-801046c0 <memcmp>:
+80104a30 <memcmp>:
 
 int
 memcmp(const void *v1, const void *v2, uint n)
 {
-801046c0:	f3 0f 1e fb          	endbr32 
-801046c4:	55                   	push   %ebp
-801046c5:	89 e5                	mov    %esp,%ebp
-801046c7:	56                   	push   %esi
-801046c8:	8b 75 10             	mov    0x10(%ebp),%esi
-801046cb:	8b 55 08             	mov    0x8(%ebp),%edx
-801046ce:	53                   	push   %ebx
-801046cf:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104a30:	f3 0f 1e fb          	endbr32 
+80104a34:	55                   	push   %ebp
+80104a35:	89 e5                	mov    %esp,%ebp
+80104a37:	56                   	push   %esi
+80104a38:	8b 75 10             	mov    0x10(%ebp),%esi
+80104a3b:	8b 55 08             	mov    0x8(%ebp),%edx
+80104a3e:	53                   	push   %ebx
+80104a3f:	8b 45 0c             	mov    0xc(%ebp),%eax
   const uchar *s1, *s2;
 
   s1 = v1;
   s2 = v2;
   while(n-- > 0){
-801046d2:	85 f6                	test   %esi,%esi
-801046d4:	74 2a                	je     80104700 <memcmp+0x40>
-801046d6:	01 c6                	add    %eax,%esi
-801046d8:	eb 10                	jmp    801046ea <memcmp+0x2a>
-801046da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104a42:	85 f6                	test   %esi,%esi
+80104a44:	74 2a                	je     80104a70 <memcmp+0x40>
+80104a46:	01 c6                	add    %eax,%esi
+80104a48:	eb 10                	jmp    80104a5a <memcmp+0x2a>
+80104a4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(*s1 != *s2)
       return *s1 - *s2;
     s1++, s2++;
-801046e0:	83 c0 01             	add    $0x1,%eax
-801046e3:	83 c2 01             	add    $0x1,%edx
+80104a50:	83 c0 01             	add    $0x1,%eax
+80104a53:	83 c2 01             	add    $0x1,%edx
   while(n-- > 0){
-801046e6:	39 f0                	cmp    %esi,%eax
-801046e8:	74 16                	je     80104700 <memcmp+0x40>
+80104a56:	39 f0                	cmp    %esi,%eax
+80104a58:	74 16                	je     80104a70 <memcmp+0x40>
     if(*s1 != *s2)
-801046ea:	0f b6 0a             	movzbl (%edx),%ecx
-801046ed:	0f b6 18             	movzbl (%eax),%ebx
-801046f0:	38 d9                	cmp    %bl,%cl
-801046f2:	74 ec                	je     801046e0 <memcmp+0x20>
+80104a5a:	0f b6 0a             	movzbl (%edx),%ecx
+80104a5d:	0f b6 18             	movzbl (%eax),%ebx
+80104a60:	38 d9                	cmp    %bl,%cl
+80104a62:	74 ec                	je     80104a50 <memcmp+0x20>
       return *s1 - *s2;
-801046f4:	0f b6 c1             	movzbl %cl,%eax
-801046f7:	29 d8                	sub    %ebx,%eax
+80104a64:	0f b6 c1             	movzbl %cl,%eax
+80104a67:	29 d8                	sub    %ebx,%eax
   }
 
   return 0;
 }
-801046f9:	5b                   	pop    %ebx
-801046fa:	5e                   	pop    %esi
-801046fb:	5d                   	pop    %ebp
-801046fc:	c3                   	ret    
-801046fd:	8d 76 00             	lea    0x0(%esi),%esi
-80104700:	5b                   	pop    %ebx
+80104a69:	5b                   	pop    %ebx
+80104a6a:	5e                   	pop    %esi
+80104a6b:	5d                   	pop    %ebp
+80104a6c:	c3                   	ret    
+80104a6d:	8d 76 00             	lea    0x0(%esi),%esi
+80104a70:	5b                   	pop    %ebx
   return 0;
-80104701:	31 c0                	xor    %eax,%eax
+80104a71:	31 c0                	xor    %eax,%eax
 }
-80104703:	5e                   	pop    %esi
-80104704:	5d                   	pop    %ebp
-80104705:	c3                   	ret    
-80104706:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010470d:	8d 76 00             	lea    0x0(%esi),%esi
+80104a73:	5e                   	pop    %esi
+80104a74:	5d                   	pop    %ebp
+80104a75:	c3                   	ret    
+80104a76:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104a7d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104710 <memmove>:
+80104a80 <memmove>:
 
 void*
 memmove(void *dst, const void *src, uint n)
 {
-80104710:	f3 0f 1e fb          	endbr32 
-80104714:	55                   	push   %ebp
-80104715:	89 e5                	mov    %esp,%ebp
-80104717:	57                   	push   %edi
-80104718:	8b 55 08             	mov    0x8(%ebp),%edx
-8010471b:	8b 4d 10             	mov    0x10(%ebp),%ecx
-8010471e:	56                   	push   %esi
-8010471f:	8b 75 0c             	mov    0xc(%ebp),%esi
+80104a80:	f3 0f 1e fb          	endbr32 
+80104a84:	55                   	push   %ebp
+80104a85:	89 e5                	mov    %esp,%ebp
+80104a87:	57                   	push   %edi
+80104a88:	8b 55 08             	mov    0x8(%ebp),%edx
+80104a8b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80104a8e:	56                   	push   %esi
+80104a8f:	8b 75 0c             	mov    0xc(%ebp),%esi
   const char *s;
   char *d;
 
   s = src;
   d = dst;
   if(s < d && s + n > d){
-80104722:	39 d6                	cmp    %edx,%esi
-80104724:	73 2a                	jae    80104750 <memmove+0x40>
-80104726:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
-80104729:	39 fa                	cmp    %edi,%edx
-8010472b:	73 23                	jae    80104750 <memmove+0x40>
-8010472d:	8d 41 ff             	lea    -0x1(%ecx),%eax
+80104a92:	39 d6                	cmp    %edx,%esi
+80104a94:	73 2a                	jae    80104ac0 <memmove+0x40>
+80104a96:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
+80104a99:	39 fa                	cmp    %edi,%edx
+80104a9b:	73 23                	jae    80104ac0 <memmove+0x40>
+80104a9d:	8d 41 ff             	lea    -0x1(%ecx),%eax
     s += n;
     d += n;
     while(n-- > 0)
-80104730:	85 c9                	test   %ecx,%ecx
-80104732:	74 13                	je     80104747 <memmove+0x37>
-80104734:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104aa0:	85 c9                	test   %ecx,%ecx
+80104aa2:	74 13                	je     80104ab7 <memmove+0x37>
+80104aa4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       *--d = *--s;
-80104738:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
-8010473c:	88 0c 02             	mov    %cl,(%edx,%eax,1)
+80104aa8:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+80104aac:	88 0c 02             	mov    %cl,(%edx,%eax,1)
     while(n-- > 0)
-8010473f:	83 e8 01             	sub    $0x1,%eax
-80104742:	83 f8 ff             	cmp    $0xffffffff,%eax
-80104745:	75 f1                	jne    80104738 <memmove+0x28>
+80104aaf:	83 e8 01             	sub    $0x1,%eax
+80104ab2:	83 f8 ff             	cmp    $0xffffffff,%eax
+80104ab5:	75 f1                	jne    80104aa8 <memmove+0x28>
   } else
     while(n-- > 0)
       *d++ = *s++;
 
   return dst;
 }
-80104747:	5e                   	pop    %esi
-80104748:	89 d0                	mov    %edx,%eax
-8010474a:	5f                   	pop    %edi
-8010474b:	5d                   	pop    %ebp
-8010474c:	c3                   	ret    
-8010474d:	8d 76 00             	lea    0x0(%esi),%esi
+80104ab7:	5e                   	pop    %esi
+80104ab8:	89 d0                	mov    %edx,%eax
+80104aba:	5f                   	pop    %edi
+80104abb:	5d                   	pop    %ebp
+80104abc:	c3                   	ret    
+80104abd:	8d 76 00             	lea    0x0(%esi),%esi
     while(n-- > 0)
-80104750:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
-80104753:	89 d7                	mov    %edx,%edi
-80104755:	85 c9                	test   %ecx,%ecx
-80104757:	74 ee                	je     80104747 <memmove+0x37>
-80104759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104ac0:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
+80104ac3:	89 d7                	mov    %edx,%edi
+80104ac5:	85 c9                	test   %ecx,%ecx
+80104ac7:	74 ee                	je     80104ab7 <memmove+0x37>
+80104ac9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       *d++ = *s++;
-80104760:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+80104ad0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
     while(n-- > 0)
-80104761:	39 f0                	cmp    %esi,%eax
-80104763:	75 fb                	jne    80104760 <memmove+0x50>
+80104ad1:	39 f0                	cmp    %esi,%eax
+80104ad3:	75 fb                	jne    80104ad0 <memmove+0x50>
 }
-80104765:	5e                   	pop    %esi
-80104766:	89 d0                	mov    %edx,%eax
-80104768:	5f                   	pop    %edi
-80104769:	5d                   	pop    %ebp
-8010476a:	c3                   	ret    
-8010476b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010476f:	90                   	nop
+80104ad5:	5e                   	pop    %esi
+80104ad6:	89 d0                	mov    %edx,%eax
+80104ad8:	5f                   	pop    %edi
+80104ad9:	5d                   	pop    %ebp
+80104ada:	c3                   	ret    
+80104adb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104adf:	90                   	nop
 
-80104770 <memcpy>:
+80104ae0 <memcpy>:
 
 // memcpy exists to placate GCC.  Use memmove.
 void*
 memcpy(void *dst, const void *src, uint n)
 {
-80104770:	f3 0f 1e fb          	endbr32 
+80104ae0:	f3 0f 1e fb          	endbr32 
   return memmove(dst, src, n);
-80104774:	eb 9a                	jmp    80104710 <memmove>
-80104776:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010477d:	8d 76 00             	lea    0x0(%esi),%esi
+80104ae4:	eb 9a                	jmp    80104a80 <memmove>
+80104ae6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104aed:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104780 <strncmp>:
+80104af0 <strncmp>:
 }
 
 int
 strncmp(const char *p, const char *q, uint n)
 {
-80104780:	f3 0f 1e fb          	endbr32 
-80104784:	55                   	push   %ebp
-80104785:	89 e5                	mov    %esp,%ebp
-80104787:	56                   	push   %esi
-80104788:	8b 75 10             	mov    0x10(%ebp),%esi
-8010478b:	8b 4d 08             	mov    0x8(%ebp),%ecx
-8010478e:	53                   	push   %ebx
-8010478f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104af0:	f3 0f 1e fb          	endbr32 
+80104af4:	55                   	push   %ebp
+80104af5:	89 e5                	mov    %esp,%ebp
+80104af7:	56                   	push   %esi
+80104af8:	8b 75 10             	mov    0x10(%ebp),%esi
+80104afb:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80104afe:	53                   	push   %ebx
+80104aff:	8b 45 0c             	mov    0xc(%ebp),%eax
   while(n > 0 && *p && *p == *q)
-80104792:	85 f6                	test   %esi,%esi
-80104794:	74 32                	je     801047c8 <strncmp+0x48>
-80104796:	01 c6                	add    %eax,%esi
-80104798:	eb 14                	jmp    801047ae <strncmp+0x2e>
-8010479a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-801047a0:	38 da                	cmp    %bl,%dl
-801047a2:	75 14                	jne    801047b8 <strncmp+0x38>
+80104b02:	85 f6                	test   %esi,%esi
+80104b04:	74 32                	je     80104b38 <strncmp+0x48>
+80104b06:	01 c6                	add    %eax,%esi
+80104b08:	eb 14                	jmp    80104b1e <strncmp+0x2e>
+80104b0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104b10:	38 da                	cmp    %bl,%dl
+80104b12:	75 14                	jne    80104b28 <strncmp+0x38>
     n--, p++, q++;
-801047a4:	83 c0 01             	add    $0x1,%eax
-801047a7:	83 c1 01             	add    $0x1,%ecx
+80104b14:	83 c0 01             	add    $0x1,%eax
+80104b17:	83 c1 01             	add    $0x1,%ecx
   while(n > 0 && *p && *p == *q)
-801047aa:	39 f0                	cmp    %esi,%eax
-801047ac:	74 1a                	je     801047c8 <strncmp+0x48>
-801047ae:	0f b6 11             	movzbl (%ecx),%edx
-801047b1:	0f b6 18             	movzbl (%eax),%ebx
-801047b4:	84 d2                	test   %dl,%dl
-801047b6:	75 e8                	jne    801047a0 <strncmp+0x20>
+80104b1a:	39 f0                	cmp    %esi,%eax
+80104b1c:	74 1a                	je     80104b38 <strncmp+0x48>
+80104b1e:	0f b6 11             	movzbl (%ecx),%edx
+80104b21:	0f b6 18             	movzbl (%eax),%ebx
+80104b24:	84 d2                	test   %dl,%dl
+80104b26:	75 e8                	jne    80104b10 <strncmp+0x20>
   if(n == 0)
     return 0;
   return (uchar)*p - (uchar)*q;
-801047b8:	0f b6 c2             	movzbl %dl,%eax
-801047bb:	29 d8                	sub    %ebx,%eax
+80104b28:	0f b6 c2             	movzbl %dl,%eax
+80104b2b:	29 d8                	sub    %ebx,%eax
 }
-801047bd:	5b                   	pop    %ebx
-801047be:	5e                   	pop    %esi
-801047bf:	5d                   	pop    %ebp
-801047c0:	c3                   	ret    
-801047c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801047c8:	5b                   	pop    %ebx
+80104b2d:	5b                   	pop    %ebx
+80104b2e:	5e                   	pop    %esi
+80104b2f:	5d                   	pop    %ebp
+80104b30:	c3                   	ret    
+80104b31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104b38:	5b                   	pop    %ebx
     return 0;
-801047c9:	31 c0                	xor    %eax,%eax
+80104b39:	31 c0                	xor    %eax,%eax
 }
-801047cb:	5e                   	pop    %esi
-801047cc:	5d                   	pop    %ebp
-801047cd:	c3                   	ret    
-801047ce:	66 90                	xchg   %ax,%ax
+80104b3b:	5e                   	pop    %esi
+80104b3c:	5d                   	pop    %ebp
+80104b3d:	c3                   	ret    
+80104b3e:	66 90                	xchg   %ax,%ax
 
-801047d0 <strncpy>:
+80104b40 <strncpy>:
 
 char*
 strncpy(char *s, const char *t, int n)
 {
-801047d0:	f3 0f 1e fb          	endbr32 
-801047d4:	55                   	push   %ebp
-801047d5:	89 e5                	mov    %esp,%ebp
-801047d7:	57                   	push   %edi
-801047d8:	56                   	push   %esi
-801047d9:	8b 75 08             	mov    0x8(%ebp),%esi
-801047dc:	53                   	push   %ebx
-801047dd:	8b 45 10             	mov    0x10(%ebp),%eax
+80104b40:	f3 0f 1e fb          	endbr32 
+80104b44:	55                   	push   %ebp
+80104b45:	89 e5                	mov    %esp,%ebp
+80104b47:	57                   	push   %edi
+80104b48:	56                   	push   %esi
+80104b49:	8b 75 08             	mov    0x8(%ebp),%esi
+80104b4c:	53                   	push   %ebx
+80104b4d:	8b 45 10             	mov    0x10(%ebp),%eax
   char *os;
 
   os = s;
   while(n-- > 0 && (*s++ = *t++) != 0)
-801047e0:	89 f2                	mov    %esi,%edx
-801047e2:	eb 1b                	jmp    801047ff <strncpy+0x2f>
-801047e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801047e8:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-801047ec:	8b 7d 0c             	mov    0xc(%ebp),%edi
-801047ef:	83 c2 01             	add    $0x1,%edx
-801047f2:	0f b6 7f ff          	movzbl -0x1(%edi),%edi
-801047f6:	89 f9                	mov    %edi,%ecx
-801047f8:	88 4a ff             	mov    %cl,-0x1(%edx)
-801047fb:	84 c9                	test   %cl,%cl
-801047fd:	74 09                	je     80104808 <strncpy+0x38>
-801047ff:	89 c3                	mov    %eax,%ebx
-80104801:	83 e8 01             	sub    $0x1,%eax
-80104804:	85 db                	test   %ebx,%ebx
-80104806:	7f e0                	jg     801047e8 <strncpy+0x18>
+80104b50:	89 f2                	mov    %esi,%edx
+80104b52:	eb 1b                	jmp    80104b6f <strncpy+0x2f>
+80104b54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104b58:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+80104b5c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+80104b5f:	83 c2 01             	add    $0x1,%edx
+80104b62:	0f b6 7f ff          	movzbl -0x1(%edi),%edi
+80104b66:	89 f9                	mov    %edi,%ecx
+80104b68:	88 4a ff             	mov    %cl,-0x1(%edx)
+80104b6b:	84 c9                	test   %cl,%cl
+80104b6d:	74 09                	je     80104b78 <strncpy+0x38>
+80104b6f:	89 c3                	mov    %eax,%ebx
+80104b71:	83 e8 01             	sub    $0x1,%eax
+80104b74:	85 db                	test   %ebx,%ebx
+80104b76:	7f e0                	jg     80104b58 <strncpy+0x18>
     ;
   while(n-- > 0)
-80104808:	89 d1                	mov    %edx,%ecx
-8010480a:	85 c0                	test   %eax,%eax
-8010480c:	7e 15                	jle    80104823 <strncpy+0x53>
-8010480e:	66 90                	xchg   %ax,%ax
+80104b78:	89 d1                	mov    %edx,%ecx
+80104b7a:	85 c0                	test   %eax,%eax
+80104b7c:	7e 15                	jle    80104b93 <strncpy+0x53>
+80104b7e:	66 90                	xchg   %ax,%ax
     *s++ = 0;
-80104810:	83 c1 01             	add    $0x1,%ecx
-80104813:	c6 41 ff 00          	movb   $0x0,-0x1(%ecx)
+80104b80:	83 c1 01             	add    $0x1,%ecx
+80104b83:	c6 41 ff 00          	movb   $0x0,-0x1(%ecx)
   while(n-- > 0)
-80104817:	89 c8                	mov    %ecx,%eax
-80104819:	f7 d0                	not    %eax
-8010481b:	01 d0                	add    %edx,%eax
-8010481d:	01 d8                	add    %ebx,%eax
-8010481f:	85 c0                	test   %eax,%eax
-80104821:	7f ed                	jg     80104810 <strncpy+0x40>
+80104b87:	89 c8                	mov    %ecx,%eax
+80104b89:	f7 d0                	not    %eax
+80104b8b:	01 d0                	add    %edx,%eax
+80104b8d:	01 d8                	add    %ebx,%eax
+80104b8f:	85 c0                	test   %eax,%eax
+80104b91:	7f ed                	jg     80104b80 <strncpy+0x40>
   return os;
 }
-80104823:	5b                   	pop    %ebx
-80104824:	89 f0                	mov    %esi,%eax
-80104826:	5e                   	pop    %esi
-80104827:	5f                   	pop    %edi
-80104828:	5d                   	pop    %ebp
-80104829:	c3                   	ret    
-8010482a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104b93:	5b                   	pop    %ebx
+80104b94:	89 f0                	mov    %esi,%eax
+80104b96:	5e                   	pop    %esi
+80104b97:	5f                   	pop    %edi
+80104b98:	5d                   	pop    %ebp
+80104b99:	c3                   	ret    
+80104b9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104830 <safestrcpy>:
+80104ba0 <safestrcpy>:
 
 // Like strncpy but guaranteed to NUL-terminate.
 char*
 safestrcpy(char *s, const char *t, int n)
 {
-80104830:	f3 0f 1e fb          	endbr32 
-80104834:	55                   	push   %ebp
-80104835:	89 e5                	mov    %esp,%ebp
-80104837:	56                   	push   %esi
-80104838:	8b 55 10             	mov    0x10(%ebp),%edx
-8010483b:	8b 75 08             	mov    0x8(%ebp),%esi
-8010483e:	53                   	push   %ebx
-8010483f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104ba0:	f3 0f 1e fb          	endbr32 
+80104ba4:	55                   	push   %ebp
+80104ba5:	89 e5                	mov    %esp,%ebp
+80104ba7:	56                   	push   %esi
+80104ba8:	8b 55 10             	mov    0x10(%ebp),%edx
+80104bab:	8b 75 08             	mov    0x8(%ebp),%esi
+80104bae:	53                   	push   %ebx
+80104baf:	8b 45 0c             	mov    0xc(%ebp),%eax
   char *os;
 
   os = s;
   if(n <= 0)
-80104842:	85 d2                	test   %edx,%edx
-80104844:	7e 21                	jle    80104867 <safestrcpy+0x37>
-80104846:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
-8010484a:	89 f2                	mov    %esi,%edx
-8010484c:	eb 12                	jmp    80104860 <safestrcpy+0x30>
-8010484e:	66 90                	xchg   %ax,%ax
+80104bb2:	85 d2                	test   %edx,%edx
+80104bb4:	7e 21                	jle    80104bd7 <safestrcpy+0x37>
+80104bb6:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
+80104bba:	89 f2                	mov    %esi,%edx
+80104bbc:	eb 12                	jmp    80104bd0 <safestrcpy+0x30>
+80104bbe:	66 90                	xchg   %ax,%ax
     return os;
   while(--n > 0 && (*s++ = *t++) != 0)
-80104850:	0f b6 08             	movzbl (%eax),%ecx
-80104853:	83 c0 01             	add    $0x1,%eax
-80104856:	83 c2 01             	add    $0x1,%edx
-80104859:	88 4a ff             	mov    %cl,-0x1(%edx)
-8010485c:	84 c9                	test   %cl,%cl
-8010485e:	74 04                	je     80104864 <safestrcpy+0x34>
-80104860:	39 d8                	cmp    %ebx,%eax
-80104862:	75 ec                	jne    80104850 <safestrcpy+0x20>
+80104bc0:	0f b6 08             	movzbl (%eax),%ecx
+80104bc3:	83 c0 01             	add    $0x1,%eax
+80104bc6:	83 c2 01             	add    $0x1,%edx
+80104bc9:	88 4a ff             	mov    %cl,-0x1(%edx)
+80104bcc:	84 c9                	test   %cl,%cl
+80104bce:	74 04                	je     80104bd4 <safestrcpy+0x34>
+80104bd0:	39 d8                	cmp    %ebx,%eax
+80104bd2:	75 ec                	jne    80104bc0 <safestrcpy+0x20>
     ;
   *s = 0;
-80104864:	c6 02 00             	movb   $0x0,(%edx)
+80104bd4:	c6 02 00             	movb   $0x0,(%edx)
   return os;
 }
-80104867:	89 f0                	mov    %esi,%eax
-80104869:	5b                   	pop    %ebx
-8010486a:	5e                   	pop    %esi
-8010486b:	5d                   	pop    %ebp
-8010486c:	c3                   	ret    
-8010486d:	8d 76 00             	lea    0x0(%esi),%esi
+80104bd7:	89 f0                	mov    %esi,%eax
+80104bd9:	5b                   	pop    %ebx
+80104bda:	5e                   	pop    %esi
+80104bdb:	5d                   	pop    %ebp
+80104bdc:	c3                   	ret    
+80104bdd:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104870 <strlen>:
+80104be0 <strlen>:
 
 int
 strlen(const char *s)
 {
-80104870:	f3 0f 1e fb          	endbr32 
-80104874:	55                   	push   %ebp
+80104be0:	f3 0f 1e fb          	endbr32 
+80104be4:	55                   	push   %ebp
   int n;
 
   for(n = 0; s[n]; n++)
-80104875:	31 c0                	xor    %eax,%eax
+80104be5:	31 c0                	xor    %eax,%eax
 {
-80104877:	89 e5                	mov    %esp,%ebp
-80104879:	8b 55 08             	mov    0x8(%ebp),%edx
+80104be7:	89 e5                	mov    %esp,%ebp
+80104be9:	8b 55 08             	mov    0x8(%ebp),%edx
   for(n = 0; s[n]; n++)
-8010487c:	80 3a 00             	cmpb   $0x0,(%edx)
-8010487f:	74 10                	je     80104891 <strlen+0x21>
-80104881:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104888:	83 c0 01             	add    $0x1,%eax
-8010488b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
-8010488f:	75 f7                	jne    80104888 <strlen+0x18>
+80104bec:	80 3a 00             	cmpb   $0x0,(%edx)
+80104bef:	74 10                	je     80104c01 <strlen+0x21>
+80104bf1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104bf8:	83 c0 01             	add    $0x1,%eax
+80104bfb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+80104bff:	75 f7                	jne    80104bf8 <strlen+0x18>
     ;
   return n;
 }
-80104891:	5d                   	pop    %ebp
-80104892:	c3                   	ret    
+80104c01:	5d                   	pop    %ebp
+80104c02:	c3                   	ret    
 
-80104893 <swtch>:
+80104c03 <swtch>:
 # a struct context, and save its address in *old.
 # Switch stacks to new and pop previously-saved registers.
 
 .globl swtch
 swtch:
   movl 4(%esp), %eax
-80104893:	8b 44 24 04          	mov    0x4(%esp),%eax
+80104c03:	8b 44 24 04          	mov    0x4(%esp),%eax
   movl 8(%esp), %edx
-80104897:	8b 54 24 08          	mov    0x8(%esp),%edx
+80104c07:	8b 54 24 08          	mov    0x8(%esp),%edx
 
   # Save old callee-saved registers
   pushl %ebp
-8010489b:	55                   	push   %ebp
+80104c0b:	55                   	push   %ebp
   pushl %ebx
-8010489c:	53                   	push   %ebx
+80104c0c:	53                   	push   %ebx
   pushl %esi
-8010489d:	56                   	push   %esi
+80104c0d:	56                   	push   %esi
   pushl %edi
-8010489e:	57                   	push   %edi
+80104c0e:	57                   	push   %edi
 
   # Switch stacks
   movl %esp, (%eax)
-8010489f:	89 20                	mov    %esp,(%eax)
+80104c0f:	89 20                	mov    %esp,(%eax)
   movl %edx, %esp
-801048a1:	89 d4                	mov    %edx,%esp
+80104c11:	89 d4                	mov    %edx,%esp
 
   # Load new callee-saved registers
   popl %edi
-801048a3:	5f                   	pop    %edi
+80104c13:	5f                   	pop    %edi
   popl %esi
-801048a4:	5e                   	pop    %esi
+80104c14:	5e                   	pop    %esi
   popl %ebx
-801048a5:	5b                   	pop    %ebx
+80104c15:	5b                   	pop    %ebx
   popl %ebp
-801048a6:	5d                   	pop    %ebp
+80104c16:	5d                   	pop    %ebp
   ret
-801048a7:	c3                   	ret    
-801048a8:	66 90                	xchg   %ax,%ax
-801048aa:	66 90                	xchg   %ax,%ax
-801048ac:	66 90                	xchg   %ax,%ax
-801048ae:	66 90                	xchg   %ax,%ax
+80104c17:	c3                   	ret    
+80104c18:	66 90                	xchg   %ax,%ax
+80104c1a:	66 90                	xchg   %ax,%ax
+80104c1c:	66 90                	xchg   %ax,%ax
+80104c1e:	66 90                	xchg   %ax,%ax
 
-801048b0 <fetchint>:
+80104c20 <fetchint>:
 // to a saved program counter, and then the first argument.
 
 // Fetch the int at addr from the current process.
 int
 fetchint(uint addr, int *ip)
 {
-801048b0:	f3 0f 1e fb          	endbr32 
-801048b4:	55                   	push   %ebp
-801048b5:	89 e5                	mov    %esp,%ebp
-801048b7:	53                   	push   %ebx
-801048b8:	83 ec 04             	sub    $0x4,%esp
-801048bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104c20:	f3 0f 1e fb          	endbr32 
+80104c24:	55                   	push   %ebp
+80104c25:	89 e5                	mov    %esp,%ebp
+80104c27:	53                   	push   %ebx
+80104c28:	83 ec 04             	sub    $0x4,%esp
+80104c2b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct proc *curproc = myproc();
-801048be:	e8 9d f0 ff ff       	call   80103960 <myproc>
+80104c2e:	e8 2d ed ff ff       	call   80103960 <myproc>
 
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-801048c3:	8b 00                	mov    (%eax),%eax
-801048c5:	39 d8                	cmp    %ebx,%eax
-801048c7:	76 17                	jbe    801048e0 <fetchint+0x30>
-801048c9:	8d 53 04             	lea    0x4(%ebx),%edx
-801048cc:	39 d0                	cmp    %edx,%eax
-801048ce:	72 10                	jb     801048e0 <fetchint+0x30>
+80104c33:	8b 00                	mov    (%eax),%eax
+80104c35:	39 d8                	cmp    %ebx,%eax
+80104c37:	76 17                	jbe    80104c50 <fetchint+0x30>
+80104c39:	8d 53 04             	lea    0x4(%ebx),%edx
+80104c3c:	39 d0                	cmp    %edx,%eax
+80104c3e:	72 10                	jb     80104c50 <fetchint+0x30>
     return -1;
   *ip = *(int*)(addr);
-801048d0:	8b 45 0c             	mov    0xc(%ebp),%eax
-801048d3:	8b 13                	mov    (%ebx),%edx
-801048d5:	89 10                	mov    %edx,(%eax)
+80104c40:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104c43:	8b 13                	mov    (%ebx),%edx
+80104c45:	89 10                	mov    %edx,(%eax)
   return 0;
-801048d7:	31 c0                	xor    %eax,%eax
+80104c47:	31 c0                	xor    %eax,%eax
 }
-801048d9:	83 c4 04             	add    $0x4,%esp
-801048dc:	5b                   	pop    %ebx
-801048dd:	5d                   	pop    %ebp
-801048de:	c3                   	ret    
-801048df:	90                   	nop
-    return -1;
-801048e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801048e5:	eb f2                	jmp    801048d9 <fetchint+0x29>
-801048e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801048ee:	66 90                	xchg   %ax,%ax
+80104c49:	83 c4 04             	add    $0x4,%esp
+80104c4c:	5b                   	pop    %ebx
+80104c4d:	5d                   	pop    %ebp
+80104c4e:	c3                   	ret    
+80104c4f:	90                   	nop
+    return -1;
+80104c50:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104c55:	eb f2                	jmp    80104c49 <fetchint+0x29>
+80104c57:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104c5e:	66 90                	xchg   %ax,%ax
 
-801048f0 <fetchstr>:
+80104c60 <fetchstr>:
 // Fetch the nul-terminated string at addr from the current process.
 // Doesn't actually copy the string - just sets *pp to point at it.
 // Returns length of string, not including nul.
 int
 fetchstr(uint addr, char **pp)
 {
-801048f0:	f3 0f 1e fb          	endbr32 
-801048f4:	55                   	push   %ebp
-801048f5:	89 e5                	mov    %esp,%ebp
-801048f7:	53                   	push   %ebx
-801048f8:	83 ec 04             	sub    $0x4,%esp
-801048fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104c60:	f3 0f 1e fb          	endbr32 
+80104c64:	55                   	push   %ebp
+80104c65:	89 e5                	mov    %esp,%ebp
+80104c67:	53                   	push   %ebx
+80104c68:	83 ec 04             	sub    $0x4,%esp
+80104c6b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   char *s, *ep;
   struct proc *curproc = myproc();
-801048fe:	e8 5d f0 ff ff       	call   80103960 <myproc>
+80104c6e:	e8 ed ec ff ff       	call   80103960 <myproc>
 
   if(addr >= curproc->sz)
-80104903:	39 18                	cmp    %ebx,(%eax)
-80104905:	76 31                	jbe    80104938 <fetchstr+0x48>
+80104c73:	39 18                	cmp    %ebx,(%eax)
+80104c75:	76 31                	jbe    80104ca8 <fetchstr+0x48>
     return -1;
   *pp = (char*)addr;
-80104907:	8b 55 0c             	mov    0xc(%ebp),%edx
-8010490a:	89 1a                	mov    %ebx,(%edx)
+80104c77:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104c7a:	89 1a                	mov    %ebx,(%edx)
   ep = (char*)curproc->sz;
-8010490c:	8b 10                	mov    (%eax),%edx
+80104c7c:	8b 10                	mov    (%eax),%edx
   for(s = *pp; s < ep; s++){
-8010490e:	39 d3                	cmp    %edx,%ebx
-80104910:	73 26                	jae    80104938 <fetchstr+0x48>
-80104912:	89 d8                	mov    %ebx,%eax
-80104914:	eb 11                	jmp    80104927 <fetchstr+0x37>
-80104916:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010491d:	8d 76 00             	lea    0x0(%esi),%esi
-80104920:	83 c0 01             	add    $0x1,%eax
-80104923:	39 c2                	cmp    %eax,%edx
-80104925:	76 11                	jbe    80104938 <fetchstr+0x48>
+80104c7e:	39 d3                	cmp    %edx,%ebx
+80104c80:	73 26                	jae    80104ca8 <fetchstr+0x48>
+80104c82:	89 d8                	mov    %ebx,%eax
+80104c84:	eb 11                	jmp    80104c97 <fetchstr+0x37>
+80104c86:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104c8d:	8d 76 00             	lea    0x0(%esi),%esi
+80104c90:	83 c0 01             	add    $0x1,%eax
+80104c93:	39 c2                	cmp    %eax,%edx
+80104c95:	76 11                	jbe    80104ca8 <fetchstr+0x48>
     if(*s == 0)
-80104927:	80 38 00             	cmpb   $0x0,(%eax)
-8010492a:	75 f4                	jne    80104920 <fetchstr+0x30>
+80104c97:	80 38 00             	cmpb   $0x0,(%eax)
+80104c9a:	75 f4                	jne    80104c90 <fetchstr+0x30>
       return s - *pp;
   }
   return -1;
 }
-8010492c:	83 c4 04             	add    $0x4,%esp
+80104c9c:	83 c4 04             	add    $0x4,%esp
       return s - *pp;
-8010492f:	29 d8                	sub    %ebx,%eax
+80104c9f:	29 d8                	sub    %ebx,%eax
 }
-80104931:	5b                   	pop    %ebx
-80104932:	5d                   	pop    %ebp
-80104933:	c3                   	ret    
-80104934:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104938:	83 c4 04             	add    $0x4,%esp
-    return -1;
-8010493b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104940:	5b                   	pop    %ebx
-80104941:	5d                   	pop    %ebp
-80104942:	c3                   	ret    
-80104943:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010494a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104ca1:	5b                   	pop    %ebx
+80104ca2:	5d                   	pop    %ebp
+80104ca3:	c3                   	ret    
+80104ca4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104ca8:	83 c4 04             	add    $0x4,%esp
+    return -1;
+80104cab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104cb0:	5b                   	pop    %ebx
+80104cb1:	5d                   	pop    %ebp
+80104cb2:	c3                   	ret    
+80104cb3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104cba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104950 <argint>:
+80104cc0 <argint>:
 
 // Fetch the nth 32-bit system call argument.
 int
 argint(int n, int *ip)
 {
-80104950:	f3 0f 1e fb          	endbr32 
-80104954:	55                   	push   %ebp
-80104955:	89 e5                	mov    %esp,%ebp
-80104957:	56                   	push   %esi
-80104958:	53                   	push   %ebx
+80104cc0:	f3 0f 1e fb          	endbr32 
+80104cc4:	55                   	push   %ebp
+80104cc5:	89 e5                	mov    %esp,%ebp
+80104cc7:	56                   	push   %esi
+80104cc8:	53                   	push   %ebx
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104959:	e8 02 f0 ff ff       	call   80103960 <myproc>
-8010495e:	8b 55 08             	mov    0x8(%ebp),%edx
-80104961:	8b 40 18             	mov    0x18(%eax),%eax
-80104964:	8b 40 44             	mov    0x44(%eax),%eax
-80104967:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+80104cc9:	e8 92 ec ff ff       	call   80103960 <myproc>
+80104cce:	8b 55 08             	mov    0x8(%ebp),%edx
+80104cd1:	8b 40 1c             	mov    0x1c(%eax),%eax
+80104cd4:	8b 40 44             	mov    0x44(%eax),%eax
+80104cd7:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
   struct proc *curproc = myproc();
-8010496a:	e8 f1 ef ff ff       	call   80103960 <myproc>
+80104cda:	e8 81 ec ff ff       	call   80103960 <myproc>
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-8010496f:	8d 73 04             	lea    0x4(%ebx),%esi
+80104cdf:	8d 73 04             	lea    0x4(%ebx),%esi
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-80104972:	8b 00                	mov    (%eax),%eax
-80104974:	39 c6                	cmp    %eax,%esi
-80104976:	73 18                	jae    80104990 <argint+0x40>
-80104978:	8d 53 08             	lea    0x8(%ebx),%edx
-8010497b:	39 d0                	cmp    %edx,%eax
-8010497d:	72 11                	jb     80104990 <argint+0x40>
+80104ce2:	8b 00                	mov    (%eax),%eax
+80104ce4:	39 c6                	cmp    %eax,%esi
+80104ce6:	73 18                	jae    80104d00 <argint+0x40>
+80104ce8:	8d 53 08             	lea    0x8(%ebx),%edx
+80104ceb:	39 d0                	cmp    %edx,%eax
+80104ced:	72 11                	jb     80104d00 <argint+0x40>
   *ip = *(int*)(addr);
-8010497f:	8b 45 0c             	mov    0xc(%ebp),%eax
-80104982:	8b 53 04             	mov    0x4(%ebx),%edx
-80104985:	89 10                	mov    %edx,(%eax)
+80104cef:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104cf2:	8b 53 04             	mov    0x4(%ebx),%edx
+80104cf5:	89 10                	mov    %edx,(%eax)
   return 0;
-80104987:	31 c0                	xor    %eax,%eax
+80104cf7:	31 c0                	xor    %eax,%eax
 }
-80104989:	5b                   	pop    %ebx
-8010498a:	5e                   	pop    %esi
-8010498b:	5d                   	pop    %ebp
-8010498c:	c3                   	ret    
-8010498d:	8d 76 00             	lea    0x0(%esi),%esi
+80104cf9:	5b                   	pop    %ebx
+80104cfa:	5e                   	pop    %esi
+80104cfb:	5d                   	pop    %ebp
+80104cfc:	c3                   	ret    
+80104cfd:	8d 76 00             	lea    0x0(%esi),%esi
     return -1;
-80104990:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104d00:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104995:	eb f2                	jmp    80104989 <argint+0x39>
-80104997:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010499e:	66 90                	xchg   %ax,%ax
+80104d05:	eb f2                	jmp    80104cf9 <argint+0x39>
+80104d07:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104d0e:	66 90                	xchg   %ax,%ax
 
-801049a0 <argptr>:
+80104d10 <argptr>:
 // Fetch the nth word-sized system call argument as a pointer
 // to a block of memory of size bytes.  Check that the pointer
 // lies within the process address space.
 int
 argptr(int n, char **pp, int size)
 {
-801049a0:	f3 0f 1e fb          	endbr32 
-801049a4:	55                   	push   %ebp
-801049a5:	89 e5                	mov    %esp,%ebp
-801049a7:	56                   	push   %esi
-801049a8:	53                   	push   %ebx
-801049a9:	83 ec 10             	sub    $0x10,%esp
-801049ac:	8b 5d 10             	mov    0x10(%ebp),%ebx
+80104d10:	f3 0f 1e fb          	endbr32 
+80104d14:	55                   	push   %ebp
+80104d15:	89 e5                	mov    %esp,%ebp
+80104d17:	56                   	push   %esi
+80104d18:	53                   	push   %ebx
+80104d19:	83 ec 10             	sub    $0x10,%esp
+80104d1c:	8b 5d 10             	mov    0x10(%ebp),%ebx
   int i;
   struct proc *curproc = myproc();
-801049af:	e8 ac ef ff ff       	call   80103960 <myproc>
+80104d1f:	e8 3c ec ff ff       	call   80103960 <myproc>
  
   if(argint(n, &i) < 0)
-801049b4:	83 ec 08             	sub    $0x8,%esp
+80104d24:	83 ec 08             	sub    $0x8,%esp
   struct proc *curproc = myproc();
-801049b7:	89 c6                	mov    %eax,%esi
+80104d27:	89 c6                	mov    %eax,%esi
   if(argint(n, &i) < 0)
-801049b9:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801049bc:	50                   	push   %eax
-801049bd:	ff 75 08             	pushl  0x8(%ebp)
-801049c0:	e8 8b ff ff ff       	call   80104950 <argint>
+80104d29:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104d2c:	50                   	push   %eax
+80104d2d:	ff 75 08             	pushl  0x8(%ebp)
+80104d30:	e8 8b ff ff ff       	call   80104cc0 <argint>
     return -1;
   if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
-801049c5:	83 c4 10             	add    $0x10,%esp
-801049c8:	85 c0                	test   %eax,%eax
-801049ca:	78 24                	js     801049f0 <argptr+0x50>
-801049cc:	85 db                	test   %ebx,%ebx
-801049ce:	78 20                	js     801049f0 <argptr+0x50>
-801049d0:	8b 16                	mov    (%esi),%edx
-801049d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801049d5:	39 c2                	cmp    %eax,%edx
-801049d7:	76 17                	jbe    801049f0 <argptr+0x50>
-801049d9:	01 c3                	add    %eax,%ebx
-801049db:	39 da                	cmp    %ebx,%edx
-801049dd:	72 11                	jb     801049f0 <argptr+0x50>
+80104d35:	83 c4 10             	add    $0x10,%esp
+80104d38:	85 c0                	test   %eax,%eax
+80104d3a:	78 24                	js     80104d60 <argptr+0x50>
+80104d3c:	85 db                	test   %ebx,%ebx
+80104d3e:	78 20                	js     80104d60 <argptr+0x50>
+80104d40:	8b 16                	mov    (%esi),%edx
+80104d42:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80104d45:	39 c2                	cmp    %eax,%edx
+80104d47:	76 17                	jbe    80104d60 <argptr+0x50>
+80104d49:	01 c3                	add    %eax,%ebx
+80104d4b:	39 da                	cmp    %ebx,%edx
+80104d4d:	72 11                	jb     80104d60 <argptr+0x50>
     return -1;
   *pp = (char*)i;
-801049df:	8b 55 0c             	mov    0xc(%ebp),%edx
-801049e2:	89 02                	mov    %eax,(%edx)
+80104d4f:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104d52:	89 02                	mov    %eax,(%edx)
   return 0;
-801049e4:	31 c0                	xor    %eax,%eax
+80104d54:	31 c0                	xor    %eax,%eax
 }
-801049e6:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801049e9:	5b                   	pop    %ebx
-801049ea:	5e                   	pop    %esi
-801049eb:	5d                   	pop    %ebp
-801049ec:	c3                   	ret    
-801049ed:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-801049f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801049f5:	eb ef                	jmp    801049e6 <argptr+0x46>
-801049f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801049fe:	66 90                	xchg   %ax,%ax
+80104d56:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104d59:	5b                   	pop    %ebx
+80104d5a:	5e                   	pop    %esi
+80104d5b:	5d                   	pop    %ebp
+80104d5c:	c3                   	ret    
+80104d5d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80104d60:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104d65:	eb ef                	jmp    80104d56 <argptr+0x46>
+80104d67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104d6e:	66 90                	xchg   %ax,%ax
 
-80104a00 <argstr>:
+80104d70 <argstr>:
 // Check that the pointer is valid and the string is nul-terminated.
 // (There is no shared writable memory, so the string can't change
 // between this check and being used by the kernel.)
 int
 argstr(int n, char **pp)
 {
-80104a00:	f3 0f 1e fb          	endbr32 
-80104a04:	55                   	push   %ebp
-80104a05:	89 e5                	mov    %esp,%ebp
-80104a07:	83 ec 20             	sub    $0x20,%esp
+80104d70:	f3 0f 1e fb          	endbr32 
+80104d74:	55                   	push   %ebp
+80104d75:	89 e5                	mov    %esp,%ebp
+80104d77:	83 ec 20             	sub    $0x20,%esp
   int addr;
   if(argint(n, &addr) < 0)
-80104a0a:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104a0d:	50                   	push   %eax
-80104a0e:	ff 75 08             	pushl  0x8(%ebp)
-80104a11:	e8 3a ff ff ff       	call   80104950 <argint>
-80104a16:	83 c4 10             	add    $0x10,%esp
-80104a19:	85 c0                	test   %eax,%eax
-80104a1b:	78 13                	js     80104a30 <argstr+0x30>
+80104d7a:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104d7d:	50                   	push   %eax
+80104d7e:	ff 75 08             	pushl  0x8(%ebp)
+80104d81:	e8 3a ff ff ff       	call   80104cc0 <argint>
+80104d86:	83 c4 10             	add    $0x10,%esp
+80104d89:	85 c0                	test   %eax,%eax
+80104d8b:	78 13                	js     80104da0 <argstr+0x30>
     return -1;
   return fetchstr(addr, pp);
-80104a1d:	83 ec 08             	sub    $0x8,%esp
-80104a20:	ff 75 0c             	pushl  0xc(%ebp)
-80104a23:	ff 75 f4             	pushl  -0xc(%ebp)
-80104a26:	e8 c5 fe ff ff       	call   801048f0 <fetchstr>
-80104a2b:	83 c4 10             	add    $0x10,%esp
-}
-80104a2e:	c9                   	leave  
-80104a2f:	c3                   	ret    
-80104a30:	c9                   	leave  
-    return -1;
-80104a31:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104a36:	c3                   	ret    
-80104a37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104a3e:	66 90                	xchg   %ax,%ax
+80104d8d:	83 ec 08             	sub    $0x8,%esp
+80104d90:	ff 75 0c             	pushl  0xc(%ebp)
+80104d93:	ff 75 f4             	pushl  -0xc(%ebp)
+80104d96:	e8 c5 fe ff ff       	call   80104c60 <fetchstr>
+80104d9b:	83 c4 10             	add    $0x10,%esp
+}
+80104d9e:	c9                   	leave  
+80104d9f:	c3                   	ret    
+80104da0:	c9                   	leave  
+    return -1;
+80104da1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104da6:	c3                   	ret    
+80104da7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104dae:	66 90                	xchg   %ax,%ax
 
-80104a40 <syscall>:
-[SYS_close]   sys_close,
+80104db0 <syscall>:
+[SYS_thread_exit] sys_thread_exit,
 };
 
 void
 syscall(void)
 {
-80104a40:	f3 0f 1e fb          	endbr32 
-80104a44:	55                   	push   %ebp
-80104a45:	89 e5                	mov    %esp,%ebp
-80104a47:	53                   	push   %ebx
-80104a48:	83 ec 04             	sub    $0x4,%esp
+80104db0:	f3 0f 1e fb          	endbr32 
+80104db4:	55                   	push   %ebp
+80104db5:	89 e5                	mov    %esp,%ebp
+80104db7:	53                   	push   %ebx
+80104db8:	83 ec 04             	sub    $0x4,%esp
   int num;
   struct proc *curproc = myproc();
-80104a4b:	e8 10 ef ff ff       	call   80103960 <myproc>
-80104a50:	89 c3                	mov    %eax,%ebx
+80104dbb:	e8 a0 eb ff ff       	call   80103960 <myproc>
+80104dc0:	89 c3                	mov    %eax,%ebx
 
   num = curproc->tf->eax;
-80104a52:	8b 40 18             	mov    0x18(%eax),%eax
-80104a55:	8b 40 1c             	mov    0x1c(%eax),%eax
+80104dc2:	8b 40 1c             	mov    0x1c(%eax),%eax
+80104dc5:	8b 40 1c             	mov    0x1c(%eax),%eax
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-80104a58:	8d 50 ff             	lea    -0x1(%eax),%edx
-80104a5b:	83 fa 14             	cmp    $0x14,%edx
-80104a5e:	77 20                	ja     80104a80 <syscall+0x40>
-80104a60:	8b 14 85 a0 77 10 80 	mov    -0x7fef8860(,%eax,4),%edx
-80104a67:	85 d2                	test   %edx,%edx
-80104a69:	74 15                	je     80104a80 <syscall+0x40>
+80104dc8:	8d 50 ff             	lea    -0x1(%eax),%edx
+80104dcb:	83 fa 17             	cmp    $0x17,%edx
+80104dce:	77 20                	ja     80104df0 <syscall+0x40>
+80104dd0:	8b 14 85 40 7b 10 80 	mov    -0x7fef84c0(,%eax,4),%edx
+80104dd7:	85 d2                	test   %edx,%edx
+80104dd9:	74 15                	je     80104df0 <syscall+0x40>
     curproc->tf->eax = syscalls[num]();
-80104a6b:	ff d2                	call   *%edx
-80104a6d:	89 c2                	mov    %eax,%edx
-80104a6f:	8b 43 18             	mov    0x18(%ebx),%eax
-80104a72:	89 50 1c             	mov    %edx,0x1c(%eax)
+80104ddb:	ff d2                	call   *%edx
+80104ddd:	89 c2                	mov    %eax,%edx
+80104ddf:	8b 43 1c             	mov    0x1c(%ebx),%eax
+80104de2:	89 50 1c             	mov    %edx,0x1c(%eax)
   } else {
     cprintf("%d %s: unknown sys call %d\n",
             curproc->pid, curproc->name, num);
     curproc->tf->eax = -1;
   }
 }
-80104a75:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104a78:	c9                   	leave  
-80104a79:	c3                   	ret    
-80104a7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104de5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104de8:	c9                   	leave  
+80104de9:	c3                   	ret    
+80104dea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     cprintf("%d %s: unknown sys call %d\n",
-80104a80:	50                   	push   %eax
+80104df0:	50                   	push   %eax
             curproc->pid, curproc->name, num);
-80104a81:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80104df1:	8d 43 70             	lea    0x70(%ebx),%eax
     cprintf("%d %s: unknown sys call %d\n",
-80104a84:	50                   	push   %eax
-80104a85:	ff 73 10             	pushl  0x10(%ebx)
-80104a88:	68 7d 77 10 80       	push   $0x8010777d
-80104a8d:	e8 1e bc ff ff       	call   801006b0 <cprintf>
+80104df4:	50                   	push   %eax
+80104df5:	ff 73 14             	pushl  0x14(%ebx)
+80104df8:	68 1d 7b 10 80       	push   $0x80107b1d
+80104dfd:	e8 ae b8 ff ff       	call   801006b0 <cprintf>
     curproc->tf->eax = -1;
-80104a92:	8b 43 18             	mov    0x18(%ebx),%eax
-80104a95:	83 c4 10             	add    $0x10,%esp
-80104a98:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
-}
-80104a9f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104aa2:	c9                   	leave  
-80104aa3:	c3                   	ret    
-80104aa4:	66 90                	xchg   %ax,%ax
-80104aa6:	66 90                	xchg   %ax,%ax
-80104aa8:	66 90                	xchg   %ax,%ax
-80104aaa:	66 90                	xchg   %ax,%ax
-80104aac:	66 90                	xchg   %ax,%ax
-80104aae:	66 90                	xchg   %ax,%ax
+80104e02:	8b 43 1c             	mov    0x1c(%ebx),%eax
+80104e05:	83 c4 10             	add    $0x10,%esp
+80104e08:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
+}
+80104e0f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104e12:	c9                   	leave  
+80104e13:	c3                   	ret    
+80104e14:	66 90                	xchg   %ax,%ax
+80104e16:	66 90                	xchg   %ax,%ax
+80104e18:	66 90                	xchg   %ax,%ax
+80104e1a:	66 90                	xchg   %ax,%ax
+80104e1c:	66 90                	xchg   %ax,%ax
+80104e1e:	66 90                	xchg   %ax,%ax
 
-80104ab0 <create>:
+80104e20 <create>:
   return -1;
 }
 
 static struct inode*
 create(char *path, short type, short major, short minor)
 {
-80104ab0:	55                   	push   %ebp
-80104ab1:	89 e5                	mov    %esp,%ebp
-80104ab3:	57                   	push   %edi
-80104ab4:	56                   	push   %esi
+80104e20:	55                   	push   %ebp
+80104e21:	89 e5                	mov    %esp,%ebp
+80104e23:	57                   	push   %edi
+80104e24:	56                   	push   %esi
   struct inode *ip, *dp;
   char name[DIRSIZ];
 
   if((dp = nameiparent(path, name)) == 0)
-80104ab5:	8d 7d da             	lea    -0x26(%ebp),%edi
+80104e25:	8d 7d da             	lea    -0x26(%ebp),%edi
 {
-80104ab8:	53                   	push   %ebx
-80104ab9:	83 ec 34             	sub    $0x34,%esp
-80104abc:	89 4d d0             	mov    %ecx,-0x30(%ebp)
-80104abf:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80104e28:	53                   	push   %ebx
+80104e29:	83 ec 34             	sub    $0x34,%esp
+80104e2c:	89 4d d0             	mov    %ecx,-0x30(%ebp)
+80104e2f:	8b 4d 08             	mov    0x8(%ebp),%ecx
   if((dp = nameiparent(path, name)) == 0)
-80104ac2:	57                   	push   %edi
-80104ac3:	50                   	push   %eax
+80104e32:	57                   	push   %edi
+80104e33:	50                   	push   %eax
 {
-80104ac4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-80104ac7:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+80104e34:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+80104e37:	89 4d cc             	mov    %ecx,-0x34(%ebp)
   if((dp = nameiparent(path, name)) == 0)
-80104aca:	e8 81 d5 ff ff       	call   80102050 <nameiparent>
-80104acf:	83 c4 10             	add    $0x10,%esp
-80104ad2:	85 c0                	test   %eax,%eax
-80104ad4:	0f 84 46 01 00 00    	je     80104c20 <create+0x170>
+80104e3a:	e8 11 d2 ff ff       	call   80102050 <nameiparent>
+80104e3f:	83 c4 10             	add    $0x10,%esp
+80104e42:	85 c0                	test   %eax,%eax
+80104e44:	0f 84 46 01 00 00    	je     80104f90 <create+0x170>
     return 0;
   ilock(dp);
-80104ada:	83 ec 0c             	sub    $0xc,%esp
-80104add:	89 c3                	mov    %eax,%ebx
-80104adf:	50                   	push   %eax
-80104ae0:	e8 7b cc ff ff       	call   80101760 <ilock>
+80104e4a:	83 ec 0c             	sub    $0xc,%esp
+80104e4d:	89 c3                	mov    %eax,%ebx
+80104e4f:	50                   	push   %eax
+80104e50:	e8 0b c9 ff ff       	call   80101760 <ilock>
 
   if((ip = dirlookup(dp, name, 0)) != 0){
-80104ae5:	83 c4 0c             	add    $0xc,%esp
-80104ae8:	6a 00                	push   $0x0
-80104aea:	57                   	push   %edi
-80104aeb:	53                   	push   %ebx
-80104aec:	e8 bf d1 ff ff       	call   80101cb0 <dirlookup>
-80104af1:	83 c4 10             	add    $0x10,%esp
-80104af4:	89 c6                	mov    %eax,%esi
-80104af6:	85 c0                	test   %eax,%eax
-80104af8:	74 56                	je     80104b50 <create+0xa0>
+80104e55:	83 c4 0c             	add    $0xc,%esp
+80104e58:	6a 00                	push   $0x0
+80104e5a:	57                   	push   %edi
+80104e5b:	53                   	push   %ebx
+80104e5c:	e8 4f ce ff ff       	call   80101cb0 <dirlookup>
+80104e61:	83 c4 10             	add    $0x10,%esp
+80104e64:	89 c6                	mov    %eax,%esi
+80104e66:	85 c0                	test   %eax,%eax
+80104e68:	74 56                	je     80104ec0 <create+0xa0>
     iunlockput(dp);
-80104afa:	83 ec 0c             	sub    $0xc,%esp
-80104afd:	53                   	push   %ebx
-80104afe:	e8 fd ce ff ff       	call   80101a00 <iunlockput>
+80104e6a:	83 ec 0c             	sub    $0xc,%esp
+80104e6d:	53                   	push   %ebx
+80104e6e:	e8 8d cb ff ff       	call   80101a00 <iunlockput>
     ilock(ip);
-80104b03:	89 34 24             	mov    %esi,(%esp)
-80104b06:	e8 55 cc ff ff       	call   80101760 <ilock>
+80104e73:	89 34 24             	mov    %esi,(%esp)
+80104e76:	e8 e5 c8 ff ff       	call   80101760 <ilock>
     if(type == T_FILE && ip->type == T_FILE)
-80104b0b:	83 c4 10             	add    $0x10,%esp
-80104b0e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
-80104b13:	75 1b                	jne    80104b30 <create+0x80>
-80104b15:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
-80104b1a:	75 14                	jne    80104b30 <create+0x80>
+80104e7b:	83 c4 10             	add    $0x10,%esp
+80104e7e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
+80104e83:	75 1b                	jne    80104ea0 <create+0x80>
+80104e85:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
+80104e8a:	75 14                	jne    80104ea0 <create+0x80>
     panic("create: dirlink");
 
   iunlockput(dp);
 
   return ip;
 }
-80104b1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104b1f:	89 f0                	mov    %esi,%eax
-80104b21:	5b                   	pop    %ebx
-80104b22:	5e                   	pop    %esi
-80104b23:	5f                   	pop    %edi
-80104b24:	5d                   	pop    %ebp
-80104b25:	c3                   	ret    
-80104b26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104b2d:	8d 76 00             	lea    0x0(%esi),%esi
+80104e8c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104e8f:	89 f0                	mov    %esi,%eax
+80104e91:	5b                   	pop    %ebx
+80104e92:	5e                   	pop    %esi
+80104e93:	5f                   	pop    %edi
+80104e94:	5d                   	pop    %ebp
+80104e95:	c3                   	ret    
+80104e96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104e9d:	8d 76 00             	lea    0x0(%esi),%esi
     iunlockput(ip);
-80104b30:	83 ec 0c             	sub    $0xc,%esp
-80104b33:	56                   	push   %esi
+80104ea0:	83 ec 0c             	sub    $0xc,%esp
+80104ea3:	56                   	push   %esi
     return 0;
-80104b34:	31 f6                	xor    %esi,%esi
+80104ea4:	31 f6                	xor    %esi,%esi
     iunlockput(ip);
-80104b36:	e8 c5 ce ff ff       	call   80101a00 <iunlockput>
+80104ea6:	e8 55 cb ff ff       	call   80101a00 <iunlockput>
     return 0;
-80104b3b:	83 c4 10             	add    $0x10,%esp
+80104eab:	83 c4 10             	add    $0x10,%esp
 }
-80104b3e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104b41:	89 f0                	mov    %esi,%eax
-80104b43:	5b                   	pop    %ebx
-80104b44:	5e                   	pop    %esi
-80104b45:	5f                   	pop    %edi
-80104b46:	5d                   	pop    %ebp
-80104b47:	c3                   	ret    
-80104b48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104b4f:	90                   	nop
+80104eae:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104eb1:	89 f0                	mov    %esi,%eax
+80104eb3:	5b                   	pop    %ebx
+80104eb4:	5e                   	pop    %esi
+80104eb5:	5f                   	pop    %edi
+80104eb6:	5d                   	pop    %ebp
+80104eb7:	c3                   	ret    
+80104eb8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104ebf:	90                   	nop
   if((ip = ialloc(dp->dev, type)) == 0)
-80104b50:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
-80104b54:	83 ec 08             	sub    $0x8,%esp
-80104b57:	50                   	push   %eax
-80104b58:	ff 33                	pushl  (%ebx)
-80104b5a:	e8 81 ca ff ff       	call   801015e0 <ialloc>
-80104b5f:	83 c4 10             	add    $0x10,%esp
-80104b62:	89 c6                	mov    %eax,%esi
-80104b64:	85 c0                	test   %eax,%eax
-80104b66:	0f 84 cd 00 00 00    	je     80104c39 <create+0x189>
+80104ec0:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
+80104ec4:	83 ec 08             	sub    $0x8,%esp
+80104ec7:	50                   	push   %eax
+80104ec8:	ff 33                	pushl  (%ebx)
+80104eca:	e8 11 c7 ff ff       	call   801015e0 <ialloc>
+80104ecf:	83 c4 10             	add    $0x10,%esp
+80104ed2:	89 c6                	mov    %eax,%esi
+80104ed4:	85 c0                	test   %eax,%eax
+80104ed6:	0f 84 cd 00 00 00    	je     80104fa9 <create+0x189>
   ilock(ip);
-80104b6c:	83 ec 0c             	sub    $0xc,%esp
-80104b6f:	50                   	push   %eax
-80104b70:	e8 eb cb ff ff       	call   80101760 <ilock>
+80104edc:	83 ec 0c             	sub    $0xc,%esp
+80104edf:	50                   	push   %eax
+80104ee0:	e8 7b c8 ff ff       	call   80101760 <ilock>
   ip->major = major;
-80104b75:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
-80104b79:	66 89 46 52          	mov    %ax,0x52(%esi)
+80104ee5:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
+80104ee9:	66 89 46 52          	mov    %ax,0x52(%esi)
   ip->minor = minor;
-80104b7d:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
-80104b81:	66 89 46 54          	mov    %ax,0x54(%esi)
+80104eed:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
+80104ef1:	66 89 46 54          	mov    %ax,0x54(%esi)
   ip->nlink = 1;
-80104b85:	b8 01 00 00 00       	mov    $0x1,%eax
-80104b8a:	66 89 46 56          	mov    %ax,0x56(%esi)
+80104ef5:	b8 01 00 00 00       	mov    $0x1,%eax
+80104efa:	66 89 46 56          	mov    %ax,0x56(%esi)
   iupdate(ip);
-80104b8e:	89 34 24             	mov    %esi,(%esp)
-80104b91:	e8 0a cb ff ff       	call   801016a0 <iupdate>
+80104efe:	89 34 24             	mov    %esi,(%esp)
+80104f01:	e8 9a c7 ff ff       	call   801016a0 <iupdate>
   if(type == T_DIR){  // Create . and .. entries.
-80104b96:	83 c4 10             	add    $0x10,%esp
-80104b99:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
-80104b9e:	74 30                	je     80104bd0 <create+0x120>
+80104f06:	83 c4 10             	add    $0x10,%esp
+80104f09:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
+80104f0e:	74 30                	je     80104f40 <create+0x120>
   if(dirlink(dp, name, ip->inum) < 0)
-80104ba0:	83 ec 04             	sub    $0x4,%esp
-80104ba3:	ff 76 04             	pushl  0x4(%esi)
-80104ba6:	57                   	push   %edi
-80104ba7:	53                   	push   %ebx
-80104ba8:	e8 c3 d3 ff ff       	call   80101f70 <dirlink>
-80104bad:	83 c4 10             	add    $0x10,%esp
-80104bb0:	85 c0                	test   %eax,%eax
-80104bb2:	78 78                	js     80104c2c <create+0x17c>
+80104f10:	83 ec 04             	sub    $0x4,%esp
+80104f13:	ff 76 04             	pushl  0x4(%esi)
+80104f16:	57                   	push   %edi
+80104f17:	53                   	push   %ebx
+80104f18:	e8 53 d0 ff ff       	call   80101f70 <dirlink>
+80104f1d:	83 c4 10             	add    $0x10,%esp
+80104f20:	85 c0                	test   %eax,%eax
+80104f22:	78 78                	js     80104f9c <create+0x17c>
   iunlockput(dp);
-80104bb4:	83 ec 0c             	sub    $0xc,%esp
-80104bb7:	53                   	push   %ebx
-80104bb8:	e8 43 ce ff ff       	call   80101a00 <iunlockput>
+80104f24:	83 ec 0c             	sub    $0xc,%esp
+80104f27:	53                   	push   %ebx
+80104f28:	e8 d3 ca ff ff       	call   80101a00 <iunlockput>
   return ip;
-80104bbd:	83 c4 10             	add    $0x10,%esp
+80104f2d:	83 c4 10             	add    $0x10,%esp
 }
-80104bc0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104bc3:	89 f0                	mov    %esi,%eax
-80104bc5:	5b                   	pop    %ebx
-80104bc6:	5e                   	pop    %esi
-80104bc7:	5f                   	pop    %edi
-80104bc8:	5d                   	pop    %ebp
-80104bc9:	c3                   	ret    
-80104bca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104f30:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104f33:	89 f0                	mov    %esi,%eax
+80104f35:	5b                   	pop    %ebx
+80104f36:	5e                   	pop    %esi
+80104f37:	5f                   	pop    %edi
+80104f38:	5d                   	pop    %ebp
+80104f39:	c3                   	ret    
+80104f3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     iupdate(dp);
-80104bd0:	83 ec 0c             	sub    $0xc,%esp
+80104f40:	83 ec 0c             	sub    $0xc,%esp
     dp->nlink++;  // for ".."
-80104bd3:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+80104f43:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
     iupdate(dp);
-80104bd8:	53                   	push   %ebx
-80104bd9:	e8 c2 ca ff ff       	call   801016a0 <iupdate>
+80104f48:	53                   	push   %ebx
+80104f49:	e8 52 c7 ff ff       	call   801016a0 <iupdate>
     if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
-80104bde:	83 c4 0c             	add    $0xc,%esp
-80104be1:	ff 76 04             	pushl  0x4(%esi)
-80104be4:	68 14 78 10 80       	push   $0x80107814
-80104be9:	56                   	push   %esi
-80104bea:	e8 81 d3 ff ff       	call   80101f70 <dirlink>
-80104bef:	83 c4 10             	add    $0x10,%esp
-80104bf2:	85 c0                	test   %eax,%eax
-80104bf4:	78 18                	js     80104c0e <create+0x15e>
-80104bf6:	83 ec 04             	sub    $0x4,%esp
-80104bf9:	ff 73 04             	pushl  0x4(%ebx)
-80104bfc:	68 13 78 10 80       	push   $0x80107813
-80104c01:	56                   	push   %esi
-80104c02:	e8 69 d3 ff ff       	call   80101f70 <dirlink>
-80104c07:	83 c4 10             	add    $0x10,%esp
-80104c0a:	85 c0                	test   %eax,%eax
-80104c0c:	79 92                	jns    80104ba0 <create+0xf0>
+80104f4e:	83 c4 0c             	add    $0xc,%esp
+80104f51:	ff 76 04             	pushl  0x4(%esi)
+80104f54:	68 c0 7b 10 80       	push   $0x80107bc0
+80104f59:	56                   	push   %esi
+80104f5a:	e8 11 d0 ff ff       	call   80101f70 <dirlink>
+80104f5f:	83 c4 10             	add    $0x10,%esp
+80104f62:	85 c0                	test   %eax,%eax
+80104f64:	78 18                	js     80104f7e <create+0x15e>
+80104f66:	83 ec 04             	sub    $0x4,%esp
+80104f69:	ff 73 04             	pushl  0x4(%ebx)
+80104f6c:	68 bf 7b 10 80       	push   $0x80107bbf
+80104f71:	56                   	push   %esi
+80104f72:	e8 f9 cf ff ff       	call   80101f70 <dirlink>
+80104f77:	83 c4 10             	add    $0x10,%esp
+80104f7a:	85 c0                	test   %eax,%eax
+80104f7c:	79 92                	jns    80104f10 <create+0xf0>
       panic("create dots");
-80104c0e:	83 ec 0c             	sub    $0xc,%esp
-80104c11:	68 07 78 10 80       	push   $0x80107807
-80104c16:	e8 75 b7 ff ff       	call   80100390 <panic>
-80104c1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104c1f:	90                   	nop
+80104f7e:	83 ec 0c             	sub    $0xc,%esp
+80104f81:	68 b3 7b 10 80       	push   $0x80107bb3
+80104f86:	e8 05 b4 ff ff       	call   80100390 <panic>
+80104f8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104f8f:	90                   	nop
 }
-80104c20:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104f90:	8d 65 f4             	lea    -0xc(%ebp),%esp
     return 0;
-80104c23:	31 f6                	xor    %esi,%esi
+80104f93:	31 f6                	xor    %esi,%esi
 }
-80104c25:	5b                   	pop    %ebx
-80104c26:	89 f0                	mov    %esi,%eax
-80104c28:	5e                   	pop    %esi
-80104c29:	5f                   	pop    %edi
-80104c2a:	5d                   	pop    %ebp
-80104c2b:	c3                   	ret    
+80104f95:	5b                   	pop    %ebx
+80104f96:	89 f0                	mov    %esi,%eax
+80104f98:	5e                   	pop    %esi
+80104f99:	5f                   	pop    %edi
+80104f9a:	5d                   	pop    %ebp
+80104f9b:	c3                   	ret    
     panic("create: dirlink");
-80104c2c:	83 ec 0c             	sub    $0xc,%esp
-80104c2f:	68 16 78 10 80       	push   $0x80107816
-80104c34:	e8 57 b7 ff ff       	call   80100390 <panic>
+80104f9c:	83 ec 0c             	sub    $0xc,%esp
+80104f9f:	68 c2 7b 10 80       	push   $0x80107bc2
+80104fa4:	e8 e7 b3 ff ff       	call   80100390 <panic>
     panic("create: ialloc");
-80104c39:	83 ec 0c             	sub    $0xc,%esp
-80104c3c:	68 f8 77 10 80       	push   $0x801077f8
-80104c41:	e8 4a b7 ff ff       	call   80100390 <panic>
-80104c46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104c4d:	8d 76 00             	lea    0x0(%esi),%esi
+80104fa9:	83 ec 0c             	sub    $0xc,%esp
+80104fac:	68 a4 7b 10 80       	push   $0x80107ba4
+80104fb1:	e8 da b3 ff ff       	call   80100390 <panic>
+80104fb6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104fbd:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104c50 <argfd.constprop.0>:
+80104fc0 <argfd.constprop.0>:
 argfd(int n, int *pfd, struct file **pf)
-80104c50:	55                   	push   %ebp
-80104c51:	89 e5                	mov    %esp,%ebp
-80104c53:	56                   	push   %esi
-80104c54:	89 d6                	mov    %edx,%esi
-80104c56:	53                   	push   %ebx
-80104c57:	89 c3                	mov    %eax,%ebx
+80104fc0:	55                   	push   %ebp
+80104fc1:	89 e5                	mov    %esp,%ebp
+80104fc3:	56                   	push   %esi
+80104fc4:	89 d6                	mov    %edx,%esi
+80104fc6:	53                   	push   %ebx
+80104fc7:	89 c3                	mov    %eax,%ebx
   if(argint(n, &fd) < 0)
-80104c59:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104fc9:	8d 45 f4             	lea    -0xc(%ebp),%eax
 argfd(int n, int *pfd, struct file **pf)
-80104c5c:	83 ec 18             	sub    $0x18,%esp
+80104fcc:	83 ec 18             	sub    $0x18,%esp
   if(argint(n, &fd) < 0)
-80104c5f:	50                   	push   %eax
-80104c60:	6a 00                	push   $0x0
-80104c62:	e8 e9 fc ff ff       	call   80104950 <argint>
-80104c67:	83 c4 10             	add    $0x10,%esp
-80104c6a:	85 c0                	test   %eax,%eax
-80104c6c:	78 2a                	js     80104c98 <argfd.constprop.0+0x48>
+80104fcf:	50                   	push   %eax
+80104fd0:	6a 00                	push   $0x0
+80104fd2:	e8 e9 fc ff ff       	call   80104cc0 <argint>
+80104fd7:	83 c4 10             	add    $0x10,%esp
+80104fda:	85 c0                	test   %eax,%eax
+80104fdc:	78 2a                	js     80105008 <argfd.constprop.0+0x48>
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104c6e:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104c72:	77 24                	ja     80104c98 <argfd.constprop.0+0x48>
-80104c74:	e8 e7 ec ff ff       	call   80103960 <myproc>
-80104c79:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104c7c:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
-80104c80:	85 c0                	test   %eax,%eax
-80104c82:	74 14                	je     80104c98 <argfd.constprop.0+0x48>
+80104fde:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+80104fe2:	77 24                	ja     80105008 <argfd.constprop.0+0x48>
+80104fe4:	e8 77 e9 ff ff       	call   80103960 <myproc>
+80104fe9:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80104fec:	8b 44 90 2c          	mov    0x2c(%eax,%edx,4),%eax
+80104ff0:	85 c0                	test   %eax,%eax
+80104ff2:	74 14                	je     80105008 <argfd.constprop.0+0x48>
   if(pfd)
-80104c84:	85 db                	test   %ebx,%ebx
-80104c86:	74 02                	je     80104c8a <argfd.constprop.0+0x3a>
+80104ff4:	85 db                	test   %ebx,%ebx
+80104ff6:	74 02                	je     80104ffa <argfd.constprop.0+0x3a>
     *pfd = fd;
-80104c88:	89 13                	mov    %edx,(%ebx)
+80104ff8:	89 13                	mov    %edx,(%ebx)
     *pf = f;
-80104c8a:	89 06                	mov    %eax,(%esi)
+80104ffa:	89 06                	mov    %eax,(%esi)
   return 0;
-80104c8c:	31 c0                	xor    %eax,%eax
+80104ffc:	31 c0                	xor    %eax,%eax
 }
-80104c8e:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104c91:	5b                   	pop    %ebx
-80104c92:	5e                   	pop    %esi
-80104c93:	5d                   	pop    %ebp
-80104c94:	c3                   	ret    
-80104c95:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-80104c98:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104c9d:	eb ef                	jmp    80104c8e <argfd.constprop.0+0x3e>
-80104c9f:	90                   	nop
+80104ffe:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105001:	5b                   	pop    %ebx
+80105002:	5e                   	pop    %esi
+80105003:	5d                   	pop    %ebp
+80105004:	c3                   	ret    
+80105005:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80105008:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010500d:	eb ef                	jmp    80104ffe <argfd.constprop.0+0x3e>
+8010500f:	90                   	nop
 
-80104ca0 <sys_dup>:
+80105010 <sys_dup>:
 {
-80104ca0:	f3 0f 1e fb          	endbr32 
-80104ca4:	55                   	push   %ebp
+80105010:	f3 0f 1e fb          	endbr32 
+80105014:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0)
-80104ca5:	31 c0                	xor    %eax,%eax
+80105015:	31 c0                	xor    %eax,%eax
 {
-80104ca7:	89 e5                	mov    %esp,%ebp
-80104ca9:	56                   	push   %esi
-80104caa:	53                   	push   %ebx
+80105017:	89 e5                	mov    %esp,%ebp
+80105019:	56                   	push   %esi
+8010501a:	53                   	push   %ebx
   if(argfd(0, 0, &f) < 0)
-80104cab:	8d 55 f4             	lea    -0xc(%ebp),%edx
+8010501b:	8d 55 f4             	lea    -0xc(%ebp),%edx
 {
-80104cae:	83 ec 10             	sub    $0x10,%esp
+8010501e:	83 ec 10             	sub    $0x10,%esp
   if(argfd(0, 0, &f) < 0)
-80104cb1:	e8 9a ff ff ff       	call   80104c50 <argfd.constprop.0>
-80104cb6:	85 c0                	test   %eax,%eax
-80104cb8:	78 1e                	js     80104cd8 <sys_dup+0x38>
+80105021:	e8 9a ff ff ff       	call   80104fc0 <argfd.constprop.0>
+80105026:	85 c0                	test   %eax,%eax
+80105028:	78 1e                	js     80105048 <sys_dup+0x38>
   if((fd=fdalloc(f)) < 0)
-80104cba:	8b 75 f4             	mov    -0xc(%ebp),%esi
+8010502a:	8b 75 f4             	mov    -0xc(%ebp),%esi
   for(fd = 0; fd < NOFILE; fd++){
-80104cbd:	31 db                	xor    %ebx,%ebx
+8010502d:	31 db                	xor    %ebx,%ebx
   struct proc *curproc = myproc();
-80104cbf:	e8 9c ec ff ff       	call   80103960 <myproc>
+8010502f:	e8 2c e9 ff ff       	call   80103960 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-80104cc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105034:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[fd] == 0){
-80104cc8:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-80104ccc:	85 d2                	test   %edx,%edx
-80104cce:	74 20                	je     80104cf0 <sys_dup+0x50>
+80105038:	8b 54 98 2c          	mov    0x2c(%eax,%ebx,4),%edx
+8010503c:	85 d2                	test   %edx,%edx
+8010503e:	74 20                	je     80105060 <sys_dup+0x50>
   for(fd = 0; fd < NOFILE; fd++){
-80104cd0:	83 c3 01             	add    $0x1,%ebx
-80104cd3:	83 fb 10             	cmp    $0x10,%ebx
-80104cd6:	75 f0                	jne    80104cc8 <sys_dup+0x28>
-}
-80104cd8:	8d 65 f8             	lea    -0x8(%ebp),%esp
-    return -1;
-80104cdb:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-}
-80104ce0:	89 d8                	mov    %ebx,%eax
-80104ce2:	5b                   	pop    %ebx
-80104ce3:	5e                   	pop    %esi
-80104ce4:	5d                   	pop    %ebp
-80104ce5:	c3                   	ret    
-80104ce6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104ced:	8d 76 00             	lea    0x0(%esi),%esi
+80105040:	83 c3 01             	add    $0x1,%ebx
+80105043:	83 fb 10             	cmp    $0x10,%ebx
+80105046:	75 f0                	jne    80105038 <sys_dup+0x28>
+}
+80105048:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    return -1;
+8010504b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+}
+80105050:	89 d8                	mov    %ebx,%eax
+80105052:	5b                   	pop    %ebx
+80105053:	5e                   	pop    %esi
+80105054:	5d                   	pop    %ebp
+80105055:	c3                   	ret    
+80105056:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010505d:	8d 76 00             	lea    0x0(%esi),%esi
       curproc->ofile[fd] = f;
-80104cf0:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
+80105060:	89 74 98 2c          	mov    %esi,0x2c(%eax,%ebx,4)
   filedup(f);
-80104cf4:	83 ec 0c             	sub    $0xc,%esp
-80104cf7:	ff 75 f4             	pushl  -0xc(%ebp)
-80104cfa:	e8 71 c1 ff ff       	call   80100e70 <filedup>
+80105064:	83 ec 0c             	sub    $0xc,%esp
+80105067:	ff 75 f4             	pushl  -0xc(%ebp)
+8010506a:	e8 01 be ff ff       	call   80100e70 <filedup>
   return fd;
-80104cff:	83 c4 10             	add    $0x10,%esp
+8010506f:	83 c4 10             	add    $0x10,%esp
 }
-80104d02:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104d05:	89 d8                	mov    %ebx,%eax
-80104d07:	5b                   	pop    %ebx
-80104d08:	5e                   	pop    %esi
-80104d09:	5d                   	pop    %ebp
-80104d0a:	c3                   	ret    
-80104d0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104d0f:	90                   	nop
+80105072:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105075:	89 d8                	mov    %ebx,%eax
+80105077:	5b                   	pop    %ebx
+80105078:	5e                   	pop    %esi
+80105079:	5d                   	pop    %ebp
+8010507a:	c3                   	ret    
+8010507b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010507f:	90                   	nop
 
-80104d10 <sys_read>:
+80105080 <sys_read>:
 {
-80104d10:	f3 0f 1e fb          	endbr32 
-80104d14:	55                   	push   %ebp
+80105080:	f3 0f 1e fb          	endbr32 
+80105084:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104d15:	31 c0                	xor    %eax,%eax
+80105085:	31 c0                	xor    %eax,%eax
 {
-80104d17:	89 e5                	mov    %esp,%ebp
-80104d19:	83 ec 18             	sub    $0x18,%esp
+80105087:	89 e5                	mov    %esp,%ebp
+80105089:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104d1c:	8d 55 ec             	lea    -0x14(%ebp),%edx
-80104d1f:	e8 2c ff ff ff       	call   80104c50 <argfd.constprop.0>
-80104d24:	85 c0                	test   %eax,%eax
-80104d26:	78 48                	js     80104d70 <sys_read+0x60>
-80104d28:	83 ec 08             	sub    $0x8,%esp
-80104d2b:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104d2e:	50                   	push   %eax
-80104d2f:	6a 02                	push   $0x2
-80104d31:	e8 1a fc ff ff       	call   80104950 <argint>
-80104d36:	83 c4 10             	add    $0x10,%esp
-80104d39:	85 c0                	test   %eax,%eax
-80104d3b:	78 33                	js     80104d70 <sys_read+0x60>
-80104d3d:	83 ec 04             	sub    $0x4,%esp
-80104d40:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104d43:	ff 75 f0             	pushl  -0x10(%ebp)
-80104d46:	50                   	push   %eax
-80104d47:	6a 01                	push   $0x1
-80104d49:	e8 52 fc ff ff       	call   801049a0 <argptr>
-80104d4e:	83 c4 10             	add    $0x10,%esp
-80104d51:	85 c0                	test   %eax,%eax
-80104d53:	78 1b                	js     80104d70 <sys_read+0x60>
+8010508c:	8d 55 ec             	lea    -0x14(%ebp),%edx
+8010508f:	e8 2c ff ff ff       	call   80104fc0 <argfd.constprop.0>
+80105094:	85 c0                	test   %eax,%eax
+80105096:	78 48                	js     801050e0 <sys_read+0x60>
+80105098:	83 ec 08             	sub    $0x8,%esp
+8010509b:	8d 45 f0             	lea    -0x10(%ebp),%eax
+8010509e:	50                   	push   %eax
+8010509f:	6a 02                	push   $0x2
+801050a1:	e8 1a fc ff ff       	call   80104cc0 <argint>
+801050a6:	83 c4 10             	add    $0x10,%esp
+801050a9:	85 c0                	test   %eax,%eax
+801050ab:	78 33                	js     801050e0 <sys_read+0x60>
+801050ad:	83 ec 04             	sub    $0x4,%esp
+801050b0:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801050b3:	ff 75 f0             	pushl  -0x10(%ebp)
+801050b6:	50                   	push   %eax
+801050b7:	6a 01                	push   $0x1
+801050b9:	e8 52 fc ff ff       	call   80104d10 <argptr>
+801050be:	83 c4 10             	add    $0x10,%esp
+801050c1:	85 c0                	test   %eax,%eax
+801050c3:	78 1b                	js     801050e0 <sys_read+0x60>
   return fileread(f, p, n);
-80104d55:	83 ec 04             	sub    $0x4,%esp
-80104d58:	ff 75 f0             	pushl  -0x10(%ebp)
-80104d5b:	ff 75 f4             	pushl  -0xc(%ebp)
-80104d5e:	ff 75 ec             	pushl  -0x14(%ebp)
-80104d61:	e8 8a c2 ff ff       	call   80100ff0 <fileread>
-80104d66:	83 c4 10             	add    $0x10,%esp
-}
-80104d69:	c9                   	leave  
-80104d6a:	c3                   	ret    
-80104d6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104d6f:	90                   	nop
-80104d70:	c9                   	leave  
-    return -1;
-80104d71:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104d76:	c3                   	ret    
-80104d77:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104d7e:	66 90                	xchg   %ax,%ax
+801050c5:	83 ec 04             	sub    $0x4,%esp
+801050c8:	ff 75 f0             	pushl  -0x10(%ebp)
+801050cb:	ff 75 f4             	pushl  -0xc(%ebp)
+801050ce:	ff 75 ec             	pushl  -0x14(%ebp)
+801050d1:	e8 1a bf ff ff       	call   80100ff0 <fileread>
+801050d6:	83 c4 10             	add    $0x10,%esp
+}
+801050d9:	c9                   	leave  
+801050da:	c3                   	ret    
+801050db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801050df:	90                   	nop
+801050e0:	c9                   	leave  
+    return -1;
+801050e1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801050e6:	c3                   	ret    
+801050e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801050ee:	66 90                	xchg   %ax,%ax
 
-80104d80 <sys_write>:
+801050f0 <sys_write>:
 {
-80104d80:	f3 0f 1e fb          	endbr32 
-80104d84:	55                   	push   %ebp
+801050f0:	f3 0f 1e fb          	endbr32 
+801050f4:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104d85:	31 c0                	xor    %eax,%eax
+801050f5:	31 c0                	xor    %eax,%eax
 {
-80104d87:	89 e5                	mov    %esp,%ebp
-80104d89:	83 ec 18             	sub    $0x18,%esp
+801050f7:	89 e5                	mov    %esp,%ebp
+801050f9:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104d8c:	8d 55 ec             	lea    -0x14(%ebp),%edx
-80104d8f:	e8 bc fe ff ff       	call   80104c50 <argfd.constprop.0>
-80104d94:	85 c0                	test   %eax,%eax
-80104d96:	78 48                	js     80104de0 <sys_write+0x60>
-80104d98:	83 ec 08             	sub    $0x8,%esp
-80104d9b:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104d9e:	50                   	push   %eax
-80104d9f:	6a 02                	push   $0x2
-80104da1:	e8 aa fb ff ff       	call   80104950 <argint>
-80104da6:	83 c4 10             	add    $0x10,%esp
-80104da9:	85 c0                	test   %eax,%eax
-80104dab:	78 33                	js     80104de0 <sys_write+0x60>
-80104dad:	83 ec 04             	sub    $0x4,%esp
-80104db0:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104db3:	ff 75 f0             	pushl  -0x10(%ebp)
-80104db6:	50                   	push   %eax
-80104db7:	6a 01                	push   $0x1
-80104db9:	e8 e2 fb ff ff       	call   801049a0 <argptr>
-80104dbe:	83 c4 10             	add    $0x10,%esp
-80104dc1:	85 c0                	test   %eax,%eax
-80104dc3:	78 1b                	js     80104de0 <sys_write+0x60>
+801050fc:	8d 55 ec             	lea    -0x14(%ebp),%edx
+801050ff:	e8 bc fe ff ff       	call   80104fc0 <argfd.constprop.0>
+80105104:	85 c0                	test   %eax,%eax
+80105106:	78 48                	js     80105150 <sys_write+0x60>
+80105108:	83 ec 08             	sub    $0x8,%esp
+8010510b:	8d 45 f0             	lea    -0x10(%ebp),%eax
+8010510e:	50                   	push   %eax
+8010510f:	6a 02                	push   $0x2
+80105111:	e8 aa fb ff ff       	call   80104cc0 <argint>
+80105116:	83 c4 10             	add    $0x10,%esp
+80105119:	85 c0                	test   %eax,%eax
+8010511b:	78 33                	js     80105150 <sys_write+0x60>
+8010511d:	83 ec 04             	sub    $0x4,%esp
+80105120:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105123:	ff 75 f0             	pushl  -0x10(%ebp)
+80105126:	50                   	push   %eax
+80105127:	6a 01                	push   $0x1
+80105129:	e8 e2 fb ff ff       	call   80104d10 <argptr>
+8010512e:	83 c4 10             	add    $0x10,%esp
+80105131:	85 c0                	test   %eax,%eax
+80105133:	78 1b                	js     80105150 <sys_write+0x60>
   return filewrite(f, p, n);
-80104dc5:	83 ec 04             	sub    $0x4,%esp
-80104dc8:	ff 75 f0             	pushl  -0x10(%ebp)
-80104dcb:	ff 75 f4             	pushl  -0xc(%ebp)
-80104dce:	ff 75 ec             	pushl  -0x14(%ebp)
-80104dd1:	e8 ba c2 ff ff       	call   80101090 <filewrite>
-80104dd6:	83 c4 10             	add    $0x10,%esp
-}
-80104dd9:	c9                   	leave  
-80104dda:	c3                   	ret    
-80104ddb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104ddf:	90                   	nop
-80104de0:	c9                   	leave  
-    return -1;
-80104de1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104de6:	c3                   	ret    
-80104de7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104dee:	66 90                	xchg   %ax,%ax
-
-80104df0 <sys_close>:
-{
-80104df0:	f3 0f 1e fb          	endbr32 
-80104df4:	55                   	push   %ebp
-80104df5:	89 e5                	mov    %esp,%ebp
-80104df7:	83 ec 18             	sub    $0x18,%esp
+80105135:	83 ec 04             	sub    $0x4,%esp
+80105138:	ff 75 f0             	pushl  -0x10(%ebp)
+8010513b:	ff 75 f4             	pushl  -0xc(%ebp)
+8010513e:	ff 75 ec             	pushl  -0x14(%ebp)
+80105141:	e8 4a bf ff ff       	call   80101090 <filewrite>
+80105146:	83 c4 10             	add    $0x10,%esp
+}
+80105149:	c9                   	leave  
+8010514a:	c3                   	ret    
+8010514b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010514f:	90                   	nop
+80105150:	c9                   	leave  
+    return -1;
+80105151:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105156:	c3                   	ret    
+80105157:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010515e:	66 90                	xchg   %ax,%ax
+
+80105160 <sys_close>:
+{
+80105160:	f3 0f 1e fb          	endbr32 
+80105164:	55                   	push   %ebp
+80105165:	89 e5                	mov    %esp,%ebp
+80105167:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, &fd, &f) < 0)
-80104dfa:	8d 55 f4             	lea    -0xc(%ebp),%edx
-80104dfd:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104e00:	e8 4b fe ff ff       	call   80104c50 <argfd.constprop.0>
-80104e05:	85 c0                	test   %eax,%eax
-80104e07:	78 27                	js     80104e30 <sys_close+0x40>
+8010516a:	8d 55 f4             	lea    -0xc(%ebp),%edx
+8010516d:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105170:	e8 4b fe ff ff       	call   80104fc0 <argfd.constprop.0>
+80105175:	85 c0                	test   %eax,%eax
+80105177:	78 27                	js     801051a0 <sys_close+0x40>
   myproc()->ofile[fd] = 0;
-80104e09:	e8 52 eb ff ff       	call   80103960 <myproc>
-80104e0e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+80105179:	e8 e2 e7 ff ff       	call   80103960 <myproc>
+8010517e:	8b 55 f0             	mov    -0x10(%ebp),%edx
   fileclose(f);
-80104e11:	83 ec 0c             	sub    $0xc,%esp
+80105181:	83 ec 0c             	sub    $0xc,%esp
   myproc()->ofile[fd] = 0;
-80104e14:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
-80104e1b:	00 
+80105184:	c7 44 90 2c 00 00 00 	movl   $0x0,0x2c(%eax,%edx,4)
+8010518b:	00 
   fileclose(f);
-80104e1c:	ff 75 f4             	pushl  -0xc(%ebp)
-80104e1f:	e8 9c c0 ff ff       	call   80100ec0 <fileclose>
+8010518c:	ff 75 f4             	pushl  -0xc(%ebp)
+8010518f:	e8 2c bd ff ff       	call   80100ec0 <fileclose>
   return 0;
-80104e24:	83 c4 10             	add    $0x10,%esp
-80104e27:	31 c0                	xor    %eax,%eax
+80105194:	83 c4 10             	add    $0x10,%esp
+80105197:	31 c0                	xor    %eax,%eax
 }
-80104e29:	c9                   	leave  
-80104e2a:	c3                   	ret    
-80104e2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104e2f:	90                   	nop
-80104e30:	c9                   	leave  
+80105199:	c9                   	leave  
+8010519a:	c3                   	ret    
+8010519b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010519f:	90                   	nop
+801051a0:	c9                   	leave  
     return -1;
-80104e31:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801051a1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80104e36:	c3                   	ret    
-80104e37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104e3e:	66 90                	xchg   %ax,%ax
+801051a6:	c3                   	ret    
+801051a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801051ae:	66 90                	xchg   %ax,%ax
 
-80104e40 <sys_fstat>:
+801051b0 <sys_fstat>:
 {
-80104e40:	f3 0f 1e fb          	endbr32 
-80104e44:	55                   	push   %ebp
+801051b0:	f3 0f 1e fb          	endbr32 
+801051b4:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-80104e45:	31 c0                	xor    %eax,%eax
+801051b5:	31 c0                	xor    %eax,%eax
 {
-80104e47:	89 e5                	mov    %esp,%ebp
-80104e49:	83 ec 18             	sub    $0x18,%esp
+801051b7:	89 e5                	mov    %esp,%ebp
+801051b9:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-80104e4c:	8d 55 f0             	lea    -0x10(%ebp),%edx
-80104e4f:	e8 fc fd ff ff       	call   80104c50 <argfd.constprop.0>
-80104e54:	85 c0                	test   %eax,%eax
-80104e56:	78 30                	js     80104e88 <sys_fstat+0x48>
-80104e58:	83 ec 04             	sub    $0x4,%esp
-80104e5b:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104e5e:	6a 14                	push   $0x14
-80104e60:	50                   	push   %eax
-80104e61:	6a 01                	push   $0x1
-80104e63:	e8 38 fb ff ff       	call   801049a0 <argptr>
-80104e68:	83 c4 10             	add    $0x10,%esp
-80104e6b:	85 c0                	test   %eax,%eax
-80104e6d:	78 19                	js     80104e88 <sys_fstat+0x48>
+801051bc:	8d 55 f0             	lea    -0x10(%ebp),%edx
+801051bf:	e8 fc fd ff ff       	call   80104fc0 <argfd.constprop.0>
+801051c4:	85 c0                	test   %eax,%eax
+801051c6:	78 30                	js     801051f8 <sys_fstat+0x48>
+801051c8:	83 ec 04             	sub    $0x4,%esp
+801051cb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801051ce:	6a 14                	push   $0x14
+801051d0:	50                   	push   %eax
+801051d1:	6a 01                	push   $0x1
+801051d3:	e8 38 fb ff ff       	call   80104d10 <argptr>
+801051d8:	83 c4 10             	add    $0x10,%esp
+801051db:	85 c0                	test   %eax,%eax
+801051dd:	78 19                	js     801051f8 <sys_fstat+0x48>
   return filestat(f, st);
-80104e6f:	83 ec 08             	sub    $0x8,%esp
-80104e72:	ff 75 f4             	pushl  -0xc(%ebp)
-80104e75:	ff 75 f0             	pushl  -0x10(%ebp)
-80104e78:	e8 23 c1 ff ff       	call   80100fa0 <filestat>
-80104e7d:	83 c4 10             	add    $0x10,%esp
-}
-80104e80:	c9                   	leave  
-80104e81:	c3                   	ret    
-80104e82:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104e88:	c9                   	leave  
-    return -1;
-80104e89:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104e8e:	c3                   	ret    
-80104e8f:	90                   	nop
-
-80104e90 <sys_link>:
-{
-80104e90:	f3 0f 1e fb          	endbr32 
-80104e94:	55                   	push   %ebp
-80104e95:	89 e5                	mov    %esp,%ebp
-80104e97:	57                   	push   %edi
-80104e98:	56                   	push   %esi
+801051df:	83 ec 08             	sub    $0x8,%esp
+801051e2:	ff 75 f4             	pushl  -0xc(%ebp)
+801051e5:	ff 75 f0             	pushl  -0x10(%ebp)
+801051e8:	e8 b3 bd ff ff       	call   80100fa0 <filestat>
+801051ed:	83 c4 10             	add    $0x10,%esp
+}
+801051f0:	c9                   	leave  
+801051f1:	c3                   	ret    
+801051f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801051f8:	c9                   	leave  
+    return -1;
+801051f9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801051fe:	c3                   	ret    
+801051ff:	90                   	nop
+
+80105200 <sys_link>:
+{
+80105200:	f3 0f 1e fb          	endbr32 
+80105204:	55                   	push   %ebp
+80105205:	89 e5                	mov    %esp,%ebp
+80105207:	57                   	push   %edi
+80105208:	56                   	push   %esi
   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-80104e99:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+80105209:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 {
-80104e9c:	53                   	push   %ebx
-80104e9d:	83 ec 34             	sub    $0x34,%esp
+8010520c:	53                   	push   %ebx
+8010520d:	83 ec 34             	sub    $0x34,%esp
   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-80104ea0:	50                   	push   %eax
-80104ea1:	6a 00                	push   $0x0
-80104ea3:	e8 58 fb ff ff       	call   80104a00 <argstr>
-80104ea8:	83 c4 10             	add    $0x10,%esp
-80104eab:	85 c0                	test   %eax,%eax
-80104ead:	0f 88 ff 00 00 00    	js     80104fb2 <sys_link+0x122>
-80104eb3:	83 ec 08             	sub    $0x8,%esp
-80104eb6:	8d 45 d0             	lea    -0x30(%ebp),%eax
-80104eb9:	50                   	push   %eax
-80104eba:	6a 01                	push   $0x1
-80104ebc:	e8 3f fb ff ff       	call   80104a00 <argstr>
-80104ec1:	83 c4 10             	add    $0x10,%esp
-80104ec4:	85 c0                	test   %eax,%eax
-80104ec6:	0f 88 e6 00 00 00    	js     80104fb2 <sys_link+0x122>
+80105210:	50                   	push   %eax
+80105211:	6a 00                	push   $0x0
+80105213:	e8 58 fb ff ff       	call   80104d70 <argstr>
+80105218:	83 c4 10             	add    $0x10,%esp
+8010521b:	85 c0                	test   %eax,%eax
+8010521d:	0f 88 ff 00 00 00    	js     80105322 <sys_link+0x122>
+80105223:	83 ec 08             	sub    $0x8,%esp
+80105226:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80105229:	50                   	push   %eax
+8010522a:	6a 01                	push   $0x1
+8010522c:	e8 3f fb ff ff       	call   80104d70 <argstr>
+80105231:	83 c4 10             	add    $0x10,%esp
+80105234:	85 c0                	test   %eax,%eax
+80105236:	0f 88 e6 00 00 00    	js     80105322 <sys_link+0x122>
   begin_op();
-80104ecc:	e8 5f de ff ff       	call   80102d30 <begin_op>
+8010523c:	e8 ef da ff ff       	call   80102d30 <begin_op>
   if((ip = namei(old)) == 0){
-80104ed1:	83 ec 0c             	sub    $0xc,%esp
-80104ed4:	ff 75 d4             	pushl  -0x2c(%ebp)
-80104ed7:	e8 54 d1 ff ff       	call   80102030 <namei>
-80104edc:	83 c4 10             	add    $0x10,%esp
-80104edf:	89 c3                	mov    %eax,%ebx
-80104ee1:	85 c0                	test   %eax,%eax
-80104ee3:	0f 84 e8 00 00 00    	je     80104fd1 <sys_link+0x141>
+80105241:	83 ec 0c             	sub    $0xc,%esp
+80105244:	ff 75 d4             	pushl  -0x2c(%ebp)
+80105247:	e8 e4 cd ff ff       	call   80102030 <namei>
+8010524c:	83 c4 10             	add    $0x10,%esp
+8010524f:	89 c3                	mov    %eax,%ebx
+80105251:	85 c0                	test   %eax,%eax
+80105253:	0f 84 e8 00 00 00    	je     80105341 <sys_link+0x141>
   ilock(ip);
-80104ee9:	83 ec 0c             	sub    $0xc,%esp
-80104eec:	50                   	push   %eax
-80104eed:	e8 6e c8 ff ff       	call   80101760 <ilock>
+80105259:	83 ec 0c             	sub    $0xc,%esp
+8010525c:	50                   	push   %eax
+8010525d:	e8 fe c4 ff ff       	call   80101760 <ilock>
   if(ip->type == T_DIR){
-80104ef2:	83 c4 10             	add    $0x10,%esp
-80104ef5:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80104efa:	0f 84 b9 00 00 00    	je     80104fb9 <sys_link+0x129>
+80105262:	83 c4 10             	add    $0x10,%esp
+80105265:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+8010526a:	0f 84 b9 00 00 00    	je     80105329 <sys_link+0x129>
   iupdate(ip);
-80104f00:	83 ec 0c             	sub    $0xc,%esp
+80105270:	83 ec 0c             	sub    $0xc,%esp
   ip->nlink++;
-80104f03:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+80105273:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
   if((dp = nameiparent(new, name)) == 0)
-80104f08:	8d 7d da             	lea    -0x26(%ebp),%edi
+80105278:	8d 7d da             	lea    -0x26(%ebp),%edi
   iupdate(ip);
-80104f0b:	53                   	push   %ebx
-80104f0c:	e8 8f c7 ff ff       	call   801016a0 <iupdate>
+8010527b:	53                   	push   %ebx
+8010527c:	e8 1f c4 ff ff       	call   801016a0 <iupdate>
   iunlock(ip);
-80104f11:	89 1c 24             	mov    %ebx,(%esp)
-80104f14:	e8 27 c9 ff ff       	call   80101840 <iunlock>
+80105281:	89 1c 24             	mov    %ebx,(%esp)
+80105284:	e8 b7 c5 ff ff       	call   80101840 <iunlock>
   if((dp = nameiparent(new, name)) == 0)
-80104f19:	58                   	pop    %eax
-80104f1a:	5a                   	pop    %edx
-80104f1b:	57                   	push   %edi
-80104f1c:	ff 75 d0             	pushl  -0x30(%ebp)
-80104f1f:	e8 2c d1 ff ff       	call   80102050 <nameiparent>
-80104f24:	83 c4 10             	add    $0x10,%esp
-80104f27:	89 c6                	mov    %eax,%esi
-80104f29:	85 c0                	test   %eax,%eax
-80104f2b:	74 5f                	je     80104f8c <sys_link+0xfc>
+80105289:	58                   	pop    %eax
+8010528a:	5a                   	pop    %edx
+8010528b:	57                   	push   %edi
+8010528c:	ff 75 d0             	pushl  -0x30(%ebp)
+8010528f:	e8 bc cd ff ff       	call   80102050 <nameiparent>
+80105294:	83 c4 10             	add    $0x10,%esp
+80105297:	89 c6                	mov    %eax,%esi
+80105299:	85 c0                	test   %eax,%eax
+8010529b:	74 5f                	je     801052fc <sys_link+0xfc>
   ilock(dp);
-80104f2d:	83 ec 0c             	sub    $0xc,%esp
-80104f30:	50                   	push   %eax
-80104f31:	e8 2a c8 ff ff       	call   80101760 <ilock>
+8010529d:	83 ec 0c             	sub    $0xc,%esp
+801052a0:	50                   	push   %eax
+801052a1:	e8 ba c4 ff ff       	call   80101760 <ilock>
   if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
-80104f36:	8b 03                	mov    (%ebx),%eax
-80104f38:	83 c4 10             	add    $0x10,%esp
-80104f3b:	39 06                	cmp    %eax,(%esi)
-80104f3d:	75 41                	jne    80104f80 <sys_link+0xf0>
-80104f3f:	83 ec 04             	sub    $0x4,%esp
-80104f42:	ff 73 04             	pushl  0x4(%ebx)
-80104f45:	57                   	push   %edi
-80104f46:	56                   	push   %esi
-80104f47:	e8 24 d0 ff ff       	call   80101f70 <dirlink>
-80104f4c:	83 c4 10             	add    $0x10,%esp
-80104f4f:	85 c0                	test   %eax,%eax
-80104f51:	78 2d                	js     80104f80 <sys_link+0xf0>
+801052a6:	8b 03                	mov    (%ebx),%eax
+801052a8:	83 c4 10             	add    $0x10,%esp
+801052ab:	39 06                	cmp    %eax,(%esi)
+801052ad:	75 41                	jne    801052f0 <sys_link+0xf0>
+801052af:	83 ec 04             	sub    $0x4,%esp
+801052b2:	ff 73 04             	pushl  0x4(%ebx)
+801052b5:	57                   	push   %edi
+801052b6:	56                   	push   %esi
+801052b7:	e8 b4 cc ff ff       	call   80101f70 <dirlink>
+801052bc:	83 c4 10             	add    $0x10,%esp
+801052bf:	85 c0                	test   %eax,%eax
+801052c1:	78 2d                	js     801052f0 <sys_link+0xf0>
   iunlockput(dp);
-80104f53:	83 ec 0c             	sub    $0xc,%esp
-80104f56:	56                   	push   %esi
-80104f57:	e8 a4 ca ff ff       	call   80101a00 <iunlockput>
+801052c3:	83 ec 0c             	sub    $0xc,%esp
+801052c6:	56                   	push   %esi
+801052c7:	e8 34 c7 ff ff       	call   80101a00 <iunlockput>
   iput(ip);
-80104f5c:	89 1c 24             	mov    %ebx,(%esp)
-80104f5f:	e8 2c c9 ff ff       	call   80101890 <iput>
+801052cc:	89 1c 24             	mov    %ebx,(%esp)
+801052cf:	e8 bc c5 ff ff       	call   80101890 <iput>
   end_op();
-80104f64:	e8 37 de ff ff       	call   80102da0 <end_op>
+801052d4:	e8 c7 da ff ff       	call   80102da0 <end_op>
   return 0;
-80104f69:	83 c4 10             	add    $0x10,%esp
-80104f6c:	31 c0                	xor    %eax,%eax
+801052d9:	83 c4 10             	add    $0x10,%esp
+801052dc:	31 c0                	xor    %eax,%eax
 }
-80104f6e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104f71:	5b                   	pop    %ebx
-80104f72:	5e                   	pop    %esi
-80104f73:	5f                   	pop    %edi
-80104f74:	5d                   	pop    %ebp
-80104f75:	c3                   	ret    
-80104f76:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104f7d:	8d 76 00             	lea    0x0(%esi),%esi
+801052de:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801052e1:	5b                   	pop    %ebx
+801052e2:	5e                   	pop    %esi
+801052e3:	5f                   	pop    %edi
+801052e4:	5d                   	pop    %ebp
+801052e5:	c3                   	ret    
+801052e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801052ed:	8d 76 00             	lea    0x0(%esi),%esi
     iunlockput(dp);
-80104f80:	83 ec 0c             	sub    $0xc,%esp
-80104f83:	56                   	push   %esi
-80104f84:	e8 77 ca ff ff       	call   80101a00 <iunlockput>
+801052f0:	83 ec 0c             	sub    $0xc,%esp
+801052f3:	56                   	push   %esi
+801052f4:	e8 07 c7 ff ff       	call   80101a00 <iunlockput>
     goto bad;
-80104f89:	83 c4 10             	add    $0x10,%esp
+801052f9:	83 c4 10             	add    $0x10,%esp
   ilock(ip);
-80104f8c:	83 ec 0c             	sub    $0xc,%esp
-80104f8f:	53                   	push   %ebx
-80104f90:	e8 cb c7 ff ff       	call   80101760 <ilock>
+801052fc:	83 ec 0c             	sub    $0xc,%esp
+801052ff:	53                   	push   %ebx
+80105300:	e8 5b c4 ff ff       	call   80101760 <ilock>
   ip->nlink--;
-80104f95:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+80105305:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
   iupdate(ip);
-80104f9a:	89 1c 24             	mov    %ebx,(%esp)
-80104f9d:	e8 fe c6 ff ff       	call   801016a0 <iupdate>
+8010530a:	89 1c 24             	mov    %ebx,(%esp)
+8010530d:	e8 8e c3 ff ff       	call   801016a0 <iupdate>
   iunlockput(ip);
-80104fa2:	89 1c 24             	mov    %ebx,(%esp)
-80104fa5:	e8 56 ca ff ff       	call   80101a00 <iunlockput>
+80105312:	89 1c 24             	mov    %ebx,(%esp)
+80105315:	e8 e6 c6 ff ff       	call   80101a00 <iunlockput>
   end_op();
-80104faa:	e8 f1 dd ff ff       	call   80102da0 <end_op>
+8010531a:	e8 81 da ff ff       	call   80102da0 <end_op>
   return -1;
-80104faf:	83 c4 10             	add    $0x10,%esp
-80104fb2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104fb7:	eb b5                	jmp    80104f6e <sys_link+0xde>
+8010531f:	83 c4 10             	add    $0x10,%esp
+80105322:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105327:	eb b5                	jmp    801052de <sys_link+0xde>
     iunlockput(ip);
-80104fb9:	83 ec 0c             	sub    $0xc,%esp
-80104fbc:	53                   	push   %ebx
-80104fbd:	e8 3e ca ff ff       	call   80101a00 <iunlockput>
+80105329:	83 ec 0c             	sub    $0xc,%esp
+8010532c:	53                   	push   %ebx
+8010532d:	e8 ce c6 ff ff       	call   80101a00 <iunlockput>
     end_op();
-80104fc2:	e8 d9 dd ff ff       	call   80102da0 <end_op>
+80105332:	e8 69 da ff ff       	call   80102da0 <end_op>
     return -1;
-80104fc7:	83 c4 10             	add    $0x10,%esp
-80104fca:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104fcf:	eb 9d                	jmp    80104f6e <sys_link+0xde>
+80105337:	83 c4 10             	add    $0x10,%esp
+8010533a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010533f:	eb 9d                	jmp    801052de <sys_link+0xde>
     end_op();
-80104fd1:	e8 ca dd ff ff       	call   80102da0 <end_op>
+80105341:	e8 5a da ff ff       	call   80102da0 <end_op>
     return -1;
-80104fd6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104fdb:	eb 91                	jmp    80104f6e <sys_link+0xde>
-80104fdd:	8d 76 00             	lea    0x0(%esi),%esi
-
-80104fe0 <sys_unlink>:
-{
-80104fe0:	f3 0f 1e fb          	endbr32 
-80104fe4:	55                   	push   %ebp
-80104fe5:	89 e5                	mov    %esp,%ebp
-80104fe7:	57                   	push   %edi
-80104fe8:	56                   	push   %esi
+80105346:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010534b:	eb 91                	jmp    801052de <sys_link+0xde>
+8010534d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80105350 <sys_unlink>:
+{
+80105350:	f3 0f 1e fb          	endbr32 
+80105354:	55                   	push   %ebp
+80105355:	89 e5                	mov    %esp,%ebp
+80105357:	57                   	push   %edi
+80105358:	56                   	push   %esi
   if(argstr(0, &path) < 0)
-80104fe9:	8d 45 c0             	lea    -0x40(%ebp),%eax
+80105359:	8d 45 c0             	lea    -0x40(%ebp),%eax
 {
-80104fec:	53                   	push   %ebx
-80104fed:	83 ec 54             	sub    $0x54,%esp
+8010535c:	53                   	push   %ebx
+8010535d:	83 ec 54             	sub    $0x54,%esp
   if(argstr(0, &path) < 0)
-80104ff0:	50                   	push   %eax
-80104ff1:	6a 00                	push   $0x0
-80104ff3:	e8 08 fa ff ff       	call   80104a00 <argstr>
-80104ff8:	83 c4 10             	add    $0x10,%esp
-80104ffb:	85 c0                	test   %eax,%eax
-80104ffd:	0f 88 7d 01 00 00    	js     80105180 <sys_unlink+0x1a0>
+80105360:	50                   	push   %eax
+80105361:	6a 00                	push   $0x0
+80105363:	e8 08 fa ff ff       	call   80104d70 <argstr>
+80105368:	83 c4 10             	add    $0x10,%esp
+8010536b:	85 c0                	test   %eax,%eax
+8010536d:	0f 88 7d 01 00 00    	js     801054f0 <sys_unlink+0x1a0>
   begin_op();
-80105003:	e8 28 dd ff ff       	call   80102d30 <begin_op>
+80105373:	e8 b8 d9 ff ff       	call   80102d30 <begin_op>
   if((dp = nameiparent(path, name)) == 0){
-80105008:	8d 5d ca             	lea    -0x36(%ebp),%ebx
-8010500b:	83 ec 08             	sub    $0x8,%esp
-8010500e:	53                   	push   %ebx
-8010500f:	ff 75 c0             	pushl  -0x40(%ebp)
-80105012:	e8 39 d0 ff ff       	call   80102050 <nameiparent>
-80105017:	83 c4 10             	add    $0x10,%esp
-8010501a:	89 c6                	mov    %eax,%esi
-8010501c:	85 c0                	test   %eax,%eax
-8010501e:	0f 84 66 01 00 00    	je     8010518a <sys_unlink+0x1aa>
+80105378:	8d 5d ca             	lea    -0x36(%ebp),%ebx
+8010537b:	83 ec 08             	sub    $0x8,%esp
+8010537e:	53                   	push   %ebx
+8010537f:	ff 75 c0             	pushl  -0x40(%ebp)
+80105382:	e8 c9 cc ff ff       	call   80102050 <nameiparent>
+80105387:	83 c4 10             	add    $0x10,%esp
+8010538a:	89 c6                	mov    %eax,%esi
+8010538c:	85 c0                	test   %eax,%eax
+8010538e:	0f 84 66 01 00 00    	je     801054fa <sys_unlink+0x1aa>
   ilock(dp);
-80105024:	83 ec 0c             	sub    $0xc,%esp
-80105027:	50                   	push   %eax
-80105028:	e8 33 c7 ff ff       	call   80101760 <ilock>
+80105394:	83 ec 0c             	sub    $0xc,%esp
+80105397:	50                   	push   %eax
+80105398:	e8 c3 c3 ff ff       	call   80101760 <ilock>
   if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
-8010502d:	58                   	pop    %eax
-8010502e:	5a                   	pop    %edx
-8010502f:	68 14 78 10 80       	push   $0x80107814
-80105034:	53                   	push   %ebx
-80105035:	e8 56 cc ff ff       	call   80101c90 <namecmp>
-8010503a:	83 c4 10             	add    $0x10,%esp
-8010503d:	85 c0                	test   %eax,%eax
-8010503f:	0f 84 03 01 00 00    	je     80105148 <sys_unlink+0x168>
-80105045:	83 ec 08             	sub    $0x8,%esp
-80105048:	68 13 78 10 80       	push   $0x80107813
-8010504d:	53                   	push   %ebx
-8010504e:	e8 3d cc ff ff       	call   80101c90 <namecmp>
-80105053:	83 c4 10             	add    $0x10,%esp
-80105056:	85 c0                	test   %eax,%eax
-80105058:	0f 84 ea 00 00 00    	je     80105148 <sys_unlink+0x168>
+8010539d:	58                   	pop    %eax
+8010539e:	5a                   	pop    %edx
+8010539f:	68 c0 7b 10 80       	push   $0x80107bc0
+801053a4:	53                   	push   %ebx
+801053a5:	e8 e6 c8 ff ff       	call   80101c90 <namecmp>
+801053aa:	83 c4 10             	add    $0x10,%esp
+801053ad:	85 c0                	test   %eax,%eax
+801053af:	0f 84 03 01 00 00    	je     801054b8 <sys_unlink+0x168>
+801053b5:	83 ec 08             	sub    $0x8,%esp
+801053b8:	68 bf 7b 10 80       	push   $0x80107bbf
+801053bd:	53                   	push   %ebx
+801053be:	e8 cd c8 ff ff       	call   80101c90 <namecmp>
+801053c3:	83 c4 10             	add    $0x10,%esp
+801053c6:	85 c0                	test   %eax,%eax
+801053c8:	0f 84 ea 00 00 00    	je     801054b8 <sys_unlink+0x168>
   if((ip = dirlookup(dp, name, &off)) == 0)
-8010505e:	83 ec 04             	sub    $0x4,%esp
-80105061:	8d 45 c4             	lea    -0x3c(%ebp),%eax
-80105064:	50                   	push   %eax
-80105065:	53                   	push   %ebx
-80105066:	56                   	push   %esi
-80105067:	e8 44 cc ff ff       	call   80101cb0 <dirlookup>
-8010506c:	83 c4 10             	add    $0x10,%esp
-8010506f:	89 c3                	mov    %eax,%ebx
-80105071:	85 c0                	test   %eax,%eax
-80105073:	0f 84 cf 00 00 00    	je     80105148 <sys_unlink+0x168>
+801053ce:	83 ec 04             	sub    $0x4,%esp
+801053d1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
+801053d4:	50                   	push   %eax
+801053d5:	53                   	push   %ebx
+801053d6:	56                   	push   %esi
+801053d7:	e8 d4 c8 ff ff       	call   80101cb0 <dirlookup>
+801053dc:	83 c4 10             	add    $0x10,%esp
+801053df:	89 c3                	mov    %eax,%ebx
+801053e1:	85 c0                	test   %eax,%eax
+801053e3:	0f 84 cf 00 00 00    	je     801054b8 <sys_unlink+0x168>
   ilock(ip);
-80105079:	83 ec 0c             	sub    $0xc,%esp
-8010507c:	50                   	push   %eax
-8010507d:	e8 de c6 ff ff       	call   80101760 <ilock>
+801053e9:	83 ec 0c             	sub    $0xc,%esp
+801053ec:	50                   	push   %eax
+801053ed:	e8 6e c3 ff ff       	call   80101760 <ilock>
   if(ip->nlink < 1)
-80105082:	83 c4 10             	add    $0x10,%esp
-80105085:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
-8010508a:	0f 8e 23 01 00 00    	jle    801051b3 <sys_unlink+0x1d3>
+801053f2:	83 c4 10             	add    $0x10,%esp
+801053f5:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+801053fa:	0f 8e 23 01 00 00    	jle    80105523 <sys_unlink+0x1d3>
   if(ip->type == T_DIR && !isdirempty(ip)){
-80105090:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80105095:	8d 7d d8             	lea    -0x28(%ebp),%edi
-80105098:	74 66                	je     80105100 <sys_unlink+0x120>
+80105400:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105405:	8d 7d d8             	lea    -0x28(%ebp),%edi
+80105408:	74 66                	je     80105470 <sys_unlink+0x120>
   memset(&de, 0, sizeof(de));
-8010509a:	83 ec 04             	sub    $0x4,%esp
-8010509d:	6a 10                	push   $0x10
-8010509f:	6a 00                	push   $0x0
-801050a1:	57                   	push   %edi
-801050a2:	e8 c9 f5 ff ff       	call   80104670 <memset>
+8010540a:	83 ec 04             	sub    $0x4,%esp
+8010540d:	6a 10                	push   $0x10
+8010540f:	6a 00                	push   $0x0
+80105411:	57                   	push   %edi
+80105412:	e8 c9 f5 ff ff       	call   801049e0 <memset>
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-801050a7:	6a 10                	push   $0x10
-801050a9:	ff 75 c4             	pushl  -0x3c(%ebp)
-801050ac:	57                   	push   %edi
-801050ad:	56                   	push   %esi
-801050ae:	e8 ad ca ff ff       	call   80101b60 <writei>
-801050b3:	83 c4 20             	add    $0x20,%esp
-801050b6:	83 f8 10             	cmp    $0x10,%eax
-801050b9:	0f 85 e7 00 00 00    	jne    801051a6 <sys_unlink+0x1c6>
+80105417:	6a 10                	push   $0x10
+80105419:	ff 75 c4             	pushl  -0x3c(%ebp)
+8010541c:	57                   	push   %edi
+8010541d:	56                   	push   %esi
+8010541e:	e8 3d c7 ff ff       	call   80101b60 <writei>
+80105423:	83 c4 20             	add    $0x20,%esp
+80105426:	83 f8 10             	cmp    $0x10,%eax
+80105429:	0f 85 e7 00 00 00    	jne    80105516 <sys_unlink+0x1c6>
   if(ip->type == T_DIR){
-801050bf:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-801050c4:	0f 84 96 00 00 00    	je     80105160 <sys_unlink+0x180>
+8010542f:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105434:	0f 84 96 00 00 00    	je     801054d0 <sys_unlink+0x180>
   iunlockput(dp);
-801050ca:	83 ec 0c             	sub    $0xc,%esp
-801050cd:	56                   	push   %esi
-801050ce:	e8 2d c9 ff ff       	call   80101a00 <iunlockput>
+8010543a:	83 ec 0c             	sub    $0xc,%esp
+8010543d:	56                   	push   %esi
+8010543e:	e8 bd c5 ff ff       	call   80101a00 <iunlockput>
   ip->nlink--;
-801050d3:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+80105443:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
   iupdate(ip);
-801050d8:	89 1c 24             	mov    %ebx,(%esp)
-801050db:	e8 c0 c5 ff ff       	call   801016a0 <iupdate>
+80105448:	89 1c 24             	mov    %ebx,(%esp)
+8010544b:	e8 50 c2 ff ff       	call   801016a0 <iupdate>
   iunlockput(ip);
-801050e0:	89 1c 24             	mov    %ebx,(%esp)
-801050e3:	e8 18 c9 ff ff       	call   80101a00 <iunlockput>
+80105450:	89 1c 24             	mov    %ebx,(%esp)
+80105453:	e8 a8 c5 ff ff       	call   80101a00 <iunlockput>
   end_op();
-801050e8:	e8 b3 dc ff ff       	call   80102da0 <end_op>
+80105458:	e8 43 d9 ff ff       	call   80102da0 <end_op>
   return 0;
-801050ed:	83 c4 10             	add    $0x10,%esp
-801050f0:	31 c0                	xor    %eax,%eax
+8010545d:	83 c4 10             	add    $0x10,%esp
+80105460:	31 c0                	xor    %eax,%eax
 }
-801050f2:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801050f5:	5b                   	pop    %ebx
-801050f6:	5e                   	pop    %esi
-801050f7:	5f                   	pop    %edi
-801050f8:	5d                   	pop    %ebp
-801050f9:	c3                   	ret    
-801050fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105462:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105465:	5b                   	pop    %ebx
+80105466:	5e                   	pop    %esi
+80105467:	5f                   	pop    %edi
+80105468:	5d                   	pop    %ebp
+80105469:	c3                   	ret    
+8010546a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
-80105100:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
-80105104:	76 94                	jbe    8010509a <sys_unlink+0xba>
-80105106:	ba 20 00 00 00       	mov    $0x20,%edx
-8010510b:	eb 0b                	jmp    80105118 <sys_unlink+0x138>
-8010510d:	8d 76 00             	lea    0x0(%esi),%esi
-80105110:	83 c2 10             	add    $0x10,%edx
-80105113:	39 53 58             	cmp    %edx,0x58(%ebx)
-80105116:	76 82                	jbe    8010509a <sys_unlink+0xba>
+80105470:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
+80105474:	76 94                	jbe    8010540a <sys_unlink+0xba>
+80105476:	ba 20 00 00 00       	mov    $0x20,%edx
+8010547b:	eb 0b                	jmp    80105488 <sys_unlink+0x138>
+8010547d:	8d 76 00             	lea    0x0(%esi),%esi
+80105480:	83 c2 10             	add    $0x10,%edx
+80105483:	39 53 58             	cmp    %edx,0x58(%ebx)
+80105486:	76 82                	jbe    8010540a <sys_unlink+0xba>
     if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80105118:	6a 10                	push   $0x10
-8010511a:	52                   	push   %edx
-8010511b:	57                   	push   %edi
-8010511c:	53                   	push   %ebx
-8010511d:	89 55 b4             	mov    %edx,-0x4c(%ebp)
-80105120:	e8 3b c9 ff ff       	call   80101a60 <readi>
-80105125:	83 c4 10             	add    $0x10,%esp
-80105128:	8b 55 b4             	mov    -0x4c(%ebp),%edx
-8010512b:	83 f8 10             	cmp    $0x10,%eax
-8010512e:	75 69                	jne    80105199 <sys_unlink+0x1b9>
+80105488:	6a 10                	push   $0x10
+8010548a:	52                   	push   %edx
+8010548b:	57                   	push   %edi
+8010548c:	53                   	push   %ebx
+8010548d:	89 55 b4             	mov    %edx,-0x4c(%ebp)
+80105490:	e8 cb c5 ff ff       	call   80101a60 <readi>
+80105495:	83 c4 10             	add    $0x10,%esp
+80105498:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+8010549b:	83 f8 10             	cmp    $0x10,%eax
+8010549e:	75 69                	jne    80105509 <sys_unlink+0x1b9>
     if(de.inum != 0)
-80105130:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
-80105135:	74 d9                	je     80105110 <sys_unlink+0x130>
+801054a0:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+801054a5:	74 d9                	je     80105480 <sys_unlink+0x130>
     iunlockput(ip);
-80105137:	83 ec 0c             	sub    $0xc,%esp
-8010513a:	53                   	push   %ebx
-8010513b:	e8 c0 c8 ff ff       	call   80101a00 <iunlockput>
+801054a7:	83 ec 0c             	sub    $0xc,%esp
+801054aa:	53                   	push   %ebx
+801054ab:	e8 50 c5 ff ff       	call   80101a00 <iunlockput>
     goto bad;
-80105140:	83 c4 10             	add    $0x10,%esp
-80105143:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105147:	90                   	nop
+801054b0:	83 c4 10             	add    $0x10,%esp
+801054b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801054b7:	90                   	nop
   iunlockput(dp);
-80105148:	83 ec 0c             	sub    $0xc,%esp
-8010514b:	56                   	push   %esi
-8010514c:	e8 af c8 ff ff       	call   80101a00 <iunlockput>
+801054b8:	83 ec 0c             	sub    $0xc,%esp
+801054bb:	56                   	push   %esi
+801054bc:	e8 3f c5 ff ff       	call   80101a00 <iunlockput>
   end_op();
-80105151:	e8 4a dc ff ff       	call   80102da0 <end_op>
+801054c1:	e8 da d8 ff ff       	call   80102da0 <end_op>
   return -1;
-80105156:	83 c4 10             	add    $0x10,%esp
-80105159:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010515e:	eb 92                	jmp    801050f2 <sys_unlink+0x112>
+801054c6:	83 c4 10             	add    $0x10,%esp
+801054c9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801054ce:	eb 92                	jmp    80105462 <sys_unlink+0x112>
     iupdate(dp);
-80105160:	83 ec 0c             	sub    $0xc,%esp
+801054d0:	83 ec 0c             	sub    $0xc,%esp
     dp->nlink--;
-80105163:	66 83 6e 56 01       	subw   $0x1,0x56(%esi)
+801054d3:	66 83 6e 56 01       	subw   $0x1,0x56(%esi)
     iupdate(dp);
-80105168:	56                   	push   %esi
-80105169:	e8 32 c5 ff ff       	call   801016a0 <iupdate>
-8010516e:	83 c4 10             	add    $0x10,%esp
-80105171:	e9 54 ff ff ff       	jmp    801050ca <sys_unlink+0xea>
-80105176:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010517d:	8d 76 00             	lea    0x0(%esi),%esi
+801054d8:	56                   	push   %esi
+801054d9:	e8 c2 c1 ff ff       	call   801016a0 <iupdate>
+801054de:	83 c4 10             	add    $0x10,%esp
+801054e1:	e9 54 ff ff ff       	jmp    8010543a <sys_unlink+0xea>
+801054e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801054ed:	8d 76 00             	lea    0x0(%esi),%esi
     return -1;
-80105180:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105185:	e9 68 ff ff ff       	jmp    801050f2 <sys_unlink+0x112>
+801054f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801054f5:	e9 68 ff ff ff       	jmp    80105462 <sys_unlink+0x112>
     end_op();
-8010518a:	e8 11 dc ff ff       	call   80102da0 <end_op>
+801054fa:	e8 a1 d8 ff ff       	call   80102da0 <end_op>
     return -1;
-8010518f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105194:	e9 59 ff ff ff       	jmp    801050f2 <sys_unlink+0x112>
+801054ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105504:	e9 59 ff ff ff       	jmp    80105462 <sys_unlink+0x112>
       panic("isdirempty: readi");
-80105199:	83 ec 0c             	sub    $0xc,%esp
-8010519c:	68 38 78 10 80       	push   $0x80107838
-801051a1:	e8 ea b1 ff ff       	call   80100390 <panic>
+80105509:	83 ec 0c             	sub    $0xc,%esp
+8010550c:	68 e4 7b 10 80       	push   $0x80107be4
+80105511:	e8 7a ae ff ff       	call   80100390 <panic>
     panic("unlink: writei");
-801051a6:	83 ec 0c             	sub    $0xc,%esp
-801051a9:	68 4a 78 10 80       	push   $0x8010784a
-801051ae:	e8 dd b1 ff ff       	call   80100390 <panic>
+80105516:	83 ec 0c             	sub    $0xc,%esp
+80105519:	68 f6 7b 10 80       	push   $0x80107bf6
+8010551e:	e8 6d ae ff ff       	call   80100390 <panic>
     panic("unlink: nlink < 1");
-801051b3:	83 ec 0c             	sub    $0xc,%esp
-801051b6:	68 26 78 10 80       	push   $0x80107826
-801051bb:	e8 d0 b1 ff ff       	call   80100390 <panic>
+80105523:	83 ec 0c             	sub    $0xc,%esp
+80105526:	68 d2 7b 10 80       	push   $0x80107bd2
+8010552b:	e8 60 ae ff ff       	call   80100390 <panic>
 
-801051c0 <sys_open>:
+80105530 <sys_open>:
 
 int
 sys_open(void)
 {
-801051c0:	f3 0f 1e fb          	endbr32 
-801051c4:	55                   	push   %ebp
-801051c5:	89 e5                	mov    %esp,%ebp
-801051c7:	57                   	push   %edi
-801051c8:	56                   	push   %esi
+80105530:	f3 0f 1e fb          	endbr32 
+80105534:	55                   	push   %ebp
+80105535:	89 e5                	mov    %esp,%ebp
+80105537:	57                   	push   %edi
+80105538:	56                   	push   %esi
   char *path;
   int fd, omode;
   struct file *f;
   struct inode *ip;
 
   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-801051c9:	8d 45 e0             	lea    -0x20(%ebp),%eax
+80105539:	8d 45 e0             	lea    -0x20(%ebp),%eax
 {
-801051cc:	53                   	push   %ebx
-801051cd:	83 ec 24             	sub    $0x24,%esp
+8010553c:	53                   	push   %ebx
+8010553d:	83 ec 24             	sub    $0x24,%esp
   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-801051d0:	50                   	push   %eax
-801051d1:	6a 00                	push   $0x0
-801051d3:	e8 28 f8 ff ff       	call   80104a00 <argstr>
-801051d8:	83 c4 10             	add    $0x10,%esp
-801051db:	85 c0                	test   %eax,%eax
-801051dd:	0f 88 8a 00 00 00    	js     8010526d <sys_open+0xad>
-801051e3:	83 ec 08             	sub    $0x8,%esp
-801051e6:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-801051e9:	50                   	push   %eax
-801051ea:	6a 01                	push   $0x1
-801051ec:	e8 5f f7 ff ff       	call   80104950 <argint>
-801051f1:	83 c4 10             	add    $0x10,%esp
-801051f4:	85 c0                	test   %eax,%eax
-801051f6:	78 75                	js     8010526d <sys_open+0xad>
+80105540:	50                   	push   %eax
+80105541:	6a 00                	push   $0x0
+80105543:	e8 28 f8 ff ff       	call   80104d70 <argstr>
+80105548:	83 c4 10             	add    $0x10,%esp
+8010554b:	85 c0                	test   %eax,%eax
+8010554d:	0f 88 8a 00 00 00    	js     801055dd <sys_open+0xad>
+80105553:	83 ec 08             	sub    $0x8,%esp
+80105556:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105559:	50                   	push   %eax
+8010555a:	6a 01                	push   $0x1
+8010555c:	e8 5f f7 ff ff       	call   80104cc0 <argint>
+80105561:	83 c4 10             	add    $0x10,%esp
+80105564:	85 c0                	test   %eax,%eax
+80105566:	78 75                	js     801055dd <sys_open+0xad>
     return -1;
 
   begin_op();
-801051f8:	e8 33 db ff ff       	call   80102d30 <begin_op>
+80105568:	e8 c3 d7 ff ff       	call   80102d30 <begin_op>
 
   if(omode & O_CREATE){
-801051fd:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
-80105201:	75 75                	jne    80105278 <sys_open+0xb8>
+8010556d:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
+80105571:	75 75                	jne    801055e8 <sys_open+0xb8>
     if(ip == 0){
       end_op();
       return -1;
     }
   } else {
     if((ip = namei(path)) == 0){
-80105203:	83 ec 0c             	sub    $0xc,%esp
-80105206:	ff 75 e0             	pushl  -0x20(%ebp)
-80105209:	e8 22 ce ff ff       	call   80102030 <namei>
-8010520e:	83 c4 10             	add    $0x10,%esp
-80105211:	89 c6                	mov    %eax,%esi
-80105213:	85 c0                	test   %eax,%eax
-80105215:	74 7e                	je     80105295 <sys_open+0xd5>
+80105573:	83 ec 0c             	sub    $0xc,%esp
+80105576:	ff 75 e0             	pushl  -0x20(%ebp)
+80105579:	e8 b2 ca ff ff       	call   80102030 <namei>
+8010557e:	83 c4 10             	add    $0x10,%esp
+80105581:	89 c6                	mov    %eax,%esi
+80105583:	85 c0                	test   %eax,%eax
+80105585:	74 7e                	je     80105605 <sys_open+0xd5>
       end_op();
       return -1;
     }
     ilock(ip);
-80105217:	83 ec 0c             	sub    $0xc,%esp
-8010521a:	50                   	push   %eax
-8010521b:	e8 40 c5 ff ff       	call   80101760 <ilock>
+80105587:	83 ec 0c             	sub    $0xc,%esp
+8010558a:	50                   	push   %eax
+8010558b:	e8 d0 c1 ff ff       	call   80101760 <ilock>
     if(ip->type == T_DIR && omode != O_RDONLY){
-80105220:	83 c4 10             	add    $0x10,%esp
-80105223:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
-80105228:	0f 84 c2 00 00 00    	je     801052f0 <sys_open+0x130>
+80105590:	83 c4 10             	add    $0x10,%esp
+80105593:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+80105598:	0f 84 c2 00 00 00    	je     80105660 <sys_open+0x130>
       end_op();
       return -1;
     }
   }
 
   if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
-8010522e:	e8 cd bb ff ff       	call   80100e00 <filealloc>
-80105233:	89 c7                	mov    %eax,%edi
-80105235:	85 c0                	test   %eax,%eax
-80105237:	74 23                	je     8010525c <sys_open+0x9c>
+8010559e:	e8 5d b8 ff ff       	call   80100e00 <filealloc>
+801055a3:	89 c7                	mov    %eax,%edi
+801055a5:	85 c0                	test   %eax,%eax
+801055a7:	74 23                	je     801055cc <sys_open+0x9c>
   struct proc *curproc = myproc();
-80105239:	e8 22 e7 ff ff       	call   80103960 <myproc>
+801055a9:	e8 b2 e3 ff ff       	call   80103960 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-8010523e:	31 db                	xor    %ebx,%ebx
+801055ae:	31 db                	xor    %ebx,%ebx
     if(curproc->ofile[fd] == 0){
-80105240:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-80105244:	85 d2                	test   %edx,%edx
-80105246:	74 60                	je     801052a8 <sys_open+0xe8>
+801055b0:	8b 54 98 2c          	mov    0x2c(%eax,%ebx,4),%edx
+801055b4:	85 d2                	test   %edx,%edx
+801055b6:	74 60                	je     80105618 <sys_open+0xe8>
   for(fd = 0; fd < NOFILE; fd++){
-80105248:	83 c3 01             	add    $0x1,%ebx
-8010524b:	83 fb 10             	cmp    $0x10,%ebx
-8010524e:	75 f0                	jne    80105240 <sys_open+0x80>
+801055b8:	83 c3 01             	add    $0x1,%ebx
+801055bb:	83 fb 10             	cmp    $0x10,%ebx
+801055be:	75 f0                	jne    801055b0 <sys_open+0x80>
     if(f)
       fileclose(f);
-80105250:	83 ec 0c             	sub    $0xc,%esp
-80105253:	57                   	push   %edi
-80105254:	e8 67 bc ff ff       	call   80100ec0 <fileclose>
-80105259:	83 c4 10             	add    $0x10,%esp
+801055c0:	83 ec 0c             	sub    $0xc,%esp
+801055c3:	57                   	push   %edi
+801055c4:	e8 f7 b8 ff ff       	call   80100ec0 <fileclose>
+801055c9:	83 c4 10             	add    $0x10,%esp
     iunlockput(ip);
-8010525c:	83 ec 0c             	sub    $0xc,%esp
-8010525f:	56                   	push   %esi
-80105260:	e8 9b c7 ff ff       	call   80101a00 <iunlockput>
+801055cc:	83 ec 0c             	sub    $0xc,%esp
+801055cf:	56                   	push   %esi
+801055d0:	e8 2b c4 ff ff       	call   80101a00 <iunlockput>
     end_op();
-80105265:	e8 36 db ff ff       	call   80102da0 <end_op>
+801055d5:	e8 c6 d7 ff ff       	call   80102da0 <end_op>
     return -1;
-8010526a:	83 c4 10             	add    $0x10,%esp
-8010526d:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80105272:	eb 6d                	jmp    801052e1 <sys_open+0x121>
-80105274:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801055da:	83 c4 10             	add    $0x10,%esp
+801055dd:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+801055e2:	eb 6d                	jmp    80105651 <sys_open+0x121>
+801055e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     ip = create(path, T_FILE, 0, 0);
-80105278:	83 ec 0c             	sub    $0xc,%esp
-8010527b:	8b 45 e0             	mov    -0x20(%ebp),%eax
-8010527e:	31 c9                	xor    %ecx,%ecx
-80105280:	ba 02 00 00 00       	mov    $0x2,%edx
-80105285:	6a 00                	push   $0x0
-80105287:	e8 24 f8 ff ff       	call   80104ab0 <create>
+801055e8:	83 ec 0c             	sub    $0xc,%esp
+801055eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801055ee:	31 c9                	xor    %ecx,%ecx
+801055f0:	ba 02 00 00 00       	mov    $0x2,%edx
+801055f5:	6a 00                	push   $0x0
+801055f7:	e8 24 f8 ff ff       	call   80104e20 <create>
     if(ip == 0){
-8010528c:	83 c4 10             	add    $0x10,%esp
+801055fc:	83 c4 10             	add    $0x10,%esp
     ip = create(path, T_FILE, 0, 0);
-8010528f:	89 c6                	mov    %eax,%esi
+801055ff:	89 c6                	mov    %eax,%esi
     if(ip == 0){
-80105291:	85 c0                	test   %eax,%eax
-80105293:	75 99                	jne    8010522e <sys_open+0x6e>
+80105601:	85 c0                	test   %eax,%eax
+80105603:	75 99                	jne    8010559e <sys_open+0x6e>
       end_op();
-80105295:	e8 06 db ff ff       	call   80102da0 <end_op>
+80105605:	e8 96 d7 ff ff       	call   80102da0 <end_op>
       return -1;
-8010529a:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-8010529f:	eb 40                	jmp    801052e1 <sys_open+0x121>
-801052a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010560a:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+8010560f:	eb 40                	jmp    80105651 <sys_open+0x121>
+80105611:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   }
   iunlock(ip);
-801052a8:	83 ec 0c             	sub    $0xc,%esp
+80105618:	83 ec 0c             	sub    $0xc,%esp
       curproc->ofile[fd] = f;
-801052ab:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
+8010561b:	89 7c 98 2c          	mov    %edi,0x2c(%eax,%ebx,4)
   iunlock(ip);
-801052af:	56                   	push   %esi
-801052b0:	e8 8b c5 ff ff       	call   80101840 <iunlock>
+8010561f:	56                   	push   %esi
+80105620:	e8 1b c2 ff ff       	call   80101840 <iunlock>
   end_op();
-801052b5:	e8 e6 da ff ff       	call   80102da0 <end_op>
+80105625:	e8 76 d7 ff ff       	call   80102da0 <end_op>
 
   f->type = FD_INODE;
-801052ba:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
+8010562a:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
   f->ip = ip;
   f->off = 0;
   f->readable = !(omode & O_WRONLY);
-801052c0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80105630:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801052c3:	83 c4 10             	add    $0x10,%esp
+80105633:	83 c4 10             	add    $0x10,%esp
   f->ip = ip;
-801052c6:	89 77 10             	mov    %esi,0x10(%edi)
+80105636:	89 77 10             	mov    %esi,0x10(%edi)
   f->readable = !(omode & O_WRONLY);
-801052c9:	89 d0                	mov    %edx,%eax
+80105639:	89 d0                	mov    %edx,%eax
   f->off = 0;
-801052cb:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
+8010563b:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
   f->readable = !(omode & O_WRONLY);
-801052d2:	f7 d0                	not    %eax
-801052d4:	83 e0 01             	and    $0x1,%eax
+80105642:	f7 d0                	not    %eax
+80105644:	83 e0 01             	and    $0x1,%eax
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801052d7:	83 e2 03             	and    $0x3,%edx
+80105647:	83 e2 03             	and    $0x3,%edx
   f->readable = !(omode & O_WRONLY);
-801052da:	88 47 08             	mov    %al,0x8(%edi)
+8010564a:	88 47 08             	mov    %al,0x8(%edi)
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801052dd:	0f 95 47 09          	setne  0x9(%edi)
+8010564d:	0f 95 47 09          	setne  0x9(%edi)
   return fd;
 }
-801052e1:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801052e4:	89 d8                	mov    %ebx,%eax
-801052e6:	5b                   	pop    %ebx
-801052e7:	5e                   	pop    %esi
-801052e8:	5f                   	pop    %edi
-801052e9:	5d                   	pop    %ebp
-801052ea:	c3                   	ret    
-801052eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801052ef:	90                   	nop
+80105651:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105654:	89 d8                	mov    %ebx,%eax
+80105656:	5b                   	pop    %ebx
+80105657:	5e                   	pop    %esi
+80105658:	5f                   	pop    %edi
+80105659:	5d                   	pop    %ebp
+8010565a:	c3                   	ret    
+8010565b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010565f:	90                   	nop
     if(ip->type == T_DIR && omode != O_RDONLY){
-801052f0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-801052f3:	85 c9                	test   %ecx,%ecx
-801052f5:	0f 84 33 ff ff ff    	je     8010522e <sys_open+0x6e>
-801052fb:	e9 5c ff ff ff       	jmp    8010525c <sys_open+0x9c>
+80105660:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80105663:	85 c9                	test   %ecx,%ecx
+80105665:	0f 84 33 ff ff ff    	je     8010559e <sys_open+0x6e>
+8010566b:	e9 5c ff ff ff       	jmp    801055cc <sys_open+0x9c>
 
-80105300 <sys_mkdir>:
+80105670 <sys_mkdir>:
 
 int
 sys_mkdir(void)
 {
-80105300:	f3 0f 1e fb          	endbr32 
-80105304:	55                   	push   %ebp
-80105305:	89 e5                	mov    %esp,%ebp
-80105307:	83 ec 18             	sub    $0x18,%esp
+80105670:	f3 0f 1e fb          	endbr32 
+80105674:	55                   	push   %ebp
+80105675:	89 e5                	mov    %esp,%ebp
+80105677:	83 ec 18             	sub    $0x18,%esp
   char *path;
   struct inode *ip;
 
   begin_op();
-8010530a:	e8 21 da ff ff       	call   80102d30 <begin_op>
+8010567a:	e8 b1 d6 ff ff       	call   80102d30 <begin_op>
   if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
-8010530f:	83 ec 08             	sub    $0x8,%esp
-80105312:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105315:	50                   	push   %eax
-80105316:	6a 00                	push   $0x0
-80105318:	e8 e3 f6 ff ff       	call   80104a00 <argstr>
-8010531d:	83 c4 10             	add    $0x10,%esp
-80105320:	85 c0                	test   %eax,%eax
-80105322:	78 34                	js     80105358 <sys_mkdir+0x58>
-80105324:	83 ec 0c             	sub    $0xc,%esp
-80105327:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010532a:	31 c9                	xor    %ecx,%ecx
-8010532c:	ba 01 00 00 00       	mov    $0x1,%edx
-80105331:	6a 00                	push   $0x0
-80105333:	e8 78 f7 ff ff       	call   80104ab0 <create>
-80105338:	83 c4 10             	add    $0x10,%esp
-8010533b:	85 c0                	test   %eax,%eax
-8010533d:	74 19                	je     80105358 <sys_mkdir+0x58>
+8010567f:	83 ec 08             	sub    $0x8,%esp
+80105682:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105685:	50                   	push   %eax
+80105686:	6a 00                	push   $0x0
+80105688:	e8 e3 f6 ff ff       	call   80104d70 <argstr>
+8010568d:	83 c4 10             	add    $0x10,%esp
+80105690:	85 c0                	test   %eax,%eax
+80105692:	78 34                	js     801056c8 <sys_mkdir+0x58>
+80105694:	83 ec 0c             	sub    $0xc,%esp
+80105697:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010569a:	31 c9                	xor    %ecx,%ecx
+8010569c:	ba 01 00 00 00       	mov    $0x1,%edx
+801056a1:	6a 00                	push   $0x0
+801056a3:	e8 78 f7 ff ff       	call   80104e20 <create>
+801056a8:	83 c4 10             	add    $0x10,%esp
+801056ab:	85 c0                	test   %eax,%eax
+801056ad:	74 19                	je     801056c8 <sys_mkdir+0x58>
     end_op();
     return -1;
   }
   iunlockput(ip);
-8010533f:	83 ec 0c             	sub    $0xc,%esp
-80105342:	50                   	push   %eax
-80105343:	e8 b8 c6 ff ff       	call   80101a00 <iunlockput>
+801056af:	83 ec 0c             	sub    $0xc,%esp
+801056b2:	50                   	push   %eax
+801056b3:	e8 48 c3 ff ff       	call   80101a00 <iunlockput>
   end_op();
-80105348:	e8 53 da ff ff       	call   80102da0 <end_op>
+801056b8:	e8 e3 d6 ff ff       	call   80102da0 <end_op>
   return 0;
-8010534d:	83 c4 10             	add    $0x10,%esp
-80105350:	31 c0                	xor    %eax,%eax
+801056bd:	83 c4 10             	add    $0x10,%esp
+801056c0:	31 c0                	xor    %eax,%eax
 }
-80105352:	c9                   	leave  
-80105353:	c3                   	ret    
-80105354:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801056c2:	c9                   	leave  
+801056c3:	c3                   	ret    
+801056c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     end_op();
-80105358:	e8 43 da ff ff       	call   80102da0 <end_op>
+801056c8:	e8 d3 d6 ff ff       	call   80102da0 <end_op>
     return -1;
-8010535d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801056cd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105362:	c9                   	leave  
-80105363:	c3                   	ret    
-80105364:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010536b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010536f:	90                   	nop
+801056d2:	c9                   	leave  
+801056d3:	c3                   	ret    
+801056d4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801056db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801056df:	90                   	nop
 
-80105370 <sys_mknod>:
+801056e0 <sys_mknod>:
 
 int
 sys_mknod(void)
 {
-80105370:	f3 0f 1e fb          	endbr32 
-80105374:	55                   	push   %ebp
-80105375:	89 e5                	mov    %esp,%ebp
-80105377:	83 ec 18             	sub    $0x18,%esp
+801056e0:	f3 0f 1e fb          	endbr32 
+801056e4:	55                   	push   %ebp
+801056e5:	89 e5                	mov    %esp,%ebp
+801056e7:	83 ec 18             	sub    $0x18,%esp
   struct inode *ip;
   char *path;
   int major, minor;
 
   begin_op();
-8010537a:	e8 b1 d9 ff ff       	call   80102d30 <begin_op>
+801056ea:	e8 41 d6 ff ff       	call   80102d30 <begin_op>
   if((argstr(0, &path)) < 0 ||
-8010537f:	83 ec 08             	sub    $0x8,%esp
-80105382:	8d 45 ec             	lea    -0x14(%ebp),%eax
-80105385:	50                   	push   %eax
-80105386:	6a 00                	push   $0x0
-80105388:	e8 73 f6 ff ff       	call   80104a00 <argstr>
-8010538d:	83 c4 10             	add    $0x10,%esp
-80105390:	85 c0                	test   %eax,%eax
-80105392:	78 64                	js     801053f8 <sys_mknod+0x88>
+801056ef:	83 ec 08             	sub    $0x8,%esp
+801056f2:	8d 45 ec             	lea    -0x14(%ebp),%eax
+801056f5:	50                   	push   %eax
+801056f6:	6a 00                	push   $0x0
+801056f8:	e8 73 f6 ff ff       	call   80104d70 <argstr>
+801056fd:	83 c4 10             	add    $0x10,%esp
+80105700:	85 c0                	test   %eax,%eax
+80105702:	78 64                	js     80105768 <sys_mknod+0x88>
      argint(1, &major) < 0 ||
-80105394:	83 ec 08             	sub    $0x8,%esp
-80105397:	8d 45 f0             	lea    -0x10(%ebp),%eax
-8010539a:	50                   	push   %eax
-8010539b:	6a 01                	push   $0x1
-8010539d:	e8 ae f5 ff ff       	call   80104950 <argint>
+80105704:	83 ec 08             	sub    $0x8,%esp
+80105707:	8d 45 f0             	lea    -0x10(%ebp),%eax
+8010570a:	50                   	push   %eax
+8010570b:	6a 01                	push   $0x1
+8010570d:	e8 ae f5 ff ff       	call   80104cc0 <argint>
   if((argstr(0, &path)) < 0 ||
-801053a2:	83 c4 10             	add    $0x10,%esp
-801053a5:	85 c0                	test   %eax,%eax
-801053a7:	78 4f                	js     801053f8 <sys_mknod+0x88>
+80105712:	83 c4 10             	add    $0x10,%esp
+80105715:	85 c0                	test   %eax,%eax
+80105717:	78 4f                	js     80105768 <sys_mknod+0x88>
      argint(2, &minor) < 0 ||
-801053a9:	83 ec 08             	sub    $0x8,%esp
-801053ac:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801053af:	50                   	push   %eax
-801053b0:	6a 02                	push   $0x2
-801053b2:	e8 99 f5 ff ff       	call   80104950 <argint>
+80105719:	83 ec 08             	sub    $0x8,%esp
+8010571c:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010571f:	50                   	push   %eax
+80105720:	6a 02                	push   $0x2
+80105722:	e8 99 f5 ff ff       	call   80104cc0 <argint>
      argint(1, &major) < 0 ||
-801053b7:	83 c4 10             	add    $0x10,%esp
-801053ba:	85 c0                	test   %eax,%eax
-801053bc:	78 3a                	js     801053f8 <sys_mknod+0x88>
+80105727:	83 c4 10             	add    $0x10,%esp
+8010572a:	85 c0                	test   %eax,%eax
+8010572c:	78 3a                	js     80105768 <sys_mknod+0x88>
      (ip = create(path, T_DEV, major, minor)) == 0){
-801053be:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
-801053c2:	83 ec 0c             	sub    $0xc,%esp
-801053c5:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
-801053c9:	ba 03 00 00 00       	mov    $0x3,%edx
-801053ce:	50                   	push   %eax
-801053cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
-801053d2:	e8 d9 f6 ff ff       	call   80104ab0 <create>
+8010572e:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
+80105732:	83 ec 0c             	sub    $0xc,%esp
+80105735:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
+80105739:	ba 03 00 00 00       	mov    $0x3,%edx
+8010573e:	50                   	push   %eax
+8010573f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80105742:	e8 d9 f6 ff ff       	call   80104e20 <create>
      argint(2, &minor) < 0 ||
-801053d7:	83 c4 10             	add    $0x10,%esp
-801053da:	85 c0                	test   %eax,%eax
-801053dc:	74 1a                	je     801053f8 <sys_mknod+0x88>
+80105747:	83 c4 10             	add    $0x10,%esp
+8010574a:	85 c0                	test   %eax,%eax
+8010574c:	74 1a                	je     80105768 <sys_mknod+0x88>
     end_op();
     return -1;
   }
   iunlockput(ip);
-801053de:	83 ec 0c             	sub    $0xc,%esp
-801053e1:	50                   	push   %eax
-801053e2:	e8 19 c6 ff ff       	call   80101a00 <iunlockput>
+8010574e:	83 ec 0c             	sub    $0xc,%esp
+80105751:	50                   	push   %eax
+80105752:	e8 a9 c2 ff ff       	call   80101a00 <iunlockput>
   end_op();
-801053e7:	e8 b4 d9 ff ff       	call   80102da0 <end_op>
+80105757:	e8 44 d6 ff ff       	call   80102da0 <end_op>
   return 0;
-801053ec:	83 c4 10             	add    $0x10,%esp
-801053ef:	31 c0                	xor    %eax,%eax
+8010575c:	83 c4 10             	add    $0x10,%esp
+8010575f:	31 c0                	xor    %eax,%eax
 }
-801053f1:	c9                   	leave  
-801053f2:	c3                   	ret    
-801053f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801053f7:	90                   	nop
+80105761:	c9                   	leave  
+80105762:	c3                   	ret    
+80105763:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105767:	90                   	nop
     end_op();
-801053f8:	e8 a3 d9 ff ff       	call   80102da0 <end_op>
+80105768:	e8 33 d6 ff ff       	call   80102da0 <end_op>
     return -1;
-801053fd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010576d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105402:	c9                   	leave  
-80105403:	c3                   	ret    
-80105404:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010540b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010540f:	90                   	nop
+80105772:	c9                   	leave  
+80105773:	c3                   	ret    
+80105774:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010577b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010577f:	90                   	nop
 
-80105410 <sys_chdir>:
+80105780 <sys_chdir>:
 
 int
 sys_chdir(void)
 {
-80105410:	f3 0f 1e fb          	endbr32 
-80105414:	55                   	push   %ebp
-80105415:	89 e5                	mov    %esp,%ebp
-80105417:	56                   	push   %esi
-80105418:	53                   	push   %ebx
-80105419:	83 ec 10             	sub    $0x10,%esp
+80105780:	f3 0f 1e fb          	endbr32 
+80105784:	55                   	push   %ebp
+80105785:	89 e5                	mov    %esp,%ebp
+80105787:	56                   	push   %esi
+80105788:	53                   	push   %ebx
+80105789:	83 ec 10             	sub    $0x10,%esp
   char *path;
   struct inode *ip;
   struct proc *curproc = myproc();
-8010541c:	e8 3f e5 ff ff       	call   80103960 <myproc>
-80105421:	89 c6                	mov    %eax,%esi
+8010578c:	e8 cf e1 ff ff       	call   80103960 <myproc>
+80105791:	89 c6                	mov    %eax,%esi
   
   begin_op();
-80105423:	e8 08 d9 ff ff       	call   80102d30 <begin_op>
+80105793:	e8 98 d5 ff ff       	call   80102d30 <begin_op>
   if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
-80105428:	83 ec 08             	sub    $0x8,%esp
-8010542b:	8d 45 f4             	lea    -0xc(%ebp),%eax
-8010542e:	50                   	push   %eax
-8010542f:	6a 00                	push   $0x0
-80105431:	e8 ca f5 ff ff       	call   80104a00 <argstr>
-80105436:	83 c4 10             	add    $0x10,%esp
-80105439:	85 c0                	test   %eax,%eax
-8010543b:	78 73                	js     801054b0 <sys_chdir+0xa0>
-8010543d:	83 ec 0c             	sub    $0xc,%esp
-80105440:	ff 75 f4             	pushl  -0xc(%ebp)
-80105443:	e8 e8 cb ff ff       	call   80102030 <namei>
-80105448:	83 c4 10             	add    $0x10,%esp
-8010544b:	89 c3                	mov    %eax,%ebx
-8010544d:	85 c0                	test   %eax,%eax
-8010544f:	74 5f                	je     801054b0 <sys_chdir+0xa0>
+80105798:	83 ec 08             	sub    $0x8,%esp
+8010579b:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010579e:	50                   	push   %eax
+8010579f:	6a 00                	push   $0x0
+801057a1:	e8 ca f5 ff ff       	call   80104d70 <argstr>
+801057a6:	83 c4 10             	add    $0x10,%esp
+801057a9:	85 c0                	test   %eax,%eax
+801057ab:	78 73                	js     80105820 <sys_chdir+0xa0>
+801057ad:	83 ec 0c             	sub    $0xc,%esp
+801057b0:	ff 75 f4             	pushl  -0xc(%ebp)
+801057b3:	e8 78 c8 ff ff       	call   80102030 <namei>
+801057b8:	83 c4 10             	add    $0x10,%esp
+801057bb:	89 c3                	mov    %eax,%ebx
+801057bd:	85 c0                	test   %eax,%eax
+801057bf:	74 5f                	je     80105820 <sys_chdir+0xa0>
     end_op();
     return -1;
   }
   ilock(ip);
-80105451:	83 ec 0c             	sub    $0xc,%esp
-80105454:	50                   	push   %eax
-80105455:	e8 06 c3 ff ff       	call   80101760 <ilock>
+801057c1:	83 ec 0c             	sub    $0xc,%esp
+801057c4:	50                   	push   %eax
+801057c5:	e8 96 bf ff ff       	call   80101760 <ilock>
   if(ip->type != T_DIR){
-8010545a:	83 c4 10             	add    $0x10,%esp
-8010545d:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80105462:	75 2c                	jne    80105490 <sys_chdir+0x80>
+801057ca:	83 c4 10             	add    $0x10,%esp
+801057cd:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+801057d2:	75 2c                	jne    80105800 <sys_chdir+0x80>
     iunlockput(ip);
     end_op();
     return -1;
   }
   iunlock(ip);
-80105464:	83 ec 0c             	sub    $0xc,%esp
-80105467:	53                   	push   %ebx
-80105468:	e8 d3 c3 ff ff       	call   80101840 <iunlock>
+801057d4:	83 ec 0c             	sub    $0xc,%esp
+801057d7:	53                   	push   %ebx
+801057d8:	e8 63 c0 ff ff       	call   80101840 <iunlock>
   iput(curproc->cwd);
-8010546d:	58                   	pop    %eax
-8010546e:	ff 76 68             	pushl  0x68(%esi)
-80105471:	e8 1a c4 ff ff       	call   80101890 <iput>
+801057dd:	58                   	pop    %eax
+801057de:	ff 76 6c             	pushl  0x6c(%esi)
+801057e1:	e8 aa c0 ff ff       	call   80101890 <iput>
   end_op();
-80105476:	e8 25 d9 ff ff       	call   80102da0 <end_op>
+801057e6:	e8 b5 d5 ff ff       	call   80102da0 <end_op>
   curproc->cwd = ip;
-8010547b:	89 5e 68             	mov    %ebx,0x68(%esi)
+801057eb:	89 5e 6c             	mov    %ebx,0x6c(%esi)
   return 0;
-8010547e:	83 c4 10             	add    $0x10,%esp
-80105481:	31 c0                	xor    %eax,%eax
+801057ee:	83 c4 10             	add    $0x10,%esp
+801057f1:	31 c0                	xor    %eax,%eax
 }
-80105483:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80105486:	5b                   	pop    %ebx
-80105487:	5e                   	pop    %esi
-80105488:	5d                   	pop    %ebp
-80105489:	c3                   	ret    
-8010548a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801057f3:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801057f6:	5b                   	pop    %ebx
+801057f7:	5e                   	pop    %esi
+801057f8:	5d                   	pop    %ebp
+801057f9:	c3                   	ret    
+801057fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     iunlockput(ip);
-80105490:	83 ec 0c             	sub    $0xc,%esp
-80105493:	53                   	push   %ebx
-80105494:	e8 67 c5 ff ff       	call   80101a00 <iunlockput>
+80105800:	83 ec 0c             	sub    $0xc,%esp
+80105803:	53                   	push   %ebx
+80105804:	e8 f7 c1 ff ff       	call   80101a00 <iunlockput>
     end_op();
-80105499:	e8 02 d9 ff ff       	call   80102da0 <end_op>
+80105809:	e8 92 d5 ff ff       	call   80102da0 <end_op>
     return -1;
-8010549e:	83 c4 10             	add    $0x10,%esp
-801054a1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801054a6:	eb db                	jmp    80105483 <sys_chdir+0x73>
-801054a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801054af:	90                   	nop
+8010580e:	83 c4 10             	add    $0x10,%esp
+80105811:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105816:	eb db                	jmp    801057f3 <sys_chdir+0x73>
+80105818:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010581f:	90                   	nop
     end_op();
-801054b0:	e8 eb d8 ff ff       	call   80102da0 <end_op>
+80105820:	e8 7b d5 ff ff       	call   80102da0 <end_op>
     return -1;
-801054b5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801054ba:	eb c7                	jmp    80105483 <sys_chdir+0x73>
-801054bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105825:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010582a:	eb c7                	jmp    801057f3 <sys_chdir+0x73>
+8010582c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801054c0 <sys_exec>:
+80105830 <sys_exec>:
 
 int
 sys_exec(void)
 {
-801054c0:	f3 0f 1e fb          	endbr32 
-801054c4:	55                   	push   %ebp
-801054c5:	89 e5                	mov    %esp,%ebp
-801054c7:	57                   	push   %edi
-801054c8:	56                   	push   %esi
+80105830:	f3 0f 1e fb          	endbr32 
+80105834:	55                   	push   %ebp
+80105835:	89 e5                	mov    %esp,%ebp
+80105837:	57                   	push   %edi
+80105838:	56                   	push   %esi
   char *path, *argv[MAXARG];
   int i;
   uint uargv, uarg;
 
   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-801054c9:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
+80105839:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
 {
-801054cf:	53                   	push   %ebx
-801054d0:	81 ec a4 00 00 00    	sub    $0xa4,%esp
+8010583f:	53                   	push   %ebx
+80105840:	81 ec a4 00 00 00    	sub    $0xa4,%esp
   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-801054d6:	50                   	push   %eax
-801054d7:	6a 00                	push   $0x0
-801054d9:	e8 22 f5 ff ff       	call   80104a00 <argstr>
-801054de:	83 c4 10             	add    $0x10,%esp
-801054e1:	85 c0                	test   %eax,%eax
-801054e3:	0f 88 8b 00 00 00    	js     80105574 <sys_exec+0xb4>
-801054e9:	83 ec 08             	sub    $0x8,%esp
-801054ec:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
-801054f2:	50                   	push   %eax
-801054f3:	6a 01                	push   $0x1
-801054f5:	e8 56 f4 ff ff       	call   80104950 <argint>
-801054fa:	83 c4 10             	add    $0x10,%esp
-801054fd:	85 c0                	test   %eax,%eax
-801054ff:	78 73                	js     80105574 <sys_exec+0xb4>
+80105846:	50                   	push   %eax
+80105847:	6a 00                	push   $0x0
+80105849:	e8 22 f5 ff ff       	call   80104d70 <argstr>
+8010584e:	83 c4 10             	add    $0x10,%esp
+80105851:	85 c0                	test   %eax,%eax
+80105853:	0f 88 8b 00 00 00    	js     801058e4 <sys_exec+0xb4>
+80105859:	83 ec 08             	sub    $0x8,%esp
+8010585c:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
+80105862:	50                   	push   %eax
+80105863:	6a 01                	push   $0x1
+80105865:	e8 56 f4 ff ff       	call   80104cc0 <argint>
+8010586a:	83 c4 10             	add    $0x10,%esp
+8010586d:	85 c0                	test   %eax,%eax
+8010586f:	78 73                	js     801058e4 <sys_exec+0xb4>
     return -1;
   }
   memset(argv, 0, sizeof(argv));
-80105501:	83 ec 04             	sub    $0x4,%esp
-80105504:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+80105871:	83 ec 04             	sub    $0x4,%esp
+80105874:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
   for(i=0;; i++){
-8010550a:	31 db                	xor    %ebx,%ebx
+8010587a:	31 db                	xor    %ebx,%ebx
   memset(argv, 0, sizeof(argv));
-8010550c:	68 80 00 00 00       	push   $0x80
-80105511:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
-80105517:	6a 00                	push   $0x0
-80105519:	50                   	push   %eax
-8010551a:	e8 51 f1 ff ff       	call   80104670 <memset>
-8010551f:	83 c4 10             	add    $0x10,%esp
-80105522:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010587c:	68 80 00 00 00       	push   $0x80
+80105881:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
+80105887:	6a 00                	push   $0x0
+80105889:	50                   	push   %eax
+8010588a:	e8 51 f1 ff ff       	call   801049e0 <memset>
+8010588f:	83 c4 10             	add    $0x10,%esp
+80105892:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(i >= NELEM(argv))
       return -1;
     if(fetchint(uargv+4*i, (int*)&uarg) < 0)
-80105528:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
-8010552e:	8d 34 9d 00 00 00 00 	lea    0x0(,%ebx,4),%esi
-80105535:	83 ec 08             	sub    $0x8,%esp
-80105538:	57                   	push   %edi
-80105539:	01 f0                	add    %esi,%eax
-8010553b:	50                   	push   %eax
-8010553c:	e8 6f f3 ff ff       	call   801048b0 <fetchint>
-80105541:	83 c4 10             	add    $0x10,%esp
-80105544:	85 c0                	test   %eax,%eax
-80105546:	78 2c                	js     80105574 <sys_exec+0xb4>
+80105898:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
+8010589e:	8d 34 9d 00 00 00 00 	lea    0x0(,%ebx,4),%esi
+801058a5:	83 ec 08             	sub    $0x8,%esp
+801058a8:	57                   	push   %edi
+801058a9:	01 f0                	add    %esi,%eax
+801058ab:	50                   	push   %eax
+801058ac:	e8 6f f3 ff ff       	call   80104c20 <fetchint>
+801058b1:	83 c4 10             	add    $0x10,%esp
+801058b4:	85 c0                	test   %eax,%eax
+801058b6:	78 2c                	js     801058e4 <sys_exec+0xb4>
       return -1;
     if(uarg == 0){
-80105548:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
-8010554e:	85 c0                	test   %eax,%eax
-80105550:	74 36                	je     80105588 <sys_exec+0xc8>
+801058b8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
+801058be:	85 c0                	test   %eax,%eax
+801058c0:	74 36                	je     801058f8 <sys_exec+0xc8>
       argv[i] = 0;
       break;
     }
     if(fetchstr(uarg, &argv[i]) < 0)
-80105552:	8d 8d 68 ff ff ff    	lea    -0x98(%ebp),%ecx
-80105558:	83 ec 08             	sub    $0x8,%esp
-8010555b:	8d 14 31             	lea    (%ecx,%esi,1),%edx
-8010555e:	52                   	push   %edx
-8010555f:	50                   	push   %eax
-80105560:	e8 8b f3 ff ff       	call   801048f0 <fetchstr>
-80105565:	83 c4 10             	add    $0x10,%esp
-80105568:	85 c0                	test   %eax,%eax
-8010556a:	78 08                	js     80105574 <sys_exec+0xb4>
+801058c2:	8d 8d 68 ff ff ff    	lea    -0x98(%ebp),%ecx
+801058c8:	83 ec 08             	sub    $0x8,%esp
+801058cb:	8d 14 31             	lea    (%ecx,%esi,1),%edx
+801058ce:	52                   	push   %edx
+801058cf:	50                   	push   %eax
+801058d0:	e8 8b f3 ff ff       	call   80104c60 <fetchstr>
+801058d5:	83 c4 10             	add    $0x10,%esp
+801058d8:	85 c0                	test   %eax,%eax
+801058da:	78 08                	js     801058e4 <sys_exec+0xb4>
   for(i=0;; i++){
-8010556c:	83 c3 01             	add    $0x1,%ebx
+801058dc:	83 c3 01             	add    $0x1,%ebx
     if(i >= NELEM(argv))
-8010556f:	83 fb 20             	cmp    $0x20,%ebx
-80105572:	75 b4                	jne    80105528 <sys_exec+0x68>
+801058df:	83 fb 20             	cmp    $0x20,%ebx
+801058e2:	75 b4                	jne    80105898 <sys_exec+0x68>
       return -1;
   }
   return exec(path, argv);
 }
-80105574:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801058e4:	8d 65 f4             	lea    -0xc(%ebp),%esp
     return -1;
-80105577:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801058e7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-8010557c:	5b                   	pop    %ebx
-8010557d:	5e                   	pop    %esi
-8010557e:	5f                   	pop    %edi
-8010557f:	5d                   	pop    %ebp
-80105580:	c3                   	ret    
-80105581:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801058ec:	5b                   	pop    %ebx
+801058ed:	5e                   	pop    %esi
+801058ee:	5f                   	pop    %edi
+801058ef:	5d                   	pop    %ebp
+801058f0:	c3                   	ret    
+801058f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   return exec(path, argv);
-80105588:	83 ec 08             	sub    $0x8,%esp
-8010558b:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+801058f8:	83 ec 08             	sub    $0x8,%esp
+801058fb:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
       argv[i] = 0;
-80105591:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
-80105598:	00 00 00 00 
+80105901:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
+80105908:	00 00 00 00 
   return exec(path, argv);
-8010559c:	50                   	push   %eax
-8010559d:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
-801055a3:	e8 d8 b4 ff ff       	call   80100a80 <exec>
-801055a8:	83 c4 10             	add    $0x10,%esp
-}
-801055ab:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801055ae:	5b                   	pop    %ebx
-801055af:	5e                   	pop    %esi
-801055b0:	5f                   	pop    %edi
-801055b1:	5d                   	pop    %ebp
-801055b2:	c3                   	ret    
-801055b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801055ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010590c:	50                   	push   %eax
+8010590d:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
+80105913:	e8 68 b1 ff ff       	call   80100a80 <exec>
+80105918:	83 c4 10             	add    $0x10,%esp
+}
+8010591b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010591e:	5b                   	pop    %ebx
+8010591f:	5e                   	pop    %esi
+80105920:	5f                   	pop    %edi
+80105921:	5d                   	pop    %ebp
+80105922:	c3                   	ret    
+80105923:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010592a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801055c0 <sys_pipe>:
+80105930 <sys_pipe>:
 
 int
 sys_pipe(void)
 {
-801055c0:	f3 0f 1e fb          	endbr32 
-801055c4:	55                   	push   %ebp
-801055c5:	89 e5                	mov    %esp,%ebp
-801055c7:	57                   	push   %edi
-801055c8:	56                   	push   %esi
+80105930:	f3 0f 1e fb          	endbr32 
+80105934:	55                   	push   %ebp
+80105935:	89 e5                	mov    %esp,%ebp
+80105937:	57                   	push   %edi
+80105938:	56                   	push   %esi
   int *fd;
   struct file *rf, *wf;
   int fd0, fd1;
 
   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-801055c9:	8d 45 dc             	lea    -0x24(%ebp),%eax
+80105939:	8d 45 dc             	lea    -0x24(%ebp),%eax
 {
-801055cc:	53                   	push   %ebx
-801055cd:	83 ec 20             	sub    $0x20,%esp
+8010593c:	53                   	push   %ebx
+8010593d:	83 ec 20             	sub    $0x20,%esp
   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-801055d0:	6a 08                	push   $0x8
-801055d2:	50                   	push   %eax
-801055d3:	6a 00                	push   $0x0
-801055d5:	e8 c6 f3 ff ff       	call   801049a0 <argptr>
-801055da:	83 c4 10             	add    $0x10,%esp
-801055dd:	85 c0                	test   %eax,%eax
-801055df:	78 4e                	js     8010562f <sys_pipe+0x6f>
+80105940:	6a 08                	push   $0x8
+80105942:	50                   	push   %eax
+80105943:	6a 00                	push   $0x0
+80105945:	e8 c6 f3 ff ff       	call   80104d10 <argptr>
+8010594a:	83 c4 10             	add    $0x10,%esp
+8010594d:	85 c0                	test   %eax,%eax
+8010594f:	78 4e                	js     8010599f <sys_pipe+0x6f>
     return -1;
   if(pipealloc(&rf, &wf) < 0)
-801055e1:	83 ec 08             	sub    $0x8,%esp
-801055e4:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-801055e7:	50                   	push   %eax
-801055e8:	8d 45 e0             	lea    -0x20(%ebp),%eax
-801055eb:	50                   	push   %eax
-801055ec:	e8 ff dd ff ff       	call   801033f0 <pipealloc>
-801055f1:	83 c4 10             	add    $0x10,%esp
-801055f4:	85 c0                	test   %eax,%eax
-801055f6:	78 37                	js     8010562f <sys_pipe+0x6f>
+80105951:	83 ec 08             	sub    $0x8,%esp
+80105954:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105957:	50                   	push   %eax
+80105958:	8d 45 e0             	lea    -0x20(%ebp),%eax
+8010595b:	50                   	push   %eax
+8010595c:	e8 8f da ff ff       	call   801033f0 <pipealloc>
+80105961:	83 c4 10             	add    $0x10,%esp
+80105964:	85 c0                	test   %eax,%eax
+80105966:	78 37                	js     8010599f <sys_pipe+0x6f>
     return -1;
   fd0 = -1;
   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-801055f8:	8b 7d e0             	mov    -0x20(%ebp),%edi
+80105968:	8b 7d e0             	mov    -0x20(%ebp),%edi
   for(fd = 0; fd < NOFILE; fd++){
-801055fb:	31 db                	xor    %ebx,%ebx
+8010596b:	31 db                	xor    %ebx,%ebx
   struct proc *curproc = myproc();
-801055fd:	e8 5e e3 ff ff       	call   80103960 <myproc>
+8010596d:	e8 ee df ff ff       	call   80103960 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-80105602:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105972:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(curproc->ofile[fd] == 0){
-80105608:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
-8010560c:	85 f6                	test   %esi,%esi
-8010560e:	74 30                	je     80105640 <sys_pipe+0x80>
+80105978:	8b 74 98 2c          	mov    0x2c(%eax,%ebx,4),%esi
+8010597c:	85 f6                	test   %esi,%esi
+8010597e:	74 30                	je     801059b0 <sys_pipe+0x80>
   for(fd = 0; fd < NOFILE; fd++){
-80105610:	83 c3 01             	add    $0x1,%ebx
-80105613:	83 fb 10             	cmp    $0x10,%ebx
-80105616:	75 f0                	jne    80105608 <sys_pipe+0x48>
+80105980:	83 c3 01             	add    $0x1,%ebx
+80105983:	83 fb 10             	cmp    $0x10,%ebx
+80105986:	75 f0                	jne    80105978 <sys_pipe+0x48>
     if(fd0 >= 0)
       myproc()->ofile[fd0] = 0;
     fileclose(rf);
-80105618:	83 ec 0c             	sub    $0xc,%esp
-8010561b:	ff 75 e0             	pushl  -0x20(%ebp)
-8010561e:	e8 9d b8 ff ff       	call   80100ec0 <fileclose>
+80105988:	83 ec 0c             	sub    $0xc,%esp
+8010598b:	ff 75 e0             	pushl  -0x20(%ebp)
+8010598e:	e8 2d b5 ff ff       	call   80100ec0 <fileclose>
     fileclose(wf);
-80105623:	58                   	pop    %eax
-80105624:	ff 75 e4             	pushl  -0x1c(%ebp)
-80105627:	e8 94 b8 ff ff       	call   80100ec0 <fileclose>
-    return -1;
-8010562c:	83 c4 10             	add    $0x10,%esp
-8010562f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105634:	eb 5b                	jmp    80105691 <sys_pipe+0xd1>
-80105636:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010563d:	8d 76 00             	lea    0x0(%esi),%esi
+80105993:	58                   	pop    %eax
+80105994:	ff 75 e4             	pushl  -0x1c(%ebp)
+80105997:	e8 24 b5 ff ff       	call   80100ec0 <fileclose>
+    return -1;
+8010599c:	83 c4 10             	add    $0x10,%esp
+8010599f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801059a4:	eb 5b                	jmp    80105a01 <sys_pipe+0xd1>
+801059a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801059ad:	8d 76 00             	lea    0x0(%esi),%esi
       curproc->ofile[fd] = f;
-80105640:	8d 73 08             	lea    0x8(%ebx),%esi
-80105643:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
+801059b0:	8d 73 08             	lea    0x8(%ebx),%esi
+801059b3:	89 7c b0 0c          	mov    %edi,0xc(%eax,%esi,4)
   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-80105647:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+801059b7:	8b 7d e4             	mov    -0x1c(%ebp),%edi
   struct proc *curproc = myproc();
-8010564a:	e8 11 e3 ff ff       	call   80103960 <myproc>
+801059ba:	e8 a1 df ff ff       	call   80103960 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-8010564f:	31 d2                	xor    %edx,%edx
-80105651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801059bf:	31 d2                	xor    %edx,%edx
+801059c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[fd] == 0){
-80105658:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
-8010565c:	85 c9                	test   %ecx,%ecx
-8010565e:	74 20                	je     80105680 <sys_pipe+0xc0>
+801059c8:	8b 4c 90 2c          	mov    0x2c(%eax,%edx,4),%ecx
+801059cc:	85 c9                	test   %ecx,%ecx
+801059ce:	74 20                	je     801059f0 <sys_pipe+0xc0>
   for(fd = 0; fd < NOFILE; fd++){
-80105660:	83 c2 01             	add    $0x1,%edx
-80105663:	83 fa 10             	cmp    $0x10,%edx
-80105666:	75 f0                	jne    80105658 <sys_pipe+0x98>
+801059d0:	83 c2 01             	add    $0x1,%edx
+801059d3:	83 fa 10             	cmp    $0x10,%edx
+801059d6:	75 f0                	jne    801059c8 <sys_pipe+0x98>
       myproc()->ofile[fd0] = 0;
-80105668:	e8 f3 e2 ff ff       	call   80103960 <myproc>
-8010566d:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
-80105674:	00 
-80105675:	eb a1                	jmp    80105618 <sys_pipe+0x58>
-80105677:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010567e:	66 90                	xchg   %ax,%ax
+801059d8:	e8 83 df ff ff       	call   80103960 <myproc>
+801059dd:	c7 44 b0 0c 00 00 00 	movl   $0x0,0xc(%eax,%esi,4)
+801059e4:	00 
+801059e5:	eb a1                	jmp    80105988 <sys_pipe+0x58>
+801059e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801059ee:	66 90                	xchg   %ax,%ax
       curproc->ofile[fd] = f;
-80105680:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
+801059f0:	89 7c 90 2c          	mov    %edi,0x2c(%eax,%edx,4)
   }
   fd[0] = fd0;
-80105684:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80105687:	89 18                	mov    %ebx,(%eax)
+801059f4:	8b 45 dc             	mov    -0x24(%ebp),%eax
+801059f7:	89 18                	mov    %ebx,(%eax)
   fd[1] = fd1;
-80105689:	8b 45 dc             	mov    -0x24(%ebp),%eax
-8010568c:	89 50 04             	mov    %edx,0x4(%eax)
+801059f9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+801059fc:	89 50 04             	mov    %edx,0x4(%eax)
   return 0;
-8010568f:	31 c0                	xor    %eax,%eax
+801059ff:	31 c0                	xor    %eax,%eax
 }
-80105691:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105694:	5b                   	pop    %ebx
-80105695:	5e                   	pop    %esi
-80105696:	5f                   	pop    %edi
-80105697:	5d                   	pop    %ebp
-80105698:	c3                   	ret    
-80105699:	66 90                	xchg   %ax,%ax
-8010569b:	66 90                	xchg   %ax,%ax
-8010569d:	66 90                	xchg   %ax,%ax
-8010569f:	90                   	nop
-
-801056a0 <sys_fork>:
-#include "mmu.h"
-#include "proc.h"
-
+80105a01:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105a04:	5b                   	pop    %ebx
+80105a05:	5e                   	pop    %esi
+80105a06:	5f                   	pop    %edi
+80105a07:	5d                   	pop    %ebp
+80105a08:	c3                   	ret    
+80105a09:	66 90                	xchg   %ax,%ax
+80105a0b:	66 90                	xchg   %ax,%ax
+80105a0d:	66 90                	xchg   %ax,%ax
+80105a0f:	90                   	nop
+
+80105a10 <sys_fork>:
+int thread_create(void);
+int thread_join(void);
+int thread_exit(void);
 int
 sys_fork(void)
 {
-801056a0:	f3 0f 1e fb          	endbr32 
+80105a10:	f3 0f 1e fb          	endbr32 
   return fork();
-801056a4:	e9 67 e4 ff ff       	jmp    80103b10 <fork>
-801056a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a14:	e9 f7 e0 ff ff       	jmp    80103b10 <fork>
+80105a19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801056b0 <sys_exit>:
+80105a20 <sys_exit>:
 }
 
 int
 sys_exit(void)
 {
-801056b0:	f3 0f 1e fb          	endbr32 
-801056b4:	55                   	push   %ebp
-801056b5:	89 e5                	mov    %esp,%ebp
-801056b7:	83 ec 08             	sub    $0x8,%esp
+80105a20:	f3 0f 1e fb          	endbr32 
+80105a24:	55                   	push   %ebp
+80105a25:	89 e5                	mov    %esp,%ebp
+80105a27:	83 ec 08             	sub    $0x8,%esp
   exit();
-801056ba:	e8 d1 e6 ff ff       	call   80103d90 <exit>
+80105a2a:	e8 61 e3 ff ff       	call   80103d90 <exit>
   return 0;  // not reached
 }
-801056bf:	31 c0                	xor    %eax,%eax
-801056c1:	c9                   	leave  
-801056c2:	c3                   	ret    
-801056c3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801056ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105a2f:	31 c0                	xor    %eax,%eax
+80105a31:	c9                   	leave  
+80105a32:	c3                   	ret    
+80105a33:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801056d0 <sys_wait>:
+80105a40 <sys_wait>:
 
 int
 sys_wait(void)
 {
-801056d0:	f3 0f 1e fb          	endbr32 
+80105a40:	f3 0f 1e fb          	endbr32 
   return wait();
-801056d4:	e9 07 e9 ff ff       	jmp    80103fe0 <wait>
-801056d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a44:	e9 97 e5 ff ff       	jmp    80103fe0 <wait>
+80105a49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801056e0 <sys_kill>:
+80105a50 <sys_kill>:
 }
 
 int
 sys_kill(void)
 {
-801056e0:	f3 0f 1e fb          	endbr32 
-801056e4:	55                   	push   %ebp
-801056e5:	89 e5                	mov    %esp,%ebp
-801056e7:	83 ec 20             	sub    $0x20,%esp
+80105a50:	f3 0f 1e fb          	endbr32 
+80105a54:	55                   	push   %ebp
+80105a55:	89 e5                	mov    %esp,%ebp
+80105a57:	83 ec 20             	sub    $0x20,%esp
   int pid;
 
   if(argint(0, &pid) < 0)
-801056ea:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801056ed:	50                   	push   %eax
-801056ee:	6a 00                	push   $0x0
-801056f0:	e8 5b f2 ff ff       	call   80104950 <argint>
-801056f5:	83 c4 10             	add    $0x10,%esp
-801056f8:	85 c0                	test   %eax,%eax
-801056fa:	78 14                	js     80105710 <sys_kill+0x30>
+80105a5a:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105a5d:	50                   	push   %eax
+80105a5e:	6a 00                	push   $0x0
+80105a60:	e8 5b f2 ff ff       	call   80104cc0 <argint>
+80105a65:	83 c4 10             	add    $0x10,%esp
+80105a68:	85 c0                	test   %eax,%eax
+80105a6a:	78 14                	js     80105a80 <sys_kill+0x30>
     return -1;
   return kill(pid);
-801056fc:	83 ec 0c             	sub    $0xc,%esp
-801056ff:	ff 75 f4             	pushl  -0xc(%ebp)
-80105702:	e8 39 ea ff ff       	call   80104140 <kill>
-80105707:	83 c4 10             	add    $0x10,%esp
-}
-8010570a:	c9                   	leave  
-8010570b:	c3                   	ret    
-8010570c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105710:	c9                   	leave  
-    return -1;
-80105711:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80105716:	c3                   	ret    
-80105717:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010571e:	66 90                	xchg   %ax,%ax
+80105a6c:	83 ec 0c             	sub    $0xc,%esp
+80105a6f:	ff 75 f4             	pushl  -0xc(%ebp)
+80105a72:	e8 c9 e6 ff ff       	call   80104140 <kill>
+80105a77:	83 c4 10             	add    $0x10,%esp
+}
+80105a7a:	c9                   	leave  
+80105a7b:	c3                   	ret    
+80105a7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105a80:	c9                   	leave  
+    return -1;
+80105a81:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105a86:	c3                   	ret    
+80105a87:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a8e:	66 90                	xchg   %ax,%ax
 
-80105720 <sys_getpid>:
+80105a90 <sys_getpid>:
 
 int
 sys_getpid(void)
 {
-80105720:	f3 0f 1e fb          	endbr32 
-80105724:	55                   	push   %ebp
-80105725:	89 e5                	mov    %esp,%ebp
-80105727:	83 ec 08             	sub    $0x8,%esp
+80105a90:	f3 0f 1e fb          	endbr32 
+80105a94:	55                   	push   %ebp
+80105a95:	89 e5                	mov    %esp,%ebp
+80105a97:	83 ec 08             	sub    $0x8,%esp
   return myproc()->pid;
-8010572a:	e8 31 e2 ff ff       	call   80103960 <myproc>
-8010572f:	8b 40 10             	mov    0x10(%eax),%eax
+80105a9a:	e8 c1 de ff ff       	call   80103960 <myproc>
+80105a9f:	8b 40 14             	mov    0x14(%eax),%eax
 }
-80105732:	c9                   	leave  
-80105733:	c3                   	ret    
-80105734:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010573b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010573f:	90                   	nop
+80105aa2:	c9                   	leave  
+80105aa3:	c3                   	ret    
+80105aa4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105aab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105aaf:	90                   	nop
 
-80105740 <sys_sbrk>:
+80105ab0 <sys_sbrk>:
 
 int
 sys_sbrk(void)
 {
-80105740:	f3 0f 1e fb          	endbr32 
-80105744:	55                   	push   %ebp
-80105745:	89 e5                	mov    %esp,%ebp
-80105747:	53                   	push   %ebx
+80105ab0:	f3 0f 1e fb          	endbr32 
+80105ab4:	55                   	push   %ebp
+80105ab5:	89 e5                	mov    %esp,%ebp
+80105ab7:	53                   	push   %ebx
   int addr;
   int n;
 
   if(argint(0, &n) < 0)
-80105748:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105ab8:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-8010574b:	83 ec 1c             	sub    $0x1c,%esp
+80105abb:	83 ec 1c             	sub    $0x1c,%esp
   if(argint(0, &n) < 0)
-8010574e:	50                   	push   %eax
-8010574f:	6a 00                	push   $0x0
-80105751:	e8 fa f1 ff ff       	call   80104950 <argint>
-80105756:	83 c4 10             	add    $0x10,%esp
-80105759:	85 c0                	test   %eax,%eax
-8010575b:	78 23                	js     80105780 <sys_sbrk+0x40>
+80105abe:	50                   	push   %eax
+80105abf:	6a 00                	push   $0x0
+80105ac1:	e8 fa f1 ff ff       	call   80104cc0 <argint>
+80105ac6:	83 c4 10             	add    $0x10,%esp
+80105ac9:	85 c0                	test   %eax,%eax
+80105acb:	78 23                	js     80105af0 <sys_sbrk+0x40>
     return -1;
   addr = myproc()->sz;
-8010575d:	e8 fe e1 ff ff       	call   80103960 <myproc>
+80105acd:	e8 8e de ff ff       	call   80103960 <myproc>
   if(growproc(n) < 0)
-80105762:	83 ec 0c             	sub    $0xc,%esp
+80105ad2:	83 ec 0c             	sub    $0xc,%esp
   addr = myproc()->sz;
-80105765:	8b 18                	mov    (%eax),%ebx
+80105ad5:	8b 18                	mov    (%eax),%ebx
   if(growproc(n) < 0)
-80105767:	ff 75 f4             	pushl  -0xc(%ebp)
-8010576a:	e8 21 e3 ff ff       	call   80103a90 <growproc>
-8010576f:	83 c4 10             	add    $0x10,%esp
-80105772:	85 c0                	test   %eax,%eax
-80105774:	78 0a                	js     80105780 <sys_sbrk+0x40>
+80105ad7:	ff 75 f4             	pushl  -0xc(%ebp)
+80105ada:	e8 b1 df ff ff       	call   80103a90 <growproc>
+80105adf:	83 c4 10             	add    $0x10,%esp
+80105ae2:	85 c0                	test   %eax,%eax
+80105ae4:	78 0a                	js     80105af0 <sys_sbrk+0x40>
     return -1;
   return addr;
 }
-80105776:	89 d8                	mov    %ebx,%eax
-80105778:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010577b:	c9                   	leave  
-8010577c:	c3                   	ret    
-8010577d:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-80105780:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80105785:	eb ef                	jmp    80105776 <sys_sbrk+0x36>
-80105787:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010578e:	66 90                	xchg   %ax,%ax
+80105ae6:	89 d8                	mov    %ebx,%eax
+80105ae8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105aeb:	c9                   	leave  
+80105aec:	c3                   	ret    
+80105aed:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80105af0:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105af5:	eb ef                	jmp    80105ae6 <sys_sbrk+0x36>
+80105af7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105afe:	66 90                	xchg   %ax,%ax
 
-80105790 <sys_sleep>:
+80105b00 <sys_sleep>:
 
 int
 sys_sleep(void)
 {
-80105790:	f3 0f 1e fb          	endbr32 
-80105794:	55                   	push   %ebp
-80105795:	89 e5                	mov    %esp,%ebp
-80105797:	53                   	push   %ebx
+80105b00:	f3 0f 1e fb          	endbr32 
+80105b04:	55                   	push   %ebp
+80105b05:	89 e5                	mov    %esp,%ebp
+80105b07:	53                   	push   %ebx
   int n;
   uint ticks0;
 
   if(argint(0, &n) < 0)
-80105798:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105b08:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-8010579b:	83 ec 1c             	sub    $0x1c,%esp
+80105b0b:	83 ec 1c             	sub    $0x1c,%esp
   if(argint(0, &n) < 0)
-8010579e:	50                   	push   %eax
-8010579f:	6a 00                	push   $0x0
-801057a1:	e8 aa f1 ff ff       	call   80104950 <argint>
-801057a6:	83 c4 10             	add    $0x10,%esp
-801057a9:	85 c0                	test   %eax,%eax
-801057ab:	0f 88 86 00 00 00    	js     80105837 <sys_sleep+0xa7>
+80105b0e:	50                   	push   %eax
+80105b0f:	6a 00                	push   $0x0
+80105b11:	e8 aa f1 ff ff       	call   80104cc0 <argint>
+80105b16:	83 c4 10             	add    $0x10,%esp
+80105b19:	85 c0                	test   %eax,%eax
+80105b1b:	0f 88 86 00 00 00    	js     80105ba7 <sys_sleep+0xa7>
     return -1;
   acquire(&tickslock);
-801057b1:	83 ec 0c             	sub    $0xc,%esp
-801057b4:	68 60 4c 11 80       	push   $0x80114c60
-801057b9:	e8 a2 ed ff ff       	call   80104560 <acquire>
+80105b21:	83 ec 0c             	sub    $0xc,%esp
+80105b24:	68 60 4d 11 80       	push   $0x80114d60
+80105b29:	e8 a2 ed ff ff       	call   801048d0 <acquire>
   ticks0 = ticks;
   while(ticks - ticks0 < n){
-801057be:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80105b2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
   ticks0 = ticks;
-801057c1:	8b 1d a0 54 11 80    	mov    0x801154a0,%ebx
+80105b31:	8b 1d a0 55 11 80    	mov    0x801155a0,%ebx
   while(ticks - ticks0 < n){
-801057c7:	83 c4 10             	add    $0x10,%esp
-801057ca:	85 d2                	test   %edx,%edx
-801057cc:	75 23                	jne    801057f1 <sys_sleep+0x61>
-801057ce:	eb 50                	jmp    80105820 <sys_sleep+0x90>
+80105b37:	83 c4 10             	add    $0x10,%esp
+80105b3a:	85 d2                	test   %edx,%edx
+80105b3c:	75 23                	jne    80105b61 <sys_sleep+0x61>
+80105b3e:	eb 50                	jmp    80105b90 <sys_sleep+0x90>
     if(myproc()->killed){
       release(&tickslock);
       return -1;
     }
     sleep(&ticks, &tickslock);
-801057d0:	83 ec 08             	sub    $0x8,%esp
-801057d3:	68 60 4c 11 80       	push   $0x80114c60
-801057d8:	68 a0 54 11 80       	push   $0x801154a0
-801057dd:	e8 3e e7 ff ff       	call   80103f20 <sleep>
+80105b40:	83 ec 08             	sub    $0x8,%esp
+80105b43:	68 60 4d 11 80       	push   $0x80114d60
+80105b48:	68 a0 55 11 80       	push   $0x801155a0
+80105b4d:	e8 ce e3 ff ff       	call   80103f20 <sleep>
   while(ticks - ticks0 < n){
-801057e2:	a1 a0 54 11 80       	mov    0x801154a0,%eax
-801057e7:	83 c4 10             	add    $0x10,%esp
-801057ea:	29 d8                	sub    %ebx,%eax
-801057ec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-801057ef:	73 2f                	jae    80105820 <sys_sleep+0x90>
+80105b52:	a1 a0 55 11 80       	mov    0x801155a0,%eax
+80105b57:	83 c4 10             	add    $0x10,%esp
+80105b5a:	29 d8                	sub    %ebx,%eax
+80105b5c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+80105b5f:	73 2f                	jae    80105b90 <sys_sleep+0x90>
     if(myproc()->killed){
-801057f1:	e8 6a e1 ff ff       	call   80103960 <myproc>
-801057f6:	8b 40 24             	mov    0x24(%eax),%eax
-801057f9:	85 c0                	test   %eax,%eax
-801057fb:	74 d3                	je     801057d0 <sys_sleep+0x40>
+80105b61:	e8 fa dd ff ff       	call   80103960 <myproc>
+80105b66:	8b 40 28             	mov    0x28(%eax),%eax
+80105b69:	85 c0                	test   %eax,%eax
+80105b6b:	74 d3                	je     80105b40 <sys_sleep+0x40>
       release(&tickslock);
-801057fd:	83 ec 0c             	sub    $0xc,%esp
-80105800:	68 60 4c 11 80       	push   $0x80114c60
-80105805:	e8 16 ee ff ff       	call   80104620 <release>
+80105b6d:	83 ec 0c             	sub    $0xc,%esp
+80105b70:	68 60 4d 11 80       	push   $0x80114d60
+80105b75:	e8 16 ee ff ff       	call   80104990 <release>
   }
   release(&tickslock);
   return 0;
 }
-8010580a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105b7a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
       return -1;
-8010580d:	83 c4 10             	add    $0x10,%esp
-80105810:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105b7d:	83 c4 10             	add    $0x10,%esp
+80105b80:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105815:	c9                   	leave  
-80105816:	c3                   	ret    
-80105817:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010581e:	66 90                	xchg   %ax,%ax
+80105b85:	c9                   	leave  
+80105b86:	c3                   	ret    
+80105b87:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105b8e:	66 90                	xchg   %ax,%ax
   release(&tickslock);
-80105820:	83 ec 0c             	sub    $0xc,%esp
-80105823:	68 60 4c 11 80       	push   $0x80114c60
-80105828:	e8 f3 ed ff ff       	call   80104620 <release>
+80105b90:	83 ec 0c             	sub    $0xc,%esp
+80105b93:	68 60 4d 11 80       	push   $0x80114d60
+80105b98:	e8 f3 ed ff ff       	call   80104990 <release>
   return 0;
-8010582d:	83 c4 10             	add    $0x10,%esp
-80105830:	31 c0                	xor    %eax,%eax
+80105b9d:	83 c4 10             	add    $0x10,%esp
+80105ba0:	31 c0                	xor    %eax,%eax
 }
-80105832:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80105835:	c9                   	leave  
-80105836:	c3                   	ret    
-    return -1;
-80105837:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010583c:	eb f4                	jmp    80105832 <sys_sleep+0xa2>
-8010583e:	66 90                	xchg   %ax,%ax
+80105ba2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105ba5:	c9                   	leave  
+80105ba6:	c3                   	ret    
+    return -1;
+80105ba7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105bac:	eb f4                	jmp    80105ba2 <sys_sleep+0xa2>
+80105bae:	66 90                	xchg   %ax,%ax
 
-80105840 <sys_uptime>:
+80105bb0 <sys_uptime>:
 
 // return how many clock tick interrupts have occurred
 // since start.
 int
 sys_uptime(void)
 {
-80105840:	f3 0f 1e fb          	endbr32 
-80105844:	55                   	push   %ebp
-80105845:	89 e5                	mov    %esp,%ebp
-80105847:	53                   	push   %ebx
-80105848:	83 ec 10             	sub    $0x10,%esp
+80105bb0:	f3 0f 1e fb          	endbr32 
+80105bb4:	55                   	push   %ebp
+80105bb5:	89 e5                	mov    %esp,%ebp
+80105bb7:	53                   	push   %ebx
+80105bb8:	83 ec 10             	sub    $0x10,%esp
   uint xticks;
 
   acquire(&tickslock);
-8010584b:	68 60 4c 11 80       	push   $0x80114c60
-80105850:	e8 0b ed ff ff       	call   80104560 <acquire>
+80105bbb:	68 60 4d 11 80       	push   $0x80114d60
+80105bc0:	e8 0b ed ff ff       	call   801048d0 <acquire>
   xticks = ticks;
-80105855:	8b 1d a0 54 11 80    	mov    0x801154a0,%ebx
+80105bc5:	8b 1d a0 55 11 80    	mov    0x801155a0,%ebx
   release(&tickslock);
-8010585b:	c7 04 24 60 4c 11 80 	movl   $0x80114c60,(%esp)
-80105862:	e8 b9 ed ff ff       	call   80104620 <release>
+80105bcb:	c7 04 24 60 4d 11 80 	movl   $0x80114d60,(%esp)
+80105bd2:	e8 b9 ed ff ff       	call   80104990 <release>
   return xticks;
 }
-80105867:	89 d8                	mov    %ebx,%eax
-80105869:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010586c:	c9                   	leave  
-8010586d:	c3                   	ret    
+80105bd7:	89 d8                	mov    %ebx,%eax
+80105bd9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105bdc:	c9                   	leave  
+80105bdd:	c3                   	ret    
+80105bde:	66 90                	xchg   %ax,%ax
+
+80105be0 <sys_thread_create>:
+
+// newly created threads
+int
+sys_thread_create(void)
+{
+80105be0:	f3 0f 1e fb          	endbr32 
+	return thread_create();
+80105be4:	e9 b7 e6 ff ff       	jmp    801042a0 <thread_create>
+80105be9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105bf0 <sys_thread_join>:
+}
+
+int
+sys_thread_join(void)
+{
+80105bf0:	f3 0f 1e fb          	endbr32 
+	return thread_join();
+80105bf4:	e9 17 e8 ff ff       	jmp    80104410 <thread_join>
+80105bf9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105c00 <sys_thread_exit>:
+}
+int
+sys_thread_exit(void)
+{
+80105c00:	f3 0f 1e fb          	endbr32 
+	return thread_exit();
+80105c04:	e9 07 e9 ff ff       	jmp    80104510 <thread_exit>
 
-8010586e <alltraps>:
+80105c09 <alltraps>:
 
   # vectors.S sends all traps here.
 .globl alltraps
 alltraps:
   # Build trap frame.
   pushl %ds
-8010586e:	1e                   	push   %ds
+80105c09:	1e                   	push   %ds
   pushl %es
-8010586f:	06                   	push   %es
+80105c0a:	06                   	push   %es
   pushl %fs
-80105870:	0f a0                	push   %fs
+80105c0b:	0f a0                	push   %fs
   pushl %gs
-80105872:	0f a8                	push   %gs
+80105c0d:	0f a8                	push   %gs
   pushal
-80105874:	60                   	pusha  
+80105c0f:	60                   	pusha  
   
   # Set up data segments.
   movw $(SEG_KDATA<<3), %ax
-80105875:	66 b8 10 00          	mov    $0x10,%ax
+80105c10:	66 b8 10 00          	mov    $0x10,%ax
   movw %ax, %ds
-80105879:	8e d8                	mov    %eax,%ds
+80105c14:	8e d8                	mov    %eax,%ds
   movw %ax, %es
-8010587b:	8e c0                	mov    %eax,%es
+80105c16:	8e c0                	mov    %eax,%es
 
   # Call trap(tf), where tf=%esp
   pushl %esp
-8010587d:	54                   	push   %esp
+80105c18:	54                   	push   %esp
   call trap
-8010587e:	e8 cd 00 00 00       	call   80105950 <trap>
+80105c19:	e8 c2 00 00 00       	call   80105ce0 <trap>
   addl $4, %esp
-80105883:	83 c4 04             	add    $0x4,%esp
+80105c1e:	83 c4 04             	add    $0x4,%esp
 
-80105886 <trapret>:
+80105c21 <trapret>:
 
   # Return falls through to trapret...
 .globl trapret
 trapret:
   popal
-80105886:	61                   	popa   
+80105c21:	61                   	popa   
   popl %gs
-80105887:	0f a9                	pop    %gs
+80105c22:	0f a9                	pop    %gs
   popl %fs
-80105889:	0f a1                	pop    %fs
+80105c24:	0f a1                	pop    %fs
   popl %es
-8010588b:	07                   	pop    %es
+80105c26:	07                   	pop    %es
   popl %ds
-8010588c:	1f                   	pop    %ds
+80105c27:	1f                   	pop    %ds
   addl $0x8, %esp  # trapno and errcode
-8010588d:	83 c4 08             	add    $0x8,%esp
+80105c28:	83 c4 08             	add    $0x8,%esp
   iret
-80105890:	cf                   	iret   
-80105891:	66 90                	xchg   %ax,%ax
-80105893:	66 90                	xchg   %ax,%ax
-80105895:	66 90                	xchg   %ax,%ax
-80105897:	66 90                	xchg   %ax,%ax
-80105899:	66 90                	xchg   %ax,%ax
-8010589b:	66 90                	xchg   %ax,%ax
-8010589d:	66 90                	xchg   %ax,%ax
-8010589f:	90                   	nop
+80105c2b:	cf                   	iret   
+80105c2c:	66 90                	xchg   %ax,%ax
+80105c2e:	66 90                	xchg   %ax,%ax
 
-801058a0 <tvinit>:
+80105c30 <tvinit>:
 struct spinlock tickslock;
 uint ticks;
 
 void
 tvinit(void)
 {
-801058a0:	f3 0f 1e fb          	endbr32 
-801058a4:	55                   	push   %ebp
+80105c30:	f3 0f 1e fb          	endbr32 
+80105c34:	55                   	push   %ebp
   int i;
 
   for(i = 0; i < 256; i++)
-801058a5:	31 c0                	xor    %eax,%eax
+80105c35:	31 c0                	xor    %eax,%eax
 {
-801058a7:	89 e5                	mov    %esp,%ebp
-801058a9:	83 ec 08             	sub    $0x8,%esp
-801058ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105c37:	89 e5                	mov    %esp,%ebp
+80105c39:	83 ec 08             	sub    $0x8,%esp
+80105c3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
-801058b0:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
-801058b7:	c7 04 c5 a2 4c 11 80 	movl   $0x8e000008,-0x7feeb35e(,%eax,8)
-801058be:	08 00 00 8e 
-801058c2:	66 89 14 c5 a0 4c 11 	mov    %dx,-0x7feeb360(,%eax,8)
-801058c9:	80 
-801058ca:	c1 ea 10             	shr    $0x10,%edx
-801058cd:	66 89 14 c5 a6 4c 11 	mov    %dx,-0x7feeb35a(,%eax,8)
-801058d4:	80 
+80105c40:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
+80105c47:	c7 04 c5 a2 4d 11 80 	movl   $0x8e000008,-0x7feeb25e(,%eax,8)
+80105c4e:	08 00 00 8e 
+80105c52:	66 89 14 c5 a0 4d 11 	mov    %dx,-0x7feeb260(,%eax,8)
+80105c59:	80 
+80105c5a:	c1 ea 10             	shr    $0x10,%edx
+80105c5d:	66 89 14 c5 a6 4d 11 	mov    %dx,-0x7feeb25a(,%eax,8)
+80105c64:	80 
   for(i = 0; i < 256; i++)
-801058d5:	83 c0 01             	add    $0x1,%eax
-801058d8:	3d 00 01 00 00       	cmp    $0x100,%eax
-801058dd:	75 d1                	jne    801058b0 <tvinit+0x10>
+80105c65:	83 c0 01             	add    $0x1,%eax
+80105c68:	3d 00 01 00 00       	cmp    $0x100,%eax
+80105c6d:	75 d1                	jne    80105c40 <tvinit+0x10>
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
 
   initlock(&tickslock, "time");
-801058df:	83 ec 08             	sub    $0x8,%esp
+80105c6f:	83 ec 08             	sub    $0x8,%esp
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-801058e2:	a1 08 a1 10 80       	mov    0x8010a108,%eax
-801058e7:	c7 05 a2 4e 11 80 08 	movl   $0xef000008,0x80114ea2
-801058ee:	00 00 ef 
+80105c72:	a1 08 a1 10 80       	mov    0x8010a108,%eax
+80105c77:	c7 05 a2 4f 11 80 08 	movl   $0xef000008,0x80114fa2
+80105c7e:	00 00 ef 
   initlock(&tickslock, "time");
-801058f1:	68 59 78 10 80       	push   $0x80107859
-801058f6:	68 60 4c 11 80       	push   $0x80114c60
+80105c81:	68 05 7c 10 80       	push   $0x80107c05
+80105c86:	68 60 4d 11 80       	push   $0x80114d60
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-801058fb:	66 a3 a0 4e 11 80    	mov    %ax,0x80114ea0
-80105901:	c1 e8 10             	shr    $0x10,%eax
-80105904:	66 a3 a6 4e 11 80    	mov    %ax,0x80114ea6
+80105c8b:	66 a3 a0 4f 11 80    	mov    %ax,0x80114fa0
+80105c91:	c1 e8 10             	shr    $0x10,%eax
+80105c94:	66 a3 a6 4f 11 80    	mov    %ax,0x80114fa6
   initlock(&tickslock, "time");
-8010590a:	e8 d1 ea ff ff       	call   801043e0 <initlock>
+80105c9a:	e8 b1 ea ff ff       	call   80104750 <initlock>
 }
-8010590f:	83 c4 10             	add    $0x10,%esp
-80105912:	c9                   	leave  
-80105913:	c3                   	ret    
-80105914:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010591b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010591f:	90                   	nop
+80105c9f:	83 c4 10             	add    $0x10,%esp
+80105ca2:	c9                   	leave  
+80105ca3:	c3                   	ret    
+80105ca4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105cab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105caf:	90                   	nop
 
-80105920 <idtinit>:
+80105cb0 <idtinit>:
 
 void
 idtinit(void)
 {
-80105920:	f3 0f 1e fb          	endbr32 
-80105924:	55                   	push   %ebp
+80105cb0:	f3 0f 1e fb          	endbr32 
+80105cb4:	55                   	push   %ebp
   pd[0] = size-1;
-80105925:	b8 ff 07 00 00       	mov    $0x7ff,%eax
-8010592a:	89 e5                	mov    %esp,%ebp
-8010592c:	83 ec 10             	sub    $0x10,%esp
-8010592f:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+80105cb5:	b8 ff 07 00 00       	mov    $0x7ff,%eax
+80105cba:	89 e5                	mov    %esp,%ebp
+80105cbc:	83 ec 10             	sub    $0x10,%esp
+80105cbf:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
   pd[1] = (uint)p;
-80105933:	b8 a0 4c 11 80       	mov    $0x80114ca0,%eax
-80105938:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+80105cc3:	b8 a0 4d 11 80       	mov    $0x80114da0,%eax
+80105cc8:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   pd[2] = (uint)p >> 16;
-8010593c:	c1 e8 10             	shr    $0x10,%eax
-8010593f:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
+80105ccc:	c1 e8 10             	shr    $0x10,%eax
+80105ccf:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
   asm volatile("lidt (%0)" : : "r" (pd));
-80105943:	8d 45 fa             	lea    -0x6(%ebp),%eax
-80105946:	0f 01 18             	lidtl  (%eax)
+80105cd3:	8d 45 fa             	lea    -0x6(%ebp),%eax
+80105cd6:	0f 01 18             	lidtl  (%eax)
   lidt(idt, sizeof(idt));
 }
-80105949:	c9                   	leave  
-8010594a:	c3                   	ret    
-8010594b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010594f:	90                   	nop
+80105cd9:	c9                   	leave  
+80105cda:	c3                   	ret    
+80105cdb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105cdf:	90                   	nop
 
-80105950 <trap>:
+80105ce0 <trap>:
 
 //PAGEBREAK: 41
 void
 trap(struct trapframe *tf)
 {
-80105950:	f3 0f 1e fb          	endbr32 
-80105954:	55                   	push   %ebp
-80105955:	89 e5                	mov    %esp,%ebp
-80105957:	57                   	push   %edi
-80105958:	56                   	push   %esi
-80105959:	53                   	push   %ebx
-8010595a:	83 ec 1c             	sub    $0x1c,%esp
-8010595d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80105ce0:	f3 0f 1e fb          	endbr32 
+80105ce4:	55                   	push   %ebp
+80105ce5:	89 e5                	mov    %esp,%ebp
+80105ce7:	57                   	push   %edi
+80105ce8:	56                   	push   %esi
+80105ce9:	53                   	push   %ebx
+80105cea:	83 ec 1c             	sub    $0x1c,%esp
+80105ced:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(tf->trapno == T_SYSCALL){
-80105960:	8b 43 30             	mov    0x30(%ebx),%eax
-80105963:	83 f8 40             	cmp    $0x40,%eax
-80105966:	0f 84 bc 01 00 00    	je     80105b28 <trap+0x1d8>
+80105cf0:	8b 43 30             	mov    0x30(%ebx),%eax
+80105cf3:	83 f8 40             	cmp    $0x40,%eax
+80105cf6:	0f 84 bc 01 00 00    	je     80105eb8 <trap+0x1d8>
     if(myproc()->killed)
       exit();
     return;
   }
 
   switch(tf->trapno){
-8010596c:	83 e8 20             	sub    $0x20,%eax
-8010596f:	83 f8 1f             	cmp    $0x1f,%eax
-80105972:	77 08                	ja     8010597c <trap+0x2c>
-80105974:	3e ff 24 85 00 79 10 	notrack jmp *-0x7fef8700(,%eax,4)
-8010597b:	80 
+80105cfc:	83 e8 20             	sub    $0x20,%eax
+80105cff:	83 f8 1f             	cmp    $0x1f,%eax
+80105d02:	77 08                	ja     80105d0c <trap+0x2c>
+80105d04:	3e ff 24 85 ac 7c 10 	notrack jmp *-0x7fef8354(,%eax,4)
+80105d0b:	80 
     lapiceoi();
     break;
 
   //PAGEBREAK: 13
   default:
     if(myproc() == 0 || (tf->cs&3) == 0){
-8010597c:	e8 df df ff ff       	call   80103960 <myproc>
-80105981:	8b 7b 38             	mov    0x38(%ebx),%edi
-80105984:	85 c0                	test   %eax,%eax
-80105986:	0f 84 eb 01 00 00    	je     80105b77 <trap+0x227>
-8010598c:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
-80105990:	0f 84 e1 01 00 00    	je     80105b77 <trap+0x227>
+80105d0c:	e8 4f dc ff ff       	call   80103960 <myproc>
+80105d11:	8b 7b 38             	mov    0x38(%ebx),%edi
+80105d14:	85 c0                	test   %eax,%eax
+80105d16:	0f 84 eb 01 00 00    	je     80105f07 <trap+0x227>
+80105d1c:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
+80105d20:	0f 84 e1 01 00 00    	je     80105f07 <trap+0x227>
 
 static inline uint
 rcr2(void)
 {
   uint val;
   asm volatile("movl %%cr2,%0" : "=r" (val));
-80105996:	0f 20 d1             	mov    %cr2,%ecx
-80105999:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+80105d26:	0f 20 d1             	mov    %cr2,%ecx
+80105d29:	89 4d d8             	mov    %ecx,-0x28(%ebp)
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
               tf->trapno, cpuid(), tf->eip, rcr2());
       panic("trap");
     }
     // In user space, assume process misbehaved.
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-8010599c:	e8 9f df ff ff       	call   80103940 <cpuid>
-801059a1:	8b 73 30             	mov    0x30(%ebx),%esi
-801059a4:	89 45 dc             	mov    %eax,-0x24(%ebp)
-801059a7:	8b 43 34             	mov    0x34(%ebx),%eax
-801059aa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80105d2c:	e8 0f dc ff ff       	call   80103940 <cpuid>
+80105d31:	8b 73 30             	mov    0x30(%ebx),%esi
+80105d34:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80105d37:	8b 43 34             	mov    0x34(%ebx),%eax
+80105d3a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
             "eip 0x%x addr 0x%x--kill proc\n",
             myproc()->pid, myproc()->name, tf->trapno,
-801059ad:	e8 ae df ff ff       	call   80103960 <myproc>
-801059b2:	89 45 e0             	mov    %eax,-0x20(%ebp)
-801059b5:	e8 a6 df ff ff       	call   80103960 <myproc>
+80105d3d:	e8 1e dc ff ff       	call   80103960 <myproc>
+80105d42:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80105d45:	e8 16 dc ff ff       	call   80103960 <myproc>
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-801059ba:	8b 4d d8             	mov    -0x28(%ebp),%ecx
-801059bd:	8b 55 dc             	mov    -0x24(%ebp),%edx
-801059c0:	51                   	push   %ecx
-801059c1:	57                   	push   %edi
-801059c2:	52                   	push   %edx
-801059c3:	ff 75 e4             	pushl  -0x1c(%ebp)
-801059c6:	56                   	push   %esi
+80105d4a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+80105d4d:	8b 55 dc             	mov    -0x24(%ebp),%edx
+80105d50:	51                   	push   %ecx
+80105d51:	57                   	push   %edi
+80105d52:	52                   	push   %edx
+80105d53:	ff 75 e4             	pushl  -0x1c(%ebp)
+80105d56:	56                   	push   %esi
             myproc()->pid, myproc()->name, tf->trapno,
-801059c7:	8b 75 e0             	mov    -0x20(%ebp),%esi
-801059ca:	83 c6 6c             	add    $0x6c,%esi
+80105d57:	8b 75 e0             	mov    -0x20(%ebp),%esi
+80105d5a:	83 c6 70             	add    $0x70,%esi
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-801059cd:	56                   	push   %esi
-801059ce:	ff 70 10             	pushl  0x10(%eax)
-801059d1:	68 bc 78 10 80       	push   $0x801078bc
-801059d6:	e8 d5 ac ff ff       	call   801006b0 <cprintf>
+80105d5d:	56                   	push   %esi
+80105d5e:	ff 70 14             	pushl  0x14(%eax)
+80105d61:	68 68 7c 10 80       	push   $0x80107c68
+80105d66:	e8 45 a9 ff ff       	call   801006b0 <cprintf>
             tf->err, cpuid(), tf->eip, rcr2());
     myproc()->killed = 1;
-801059db:	83 c4 20             	add    $0x20,%esp
-801059de:	e8 7d df ff ff       	call   80103960 <myproc>
-801059e3:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+80105d6b:	83 c4 20             	add    $0x20,%esp
+80105d6e:	e8 ed db ff ff       	call   80103960 <myproc>
+80105d73:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
   }
 
   // Force process exit if it has been killed and is in user space.
   // (If it is still executing in the kernel, let it keep running
   // until it gets to the regular system call return.)
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-801059ea:	e8 71 df ff ff       	call   80103960 <myproc>
-801059ef:	85 c0                	test   %eax,%eax
-801059f1:	74 1d                	je     80105a10 <trap+0xc0>
-801059f3:	e8 68 df ff ff       	call   80103960 <myproc>
-801059f8:	8b 50 24             	mov    0x24(%eax),%edx
-801059fb:	85 d2                	test   %edx,%edx
-801059fd:	74 11                	je     80105a10 <trap+0xc0>
-801059ff:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-80105a03:	83 e0 03             	and    $0x3,%eax
-80105a06:	66 83 f8 03          	cmp    $0x3,%ax
-80105a0a:	0f 84 50 01 00 00    	je     80105b60 <trap+0x210>
+80105d7a:	e8 e1 db ff ff       	call   80103960 <myproc>
+80105d7f:	85 c0                	test   %eax,%eax
+80105d81:	74 1d                	je     80105da0 <trap+0xc0>
+80105d83:	e8 d8 db ff ff       	call   80103960 <myproc>
+80105d88:	8b 50 28             	mov    0x28(%eax),%edx
+80105d8b:	85 d2                	test   %edx,%edx
+80105d8d:	74 11                	je     80105da0 <trap+0xc0>
+80105d8f:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+80105d93:	83 e0 03             	and    $0x3,%eax
+80105d96:	66 83 f8 03          	cmp    $0x3,%ax
+80105d9a:	0f 84 50 01 00 00    	je     80105ef0 <trap+0x210>
     exit();
 
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
   if(myproc() && myproc()->state == RUNNING &&
-80105a10:	e8 4b df ff ff       	call   80103960 <myproc>
-80105a15:	85 c0                	test   %eax,%eax
-80105a17:	74 0f                	je     80105a28 <trap+0xd8>
-80105a19:	e8 42 df ff ff       	call   80103960 <myproc>
-80105a1e:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
-80105a22:	0f 84 e8 00 00 00    	je     80105b10 <trap+0x1c0>
+80105da0:	e8 bb db ff ff       	call   80103960 <myproc>
+80105da5:	85 c0                	test   %eax,%eax
+80105da7:	74 0f                	je     80105db8 <trap+0xd8>
+80105da9:	e8 b2 db ff ff       	call   80103960 <myproc>
+80105dae:	83 78 10 04          	cmpl   $0x4,0x10(%eax)
+80105db2:	0f 84 e8 00 00 00    	je     80105ea0 <trap+0x1c0>
      tf->trapno == T_IRQ0+IRQ_TIMER)
     yield();
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105a28:	e8 33 df ff ff       	call   80103960 <myproc>
-80105a2d:	85 c0                	test   %eax,%eax
-80105a2f:	74 1d                	je     80105a4e <trap+0xfe>
-80105a31:	e8 2a df ff ff       	call   80103960 <myproc>
-80105a36:	8b 40 24             	mov    0x24(%eax),%eax
-80105a39:	85 c0                	test   %eax,%eax
-80105a3b:	74 11                	je     80105a4e <trap+0xfe>
-80105a3d:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-80105a41:	83 e0 03             	and    $0x3,%eax
-80105a44:	66 83 f8 03          	cmp    $0x3,%ax
-80105a48:	0f 84 03 01 00 00    	je     80105b51 <trap+0x201>
+80105db8:	e8 a3 db ff ff       	call   80103960 <myproc>
+80105dbd:	85 c0                	test   %eax,%eax
+80105dbf:	74 1d                	je     80105dde <trap+0xfe>
+80105dc1:	e8 9a db ff ff       	call   80103960 <myproc>
+80105dc6:	8b 40 28             	mov    0x28(%eax),%eax
+80105dc9:	85 c0                	test   %eax,%eax
+80105dcb:	74 11                	je     80105dde <trap+0xfe>
+80105dcd:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+80105dd1:	83 e0 03             	and    $0x3,%eax
+80105dd4:	66 83 f8 03          	cmp    $0x3,%ax
+80105dd8:	0f 84 03 01 00 00    	je     80105ee1 <trap+0x201>
     exit();
 }
-80105a4e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105a51:	5b                   	pop    %ebx
-80105a52:	5e                   	pop    %esi
-80105a53:	5f                   	pop    %edi
-80105a54:	5d                   	pop    %ebp
-80105a55:	c3                   	ret    
+80105dde:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105de1:	5b                   	pop    %ebx
+80105de2:	5e                   	pop    %esi
+80105de3:	5f                   	pop    %edi
+80105de4:	5d                   	pop    %ebp
+80105de5:	c3                   	ret    
     ideintr();
-80105a56:	e8 85 c7 ff ff       	call   801021e0 <ideintr>
+80105de6:	e8 f5 c3 ff ff       	call   801021e0 <ideintr>
     lapiceoi();
-80105a5b:	e8 60 ce ff ff       	call   801028c0 <lapiceoi>
+80105deb:	e8 d0 ca ff ff       	call   801028c0 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105a60:	e8 fb de ff ff       	call   80103960 <myproc>
-80105a65:	85 c0                	test   %eax,%eax
-80105a67:	75 8a                	jne    801059f3 <trap+0xa3>
-80105a69:	eb a5                	jmp    80105a10 <trap+0xc0>
+80105df0:	e8 6b db ff ff       	call   80103960 <myproc>
+80105df5:	85 c0                	test   %eax,%eax
+80105df7:	75 8a                	jne    80105d83 <trap+0xa3>
+80105df9:	eb a5                	jmp    80105da0 <trap+0xc0>
     if(cpuid() == 0){
-80105a6b:	e8 d0 de ff ff       	call   80103940 <cpuid>
-80105a70:	85 c0                	test   %eax,%eax
-80105a72:	75 e7                	jne    80105a5b <trap+0x10b>
+80105dfb:	e8 40 db ff ff       	call   80103940 <cpuid>
+80105e00:	85 c0                	test   %eax,%eax
+80105e02:	75 e7                	jne    80105deb <trap+0x10b>
       acquire(&tickslock);
-80105a74:	83 ec 0c             	sub    $0xc,%esp
-80105a77:	68 60 4c 11 80       	push   $0x80114c60
-80105a7c:	e8 df ea ff ff       	call   80104560 <acquire>
+80105e04:	83 ec 0c             	sub    $0xc,%esp
+80105e07:	68 60 4d 11 80       	push   $0x80114d60
+80105e0c:	e8 bf ea ff ff       	call   801048d0 <acquire>
       wakeup(&ticks);
-80105a81:	c7 04 24 a0 54 11 80 	movl   $0x801154a0,(%esp)
+80105e11:	c7 04 24 a0 55 11 80 	movl   $0x801155a0,(%esp)
       ticks++;
-80105a88:	83 05 a0 54 11 80 01 	addl   $0x1,0x801154a0
+80105e18:	83 05 a0 55 11 80 01 	addl   $0x1,0x801155a0
       wakeup(&ticks);
-80105a8f:	e8 4c e6 ff ff       	call   801040e0 <wakeup>
+80105e1f:	e8 bc e2 ff ff       	call   801040e0 <wakeup>
       release(&tickslock);
-80105a94:	c7 04 24 60 4c 11 80 	movl   $0x80114c60,(%esp)
-80105a9b:	e8 80 eb ff ff       	call   80104620 <release>
-80105aa0:	83 c4 10             	add    $0x10,%esp
+80105e24:	c7 04 24 60 4d 11 80 	movl   $0x80114d60,(%esp)
+80105e2b:	e8 60 eb ff ff       	call   80104990 <release>
+80105e30:	83 c4 10             	add    $0x10,%esp
     lapiceoi();
-80105aa3:	eb b6                	jmp    80105a5b <trap+0x10b>
+80105e33:	eb b6                	jmp    80105deb <trap+0x10b>
     kbdintr();
-80105aa5:	e8 d6 cc ff ff       	call   80102780 <kbdintr>
+80105e35:	e8 46 c9 ff ff       	call   80102780 <kbdintr>
     lapiceoi();
-80105aaa:	e8 11 ce ff ff       	call   801028c0 <lapiceoi>
+80105e3a:	e8 81 ca ff ff       	call   801028c0 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105aaf:	e8 ac de ff ff       	call   80103960 <myproc>
-80105ab4:	85 c0                	test   %eax,%eax
-80105ab6:	0f 85 37 ff ff ff    	jne    801059f3 <trap+0xa3>
-80105abc:	e9 4f ff ff ff       	jmp    80105a10 <trap+0xc0>
+80105e3f:	e8 1c db ff ff       	call   80103960 <myproc>
+80105e44:	85 c0                	test   %eax,%eax
+80105e46:	0f 85 37 ff ff ff    	jne    80105d83 <trap+0xa3>
+80105e4c:	e9 4f ff ff ff       	jmp    80105da0 <trap+0xc0>
     uartintr();
-80105ac1:	e8 4a 02 00 00       	call   80105d10 <uartintr>
+80105e51:	e8 4a 02 00 00       	call   801060a0 <uartintr>
     lapiceoi();
-80105ac6:	e8 f5 cd ff ff       	call   801028c0 <lapiceoi>
+80105e56:	e8 65 ca ff ff       	call   801028c0 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105acb:	e8 90 de ff ff       	call   80103960 <myproc>
-80105ad0:	85 c0                	test   %eax,%eax
-80105ad2:	0f 85 1b ff ff ff    	jne    801059f3 <trap+0xa3>
-80105ad8:	e9 33 ff ff ff       	jmp    80105a10 <trap+0xc0>
+80105e5b:	e8 00 db ff ff       	call   80103960 <myproc>
+80105e60:	85 c0                	test   %eax,%eax
+80105e62:	0f 85 1b ff ff ff    	jne    80105d83 <trap+0xa3>
+80105e68:	e9 33 ff ff ff       	jmp    80105da0 <trap+0xc0>
     cprintf("cpu%d: spurious interrupt at %x:%x\n",
-80105add:	8b 7b 38             	mov    0x38(%ebx),%edi
-80105ae0:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
-80105ae4:	e8 57 de ff ff       	call   80103940 <cpuid>
-80105ae9:	57                   	push   %edi
-80105aea:	56                   	push   %esi
-80105aeb:	50                   	push   %eax
-80105aec:	68 64 78 10 80       	push   $0x80107864
-80105af1:	e8 ba ab ff ff       	call   801006b0 <cprintf>
+80105e6d:	8b 7b 38             	mov    0x38(%ebx),%edi
+80105e70:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
+80105e74:	e8 c7 da ff ff       	call   80103940 <cpuid>
+80105e79:	57                   	push   %edi
+80105e7a:	56                   	push   %esi
+80105e7b:	50                   	push   %eax
+80105e7c:	68 10 7c 10 80       	push   $0x80107c10
+80105e81:	e8 2a a8 ff ff       	call   801006b0 <cprintf>
     lapiceoi();
-80105af6:	e8 c5 cd ff ff       	call   801028c0 <lapiceoi>
+80105e86:	e8 35 ca ff ff       	call   801028c0 <lapiceoi>
     break;
-80105afb:	83 c4 10             	add    $0x10,%esp
+80105e8b:	83 c4 10             	add    $0x10,%esp
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105afe:	e8 5d de ff ff       	call   80103960 <myproc>
-80105b03:	85 c0                	test   %eax,%eax
-80105b05:	0f 85 e8 fe ff ff    	jne    801059f3 <trap+0xa3>
-80105b0b:	e9 00 ff ff ff       	jmp    80105a10 <trap+0xc0>
+80105e8e:	e8 cd da ff ff       	call   80103960 <myproc>
+80105e93:	85 c0                	test   %eax,%eax
+80105e95:	0f 85 e8 fe ff ff    	jne    80105d83 <trap+0xa3>
+80105e9b:	e9 00 ff ff ff       	jmp    80105da0 <trap+0xc0>
   if(myproc() && myproc()->state == RUNNING &&
-80105b10:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
-80105b14:	0f 85 0e ff ff ff    	jne    80105a28 <trap+0xd8>
+80105ea0:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
+80105ea4:	0f 85 0e ff ff ff    	jne    80105db8 <trap+0xd8>
     yield();
-80105b1a:	e8 b1 e3 ff ff       	call   80103ed0 <yield>
-80105b1f:	e9 04 ff ff ff       	jmp    80105a28 <trap+0xd8>
-80105b24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105eaa:	e8 21 e0 ff ff       	call   80103ed0 <yield>
+80105eaf:	e9 04 ff ff ff       	jmp    80105db8 <trap+0xd8>
+80105eb4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(myproc()->killed)
-80105b28:	e8 33 de ff ff       	call   80103960 <myproc>
-80105b2d:	8b 70 24             	mov    0x24(%eax),%esi
-80105b30:	85 f6                	test   %esi,%esi
-80105b32:	75 3c                	jne    80105b70 <trap+0x220>
+80105eb8:	e8 a3 da ff ff       	call   80103960 <myproc>
+80105ebd:	8b 70 28             	mov    0x28(%eax),%esi
+80105ec0:	85 f6                	test   %esi,%esi
+80105ec2:	75 3c                	jne    80105f00 <trap+0x220>
     myproc()->tf = tf;
-80105b34:	e8 27 de ff ff       	call   80103960 <myproc>
-80105b39:	89 58 18             	mov    %ebx,0x18(%eax)
+80105ec4:	e8 97 da ff ff       	call   80103960 <myproc>
+80105ec9:	89 58 1c             	mov    %ebx,0x1c(%eax)
     syscall();
-80105b3c:	e8 ff ee ff ff       	call   80104a40 <syscall>
+80105ecc:	e8 df ee ff ff       	call   80104db0 <syscall>
     if(myproc()->killed)
-80105b41:	e8 1a de ff ff       	call   80103960 <myproc>
-80105b46:	8b 48 24             	mov    0x24(%eax),%ecx
-80105b49:	85 c9                	test   %ecx,%ecx
-80105b4b:	0f 84 fd fe ff ff    	je     80105a4e <trap+0xfe>
-}
-80105b51:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105b54:	5b                   	pop    %ebx
-80105b55:	5e                   	pop    %esi
-80105b56:	5f                   	pop    %edi
-80105b57:	5d                   	pop    %ebp
+80105ed1:	e8 8a da ff ff       	call   80103960 <myproc>
+80105ed6:	8b 48 28             	mov    0x28(%eax),%ecx
+80105ed9:	85 c9                	test   %ecx,%ecx
+80105edb:	0f 84 fd fe ff ff    	je     80105dde <trap+0xfe>
+}
+80105ee1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105ee4:	5b                   	pop    %ebx
+80105ee5:	5e                   	pop    %esi
+80105ee6:	5f                   	pop    %edi
+80105ee7:	5d                   	pop    %ebp
       exit();
-80105b58:	e9 33 e2 ff ff       	jmp    80103d90 <exit>
-80105b5d:	8d 76 00             	lea    0x0(%esi),%esi
+80105ee8:	e9 a3 de ff ff       	jmp    80103d90 <exit>
+80105eed:	8d 76 00             	lea    0x0(%esi),%esi
     exit();
-80105b60:	e8 2b e2 ff ff       	call   80103d90 <exit>
-80105b65:	e9 a6 fe ff ff       	jmp    80105a10 <trap+0xc0>
-80105b6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105ef0:	e8 9b de ff ff       	call   80103d90 <exit>
+80105ef5:	e9 a6 fe ff ff       	jmp    80105da0 <trap+0xc0>
+80105efa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       exit();
-80105b70:	e8 1b e2 ff ff       	call   80103d90 <exit>
-80105b75:	eb bd                	jmp    80105b34 <trap+0x1e4>
-80105b77:	0f 20 d6             	mov    %cr2,%esi
+80105f00:	e8 8b de ff ff       	call   80103d90 <exit>
+80105f05:	eb bd                	jmp    80105ec4 <trap+0x1e4>
+80105f07:	0f 20 d6             	mov    %cr2,%esi
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-80105b7a:	e8 c1 dd ff ff       	call   80103940 <cpuid>
-80105b7f:	83 ec 0c             	sub    $0xc,%esp
-80105b82:	56                   	push   %esi
-80105b83:	57                   	push   %edi
-80105b84:	50                   	push   %eax
-80105b85:	ff 73 30             	pushl  0x30(%ebx)
-80105b88:	68 88 78 10 80       	push   $0x80107888
-80105b8d:	e8 1e ab ff ff       	call   801006b0 <cprintf>
+80105f0a:	e8 31 da ff ff       	call   80103940 <cpuid>
+80105f0f:	83 ec 0c             	sub    $0xc,%esp
+80105f12:	56                   	push   %esi
+80105f13:	57                   	push   %edi
+80105f14:	50                   	push   %eax
+80105f15:	ff 73 30             	pushl  0x30(%ebx)
+80105f18:	68 34 7c 10 80       	push   $0x80107c34
+80105f1d:	e8 8e a7 ff ff       	call   801006b0 <cprintf>
       panic("trap");
-80105b92:	83 c4 14             	add    $0x14,%esp
-80105b95:	68 5e 78 10 80       	push   $0x8010785e
-80105b9a:	e8 f1 a7 ff ff       	call   80100390 <panic>
-80105b9f:	90                   	nop
+80105f22:	83 c4 14             	add    $0x14,%esp
+80105f25:	68 0a 7c 10 80       	push   $0x80107c0a
+80105f2a:	e8 61 a4 ff ff       	call   80100390 <panic>
+80105f2f:	90                   	nop
 
-80105ba0 <uartgetc>:
+80105f30 <uartgetc>:
   outb(COM1+0, c);
 }
 
 static int
 uartgetc(void)
 {
-80105ba0:	f3 0f 1e fb          	endbr32 
+80105f30:	f3 0f 1e fb          	endbr32 
   if(!uart)
-80105ba4:	a1 bc a5 10 80       	mov    0x8010a5bc,%eax
-80105ba9:	85 c0                	test   %eax,%eax
-80105bab:	74 1b                	je     80105bc8 <uartgetc+0x28>
+80105f34:	a1 bc a5 10 80       	mov    0x8010a5bc,%eax
+80105f39:	85 c0                	test   %eax,%eax
+80105f3b:	74 1b                	je     80105f58 <uartgetc+0x28>
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105bad:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80105bb2:	ec                   	in     (%dx),%al
+80105f3d:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80105f42:	ec                   	in     (%dx),%al
     return -1;
   if(!(inb(COM1+5) & 0x01))
-80105bb3:	a8 01                	test   $0x1,%al
-80105bb5:	74 11                	je     80105bc8 <uartgetc+0x28>
-80105bb7:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105bbc:	ec                   	in     (%dx),%al
+80105f43:	a8 01                	test   $0x1,%al
+80105f45:	74 11                	je     80105f58 <uartgetc+0x28>
+80105f47:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105f4c:	ec                   	in     (%dx),%al
     return -1;
   return inb(COM1+0);
-80105bbd:	0f b6 c0             	movzbl %al,%eax
-80105bc0:	c3                   	ret    
-80105bc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105f4d:	0f b6 c0             	movzbl %al,%eax
+80105f50:	c3                   	ret    
+80105f51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     return -1;
-80105bc8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105f58:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105bcd:	c3                   	ret    
-80105bce:	66 90                	xchg   %ax,%ax
+80105f5d:	c3                   	ret    
+80105f5e:	66 90                	xchg   %ax,%ax
 
-80105bd0 <uartputc.part.0>:
+80105f60 <uartputc.part.0>:
 uartputc(int c)
-80105bd0:	55                   	push   %ebp
-80105bd1:	89 e5                	mov    %esp,%ebp
-80105bd3:	57                   	push   %edi
-80105bd4:	89 c7                	mov    %eax,%edi
-80105bd6:	56                   	push   %esi
-80105bd7:	be fd 03 00 00       	mov    $0x3fd,%esi
-80105bdc:	53                   	push   %ebx
-80105bdd:	bb 80 00 00 00       	mov    $0x80,%ebx
-80105be2:	83 ec 0c             	sub    $0xc,%esp
-80105be5:	eb 1b                	jmp    80105c02 <uartputc.part.0+0x32>
-80105be7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105bee:	66 90                	xchg   %ax,%ax
+80105f60:	55                   	push   %ebp
+80105f61:	89 e5                	mov    %esp,%ebp
+80105f63:	57                   	push   %edi
+80105f64:	89 c7                	mov    %eax,%edi
+80105f66:	56                   	push   %esi
+80105f67:	be fd 03 00 00       	mov    $0x3fd,%esi
+80105f6c:	53                   	push   %ebx
+80105f6d:	bb 80 00 00 00       	mov    $0x80,%ebx
+80105f72:	83 ec 0c             	sub    $0xc,%esp
+80105f75:	eb 1b                	jmp    80105f92 <uartputc.part.0+0x32>
+80105f77:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105f7e:	66 90                	xchg   %ax,%ax
     microdelay(10);
-80105bf0:	83 ec 0c             	sub    $0xc,%esp
-80105bf3:	6a 0a                	push   $0xa
-80105bf5:	e8 e6 cc ff ff       	call   801028e0 <microdelay>
+80105f80:	83 ec 0c             	sub    $0xc,%esp
+80105f83:	6a 0a                	push   $0xa
+80105f85:	e8 56 c9 ff ff       	call   801028e0 <microdelay>
   for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-80105bfa:	83 c4 10             	add    $0x10,%esp
-80105bfd:	83 eb 01             	sub    $0x1,%ebx
-80105c00:	74 07                	je     80105c09 <uartputc.part.0+0x39>
-80105c02:	89 f2                	mov    %esi,%edx
-80105c04:	ec                   	in     (%dx),%al
-80105c05:	a8 20                	test   $0x20,%al
-80105c07:	74 e7                	je     80105bf0 <uartputc.part.0+0x20>
+80105f8a:	83 c4 10             	add    $0x10,%esp
+80105f8d:	83 eb 01             	sub    $0x1,%ebx
+80105f90:	74 07                	je     80105f99 <uartputc.part.0+0x39>
+80105f92:	89 f2                	mov    %esi,%edx
+80105f94:	ec                   	in     (%dx),%al
+80105f95:	a8 20                	test   $0x20,%al
+80105f97:	74 e7                	je     80105f80 <uartputc.part.0+0x20>
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80105c09:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105c0e:	89 f8                	mov    %edi,%eax
-80105c10:	ee                   	out    %al,(%dx)
-}
-80105c11:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105c14:	5b                   	pop    %ebx
-80105c15:	5e                   	pop    %esi
-80105c16:	5f                   	pop    %edi
-80105c17:	5d                   	pop    %ebp
-80105c18:	c3                   	ret    
-80105c19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80105c20 <uartinit>:
-{
-80105c20:	f3 0f 1e fb          	endbr32 
-80105c24:	55                   	push   %ebp
-80105c25:	31 c9                	xor    %ecx,%ecx
-80105c27:	89 c8                	mov    %ecx,%eax
-80105c29:	89 e5                	mov    %esp,%ebp
-80105c2b:	57                   	push   %edi
-80105c2c:	56                   	push   %esi
-80105c2d:	53                   	push   %ebx
-80105c2e:	bb fa 03 00 00       	mov    $0x3fa,%ebx
-80105c33:	89 da                	mov    %ebx,%edx
-80105c35:	83 ec 0c             	sub    $0xc,%esp
-80105c38:	ee                   	out    %al,(%dx)
-80105c39:	bf fb 03 00 00       	mov    $0x3fb,%edi
-80105c3e:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
-80105c43:	89 fa                	mov    %edi,%edx
-80105c45:	ee                   	out    %al,(%dx)
-80105c46:	b8 0c 00 00 00       	mov    $0xc,%eax
-80105c4b:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105c50:	ee                   	out    %al,(%dx)
-80105c51:	be f9 03 00 00       	mov    $0x3f9,%esi
-80105c56:	89 c8                	mov    %ecx,%eax
-80105c58:	89 f2                	mov    %esi,%edx
-80105c5a:	ee                   	out    %al,(%dx)
-80105c5b:	b8 03 00 00 00       	mov    $0x3,%eax
-80105c60:	89 fa                	mov    %edi,%edx
-80105c62:	ee                   	out    %al,(%dx)
-80105c63:	ba fc 03 00 00       	mov    $0x3fc,%edx
-80105c68:	89 c8                	mov    %ecx,%eax
-80105c6a:	ee                   	out    %al,(%dx)
-80105c6b:	b8 01 00 00 00       	mov    $0x1,%eax
-80105c70:	89 f2                	mov    %esi,%edx
-80105c72:	ee                   	out    %al,(%dx)
+80105f99:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105f9e:	89 f8                	mov    %edi,%eax
+80105fa0:	ee                   	out    %al,(%dx)
+}
+80105fa1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105fa4:	5b                   	pop    %ebx
+80105fa5:	5e                   	pop    %esi
+80105fa6:	5f                   	pop    %edi
+80105fa7:	5d                   	pop    %ebp
+80105fa8:	c3                   	ret    
+80105fa9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105fb0 <uartinit>:
+{
+80105fb0:	f3 0f 1e fb          	endbr32 
+80105fb4:	55                   	push   %ebp
+80105fb5:	31 c9                	xor    %ecx,%ecx
+80105fb7:	89 c8                	mov    %ecx,%eax
+80105fb9:	89 e5                	mov    %esp,%ebp
+80105fbb:	57                   	push   %edi
+80105fbc:	56                   	push   %esi
+80105fbd:	53                   	push   %ebx
+80105fbe:	bb fa 03 00 00       	mov    $0x3fa,%ebx
+80105fc3:	89 da                	mov    %ebx,%edx
+80105fc5:	83 ec 0c             	sub    $0xc,%esp
+80105fc8:	ee                   	out    %al,(%dx)
+80105fc9:	bf fb 03 00 00       	mov    $0x3fb,%edi
+80105fce:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
+80105fd3:	89 fa                	mov    %edi,%edx
+80105fd5:	ee                   	out    %al,(%dx)
+80105fd6:	b8 0c 00 00 00       	mov    $0xc,%eax
+80105fdb:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105fe0:	ee                   	out    %al,(%dx)
+80105fe1:	be f9 03 00 00       	mov    $0x3f9,%esi
+80105fe6:	89 c8                	mov    %ecx,%eax
+80105fe8:	89 f2                	mov    %esi,%edx
+80105fea:	ee                   	out    %al,(%dx)
+80105feb:	b8 03 00 00 00       	mov    $0x3,%eax
+80105ff0:	89 fa                	mov    %edi,%edx
+80105ff2:	ee                   	out    %al,(%dx)
+80105ff3:	ba fc 03 00 00       	mov    $0x3fc,%edx
+80105ff8:	89 c8                	mov    %ecx,%eax
+80105ffa:	ee                   	out    %al,(%dx)
+80105ffb:	b8 01 00 00 00       	mov    $0x1,%eax
+80106000:	89 f2                	mov    %esi,%edx
+80106002:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105c73:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80105c78:	ec                   	in     (%dx),%al
+80106003:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80106008:	ec                   	in     (%dx),%al
   if(inb(COM1+5) == 0xFF)
-80105c79:	3c ff                	cmp    $0xff,%al
-80105c7b:	74 52                	je     80105ccf <uartinit+0xaf>
+80106009:	3c ff                	cmp    $0xff,%al
+8010600b:	74 52                	je     8010605f <uartinit+0xaf>
   uart = 1;
-80105c7d:	c7 05 bc a5 10 80 01 	movl   $0x1,0x8010a5bc
-80105c84:	00 00 00 
-80105c87:	89 da                	mov    %ebx,%edx
-80105c89:	ec                   	in     (%dx),%al
-80105c8a:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105c8f:	ec                   	in     (%dx),%al
+8010600d:	c7 05 bc a5 10 80 01 	movl   $0x1,0x8010a5bc
+80106014:	00 00 00 
+80106017:	89 da                	mov    %ebx,%edx
+80106019:	ec                   	in     (%dx),%al
+8010601a:	ba f8 03 00 00       	mov    $0x3f8,%edx
+8010601f:	ec                   	in     (%dx),%al
   ioapicenable(IRQ_COM1, 0);
-80105c90:	83 ec 08             	sub    $0x8,%esp
-80105c93:	be 76 00 00 00       	mov    $0x76,%esi
+80106020:	83 ec 08             	sub    $0x8,%esp
+80106023:	be 76 00 00 00       	mov    $0x76,%esi
   for(p="xv6...\n"; *p; p++)
-80105c98:	bb 80 79 10 80       	mov    $0x80107980,%ebx
+80106028:	bb 2c 7d 10 80       	mov    $0x80107d2c,%ebx
   ioapicenable(IRQ_COM1, 0);
-80105c9d:	6a 00                	push   $0x0
-80105c9f:	6a 04                	push   $0x4
-80105ca1:	e8 8a c7 ff ff       	call   80102430 <ioapicenable>
-80105ca6:	83 c4 10             	add    $0x10,%esp
+8010602d:	6a 00                	push   $0x0
+8010602f:	6a 04                	push   $0x4
+80106031:	e8 fa c3 ff ff       	call   80102430 <ioapicenable>
+80106036:	83 c4 10             	add    $0x10,%esp
   for(p="xv6...\n"; *p; p++)
-80105ca9:	b8 78 00 00 00       	mov    $0x78,%eax
-80105cae:	eb 04                	jmp    80105cb4 <uartinit+0x94>
-80105cb0:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
+80106039:	b8 78 00 00 00       	mov    $0x78,%eax
+8010603e:	eb 04                	jmp    80106044 <uartinit+0x94>
+80106040:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
   if(!uart)
-80105cb4:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
-80105cba:	85 d2                	test   %edx,%edx
-80105cbc:	74 08                	je     80105cc6 <uartinit+0xa6>
+80106044:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
+8010604a:	85 d2                	test   %edx,%edx
+8010604c:	74 08                	je     80106056 <uartinit+0xa6>
     uartputc(*p);
-80105cbe:	0f be c0             	movsbl %al,%eax
-80105cc1:	e8 0a ff ff ff       	call   80105bd0 <uartputc.part.0>
+8010604e:	0f be c0             	movsbl %al,%eax
+80106051:	e8 0a ff ff ff       	call   80105f60 <uartputc.part.0>
   for(p="xv6...\n"; *p; p++)
-80105cc6:	89 f0                	mov    %esi,%eax
-80105cc8:	83 c3 01             	add    $0x1,%ebx
-80105ccb:	84 c0                	test   %al,%al
-80105ccd:	75 e1                	jne    80105cb0 <uartinit+0x90>
-}
-80105ccf:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105cd2:	5b                   	pop    %ebx
-80105cd3:	5e                   	pop    %esi
-80105cd4:	5f                   	pop    %edi
-80105cd5:	5d                   	pop    %ebp
-80105cd6:	c3                   	ret    
-80105cd7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105cde:	66 90                	xchg   %ax,%ax
+80106056:	89 f0                	mov    %esi,%eax
+80106058:	83 c3 01             	add    $0x1,%ebx
+8010605b:	84 c0                	test   %al,%al
+8010605d:	75 e1                	jne    80106040 <uartinit+0x90>
+}
+8010605f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106062:	5b                   	pop    %ebx
+80106063:	5e                   	pop    %esi
+80106064:	5f                   	pop    %edi
+80106065:	5d                   	pop    %ebp
+80106066:	c3                   	ret    
+80106067:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010606e:	66 90                	xchg   %ax,%ax
 
-80105ce0 <uartputc>:
+80106070 <uartputc>:
 {
-80105ce0:	f3 0f 1e fb          	endbr32 
-80105ce4:	55                   	push   %ebp
+80106070:	f3 0f 1e fb          	endbr32 
+80106074:	55                   	push   %ebp
   if(!uart)
-80105ce5:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
+80106075:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
 {
-80105ceb:	89 e5                	mov    %esp,%ebp
-80105ced:	8b 45 08             	mov    0x8(%ebp),%eax
+8010607b:	89 e5                	mov    %esp,%ebp
+8010607d:	8b 45 08             	mov    0x8(%ebp),%eax
   if(!uart)
-80105cf0:	85 d2                	test   %edx,%edx
-80105cf2:	74 0c                	je     80105d00 <uartputc+0x20>
+80106080:	85 d2                	test   %edx,%edx
+80106082:	74 0c                	je     80106090 <uartputc+0x20>
 }
-80105cf4:	5d                   	pop    %ebp
-80105cf5:	e9 d6 fe ff ff       	jmp    80105bd0 <uartputc.part.0>
-80105cfa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80105d00:	5d                   	pop    %ebp
-80105d01:	c3                   	ret    
-80105d02:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105d09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106084:	5d                   	pop    %ebp
+80106085:	e9 d6 fe ff ff       	jmp    80105f60 <uartputc.part.0>
+8010608a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106090:	5d                   	pop    %ebp
+80106091:	c3                   	ret    
+80106092:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106099:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80105d10 <uartintr>:
+801060a0 <uartintr>:
 
 void
 uartintr(void)
 {
-80105d10:	f3 0f 1e fb          	endbr32 
-80105d14:	55                   	push   %ebp
-80105d15:	89 e5                	mov    %esp,%ebp
-80105d17:	83 ec 14             	sub    $0x14,%esp
+801060a0:	f3 0f 1e fb          	endbr32 
+801060a4:	55                   	push   %ebp
+801060a5:	89 e5                	mov    %esp,%ebp
+801060a7:	83 ec 14             	sub    $0x14,%esp
   consoleintr(uartgetc);
-80105d1a:	68 a0 5b 10 80       	push   $0x80105ba0
-80105d1f:	e8 3c ab ff ff       	call   80100860 <consoleintr>
+801060aa:	68 30 5f 10 80       	push   $0x80105f30
+801060af:	e8 ac a7 ff ff       	call   80100860 <consoleintr>
 }
-80105d24:	83 c4 10             	add    $0x10,%esp
-80105d27:	c9                   	leave  
-80105d28:	c3                   	ret    
+801060b4:	83 c4 10             	add    $0x10,%esp
+801060b7:	c9                   	leave  
+801060b8:	c3                   	ret    
 
-80105d29 <vector0>:
+801060b9 <vector0>:
 # generated by vectors.pl - do not edit
 # handlers
 .globl alltraps
 .globl vector0
 vector0:
   pushl $0
-80105d29:	6a 00                	push   $0x0
+801060b9:	6a 00                	push   $0x0
   pushl $0
-80105d2b:	6a 00                	push   $0x0
+801060bb:	6a 00                	push   $0x0
   jmp alltraps
-80105d2d:	e9 3c fb ff ff       	jmp    8010586e <alltraps>
+801060bd:	e9 47 fb ff ff       	jmp    80105c09 <alltraps>
 
-80105d32 <vector1>:
+801060c2 <vector1>:
 .globl vector1
 vector1:
   pushl $0
-80105d32:	6a 00                	push   $0x0
+801060c2:	6a 00                	push   $0x0
   pushl $1
-80105d34:	6a 01                	push   $0x1
+801060c4:	6a 01                	push   $0x1
   jmp alltraps
-80105d36:	e9 33 fb ff ff       	jmp    8010586e <alltraps>
+801060c6:	e9 3e fb ff ff       	jmp    80105c09 <alltraps>
 
-80105d3b <vector2>:
+801060cb <vector2>:
 .globl vector2
 vector2:
   pushl $0
-80105d3b:	6a 00                	push   $0x0
+801060cb:	6a 00                	push   $0x0
   pushl $2
-80105d3d:	6a 02                	push   $0x2
+801060cd:	6a 02                	push   $0x2
   jmp alltraps
-80105d3f:	e9 2a fb ff ff       	jmp    8010586e <alltraps>
+801060cf:	e9 35 fb ff ff       	jmp    80105c09 <alltraps>
 
-80105d44 <vector3>:
+801060d4 <vector3>:
 .globl vector3
 vector3:
   pushl $0
-80105d44:	6a 00                	push   $0x0
+801060d4:	6a 00                	push   $0x0
   pushl $3
-80105d46:	6a 03                	push   $0x3
+801060d6:	6a 03                	push   $0x3
   jmp alltraps
-80105d48:	e9 21 fb ff ff       	jmp    8010586e <alltraps>
+801060d8:	e9 2c fb ff ff       	jmp    80105c09 <alltraps>
 
-80105d4d <vector4>:
+801060dd <vector4>:
 .globl vector4
 vector4:
   pushl $0
-80105d4d:	6a 00                	push   $0x0
+801060dd:	6a 00                	push   $0x0
   pushl $4
-80105d4f:	6a 04                	push   $0x4
+801060df:	6a 04                	push   $0x4
   jmp alltraps
-80105d51:	e9 18 fb ff ff       	jmp    8010586e <alltraps>
+801060e1:	e9 23 fb ff ff       	jmp    80105c09 <alltraps>
 
-80105d56 <vector5>:
+801060e6 <vector5>:
 .globl vector5
 vector5:
   pushl $0
-80105d56:	6a 00                	push   $0x0
+801060e6:	6a 00                	push   $0x0
   pushl $5
-80105d58:	6a 05                	push   $0x5
+801060e8:	6a 05                	push   $0x5
   jmp alltraps
-80105d5a:	e9 0f fb ff ff       	jmp    8010586e <alltraps>
+801060ea:	e9 1a fb ff ff       	jmp    80105c09 <alltraps>
 
-80105d5f <vector6>:
+801060ef <vector6>:
 .globl vector6
 vector6:
   pushl $0
-80105d5f:	6a 00                	push   $0x0
+801060ef:	6a 00                	push   $0x0
   pushl $6
-80105d61:	6a 06                	push   $0x6
+801060f1:	6a 06                	push   $0x6
   jmp alltraps
-80105d63:	e9 06 fb ff ff       	jmp    8010586e <alltraps>
+801060f3:	e9 11 fb ff ff       	jmp    80105c09 <alltraps>
 
-80105d68 <vector7>:
+801060f8 <vector7>:
 .globl vector7
 vector7:
   pushl $0
-80105d68:	6a 00                	push   $0x0
+801060f8:	6a 00                	push   $0x0
   pushl $7
-80105d6a:	6a 07                	push   $0x7
+801060fa:	6a 07                	push   $0x7
   jmp alltraps
-80105d6c:	e9 fd fa ff ff       	jmp    8010586e <alltraps>
+801060fc:	e9 08 fb ff ff       	jmp    80105c09 <alltraps>
 
-80105d71 <vector8>:
+80106101 <vector8>:
 .globl vector8
 vector8:
   pushl $8
-80105d71:	6a 08                	push   $0x8
+80106101:	6a 08                	push   $0x8
   jmp alltraps
-80105d73:	e9 f6 fa ff ff       	jmp    8010586e <alltraps>
+80106103:	e9 01 fb ff ff       	jmp    80105c09 <alltraps>
 
-80105d78 <vector9>:
+80106108 <vector9>:
 .globl vector9
 vector9:
   pushl $0
-80105d78:	6a 00                	push   $0x0
+80106108:	6a 00                	push   $0x0
   pushl $9
-80105d7a:	6a 09                	push   $0x9
+8010610a:	6a 09                	push   $0x9
   jmp alltraps
-80105d7c:	e9 ed fa ff ff       	jmp    8010586e <alltraps>
+8010610c:	e9 f8 fa ff ff       	jmp    80105c09 <alltraps>
 
-80105d81 <vector10>:
+80106111 <vector10>:
 .globl vector10
 vector10:
   pushl $10
-80105d81:	6a 0a                	push   $0xa
+80106111:	6a 0a                	push   $0xa
   jmp alltraps
-80105d83:	e9 e6 fa ff ff       	jmp    8010586e <alltraps>
+80106113:	e9 f1 fa ff ff       	jmp    80105c09 <alltraps>
 
-80105d88 <vector11>:
+80106118 <vector11>:
 .globl vector11
 vector11:
   pushl $11
-80105d88:	6a 0b                	push   $0xb
+80106118:	6a 0b                	push   $0xb
   jmp alltraps
-80105d8a:	e9 df fa ff ff       	jmp    8010586e <alltraps>
+8010611a:	e9 ea fa ff ff       	jmp    80105c09 <alltraps>
 
-80105d8f <vector12>:
+8010611f <vector12>:
 .globl vector12
 vector12:
   pushl $12
-80105d8f:	6a 0c                	push   $0xc
+8010611f:	6a 0c                	push   $0xc
   jmp alltraps
-80105d91:	e9 d8 fa ff ff       	jmp    8010586e <alltraps>
+80106121:	e9 e3 fa ff ff       	jmp    80105c09 <alltraps>
 
-80105d96 <vector13>:
+80106126 <vector13>:
 .globl vector13
 vector13:
   pushl $13
-80105d96:	6a 0d                	push   $0xd
+80106126:	6a 0d                	push   $0xd
   jmp alltraps
-80105d98:	e9 d1 fa ff ff       	jmp    8010586e <alltraps>
+80106128:	e9 dc fa ff ff       	jmp    80105c09 <alltraps>
 
-80105d9d <vector14>:
+8010612d <vector14>:
 .globl vector14
 vector14:
   pushl $14
-80105d9d:	6a 0e                	push   $0xe
+8010612d:	6a 0e                	push   $0xe
   jmp alltraps
-80105d9f:	e9 ca fa ff ff       	jmp    8010586e <alltraps>
+8010612f:	e9 d5 fa ff ff       	jmp    80105c09 <alltraps>
 
-80105da4 <vector15>:
+80106134 <vector15>:
 .globl vector15
 vector15:
   pushl $0
-80105da4:	6a 00                	push   $0x0
+80106134:	6a 00                	push   $0x0
   pushl $15
-80105da6:	6a 0f                	push   $0xf
+80106136:	6a 0f                	push   $0xf
   jmp alltraps
-80105da8:	e9 c1 fa ff ff       	jmp    8010586e <alltraps>
+80106138:	e9 cc fa ff ff       	jmp    80105c09 <alltraps>
 
-80105dad <vector16>:
+8010613d <vector16>:
 .globl vector16
 vector16:
   pushl $0
-80105dad:	6a 00                	push   $0x0
+8010613d:	6a 00                	push   $0x0
   pushl $16
-80105daf:	6a 10                	push   $0x10
+8010613f:	6a 10                	push   $0x10
   jmp alltraps
-80105db1:	e9 b8 fa ff ff       	jmp    8010586e <alltraps>
+80106141:	e9 c3 fa ff ff       	jmp    80105c09 <alltraps>
 
-80105db6 <vector17>:
+80106146 <vector17>:
 .globl vector17
 vector17:
   pushl $17
-80105db6:	6a 11                	push   $0x11
+80106146:	6a 11                	push   $0x11
   jmp alltraps
-80105db8:	e9 b1 fa ff ff       	jmp    8010586e <alltraps>
+80106148:	e9 bc fa ff ff       	jmp    80105c09 <alltraps>
 
-80105dbd <vector18>:
+8010614d <vector18>:
 .globl vector18
 vector18:
   pushl $0
-80105dbd:	6a 00                	push   $0x0
+8010614d:	6a 00                	push   $0x0
   pushl $18
-80105dbf:	6a 12                	push   $0x12
+8010614f:	6a 12                	push   $0x12
   jmp alltraps
-80105dc1:	e9 a8 fa ff ff       	jmp    8010586e <alltraps>
+80106151:	e9 b3 fa ff ff       	jmp    80105c09 <alltraps>
 
-80105dc6 <vector19>:
+80106156 <vector19>:
 .globl vector19
 vector19:
   pushl $0
-80105dc6:	6a 00                	push   $0x0
+80106156:	6a 00                	push   $0x0
   pushl $19
-80105dc8:	6a 13                	push   $0x13
+80106158:	6a 13                	push   $0x13
   jmp alltraps
-80105dca:	e9 9f fa ff ff       	jmp    8010586e <alltraps>
+8010615a:	e9 aa fa ff ff       	jmp    80105c09 <alltraps>
 
-80105dcf <vector20>:
+8010615f <vector20>:
 .globl vector20
 vector20:
   pushl $0
-80105dcf:	6a 00                	push   $0x0
+8010615f:	6a 00                	push   $0x0
   pushl $20
-80105dd1:	6a 14                	push   $0x14
+80106161:	6a 14                	push   $0x14
   jmp alltraps
-80105dd3:	e9 96 fa ff ff       	jmp    8010586e <alltraps>
+80106163:	e9 a1 fa ff ff       	jmp    80105c09 <alltraps>
 
-80105dd8 <vector21>:
+80106168 <vector21>:
 .globl vector21
 vector21:
   pushl $0
-80105dd8:	6a 00                	push   $0x0
+80106168:	6a 00                	push   $0x0
   pushl $21
-80105dda:	6a 15                	push   $0x15
+8010616a:	6a 15                	push   $0x15
   jmp alltraps
-80105ddc:	e9 8d fa ff ff       	jmp    8010586e <alltraps>
+8010616c:	e9 98 fa ff ff       	jmp    80105c09 <alltraps>
 
-80105de1 <vector22>:
+80106171 <vector22>:
 .globl vector22
 vector22:
   pushl $0
-80105de1:	6a 00                	push   $0x0
+80106171:	6a 00                	push   $0x0
   pushl $22
-80105de3:	6a 16                	push   $0x16
+80106173:	6a 16                	push   $0x16
   jmp alltraps
-80105de5:	e9 84 fa ff ff       	jmp    8010586e <alltraps>
+80106175:	e9 8f fa ff ff       	jmp    80105c09 <alltraps>
 
-80105dea <vector23>:
+8010617a <vector23>:
 .globl vector23
 vector23:
   pushl $0
-80105dea:	6a 00                	push   $0x0
+8010617a:	6a 00                	push   $0x0
   pushl $23
-80105dec:	6a 17                	push   $0x17
+8010617c:	6a 17                	push   $0x17
   jmp alltraps
-80105dee:	e9 7b fa ff ff       	jmp    8010586e <alltraps>
+8010617e:	e9 86 fa ff ff       	jmp    80105c09 <alltraps>
 
-80105df3 <vector24>:
+80106183 <vector24>:
 .globl vector24
 vector24:
   pushl $0
-80105df3:	6a 00                	push   $0x0
+80106183:	6a 00                	push   $0x0
   pushl $24
-80105df5:	6a 18                	push   $0x18
+80106185:	6a 18                	push   $0x18
   jmp alltraps
-80105df7:	e9 72 fa ff ff       	jmp    8010586e <alltraps>
+80106187:	e9 7d fa ff ff       	jmp    80105c09 <alltraps>
 
-80105dfc <vector25>:
+8010618c <vector25>:
 .globl vector25
 vector25:
   pushl $0
-80105dfc:	6a 00                	push   $0x0
+8010618c:	6a 00                	push   $0x0
   pushl $25
-80105dfe:	6a 19                	push   $0x19
+8010618e:	6a 19                	push   $0x19
   jmp alltraps
-80105e00:	e9 69 fa ff ff       	jmp    8010586e <alltraps>
+80106190:	e9 74 fa ff ff       	jmp    80105c09 <alltraps>
 
-80105e05 <vector26>:
+80106195 <vector26>:
 .globl vector26
 vector26:
   pushl $0
-80105e05:	6a 00                	push   $0x0
+80106195:	6a 00                	push   $0x0
   pushl $26
-80105e07:	6a 1a                	push   $0x1a
+80106197:	6a 1a                	push   $0x1a
   jmp alltraps
-80105e09:	e9 60 fa ff ff       	jmp    8010586e <alltraps>
+80106199:	e9 6b fa ff ff       	jmp    80105c09 <alltraps>
 
-80105e0e <vector27>:
+8010619e <vector27>:
 .globl vector27
 vector27:
   pushl $0
-80105e0e:	6a 00                	push   $0x0
+8010619e:	6a 00                	push   $0x0
   pushl $27
-80105e10:	6a 1b                	push   $0x1b
+801061a0:	6a 1b                	push   $0x1b
   jmp alltraps
-80105e12:	e9 57 fa ff ff       	jmp    8010586e <alltraps>
+801061a2:	e9 62 fa ff ff       	jmp    80105c09 <alltraps>
 
-80105e17 <vector28>:
+801061a7 <vector28>:
 .globl vector28
 vector28:
   pushl $0
-80105e17:	6a 00                	push   $0x0
+801061a7:	6a 00                	push   $0x0
   pushl $28
-80105e19:	6a 1c                	push   $0x1c
+801061a9:	6a 1c                	push   $0x1c
   jmp alltraps
-80105e1b:	e9 4e fa ff ff       	jmp    8010586e <alltraps>
+801061ab:	e9 59 fa ff ff       	jmp    80105c09 <alltraps>
 
-80105e20 <vector29>:
+801061b0 <vector29>:
 .globl vector29
 vector29:
   pushl $0
-80105e20:	6a 00                	push   $0x0
+801061b0:	6a 00                	push   $0x0
   pushl $29
-80105e22:	6a 1d                	push   $0x1d
+801061b2:	6a 1d                	push   $0x1d
   jmp alltraps
-80105e24:	e9 45 fa ff ff       	jmp    8010586e <alltraps>
+801061b4:	e9 50 fa ff ff       	jmp    80105c09 <alltraps>
 
-80105e29 <vector30>:
+801061b9 <vector30>:
 .globl vector30
 vector30:
   pushl $0
-80105e29:	6a 00                	push   $0x0
+801061b9:	6a 00                	push   $0x0
   pushl $30
-80105e2b:	6a 1e                	push   $0x1e
+801061bb:	6a 1e                	push   $0x1e
   jmp alltraps
-80105e2d:	e9 3c fa ff ff       	jmp    8010586e <alltraps>
+801061bd:	e9 47 fa ff ff       	jmp    80105c09 <alltraps>
 
-80105e32 <vector31>:
+801061c2 <vector31>:
 .globl vector31
 vector31:
   pushl $0
-80105e32:	6a 00                	push   $0x0
+801061c2:	6a 00                	push   $0x0
   pushl $31
-80105e34:	6a 1f                	push   $0x1f
+801061c4:	6a 1f                	push   $0x1f
   jmp alltraps
-80105e36:	e9 33 fa ff ff       	jmp    8010586e <alltraps>
+801061c6:	e9 3e fa ff ff       	jmp    80105c09 <alltraps>
 
-80105e3b <vector32>:
+801061cb <vector32>:
 .globl vector32
 vector32:
   pushl $0
-80105e3b:	6a 00                	push   $0x0
+801061cb:	6a 00                	push   $0x0
   pushl $32
-80105e3d:	6a 20                	push   $0x20
+801061cd:	6a 20                	push   $0x20
   jmp alltraps
-80105e3f:	e9 2a fa ff ff       	jmp    8010586e <alltraps>
+801061cf:	e9 35 fa ff ff       	jmp    80105c09 <alltraps>
 
-80105e44 <vector33>:
+801061d4 <vector33>:
 .globl vector33
 vector33:
   pushl $0
-80105e44:	6a 00                	push   $0x0
+801061d4:	6a 00                	push   $0x0
   pushl $33
-80105e46:	6a 21                	push   $0x21
+801061d6:	6a 21                	push   $0x21
   jmp alltraps
-80105e48:	e9 21 fa ff ff       	jmp    8010586e <alltraps>
+801061d8:	e9 2c fa ff ff       	jmp    80105c09 <alltraps>
 
-80105e4d <vector34>:
+801061dd <vector34>:
 .globl vector34
 vector34:
   pushl $0
-80105e4d:	6a 00                	push   $0x0
+801061dd:	6a 00                	push   $0x0
   pushl $34
-80105e4f:	6a 22                	push   $0x22
+801061df:	6a 22                	push   $0x22
   jmp alltraps
-80105e51:	e9 18 fa ff ff       	jmp    8010586e <alltraps>
+801061e1:	e9 23 fa ff ff       	jmp    80105c09 <alltraps>
 
-80105e56 <vector35>:
+801061e6 <vector35>:
 .globl vector35
 vector35:
   pushl $0
-80105e56:	6a 00                	push   $0x0
+801061e6:	6a 00                	push   $0x0
   pushl $35
-80105e58:	6a 23                	push   $0x23
+801061e8:	6a 23                	push   $0x23
   jmp alltraps
-80105e5a:	e9 0f fa ff ff       	jmp    8010586e <alltraps>
+801061ea:	e9 1a fa ff ff       	jmp    80105c09 <alltraps>
 
-80105e5f <vector36>:
+801061ef <vector36>:
 .globl vector36
 vector36:
   pushl $0
-80105e5f:	6a 00                	push   $0x0
+801061ef:	6a 00                	push   $0x0
   pushl $36
-80105e61:	6a 24                	push   $0x24
+801061f1:	6a 24                	push   $0x24
   jmp alltraps
-80105e63:	e9 06 fa ff ff       	jmp    8010586e <alltraps>
+801061f3:	e9 11 fa ff ff       	jmp    80105c09 <alltraps>
 
-80105e68 <vector37>:
+801061f8 <vector37>:
 .globl vector37
 vector37:
   pushl $0
-80105e68:	6a 00                	push   $0x0
+801061f8:	6a 00                	push   $0x0
   pushl $37
-80105e6a:	6a 25                	push   $0x25
+801061fa:	6a 25                	push   $0x25
   jmp alltraps
-80105e6c:	e9 fd f9 ff ff       	jmp    8010586e <alltraps>
+801061fc:	e9 08 fa ff ff       	jmp    80105c09 <alltraps>
 
-80105e71 <vector38>:
+80106201 <vector38>:
 .globl vector38
 vector38:
   pushl $0
-80105e71:	6a 00                	push   $0x0
+80106201:	6a 00                	push   $0x0
   pushl $38
-80105e73:	6a 26                	push   $0x26
+80106203:	6a 26                	push   $0x26
   jmp alltraps
-80105e75:	e9 f4 f9 ff ff       	jmp    8010586e <alltraps>
+80106205:	e9 ff f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105e7a <vector39>:
+8010620a <vector39>:
 .globl vector39
 vector39:
   pushl $0
-80105e7a:	6a 00                	push   $0x0
+8010620a:	6a 00                	push   $0x0
   pushl $39
-80105e7c:	6a 27                	push   $0x27
+8010620c:	6a 27                	push   $0x27
   jmp alltraps
-80105e7e:	e9 eb f9 ff ff       	jmp    8010586e <alltraps>
+8010620e:	e9 f6 f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105e83 <vector40>:
+80106213 <vector40>:
 .globl vector40
 vector40:
   pushl $0
-80105e83:	6a 00                	push   $0x0
+80106213:	6a 00                	push   $0x0
   pushl $40
-80105e85:	6a 28                	push   $0x28
+80106215:	6a 28                	push   $0x28
   jmp alltraps
-80105e87:	e9 e2 f9 ff ff       	jmp    8010586e <alltraps>
+80106217:	e9 ed f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105e8c <vector41>:
+8010621c <vector41>:
 .globl vector41
 vector41:
   pushl $0
-80105e8c:	6a 00                	push   $0x0
+8010621c:	6a 00                	push   $0x0
   pushl $41
-80105e8e:	6a 29                	push   $0x29
+8010621e:	6a 29                	push   $0x29
   jmp alltraps
-80105e90:	e9 d9 f9 ff ff       	jmp    8010586e <alltraps>
+80106220:	e9 e4 f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105e95 <vector42>:
+80106225 <vector42>:
 .globl vector42
 vector42:
   pushl $0
-80105e95:	6a 00                	push   $0x0
+80106225:	6a 00                	push   $0x0
   pushl $42
-80105e97:	6a 2a                	push   $0x2a
+80106227:	6a 2a                	push   $0x2a
   jmp alltraps
-80105e99:	e9 d0 f9 ff ff       	jmp    8010586e <alltraps>
+80106229:	e9 db f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105e9e <vector43>:
+8010622e <vector43>:
 .globl vector43
 vector43:
   pushl $0
-80105e9e:	6a 00                	push   $0x0
+8010622e:	6a 00                	push   $0x0
   pushl $43
-80105ea0:	6a 2b                	push   $0x2b
+80106230:	6a 2b                	push   $0x2b
   jmp alltraps
-80105ea2:	e9 c7 f9 ff ff       	jmp    8010586e <alltraps>
+80106232:	e9 d2 f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105ea7 <vector44>:
+80106237 <vector44>:
 .globl vector44
 vector44:
   pushl $0
-80105ea7:	6a 00                	push   $0x0
+80106237:	6a 00                	push   $0x0
   pushl $44
-80105ea9:	6a 2c                	push   $0x2c
+80106239:	6a 2c                	push   $0x2c
   jmp alltraps
-80105eab:	e9 be f9 ff ff       	jmp    8010586e <alltraps>
+8010623b:	e9 c9 f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105eb0 <vector45>:
+80106240 <vector45>:
 .globl vector45
 vector45:
   pushl $0
-80105eb0:	6a 00                	push   $0x0
+80106240:	6a 00                	push   $0x0
   pushl $45
-80105eb2:	6a 2d                	push   $0x2d
+80106242:	6a 2d                	push   $0x2d
   jmp alltraps
-80105eb4:	e9 b5 f9 ff ff       	jmp    8010586e <alltraps>
+80106244:	e9 c0 f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105eb9 <vector46>:
+80106249 <vector46>:
 .globl vector46
 vector46:
   pushl $0
-80105eb9:	6a 00                	push   $0x0
+80106249:	6a 00                	push   $0x0
   pushl $46
-80105ebb:	6a 2e                	push   $0x2e
+8010624b:	6a 2e                	push   $0x2e
   jmp alltraps
-80105ebd:	e9 ac f9 ff ff       	jmp    8010586e <alltraps>
+8010624d:	e9 b7 f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105ec2 <vector47>:
+80106252 <vector47>:
 .globl vector47
 vector47:
   pushl $0
-80105ec2:	6a 00                	push   $0x0
+80106252:	6a 00                	push   $0x0
   pushl $47
-80105ec4:	6a 2f                	push   $0x2f
+80106254:	6a 2f                	push   $0x2f
   jmp alltraps
-80105ec6:	e9 a3 f9 ff ff       	jmp    8010586e <alltraps>
+80106256:	e9 ae f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105ecb <vector48>:
+8010625b <vector48>:
 .globl vector48
 vector48:
   pushl $0
-80105ecb:	6a 00                	push   $0x0
+8010625b:	6a 00                	push   $0x0
   pushl $48
-80105ecd:	6a 30                	push   $0x30
+8010625d:	6a 30                	push   $0x30
   jmp alltraps
-80105ecf:	e9 9a f9 ff ff       	jmp    8010586e <alltraps>
+8010625f:	e9 a5 f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105ed4 <vector49>:
+80106264 <vector49>:
 .globl vector49
 vector49:
   pushl $0
-80105ed4:	6a 00                	push   $0x0
+80106264:	6a 00                	push   $0x0
   pushl $49
-80105ed6:	6a 31                	push   $0x31
+80106266:	6a 31                	push   $0x31
   jmp alltraps
-80105ed8:	e9 91 f9 ff ff       	jmp    8010586e <alltraps>
+80106268:	e9 9c f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105edd <vector50>:
+8010626d <vector50>:
 .globl vector50
 vector50:
   pushl $0
-80105edd:	6a 00                	push   $0x0
+8010626d:	6a 00                	push   $0x0
   pushl $50
-80105edf:	6a 32                	push   $0x32
+8010626f:	6a 32                	push   $0x32
   jmp alltraps
-80105ee1:	e9 88 f9 ff ff       	jmp    8010586e <alltraps>
+80106271:	e9 93 f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105ee6 <vector51>:
+80106276 <vector51>:
 .globl vector51
 vector51:
   pushl $0
-80105ee6:	6a 00                	push   $0x0
+80106276:	6a 00                	push   $0x0
   pushl $51
-80105ee8:	6a 33                	push   $0x33
+80106278:	6a 33                	push   $0x33
   jmp alltraps
-80105eea:	e9 7f f9 ff ff       	jmp    8010586e <alltraps>
+8010627a:	e9 8a f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105eef <vector52>:
+8010627f <vector52>:
 .globl vector52
 vector52:
   pushl $0
-80105eef:	6a 00                	push   $0x0
+8010627f:	6a 00                	push   $0x0
   pushl $52
-80105ef1:	6a 34                	push   $0x34
+80106281:	6a 34                	push   $0x34
   jmp alltraps
-80105ef3:	e9 76 f9 ff ff       	jmp    8010586e <alltraps>
+80106283:	e9 81 f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105ef8 <vector53>:
+80106288 <vector53>:
 .globl vector53
 vector53:
   pushl $0
-80105ef8:	6a 00                	push   $0x0
+80106288:	6a 00                	push   $0x0
   pushl $53
-80105efa:	6a 35                	push   $0x35
+8010628a:	6a 35                	push   $0x35
   jmp alltraps
-80105efc:	e9 6d f9 ff ff       	jmp    8010586e <alltraps>
+8010628c:	e9 78 f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105f01 <vector54>:
+80106291 <vector54>:
 .globl vector54
 vector54:
   pushl $0
-80105f01:	6a 00                	push   $0x0
+80106291:	6a 00                	push   $0x0
   pushl $54
-80105f03:	6a 36                	push   $0x36
+80106293:	6a 36                	push   $0x36
   jmp alltraps
-80105f05:	e9 64 f9 ff ff       	jmp    8010586e <alltraps>
+80106295:	e9 6f f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105f0a <vector55>:
+8010629a <vector55>:
 .globl vector55
 vector55:
   pushl $0
-80105f0a:	6a 00                	push   $0x0
+8010629a:	6a 00                	push   $0x0
   pushl $55
-80105f0c:	6a 37                	push   $0x37
+8010629c:	6a 37                	push   $0x37
   jmp alltraps
-80105f0e:	e9 5b f9 ff ff       	jmp    8010586e <alltraps>
+8010629e:	e9 66 f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105f13 <vector56>:
+801062a3 <vector56>:
 .globl vector56
 vector56:
   pushl $0
-80105f13:	6a 00                	push   $0x0
+801062a3:	6a 00                	push   $0x0
   pushl $56
-80105f15:	6a 38                	push   $0x38
+801062a5:	6a 38                	push   $0x38
   jmp alltraps
-80105f17:	e9 52 f9 ff ff       	jmp    8010586e <alltraps>
+801062a7:	e9 5d f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105f1c <vector57>:
+801062ac <vector57>:
 .globl vector57
 vector57:
   pushl $0
-80105f1c:	6a 00                	push   $0x0
+801062ac:	6a 00                	push   $0x0
   pushl $57
-80105f1e:	6a 39                	push   $0x39
+801062ae:	6a 39                	push   $0x39
   jmp alltraps
-80105f20:	e9 49 f9 ff ff       	jmp    8010586e <alltraps>
+801062b0:	e9 54 f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105f25 <vector58>:
+801062b5 <vector58>:
 .globl vector58
 vector58:
   pushl $0
-80105f25:	6a 00                	push   $0x0
+801062b5:	6a 00                	push   $0x0
   pushl $58
-80105f27:	6a 3a                	push   $0x3a
+801062b7:	6a 3a                	push   $0x3a
   jmp alltraps
-80105f29:	e9 40 f9 ff ff       	jmp    8010586e <alltraps>
+801062b9:	e9 4b f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105f2e <vector59>:
+801062be <vector59>:
 .globl vector59
 vector59:
   pushl $0
-80105f2e:	6a 00                	push   $0x0
+801062be:	6a 00                	push   $0x0
   pushl $59
-80105f30:	6a 3b                	push   $0x3b
+801062c0:	6a 3b                	push   $0x3b
   jmp alltraps
-80105f32:	e9 37 f9 ff ff       	jmp    8010586e <alltraps>
+801062c2:	e9 42 f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105f37 <vector60>:
+801062c7 <vector60>:
 .globl vector60
 vector60:
   pushl $0
-80105f37:	6a 00                	push   $0x0
+801062c7:	6a 00                	push   $0x0
   pushl $60
-80105f39:	6a 3c                	push   $0x3c
+801062c9:	6a 3c                	push   $0x3c
   jmp alltraps
-80105f3b:	e9 2e f9 ff ff       	jmp    8010586e <alltraps>
+801062cb:	e9 39 f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105f40 <vector61>:
+801062d0 <vector61>:
 .globl vector61
 vector61:
   pushl $0
-80105f40:	6a 00                	push   $0x0
+801062d0:	6a 00                	push   $0x0
   pushl $61
-80105f42:	6a 3d                	push   $0x3d
+801062d2:	6a 3d                	push   $0x3d
   jmp alltraps
-80105f44:	e9 25 f9 ff ff       	jmp    8010586e <alltraps>
+801062d4:	e9 30 f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105f49 <vector62>:
+801062d9 <vector62>:
 .globl vector62
 vector62:
   pushl $0
-80105f49:	6a 00                	push   $0x0
+801062d9:	6a 00                	push   $0x0
   pushl $62
-80105f4b:	6a 3e                	push   $0x3e
+801062db:	6a 3e                	push   $0x3e
   jmp alltraps
-80105f4d:	e9 1c f9 ff ff       	jmp    8010586e <alltraps>
+801062dd:	e9 27 f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105f52 <vector63>:
+801062e2 <vector63>:
 .globl vector63
 vector63:
   pushl $0
-80105f52:	6a 00                	push   $0x0
+801062e2:	6a 00                	push   $0x0
   pushl $63
-80105f54:	6a 3f                	push   $0x3f
+801062e4:	6a 3f                	push   $0x3f
   jmp alltraps
-80105f56:	e9 13 f9 ff ff       	jmp    8010586e <alltraps>
+801062e6:	e9 1e f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105f5b <vector64>:
+801062eb <vector64>:
 .globl vector64
 vector64:
   pushl $0
-80105f5b:	6a 00                	push   $0x0
+801062eb:	6a 00                	push   $0x0
   pushl $64
-80105f5d:	6a 40                	push   $0x40
+801062ed:	6a 40                	push   $0x40
   jmp alltraps
-80105f5f:	e9 0a f9 ff ff       	jmp    8010586e <alltraps>
+801062ef:	e9 15 f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105f64 <vector65>:
+801062f4 <vector65>:
 .globl vector65
 vector65:
   pushl $0
-80105f64:	6a 00                	push   $0x0
+801062f4:	6a 00                	push   $0x0
   pushl $65
-80105f66:	6a 41                	push   $0x41
+801062f6:	6a 41                	push   $0x41
   jmp alltraps
-80105f68:	e9 01 f9 ff ff       	jmp    8010586e <alltraps>
+801062f8:	e9 0c f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105f6d <vector66>:
+801062fd <vector66>:
 .globl vector66
 vector66:
   pushl $0
-80105f6d:	6a 00                	push   $0x0
+801062fd:	6a 00                	push   $0x0
   pushl $66
-80105f6f:	6a 42                	push   $0x42
+801062ff:	6a 42                	push   $0x42
   jmp alltraps
-80105f71:	e9 f8 f8 ff ff       	jmp    8010586e <alltraps>
+80106301:	e9 03 f9 ff ff       	jmp    80105c09 <alltraps>
 
-80105f76 <vector67>:
+80106306 <vector67>:
 .globl vector67
 vector67:
   pushl $0
-80105f76:	6a 00                	push   $0x0
+80106306:	6a 00                	push   $0x0
   pushl $67
-80105f78:	6a 43                	push   $0x43
+80106308:	6a 43                	push   $0x43
   jmp alltraps
-80105f7a:	e9 ef f8 ff ff       	jmp    8010586e <alltraps>
+8010630a:	e9 fa f8 ff ff       	jmp    80105c09 <alltraps>
 
-80105f7f <vector68>:
+8010630f <vector68>:
 .globl vector68
 vector68:
   pushl $0
-80105f7f:	6a 00                	push   $0x0
+8010630f:	6a 00                	push   $0x0
   pushl $68
-80105f81:	6a 44                	push   $0x44
+80106311:	6a 44                	push   $0x44
   jmp alltraps
-80105f83:	e9 e6 f8 ff ff       	jmp    8010586e <alltraps>
+80106313:	e9 f1 f8 ff ff       	jmp    80105c09 <alltraps>
 
-80105f88 <vector69>:
+80106318 <vector69>:
 .globl vector69
 vector69:
   pushl $0
-80105f88:	6a 00                	push   $0x0
+80106318:	6a 00                	push   $0x0
   pushl $69
-80105f8a:	6a 45                	push   $0x45
+8010631a:	6a 45                	push   $0x45
   jmp alltraps
-80105f8c:	e9 dd f8 ff ff       	jmp    8010586e <alltraps>
+8010631c:	e9 e8 f8 ff ff       	jmp    80105c09 <alltraps>
 
-80105f91 <vector70>:
+80106321 <vector70>:
 .globl vector70
 vector70:
   pushl $0
-80105f91:	6a 00                	push   $0x0
+80106321:	6a 00                	push   $0x0
   pushl $70
-80105f93:	6a 46                	push   $0x46
+80106323:	6a 46                	push   $0x46
   jmp alltraps
-80105f95:	e9 d4 f8 ff ff       	jmp    8010586e <alltraps>
+80106325:	e9 df f8 ff ff       	jmp    80105c09 <alltraps>
 
-80105f9a <vector71>:
+8010632a <vector71>:
 .globl vector71
 vector71:
   pushl $0
-80105f9a:	6a 00                	push   $0x0
+8010632a:	6a 00                	push   $0x0
   pushl $71
-80105f9c:	6a 47                	push   $0x47
+8010632c:	6a 47                	push   $0x47
   jmp alltraps
-80105f9e:	e9 cb f8 ff ff       	jmp    8010586e <alltraps>
+8010632e:	e9 d6 f8 ff ff       	jmp    80105c09 <alltraps>
 
-80105fa3 <vector72>:
+80106333 <vector72>:
 .globl vector72
 vector72:
   pushl $0
-80105fa3:	6a 00                	push   $0x0
+80106333:	6a 00                	push   $0x0
   pushl $72
-80105fa5:	6a 48                	push   $0x48
+80106335:	6a 48                	push   $0x48
   jmp alltraps
-80105fa7:	e9 c2 f8 ff ff       	jmp    8010586e <alltraps>
+80106337:	e9 cd f8 ff ff       	jmp    80105c09 <alltraps>
 
-80105fac <vector73>:
+8010633c <vector73>:
 .globl vector73
 vector73:
   pushl $0
-80105fac:	6a 00                	push   $0x0
+8010633c:	6a 00                	push   $0x0
   pushl $73
-80105fae:	6a 49                	push   $0x49
+8010633e:	6a 49                	push   $0x49
   jmp alltraps
-80105fb0:	e9 b9 f8 ff ff       	jmp    8010586e <alltraps>
+80106340:	e9 c4 f8 ff ff       	jmp    80105c09 <alltraps>
 
-80105fb5 <vector74>:
+80106345 <vector74>:
 .globl vector74
 vector74:
   pushl $0
-80105fb5:	6a 00                	push   $0x0
+80106345:	6a 00                	push   $0x0
   pushl $74
-80105fb7:	6a 4a                	push   $0x4a
+80106347:	6a 4a                	push   $0x4a
   jmp alltraps
-80105fb9:	e9 b0 f8 ff ff       	jmp    8010586e <alltraps>
+80106349:	e9 bb f8 ff ff       	jmp    80105c09 <alltraps>
 
-80105fbe <vector75>:
+8010634e <vector75>:
 .globl vector75
 vector75:
   pushl $0
-80105fbe:	6a 00                	push   $0x0
+8010634e:	6a 00                	push   $0x0
   pushl $75
-80105fc0:	6a 4b                	push   $0x4b
+80106350:	6a 4b                	push   $0x4b
   jmp alltraps
-80105fc2:	e9 a7 f8 ff ff       	jmp    8010586e <alltraps>
+80106352:	e9 b2 f8 ff ff       	jmp    80105c09 <alltraps>
 
-80105fc7 <vector76>:
+80106357 <vector76>:
 .globl vector76
 vector76:
   pushl $0
-80105fc7:	6a 00                	push   $0x0
+80106357:	6a 00                	push   $0x0
   pushl $76
-80105fc9:	6a 4c                	push   $0x4c
+80106359:	6a 4c                	push   $0x4c
   jmp alltraps
-80105fcb:	e9 9e f8 ff ff       	jmp    8010586e <alltraps>
+8010635b:	e9 a9 f8 ff ff       	jmp    80105c09 <alltraps>
 
-80105fd0 <vector77>:
+80106360 <vector77>:
 .globl vector77
 vector77:
   pushl $0
-80105fd0:	6a 00                	push   $0x0
+80106360:	6a 00                	push   $0x0
   pushl $77
-80105fd2:	6a 4d                	push   $0x4d
+80106362:	6a 4d                	push   $0x4d
   jmp alltraps
-80105fd4:	e9 95 f8 ff ff       	jmp    8010586e <alltraps>
+80106364:	e9 a0 f8 ff ff       	jmp    80105c09 <alltraps>
 
-80105fd9 <vector78>:
+80106369 <vector78>:
 .globl vector78
 vector78:
   pushl $0
-80105fd9:	6a 00                	push   $0x0
+80106369:	6a 00                	push   $0x0
   pushl $78
-80105fdb:	6a 4e                	push   $0x4e
+8010636b:	6a 4e                	push   $0x4e
   jmp alltraps
-80105fdd:	e9 8c f8 ff ff       	jmp    8010586e <alltraps>
+8010636d:	e9 97 f8 ff ff       	jmp    80105c09 <alltraps>
 
-80105fe2 <vector79>:
+80106372 <vector79>:
 .globl vector79
 vector79:
   pushl $0
-80105fe2:	6a 00                	push   $0x0
+80106372:	6a 00                	push   $0x0
   pushl $79
-80105fe4:	6a 4f                	push   $0x4f
+80106374:	6a 4f                	push   $0x4f
   jmp alltraps
-80105fe6:	e9 83 f8 ff ff       	jmp    8010586e <alltraps>
+80106376:	e9 8e f8 ff ff       	jmp    80105c09 <alltraps>
 
-80105feb <vector80>:
+8010637b <vector80>:
 .globl vector80
 vector80:
   pushl $0
-80105feb:	6a 00                	push   $0x0
+8010637b:	6a 00                	push   $0x0
   pushl $80
-80105fed:	6a 50                	push   $0x50
+8010637d:	6a 50                	push   $0x50
   jmp alltraps
-80105fef:	e9 7a f8 ff ff       	jmp    8010586e <alltraps>
+8010637f:	e9 85 f8 ff ff       	jmp    80105c09 <alltraps>
 
-80105ff4 <vector81>:
+80106384 <vector81>:
 .globl vector81
 vector81:
   pushl $0
-80105ff4:	6a 00                	push   $0x0
+80106384:	6a 00                	push   $0x0
   pushl $81
-80105ff6:	6a 51                	push   $0x51
+80106386:	6a 51                	push   $0x51
   jmp alltraps
-80105ff8:	e9 71 f8 ff ff       	jmp    8010586e <alltraps>
+80106388:	e9 7c f8 ff ff       	jmp    80105c09 <alltraps>
 
-80105ffd <vector82>:
+8010638d <vector82>:
 .globl vector82
 vector82:
   pushl $0
-80105ffd:	6a 00                	push   $0x0
+8010638d:	6a 00                	push   $0x0
   pushl $82
-80105fff:	6a 52                	push   $0x52
+8010638f:	6a 52                	push   $0x52
   jmp alltraps
-80106001:	e9 68 f8 ff ff       	jmp    8010586e <alltraps>
+80106391:	e9 73 f8 ff ff       	jmp    80105c09 <alltraps>
 
-80106006 <vector83>:
+80106396 <vector83>:
 .globl vector83
 vector83:
   pushl $0
-80106006:	6a 00                	push   $0x0
+80106396:	6a 00                	push   $0x0
   pushl $83
-80106008:	6a 53                	push   $0x53
+80106398:	6a 53                	push   $0x53
   jmp alltraps
-8010600a:	e9 5f f8 ff ff       	jmp    8010586e <alltraps>
+8010639a:	e9 6a f8 ff ff       	jmp    80105c09 <alltraps>
 
-8010600f <vector84>:
+8010639f <vector84>:
 .globl vector84
 vector84:
   pushl $0
-8010600f:	6a 00                	push   $0x0
+8010639f:	6a 00                	push   $0x0
   pushl $84
-80106011:	6a 54                	push   $0x54
+801063a1:	6a 54                	push   $0x54
   jmp alltraps
-80106013:	e9 56 f8 ff ff       	jmp    8010586e <alltraps>
+801063a3:	e9 61 f8 ff ff       	jmp    80105c09 <alltraps>
 
-80106018 <vector85>:
+801063a8 <vector85>:
 .globl vector85
 vector85:
   pushl $0
-80106018:	6a 00                	push   $0x0
+801063a8:	6a 00                	push   $0x0
   pushl $85
-8010601a:	6a 55                	push   $0x55
+801063aa:	6a 55                	push   $0x55
   jmp alltraps
-8010601c:	e9 4d f8 ff ff       	jmp    8010586e <alltraps>
+801063ac:	e9 58 f8 ff ff       	jmp    80105c09 <alltraps>
 
-80106021 <vector86>:
+801063b1 <vector86>:
 .globl vector86
 vector86:
   pushl $0
-80106021:	6a 00                	push   $0x0
+801063b1:	6a 00                	push   $0x0
   pushl $86
-80106023:	6a 56                	push   $0x56
+801063b3:	6a 56                	push   $0x56
   jmp alltraps
-80106025:	e9 44 f8 ff ff       	jmp    8010586e <alltraps>
+801063b5:	e9 4f f8 ff ff       	jmp    80105c09 <alltraps>
 
-8010602a <vector87>:
+801063ba <vector87>:
 .globl vector87
 vector87:
   pushl $0
-8010602a:	6a 00                	push   $0x0
+801063ba:	6a 00                	push   $0x0
   pushl $87
-8010602c:	6a 57                	push   $0x57
+801063bc:	6a 57                	push   $0x57
   jmp alltraps
-8010602e:	e9 3b f8 ff ff       	jmp    8010586e <alltraps>
+801063be:	e9 46 f8 ff ff       	jmp    80105c09 <alltraps>
 
-80106033 <vector88>:
+801063c3 <vector88>:
 .globl vector88
 vector88:
   pushl $0
-80106033:	6a 00                	push   $0x0
+801063c3:	6a 00                	push   $0x0
   pushl $88
-80106035:	6a 58                	push   $0x58
+801063c5:	6a 58                	push   $0x58
   jmp alltraps
-80106037:	e9 32 f8 ff ff       	jmp    8010586e <alltraps>
+801063c7:	e9 3d f8 ff ff       	jmp    80105c09 <alltraps>
 
-8010603c <vector89>:
+801063cc <vector89>:
 .globl vector89
 vector89:
   pushl $0
-8010603c:	6a 00                	push   $0x0
+801063cc:	6a 00                	push   $0x0
   pushl $89
-8010603e:	6a 59                	push   $0x59
+801063ce:	6a 59                	push   $0x59
   jmp alltraps
-80106040:	e9 29 f8 ff ff       	jmp    8010586e <alltraps>
+801063d0:	e9 34 f8 ff ff       	jmp    80105c09 <alltraps>
 
-80106045 <vector90>:
+801063d5 <vector90>:
 .globl vector90
 vector90:
   pushl $0
-80106045:	6a 00                	push   $0x0
+801063d5:	6a 00                	push   $0x0
   pushl $90
-80106047:	6a 5a                	push   $0x5a
+801063d7:	6a 5a                	push   $0x5a
   jmp alltraps
-80106049:	e9 20 f8 ff ff       	jmp    8010586e <alltraps>
+801063d9:	e9 2b f8 ff ff       	jmp    80105c09 <alltraps>
 
-8010604e <vector91>:
+801063de <vector91>:
 .globl vector91
 vector91:
   pushl $0
-8010604e:	6a 00                	push   $0x0
+801063de:	6a 00                	push   $0x0
   pushl $91
-80106050:	6a 5b                	push   $0x5b
+801063e0:	6a 5b                	push   $0x5b
   jmp alltraps
-80106052:	e9 17 f8 ff ff       	jmp    8010586e <alltraps>
+801063e2:	e9 22 f8 ff ff       	jmp    80105c09 <alltraps>
 
-80106057 <vector92>:
+801063e7 <vector92>:
 .globl vector92
 vector92:
   pushl $0
-80106057:	6a 00                	push   $0x0
+801063e7:	6a 00                	push   $0x0
   pushl $92
-80106059:	6a 5c                	push   $0x5c
+801063e9:	6a 5c                	push   $0x5c
   jmp alltraps
-8010605b:	e9 0e f8 ff ff       	jmp    8010586e <alltraps>
+801063eb:	e9 19 f8 ff ff       	jmp    80105c09 <alltraps>
 
-80106060 <vector93>:
+801063f0 <vector93>:
 .globl vector93
 vector93:
   pushl $0
-80106060:	6a 00                	push   $0x0
+801063f0:	6a 00                	push   $0x0
   pushl $93
-80106062:	6a 5d                	push   $0x5d
+801063f2:	6a 5d                	push   $0x5d
   jmp alltraps
-80106064:	e9 05 f8 ff ff       	jmp    8010586e <alltraps>
+801063f4:	e9 10 f8 ff ff       	jmp    80105c09 <alltraps>
 
-80106069 <vector94>:
+801063f9 <vector94>:
 .globl vector94
 vector94:
   pushl $0
-80106069:	6a 00                	push   $0x0
+801063f9:	6a 00                	push   $0x0
   pushl $94
-8010606b:	6a 5e                	push   $0x5e
+801063fb:	6a 5e                	push   $0x5e
   jmp alltraps
-8010606d:	e9 fc f7 ff ff       	jmp    8010586e <alltraps>
+801063fd:	e9 07 f8 ff ff       	jmp    80105c09 <alltraps>
 
-80106072 <vector95>:
+80106402 <vector95>:
 .globl vector95
 vector95:
   pushl $0
-80106072:	6a 00                	push   $0x0
+80106402:	6a 00                	push   $0x0
   pushl $95
-80106074:	6a 5f                	push   $0x5f
+80106404:	6a 5f                	push   $0x5f
   jmp alltraps
-80106076:	e9 f3 f7 ff ff       	jmp    8010586e <alltraps>
+80106406:	e9 fe f7 ff ff       	jmp    80105c09 <alltraps>
 
-8010607b <vector96>:
+8010640b <vector96>:
 .globl vector96
 vector96:
   pushl $0
-8010607b:	6a 00                	push   $0x0
+8010640b:	6a 00                	push   $0x0
   pushl $96
-8010607d:	6a 60                	push   $0x60
+8010640d:	6a 60                	push   $0x60
   jmp alltraps
-8010607f:	e9 ea f7 ff ff       	jmp    8010586e <alltraps>
+8010640f:	e9 f5 f7 ff ff       	jmp    80105c09 <alltraps>
 
-80106084 <vector97>:
+80106414 <vector97>:
 .globl vector97
 vector97:
   pushl $0
-80106084:	6a 00                	push   $0x0
+80106414:	6a 00                	push   $0x0
   pushl $97
-80106086:	6a 61                	push   $0x61
+80106416:	6a 61                	push   $0x61
   jmp alltraps
-80106088:	e9 e1 f7 ff ff       	jmp    8010586e <alltraps>
+80106418:	e9 ec f7 ff ff       	jmp    80105c09 <alltraps>
 
-8010608d <vector98>:
+8010641d <vector98>:
 .globl vector98
 vector98:
   pushl $0
-8010608d:	6a 00                	push   $0x0
+8010641d:	6a 00                	push   $0x0
   pushl $98
-8010608f:	6a 62                	push   $0x62
+8010641f:	6a 62                	push   $0x62
   jmp alltraps
-80106091:	e9 d8 f7 ff ff       	jmp    8010586e <alltraps>
+80106421:	e9 e3 f7 ff ff       	jmp    80105c09 <alltraps>
 
-80106096 <vector99>:
+80106426 <vector99>:
 .globl vector99
 vector99:
   pushl $0
-80106096:	6a 00                	push   $0x0
+80106426:	6a 00                	push   $0x0
   pushl $99
-80106098:	6a 63                	push   $0x63
+80106428:	6a 63                	push   $0x63
   jmp alltraps
-8010609a:	e9 cf f7 ff ff       	jmp    8010586e <alltraps>
+8010642a:	e9 da f7 ff ff       	jmp    80105c09 <alltraps>
 
-8010609f <vector100>:
+8010642f <vector100>:
 .globl vector100
 vector100:
   pushl $0
-8010609f:	6a 00                	push   $0x0
+8010642f:	6a 00                	push   $0x0
   pushl $100
-801060a1:	6a 64                	push   $0x64
+80106431:	6a 64                	push   $0x64
   jmp alltraps
-801060a3:	e9 c6 f7 ff ff       	jmp    8010586e <alltraps>
+80106433:	e9 d1 f7 ff ff       	jmp    80105c09 <alltraps>
 
-801060a8 <vector101>:
+80106438 <vector101>:
 .globl vector101
 vector101:
   pushl $0
-801060a8:	6a 00                	push   $0x0
+80106438:	6a 00                	push   $0x0
   pushl $101
-801060aa:	6a 65                	push   $0x65
+8010643a:	6a 65                	push   $0x65
   jmp alltraps
-801060ac:	e9 bd f7 ff ff       	jmp    8010586e <alltraps>
+8010643c:	e9 c8 f7 ff ff       	jmp    80105c09 <alltraps>
 
-801060b1 <vector102>:
+80106441 <vector102>:
 .globl vector102
 vector102:
   pushl $0
-801060b1:	6a 00                	push   $0x0
+80106441:	6a 00                	push   $0x0
   pushl $102
-801060b3:	6a 66                	push   $0x66
+80106443:	6a 66                	push   $0x66
   jmp alltraps
-801060b5:	e9 b4 f7 ff ff       	jmp    8010586e <alltraps>
+80106445:	e9 bf f7 ff ff       	jmp    80105c09 <alltraps>
 
-801060ba <vector103>:
+8010644a <vector103>:
 .globl vector103
 vector103:
   pushl $0
-801060ba:	6a 00                	push   $0x0
+8010644a:	6a 00                	push   $0x0
   pushl $103
-801060bc:	6a 67                	push   $0x67
+8010644c:	6a 67                	push   $0x67
   jmp alltraps
-801060be:	e9 ab f7 ff ff       	jmp    8010586e <alltraps>
+8010644e:	e9 b6 f7 ff ff       	jmp    80105c09 <alltraps>
 
-801060c3 <vector104>:
+80106453 <vector104>:
 .globl vector104
 vector104:
   pushl $0
-801060c3:	6a 00                	push   $0x0
+80106453:	6a 00                	push   $0x0
   pushl $104
-801060c5:	6a 68                	push   $0x68
+80106455:	6a 68                	push   $0x68
   jmp alltraps
-801060c7:	e9 a2 f7 ff ff       	jmp    8010586e <alltraps>
+80106457:	e9 ad f7 ff ff       	jmp    80105c09 <alltraps>
 
-801060cc <vector105>:
+8010645c <vector105>:
 .globl vector105
 vector105:
   pushl $0
-801060cc:	6a 00                	push   $0x0
+8010645c:	6a 00                	push   $0x0
   pushl $105
-801060ce:	6a 69                	push   $0x69
+8010645e:	6a 69                	push   $0x69
   jmp alltraps
-801060d0:	e9 99 f7 ff ff       	jmp    8010586e <alltraps>
+80106460:	e9 a4 f7 ff ff       	jmp    80105c09 <alltraps>
 
-801060d5 <vector106>:
+80106465 <vector106>:
 .globl vector106
 vector106:
   pushl $0
-801060d5:	6a 00                	push   $0x0
+80106465:	6a 00                	push   $0x0
   pushl $106
-801060d7:	6a 6a                	push   $0x6a
+80106467:	6a 6a                	push   $0x6a
   jmp alltraps
-801060d9:	e9 90 f7 ff ff       	jmp    8010586e <alltraps>
+80106469:	e9 9b f7 ff ff       	jmp    80105c09 <alltraps>
 
-801060de <vector107>:
+8010646e <vector107>:
 .globl vector107
 vector107:
   pushl $0
-801060de:	6a 00                	push   $0x0
+8010646e:	6a 00                	push   $0x0
   pushl $107
-801060e0:	6a 6b                	push   $0x6b
+80106470:	6a 6b                	push   $0x6b
   jmp alltraps
-801060e2:	e9 87 f7 ff ff       	jmp    8010586e <alltraps>
+80106472:	e9 92 f7 ff ff       	jmp    80105c09 <alltraps>
 
-801060e7 <vector108>:
+80106477 <vector108>:
 .globl vector108
 vector108:
   pushl $0
-801060e7:	6a 00                	push   $0x0
+80106477:	6a 00                	push   $0x0
   pushl $108
-801060e9:	6a 6c                	push   $0x6c
+80106479:	6a 6c                	push   $0x6c
   jmp alltraps
-801060eb:	e9 7e f7 ff ff       	jmp    8010586e <alltraps>
+8010647b:	e9 89 f7 ff ff       	jmp    80105c09 <alltraps>
 
-801060f0 <vector109>:
+80106480 <vector109>:
 .globl vector109
 vector109:
   pushl $0
-801060f0:	6a 00                	push   $0x0
+80106480:	6a 00                	push   $0x0
   pushl $109
-801060f2:	6a 6d                	push   $0x6d
+80106482:	6a 6d                	push   $0x6d
   jmp alltraps
-801060f4:	e9 75 f7 ff ff       	jmp    8010586e <alltraps>
+80106484:	e9 80 f7 ff ff       	jmp    80105c09 <alltraps>
 
-801060f9 <vector110>:
+80106489 <vector110>:
 .globl vector110
 vector110:
   pushl $0
-801060f9:	6a 00                	push   $0x0
+80106489:	6a 00                	push   $0x0
   pushl $110
-801060fb:	6a 6e                	push   $0x6e
+8010648b:	6a 6e                	push   $0x6e
   jmp alltraps
-801060fd:	e9 6c f7 ff ff       	jmp    8010586e <alltraps>
+8010648d:	e9 77 f7 ff ff       	jmp    80105c09 <alltraps>
 
-80106102 <vector111>:
+80106492 <vector111>:
 .globl vector111
 vector111:
   pushl $0
-80106102:	6a 00                	push   $0x0
+80106492:	6a 00                	push   $0x0
   pushl $111
-80106104:	6a 6f                	push   $0x6f
+80106494:	6a 6f                	push   $0x6f
   jmp alltraps
-80106106:	e9 63 f7 ff ff       	jmp    8010586e <alltraps>
+80106496:	e9 6e f7 ff ff       	jmp    80105c09 <alltraps>
 
-8010610b <vector112>:
+8010649b <vector112>:
 .globl vector112
 vector112:
   pushl $0
-8010610b:	6a 00                	push   $0x0
+8010649b:	6a 00                	push   $0x0
   pushl $112
-8010610d:	6a 70                	push   $0x70
+8010649d:	6a 70                	push   $0x70
   jmp alltraps
-8010610f:	e9 5a f7 ff ff       	jmp    8010586e <alltraps>
+8010649f:	e9 65 f7 ff ff       	jmp    80105c09 <alltraps>
 
-80106114 <vector113>:
+801064a4 <vector113>:
 .globl vector113
 vector113:
   pushl $0
-80106114:	6a 00                	push   $0x0
+801064a4:	6a 00                	push   $0x0
   pushl $113
-80106116:	6a 71                	push   $0x71
+801064a6:	6a 71                	push   $0x71
   jmp alltraps
-80106118:	e9 51 f7 ff ff       	jmp    8010586e <alltraps>
+801064a8:	e9 5c f7 ff ff       	jmp    80105c09 <alltraps>
 
-8010611d <vector114>:
+801064ad <vector114>:
 .globl vector114
 vector114:
   pushl $0
-8010611d:	6a 00                	push   $0x0
+801064ad:	6a 00                	push   $0x0
   pushl $114
-8010611f:	6a 72                	push   $0x72
+801064af:	6a 72                	push   $0x72
   jmp alltraps
-80106121:	e9 48 f7 ff ff       	jmp    8010586e <alltraps>
+801064b1:	e9 53 f7 ff ff       	jmp    80105c09 <alltraps>
 
-80106126 <vector115>:
+801064b6 <vector115>:
 .globl vector115
 vector115:
   pushl $0
-80106126:	6a 00                	push   $0x0
+801064b6:	6a 00                	push   $0x0
   pushl $115
-80106128:	6a 73                	push   $0x73
+801064b8:	6a 73                	push   $0x73
   jmp alltraps
-8010612a:	e9 3f f7 ff ff       	jmp    8010586e <alltraps>
+801064ba:	e9 4a f7 ff ff       	jmp    80105c09 <alltraps>
 
-8010612f <vector116>:
+801064bf <vector116>:
 .globl vector116
 vector116:
   pushl $0
-8010612f:	6a 00                	push   $0x0
+801064bf:	6a 00                	push   $0x0
   pushl $116
-80106131:	6a 74                	push   $0x74
+801064c1:	6a 74                	push   $0x74
   jmp alltraps
-80106133:	e9 36 f7 ff ff       	jmp    8010586e <alltraps>
+801064c3:	e9 41 f7 ff ff       	jmp    80105c09 <alltraps>
 
-80106138 <vector117>:
+801064c8 <vector117>:
 .globl vector117
 vector117:
   pushl $0
-80106138:	6a 00                	push   $0x0
+801064c8:	6a 00                	push   $0x0
   pushl $117
-8010613a:	6a 75                	push   $0x75
+801064ca:	6a 75                	push   $0x75
   jmp alltraps
-8010613c:	e9 2d f7 ff ff       	jmp    8010586e <alltraps>
+801064cc:	e9 38 f7 ff ff       	jmp    80105c09 <alltraps>
 
-80106141 <vector118>:
+801064d1 <vector118>:
 .globl vector118
 vector118:
   pushl $0
-80106141:	6a 00                	push   $0x0
+801064d1:	6a 00                	push   $0x0
   pushl $118
-80106143:	6a 76                	push   $0x76
+801064d3:	6a 76                	push   $0x76
   jmp alltraps
-80106145:	e9 24 f7 ff ff       	jmp    8010586e <alltraps>
+801064d5:	e9 2f f7 ff ff       	jmp    80105c09 <alltraps>
 
-8010614a <vector119>:
+801064da <vector119>:
 .globl vector119
 vector119:
   pushl $0
-8010614a:	6a 00                	push   $0x0
+801064da:	6a 00                	push   $0x0
   pushl $119
-8010614c:	6a 77                	push   $0x77
+801064dc:	6a 77                	push   $0x77
   jmp alltraps
-8010614e:	e9 1b f7 ff ff       	jmp    8010586e <alltraps>
+801064de:	e9 26 f7 ff ff       	jmp    80105c09 <alltraps>
 
-80106153 <vector120>:
+801064e3 <vector120>:
 .globl vector120
 vector120:
   pushl $0
-80106153:	6a 00                	push   $0x0
+801064e3:	6a 00                	push   $0x0
   pushl $120
-80106155:	6a 78                	push   $0x78
+801064e5:	6a 78                	push   $0x78
   jmp alltraps
-80106157:	e9 12 f7 ff ff       	jmp    8010586e <alltraps>
+801064e7:	e9 1d f7 ff ff       	jmp    80105c09 <alltraps>
 
-8010615c <vector121>:
+801064ec <vector121>:
 .globl vector121
 vector121:
   pushl $0
-8010615c:	6a 00                	push   $0x0
+801064ec:	6a 00                	push   $0x0
   pushl $121
-8010615e:	6a 79                	push   $0x79
+801064ee:	6a 79                	push   $0x79
   jmp alltraps
-80106160:	e9 09 f7 ff ff       	jmp    8010586e <alltraps>
+801064f0:	e9 14 f7 ff ff       	jmp    80105c09 <alltraps>
 
-80106165 <vector122>:
+801064f5 <vector122>:
 .globl vector122
 vector122:
   pushl $0
-80106165:	6a 00                	push   $0x0
+801064f5:	6a 00                	push   $0x0
   pushl $122
-80106167:	6a 7a                	push   $0x7a
+801064f7:	6a 7a                	push   $0x7a
   jmp alltraps
-80106169:	e9 00 f7 ff ff       	jmp    8010586e <alltraps>
+801064f9:	e9 0b f7 ff ff       	jmp    80105c09 <alltraps>
 
-8010616e <vector123>:
+801064fe <vector123>:
 .globl vector123
 vector123:
   pushl $0
-8010616e:	6a 00                	push   $0x0
+801064fe:	6a 00                	push   $0x0
   pushl $123
-80106170:	6a 7b                	push   $0x7b
+80106500:	6a 7b                	push   $0x7b
   jmp alltraps
-80106172:	e9 f7 f6 ff ff       	jmp    8010586e <alltraps>
+80106502:	e9 02 f7 ff ff       	jmp    80105c09 <alltraps>
 
-80106177 <vector124>:
+80106507 <vector124>:
 .globl vector124
 vector124:
   pushl $0
-80106177:	6a 00                	push   $0x0
+80106507:	6a 00                	push   $0x0
   pushl $124
-80106179:	6a 7c                	push   $0x7c
+80106509:	6a 7c                	push   $0x7c
   jmp alltraps
-8010617b:	e9 ee f6 ff ff       	jmp    8010586e <alltraps>
+8010650b:	e9 f9 f6 ff ff       	jmp    80105c09 <alltraps>
 
-80106180 <vector125>:
+80106510 <vector125>:
 .globl vector125
 vector125:
   pushl $0
-80106180:	6a 00                	push   $0x0
+80106510:	6a 00                	push   $0x0
   pushl $125
-80106182:	6a 7d                	push   $0x7d
+80106512:	6a 7d                	push   $0x7d
   jmp alltraps
-80106184:	e9 e5 f6 ff ff       	jmp    8010586e <alltraps>
+80106514:	e9 f0 f6 ff ff       	jmp    80105c09 <alltraps>
 
-80106189 <vector126>:
+80106519 <vector126>:
 .globl vector126
 vector126:
   pushl $0
-80106189:	6a 00                	push   $0x0
+80106519:	6a 00                	push   $0x0
   pushl $126
-8010618b:	6a 7e                	push   $0x7e
+8010651b:	6a 7e                	push   $0x7e
   jmp alltraps
-8010618d:	e9 dc f6 ff ff       	jmp    8010586e <alltraps>
+8010651d:	e9 e7 f6 ff ff       	jmp    80105c09 <alltraps>
 
-80106192 <vector127>:
+80106522 <vector127>:
 .globl vector127
 vector127:
   pushl $0
-80106192:	6a 00                	push   $0x0
+80106522:	6a 00                	push   $0x0
   pushl $127
-80106194:	6a 7f                	push   $0x7f
+80106524:	6a 7f                	push   $0x7f
   jmp alltraps
-80106196:	e9 d3 f6 ff ff       	jmp    8010586e <alltraps>
+80106526:	e9 de f6 ff ff       	jmp    80105c09 <alltraps>
 
-8010619b <vector128>:
+8010652b <vector128>:
 .globl vector128
 vector128:
   pushl $0
-8010619b:	6a 00                	push   $0x0
+8010652b:	6a 00                	push   $0x0
   pushl $128
-8010619d:	68 80 00 00 00       	push   $0x80
+8010652d:	68 80 00 00 00       	push   $0x80
   jmp alltraps
-801061a2:	e9 c7 f6 ff ff       	jmp    8010586e <alltraps>
+80106532:	e9 d2 f6 ff ff       	jmp    80105c09 <alltraps>
 
-801061a7 <vector129>:
+80106537 <vector129>:
 .globl vector129
 vector129:
   pushl $0
-801061a7:	6a 00                	push   $0x0
+80106537:	6a 00                	push   $0x0
   pushl $129
-801061a9:	68 81 00 00 00       	push   $0x81
+80106539:	68 81 00 00 00       	push   $0x81
   jmp alltraps
-801061ae:	e9 bb f6 ff ff       	jmp    8010586e <alltraps>
+8010653e:	e9 c6 f6 ff ff       	jmp    80105c09 <alltraps>
 
-801061b3 <vector130>:
+80106543 <vector130>:
 .globl vector130
 vector130:
   pushl $0
-801061b3:	6a 00                	push   $0x0
+80106543:	6a 00                	push   $0x0
   pushl $130
-801061b5:	68 82 00 00 00       	push   $0x82
+80106545:	68 82 00 00 00       	push   $0x82
   jmp alltraps
-801061ba:	e9 af f6 ff ff       	jmp    8010586e <alltraps>
+8010654a:	e9 ba f6 ff ff       	jmp    80105c09 <alltraps>
 
-801061bf <vector131>:
+8010654f <vector131>:
 .globl vector131
 vector131:
   pushl $0
-801061bf:	6a 00                	push   $0x0
+8010654f:	6a 00                	push   $0x0
   pushl $131
-801061c1:	68 83 00 00 00       	push   $0x83
+80106551:	68 83 00 00 00       	push   $0x83
   jmp alltraps
-801061c6:	e9 a3 f6 ff ff       	jmp    8010586e <alltraps>
+80106556:	e9 ae f6 ff ff       	jmp    80105c09 <alltraps>
 
-801061cb <vector132>:
+8010655b <vector132>:
 .globl vector132
 vector132:
   pushl $0
-801061cb:	6a 00                	push   $0x0
+8010655b:	6a 00                	push   $0x0
   pushl $132
-801061cd:	68 84 00 00 00       	push   $0x84
+8010655d:	68 84 00 00 00       	push   $0x84
   jmp alltraps
-801061d2:	e9 97 f6 ff ff       	jmp    8010586e <alltraps>
+80106562:	e9 a2 f6 ff ff       	jmp    80105c09 <alltraps>
 
-801061d7 <vector133>:
+80106567 <vector133>:
 .globl vector133
 vector133:
   pushl $0
-801061d7:	6a 00                	push   $0x0
+80106567:	6a 00                	push   $0x0
   pushl $133
-801061d9:	68 85 00 00 00       	push   $0x85
+80106569:	68 85 00 00 00       	push   $0x85
   jmp alltraps
-801061de:	e9 8b f6 ff ff       	jmp    8010586e <alltraps>
+8010656e:	e9 96 f6 ff ff       	jmp    80105c09 <alltraps>
 
-801061e3 <vector134>:
+80106573 <vector134>:
 .globl vector134
 vector134:
   pushl $0
-801061e3:	6a 00                	push   $0x0
+80106573:	6a 00                	push   $0x0
   pushl $134
-801061e5:	68 86 00 00 00       	push   $0x86
+80106575:	68 86 00 00 00       	push   $0x86
   jmp alltraps
-801061ea:	e9 7f f6 ff ff       	jmp    8010586e <alltraps>
+8010657a:	e9 8a f6 ff ff       	jmp    80105c09 <alltraps>
 
-801061ef <vector135>:
+8010657f <vector135>:
 .globl vector135
 vector135:
   pushl $0
-801061ef:	6a 00                	push   $0x0
+8010657f:	6a 00                	push   $0x0
   pushl $135
-801061f1:	68 87 00 00 00       	push   $0x87
+80106581:	68 87 00 00 00       	push   $0x87
   jmp alltraps
-801061f6:	e9 73 f6 ff ff       	jmp    8010586e <alltraps>
+80106586:	e9 7e f6 ff ff       	jmp    80105c09 <alltraps>
 
-801061fb <vector136>:
+8010658b <vector136>:
 .globl vector136
 vector136:
   pushl $0
-801061fb:	6a 00                	push   $0x0
+8010658b:	6a 00                	push   $0x0
   pushl $136
-801061fd:	68 88 00 00 00       	push   $0x88
+8010658d:	68 88 00 00 00       	push   $0x88
   jmp alltraps
-80106202:	e9 67 f6 ff ff       	jmp    8010586e <alltraps>
+80106592:	e9 72 f6 ff ff       	jmp    80105c09 <alltraps>
 
-80106207 <vector137>:
+80106597 <vector137>:
 .globl vector137
 vector137:
   pushl $0
-80106207:	6a 00                	push   $0x0
+80106597:	6a 00                	push   $0x0
   pushl $137
-80106209:	68 89 00 00 00       	push   $0x89
+80106599:	68 89 00 00 00       	push   $0x89
   jmp alltraps
-8010620e:	e9 5b f6 ff ff       	jmp    8010586e <alltraps>
+8010659e:	e9 66 f6 ff ff       	jmp    80105c09 <alltraps>
 
-80106213 <vector138>:
+801065a3 <vector138>:
 .globl vector138
 vector138:
   pushl $0
-80106213:	6a 00                	push   $0x0
+801065a3:	6a 00                	push   $0x0
   pushl $138
-80106215:	68 8a 00 00 00       	push   $0x8a
+801065a5:	68 8a 00 00 00       	push   $0x8a
   jmp alltraps
-8010621a:	e9 4f f6 ff ff       	jmp    8010586e <alltraps>
+801065aa:	e9 5a f6 ff ff       	jmp    80105c09 <alltraps>
 
-8010621f <vector139>:
+801065af <vector139>:
 .globl vector139
 vector139:
   pushl $0
-8010621f:	6a 00                	push   $0x0
+801065af:	6a 00                	push   $0x0
   pushl $139
-80106221:	68 8b 00 00 00       	push   $0x8b
+801065b1:	68 8b 00 00 00       	push   $0x8b
   jmp alltraps
-80106226:	e9 43 f6 ff ff       	jmp    8010586e <alltraps>
+801065b6:	e9 4e f6 ff ff       	jmp    80105c09 <alltraps>
 
-8010622b <vector140>:
+801065bb <vector140>:
 .globl vector140
 vector140:
   pushl $0
-8010622b:	6a 00                	push   $0x0
+801065bb:	6a 00                	push   $0x0
   pushl $140
-8010622d:	68 8c 00 00 00       	push   $0x8c
+801065bd:	68 8c 00 00 00       	push   $0x8c
   jmp alltraps
-80106232:	e9 37 f6 ff ff       	jmp    8010586e <alltraps>
+801065c2:	e9 42 f6 ff ff       	jmp    80105c09 <alltraps>
 
-80106237 <vector141>:
+801065c7 <vector141>:
 .globl vector141
 vector141:
   pushl $0
-80106237:	6a 00                	push   $0x0
+801065c7:	6a 00                	push   $0x0
   pushl $141
-80106239:	68 8d 00 00 00       	push   $0x8d
+801065c9:	68 8d 00 00 00       	push   $0x8d
   jmp alltraps
-8010623e:	e9 2b f6 ff ff       	jmp    8010586e <alltraps>
+801065ce:	e9 36 f6 ff ff       	jmp    80105c09 <alltraps>
 
-80106243 <vector142>:
+801065d3 <vector142>:
 .globl vector142
 vector142:
   pushl $0
-80106243:	6a 00                	push   $0x0
+801065d3:	6a 00                	push   $0x0
   pushl $142
-80106245:	68 8e 00 00 00       	push   $0x8e
+801065d5:	68 8e 00 00 00       	push   $0x8e
   jmp alltraps
-8010624a:	e9 1f f6 ff ff       	jmp    8010586e <alltraps>
+801065da:	e9 2a f6 ff ff       	jmp    80105c09 <alltraps>
 
-8010624f <vector143>:
+801065df <vector143>:
 .globl vector143
 vector143:
   pushl $0
-8010624f:	6a 00                	push   $0x0
+801065df:	6a 00                	push   $0x0
   pushl $143
-80106251:	68 8f 00 00 00       	push   $0x8f
+801065e1:	68 8f 00 00 00       	push   $0x8f
   jmp alltraps
-80106256:	e9 13 f6 ff ff       	jmp    8010586e <alltraps>
+801065e6:	e9 1e f6 ff ff       	jmp    80105c09 <alltraps>
 
-8010625b <vector144>:
+801065eb <vector144>:
 .globl vector144
 vector144:
   pushl $0
-8010625b:	6a 00                	push   $0x0
+801065eb:	6a 00                	push   $0x0
   pushl $144
-8010625d:	68 90 00 00 00       	push   $0x90
+801065ed:	68 90 00 00 00       	push   $0x90
   jmp alltraps
-80106262:	e9 07 f6 ff ff       	jmp    8010586e <alltraps>
+801065f2:	e9 12 f6 ff ff       	jmp    80105c09 <alltraps>
 
-80106267 <vector145>:
+801065f7 <vector145>:
 .globl vector145
 vector145:
   pushl $0
-80106267:	6a 00                	push   $0x0
+801065f7:	6a 00                	push   $0x0
   pushl $145
-80106269:	68 91 00 00 00       	push   $0x91
+801065f9:	68 91 00 00 00       	push   $0x91
   jmp alltraps
-8010626e:	e9 fb f5 ff ff       	jmp    8010586e <alltraps>
+801065fe:	e9 06 f6 ff ff       	jmp    80105c09 <alltraps>
 
-80106273 <vector146>:
+80106603 <vector146>:
 .globl vector146
 vector146:
   pushl $0
-80106273:	6a 00                	push   $0x0
+80106603:	6a 00                	push   $0x0
   pushl $146
-80106275:	68 92 00 00 00       	push   $0x92
+80106605:	68 92 00 00 00       	push   $0x92
   jmp alltraps
-8010627a:	e9 ef f5 ff ff       	jmp    8010586e <alltraps>
+8010660a:	e9 fa f5 ff ff       	jmp    80105c09 <alltraps>
 
-8010627f <vector147>:
+8010660f <vector147>:
 .globl vector147
 vector147:
   pushl $0
-8010627f:	6a 00                	push   $0x0
+8010660f:	6a 00                	push   $0x0
   pushl $147
-80106281:	68 93 00 00 00       	push   $0x93
+80106611:	68 93 00 00 00       	push   $0x93
   jmp alltraps
-80106286:	e9 e3 f5 ff ff       	jmp    8010586e <alltraps>
+80106616:	e9 ee f5 ff ff       	jmp    80105c09 <alltraps>
 
-8010628b <vector148>:
+8010661b <vector148>:
 .globl vector148
 vector148:
   pushl $0
-8010628b:	6a 00                	push   $0x0
+8010661b:	6a 00                	push   $0x0
   pushl $148
-8010628d:	68 94 00 00 00       	push   $0x94
+8010661d:	68 94 00 00 00       	push   $0x94
   jmp alltraps
-80106292:	e9 d7 f5 ff ff       	jmp    8010586e <alltraps>
+80106622:	e9 e2 f5 ff ff       	jmp    80105c09 <alltraps>
 
-80106297 <vector149>:
+80106627 <vector149>:
 .globl vector149
 vector149:
   pushl $0
-80106297:	6a 00                	push   $0x0
+80106627:	6a 00                	push   $0x0
   pushl $149
-80106299:	68 95 00 00 00       	push   $0x95
+80106629:	68 95 00 00 00       	push   $0x95
   jmp alltraps
-8010629e:	e9 cb f5 ff ff       	jmp    8010586e <alltraps>
+8010662e:	e9 d6 f5 ff ff       	jmp    80105c09 <alltraps>
 
-801062a3 <vector150>:
+80106633 <vector150>:
 .globl vector150
 vector150:
   pushl $0
-801062a3:	6a 00                	push   $0x0
+80106633:	6a 00                	push   $0x0
   pushl $150
-801062a5:	68 96 00 00 00       	push   $0x96
+80106635:	68 96 00 00 00       	push   $0x96
   jmp alltraps
-801062aa:	e9 bf f5 ff ff       	jmp    8010586e <alltraps>
+8010663a:	e9 ca f5 ff ff       	jmp    80105c09 <alltraps>
 
-801062af <vector151>:
+8010663f <vector151>:
 .globl vector151
 vector151:
   pushl $0
-801062af:	6a 00                	push   $0x0
+8010663f:	6a 00                	push   $0x0
   pushl $151
-801062b1:	68 97 00 00 00       	push   $0x97
+80106641:	68 97 00 00 00       	push   $0x97
   jmp alltraps
-801062b6:	e9 b3 f5 ff ff       	jmp    8010586e <alltraps>
+80106646:	e9 be f5 ff ff       	jmp    80105c09 <alltraps>
 
-801062bb <vector152>:
+8010664b <vector152>:
 .globl vector152
 vector152:
   pushl $0
-801062bb:	6a 00                	push   $0x0
+8010664b:	6a 00                	push   $0x0
   pushl $152
-801062bd:	68 98 00 00 00       	push   $0x98
+8010664d:	68 98 00 00 00       	push   $0x98
   jmp alltraps
-801062c2:	e9 a7 f5 ff ff       	jmp    8010586e <alltraps>
+80106652:	e9 b2 f5 ff ff       	jmp    80105c09 <alltraps>
 
-801062c7 <vector153>:
+80106657 <vector153>:
 .globl vector153
 vector153:
   pushl $0
-801062c7:	6a 00                	push   $0x0
+80106657:	6a 00                	push   $0x0
   pushl $153
-801062c9:	68 99 00 00 00       	push   $0x99
+80106659:	68 99 00 00 00       	push   $0x99
   jmp alltraps
-801062ce:	e9 9b f5 ff ff       	jmp    8010586e <alltraps>
+8010665e:	e9 a6 f5 ff ff       	jmp    80105c09 <alltraps>
 
-801062d3 <vector154>:
+80106663 <vector154>:
 .globl vector154
 vector154:
   pushl $0
-801062d3:	6a 00                	push   $0x0
+80106663:	6a 00                	push   $0x0
   pushl $154
-801062d5:	68 9a 00 00 00       	push   $0x9a
+80106665:	68 9a 00 00 00       	push   $0x9a
   jmp alltraps
-801062da:	e9 8f f5 ff ff       	jmp    8010586e <alltraps>
+8010666a:	e9 9a f5 ff ff       	jmp    80105c09 <alltraps>
 
-801062df <vector155>:
+8010666f <vector155>:
 .globl vector155
 vector155:
   pushl $0
-801062df:	6a 00                	push   $0x0
+8010666f:	6a 00                	push   $0x0
   pushl $155
-801062e1:	68 9b 00 00 00       	push   $0x9b
+80106671:	68 9b 00 00 00       	push   $0x9b
   jmp alltraps
-801062e6:	e9 83 f5 ff ff       	jmp    8010586e <alltraps>
+80106676:	e9 8e f5 ff ff       	jmp    80105c09 <alltraps>
 
-801062eb <vector156>:
+8010667b <vector156>:
 .globl vector156
 vector156:
   pushl $0
-801062eb:	6a 00                	push   $0x0
+8010667b:	6a 00                	push   $0x0
   pushl $156
-801062ed:	68 9c 00 00 00       	push   $0x9c
+8010667d:	68 9c 00 00 00       	push   $0x9c
   jmp alltraps
-801062f2:	e9 77 f5 ff ff       	jmp    8010586e <alltraps>
+80106682:	e9 82 f5 ff ff       	jmp    80105c09 <alltraps>
 
-801062f7 <vector157>:
+80106687 <vector157>:
 .globl vector157
 vector157:
   pushl $0
-801062f7:	6a 00                	push   $0x0
+80106687:	6a 00                	push   $0x0
   pushl $157
-801062f9:	68 9d 00 00 00       	push   $0x9d
+80106689:	68 9d 00 00 00       	push   $0x9d
   jmp alltraps
-801062fe:	e9 6b f5 ff ff       	jmp    8010586e <alltraps>
+8010668e:	e9 76 f5 ff ff       	jmp    80105c09 <alltraps>
 
-80106303 <vector158>:
+80106693 <vector158>:
 .globl vector158
 vector158:
   pushl $0
-80106303:	6a 00                	push   $0x0
+80106693:	6a 00                	push   $0x0
   pushl $158
-80106305:	68 9e 00 00 00       	push   $0x9e
+80106695:	68 9e 00 00 00       	push   $0x9e
   jmp alltraps
-8010630a:	e9 5f f5 ff ff       	jmp    8010586e <alltraps>
+8010669a:	e9 6a f5 ff ff       	jmp    80105c09 <alltraps>
 
-8010630f <vector159>:
+8010669f <vector159>:
 .globl vector159
 vector159:
   pushl $0
-8010630f:	6a 00                	push   $0x0
+8010669f:	6a 00                	push   $0x0
   pushl $159
-80106311:	68 9f 00 00 00       	push   $0x9f
+801066a1:	68 9f 00 00 00       	push   $0x9f
   jmp alltraps
-80106316:	e9 53 f5 ff ff       	jmp    8010586e <alltraps>
+801066a6:	e9 5e f5 ff ff       	jmp    80105c09 <alltraps>
 
-8010631b <vector160>:
+801066ab <vector160>:
 .globl vector160
 vector160:
   pushl $0
-8010631b:	6a 00                	push   $0x0
+801066ab:	6a 00                	push   $0x0
   pushl $160
-8010631d:	68 a0 00 00 00       	push   $0xa0
+801066ad:	68 a0 00 00 00       	push   $0xa0
   jmp alltraps
-80106322:	e9 47 f5 ff ff       	jmp    8010586e <alltraps>
+801066b2:	e9 52 f5 ff ff       	jmp    80105c09 <alltraps>
 
-80106327 <vector161>:
+801066b7 <vector161>:
 .globl vector161
 vector161:
   pushl $0
-80106327:	6a 00                	push   $0x0
+801066b7:	6a 00                	push   $0x0
   pushl $161
-80106329:	68 a1 00 00 00       	push   $0xa1
+801066b9:	68 a1 00 00 00       	push   $0xa1
   jmp alltraps
-8010632e:	e9 3b f5 ff ff       	jmp    8010586e <alltraps>
+801066be:	e9 46 f5 ff ff       	jmp    80105c09 <alltraps>
 
-80106333 <vector162>:
+801066c3 <vector162>:
 .globl vector162
 vector162:
   pushl $0
-80106333:	6a 00                	push   $0x0
+801066c3:	6a 00                	push   $0x0
   pushl $162
-80106335:	68 a2 00 00 00       	push   $0xa2
+801066c5:	68 a2 00 00 00       	push   $0xa2
   jmp alltraps
-8010633a:	e9 2f f5 ff ff       	jmp    8010586e <alltraps>
+801066ca:	e9 3a f5 ff ff       	jmp    80105c09 <alltraps>
 
-8010633f <vector163>:
+801066cf <vector163>:
 .globl vector163
 vector163:
   pushl $0
-8010633f:	6a 00                	push   $0x0
+801066cf:	6a 00                	push   $0x0
   pushl $163
-80106341:	68 a3 00 00 00       	push   $0xa3
+801066d1:	68 a3 00 00 00       	push   $0xa3
   jmp alltraps
-80106346:	e9 23 f5 ff ff       	jmp    8010586e <alltraps>
+801066d6:	e9 2e f5 ff ff       	jmp    80105c09 <alltraps>
 
-8010634b <vector164>:
+801066db <vector164>:
 .globl vector164
 vector164:
   pushl $0
-8010634b:	6a 00                	push   $0x0
+801066db:	6a 00                	push   $0x0
   pushl $164
-8010634d:	68 a4 00 00 00       	push   $0xa4
+801066dd:	68 a4 00 00 00       	push   $0xa4
   jmp alltraps
-80106352:	e9 17 f5 ff ff       	jmp    8010586e <alltraps>
+801066e2:	e9 22 f5 ff ff       	jmp    80105c09 <alltraps>
 
-80106357 <vector165>:
+801066e7 <vector165>:
 .globl vector165
 vector165:
   pushl $0
-80106357:	6a 00                	push   $0x0
+801066e7:	6a 00                	push   $0x0
   pushl $165
-80106359:	68 a5 00 00 00       	push   $0xa5
+801066e9:	68 a5 00 00 00       	push   $0xa5
   jmp alltraps
-8010635e:	e9 0b f5 ff ff       	jmp    8010586e <alltraps>
+801066ee:	e9 16 f5 ff ff       	jmp    80105c09 <alltraps>
 
-80106363 <vector166>:
+801066f3 <vector166>:
 .globl vector166
 vector166:
   pushl $0
-80106363:	6a 00                	push   $0x0
+801066f3:	6a 00                	push   $0x0
   pushl $166
-80106365:	68 a6 00 00 00       	push   $0xa6
+801066f5:	68 a6 00 00 00       	push   $0xa6
   jmp alltraps
-8010636a:	e9 ff f4 ff ff       	jmp    8010586e <alltraps>
+801066fa:	e9 0a f5 ff ff       	jmp    80105c09 <alltraps>
 
-8010636f <vector167>:
+801066ff <vector167>:
 .globl vector167
 vector167:
   pushl $0
-8010636f:	6a 00                	push   $0x0
+801066ff:	6a 00                	push   $0x0
   pushl $167
-80106371:	68 a7 00 00 00       	push   $0xa7
+80106701:	68 a7 00 00 00       	push   $0xa7
   jmp alltraps
-80106376:	e9 f3 f4 ff ff       	jmp    8010586e <alltraps>
+80106706:	e9 fe f4 ff ff       	jmp    80105c09 <alltraps>
 
-8010637b <vector168>:
+8010670b <vector168>:
 .globl vector168
 vector168:
   pushl $0
-8010637b:	6a 00                	push   $0x0
+8010670b:	6a 00                	push   $0x0
   pushl $168
-8010637d:	68 a8 00 00 00       	push   $0xa8
+8010670d:	68 a8 00 00 00       	push   $0xa8
   jmp alltraps
-80106382:	e9 e7 f4 ff ff       	jmp    8010586e <alltraps>
+80106712:	e9 f2 f4 ff ff       	jmp    80105c09 <alltraps>
 
-80106387 <vector169>:
+80106717 <vector169>:
 .globl vector169
 vector169:
   pushl $0
-80106387:	6a 00                	push   $0x0
+80106717:	6a 00                	push   $0x0
   pushl $169
-80106389:	68 a9 00 00 00       	push   $0xa9
+80106719:	68 a9 00 00 00       	push   $0xa9
   jmp alltraps
-8010638e:	e9 db f4 ff ff       	jmp    8010586e <alltraps>
+8010671e:	e9 e6 f4 ff ff       	jmp    80105c09 <alltraps>
 
-80106393 <vector170>:
+80106723 <vector170>:
 .globl vector170
 vector170:
   pushl $0
-80106393:	6a 00                	push   $0x0
+80106723:	6a 00                	push   $0x0
   pushl $170
-80106395:	68 aa 00 00 00       	push   $0xaa
+80106725:	68 aa 00 00 00       	push   $0xaa
   jmp alltraps
-8010639a:	e9 cf f4 ff ff       	jmp    8010586e <alltraps>
+8010672a:	e9 da f4 ff ff       	jmp    80105c09 <alltraps>
 
-8010639f <vector171>:
+8010672f <vector171>:
 .globl vector171
 vector171:
   pushl $0
-8010639f:	6a 00                	push   $0x0
+8010672f:	6a 00                	push   $0x0
   pushl $171
-801063a1:	68 ab 00 00 00       	push   $0xab
+80106731:	68 ab 00 00 00       	push   $0xab
   jmp alltraps
-801063a6:	e9 c3 f4 ff ff       	jmp    8010586e <alltraps>
+80106736:	e9 ce f4 ff ff       	jmp    80105c09 <alltraps>
 
-801063ab <vector172>:
+8010673b <vector172>:
 .globl vector172
 vector172:
   pushl $0
-801063ab:	6a 00                	push   $0x0
+8010673b:	6a 00                	push   $0x0
   pushl $172
-801063ad:	68 ac 00 00 00       	push   $0xac
+8010673d:	68 ac 00 00 00       	push   $0xac
   jmp alltraps
-801063b2:	e9 b7 f4 ff ff       	jmp    8010586e <alltraps>
+80106742:	e9 c2 f4 ff ff       	jmp    80105c09 <alltraps>
 
-801063b7 <vector173>:
+80106747 <vector173>:
 .globl vector173
 vector173:
   pushl $0
-801063b7:	6a 00                	push   $0x0
+80106747:	6a 00                	push   $0x0
   pushl $173
-801063b9:	68 ad 00 00 00       	push   $0xad
+80106749:	68 ad 00 00 00       	push   $0xad
   jmp alltraps
-801063be:	e9 ab f4 ff ff       	jmp    8010586e <alltraps>
+8010674e:	e9 b6 f4 ff ff       	jmp    80105c09 <alltraps>
 
-801063c3 <vector174>:
+80106753 <vector174>:
 .globl vector174
 vector174:
   pushl $0
-801063c3:	6a 00                	push   $0x0
+80106753:	6a 00                	push   $0x0
   pushl $174
-801063c5:	68 ae 00 00 00       	push   $0xae
+80106755:	68 ae 00 00 00       	push   $0xae
   jmp alltraps
-801063ca:	e9 9f f4 ff ff       	jmp    8010586e <alltraps>
+8010675a:	e9 aa f4 ff ff       	jmp    80105c09 <alltraps>
 
-801063cf <vector175>:
+8010675f <vector175>:
 .globl vector175
 vector175:
   pushl $0
-801063cf:	6a 00                	push   $0x0
+8010675f:	6a 00                	push   $0x0
   pushl $175
-801063d1:	68 af 00 00 00       	push   $0xaf
+80106761:	68 af 00 00 00       	push   $0xaf
   jmp alltraps
-801063d6:	e9 93 f4 ff ff       	jmp    8010586e <alltraps>
+80106766:	e9 9e f4 ff ff       	jmp    80105c09 <alltraps>
 
-801063db <vector176>:
+8010676b <vector176>:
 .globl vector176
 vector176:
   pushl $0
-801063db:	6a 00                	push   $0x0
+8010676b:	6a 00                	push   $0x0
   pushl $176
-801063dd:	68 b0 00 00 00       	push   $0xb0
+8010676d:	68 b0 00 00 00       	push   $0xb0
   jmp alltraps
-801063e2:	e9 87 f4 ff ff       	jmp    8010586e <alltraps>
+80106772:	e9 92 f4 ff ff       	jmp    80105c09 <alltraps>
 
-801063e7 <vector177>:
+80106777 <vector177>:
 .globl vector177
 vector177:
   pushl $0
-801063e7:	6a 00                	push   $0x0
+80106777:	6a 00                	push   $0x0
   pushl $177
-801063e9:	68 b1 00 00 00       	push   $0xb1
+80106779:	68 b1 00 00 00       	push   $0xb1
   jmp alltraps
-801063ee:	e9 7b f4 ff ff       	jmp    8010586e <alltraps>
+8010677e:	e9 86 f4 ff ff       	jmp    80105c09 <alltraps>
 
-801063f3 <vector178>:
+80106783 <vector178>:
 .globl vector178
 vector178:
   pushl $0
-801063f3:	6a 00                	push   $0x0
+80106783:	6a 00                	push   $0x0
   pushl $178
-801063f5:	68 b2 00 00 00       	push   $0xb2
+80106785:	68 b2 00 00 00       	push   $0xb2
   jmp alltraps
-801063fa:	e9 6f f4 ff ff       	jmp    8010586e <alltraps>
+8010678a:	e9 7a f4 ff ff       	jmp    80105c09 <alltraps>
 
-801063ff <vector179>:
+8010678f <vector179>:
 .globl vector179
 vector179:
   pushl $0
-801063ff:	6a 00                	push   $0x0
+8010678f:	6a 00                	push   $0x0
   pushl $179
-80106401:	68 b3 00 00 00       	push   $0xb3
+80106791:	68 b3 00 00 00       	push   $0xb3
   jmp alltraps
-80106406:	e9 63 f4 ff ff       	jmp    8010586e <alltraps>
+80106796:	e9 6e f4 ff ff       	jmp    80105c09 <alltraps>
 
-8010640b <vector180>:
+8010679b <vector180>:
 .globl vector180
 vector180:
   pushl $0
-8010640b:	6a 00                	push   $0x0
+8010679b:	6a 00                	push   $0x0
   pushl $180
-8010640d:	68 b4 00 00 00       	push   $0xb4
+8010679d:	68 b4 00 00 00       	push   $0xb4
   jmp alltraps
-80106412:	e9 57 f4 ff ff       	jmp    8010586e <alltraps>
+801067a2:	e9 62 f4 ff ff       	jmp    80105c09 <alltraps>
 
-80106417 <vector181>:
+801067a7 <vector181>:
 .globl vector181
 vector181:
   pushl $0
-80106417:	6a 00                	push   $0x0
+801067a7:	6a 00                	push   $0x0
   pushl $181
-80106419:	68 b5 00 00 00       	push   $0xb5
+801067a9:	68 b5 00 00 00       	push   $0xb5
   jmp alltraps
-8010641e:	e9 4b f4 ff ff       	jmp    8010586e <alltraps>
+801067ae:	e9 56 f4 ff ff       	jmp    80105c09 <alltraps>
 
-80106423 <vector182>:
+801067b3 <vector182>:
 .globl vector182
 vector182:
   pushl $0
-80106423:	6a 00                	push   $0x0
+801067b3:	6a 00                	push   $0x0
   pushl $182
-80106425:	68 b6 00 00 00       	push   $0xb6
+801067b5:	68 b6 00 00 00       	push   $0xb6
   jmp alltraps
-8010642a:	e9 3f f4 ff ff       	jmp    8010586e <alltraps>
+801067ba:	e9 4a f4 ff ff       	jmp    80105c09 <alltraps>
 
-8010642f <vector183>:
+801067bf <vector183>:
 .globl vector183
 vector183:
   pushl $0
-8010642f:	6a 00                	push   $0x0
+801067bf:	6a 00                	push   $0x0
   pushl $183
-80106431:	68 b7 00 00 00       	push   $0xb7
+801067c1:	68 b7 00 00 00       	push   $0xb7
   jmp alltraps
-80106436:	e9 33 f4 ff ff       	jmp    8010586e <alltraps>
+801067c6:	e9 3e f4 ff ff       	jmp    80105c09 <alltraps>
 
-8010643b <vector184>:
+801067cb <vector184>:
 .globl vector184
 vector184:
   pushl $0
-8010643b:	6a 00                	push   $0x0
+801067cb:	6a 00                	push   $0x0
   pushl $184
-8010643d:	68 b8 00 00 00       	push   $0xb8
+801067cd:	68 b8 00 00 00       	push   $0xb8
   jmp alltraps
-80106442:	e9 27 f4 ff ff       	jmp    8010586e <alltraps>
+801067d2:	e9 32 f4 ff ff       	jmp    80105c09 <alltraps>
 
-80106447 <vector185>:
+801067d7 <vector185>:
 .globl vector185
 vector185:
   pushl $0
-80106447:	6a 00                	push   $0x0
+801067d7:	6a 00                	push   $0x0
   pushl $185
-80106449:	68 b9 00 00 00       	push   $0xb9
+801067d9:	68 b9 00 00 00       	push   $0xb9
   jmp alltraps
-8010644e:	e9 1b f4 ff ff       	jmp    8010586e <alltraps>
+801067de:	e9 26 f4 ff ff       	jmp    80105c09 <alltraps>
 
-80106453 <vector186>:
+801067e3 <vector186>:
 .globl vector186
 vector186:
   pushl $0
-80106453:	6a 00                	push   $0x0
+801067e3:	6a 00                	push   $0x0
   pushl $186
-80106455:	68 ba 00 00 00       	push   $0xba
+801067e5:	68 ba 00 00 00       	push   $0xba
   jmp alltraps
-8010645a:	e9 0f f4 ff ff       	jmp    8010586e <alltraps>
+801067ea:	e9 1a f4 ff ff       	jmp    80105c09 <alltraps>
 
-8010645f <vector187>:
+801067ef <vector187>:
 .globl vector187
 vector187:
   pushl $0
-8010645f:	6a 00                	push   $0x0
+801067ef:	6a 00                	push   $0x0
   pushl $187
-80106461:	68 bb 00 00 00       	push   $0xbb
+801067f1:	68 bb 00 00 00       	push   $0xbb
   jmp alltraps
-80106466:	e9 03 f4 ff ff       	jmp    8010586e <alltraps>
+801067f6:	e9 0e f4 ff ff       	jmp    80105c09 <alltraps>
 
-8010646b <vector188>:
+801067fb <vector188>:
 .globl vector188
 vector188:
   pushl $0
-8010646b:	6a 00                	push   $0x0
+801067fb:	6a 00                	push   $0x0
   pushl $188
-8010646d:	68 bc 00 00 00       	push   $0xbc
+801067fd:	68 bc 00 00 00       	push   $0xbc
   jmp alltraps
-80106472:	e9 f7 f3 ff ff       	jmp    8010586e <alltraps>
+80106802:	e9 02 f4 ff ff       	jmp    80105c09 <alltraps>
 
-80106477 <vector189>:
+80106807 <vector189>:
 .globl vector189
 vector189:
   pushl $0
-80106477:	6a 00                	push   $0x0
+80106807:	6a 00                	push   $0x0
   pushl $189
-80106479:	68 bd 00 00 00       	push   $0xbd
+80106809:	68 bd 00 00 00       	push   $0xbd
   jmp alltraps
-8010647e:	e9 eb f3 ff ff       	jmp    8010586e <alltraps>
+8010680e:	e9 f6 f3 ff ff       	jmp    80105c09 <alltraps>
 
-80106483 <vector190>:
+80106813 <vector190>:
 .globl vector190
 vector190:
   pushl $0
-80106483:	6a 00                	push   $0x0
+80106813:	6a 00                	push   $0x0
   pushl $190
-80106485:	68 be 00 00 00       	push   $0xbe
+80106815:	68 be 00 00 00       	push   $0xbe
   jmp alltraps
-8010648a:	e9 df f3 ff ff       	jmp    8010586e <alltraps>
+8010681a:	e9 ea f3 ff ff       	jmp    80105c09 <alltraps>
 
-8010648f <vector191>:
+8010681f <vector191>:
 .globl vector191
 vector191:
   pushl $0
-8010648f:	6a 00                	push   $0x0
+8010681f:	6a 00                	push   $0x0
   pushl $191
-80106491:	68 bf 00 00 00       	push   $0xbf
+80106821:	68 bf 00 00 00       	push   $0xbf
   jmp alltraps
-80106496:	e9 d3 f3 ff ff       	jmp    8010586e <alltraps>
+80106826:	e9 de f3 ff ff       	jmp    80105c09 <alltraps>
 
-8010649b <vector192>:
+8010682b <vector192>:
 .globl vector192
 vector192:
   pushl $0
-8010649b:	6a 00                	push   $0x0
+8010682b:	6a 00                	push   $0x0
   pushl $192
-8010649d:	68 c0 00 00 00       	push   $0xc0
+8010682d:	68 c0 00 00 00       	push   $0xc0
   jmp alltraps
-801064a2:	e9 c7 f3 ff ff       	jmp    8010586e <alltraps>
+80106832:	e9 d2 f3 ff ff       	jmp    80105c09 <alltraps>
 
-801064a7 <vector193>:
+80106837 <vector193>:
 .globl vector193
 vector193:
   pushl $0
-801064a7:	6a 00                	push   $0x0
+80106837:	6a 00                	push   $0x0
   pushl $193
-801064a9:	68 c1 00 00 00       	push   $0xc1
+80106839:	68 c1 00 00 00       	push   $0xc1
   jmp alltraps
-801064ae:	e9 bb f3 ff ff       	jmp    8010586e <alltraps>
+8010683e:	e9 c6 f3 ff ff       	jmp    80105c09 <alltraps>
 
-801064b3 <vector194>:
+80106843 <vector194>:
 .globl vector194
 vector194:
   pushl $0
-801064b3:	6a 00                	push   $0x0
+80106843:	6a 00                	push   $0x0
   pushl $194
-801064b5:	68 c2 00 00 00       	push   $0xc2
+80106845:	68 c2 00 00 00       	push   $0xc2
   jmp alltraps
-801064ba:	e9 af f3 ff ff       	jmp    8010586e <alltraps>
+8010684a:	e9 ba f3 ff ff       	jmp    80105c09 <alltraps>
 
-801064bf <vector195>:
+8010684f <vector195>:
 .globl vector195
 vector195:
   pushl $0
-801064bf:	6a 00                	push   $0x0
+8010684f:	6a 00                	push   $0x0
   pushl $195
-801064c1:	68 c3 00 00 00       	push   $0xc3
+80106851:	68 c3 00 00 00       	push   $0xc3
   jmp alltraps
-801064c6:	e9 a3 f3 ff ff       	jmp    8010586e <alltraps>
+80106856:	e9 ae f3 ff ff       	jmp    80105c09 <alltraps>
 
-801064cb <vector196>:
+8010685b <vector196>:
 .globl vector196
 vector196:
   pushl $0
-801064cb:	6a 00                	push   $0x0
+8010685b:	6a 00                	push   $0x0
   pushl $196
-801064cd:	68 c4 00 00 00       	push   $0xc4
+8010685d:	68 c4 00 00 00       	push   $0xc4
   jmp alltraps
-801064d2:	e9 97 f3 ff ff       	jmp    8010586e <alltraps>
+80106862:	e9 a2 f3 ff ff       	jmp    80105c09 <alltraps>
 
-801064d7 <vector197>:
+80106867 <vector197>:
 .globl vector197
 vector197:
   pushl $0
-801064d7:	6a 00                	push   $0x0
+80106867:	6a 00                	push   $0x0
   pushl $197
-801064d9:	68 c5 00 00 00       	push   $0xc5
+80106869:	68 c5 00 00 00       	push   $0xc5
   jmp alltraps
-801064de:	e9 8b f3 ff ff       	jmp    8010586e <alltraps>
+8010686e:	e9 96 f3 ff ff       	jmp    80105c09 <alltraps>
 
-801064e3 <vector198>:
+80106873 <vector198>:
 .globl vector198
 vector198:
   pushl $0
-801064e3:	6a 00                	push   $0x0
+80106873:	6a 00                	push   $0x0
   pushl $198
-801064e5:	68 c6 00 00 00       	push   $0xc6
+80106875:	68 c6 00 00 00       	push   $0xc6
   jmp alltraps
-801064ea:	e9 7f f3 ff ff       	jmp    8010586e <alltraps>
+8010687a:	e9 8a f3 ff ff       	jmp    80105c09 <alltraps>
 
-801064ef <vector199>:
+8010687f <vector199>:
 .globl vector199
 vector199:
   pushl $0
-801064ef:	6a 00                	push   $0x0
+8010687f:	6a 00                	push   $0x0
   pushl $199
-801064f1:	68 c7 00 00 00       	push   $0xc7
+80106881:	68 c7 00 00 00       	push   $0xc7
   jmp alltraps
-801064f6:	e9 73 f3 ff ff       	jmp    8010586e <alltraps>
+80106886:	e9 7e f3 ff ff       	jmp    80105c09 <alltraps>
 
-801064fb <vector200>:
+8010688b <vector200>:
 .globl vector200
 vector200:
   pushl $0
-801064fb:	6a 00                	push   $0x0
+8010688b:	6a 00                	push   $0x0
   pushl $200
-801064fd:	68 c8 00 00 00       	push   $0xc8
+8010688d:	68 c8 00 00 00       	push   $0xc8
   jmp alltraps
-80106502:	e9 67 f3 ff ff       	jmp    8010586e <alltraps>
+80106892:	e9 72 f3 ff ff       	jmp    80105c09 <alltraps>
 
-80106507 <vector201>:
+80106897 <vector201>:
 .globl vector201
 vector201:
   pushl $0
-80106507:	6a 00                	push   $0x0
+80106897:	6a 00                	push   $0x0
   pushl $201
-80106509:	68 c9 00 00 00       	push   $0xc9
+80106899:	68 c9 00 00 00       	push   $0xc9
   jmp alltraps
-8010650e:	e9 5b f3 ff ff       	jmp    8010586e <alltraps>
+8010689e:	e9 66 f3 ff ff       	jmp    80105c09 <alltraps>
 
-80106513 <vector202>:
+801068a3 <vector202>:
 .globl vector202
 vector202:
   pushl $0
-80106513:	6a 00                	push   $0x0
+801068a3:	6a 00                	push   $0x0
   pushl $202
-80106515:	68 ca 00 00 00       	push   $0xca
+801068a5:	68 ca 00 00 00       	push   $0xca
   jmp alltraps
-8010651a:	e9 4f f3 ff ff       	jmp    8010586e <alltraps>
+801068aa:	e9 5a f3 ff ff       	jmp    80105c09 <alltraps>
 
-8010651f <vector203>:
+801068af <vector203>:
 .globl vector203
 vector203:
   pushl $0
-8010651f:	6a 00                	push   $0x0
+801068af:	6a 00                	push   $0x0
   pushl $203
-80106521:	68 cb 00 00 00       	push   $0xcb
+801068b1:	68 cb 00 00 00       	push   $0xcb
   jmp alltraps
-80106526:	e9 43 f3 ff ff       	jmp    8010586e <alltraps>
+801068b6:	e9 4e f3 ff ff       	jmp    80105c09 <alltraps>
 
-8010652b <vector204>:
+801068bb <vector204>:
 .globl vector204
 vector204:
   pushl $0
-8010652b:	6a 00                	push   $0x0
+801068bb:	6a 00                	push   $0x0
   pushl $204
-8010652d:	68 cc 00 00 00       	push   $0xcc
+801068bd:	68 cc 00 00 00       	push   $0xcc
   jmp alltraps
-80106532:	e9 37 f3 ff ff       	jmp    8010586e <alltraps>
+801068c2:	e9 42 f3 ff ff       	jmp    80105c09 <alltraps>
 
-80106537 <vector205>:
+801068c7 <vector205>:
 .globl vector205
 vector205:
   pushl $0
-80106537:	6a 00                	push   $0x0
+801068c7:	6a 00                	push   $0x0
   pushl $205
-80106539:	68 cd 00 00 00       	push   $0xcd
+801068c9:	68 cd 00 00 00       	push   $0xcd
   jmp alltraps
-8010653e:	e9 2b f3 ff ff       	jmp    8010586e <alltraps>
+801068ce:	e9 36 f3 ff ff       	jmp    80105c09 <alltraps>
 
-80106543 <vector206>:
+801068d3 <vector206>:
 .globl vector206
 vector206:
   pushl $0
-80106543:	6a 00                	push   $0x0
+801068d3:	6a 00                	push   $0x0
   pushl $206
-80106545:	68 ce 00 00 00       	push   $0xce
+801068d5:	68 ce 00 00 00       	push   $0xce
   jmp alltraps
-8010654a:	e9 1f f3 ff ff       	jmp    8010586e <alltraps>
+801068da:	e9 2a f3 ff ff       	jmp    80105c09 <alltraps>
 
-8010654f <vector207>:
+801068df <vector207>:
 .globl vector207
 vector207:
   pushl $0
-8010654f:	6a 00                	push   $0x0
+801068df:	6a 00                	push   $0x0
   pushl $207
-80106551:	68 cf 00 00 00       	push   $0xcf
+801068e1:	68 cf 00 00 00       	push   $0xcf
   jmp alltraps
-80106556:	e9 13 f3 ff ff       	jmp    8010586e <alltraps>
+801068e6:	e9 1e f3 ff ff       	jmp    80105c09 <alltraps>
 
-8010655b <vector208>:
+801068eb <vector208>:
 .globl vector208
 vector208:
   pushl $0
-8010655b:	6a 00                	push   $0x0
+801068eb:	6a 00                	push   $0x0
   pushl $208
-8010655d:	68 d0 00 00 00       	push   $0xd0
+801068ed:	68 d0 00 00 00       	push   $0xd0
   jmp alltraps
-80106562:	e9 07 f3 ff ff       	jmp    8010586e <alltraps>
+801068f2:	e9 12 f3 ff ff       	jmp    80105c09 <alltraps>
 
-80106567 <vector209>:
+801068f7 <vector209>:
 .globl vector209
 vector209:
   pushl $0
-80106567:	6a 00                	push   $0x0
+801068f7:	6a 00                	push   $0x0
   pushl $209
-80106569:	68 d1 00 00 00       	push   $0xd1
+801068f9:	68 d1 00 00 00       	push   $0xd1
   jmp alltraps
-8010656e:	e9 fb f2 ff ff       	jmp    8010586e <alltraps>
+801068fe:	e9 06 f3 ff ff       	jmp    80105c09 <alltraps>
 
-80106573 <vector210>:
+80106903 <vector210>:
 .globl vector210
 vector210:
   pushl $0
-80106573:	6a 00                	push   $0x0
+80106903:	6a 00                	push   $0x0
   pushl $210
-80106575:	68 d2 00 00 00       	push   $0xd2
+80106905:	68 d2 00 00 00       	push   $0xd2
   jmp alltraps
-8010657a:	e9 ef f2 ff ff       	jmp    8010586e <alltraps>
+8010690a:	e9 fa f2 ff ff       	jmp    80105c09 <alltraps>
 
-8010657f <vector211>:
+8010690f <vector211>:
 .globl vector211
 vector211:
   pushl $0
-8010657f:	6a 00                	push   $0x0
+8010690f:	6a 00                	push   $0x0
   pushl $211
-80106581:	68 d3 00 00 00       	push   $0xd3
+80106911:	68 d3 00 00 00       	push   $0xd3
   jmp alltraps
-80106586:	e9 e3 f2 ff ff       	jmp    8010586e <alltraps>
+80106916:	e9 ee f2 ff ff       	jmp    80105c09 <alltraps>
 
-8010658b <vector212>:
+8010691b <vector212>:
 .globl vector212
 vector212:
   pushl $0
-8010658b:	6a 00                	push   $0x0
+8010691b:	6a 00                	push   $0x0
   pushl $212
-8010658d:	68 d4 00 00 00       	push   $0xd4
+8010691d:	68 d4 00 00 00       	push   $0xd4
   jmp alltraps
-80106592:	e9 d7 f2 ff ff       	jmp    8010586e <alltraps>
+80106922:	e9 e2 f2 ff ff       	jmp    80105c09 <alltraps>
 
-80106597 <vector213>:
+80106927 <vector213>:
 .globl vector213
 vector213:
   pushl $0
-80106597:	6a 00                	push   $0x0
+80106927:	6a 00                	push   $0x0
   pushl $213
-80106599:	68 d5 00 00 00       	push   $0xd5
+80106929:	68 d5 00 00 00       	push   $0xd5
   jmp alltraps
-8010659e:	e9 cb f2 ff ff       	jmp    8010586e <alltraps>
+8010692e:	e9 d6 f2 ff ff       	jmp    80105c09 <alltraps>
 
-801065a3 <vector214>:
+80106933 <vector214>:
 .globl vector214
 vector214:
   pushl $0
-801065a3:	6a 00                	push   $0x0
+80106933:	6a 00                	push   $0x0
   pushl $214
-801065a5:	68 d6 00 00 00       	push   $0xd6
+80106935:	68 d6 00 00 00       	push   $0xd6
   jmp alltraps
-801065aa:	e9 bf f2 ff ff       	jmp    8010586e <alltraps>
+8010693a:	e9 ca f2 ff ff       	jmp    80105c09 <alltraps>
 
-801065af <vector215>:
+8010693f <vector215>:
 .globl vector215
 vector215:
   pushl $0
-801065af:	6a 00                	push   $0x0
+8010693f:	6a 00                	push   $0x0
   pushl $215
-801065b1:	68 d7 00 00 00       	push   $0xd7
+80106941:	68 d7 00 00 00       	push   $0xd7
   jmp alltraps
-801065b6:	e9 b3 f2 ff ff       	jmp    8010586e <alltraps>
+80106946:	e9 be f2 ff ff       	jmp    80105c09 <alltraps>
 
-801065bb <vector216>:
+8010694b <vector216>:
 .globl vector216
 vector216:
   pushl $0
-801065bb:	6a 00                	push   $0x0
+8010694b:	6a 00                	push   $0x0
   pushl $216
-801065bd:	68 d8 00 00 00       	push   $0xd8
+8010694d:	68 d8 00 00 00       	push   $0xd8
   jmp alltraps
-801065c2:	e9 a7 f2 ff ff       	jmp    8010586e <alltraps>
+80106952:	e9 b2 f2 ff ff       	jmp    80105c09 <alltraps>
 
-801065c7 <vector217>:
+80106957 <vector217>:
 .globl vector217
 vector217:
   pushl $0
-801065c7:	6a 00                	push   $0x0
+80106957:	6a 00                	push   $0x0
   pushl $217
-801065c9:	68 d9 00 00 00       	push   $0xd9
+80106959:	68 d9 00 00 00       	push   $0xd9
   jmp alltraps
-801065ce:	e9 9b f2 ff ff       	jmp    8010586e <alltraps>
+8010695e:	e9 a6 f2 ff ff       	jmp    80105c09 <alltraps>
 
-801065d3 <vector218>:
+80106963 <vector218>:
 .globl vector218
 vector218:
   pushl $0
-801065d3:	6a 00                	push   $0x0
+80106963:	6a 00                	push   $0x0
   pushl $218
-801065d5:	68 da 00 00 00       	push   $0xda
+80106965:	68 da 00 00 00       	push   $0xda
   jmp alltraps
-801065da:	e9 8f f2 ff ff       	jmp    8010586e <alltraps>
+8010696a:	e9 9a f2 ff ff       	jmp    80105c09 <alltraps>
 
-801065df <vector219>:
+8010696f <vector219>:
 .globl vector219
 vector219:
   pushl $0
-801065df:	6a 00                	push   $0x0
+8010696f:	6a 00                	push   $0x0
   pushl $219
-801065e1:	68 db 00 00 00       	push   $0xdb
+80106971:	68 db 00 00 00       	push   $0xdb
   jmp alltraps
-801065e6:	e9 83 f2 ff ff       	jmp    8010586e <alltraps>
+80106976:	e9 8e f2 ff ff       	jmp    80105c09 <alltraps>
 
-801065eb <vector220>:
+8010697b <vector220>:
 .globl vector220
 vector220:
   pushl $0
-801065eb:	6a 00                	push   $0x0
+8010697b:	6a 00                	push   $0x0
   pushl $220
-801065ed:	68 dc 00 00 00       	push   $0xdc
+8010697d:	68 dc 00 00 00       	push   $0xdc
   jmp alltraps
-801065f2:	e9 77 f2 ff ff       	jmp    8010586e <alltraps>
+80106982:	e9 82 f2 ff ff       	jmp    80105c09 <alltraps>
 
-801065f7 <vector221>:
+80106987 <vector221>:
 .globl vector221
 vector221:
   pushl $0
-801065f7:	6a 00                	push   $0x0
+80106987:	6a 00                	push   $0x0
   pushl $221
-801065f9:	68 dd 00 00 00       	push   $0xdd
+80106989:	68 dd 00 00 00       	push   $0xdd
   jmp alltraps
-801065fe:	e9 6b f2 ff ff       	jmp    8010586e <alltraps>
+8010698e:	e9 76 f2 ff ff       	jmp    80105c09 <alltraps>
 
-80106603 <vector222>:
+80106993 <vector222>:
 .globl vector222
 vector222:
   pushl $0
-80106603:	6a 00                	push   $0x0
+80106993:	6a 00                	push   $0x0
   pushl $222
-80106605:	68 de 00 00 00       	push   $0xde
+80106995:	68 de 00 00 00       	push   $0xde
   jmp alltraps
-8010660a:	e9 5f f2 ff ff       	jmp    8010586e <alltraps>
+8010699a:	e9 6a f2 ff ff       	jmp    80105c09 <alltraps>
 
-8010660f <vector223>:
+8010699f <vector223>:
 .globl vector223
 vector223:
   pushl $0
-8010660f:	6a 00                	push   $0x0
+8010699f:	6a 00                	push   $0x0
   pushl $223
-80106611:	68 df 00 00 00       	push   $0xdf
+801069a1:	68 df 00 00 00       	push   $0xdf
   jmp alltraps
-80106616:	e9 53 f2 ff ff       	jmp    8010586e <alltraps>
+801069a6:	e9 5e f2 ff ff       	jmp    80105c09 <alltraps>
 
-8010661b <vector224>:
+801069ab <vector224>:
 .globl vector224
 vector224:
   pushl $0
-8010661b:	6a 00                	push   $0x0
+801069ab:	6a 00                	push   $0x0
   pushl $224
-8010661d:	68 e0 00 00 00       	push   $0xe0
+801069ad:	68 e0 00 00 00       	push   $0xe0
   jmp alltraps
-80106622:	e9 47 f2 ff ff       	jmp    8010586e <alltraps>
+801069b2:	e9 52 f2 ff ff       	jmp    80105c09 <alltraps>
 
-80106627 <vector225>:
+801069b7 <vector225>:
 .globl vector225
 vector225:
   pushl $0
-80106627:	6a 00                	push   $0x0
+801069b7:	6a 00                	push   $0x0
   pushl $225
-80106629:	68 e1 00 00 00       	push   $0xe1
+801069b9:	68 e1 00 00 00       	push   $0xe1
   jmp alltraps
-8010662e:	e9 3b f2 ff ff       	jmp    8010586e <alltraps>
+801069be:	e9 46 f2 ff ff       	jmp    80105c09 <alltraps>
 
-80106633 <vector226>:
+801069c3 <vector226>:
 .globl vector226
 vector226:
   pushl $0
-80106633:	6a 00                	push   $0x0
+801069c3:	6a 00                	push   $0x0
   pushl $226
-80106635:	68 e2 00 00 00       	push   $0xe2
+801069c5:	68 e2 00 00 00       	push   $0xe2
   jmp alltraps
-8010663a:	e9 2f f2 ff ff       	jmp    8010586e <alltraps>
+801069ca:	e9 3a f2 ff ff       	jmp    80105c09 <alltraps>
 
-8010663f <vector227>:
+801069cf <vector227>:
 .globl vector227
 vector227:
   pushl $0
-8010663f:	6a 00                	push   $0x0
+801069cf:	6a 00                	push   $0x0
   pushl $227
-80106641:	68 e3 00 00 00       	push   $0xe3
+801069d1:	68 e3 00 00 00       	push   $0xe3
   jmp alltraps
-80106646:	e9 23 f2 ff ff       	jmp    8010586e <alltraps>
+801069d6:	e9 2e f2 ff ff       	jmp    80105c09 <alltraps>
 
-8010664b <vector228>:
+801069db <vector228>:
 .globl vector228
 vector228:
   pushl $0
-8010664b:	6a 00                	push   $0x0
+801069db:	6a 00                	push   $0x0
   pushl $228
-8010664d:	68 e4 00 00 00       	push   $0xe4
+801069dd:	68 e4 00 00 00       	push   $0xe4
   jmp alltraps
-80106652:	e9 17 f2 ff ff       	jmp    8010586e <alltraps>
+801069e2:	e9 22 f2 ff ff       	jmp    80105c09 <alltraps>
 
-80106657 <vector229>:
+801069e7 <vector229>:
 .globl vector229
 vector229:
   pushl $0
-80106657:	6a 00                	push   $0x0
+801069e7:	6a 00                	push   $0x0
   pushl $229
-80106659:	68 e5 00 00 00       	push   $0xe5
+801069e9:	68 e5 00 00 00       	push   $0xe5
   jmp alltraps
-8010665e:	e9 0b f2 ff ff       	jmp    8010586e <alltraps>
+801069ee:	e9 16 f2 ff ff       	jmp    80105c09 <alltraps>
 
-80106663 <vector230>:
+801069f3 <vector230>:
 .globl vector230
 vector230:
   pushl $0
-80106663:	6a 00                	push   $0x0
+801069f3:	6a 00                	push   $0x0
   pushl $230
-80106665:	68 e6 00 00 00       	push   $0xe6
+801069f5:	68 e6 00 00 00       	push   $0xe6
   jmp alltraps
-8010666a:	e9 ff f1 ff ff       	jmp    8010586e <alltraps>
+801069fa:	e9 0a f2 ff ff       	jmp    80105c09 <alltraps>
 
-8010666f <vector231>:
+801069ff <vector231>:
 .globl vector231
 vector231:
   pushl $0
-8010666f:	6a 00                	push   $0x0
+801069ff:	6a 00                	push   $0x0
   pushl $231
-80106671:	68 e7 00 00 00       	push   $0xe7
+80106a01:	68 e7 00 00 00       	push   $0xe7
   jmp alltraps
-80106676:	e9 f3 f1 ff ff       	jmp    8010586e <alltraps>
+80106a06:	e9 fe f1 ff ff       	jmp    80105c09 <alltraps>
 
-8010667b <vector232>:
+80106a0b <vector232>:
 .globl vector232
 vector232:
   pushl $0
-8010667b:	6a 00                	push   $0x0
+80106a0b:	6a 00                	push   $0x0
   pushl $232
-8010667d:	68 e8 00 00 00       	push   $0xe8
+80106a0d:	68 e8 00 00 00       	push   $0xe8
   jmp alltraps
-80106682:	e9 e7 f1 ff ff       	jmp    8010586e <alltraps>
+80106a12:	e9 f2 f1 ff ff       	jmp    80105c09 <alltraps>
 
-80106687 <vector233>:
+80106a17 <vector233>:
 .globl vector233
 vector233:
   pushl $0
-80106687:	6a 00                	push   $0x0
+80106a17:	6a 00                	push   $0x0
   pushl $233
-80106689:	68 e9 00 00 00       	push   $0xe9
+80106a19:	68 e9 00 00 00       	push   $0xe9
   jmp alltraps
-8010668e:	e9 db f1 ff ff       	jmp    8010586e <alltraps>
+80106a1e:	e9 e6 f1 ff ff       	jmp    80105c09 <alltraps>
 
-80106693 <vector234>:
+80106a23 <vector234>:
 .globl vector234
 vector234:
   pushl $0
-80106693:	6a 00                	push   $0x0
+80106a23:	6a 00                	push   $0x0
   pushl $234
-80106695:	68 ea 00 00 00       	push   $0xea
+80106a25:	68 ea 00 00 00       	push   $0xea
   jmp alltraps
-8010669a:	e9 cf f1 ff ff       	jmp    8010586e <alltraps>
+80106a2a:	e9 da f1 ff ff       	jmp    80105c09 <alltraps>
 
-8010669f <vector235>:
+80106a2f <vector235>:
 .globl vector235
 vector235:
   pushl $0
-8010669f:	6a 00                	push   $0x0
+80106a2f:	6a 00                	push   $0x0
   pushl $235
-801066a1:	68 eb 00 00 00       	push   $0xeb
+80106a31:	68 eb 00 00 00       	push   $0xeb
   jmp alltraps
-801066a6:	e9 c3 f1 ff ff       	jmp    8010586e <alltraps>
+80106a36:	e9 ce f1 ff ff       	jmp    80105c09 <alltraps>
 
-801066ab <vector236>:
+80106a3b <vector236>:
 .globl vector236
 vector236:
   pushl $0
-801066ab:	6a 00                	push   $0x0
+80106a3b:	6a 00                	push   $0x0
   pushl $236
-801066ad:	68 ec 00 00 00       	push   $0xec
+80106a3d:	68 ec 00 00 00       	push   $0xec
   jmp alltraps
-801066b2:	e9 b7 f1 ff ff       	jmp    8010586e <alltraps>
+80106a42:	e9 c2 f1 ff ff       	jmp    80105c09 <alltraps>
 
-801066b7 <vector237>:
+80106a47 <vector237>:
 .globl vector237
 vector237:
   pushl $0
-801066b7:	6a 00                	push   $0x0
+80106a47:	6a 00                	push   $0x0
   pushl $237
-801066b9:	68 ed 00 00 00       	push   $0xed
+80106a49:	68 ed 00 00 00       	push   $0xed
   jmp alltraps
-801066be:	e9 ab f1 ff ff       	jmp    8010586e <alltraps>
+80106a4e:	e9 b6 f1 ff ff       	jmp    80105c09 <alltraps>
 
-801066c3 <vector238>:
+80106a53 <vector238>:
 .globl vector238
 vector238:
   pushl $0
-801066c3:	6a 00                	push   $0x0
+80106a53:	6a 00                	push   $0x0
   pushl $238
-801066c5:	68 ee 00 00 00       	push   $0xee
+80106a55:	68 ee 00 00 00       	push   $0xee
   jmp alltraps
-801066ca:	e9 9f f1 ff ff       	jmp    8010586e <alltraps>
+80106a5a:	e9 aa f1 ff ff       	jmp    80105c09 <alltraps>
 
-801066cf <vector239>:
+80106a5f <vector239>:
 .globl vector239
 vector239:
   pushl $0
-801066cf:	6a 00                	push   $0x0
+80106a5f:	6a 00                	push   $0x0
   pushl $239
-801066d1:	68 ef 00 00 00       	push   $0xef
+80106a61:	68 ef 00 00 00       	push   $0xef
   jmp alltraps
-801066d6:	e9 93 f1 ff ff       	jmp    8010586e <alltraps>
+80106a66:	e9 9e f1 ff ff       	jmp    80105c09 <alltraps>
 
-801066db <vector240>:
+80106a6b <vector240>:
 .globl vector240
 vector240:
   pushl $0
-801066db:	6a 00                	push   $0x0
+80106a6b:	6a 00                	push   $0x0
   pushl $240
-801066dd:	68 f0 00 00 00       	push   $0xf0
+80106a6d:	68 f0 00 00 00       	push   $0xf0
   jmp alltraps
-801066e2:	e9 87 f1 ff ff       	jmp    8010586e <alltraps>
+80106a72:	e9 92 f1 ff ff       	jmp    80105c09 <alltraps>
 
-801066e7 <vector241>:
+80106a77 <vector241>:
 .globl vector241
 vector241:
   pushl $0
-801066e7:	6a 00                	push   $0x0
+80106a77:	6a 00                	push   $0x0
   pushl $241
-801066e9:	68 f1 00 00 00       	push   $0xf1
+80106a79:	68 f1 00 00 00       	push   $0xf1
   jmp alltraps
-801066ee:	e9 7b f1 ff ff       	jmp    8010586e <alltraps>
+80106a7e:	e9 86 f1 ff ff       	jmp    80105c09 <alltraps>
 
-801066f3 <vector242>:
+80106a83 <vector242>:
 .globl vector242
 vector242:
   pushl $0
-801066f3:	6a 00                	push   $0x0
+80106a83:	6a 00                	push   $0x0
   pushl $242
-801066f5:	68 f2 00 00 00       	push   $0xf2
+80106a85:	68 f2 00 00 00       	push   $0xf2
   jmp alltraps
-801066fa:	e9 6f f1 ff ff       	jmp    8010586e <alltraps>
+80106a8a:	e9 7a f1 ff ff       	jmp    80105c09 <alltraps>
 
-801066ff <vector243>:
+80106a8f <vector243>:
 .globl vector243
 vector243:
   pushl $0
-801066ff:	6a 00                	push   $0x0
+80106a8f:	6a 00                	push   $0x0
   pushl $243
-80106701:	68 f3 00 00 00       	push   $0xf3
+80106a91:	68 f3 00 00 00       	push   $0xf3
   jmp alltraps
-80106706:	e9 63 f1 ff ff       	jmp    8010586e <alltraps>
+80106a96:	e9 6e f1 ff ff       	jmp    80105c09 <alltraps>
 
-8010670b <vector244>:
+80106a9b <vector244>:
 .globl vector244
 vector244:
   pushl $0
-8010670b:	6a 00                	push   $0x0
+80106a9b:	6a 00                	push   $0x0
   pushl $244
-8010670d:	68 f4 00 00 00       	push   $0xf4
+80106a9d:	68 f4 00 00 00       	push   $0xf4
   jmp alltraps
-80106712:	e9 57 f1 ff ff       	jmp    8010586e <alltraps>
+80106aa2:	e9 62 f1 ff ff       	jmp    80105c09 <alltraps>
 
-80106717 <vector245>:
+80106aa7 <vector245>:
 .globl vector245
 vector245:
   pushl $0
-80106717:	6a 00                	push   $0x0
+80106aa7:	6a 00                	push   $0x0
   pushl $245
-80106719:	68 f5 00 00 00       	push   $0xf5
+80106aa9:	68 f5 00 00 00       	push   $0xf5
   jmp alltraps
-8010671e:	e9 4b f1 ff ff       	jmp    8010586e <alltraps>
+80106aae:	e9 56 f1 ff ff       	jmp    80105c09 <alltraps>
 
-80106723 <vector246>:
+80106ab3 <vector246>:
 .globl vector246
 vector246:
   pushl $0
-80106723:	6a 00                	push   $0x0
+80106ab3:	6a 00                	push   $0x0
   pushl $246
-80106725:	68 f6 00 00 00       	push   $0xf6
+80106ab5:	68 f6 00 00 00       	push   $0xf6
   jmp alltraps
-8010672a:	e9 3f f1 ff ff       	jmp    8010586e <alltraps>
+80106aba:	e9 4a f1 ff ff       	jmp    80105c09 <alltraps>
 
-8010672f <vector247>:
+80106abf <vector247>:
 .globl vector247
 vector247:
   pushl $0
-8010672f:	6a 00                	push   $0x0
+80106abf:	6a 00                	push   $0x0
   pushl $247
-80106731:	68 f7 00 00 00       	push   $0xf7
+80106ac1:	68 f7 00 00 00       	push   $0xf7
   jmp alltraps
-80106736:	e9 33 f1 ff ff       	jmp    8010586e <alltraps>
+80106ac6:	e9 3e f1 ff ff       	jmp    80105c09 <alltraps>
 
-8010673b <vector248>:
+80106acb <vector248>:
 .globl vector248
 vector248:
   pushl $0
-8010673b:	6a 00                	push   $0x0
+80106acb:	6a 00                	push   $0x0
   pushl $248
-8010673d:	68 f8 00 00 00       	push   $0xf8
+80106acd:	68 f8 00 00 00       	push   $0xf8
   jmp alltraps
-80106742:	e9 27 f1 ff ff       	jmp    8010586e <alltraps>
+80106ad2:	e9 32 f1 ff ff       	jmp    80105c09 <alltraps>
 
-80106747 <vector249>:
+80106ad7 <vector249>:
 .globl vector249
 vector249:
   pushl $0
-80106747:	6a 00                	push   $0x0
+80106ad7:	6a 00                	push   $0x0
   pushl $249
-80106749:	68 f9 00 00 00       	push   $0xf9
+80106ad9:	68 f9 00 00 00       	push   $0xf9
   jmp alltraps
-8010674e:	e9 1b f1 ff ff       	jmp    8010586e <alltraps>
+80106ade:	e9 26 f1 ff ff       	jmp    80105c09 <alltraps>
 
-80106753 <vector250>:
+80106ae3 <vector250>:
 .globl vector250
 vector250:
   pushl $0
-80106753:	6a 00                	push   $0x0
+80106ae3:	6a 00                	push   $0x0
   pushl $250
-80106755:	68 fa 00 00 00       	push   $0xfa
+80106ae5:	68 fa 00 00 00       	push   $0xfa
   jmp alltraps
-8010675a:	e9 0f f1 ff ff       	jmp    8010586e <alltraps>
+80106aea:	e9 1a f1 ff ff       	jmp    80105c09 <alltraps>
 
-8010675f <vector251>:
+80106aef <vector251>:
 .globl vector251
 vector251:
   pushl $0
-8010675f:	6a 00                	push   $0x0
+80106aef:	6a 00                	push   $0x0
   pushl $251
-80106761:	68 fb 00 00 00       	push   $0xfb
+80106af1:	68 fb 00 00 00       	push   $0xfb
   jmp alltraps
-80106766:	e9 03 f1 ff ff       	jmp    8010586e <alltraps>
+80106af6:	e9 0e f1 ff ff       	jmp    80105c09 <alltraps>
 
-8010676b <vector252>:
+80106afb <vector252>:
 .globl vector252
 vector252:
   pushl $0
-8010676b:	6a 00                	push   $0x0
+80106afb:	6a 00                	push   $0x0
   pushl $252
-8010676d:	68 fc 00 00 00       	push   $0xfc
+80106afd:	68 fc 00 00 00       	push   $0xfc
   jmp alltraps
-80106772:	e9 f7 f0 ff ff       	jmp    8010586e <alltraps>
+80106b02:	e9 02 f1 ff ff       	jmp    80105c09 <alltraps>
 
-80106777 <vector253>:
+80106b07 <vector253>:
 .globl vector253
 vector253:
   pushl $0
-80106777:	6a 00                	push   $0x0
+80106b07:	6a 00                	push   $0x0
   pushl $253
-80106779:	68 fd 00 00 00       	push   $0xfd
+80106b09:	68 fd 00 00 00       	push   $0xfd
   jmp alltraps
-8010677e:	e9 eb f0 ff ff       	jmp    8010586e <alltraps>
+80106b0e:	e9 f6 f0 ff ff       	jmp    80105c09 <alltraps>
 
-80106783 <vector254>:
+80106b13 <vector254>:
 .globl vector254
 vector254:
   pushl $0
-80106783:	6a 00                	push   $0x0
+80106b13:	6a 00                	push   $0x0
   pushl $254
-80106785:	68 fe 00 00 00       	push   $0xfe
+80106b15:	68 fe 00 00 00       	push   $0xfe
   jmp alltraps
-8010678a:	e9 df f0 ff ff       	jmp    8010586e <alltraps>
+80106b1a:	e9 ea f0 ff ff       	jmp    80105c09 <alltraps>
 
-8010678f <vector255>:
+80106b1f <vector255>:
 .globl vector255
 vector255:
   pushl $0
-8010678f:	6a 00                	push   $0x0
+80106b1f:	6a 00                	push   $0x0
   pushl $255
-80106791:	68 ff 00 00 00       	push   $0xff
+80106b21:	68 ff 00 00 00       	push   $0xff
   jmp alltraps
-80106796:	e9 d3 f0 ff ff       	jmp    8010586e <alltraps>
-8010679b:	66 90                	xchg   %ax,%ax
-8010679d:	66 90                	xchg   %ax,%ax
-8010679f:	90                   	nop
+80106b26:	e9 de f0 ff ff       	jmp    80105c09 <alltraps>
+80106b2b:	66 90                	xchg   %ax,%ax
+80106b2d:	66 90                	xchg   %ax,%ax
+80106b2f:	90                   	nop
 
-801067a0 <walkpgdir>:
+80106b30 <walkpgdir>:
 // Return the address of the PTE in page table pgdir
 // that corresponds to virtual address va.  If alloc!=0,
 // create any required page table pages.
 static pte_t *
 walkpgdir(pde_t *pgdir, const void *va, int alloc)
 {
-801067a0:	55                   	push   %ebp
-801067a1:	89 e5                	mov    %esp,%ebp
-801067a3:	57                   	push   %edi
-801067a4:	56                   	push   %esi
-801067a5:	89 d6                	mov    %edx,%esi
+80106b30:	55                   	push   %ebp
+80106b31:	89 e5                	mov    %esp,%ebp
+80106b33:	57                   	push   %edi
+80106b34:	56                   	push   %esi
+80106b35:	89 d6                	mov    %edx,%esi
   pde_t *pde;
   pte_t *pgtab;
 
   pde = &pgdir[PDX(va)];
-801067a7:	c1 ea 16             	shr    $0x16,%edx
+80106b37:	c1 ea 16             	shr    $0x16,%edx
 {
-801067aa:	53                   	push   %ebx
+80106b3a:	53                   	push   %ebx
   pde = &pgdir[PDX(va)];
-801067ab:	8d 3c 90             	lea    (%eax,%edx,4),%edi
+80106b3b:	8d 3c 90             	lea    (%eax,%edx,4),%edi
 {
-801067ae:	83 ec 0c             	sub    $0xc,%esp
+80106b3e:	83 ec 0c             	sub    $0xc,%esp
   if(*pde & PTE_P){
-801067b1:	8b 1f                	mov    (%edi),%ebx
-801067b3:	f6 c3 01             	test   $0x1,%bl
-801067b6:	74 28                	je     801067e0 <walkpgdir+0x40>
+80106b41:	8b 1f                	mov    (%edi),%ebx
+80106b43:	f6 c3 01             	test   $0x1,%bl
+80106b46:	74 28                	je     80106b70 <walkpgdir+0x40>
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-801067b8:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-801067be:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
+80106b48:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+80106b4e:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
     // The permissions here are overly generous, but they can
     // be further restricted by the permissions in the page table
     // entries, if necessary.
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
   }
   return &pgtab[PTX(va)];
-801067c4:	89 f0                	mov    %esi,%eax
+80106b54:	89 f0                	mov    %esi,%eax
 }
-801067c6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106b56:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return &pgtab[PTX(va)];
-801067c9:	c1 e8 0a             	shr    $0xa,%eax
-801067cc:	25 fc 0f 00 00       	and    $0xffc,%eax
-801067d1:	01 d8                	add    %ebx,%eax
-}
-801067d3:	5b                   	pop    %ebx
-801067d4:	5e                   	pop    %esi
-801067d5:	5f                   	pop    %edi
-801067d6:	5d                   	pop    %ebp
-801067d7:	c3                   	ret    
-801067d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801067df:	90                   	nop
+80106b59:	c1 e8 0a             	shr    $0xa,%eax
+80106b5c:	25 fc 0f 00 00       	and    $0xffc,%eax
+80106b61:	01 d8                	add    %ebx,%eax
+}
+80106b63:	5b                   	pop    %ebx
+80106b64:	5e                   	pop    %esi
+80106b65:	5f                   	pop    %edi
+80106b66:	5d                   	pop    %ebp
+80106b67:	c3                   	ret    
+80106b68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106b6f:	90                   	nop
     if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
-801067e0:	85 c9                	test   %ecx,%ecx
-801067e2:	74 2c                	je     80106810 <walkpgdir+0x70>
-801067e4:	e8 47 be ff ff       	call   80102630 <kalloc>
-801067e9:	89 c3                	mov    %eax,%ebx
-801067eb:	85 c0                	test   %eax,%eax
-801067ed:	74 21                	je     80106810 <walkpgdir+0x70>
+80106b70:	85 c9                	test   %ecx,%ecx
+80106b72:	74 2c                	je     80106ba0 <walkpgdir+0x70>
+80106b74:	e8 b7 ba ff ff       	call   80102630 <kalloc>
+80106b79:	89 c3                	mov    %eax,%ebx
+80106b7b:	85 c0                	test   %eax,%eax
+80106b7d:	74 21                	je     80106ba0 <walkpgdir+0x70>
     memset(pgtab, 0, PGSIZE);
-801067ef:	83 ec 04             	sub    $0x4,%esp
-801067f2:	68 00 10 00 00       	push   $0x1000
-801067f7:	6a 00                	push   $0x0
-801067f9:	50                   	push   %eax
-801067fa:	e8 71 de ff ff       	call   80104670 <memset>
+80106b7f:	83 ec 04             	sub    $0x4,%esp
+80106b82:	68 00 10 00 00       	push   $0x1000
+80106b87:	6a 00                	push   $0x0
+80106b89:	50                   	push   %eax
+80106b8a:	e8 51 de ff ff       	call   801049e0 <memset>
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
-801067ff:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106805:	83 c4 10             	add    $0x10,%esp
-80106808:	83 c8 07             	or     $0x7,%eax
-8010680b:	89 07                	mov    %eax,(%edi)
-8010680d:	eb b5                	jmp    801067c4 <walkpgdir+0x24>
-8010680f:	90                   	nop
+80106b8f:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106b95:	83 c4 10             	add    $0x10,%esp
+80106b98:	83 c8 07             	or     $0x7,%eax
+80106b9b:	89 07                	mov    %eax,(%edi)
+80106b9d:	eb b5                	jmp    80106b54 <walkpgdir+0x24>
+80106b9f:	90                   	nop
 }
-80106810:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106ba0:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return 0;
-80106813:	31 c0                	xor    %eax,%eax
+80106ba3:	31 c0                	xor    %eax,%eax
 }
-80106815:	5b                   	pop    %ebx
-80106816:	5e                   	pop    %esi
-80106817:	5f                   	pop    %edi
-80106818:	5d                   	pop    %ebp
-80106819:	c3                   	ret    
-8010681a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106ba5:	5b                   	pop    %ebx
+80106ba6:	5e                   	pop    %esi
+80106ba7:	5f                   	pop    %edi
+80106ba8:	5d                   	pop    %ebp
+80106ba9:	c3                   	ret    
+80106baa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80106820 <mappages>:
+80106bb0 <mappages>:
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
 // be page-aligned.
 static int
 mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
 {
-80106820:	55                   	push   %ebp
-80106821:	89 e5                	mov    %esp,%ebp
-80106823:	57                   	push   %edi
-80106824:	89 c7                	mov    %eax,%edi
+80106bb0:	55                   	push   %ebp
+80106bb1:	89 e5                	mov    %esp,%ebp
+80106bb3:	57                   	push   %edi
+80106bb4:	89 c7                	mov    %eax,%edi
   char *a, *last;
   pte_t *pte;
 
   a = (char*)PGROUNDDOWN((uint)va);
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-80106826:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
+80106bb6:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
 {
-8010682a:	56                   	push   %esi
+80106bba:	56                   	push   %esi
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-8010682b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106bbb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   a = (char*)PGROUNDDOWN((uint)va);
-80106830:	89 d6                	mov    %edx,%esi
+80106bc0:	89 d6                	mov    %edx,%esi
 {
-80106832:	53                   	push   %ebx
+80106bc2:	53                   	push   %ebx
   a = (char*)PGROUNDDOWN((uint)va);
-80106833:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+80106bc3:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
 {
-80106839:	83 ec 1c             	sub    $0x1c,%esp
+80106bc9:	83 ec 1c             	sub    $0x1c,%esp
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-8010683c:	89 45 e0             	mov    %eax,-0x20(%ebp)
-8010683f:	8b 45 08             	mov    0x8(%ebp),%eax
-80106842:	29 f0                	sub    %esi,%eax
-80106844:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106847:	eb 1f                	jmp    80106868 <mappages+0x48>
-80106849:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106bcc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80106bcf:	8b 45 08             	mov    0x8(%ebp),%eax
+80106bd2:	29 f0                	sub    %esi,%eax
+80106bd4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106bd7:	eb 1f                	jmp    80106bf8 <mappages+0x48>
+80106bd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(;;){
     if((pte = walkpgdir(pgdir, a, 1)) == 0)
       return -1;
     if(*pte & PTE_P)
-80106850:	f6 00 01             	testb  $0x1,(%eax)
-80106853:	75 45                	jne    8010689a <mappages+0x7a>
+80106be0:	f6 00 01             	testb  $0x1,(%eax)
+80106be3:	75 45                	jne    80106c2a <mappages+0x7a>
       panic("remap");
     *pte = pa | perm | PTE_P;
-80106855:	0b 5d 0c             	or     0xc(%ebp),%ebx
-80106858:	83 cb 01             	or     $0x1,%ebx
-8010685b:	89 18                	mov    %ebx,(%eax)
+80106be5:	0b 5d 0c             	or     0xc(%ebp),%ebx
+80106be8:	83 cb 01             	or     $0x1,%ebx
+80106beb:	89 18                	mov    %ebx,(%eax)
     if(a == last)
-8010685d:	3b 75 e0             	cmp    -0x20(%ebp),%esi
-80106860:	74 2e                	je     80106890 <mappages+0x70>
+80106bed:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+80106bf0:	74 2e                	je     80106c20 <mappages+0x70>
       break;
     a += PGSIZE;
-80106862:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80106bf2:	81 c6 00 10 00 00    	add    $0x1000,%esi
   for(;;){
-80106868:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106bf8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
     if((pte = walkpgdir(pgdir, a, 1)) == 0)
-8010686b:	b9 01 00 00 00       	mov    $0x1,%ecx
-80106870:	89 f2                	mov    %esi,%edx
-80106872:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
-80106875:	89 f8                	mov    %edi,%eax
-80106877:	e8 24 ff ff ff       	call   801067a0 <walkpgdir>
-8010687c:	85 c0                	test   %eax,%eax
-8010687e:	75 d0                	jne    80106850 <mappages+0x30>
+80106bfb:	b9 01 00 00 00       	mov    $0x1,%ecx
+80106c00:	89 f2                	mov    %esi,%edx
+80106c02:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
+80106c05:	89 f8                	mov    %edi,%eax
+80106c07:	e8 24 ff ff ff       	call   80106b30 <walkpgdir>
+80106c0c:	85 c0                	test   %eax,%eax
+80106c0e:	75 d0                	jne    80106be0 <mappages+0x30>
     pa += PGSIZE;
   }
   return 0;
 }
-80106880:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106c10:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-80106883:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106c13:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80106888:	5b                   	pop    %ebx
-80106889:	5e                   	pop    %esi
-8010688a:	5f                   	pop    %edi
-8010688b:	5d                   	pop    %ebp
-8010688c:	c3                   	ret    
-8010688d:	8d 76 00             	lea    0x0(%esi),%esi
-80106890:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106c18:	5b                   	pop    %ebx
+80106c19:	5e                   	pop    %esi
+80106c1a:	5f                   	pop    %edi
+80106c1b:	5d                   	pop    %ebp
+80106c1c:	c3                   	ret    
+80106c1d:	8d 76 00             	lea    0x0(%esi),%esi
+80106c20:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-80106893:	31 c0                	xor    %eax,%eax
+80106c23:	31 c0                	xor    %eax,%eax
 }
-80106895:	5b                   	pop    %ebx
-80106896:	5e                   	pop    %esi
-80106897:	5f                   	pop    %edi
-80106898:	5d                   	pop    %ebp
-80106899:	c3                   	ret    
+80106c25:	5b                   	pop    %ebx
+80106c26:	5e                   	pop    %esi
+80106c27:	5f                   	pop    %edi
+80106c28:	5d                   	pop    %ebp
+80106c29:	c3                   	ret    
       panic("remap");
-8010689a:	83 ec 0c             	sub    $0xc,%esp
-8010689d:	68 88 79 10 80       	push   $0x80107988
-801068a2:	e8 e9 9a ff ff       	call   80100390 <panic>
-801068a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801068ae:	66 90                	xchg   %ax,%ax
+80106c2a:	83 ec 0c             	sub    $0xc,%esp
+80106c2d:	68 34 7d 10 80       	push   $0x80107d34
+80106c32:	e8 59 97 ff ff       	call   80100390 <panic>
+80106c37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106c3e:	66 90                	xchg   %ax,%ax
 
-801068b0 <deallocuvm.part.0>:
+80106c40 <deallocuvm.part.0>:
 // Deallocate user pages to bring the process size from oldsz to
 // newsz.  oldsz and newsz need not be page-aligned, nor does newsz
 // need to be less than oldsz.  oldsz can be larger than the actual
 // process size.  Returns the new process size.
 int
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-801068b0:	55                   	push   %ebp
-801068b1:	89 e5                	mov    %esp,%ebp
-801068b3:	57                   	push   %edi
-801068b4:	56                   	push   %esi
-801068b5:	89 c6                	mov    %eax,%esi
-801068b7:	53                   	push   %ebx
-801068b8:	89 d3                	mov    %edx,%ebx
+80106c40:	55                   	push   %ebp
+80106c41:	89 e5                	mov    %esp,%ebp
+80106c43:	57                   	push   %edi
+80106c44:	56                   	push   %esi
+80106c45:	89 c6                	mov    %eax,%esi
+80106c47:	53                   	push   %ebx
+80106c48:	89 d3                	mov    %edx,%ebx
   uint a, pa;
 
   if(newsz >= oldsz)
     return oldsz;
 
   a = PGROUNDUP(newsz);
-801068ba:	8d 91 ff 0f 00 00    	lea    0xfff(%ecx),%edx
-801068c0:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+80106c4a:	8d 91 ff 0f 00 00    	lea    0xfff(%ecx),%edx
+80106c50:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-801068c6:	83 ec 1c             	sub    $0x1c,%esp
-801068c9:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+80106c56:	83 ec 1c             	sub    $0x1c,%esp
+80106c59:	89 4d e0             	mov    %ecx,-0x20(%ebp)
   for(; a  < oldsz; a += PGSIZE){
-801068cc:	39 da                	cmp    %ebx,%edx
-801068ce:	73 5b                	jae    8010692b <deallocuvm.part.0+0x7b>
-801068d0:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
-801068d3:	89 d7                	mov    %edx,%edi
-801068d5:	eb 14                	jmp    801068eb <deallocuvm.part.0+0x3b>
-801068d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801068de:	66 90                	xchg   %ax,%ax
-801068e0:	81 c7 00 10 00 00    	add    $0x1000,%edi
-801068e6:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
-801068e9:	76 40                	jbe    8010692b <deallocuvm.part.0+0x7b>
+80106c5c:	39 da                	cmp    %ebx,%edx
+80106c5e:	73 5b                	jae    80106cbb <deallocuvm.part.0+0x7b>
+80106c60:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
+80106c63:	89 d7                	mov    %edx,%edi
+80106c65:	eb 14                	jmp    80106c7b <deallocuvm.part.0+0x3b>
+80106c67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106c6e:	66 90                	xchg   %ax,%ax
+80106c70:	81 c7 00 10 00 00    	add    $0x1000,%edi
+80106c76:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80106c79:	76 40                	jbe    80106cbb <deallocuvm.part.0+0x7b>
     pte = walkpgdir(pgdir, (char*)a, 0);
-801068eb:	31 c9                	xor    %ecx,%ecx
-801068ed:	89 fa                	mov    %edi,%edx
-801068ef:	89 f0                	mov    %esi,%eax
-801068f1:	e8 aa fe ff ff       	call   801067a0 <walkpgdir>
-801068f6:	89 c3                	mov    %eax,%ebx
+80106c7b:	31 c9                	xor    %ecx,%ecx
+80106c7d:	89 fa                	mov    %edi,%edx
+80106c7f:	89 f0                	mov    %esi,%eax
+80106c81:	e8 aa fe ff ff       	call   80106b30 <walkpgdir>
+80106c86:	89 c3                	mov    %eax,%ebx
     if(!pte)
-801068f8:	85 c0                	test   %eax,%eax
-801068fa:	74 44                	je     80106940 <deallocuvm.part.0+0x90>
+80106c88:	85 c0                	test   %eax,%eax
+80106c8a:	74 44                	je     80106cd0 <deallocuvm.part.0+0x90>
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
     else if((*pte & PTE_P) != 0){
-801068fc:	8b 00                	mov    (%eax),%eax
-801068fe:	a8 01                	test   $0x1,%al
-80106900:	74 de                	je     801068e0 <deallocuvm.part.0+0x30>
+80106c8c:	8b 00                	mov    (%eax),%eax
+80106c8e:	a8 01                	test   $0x1,%al
+80106c90:	74 de                	je     80106c70 <deallocuvm.part.0+0x30>
       pa = PTE_ADDR(*pte);
       if(pa == 0)
-80106902:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80106907:	74 47                	je     80106950 <deallocuvm.part.0+0xa0>
+80106c92:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106c97:	74 47                	je     80106ce0 <deallocuvm.part.0+0xa0>
         panic("kfree");
       char *v = P2V(pa);
       kfree(v);
-80106909:	83 ec 0c             	sub    $0xc,%esp
+80106c99:	83 ec 0c             	sub    $0xc,%esp
       char *v = P2V(pa);
-8010690c:	05 00 00 00 80       	add    $0x80000000,%eax
-80106911:	81 c7 00 10 00 00    	add    $0x1000,%edi
+80106c9c:	05 00 00 00 80       	add    $0x80000000,%eax
+80106ca1:	81 c7 00 10 00 00    	add    $0x1000,%edi
       kfree(v);
-80106917:	50                   	push   %eax
-80106918:	e8 53 bb ff ff       	call   80102470 <kfree>
+80106ca7:	50                   	push   %eax
+80106ca8:	e8 c3 b7 ff ff       	call   80102470 <kfree>
       *pte = 0;
-8010691d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-80106923:	83 c4 10             	add    $0x10,%esp
+80106cad:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80106cb3:	83 c4 10             	add    $0x10,%esp
   for(; a  < oldsz; a += PGSIZE){
-80106926:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
-80106929:	77 c0                	ja     801068eb <deallocuvm.part.0+0x3b>
+80106cb6:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80106cb9:	77 c0                	ja     80106c7b <deallocuvm.part.0+0x3b>
     }
   }
   return newsz;
 }
-8010692b:	8b 45 e0             	mov    -0x20(%ebp),%eax
-8010692e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106931:	5b                   	pop    %ebx
-80106932:	5e                   	pop    %esi
-80106933:	5f                   	pop    %edi
-80106934:	5d                   	pop    %ebp
-80106935:	c3                   	ret    
-80106936:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010693d:	8d 76 00             	lea    0x0(%esi),%esi
+80106cbb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106cbe:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106cc1:	5b                   	pop    %ebx
+80106cc2:	5e                   	pop    %esi
+80106cc3:	5f                   	pop    %edi
+80106cc4:	5d                   	pop    %ebp
+80106cc5:	c3                   	ret    
+80106cc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106ccd:	8d 76 00             	lea    0x0(%esi),%esi
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
-80106940:	89 fa                	mov    %edi,%edx
-80106942:	81 e2 00 00 c0 ff    	and    $0xffc00000,%edx
-80106948:	8d ba 00 00 40 00    	lea    0x400000(%edx),%edi
-8010694e:	eb 96                	jmp    801068e6 <deallocuvm.part.0+0x36>
+80106cd0:	89 fa                	mov    %edi,%edx
+80106cd2:	81 e2 00 00 c0 ff    	and    $0xffc00000,%edx
+80106cd8:	8d ba 00 00 40 00    	lea    0x400000(%edx),%edi
+80106cde:	eb 96                	jmp    80106c76 <deallocuvm.part.0+0x36>
         panic("kfree");
-80106950:	83 ec 0c             	sub    $0xc,%esp
-80106953:	68 46 73 10 80       	push   $0x80107346
-80106958:	e8 33 9a ff ff       	call   80100390 <panic>
-8010695d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80106960 <seginit>:
-{
-80106960:	f3 0f 1e fb          	endbr32 
-80106964:	55                   	push   %ebp
-80106965:	89 e5                	mov    %esp,%ebp
-80106967:	83 ec 18             	sub    $0x18,%esp
+80106ce0:	83 ec 0c             	sub    $0xc,%esp
+80106ce3:	68 e6 76 10 80       	push   $0x801076e6
+80106ce8:	e8 a3 96 ff ff       	call   80100390 <panic>
+80106ced:	8d 76 00             	lea    0x0(%esi),%esi
+
+80106cf0 <seginit>:
+{
+80106cf0:	f3 0f 1e fb          	endbr32 
+80106cf4:	55                   	push   %ebp
+80106cf5:	89 e5                	mov    %esp,%ebp
+80106cf7:	83 ec 18             	sub    $0x18,%esp
   c = &cpus[cpuid()];
-8010696a:	e8 d1 cf ff ff       	call   80103940 <cpuid>
+80106cfa:	e8 41 cc ff ff       	call   80103940 <cpuid>
   pd[0] = size-1;
-8010696f:	ba 2f 00 00 00       	mov    $0x2f,%edx
-80106974:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
-8010697a:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
+80106cff:	ba 2f 00 00 00       	mov    $0x2f,%edx
+80106d04:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
+80106d0a:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-8010697e:	c7 80 f8 27 11 80 ff 	movl   $0xffff,-0x7feed808(%eax)
-80106985:	ff 00 00 
-80106988:	c7 80 fc 27 11 80 00 	movl   $0xcf9a00,-0x7feed804(%eax)
-8010698f:	9a cf 00 
+80106d0e:	c7 80 f8 27 11 80 ff 	movl   $0xffff,-0x7feed808(%eax)
+80106d15:	ff 00 00 
+80106d18:	c7 80 fc 27 11 80 00 	movl   $0xcf9a00,-0x7feed804(%eax)
+80106d1f:	9a cf 00 
   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-80106992:	c7 80 00 28 11 80 ff 	movl   $0xffff,-0x7feed800(%eax)
-80106999:	ff 00 00 
-8010699c:	c7 80 04 28 11 80 00 	movl   $0xcf9200,-0x7feed7fc(%eax)
-801069a3:	92 cf 00 
+80106d22:	c7 80 00 28 11 80 ff 	movl   $0xffff,-0x7feed800(%eax)
+80106d29:	ff 00 00 
+80106d2c:	c7 80 04 28 11 80 00 	movl   $0xcf9200,-0x7feed7fc(%eax)
+80106d33:	92 cf 00 
   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-801069a6:	c7 80 08 28 11 80 ff 	movl   $0xffff,-0x7feed7f8(%eax)
-801069ad:	ff 00 00 
-801069b0:	c7 80 0c 28 11 80 00 	movl   $0xcffa00,-0x7feed7f4(%eax)
-801069b7:	fa cf 00 
+80106d36:	c7 80 08 28 11 80 ff 	movl   $0xffff,-0x7feed7f8(%eax)
+80106d3d:	ff 00 00 
+80106d40:	c7 80 0c 28 11 80 00 	movl   $0xcffa00,-0x7feed7f4(%eax)
+80106d47:	fa cf 00 
   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-801069ba:	c7 80 10 28 11 80 ff 	movl   $0xffff,-0x7feed7f0(%eax)
-801069c1:	ff 00 00 
-801069c4:	c7 80 14 28 11 80 00 	movl   $0xcff200,-0x7feed7ec(%eax)
-801069cb:	f2 cf 00 
+80106d4a:	c7 80 10 28 11 80 ff 	movl   $0xffff,-0x7feed7f0(%eax)
+80106d51:	ff 00 00 
+80106d54:	c7 80 14 28 11 80 00 	movl   $0xcff200,-0x7feed7ec(%eax)
+80106d5b:	f2 cf 00 
   lgdt(c->gdt, sizeof(c->gdt));
-801069ce:	05 f0 27 11 80       	add    $0x801127f0,%eax
+80106d5e:	05 f0 27 11 80       	add    $0x801127f0,%eax
   pd[1] = (uint)p;
-801069d3:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
+80106d63:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
   pd[2] = (uint)p >> 16;
-801069d7:	c1 e8 10             	shr    $0x10,%eax
-801069da:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+80106d67:	c1 e8 10             	shr    $0x10,%eax
+80106d6a:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
   asm volatile("lgdt (%0)" : : "r" (pd));
-801069de:	8d 45 f2             	lea    -0xe(%ebp),%eax
-801069e1:	0f 01 10             	lgdtl  (%eax)
+80106d6e:	8d 45 f2             	lea    -0xe(%ebp),%eax
+80106d71:	0f 01 10             	lgdtl  (%eax)
 }
-801069e4:	c9                   	leave  
-801069e5:	c3                   	ret    
-801069e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801069ed:	8d 76 00             	lea    0x0(%esi),%esi
+80106d74:	c9                   	leave  
+80106d75:	c3                   	ret    
+80106d76:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106d7d:	8d 76 00             	lea    0x0(%esi),%esi
 
-801069f0 <switchkvm>:
+80106d80 <switchkvm>:
 {
-801069f0:	f3 0f 1e fb          	endbr32 
+80106d80:	f3 0f 1e fb          	endbr32 
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-801069f4:	a1 a4 54 11 80       	mov    0x801154a4,%eax
-801069f9:	05 00 00 00 80       	add    $0x80000000,%eax
+80106d84:	a1 a4 55 11 80       	mov    0x801155a4,%eax
+80106d89:	05 00 00 00 80       	add    $0x80000000,%eax
 }
 
 static inline void
 lcr3(uint val)
 {
   asm volatile("movl %0,%%cr3" : : "r" (val));
-801069fe:	0f 22 d8             	mov    %eax,%cr3
+80106d8e:	0f 22 d8             	mov    %eax,%cr3
 }
-80106a01:	c3                   	ret    
-80106a02:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106a09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80106a10 <switchuvm>:
-{
-80106a10:	f3 0f 1e fb          	endbr32 
-80106a14:	55                   	push   %ebp
-80106a15:	89 e5                	mov    %esp,%ebp
-80106a17:	57                   	push   %edi
-80106a18:	56                   	push   %esi
-80106a19:	53                   	push   %ebx
-80106a1a:	83 ec 1c             	sub    $0x1c,%esp
-80106a1d:	8b 75 08             	mov    0x8(%ebp),%esi
+80106d91:	c3                   	ret    
+80106d92:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106d99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106da0 <switchuvm>:
+{
+80106da0:	f3 0f 1e fb          	endbr32 
+80106da4:	55                   	push   %ebp
+80106da5:	89 e5                	mov    %esp,%ebp
+80106da7:	57                   	push   %edi
+80106da8:	56                   	push   %esi
+80106da9:	53                   	push   %ebx
+80106daa:	83 ec 1c             	sub    $0x1c,%esp
+80106dad:	8b 75 08             	mov    0x8(%ebp),%esi
   if(p == 0)
-80106a20:	85 f6                	test   %esi,%esi
-80106a22:	0f 84 cb 00 00 00    	je     80106af3 <switchuvm+0xe3>
+80106db0:	85 f6                	test   %esi,%esi
+80106db2:	0f 84 cb 00 00 00    	je     80106e83 <switchuvm+0xe3>
   if(p->kstack == 0)
-80106a28:	8b 46 08             	mov    0x8(%esi),%eax
-80106a2b:	85 c0                	test   %eax,%eax
-80106a2d:	0f 84 da 00 00 00    	je     80106b0d <switchuvm+0xfd>
+80106db8:	8b 46 08             	mov    0x8(%esi),%eax
+80106dbb:	85 c0                	test   %eax,%eax
+80106dbd:	0f 84 da 00 00 00    	je     80106e9d <switchuvm+0xfd>
   if(p->pgdir == 0)
-80106a33:	8b 46 04             	mov    0x4(%esi),%eax
-80106a36:	85 c0                	test   %eax,%eax
-80106a38:	0f 84 c2 00 00 00    	je     80106b00 <switchuvm+0xf0>
+80106dc3:	8b 46 04             	mov    0x4(%esi),%eax
+80106dc6:	85 c0                	test   %eax,%eax
+80106dc8:	0f 84 c2 00 00 00    	je     80106e90 <switchuvm+0xf0>
   pushcli();
-80106a3e:	e8 1d da ff ff       	call   80104460 <pushcli>
+80106dce:	e8 fd d9 ff ff       	call   801047d0 <pushcli>
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106a43:	e8 88 ce ff ff       	call   801038d0 <mycpu>
-80106a48:	89 c3                	mov    %eax,%ebx
-80106a4a:	e8 81 ce ff ff       	call   801038d0 <mycpu>
-80106a4f:	89 c7                	mov    %eax,%edi
-80106a51:	e8 7a ce ff ff       	call   801038d0 <mycpu>
-80106a56:	83 c7 08             	add    $0x8,%edi
-80106a59:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106a5c:	e8 6f ce ff ff       	call   801038d0 <mycpu>
-80106a61:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80106a64:	ba 67 00 00 00       	mov    $0x67,%edx
-80106a69:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
-80106a70:	83 c0 08             	add    $0x8,%eax
-80106a73:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
+80106dd3:	e8 f8 ca ff ff       	call   801038d0 <mycpu>
+80106dd8:	89 c3                	mov    %eax,%ebx
+80106dda:	e8 f1 ca ff ff       	call   801038d0 <mycpu>
+80106ddf:	89 c7                	mov    %eax,%edi
+80106de1:	e8 ea ca ff ff       	call   801038d0 <mycpu>
+80106de6:	83 c7 08             	add    $0x8,%edi
+80106de9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106dec:	e8 df ca ff ff       	call   801038d0 <mycpu>
+80106df1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80106df4:	ba 67 00 00 00       	mov    $0x67,%edx
+80106df9:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
+80106e00:	83 c0 08             	add    $0x8,%eax
+80106e03:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106a7a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
+80106e0a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106a7f:	83 c1 08             	add    $0x8,%ecx
-80106a82:	c1 e8 18             	shr    $0x18,%eax
-80106a85:	c1 e9 10             	shr    $0x10,%ecx
-80106a88:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
-80106a8e:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
-80106a94:	b9 99 40 00 00       	mov    $0x4099,%ecx
-80106a99:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
+80106e0f:	83 c1 08             	add    $0x8,%ecx
+80106e12:	c1 e8 18             	shr    $0x18,%eax
+80106e15:	c1 e9 10             	shr    $0x10,%ecx
+80106e18:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
+80106e1e:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
+80106e24:	b9 99 40 00 00       	mov    $0x4099,%ecx
+80106e29:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106aa0:	bb 10 00 00 00       	mov    $0x10,%ebx
+80106e30:	bb 10 00 00 00       	mov    $0x10,%ebx
   mycpu()->gdt[SEG_TSS].s = 0;
-80106aa5:	e8 26 ce ff ff       	call   801038d0 <mycpu>
-80106aaa:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
+80106e35:	e8 96 ca ff ff       	call   801038d0 <mycpu>
+80106e3a:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106ab1:	e8 1a ce ff ff       	call   801038d0 <mycpu>
-80106ab6:	66 89 58 10          	mov    %bx,0x10(%eax)
+80106e41:	e8 8a ca ff ff       	call   801038d0 <mycpu>
+80106e46:	66 89 58 10          	mov    %bx,0x10(%eax)
   mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
-80106aba:	8b 5e 08             	mov    0x8(%esi),%ebx
-80106abd:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80106ac3:	e8 08 ce ff ff       	call   801038d0 <mycpu>
-80106ac8:	89 58 0c             	mov    %ebx,0xc(%eax)
+80106e4a:	8b 5e 08             	mov    0x8(%esi),%ebx
+80106e4d:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106e53:	e8 78 ca ff ff       	call   801038d0 <mycpu>
+80106e58:	89 58 0c             	mov    %ebx,0xc(%eax)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106acb:	e8 00 ce ff ff       	call   801038d0 <mycpu>
-80106ad0:	66 89 78 6e          	mov    %di,0x6e(%eax)
+80106e5b:	e8 70 ca ff ff       	call   801038d0 <mycpu>
+80106e60:	66 89 78 6e          	mov    %di,0x6e(%eax)
   asm volatile("ltr %0" : : "r" (sel));
-80106ad4:	b8 28 00 00 00       	mov    $0x28,%eax
-80106ad9:	0f 00 d8             	ltr    %ax
+80106e64:	b8 28 00 00 00       	mov    $0x28,%eax
+80106e69:	0f 00 d8             	ltr    %ax
   lcr3(V2P(p->pgdir));  // switch to process's address space
-80106adc:	8b 46 04             	mov    0x4(%esi),%eax
-80106adf:	05 00 00 00 80       	add    $0x80000000,%eax
+80106e6c:	8b 46 04             	mov    0x4(%esi),%eax
+80106e6f:	05 00 00 00 80       	add    $0x80000000,%eax
   asm volatile("movl %0,%%cr3" : : "r" (val));
-80106ae4:	0f 22 d8             	mov    %eax,%cr3
+80106e74:	0f 22 d8             	mov    %eax,%cr3
 }
-80106ae7:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106aea:	5b                   	pop    %ebx
-80106aeb:	5e                   	pop    %esi
-80106aec:	5f                   	pop    %edi
-80106aed:	5d                   	pop    %ebp
+80106e77:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106e7a:	5b                   	pop    %ebx
+80106e7b:	5e                   	pop    %esi
+80106e7c:	5f                   	pop    %edi
+80106e7d:	5d                   	pop    %ebp
   popcli();
-80106aee:	e9 bd d9 ff ff       	jmp    801044b0 <popcli>
+80106e7e:	e9 9d d9 ff ff       	jmp    80104820 <popcli>
     panic("switchuvm: no process");
-80106af3:	83 ec 0c             	sub    $0xc,%esp
-80106af6:	68 8e 79 10 80       	push   $0x8010798e
-80106afb:	e8 90 98 ff ff       	call   80100390 <panic>
+80106e83:	83 ec 0c             	sub    $0xc,%esp
+80106e86:	68 3a 7d 10 80       	push   $0x80107d3a
+80106e8b:	e8 00 95 ff ff       	call   80100390 <panic>
     panic("switchuvm: no pgdir");
-80106b00:	83 ec 0c             	sub    $0xc,%esp
-80106b03:	68 b9 79 10 80       	push   $0x801079b9
-80106b08:	e8 83 98 ff ff       	call   80100390 <panic>
+80106e90:	83 ec 0c             	sub    $0xc,%esp
+80106e93:	68 65 7d 10 80       	push   $0x80107d65
+80106e98:	e8 f3 94 ff ff       	call   80100390 <panic>
     panic("switchuvm: no kstack");
-80106b0d:	83 ec 0c             	sub    $0xc,%esp
-80106b10:	68 a4 79 10 80       	push   $0x801079a4
-80106b15:	e8 76 98 ff ff       	call   80100390 <panic>
-80106b1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80106b20 <inituvm>:
-{
-80106b20:	f3 0f 1e fb          	endbr32 
-80106b24:	55                   	push   %ebp
-80106b25:	89 e5                	mov    %esp,%ebp
-80106b27:	57                   	push   %edi
-80106b28:	56                   	push   %esi
-80106b29:	53                   	push   %ebx
-80106b2a:	83 ec 1c             	sub    $0x1c,%esp
-80106b2d:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106b30:	8b 75 10             	mov    0x10(%ebp),%esi
-80106b33:	8b 7d 08             	mov    0x8(%ebp),%edi
-80106b36:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106e9d:	83 ec 0c             	sub    $0xc,%esp
+80106ea0:	68 50 7d 10 80       	push   $0x80107d50
+80106ea5:	e8 e6 94 ff ff       	call   80100390 <panic>
+80106eaa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80106eb0 <inituvm>:
+{
+80106eb0:	f3 0f 1e fb          	endbr32 
+80106eb4:	55                   	push   %ebp
+80106eb5:	89 e5                	mov    %esp,%ebp
+80106eb7:	57                   	push   %edi
+80106eb8:	56                   	push   %esi
+80106eb9:	53                   	push   %ebx
+80106eba:	83 ec 1c             	sub    $0x1c,%esp
+80106ebd:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106ec0:	8b 75 10             	mov    0x10(%ebp),%esi
+80106ec3:	8b 7d 08             	mov    0x8(%ebp),%edi
+80106ec6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(sz >= PGSIZE)
-80106b39:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
-80106b3f:	77 4b                	ja     80106b8c <inituvm+0x6c>
+80106ec9:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+80106ecf:	77 4b                	ja     80106f1c <inituvm+0x6c>
   mem = kalloc();
-80106b41:	e8 ea ba ff ff       	call   80102630 <kalloc>
+80106ed1:	e8 5a b7 ff ff       	call   80102630 <kalloc>
   memset(mem, 0, PGSIZE);
-80106b46:	83 ec 04             	sub    $0x4,%esp
-80106b49:	68 00 10 00 00       	push   $0x1000
+80106ed6:	83 ec 04             	sub    $0x4,%esp
+80106ed9:	68 00 10 00 00       	push   $0x1000
   mem = kalloc();
-80106b4e:	89 c3                	mov    %eax,%ebx
+80106ede:	89 c3                	mov    %eax,%ebx
   memset(mem, 0, PGSIZE);
-80106b50:	6a 00                	push   $0x0
-80106b52:	50                   	push   %eax
-80106b53:	e8 18 db ff ff       	call   80104670 <memset>
+80106ee0:	6a 00                	push   $0x0
+80106ee2:	50                   	push   %eax
+80106ee3:	e8 f8 da ff ff       	call   801049e0 <memset>
   mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
-80106b58:	58                   	pop    %eax
-80106b59:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106b5f:	5a                   	pop    %edx
-80106b60:	6a 06                	push   $0x6
-80106b62:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106b67:	31 d2                	xor    %edx,%edx
-80106b69:	50                   	push   %eax
-80106b6a:	89 f8                	mov    %edi,%eax
-80106b6c:	e8 af fc ff ff       	call   80106820 <mappages>
+80106ee8:	58                   	pop    %eax
+80106ee9:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106eef:	5a                   	pop    %edx
+80106ef0:	6a 06                	push   $0x6
+80106ef2:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106ef7:	31 d2                	xor    %edx,%edx
+80106ef9:	50                   	push   %eax
+80106efa:	89 f8                	mov    %edi,%eax
+80106efc:	e8 af fc ff ff       	call   80106bb0 <mappages>
   memmove(mem, init, sz);
-80106b71:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106b74:	89 75 10             	mov    %esi,0x10(%ebp)
-80106b77:	83 c4 10             	add    $0x10,%esp
-80106b7a:	89 5d 08             	mov    %ebx,0x8(%ebp)
-80106b7d:	89 45 0c             	mov    %eax,0xc(%ebp)
-}
-80106b80:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106b83:	5b                   	pop    %ebx
-80106b84:	5e                   	pop    %esi
-80106b85:	5f                   	pop    %edi
-80106b86:	5d                   	pop    %ebp
+80106f01:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106f04:	89 75 10             	mov    %esi,0x10(%ebp)
+80106f07:	83 c4 10             	add    $0x10,%esp
+80106f0a:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80106f0d:	89 45 0c             	mov    %eax,0xc(%ebp)
+}
+80106f10:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106f13:	5b                   	pop    %ebx
+80106f14:	5e                   	pop    %esi
+80106f15:	5f                   	pop    %edi
+80106f16:	5d                   	pop    %ebp
   memmove(mem, init, sz);
-80106b87:	e9 84 db ff ff       	jmp    80104710 <memmove>
+80106f17:	e9 64 db ff ff       	jmp    80104a80 <memmove>
     panic("inituvm: more than a page");
-80106b8c:	83 ec 0c             	sub    $0xc,%esp
-80106b8f:	68 cd 79 10 80       	push   $0x801079cd
-80106b94:	e8 f7 97 ff ff       	call   80100390 <panic>
-80106b99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80106ba0 <loaduvm>:
-{
-80106ba0:	f3 0f 1e fb          	endbr32 
-80106ba4:	55                   	push   %ebp
-80106ba5:	89 e5                	mov    %esp,%ebp
-80106ba7:	57                   	push   %edi
-80106ba8:	56                   	push   %esi
-80106ba9:	53                   	push   %ebx
-80106baa:	83 ec 1c             	sub    $0x1c,%esp
-80106bad:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106bb0:	8b 75 18             	mov    0x18(%ebp),%esi
+80106f1c:	83 ec 0c             	sub    $0xc,%esp
+80106f1f:	68 79 7d 10 80       	push   $0x80107d79
+80106f24:	e8 67 94 ff ff       	call   80100390 <panic>
+80106f29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106f30 <loaduvm>:
+{
+80106f30:	f3 0f 1e fb          	endbr32 
+80106f34:	55                   	push   %ebp
+80106f35:	89 e5                	mov    %esp,%ebp
+80106f37:	57                   	push   %edi
+80106f38:	56                   	push   %esi
+80106f39:	53                   	push   %ebx
+80106f3a:	83 ec 1c             	sub    $0x1c,%esp
+80106f3d:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106f40:	8b 75 18             	mov    0x18(%ebp),%esi
   if((uint) addr % PGSIZE != 0)
-80106bb3:	a9 ff 0f 00 00       	test   $0xfff,%eax
-80106bb8:	0f 85 99 00 00 00    	jne    80106c57 <loaduvm+0xb7>
+80106f43:	a9 ff 0f 00 00       	test   $0xfff,%eax
+80106f48:	0f 85 99 00 00 00    	jne    80106fe7 <loaduvm+0xb7>
   for(i = 0; i < sz; i += PGSIZE){
-80106bbe:	01 f0                	add    %esi,%eax
-80106bc0:	89 f3                	mov    %esi,%ebx
-80106bc2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106f4e:	01 f0                	add    %esi,%eax
+80106f50:	89 f3                	mov    %esi,%ebx
+80106f52:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106bc5:	8b 45 14             	mov    0x14(%ebp),%eax
-80106bc8:	01 f0                	add    %esi,%eax
-80106bca:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80106f55:	8b 45 14             	mov    0x14(%ebp),%eax
+80106f58:	01 f0                	add    %esi,%eax
+80106f5a:	89 45 e0             	mov    %eax,-0x20(%ebp)
   for(i = 0; i < sz; i += PGSIZE){
-80106bcd:	85 f6                	test   %esi,%esi
-80106bcf:	75 15                	jne    80106be6 <loaduvm+0x46>
-80106bd1:	eb 6d                	jmp    80106c40 <loaduvm+0xa0>
-80106bd3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106bd7:	90                   	nop
-80106bd8:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
-80106bde:	89 f0                	mov    %esi,%eax
-80106be0:	29 d8                	sub    %ebx,%eax
-80106be2:	39 c6                	cmp    %eax,%esi
-80106be4:	76 5a                	jbe    80106c40 <loaduvm+0xa0>
+80106f5d:	85 f6                	test   %esi,%esi
+80106f5f:	75 15                	jne    80106f76 <loaduvm+0x46>
+80106f61:	eb 6d                	jmp    80106fd0 <loaduvm+0xa0>
+80106f63:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106f67:	90                   	nop
+80106f68:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
+80106f6e:	89 f0                	mov    %esi,%eax
+80106f70:	29 d8                	sub    %ebx,%eax
+80106f72:	39 c6                	cmp    %eax,%esi
+80106f74:	76 5a                	jbe    80106fd0 <loaduvm+0xa0>
     if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
-80106be6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80106be9:	8b 45 08             	mov    0x8(%ebp),%eax
-80106bec:	31 c9                	xor    %ecx,%ecx
-80106bee:	29 da                	sub    %ebx,%edx
-80106bf0:	e8 ab fb ff ff       	call   801067a0 <walkpgdir>
-80106bf5:	85 c0                	test   %eax,%eax
-80106bf7:	74 51                	je     80106c4a <loaduvm+0xaa>
+80106f76:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80106f79:	8b 45 08             	mov    0x8(%ebp),%eax
+80106f7c:	31 c9                	xor    %ecx,%ecx
+80106f7e:	29 da                	sub    %ebx,%edx
+80106f80:	e8 ab fb ff ff       	call   80106b30 <walkpgdir>
+80106f85:	85 c0                	test   %eax,%eax
+80106f87:	74 51                	je     80106fda <loaduvm+0xaa>
     pa = PTE_ADDR(*pte);
-80106bf9:	8b 00                	mov    (%eax),%eax
+80106f89:	8b 00                	mov    (%eax),%eax
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106bfb:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+80106f8b:	8b 4d e0             	mov    -0x20(%ebp),%ecx
     if(sz - i < PGSIZE)
-80106bfe:	bf 00 10 00 00       	mov    $0x1000,%edi
+80106f8e:	bf 00 10 00 00       	mov    $0x1000,%edi
     pa = PTE_ADDR(*pte);
-80106c03:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106f93:	25 00 f0 ff ff       	and    $0xfffff000,%eax
     if(sz - i < PGSIZE)
-80106c08:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
-80106c0e:	0f 46 fb             	cmovbe %ebx,%edi
+80106f98:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
+80106f9e:	0f 46 fb             	cmovbe %ebx,%edi
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106c11:	29 d9                	sub    %ebx,%ecx
-80106c13:	05 00 00 00 80       	add    $0x80000000,%eax
-80106c18:	57                   	push   %edi
-80106c19:	51                   	push   %ecx
-80106c1a:	50                   	push   %eax
-80106c1b:	ff 75 10             	pushl  0x10(%ebp)
-80106c1e:	e8 3d ae ff ff       	call   80101a60 <readi>
-80106c23:	83 c4 10             	add    $0x10,%esp
-80106c26:	39 f8                	cmp    %edi,%eax
-80106c28:	74 ae                	je     80106bd8 <loaduvm+0x38>
+80106fa1:	29 d9                	sub    %ebx,%ecx
+80106fa3:	05 00 00 00 80       	add    $0x80000000,%eax
+80106fa8:	57                   	push   %edi
+80106fa9:	51                   	push   %ecx
+80106faa:	50                   	push   %eax
+80106fab:	ff 75 10             	pushl  0x10(%ebp)
+80106fae:	e8 ad aa ff ff       	call   80101a60 <readi>
+80106fb3:	83 c4 10             	add    $0x10,%esp
+80106fb6:	39 f8                	cmp    %edi,%eax
+80106fb8:	74 ae                	je     80106f68 <loaduvm+0x38>
 }
-80106c2a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106fba:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-80106c2d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106fbd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80106c32:	5b                   	pop    %ebx
-80106c33:	5e                   	pop    %esi
-80106c34:	5f                   	pop    %edi
-80106c35:	5d                   	pop    %ebp
-80106c36:	c3                   	ret    
-80106c37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106c3e:	66 90                	xchg   %ax,%ax
-80106c40:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106fc2:	5b                   	pop    %ebx
+80106fc3:	5e                   	pop    %esi
+80106fc4:	5f                   	pop    %edi
+80106fc5:	5d                   	pop    %ebp
+80106fc6:	c3                   	ret    
+80106fc7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106fce:	66 90                	xchg   %ax,%ax
+80106fd0:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-80106c43:	31 c0                	xor    %eax,%eax
+80106fd3:	31 c0                	xor    %eax,%eax
 }
-80106c45:	5b                   	pop    %ebx
-80106c46:	5e                   	pop    %esi
-80106c47:	5f                   	pop    %edi
-80106c48:	5d                   	pop    %ebp
-80106c49:	c3                   	ret    
+80106fd5:	5b                   	pop    %ebx
+80106fd6:	5e                   	pop    %esi
+80106fd7:	5f                   	pop    %edi
+80106fd8:	5d                   	pop    %ebp
+80106fd9:	c3                   	ret    
       panic("loaduvm: address should exist");
-80106c4a:	83 ec 0c             	sub    $0xc,%esp
-80106c4d:	68 e7 79 10 80       	push   $0x801079e7
-80106c52:	e8 39 97 ff ff       	call   80100390 <panic>
+80106fda:	83 ec 0c             	sub    $0xc,%esp
+80106fdd:	68 93 7d 10 80       	push   $0x80107d93
+80106fe2:	e8 a9 93 ff ff       	call   80100390 <panic>
     panic("loaduvm: addr must be page aligned");
-80106c57:	83 ec 0c             	sub    $0xc,%esp
-80106c5a:	68 88 7a 10 80       	push   $0x80107a88
-80106c5f:	e8 2c 97 ff ff       	call   80100390 <panic>
-80106c64:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106c6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106c6f:	90                   	nop
-
-80106c70 <allocuvm>:
-{
-80106c70:	f3 0f 1e fb          	endbr32 
-80106c74:	55                   	push   %ebp
-80106c75:	89 e5                	mov    %esp,%ebp
-80106c77:	57                   	push   %edi
-80106c78:	56                   	push   %esi
-80106c79:	53                   	push   %ebx
-80106c7a:	83 ec 1c             	sub    $0x1c,%esp
+80106fe7:	83 ec 0c             	sub    $0xc,%esp
+80106fea:	68 34 7e 10 80       	push   $0x80107e34
+80106fef:	e8 9c 93 ff ff       	call   80100390 <panic>
+80106ff4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106ffb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106fff:	90                   	nop
+
+80107000 <allocuvm>:
+{
+80107000:	f3 0f 1e fb          	endbr32 
+80107004:	55                   	push   %ebp
+80107005:	89 e5                	mov    %esp,%ebp
+80107007:	57                   	push   %edi
+80107008:	56                   	push   %esi
+80107009:	53                   	push   %ebx
+8010700a:	83 ec 1c             	sub    $0x1c,%esp
   if(newsz >= KERNBASE)
-80106c7d:	8b 45 10             	mov    0x10(%ebp),%eax
+8010700d:	8b 45 10             	mov    0x10(%ebp),%eax
 {
-80106c80:	8b 7d 08             	mov    0x8(%ebp),%edi
+80107010:	8b 7d 08             	mov    0x8(%ebp),%edi
   if(newsz >= KERNBASE)
-80106c83:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106c86:	85 c0                	test   %eax,%eax
-80106c88:	0f 88 b2 00 00 00    	js     80106d40 <allocuvm+0xd0>
+80107013:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107016:	85 c0                	test   %eax,%eax
+80107018:	0f 88 b2 00 00 00    	js     801070d0 <allocuvm+0xd0>
   if(newsz < oldsz)
-80106c8e:	3b 45 0c             	cmp    0xc(%ebp),%eax
+8010701e:	3b 45 0c             	cmp    0xc(%ebp),%eax
     return oldsz;
-80106c91:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107021:	8b 45 0c             	mov    0xc(%ebp),%eax
   if(newsz < oldsz)
-80106c94:	0f 82 96 00 00 00    	jb     80106d30 <allocuvm+0xc0>
+80107024:	0f 82 96 00 00 00    	jb     801070c0 <allocuvm+0xc0>
   a = PGROUNDUP(oldsz);
-80106c9a:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
-80106ca0:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+8010702a:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
+80107030:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
   for(; a < newsz; a += PGSIZE){
-80106ca6:	39 75 10             	cmp    %esi,0x10(%ebp)
-80106ca9:	77 40                	ja     80106ceb <allocuvm+0x7b>
-80106cab:	e9 83 00 00 00       	jmp    80106d33 <allocuvm+0xc3>
+80107036:	39 75 10             	cmp    %esi,0x10(%ebp)
+80107039:	77 40                	ja     8010707b <allocuvm+0x7b>
+8010703b:	e9 83 00 00 00       	jmp    801070c3 <allocuvm+0xc3>
     memset(mem, 0, PGSIZE);
-80106cb0:	83 ec 04             	sub    $0x4,%esp
-80106cb3:	68 00 10 00 00       	push   $0x1000
-80106cb8:	6a 00                	push   $0x0
-80106cba:	50                   	push   %eax
-80106cbb:	e8 b0 d9 ff ff       	call   80104670 <memset>
+80107040:	83 ec 04             	sub    $0x4,%esp
+80107043:	68 00 10 00 00       	push   $0x1000
+80107048:	6a 00                	push   $0x0
+8010704a:	50                   	push   %eax
+8010704b:	e8 90 d9 ff ff       	call   801049e0 <memset>
     if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
-80106cc0:	58                   	pop    %eax
-80106cc1:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106cc7:	5a                   	pop    %edx
-80106cc8:	6a 06                	push   $0x6
-80106cca:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106ccf:	89 f2                	mov    %esi,%edx
-80106cd1:	50                   	push   %eax
-80106cd2:	89 f8                	mov    %edi,%eax
-80106cd4:	e8 47 fb ff ff       	call   80106820 <mappages>
-80106cd9:	83 c4 10             	add    $0x10,%esp
-80106cdc:	85 c0                	test   %eax,%eax
-80106cde:	78 78                	js     80106d58 <allocuvm+0xe8>
+80107050:	58                   	pop    %eax
+80107051:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80107057:	5a                   	pop    %edx
+80107058:	6a 06                	push   $0x6
+8010705a:	b9 00 10 00 00       	mov    $0x1000,%ecx
+8010705f:	89 f2                	mov    %esi,%edx
+80107061:	50                   	push   %eax
+80107062:	89 f8                	mov    %edi,%eax
+80107064:	e8 47 fb ff ff       	call   80106bb0 <mappages>
+80107069:	83 c4 10             	add    $0x10,%esp
+8010706c:	85 c0                	test   %eax,%eax
+8010706e:	78 78                	js     801070e8 <allocuvm+0xe8>
   for(; a < newsz; a += PGSIZE){
-80106ce0:	81 c6 00 10 00 00    	add    $0x1000,%esi
-80106ce6:	39 75 10             	cmp    %esi,0x10(%ebp)
-80106ce9:	76 48                	jbe    80106d33 <allocuvm+0xc3>
+80107070:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80107076:	39 75 10             	cmp    %esi,0x10(%ebp)
+80107079:	76 48                	jbe    801070c3 <allocuvm+0xc3>
     mem = kalloc();
-80106ceb:	e8 40 b9 ff ff       	call   80102630 <kalloc>
-80106cf0:	89 c3                	mov    %eax,%ebx
+8010707b:	e8 b0 b5 ff ff       	call   80102630 <kalloc>
+80107080:	89 c3                	mov    %eax,%ebx
     if(mem == 0){
-80106cf2:	85 c0                	test   %eax,%eax
-80106cf4:	75 ba                	jne    80106cb0 <allocuvm+0x40>
+80107082:	85 c0                	test   %eax,%eax
+80107084:	75 ba                	jne    80107040 <allocuvm+0x40>
       cprintf("allocuvm out of memory\n");
-80106cf6:	83 ec 0c             	sub    $0xc,%esp
-80106cf9:	68 05 7a 10 80       	push   $0x80107a05
-80106cfe:	e8 ad 99 ff ff       	call   801006b0 <cprintf>
+80107086:	83 ec 0c             	sub    $0xc,%esp
+80107089:	68 b1 7d 10 80       	push   $0x80107db1
+8010708e:	e8 1d 96 ff ff       	call   801006b0 <cprintf>
   if(newsz >= oldsz)
-80106d03:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106d06:	83 c4 10             	add    $0x10,%esp
-80106d09:	39 45 10             	cmp    %eax,0x10(%ebp)
-80106d0c:	74 32                	je     80106d40 <allocuvm+0xd0>
-80106d0e:	8b 55 10             	mov    0x10(%ebp),%edx
-80106d11:	89 c1                	mov    %eax,%ecx
-80106d13:	89 f8                	mov    %edi,%eax
-80106d15:	e8 96 fb ff ff       	call   801068b0 <deallocuvm.part.0>
+80107093:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107096:	83 c4 10             	add    $0x10,%esp
+80107099:	39 45 10             	cmp    %eax,0x10(%ebp)
+8010709c:	74 32                	je     801070d0 <allocuvm+0xd0>
+8010709e:	8b 55 10             	mov    0x10(%ebp),%edx
+801070a1:	89 c1                	mov    %eax,%ecx
+801070a3:	89 f8                	mov    %edi,%eax
+801070a5:	e8 96 fb ff ff       	call   80106c40 <deallocuvm.part.0>
       return 0;
-80106d1a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+801070aa:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
 }
-80106d21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d24:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d27:	5b                   	pop    %ebx
-80106d28:	5e                   	pop    %esi
-80106d29:	5f                   	pop    %edi
-80106d2a:	5d                   	pop    %ebp
-80106d2b:	c3                   	ret    
-80106d2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801070b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801070b4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801070b7:	5b                   	pop    %ebx
+801070b8:	5e                   	pop    %esi
+801070b9:	5f                   	pop    %edi
+801070ba:	5d                   	pop    %ebp
+801070bb:	c3                   	ret    
+801070bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return oldsz;
-80106d30:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801070c0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 }
-80106d33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d36:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d39:	5b                   	pop    %ebx
-80106d3a:	5e                   	pop    %esi
-80106d3b:	5f                   	pop    %edi
-80106d3c:	5d                   	pop    %ebp
-80106d3d:	c3                   	ret    
-80106d3e:	66 90                	xchg   %ax,%ax
+801070c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801070c6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801070c9:	5b                   	pop    %ebx
+801070ca:	5e                   	pop    %esi
+801070cb:	5f                   	pop    %edi
+801070cc:	5d                   	pop    %ebp
+801070cd:	c3                   	ret    
+801070ce:	66 90                	xchg   %ax,%ax
     return 0;
-80106d40:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+801070d0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
 }
-80106d47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d4a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d4d:	5b                   	pop    %ebx
-80106d4e:	5e                   	pop    %esi
-80106d4f:	5f                   	pop    %edi
-80106d50:	5d                   	pop    %ebp
-80106d51:	c3                   	ret    
-80106d52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801070d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801070da:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801070dd:	5b                   	pop    %ebx
+801070de:	5e                   	pop    %esi
+801070df:	5f                   	pop    %edi
+801070e0:	5d                   	pop    %ebp
+801070e1:	c3                   	ret    
+801070e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       cprintf("allocuvm out of memory (2)\n");
-80106d58:	83 ec 0c             	sub    $0xc,%esp
-80106d5b:	68 1d 7a 10 80       	push   $0x80107a1d
-80106d60:	e8 4b 99 ff ff       	call   801006b0 <cprintf>
+801070e8:	83 ec 0c             	sub    $0xc,%esp
+801070eb:	68 c9 7d 10 80       	push   $0x80107dc9
+801070f0:	e8 bb 95 ff ff       	call   801006b0 <cprintf>
   if(newsz >= oldsz)
-80106d65:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106d68:	83 c4 10             	add    $0x10,%esp
-80106d6b:	39 45 10             	cmp    %eax,0x10(%ebp)
-80106d6e:	74 0c                	je     80106d7c <allocuvm+0x10c>
-80106d70:	8b 55 10             	mov    0x10(%ebp),%edx
-80106d73:	89 c1                	mov    %eax,%ecx
-80106d75:	89 f8                	mov    %edi,%eax
-80106d77:	e8 34 fb ff ff       	call   801068b0 <deallocuvm.part.0>
+801070f5:	8b 45 0c             	mov    0xc(%ebp),%eax
+801070f8:	83 c4 10             	add    $0x10,%esp
+801070fb:	39 45 10             	cmp    %eax,0x10(%ebp)
+801070fe:	74 0c                	je     8010710c <allocuvm+0x10c>
+80107100:	8b 55 10             	mov    0x10(%ebp),%edx
+80107103:	89 c1                	mov    %eax,%ecx
+80107105:	89 f8                	mov    %edi,%eax
+80107107:	e8 34 fb ff ff       	call   80106c40 <deallocuvm.part.0>
       kfree(mem);
-80106d7c:	83 ec 0c             	sub    $0xc,%esp
-80106d7f:	53                   	push   %ebx
-80106d80:	e8 eb b6 ff ff       	call   80102470 <kfree>
+8010710c:	83 ec 0c             	sub    $0xc,%esp
+8010710f:	53                   	push   %ebx
+80107110:	e8 5b b3 ff ff       	call   80102470 <kfree>
       return 0;
-80106d85:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-80106d8c:	83 c4 10             	add    $0x10,%esp
+80107115:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+8010711c:	83 c4 10             	add    $0x10,%esp
 }
-80106d8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d92:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d95:	5b                   	pop    %ebx
-80106d96:	5e                   	pop    %esi
-80106d97:	5f                   	pop    %edi
-80106d98:	5d                   	pop    %ebp
-80106d99:	c3                   	ret    
-80106d9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80106da0 <deallocuvm>:
-{
-80106da0:	f3 0f 1e fb          	endbr32 
-80106da4:	55                   	push   %ebp
-80106da5:	89 e5                	mov    %esp,%ebp
-80106da7:	8b 55 0c             	mov    0xc(%ebp),%edx
-80106daa:	8b 4d 10             	mov    0x10(%ebp),%ecx
-80106dad:	8b 45 08             	mov    0x8(%ebp),%eax
+8010711f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80107122:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107125:	5b                   	pop    %ebx
+80107126:	5e                   	pop    %esi
+80107127:	5f                   	pop    %edi
+80107128:	5d                   	pop    %ebp
+80107129:	c3                   	ret    
+8010712a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80107130 <deallocuvm>:
+{
+80107130:	f3 0f 1e fb          	endbr32 
+80107134:	55                   	push   %ebp
+80107135:	89 e5                	mov    %esp,%ebp
+80107137:	8b 55 0c             	mov    0xc(%ebp),%edx
+8010713a:	8b 4d 10             	mov    0x10(%ebp),%ecx
+8010713d:	8b 45 08             	mov    0x8(%ebp),%eax
   if(newsz >= oldsz)
-80106db0:	39 d1                	cmp    %edx,%ecx
-80106db2:	73 0c                	jae    80106dc0 <deallocuvm+0x20>
+80107140:	39 d1                	cmp    %edx,%ecx
+80107142:	73 0c                	jae    80107150 <deallocuvm+0x20>
 }
-80106db4:	5d                   	pop    %ebp
-80106db5:	e9 f6 fa ff ff       	jmp    801068b0 <deallocuvm.part.0>
-80106dba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80106dc0:	89 d0                	mov    %edx,%eax
-80106dc2:	5d                   	pop    %ebp
-80106dc3:	c3                   	ret    
-80106dc4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106dcb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106dcf:	90                   	nop
+80107144:	5d                   	pop    %ebp
+80107145:	e9 f6 fa ff ff       	jmp    80106c40 <deallocuvm.part.0>
+8010714a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80107150:	89 d0                	mov    %edx,%eax
+80107152:	5d                   	pop    %ebp
+80107153:	c3                   	ret    
+80107154:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010715b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010715f:	90                   	nop
 
-80106dd0 <freevm>:
+80107160 <freevm>:
 
 // Free a page table and all the physical memory pages
 // in the user part.
 void
 freevm(pde_t *pgdir)
 {
-80106dd0:	f3 0f 1e fb          	endbr32 
-80106dd4:	55                   	push   %ebp
-80106dd5:	89 e5                	mov    %esp,%ebp
-80106dd7:	57                   	push   %edi
-80106dd8:	56                   	push   %esi
-80106dd9:	53                   	push   %ebx
-80106dda:	83 ec 0c             	sub    $0xc,%esp
-80106ddd:	8b 75 08             	mov    0x8(%ebp),%esi
+80107160:	f3 0f 1e fb          	endbr32 
+80107164:	55                   	push   %ebp
+80107165:	89 e5                	mov    %esp,%ebp
+80107167:	57                   	push   %edi
+80107168:	56                   	push   %esi
+80107169:	53                   	push   %ebx
+8010716a:	83 ec 0c             	sub    $0xc,%esp
+8010716d:	8b 75 08             	mov    0x8(%ebp),%esi
   uint i;
 
   if(pgdir == 0)
-80106de0:	85 f6                	test   %esi,%esi
-80106de2:	74 55                	je     80106e39 <freevm+0x69>
+80107170:	85 f6                	test   %esi,%esi
+80107172:	74 55                	je     801071c9 <freevm+0x69>
   if(newsz >= oldsz)
-80106de4:	31 c9                	xor    %ecx,%ecx
-80106de6:	ba 00 00 00 80       	mov    $0x80000000,%edx
-80106deb:	89 f0                	mov    %esi,%eax
-80106ded:	89 f3                	mov    %esi,%ebx
-80106def:	e8 bc fa ff ff       	call   801068b0 <deallocuvm.part.0>
+80107174:	31 c9                	xor    %ecx,%ecx
+80107176:	ba 00 00 00 80       	mov    $0x80000000,%edx
+8010717b:	89 f0                	mov    %esi,%eax
+8010717d:	89 f3                	mov    %esi,%ebx
+8010717f:	e8 bc fa ff ff       	call   80106c40 <deallocuvm.part.0>
     panic("freevm: no pgdir");
   deallocuvm(pgdir, KERNBASE, 0);
   for(i = 0; i < NPDENTRIES; i++){
-80106df4:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
-80106dfa:	eb 0b                	jmp    80106e07 <freevm+0x37>
-80106dfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106e00:	83 c3 04             	add    $0x4,%ebx
-80106e03:	39 df                	cmp    %ebx,%edi
-80106e05:	74 23                	je     80106e2a <freevm+0x5a>
+80107184:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
+8010718a:	eb 0b                	jmp    80107197 <freevm+0x37>
+8010718c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107190:	83 c3 04             	add    $0x4,%ebx
+80107193:	39 df                	cmp    %ebx,%edi
+80107195:	74 23                	je     801071ba <freevm+0x5a>
     if(pgdir[i] & PTE_P){
-80106e07:	8b 03                	mov    (%ebx),%eax
-80106e09:	a8 01                	test   $0x1,%al
-80106e0b:	74 f3                	je     80106e00 <freevm+0x30>
+80107197:	8b 03                	mov    (%ebx),%eax
+80107199:	a8 01                	test   $0x1,%al
+8010719b:	74 f3                	je     80107190 <freevm+0x30>
       char * v = P2V(PTE_ADDR(pgdir[i]));
-80106e0d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+8010719d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
       kfree(v);
-80106e12:	83 ec 0c             	sub    $0xc,%esp
-80106e15:	83 c3 04             	add    $0x4,%ebx
+801071a2:	83 ec 0c             	sub    $0xc,%esp
+801071a5:	83 c3 04             	add    $0x4,%ebx
       char * v = P2V(PTE_ADDR(pgdir[i]));
-80106e18:	05 00 00 00 80       	add    $0x80000000,%eax
+801071a8:	05 00 00 00 80       	add    $0x80000000,%eax
       kfree(v);
-80106e1d:	50                   	push   %eax
-80106e1e:	e8 4d b6 ff ff       	call   80102470 <kfree>
-80106e23:	83 c4 10             	add    $0x10,%esp
+801071ad:	50                   	push   %eax
+801071ae:	e8 bd b2 ff ff       	call   80102470 <kfree>
+801071b3:	83 c4 10             	add    $0x10,%esp
   for(i = 0; i < NPDENTRIES; i++){
-80106e26:	39 df                	cmp    %ebx,%edi
-80106e28:	75 dd                	jne    80106e07 <freevm+0x37>
+801071b6:	39 df                	cmp    %ebx,%edi
+801071b8:	75 dd                	jne    80107197 <freevm+0x37>
     }
   }
   kfree((char*)pgdir);
-80106e2a:	89 75 08             	mov    %esi,0x8(%ebp)
+801071ba:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-80106e2d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106e30:	5b                   	pop    %ebx
-80106e31:	5e                   	pop    %esi
-80106e32:	5f                   	pop    %edi
-80106e33:	5d                   	pop    %ebp
+801071bd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801071c0:	5b                   	pop    %ebx
+801071c1:	5e                   	pop    %esi
+801071c2:	5f                   	pop    %edi
+801071c3:	5d                   	pop    %ebp
   kfree((char*)pgdir);
-80106e34:	e9 37 b6 ff ff       	jmp    80102470 <kfree>
+801071c4:	e9 a7 b2 ff ff       	jmp    80102470 <kfree>
     panic("freevm: no pgdir");
-80106e39:	83 ec 0c             	sub    $0xc,%esp
-80106e3c:	68 39 7a 10 80       	push   $0x80107a39
-80106e41:	e8 4a 95 ff ff       	call   80100390 <panic>
-80106e46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106e4d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80106e50 <setupkvm>:
-{
-80106e50:	f3 0f 1e fb          	endbr32 
-80106e54:	55                   	push   %ebp
-80106e55:	89 e5                	mov    %esp,%ebp
-80106e57:	56                   	push   %esi
-80106e58:	53                   	push   %ebx
+801071c9:	83 ec 0c             	sub    $0xc,%esp
+801071cc:	68 e5 7d 10 80       	push   $0x80107de5
+801071d1:	e8 ba 91 ff ff       	call   80100390 <panic>
+801071d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801071dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801071e0 <setupkvm>:
+{
+801071e0:	f3 0f 1e fb          	endbr32 
+801071e4:	55                   	push   %ebp
+801071e5:	89 e5                	mov    %esp,%ebp
+801071e7:	56                   	push   %esi
+801071e8:	53                   	push   %ebx
   if((pgdir = (pde_t*)kalloc()) == 0)
-80106e59:	e8 d2 b7 ff ff       	call   80102630 <kalloc>
-80106e5e:	89 c6                	mov    %eax,%esi
-80106e60:	85 c0                	test   %eax,%eax
-80106e62:	74 42                	je     80106ea6 <setupkvm+0x56>
+801071e9:	e8 42 b4 ff ff       	call   80102630 <kalloc>
+801071ee:	89 c6                	mov    %eax,%esi
+801071f0:	85 c0                	test   %eax,%eax
+801071f2:	74 42                	je     80107236 <setupkvm+0x56>
   memset(pgdir, 0, PGSIZE);
-80106e64:	83 ec 04             	sub    $0x4,%esp
+801071f4:	83 ec 04             	sub    $0x4,%esp
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80106e67:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
+801071f7:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
   memset(pgdir, 0, PGSIZE);
-80106e6c:	68 00 10 00 00       	push   $0x1000
-80106e71:	6a 00                	push   $0x0
-80106e73:	50                   	push   %eax
-80106e74:	e8 f7 d7 ff ff       	call   80104670 <memset>
-80106e79:	83 c4 10             	add    $0x10,%esp
+801071fc:	68 00 10 00 00       	push   $0x1000
+80107201:	6a 00                	push   $0x0
+80107203:	50                   	push   %eax
+80107204:	e8 d7 d7 ff ff       	call   801049e0 <memset>
+80107209:	83 c4 10             	add    $0x10,%esp
                 (uint)k->phys_start, k->perm) < 0) {
-80106e7c:	8b 43 04             	mov    0x4(%ebx),%eax
+8010720c:	8b 43 04             	mov    0x4(%ebx),%eax
     if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
-80106e7f:	83 ec 08             	sub    $0x8,%esp
-80106e82:	8b 4b 08             	mov    0x8(%ebx),%ecx
-80106e85:	ff 73 0c             	pushl  0xc(%ebx)
-80106e88:	8b 13                	mov    (%ebx),%edx
-80106e8a:	50                   	push   %eax
-80106e8b:	29 c1                	sub    %eax,%ecx
-80106e8d:	89 f0                	mov    %esi,%eax
-80106e8f:	e8 8c f9 ff ff       	call   80106820 <mappages>
-80106e94:	83 c4 10             	add    $0x10,%esp
-80106e97:	85 c0                	test   %eax,%eax
-80106e99:	78 15                	js     80106eb0 <setupkvm+0x60>
+8010720f:	83 ec 08             	sub    $0x8,%esp
+80107212:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80107215:	ff 73 0c             	pushl  0xc(%ebx)
+80107218:	8b 13                	mov    (%ebx),%edx
+8010721a:	50                   	push   %eax
+8010721b:	29 c1                	sub    %eax,%ecx
+8010721d:	89 f0                	mov    %esi,%eax
+8010721f:	e8 8c f9 ff ff       	call   80106bb0 <mappages>
+80107224:	83 c4 10             	add    $0x10,%esp
+80107227:	85 c0                	test   %eax,%eax
+80107229:	78 15                	js     80107240 <setupkvm+0x60>
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80106e9b:	83 c3 10             	add    $0x10,%ebx
-80106e9e:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
-80106ea4:	75 d6                	jne    80106e7c <setupkvm+0x2c>
-}
-80106ea6:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80106ea9:	89 f0                	mov    %esi,%eax
-80106eab:	5b                   	pop    %ebx
-80106eac:	5e                   	pop    %esi
-80106ead:	5d                   	pop    %ebp
-80106eae:	c3                   	ret    
-80106eaf:	90                   	nop
+8010722b:	83 c3 10             	add    $0x10,%ebx
+8010722e:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
+80107234:	75 d6                	jne    8010720c <setupkvm+0x2c>
+}
+80107236:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80107239:	89 f0                	mov    %esi,%eax
+8010723b:	5b                   	pop    %ebx
+8010723c:	5e                   	pop    %esi
+8010723d:	5d                   	pop    %ebp
+8010723e:	c3                   	ret    
+8010723f:	90                   	nop
       freevm(pgdir);
-80106eb0:	83 ec 0c             	sub    $0xc,%esp
-80106eb3:	56                   	push   %esi
+80107240:	83 ec 0c             	sub    $0xc,%esp
+80107243:	56                   	push   %esi
       return 0;
-80106eb4:	31 f6                	xor    %esi,%esi
+80107244:	31 f6                	xor    %esi,%esi
       freevm(pgdir);
-80106eb6:	e8 15 ff ff ff       	call   80106dd0 <freevm>
+80107246:	e8 15 ff ff ff       	call   80107160 <freevm>
       return 0;
-80106ebb:	83 c4 10             	add    $0x10,%esp
+8010724b:	83 c4 10             	add    $0x10,%esp
 }
-80106ebe:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80106ec1:	89 f0                	mov    %esi,%eax
-80106ec3:	5b                   	pop    %ebx
-80106ec4:	5e                   	pop    %esi
-80106ec5:	5d                   	pop    %ebp
-80106ec6:	c3                   	ret    
-80106ec7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106ece:	66 90                	xchg   %ax,%ax
-
-80106ed0 <kvmalloc>:
-{
-80106ed0:	f3 0f 1e fb          	endbr32 
-80106ed4:	55                   	push   %ebp
-80106ed5:	89 e5                	mov    %esp,%ebp
-80106ed7:	83 ec 08             	sub    $0x8,%esp
+8010724e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80107251:	89 f0                	mov    %esi,%eax
+80107253:	5b                   	pop    %ebx
+80107254:	5e                   	pop    %esi
+80107255:	5d                   	pop    %ebp
+80107256:	c3                   	ret    
+80107257:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010725e:	66 90                	xchg   %ax,%ax
+
+80107260 <kvmalloc>:
+{
+80107260:	f3 0f 1e fb          	endbr32 
+80107264:	55                   	push   %ebp
+80107265:	89 e5                	mov    %esp,%ebp
+80107267:	83 ec 08             	sub    $0x8,%esp
   kpgdir = setupkvm();
-80106eda:	e8 71 ff ff ff       	call   80106e50 <setupkvm>
-80106edf:	a3 a4 54 11 80       	mov    %eax,0x801154a4
+8010726a:	e8 71 ff ff ff       	call   801071e0 <setupkvm>
+8010726f:	a3 a4 55 11 80       	mov    %eax,0x801155a4
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-80106ee4:	05 00 00 00 80       	add    $0x80000000,%eax
-80106ee9:	0f 22 d8             	mov    %eax,%cr3
+80107274:	05 00 00 00 80       	add    $0x80000000,%eax
+80107279:	0f 22 d8             	mov    %eax,%cr3
 }
-80106eec:	c9                   	leave  
-80106eed:	c3                   	ret    
-80106eee:	66 90                	xchg   %ax,%ax
+8010727c:	c9                   	leave  
+8010727d:	c3                   	ret    
+8010727e:	66 90                	xchg   %ax,%ax
 
-80106ef0 <clearpteu>:
+80107280 <clearpteu>:
 
 // Clear PTE_U on a page. Used to create an inaccessible
 // page beneath the user stack.
 void
 clearpteu(pde_t *pgdir, char *uva)
 {
-80106ef0:	f3 0f 1e fb          	endbr32 
-80106ef4:	55                   	push   %ebp
+80107280:	f3 0f 1e fb          	endbr32 
+80107284:	55                   	push   %ebp
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
-80106ef5:	31 c9                	xor    %ecx,%ecx
+80107285:	31 c9                	xor    %ecx,%ecx
 {
-80106ef7:	89 e5                	mov    %esp,%ebp
-80106ef9:	83 ec 08             	sub    $0x8,%esp
+80107287:	89 e5                	mov    %esp,%ebp
+80107289:	83 ec 08             	sub    $0x8,%esp
   pte = walkpgdir(pgdir, uva, 0);
-80106efc:	8b 55 0c             	mov    0xc(%ebp),%edx
-80106eff:	8b 45 08             	mov    0x8(%ebp),%eax
-80106f02:	e8 99 f8 ff ff       	call   801067a0 <walkpgdir>
+8010728c:	8b 55 0c             	mov    0xc(%ebp),%edx
+8010728f:	8b 45 08             	mov    0x8(%ebp),%eax
+80107292:	e8 99 f8 ff ff       	call   80106b30 <walkpgdir>
   if(pte == 0)
-80106f07:	85 c0                	test   %eax,%eax
-80106f09:	74 05                	je     80106f10 <clearpteu+0x20>
+80107297:	85 c0                	test   %eax,%eax
+80107299:	74 05                	je     801072a0 <clearpteu+0x20>
     panic("clearpteu");
   *pte &= ~PTE_U;
-80106f0b:	83 20 fb             	andl   $0xfffffffb,(%eax)
+8010729b:	83 20 fb             	andl   $0xfffffffb,(%eax)
 }
-80106f0e:	c9                   	leave  
-80106f0f:	c3                   	ret    
+8010729e:	c9                   	leave  
+8010729f:	c3                   	ret    
     panic("clearpteu");
-80106f10:	83 ec 0c             	sub    $0xc,%esp
-80106f13:	68 4a 7a 10 80       	push   $0x80107a4a
-80106f18:	e8 73 94 ff ff       	call   80100390 <panic>
-80106f1d:	8d 76 00             	lea    0x0(%esi),%esi
+801072a0:	83 ec 0c             	sub    $0xc,%esp
+801072a3:	68 f6 7d 10 80       	push   $0x80107df6
+801072a8:	e8 e3 90 ff ff       	call   80100390 <panic>
+801072ad:	8d 76 00             	lea    0x0(%esi),%esi
 
-80106f20 <copyuvm>:
+801072b0 <copyuvm>:
 
 // Given a parent process's page table, create a copy
 // of it for a child.
 pde_t*
 copyuvm(pde_t *pgdir, uint sz)
 {
-80106f20:	f3 0f 1e fb          	endbr32 
-80106f24:	55                   	push   %ebp
-80106f25:	89 e5                	mov    %esp,%ebp
-80106f27:	57                   	push   %edi
-80106f28:	56                   	push   %esi
-80106f29:	53                   	push   %ebx
-80106f2a:	83 ec 1c             	sub    $0x1c,%esp
+801072b0:	f3 0f 1e fb          	endbr32 
+801072b4:	55                   	push   %ebp
+801072b5:	89 e5                	mov    %esp,%ebp
+801072b7:	57                   	push   %edi
+801072b8:	56                   	push   %esi
+801072b9:	53                   	push   %ebx
+801072ba:	83 ec 1c             	sub    $0x1c,%esp
   pde_t *d;
   pte_t *pte;
   uint pa, i, flags;
   char *mem;
 
   if((d = setupkvm()) == 0)
-80106f2d:	e8 1e ff ff ff       	call   80106e50 <setupkvm>
-80106f32:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80106f35:	85 c0                	test   %eax,%eax
-80106f37:	0f 84 9b 00 00 00    	je     80106fd8 <copyuvm+0xb8>
+801072bd:	e8 1e ff ff ff       	call   801071e0 <setupkvm>
+801072c2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801072c5:	85 c0                	test   %eax,%eax
+801072c7:	0f 84 9b 00 00 00    	je     80107368 <copyuvm+0xb8>
     return 0;
   for(i = 0; i < sz; i += PGSIZE){
-80106f3d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80106f40:	85 c9                	test   %ecx,%ecx
-80106f42:	0f 84 90 00 00 00    	je     80106fd8 <copyuvm+0xb8>
-80106f48:	31 f6                	xor    %esi,%esi
-80106f4a:	eb 46                	jmp    80106f92 <copyuvm+0x72>
-80106f4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801072cd:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+801072d0:	85 c9                	test   %ecx,%ecx
+801072d2:	0f 84 90 00 00 00    	je     80107368 <copyuvm+0xb8>
+801072d8:	31 f6                	xor    %esi,%esi
+801072da:	eb 46                	jmp    80107322 <copyuvm+0x72>
+801072dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       panic("copyuvm: page not present");
     pa = PTE_ADDR(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
       goto bad;
     memmove(mem, (char*)P2V(pa), PGSIZE);
-80106f50:	83 ec 04             	sub    $0x4,%esp
-80106f53:	81 c7 00 00 00 80    	add    $0x80000000,%edi
-80106f59:	68 00 10 00 00       	push   $0x1000
-80106f5e:	57                   	push   %edi
-80106f5f:	50                   	push   %eax
-80106f60:	e8 ab d7 ff ff       	call   80104710 <memmove>
+801072e0:	83 ec 04             	sub    $0x4,%esp
+801072e3:	81 c7 00 00 00 80    	add    $0x80000000,%edi
+801072e9:	68 00 10 00 00       	push   $0x1000
+801072ee:	57                   	push   %edi
+801072ef:	50                   	push   %eax
+801072f0:	e8 8b d7 ff ff       	call   80104a80 <memmove>
     if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
-80106f65:	58                   	pop    %eax
-80106f66:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106f6c:	5a                   	pop    %edx
-80106f6d:	ff 75 e4             	pushl  -0x1c(%ebp)
-80106f70:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106f75:	89 f2                	mov    %esi,%edx
-80106f77:	50                   	push   %eax
-80106f78:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106f7b:	e8 a0 f8 ff ff       	call   80106820 <mappages>
-80106f80:	83 c4 10             	add    $0x10,%esp
-80106f83:	85 c0                	test   %eax,%eax
-80106f85:	78 61                	js     80106fe8 <copyuvm+0xc8>
+801072f5:	58                   	pop    %eax
+801072f6:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+801072fc:	5a                   	pop    %edx
+801072fd:	ff 75 e4             	pushl  -0x1c(%ebp)
+80107300:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80107305:	89 f2                	mov    %esi,%edx
+80107307:	50                   	push   %eax
+80107308:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010730b:	e8 a0 f8 ff ff       	call   80106bb0 <mappages>
+80107310:	83 c4 10             	add    $0x10,%esp
+80107313:	85 c0                	test   %eax,%eax
+80107315:	78 61                	js     80107378 <copyuvm+0xc8>
   for(i = 0; i < sz; i += PGSIZE){
-80106f87:	81 c6 00 10 00 00    	add    $0x1000,%esi
-80106f8d:	39 75 0c             	cmp    %esi,0xc(%ebp)
-80106f90:	76 46                	jbe    80106fd8 <copyuvm+0xb8>
+80107317:	81 c6 00 10 00 00    	add    $0x1000,%esi
+8010731d:	39 75 0c             	cmp    %esi,0xc(%ebp)
+80107320:	76 46                	jbe    80107368 <copyuvm+0xb8>
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
-80106f92:	8b 45 08             	mov    0x8(%ebp),%eax
-80106f95:	31 c9                	xor    %ecx,%ecx
-80106f97:	89 f2                	mov    %esi,%edx
-80106f99:	e8 02 f8 ff ff       	call   801067a0 <walkpgdir>
-80106f9e:	85 c0                	test   %eax,%eax
-80106fa0:	74 61                	je     80107003 <copyuvm+0xe3>
+80107322:	8b 45 08             	mov    0x8(%ebp),%eax
+80107325:	31 c9                	xor    %ecx,%ecx
+80107327:	89 f2                	mov    %esi,%edx
+80107329:	e8 02 f8 ff ff       	call   80106b30 <walkpgdir>
+8010732e:	85 c0                	test   %eax,%eax
+80107330:	74 61                	je     80107393 <copyuvm+0xe3>
     if(!(*pte & PTE_P))
-80106fa2:	8b 00                	mov    (%eax),%eax
-80106fa4:	a8 01                	test   $0x1,%al
-80106fa6:	74 4e                	je     80106ff6 <copyuvm+0xd6>
+80107332:	8b 00                	mov    (%eax),%eax
+80107334:	a8 01                	test   $0x1,%al
+80107336:	74 4e                	je     80107386 <copyuvm+0xd6>
     pa = PTE_ADDR(*pte);
-80106fa8:	89 c7                	mov    %eax,%edi
+80107338:	89 c7                	mov    %eax,%edi
     flags = PTE_FLAGS(*pte);
-80106faa:	25 ff 0f 00 00       	and    $0xfff,%eax
-80106faf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010733a:	25 ff 0f 00 00       	and    $0xfff,%eax
+8010733f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     pa = PTE_ADDR(*pte);
-80106fb2:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+80107342:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
     if((mem = kalloc()) == 0)
-80106fb8:	e8 73 b6 ff ff       	call   80102630 <kalloc>
-80106fbd:	89 c3                	mov    %eax,%ebx
-80106fbf:	85 c0                	test   %eax,%eax
-80106fc1:	75 8d                	jne    80106f50 <copyuvm+0x30>
+80107348:	e8 e3 b2 ff ff       	call   80102630 <kalloc>
+8010734d:	89 c3                	mov    %eax,%ebx
+8010734f:	85 c0                	test   %eax,%eax
+80107351:	75 8d                	jne    801072e0 <copyuvm+0x30>
     }
   }
   return d;
 
 bad:
   freevm(d);
-80106fc3:	83 ec 0c             	sub    $0xc,%esp
-80106fc6:	ff 75 e0             	pushl  -0x20(%ebp)
-80106fc9:	e8 02 fe ff ff       	call   80106dd0 <freevm>
+80107353:	83 ec 0c             	sub    $0xc,%esp
+80107356:	ff 75 e0             	pushl  -0x20(%ebp)
+80107359:	e8 02 fe ff ff       	call   80107160 <freevm>
   return 0;
-80106fce:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
-80106fd5:	83 c4 10             	add    $0x10,%esp
+8010735e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+80107365:	83 c4 10             	add    $0x10,%esp
 }
-80106fd8:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106fdb:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106fde:	5b                   	pop    %ebx
-80106fdf:	5e                   	pop    %esi
-80106fe0:	5f                   	pop    %edi
-80106fe1:	5d                   	pop    %ebp
-80106fe2:	c3                   	ret    
-80106fe3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106fe7:	90                   	nop
+80107368:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010736b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010736e:	5b                   	pop    %ebx
+8010736f:	5e                   	pop    %esi
+80107370:	5f                   	pop    %edi
+80107371:	5d                   	pop    %ebp
+80107372:	c3                   	ret    
+80107373:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107377:	90                   	nop
       kfree(mem);
-80106fe8:	83 ec 0c             	sub    $0xc,%esp
-80106feb:	53                   	push   %ebx
-80106fec:	e8 7f b4 ff ff       	call   80102470 <kfree>
+80107378:	83 ec 0c             	sub    $0xc,%esp
+8010737b:	53                   	push   %ebx
+8010737c:	e8 ef b0 ff ff       	call   80102470 <kfree>
       goto bad;
-80106ff1:	83 c4 10             	add    $0x10,%esp
-80106ff4:	eb cd                	jmp    80106fc3 <copyuvm+0xa3>
+80107381:	83 c4 10             	add    $0x10,%esp
+80107384:	eb cd                	jmp    80107353 <copyuvm+0xa3>
       panic("copyuvm: page not present");
-80106ff6:	83 ec 0c             	sub    $0xc,%esp
-80106ff9:	68 6e 7a 10 80       	push   $0x80107a6e
-80106ffe:	e8 8d 93 ff ff       	call   80100390 <panic>
+80107386:	83 ec 0c             	sub    $0xc,%esp
+80107389:	68 1a 7e 10 80       	push   $0x80107e1a
+8010738e:	e8 fd 8f ff ff       	call   80100390 <panic>
       panic("copyuvm: pte should exist");
-80107003:	83 ec 0c             	sub    $0xc,%esp
-80107006:	68 54 7a 10 80       	push   $0x80107a54
-8010700b:	e8 80 93 ff ff       	call   80100390 <panic>
+80107393:	83 ec 0c             	sub    $0xc,%esp
+80107396:	68 00 7e 10 80       	push   $0x80107e00
+8010739b:	e8 f0 8f ff ff       	call   80100390 <panic>
 
-80107010 <uva2ka>:
+801073a0 <uva2ka>:
 
 //PAGEBREAK!
 // Map user virtual address to kernel address.
 char*
 uva2ka(pde_t *pgdir, char *uva)
 {
-80107010:	f3 0f 1e fb          	endbr32 
-80107014:	55                   	push   %ebp
+801073a0:	f3 0f 1e fb          	endbr32 
+801073a4:	55                   	push   %ebp
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
-80107015:	31 c9                	xor    %ecx,%ecx
+801073a5:	31 c9                	xor    %ecx,%ecx
 {
-80107017:	89 e5                	mov    %esp,%ebp
-80107019:	83 ec 08             	sub    $0x8,%esp
+801073a7:	89 e5                	mov    %esp,%ebp
+801073a9:	83 ec 08             	sub    $0x8,%esp
   pte = walkpgdir(pgdir, uva, 0);
-8010701c:	8b 55 0c             	mov    0xc(%ebp),%edx
-8010701f:	8b 45 08             	mov    0x8(%ebp),%eax
-80107022:	e8 79 f7 ff ff       	call   801067a0 <walkpgdir>
+801073ac:	8b 55 0c             	mov    0xc(%ebp),%edx
+801073af:	8b 45 08             	mov    0x8(%ebp),%eax
+801073b2:	e8 79 f7 ff ff       	call   80106b30 <walkpgdir>
   if((*pte & PTE_P) == 0)
-80107027:	8b 00                	mov    (%eax),%eax
+801073b7:	8b 00                	mov    (%eax),%eax
     return 0;
   if((*pte & PTE_U) == 0)
     return 0;
   return (char*)P2V(PTE_ADDR(*pte));
 }
-80107029:	c9                   	leave  
+801073b9:	c9                   	leave  
   if((*pte & PTE_U) == 0)
-8010702a:	89 c2                	mov    %eax,%edx
+801073ba:	89 c2                	mov    %eax,%edx
   return (char*)P2V(PTE_ADDR(*pte));
-8010702c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+801073bc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   if((*pte & PTE_U) == 0)
-80107031:	83 e2 05             	and    $0x5,%edx
+801073c1:	83 e2 05             	and    $0x5,%edx
   return (char*)P2V(PTE_ADDR(*pte));
-80107034:	05 00 00 00 80       	add    $0x80000000,%eax
-80107039:	83 fa 05             	cmp    $0x5,%edx
-8010703c:	ba 00 00 00 00       	mov    $0x0,%edx
-80107041:	0f 45 c2             	cmovne %edx,%eax
-}
-80107044:	c3                   	ret    
-80107045:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010704c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801073c4:	05 00 00 00 80       	add    $0x80000000,%eax
+801073c9:	83 fa 05             	cmp    $0x5,%edx
+801073cc:	ba 00 00 00 00       	mov    $0x0,%edx
+801073d1:	0f 45 c2             	cmovne %edx,%eax
+}
+801073d4:	c3                   	ret    
+801073d5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801073dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80107050 <copyout>:
+801073e0 <copyout>:
 // Copy len bytes from p to user address va in page table pgdir.
 // Most useful when pgdir is not the current page table.
 // uva2ka ensures this only works for PTE_U pages.
 int
 copyout(pde_t *pgdir, uint va, void *p, uint len)
 {
-80107050:	f3 0f 1e fb          	endbr32 
-80107054:	55                   	push   %ebp
-80107055:	89 e5                	mov    %esp,%ebp
-80107057:	57                   	push   %edi
-80107058:	56                   	push   %esi
-80107059:	53                   	push   %ebx
-8010705a:	83 ec 0c             	sub    $0xc,%esp
-8010705d:	8b 75 14             	mov    0x14(%ebp),%esi
-80107060:	8b 55 0c             	mov    0xc(%ebp),%edx
+801073e0:	f3 0f 1e fb          	endbr32 
+801073e4:	55                   	push   %ebp
+801073e5:	89 e5                	mov    %esp,%ebp
+801073e7:	57                   	push   %edi
+801073e8:	56                   	push   %esi
+801073e9:	53                   	push   %ebx
+801073ea:	83 ec 0c             	sub    $0xc,%esp
+801073ed:	8b 75 14             	mov    0x14(%ebp),%esi
+801073f0:	8b 55 0c             	mov    0xc(%ebp),%edx
   char *buf, *pa0;
   uint n, va0;
 
   buf = (char*)p;
   while(len > 0){
-80107063:	85 f6                	test   %esi,%esi
-80107065:	75 3c                	jne    801070a3 <copyout+0x53>
-80107067:	eb 67                	jmp    801070d0 <copyout+0x80>
-80107069:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801073f3:	85 f6                	test   %esi,%esi
+801073f5:	75 3c                	jne    80107433 <copyout+0x53>
+801073f7:	eb 67                	jmp    80107460 <copyout+0x80>
+801073f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     va0 = (uint)PGROUNDDOWN(va);
     pa0 = uva2ka(pgdir, (char*)va0);
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (va - va0);
-80107070:	8b 55 0c             	mov    0xc(%ebp),%edx
-80107073:	89 fb                	mov    %edi,%ebx
-80107075:	29 d3                	sub    %edx,%ebx
-80107077:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80107400:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107403:	89 fb                	mov    %edi,%ebx
+80107405:	29 d3                	sub    %edx,%ebx
+80107407:	81 c3 00 10 00 00    	add    $0x1000,%ebx
     if(n > len)
-8010707d:	39 f3                	cmp    %esi,%ebx
-8010707f:	0f 47 de             	cmova  %esi,%ebx
+8010740d:	39 f3                	cmp    %esi,%ebx
+8010740f:	0f 47 de             	cmova  %esi,%ebx
       n = len;
     memmove(pa0 + (va - va0), buf, n);
-80107082:	29 fa                	sub    %edi,%edx
-80107084:	83 ec 04             	sub    $0x4,%esp
-80107087:	01 c2                	add    %eax,%edx
-80107089:	53                   	push   %ebx
-8010708a:	ff 75 10             	pushl  0x10(%ebp)
-8010708d:	52                   	push   %edx
-8010708e:	e8 7d d6 ff ff       	call   80104710 <memmove>
+80107412:	29 fa                	sub    %edi,%edx
+80107414:	83 ec 04             	sub    $0x4,%esp
+80107417:	01 c2                	add    %eax,%edx
+80107419:	53                   	push   %ebx
+8010741a:	ff 75 10             	pushl  0x10(%ebp)
+8010741d:	52                   	push   %edx
+8010741e:	e8 5d d6 ff ff       	call   80104a80 <memmove>
     len -= n;
     buf += n;
-80107093:	01 5d 10             	add    %ebx,0x10(%ebp)
+80107423:	01 5d 10             	add    %ebx,0x10(%ebp)
     va = va0 + PGSIZE;
-80107096:	8d 97 00 10 00 00    	lea    0x1000(%edi),%edx
+80107426:	8d 97 00 10 00 00    	lea    0x1000(%edi),%edx
   while(len > 0){
-8010709c:	83 c4 10             	add    $0x10,%esp
-8010709f:	29 de                	sub    %ebx,%esi
-801070a1:	74 2d                	je     801070d0 <copyout+0x80>
+8010742c:	83 c4 10             	add    $0x10,%esp
+8010742f:	29 de                	sub    %ebx,%esi
+80107431:	74 2d                	je     80107460 <copyout+0x80>
     va0 = (uint)PGROUNDDOWN(va);
-801070a3:	89 d7                	mov    %edx,%edi
+80107433:	89 d7                	mov    %edx,%edi
     pa0 = uva2ka(pgdir, (char*)va0);
-801070a5:	83 ec 08             	sub    $0x8,%esp
+80107435:	83 ec 08             	sub    $0x8,%esp
     va0 = (uint)PGROUNDDOWN(va);
-801070a8:	89 55 0c             	mov    %edx,0xc(%ebp)
-801070ab:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+80107438:	89 55 0c             	mov    %edx,0xc(%ebp)
+8010743b:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
     pa0 = uva2ka(pgdir, (char*)va0);
-801070b1:	57                   	push   %edi
-801070b2:	ff 75 08             	pushl  0x8(%ebp)
-801070b5:	e8 56 ff ff ff       	call   80107010 <uva2ka>
+80107441:	57                   	push   %edi
+80107442:	ff 75 08             	pushl  0x8(%ebp)
+80107445:	e8 56 ff ff ff       	call   801073a0 <uva2ka>
     if(pa0 == 0)
-801070ba:	83 c4 10             	add    $0x10,%esp
-801070bd:	85 c0                	test   %eax,%eax
-801070bf:	75 af                	jne    80107070 <copyout+0x20>
+8010744a:	83 c4 10             	add    $0x10,%esp
+8010744d:	85 c0                	test   %eax,%eax
+8010744f:	75 af                	jne    80107400 <copyout+0x20>
   }
   return 0;
 }
-801070c1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107451:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-801070c4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80107454:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801070c9:	5b                   	pop    %ebx
-801070ca:	5e                   	pop    %esi
-801070cb:	5f                   	pop    %edi
-801070cc:	5d                   	pop    %ebp
-801070cd:	c3                   	ret    
-801070ce:	66 90                	xchg   %ax,%ax
-801070d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107459:	5b                   	pop    %ebx
+8010745a:	5e                   	pop    %esi
+8010745b:	5f                   	pop    %edi
+8010745c:	5d                   	pop    %ebp
+8010745d:	c3                   	ret    
+8010745e:	66 90                	xchg   %ax,%ax
+80107460:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-801070d3:	31 c0                	xor    %eax,%eax
+80107463:	31 c0                	xor    %eax,%eax
 }
-801070d5:	5b                   	pop    %ebx
-801070d6:	5e                   	pop    %esi
-801070d7:	5f                   	pop    %edi
-801070d8:	5d                   	pop    %ebp
-801070d9:	c3                   	ret    
+80107465:	5b                   	pop    %ebx
+80107466:	5e                   	pop    %esi
+80107467:	5f                   	pop    %edi
+80107468:	5d                   	pop    %ebp
+80107469:	c3                   	ret    
diff -ruN xv6-public-original/kernel.sym xv6-public/kernel.sym
--- xv6-public-original/kernel.sym	2022-08-13 16:28:45.571026000 +0530
+++ xv6-public/kernel.sym	2022-09-05 20:56:54.742960000 +0530
@@ -1,5 +1,5 @@
 80100000 .text
-801070e0 .rodata
+80107480 .rodata
 80108000 .data
 8010a520 .bss
 00000000 .debug_line
@@ -16,7 +16,7 @@
 8010a558 panicked
 80100410 consputc.part.0
 801005a0 printint
-80107150 digits.1577
+801074f0 digits.1578
 00000000 exec.c
 00000000 file.c
 00000000 fs.c
@@ -34,9 +34,9 @@
 00000000 kalloc.c
 00000000 kbd.c
 8010a5b4 shift.1418
-80107480 shiftcode
-80107380 togglecode
-80107360 charcode.1419
+80107820 shiftcode
+80107720 togglecode
+80107700 charcode.1419
 80108200 normalmap
 80108100 shiftmap
 80108000 ctlmap
@@ -53,464 +53,470 @@
 00000000 pipe.c
 00000000 proc.c
 80103790 allocproc
-8010a000 first.1619
+8010a000 first.1620
 8010a5b8 initproc
-8010772c states.1645
+80107acc states.1646
 00000000 sleeplock.c
 00000000 spinlock.c
 00000000 string.c
 00000000 syscall.c
-801077a0 syscalls
+80107b40 syscalls
 00000000 sysfile.c
-80104ab0 create
-80104c50 argfd.constprop.0
+80104e20 create
+80104fc0 argfd.constprop.0
 00000000 sysproc.c
 00000000 trap.c
 00000000 uart.c
-80105ba0 uartgetc
+80105f30 uartgetc
 8010a5bc uart
-80105bd0 uartputc.part.0
+80105f60 uartputc.part.0
 00000000 vm.c
-801067a0 walkpgdir
-80106820 mappages
-801068b0 deallocuvm.part.0
+80106b30 walkpgdir
+80106bb0 mappages
+80106c40 deallocuvm.part.0
 8010a420 kmap
 80100290 consoleread
-801066f3 vector242
-8010614a vector119
+80106a83 vector242
+801064da vector119
 8010000c entry
-8010602a vector87
-80106021 vector86
-80104830 safestrcpy
-80104df0 sys_close
-8010675f vector251
-8010604e vector91
-80105e44 vector33
-80106333 vector162
+801063ba vector87
+801063b1 vector86
+80104ba0 safestrcpy
+80105160 sys_close
+80106aef vector251
+801063de vector91
+801061d4 vector33
+801066c3 vector162
 80103ed0 yield
 80112680 log
 80112640 kmem
-80106597 vector213
-801060e7 vector108
-80105c20 uartinit
-80105e9e vector43
+80106927 vector213
+80106477 vector108
+80105fb0 uartinit
+8010622e vector43
 801028c0 lapiceoi
-80106357 vector165
-80106447 vector185
+801066e7 vector165
+801067d7 vector185
 80102380 ioapicinit
-80106126 vector115
+801064b6 vector115
 80100ff0 fileread
-80106165 vector122
-80105740 sys_sbrk
+801064f5 vector122
+80105ab0 sys_sbrk
 80112760 ioapicid
-801062eb vector156
-80106717 vector245
+80104510 thread_exit
+8010667b vector156
+80106aa7 vector245
 80112634 ioapic
-80106477 vector189
-80105d68 vector7
-80105f40 vector61
-80105df3 vector24
-80106102 vector111
-801064fb vector200
-80105f76 vector67
-80106213 vector138
-80105fb5 vector74
+80106807 vector189
+801060f8 vector7
+801062d0 vector61
+80106183 vector24
+80106492 vector111
+8010688b vector200
+80106306 vector67
+801065a3 vector138
+80106345 vector74
 80103cd0 sched
-80104710 memmove
-80105f1c vector57
-80104a40 syscall
-801065a3 vector214
-80106096 vector99
+80104a80 memmove
+801062ac vector57
+80104db0 syscall
+80106933 vector214
+80106426 vector99
 80103940 cpuid
 80101b60 writei
-80106237 vector141
-801056a0 sys_fork
+801065c7 vector141
+80105a10 sys_fork
 8010b5c0 bcache
-801063ab vector172
-801066e7 vector241
-80104400 getcallerpcs
-80105300 sys_mkdir
-80106777 vector253
-80105d44 vector3
-80105d3b vector2
+8010673b vector172
+80106a77 vector241
+80104770 getcallerpcs
+80105670 sys_mkdir
+80106b07 vector253
+801060d4 vector3
+801060cb vector2
 80101c90 namecmp
-8010663f vector227
-80106573 vector210
-80104a00 argstr
-8010661b vector224
-80105e8c vector41
+801069cf vector227
+80106903 vector210
+80104d70 argstr
+801069ab vector224
+8010621c vector41
 801006b0 cprintf
 80100e70 filedup
 80102030 namei
-80105dd8 vector21
+80106168 vector21
 80100040 binit
-801063e7 vector177
-80106141 vector118
-80105f91 vector70
-80105f88 vector69
-801066b7 vector237
-80105f5b vector64
-80105e0e vector27
-801061cb vector132
-80106453 vector186
-80104d10 sys_read
-801065c7 vector217
-801048b0 fetchint
-80106e50 setupkvm
-80104770 memcpy
-80106dd0 freevm
-80105d32 vector1
-801063f3 vector178
-80105e71 vector38
+80106777 vector177
+801064d1 vector118
+80106321 vector70
+80106318 vector69
+80106a47 vector237
+801062eb vector64
+8010619e vector27
+8010655b vector132
+801067e3 vector186
+80105080 sys_read
+80106957 vector217
+80104c20 fetchint
+801071e0 setupkvm
+80104ae0 memcpy
+80107160 freevm
+801060c2 vector1
+80106783 vector178
+80106201 vector38
 80102470 kfree
-801066c3 vector238
+80106a53 vector238
 801038d0 mycpu
 80101890 iput
-801061d7 vector133
-80105fac vector73
-8010625b vector144
-80106783 vector254
+80106567 vector133
+8010633c vector73
+801065eb vector144
+80106b13 vector254
 80101500 readsb
 8010a004 nextpid
-801060a8 vector101
-8010657f vector211
+80106438 vector101
+8010690f vector211
 801031f0 mpinit
-801063c3 vector174
-801066ff vector243
+80106753 vector174
+80106a8f vector243
 80100de0 fileinit
-801043e0 initlock
-8010619b vector128
-80107050 copyout
-80105ff4 vector81
+80104750 initlock
+8010652b vector128
+801073e0 copyout
+80106384 vector81
 80103f20 sleep
 801028e0 microdelay
-80105d96 vector13
-80105ee6 vector51
-80105dad vector16
+80106126 vector13
+80106276 vector51
+8010613d vector16
 8010ff20 input
-801066db vector240
-80105f01 vector54
-80105dc6 vector19
-80106057 vector92
-8010670b vector244
+80106a6b vector240
+80106291 vector54
+80106156 vector19
+801063e7 vector92
+80106a9b vector244
 80101a30 stati
-8010622b vector140
-801056e0 sys_kill
-80105eb0 vector45
-80105fe2 vector79
+801065bb vector140
+80105a50 sys_kill
+80106240 vector45
+80106372 vector79
 80103500 pipeclose
-80106657 vector229
-80106303 vector158
-80104e40 sys_fstat
+801069e7 vector229
+80106693 vector158
+801051b0 sys_fstat
 80100640 consolewrite
-80105e7a vector39
-8010637b vector168
+8010620a vector39
+8010670b vector168
+80105be0 sys_thread_create
 80102da0 end_op
-80105e56 vector35
-80106114 vector113
+801061e6 vector35
+801064a4 vector113
 80102510 freerange
-80106180 vector125
-80106c70 allocuvm
-80105886 trapret
-801065bb vector216
-80105f52 vector63
-80105e05 vector26
-801064a7 vector193
+80106510 vector125
+80107000 allocuvm
+80105c21 trapret
+8010694b vector216
+801062e2 vector63
+80106195 vector26
+80106837 vector193
 801027a0 lapicinit
-801064cb vector196
-80106567 vector209
-80105d4d vector4
-80106393 vector170
+8010685b vector196
+801068f7 vector209
+801060dd vector4
+80106723 vector170
 8010a5c0 stack
-801061fb vector136
-80105d81 vector10
-80106543 vector206
+8010658b vector136
+80106111 vector10
+801068d3 vector206
 80101840 iunlock
-80105790 sys_sleep
-8010678f vector255
-80106417 vector181
-80105f2e vector59
-80106018 vector85
-8010600f vector84
-8010642f vector183
-8010630f vector159
-8010658b vector212
-80104e90 sys_link
-80105ec2 vector47
-8010664b vector228
-80105e95 vector42
-8010611d vector114
-80107010 uva2ka
-801063cf vector175
-8010624f vector143
+80105b00 sys_sleep
+80106b1f vector255
+801067a7 vector181
+801062be vector59
+801063a8 vector85
+8010639f vector84
+801067bf vector183
+8010669f vector159
+8010691b vector212
+80105200 sys_link
+80106252 vector47
+801069db vector228
+80106225 vector42
+801064ad vector114
+801073a0 uva2ka
+8010675f vector175
+801065df vector143
 80100e00 filealloc
 801040e0 wakeup
-801061b3 vector130
-80106723 vector246
-80105d78 vector9
-80106243 vector142
-8010609f vector100
-80106507 vector201
-80106ef0 clearpteu
+80106543 vector130
+80106ab3 vector246
+80106108 vector9
+801065d3 vector142
+8010642f vector100
+80106897 vector201
+80107280 clearpteu
 80103960 myproc
-801058a0 tvinit
-80105f37 vector60
-80105dea vector23
+80105c30 tvinit
+801062c7 vector60
+8010617a vector23
 80101730 idup
-801066ab vector236
+80106a3b vector236
 80102780 kbdintr
-801051c0 sys_open
-8010666f vector231
-80105f6d vector66
-80105e20 vector29
+80105530 sys_open
+801069ff vector231
+801062fd vector66
+801061b0 vector29
 80101a60 readi
-801061ef vector135
+8010657f vector135
 80100860 consoleintr
 80104140 kill
-80105fd0 vector77
+80106360 vector77
 801015e0 ialloc
-8010640b vector180
-801154a4 kpgdir
-8010655b vector208
+8010679b vector180
+801155a4 kpgdir
+801068eb vector208
 80102990 cmostime
-80105d10 uartintr
-8010608d vector98
-80106084 vector97
-801063db vector176
-801064b3 vector194
-80105e3b vector32
-801154a8 end
-801064ef vector199
-801061bf vector131
-8010676b vector252
+801060a0 uartintr
+8010641d vector98
+80106414 vector97
+8010676b vector176
+80106843 vector194
+801061cb vector32
+801155a8 end
+8010687f vector199
+8010654f vector131
+80106afb vector252
 80101090 filewrite
-80105d29 vector0
-80104950 argint
+801060b9 vector0
+80104cc0 argint
 80100a80 exec
-80106267 vector145
-80104d80 sys_write
-80104620 release
-801048f0 fetchstr
-801060de vector107
-80105e83 vector40
+801065f7 vector145
+801050f0 sys_write
+80104990 release
+80104c60 fetchstr
+8010646e vector107
+80106213 vector40
 80103fe0 wait
-801060b1 vector102
+80106441 vector102
 80109000 entrypgdir
 0010000c _start
-80105f13 vector56
-80105f7f vector68
-80105d5f vector6
+801062a3 vector56
+8010630f vector68
+801060ef vector6
 8010a48c _binary_initcode_end
 80100000 multiboot_header
-801061a7 vector129
+80106537 vector129
 80103c30 scheduler
 80101cb0 dirlookup
-801064d7 vector197
+80106867 vector197
 80100ec0 fileclose
 80102d30 begin_op
-801062bb vector152
-80106ed0 kvmalloc
-80106663 vector230
-80104780 strncmp
-80105e68 vector37
-80106537 vector205
-80106327 vector161
-80114c60 tickslock
+8010664b vector152
+80107260 kvmalloc
+801069f3 vector230
+80104af0 strncmp
+801061f8 vector37
+801068c7 vector205
+801066b7 vector161
+80114d60 tickslock
 801035a0 pipewrite
-801047d0 strncpy
-80105f9a vector71
-80106f20 copyuvm
+80104b40 strncpy
+8010632a vector71
+801072b0 copyuvm
 8010ffc0 ftable
-8010631b vector160
-801049a0 argptr
-801065af vector215
-801062f7 vector157
-80104ca0 sys_dup
-8010610b vector112
+801066ab vector160
+80104d10 argptr
+8010693f vector215
+80106687 vector157
+80105010 sys_dup
+8010649b vector112
 80100390 panic
 80103860 forkret
-80106423 vector182
-80105d8f vector12
-801046c0 memcmp
+801067b3 vector182
+8010611f vector12
+80104a30 memcmp
 801026a0 kbdgetc
-801060f0 vector109
-80105dcf vector20
+80106480 vector109
+8010615f vector20
 80103b10 fork
-80105ef8 vector53
-80105dbd vector18
+80106288 vector53
+8010614d vector18
 0000008a _binary_entryother_size
 80112780 cpus
-80104340 releasesleep
-80106072 vector95
-80104510 holding
+801046b0 releasesleep
+80106402 vector95
+80104880 holding
 801109c0 sb
-80104560 acquire
-80106633 vector226
+801048d0 acquire
+801069c3 vector226
 80102050 nameiparent
-80105ed4 vector49
-80105ea7 vector44
+80106264 vector49
+80106237 vector44
 8011267c lapic
-80105fd9 vector78
-8010586e alltraps
-801063b7 vector173
-80106138 vector117
-80105ffd vector82
-80106603 vector222
-80105d71 vector8
-80106297 vector149
+80106369 vector78
+80105c09 alltraps
+80106747 vector173
+801064c8 vector117
+8010638d vector82
+80106993 vector222
+80106101 vector8
+80106627 vector149
 801016a0 iupdate
 80108000 data
-80104670 memset
-8010667b vector232
+801049e0 memset
+80106a0b vector232
 80103040 main
-801069f0 switchkvm
-801060d5 vector106
-801065eb vector220
-80106045 vector90
-8010633f vector163
-80106693 vector234
+80106d80 switchkvm
+80106465 vector106
+8010697b vector220
+801063d5 vector90
+801066cf vector163
+80106a23 vector234
 80102f10 log_write
-801042e0 acquiresleep
-80104fe0 sys_unlink
-80105f49 vector62
-80105dfc vector25
-801064e3 vector198
-80106153 vector120
+80104650 acquiresleep
+80105350 sys_unlink
+801062d9 vector62
+8010618c vector25
+80106873 vector198
+801064e3 vector120
 8010a48c _binary_entryother_start
 80102560 kinit1
-80105edd vector50
-80105da4 vector15
-801062af vector151
-80106006 vector83
-8010603c vector89
-80106033 vector88
-80105950 trap
-80105840 sys_uptime
-801063ff vector179
-80105e4d vector34
-80105eb9 vector46
-801061e3 vector134
-8010660f vector223
-80114ca0 idt
-801065d3 vector218
+8010626d vector50
+80106134 vector15
+8010663f vector151
+80106396 vector83
+801063cc vector89
+801063c3 vector88
+80105ce0 trap
+80105bb0 sys_uptime
+8010678f vector179
+801061dd vector34
+80106249 vector46
+80106573 vector134
+8010699f vector223
+80114da0 idt
+80106963 vector218
 801038b0 pinit
-80106da0 deallocuvm
-80106627 vector225
+80107130 deallocuvm
+801069b7 vector225
 801028a0 lapicid
-8010645f vector187
+801067ef vector187
 80103a90 growproc
-80104380 holdingsleep
+801046f0 holdingsleep
 80112d00 ncpu
-80105e29 vector30
+801061b9 vector30
 80103990 userinit
 801000d0 bread
-80106192 vector127
+80106522 vector127
 801036a0 piperead
-801154a0 ticks
-8010649b vector192
-80106363 vector166
+801155a0 ticks
+8010682b vector192
+801066f3 vector166
 80100a30 consoleinit
-80105fc7 vector76
-80105fbe vector75
+80106357 vector76
+8010634e vector75
 801021e0 ideintr
-801064bf vector195
-801062a3 vector150
-80105f25 vector58
-8010673b vector248
-8010616e vector123
-8010607b vector96
-80105e32 vector31
-8010651f vector203
-8010621f vector139
-801062c7 vector153
-8010634b vector164
+8010684f vector195
+80106633 vector150
+801062b5 vector58
+80106acb vector248
+801064fe vector123
+8010640b vector96
+801061c2 vector31
+801068af vector203
+801065af vector139
+80106657 vector153
+801066db vector164
 801041d0 procdump
-8010615c vector121
-80105ce0 uartputc
-80105d56 vector5
-8010636f vector167
-801062df vector155
-80106747 vector249
+801064ec vector121
+80106070 uartputc
+801060e6 vector5
+801066ff vector167
+8010666f vector155
+80106ad7 vector249
 801001f0 brelse
-80106753 vector250
-80106177 vector124
-801060f9 vector110
-8010652b vector204
+80106ae3 vector250
+80106507 vector124
+80106489 vector110
+801068bb vector204
 80101760 ilock
-801054c0 sys_exec
-80106207 vector137
+80105830 sys_exec
+80106597 vector137
 8010a460 _binary_initcode_start
-80104893 swtch
-8010672f vector247
-80105de1 vector22
-80106513 vector202
-80106960 seginit
+80104c03 swtch
+80106abf vector247
+80106171 vector22
+801068a3 vector202
+80106cf0 seginit
 80101a00 iunlockput
-80105fa3 vector72
-80105f0a vector55
-80106189 vector126
-80105f64 vector65
-80105e17 vector28
+80106333 vector72
+8010629a vector55
+80106519 vector126
+801062f4 vector65
+801061a7 vector28
 8010a516 _binary_entryother_end
-80106387 vector169
+80106717 vector169
 801001b0 bwrite
-80106687 vector233
-80105920 idtinit
+80106a17 vector233
+80105cb0 idtinit
 80103d90 exit
-801056d0 sys_wait
-801056b0 sys_exit
+80105a40 sys_wait
+80105a20 sys_exit
 80101f70 dirlink
 0000002c _binary_initcode_size
-8010627f vector147
-801042a0 initsleeplock
+8010660f vector147
+80104610 initsleeplock
 80102150 ideinit
-80106ba0 loaduvm
-801060c3 vector104
-8010612f vector116
+80106f30 loaduvm
+80106453 vector104
+801064bf vector116
 80112d20 ptable
 80102430 ioapicenable
-801044b0 popcli
+80104820 popcli
 8010a008 vectors
-80105eef vector52
-80105db6 vector17
-8010643b vector184
-80104870 strlen
-801055c0 sys_pipe
+8010627f vector52
+80106146 vector17
+801067cb vector184
+80104be0 strlen
+80105930 sys_pipe
 80101540 iinit
 801033d0 picinit
-8010654f vector207
-80106b20 inituvm
-80106483 vector190
-801066cf vector239
-80106069 vector94
-80106060 vector93
+801068df vector207
+80106eb0 inituvm
+80106813 vector190
+80105bf0 sys_thread_join
+80106a5f vector239
+801063f9 vector94
+801063f0 vector93
 80102c90 initlog
-8010646b vector188
-80105ecb vector48
+801067fb vector188
+801042a0 thread_create
+8010625b vector48
 80102280 iderw
-801065df vector219
-8010628b vector148
-801065f7 vector221
+80105c00 sys_thread_exit
+8010696f vector219
+8010661b vector148
+80106987 vector221
 80102630 kalloc
 80110960 devsw
-80105720 sys_getpid
-80105feb vector80
-8010639f vector171
-801062d3 vector154
-80105e5f vector36
+80105a90 sys_getpid
+8010637b vector80
+8010672f vector171
+80106663 vector154
+801061ef vector36
 801033f0 pipealloc
-8010669f vector235
-801060cc vector105
-80105410 sys_chdir
+80106a2f vector235
+8010645c vector105
+80105780 sys_chdir
 801109e0 icache
-80106273 vector146
-8010648f vector191
-801060ba vector103
-80105370 sys_mknod
+80106603 vector146
+8010681f vector191
+8010644a vector103
+80104410 thread_join
+801056e0 sys_mknod
 801028f0 lapicstartap
-80106a10 switchuvm
-80104460 pushcli
+80106da0 switchuvm
+801047d0 pushcli
 801025d0 kinit2
-80105d88 vector11
-80105d9d vector14
+80106118 vector11
+8010612d vector14
 80100fa0 filestat
Binary files xv6-public-original/_kill and xv6-public/_kill differ
diff -ruN xv6-public-original/kill.asm xv6-public/kill.asm
--- xv6-public-original/kill.asm	2022-08-13 16:28:54.340333000 +0530
+++ xv6-public/kill.asm	2022-09-05 20:56:49.786960000 +0530
@@ -52,9 +52,9 @@
     printf(2, "usage: kill pid...\n");
   51:	50                   	push   %eax
   52:	50                   	push   %eax
-  53:	68 98 07 00 00       	push   $0x798
+  53:	68 a8 07 00 00       	push   $0x7a8
   58:	6a 02                	push   $0x2
-  5a:	e8 d1 03 00 00       	call   430 <printf>
+  5a:	e8 e1 03 00 00       	call   440 <printf>
     exit();
   5f:	e8 6f 02 00 00       	call   2d3 <exit>
   64:	66 90                	xchg   %ax,%ax
@@ -590,609 +590,623 @@
  36b:	b8 0e 00 00 00       	mov    $0xe,%eax
  370:	cd 40                	int    $0x40
  372:	c3                   	ret    
- 373:	66 90                	xchg   %ax,%ax
- 375:	66 90                	xchg   %ax,%ax
- 377:	66 90                	xchg   %ax,%ax
- 379:	66 90                	xchg   %ax,%ax
- 37b:	66 90                	xchg   %ax,%ax
- 37d:	66 90                	xchg   %ax,%ax
- 37f:	90                   	nop
 
-00000380 <printint>:
+00000373 <thread_create>:
+SYSCALL(thread_create)
+ 373:	b8 16 00 00 00       	mov    $0x16,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <thread_join>:
+SYSCALL(thread_join)
+ 37b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <thread_exit>:
+SYSCALL(thread_exit)
+ 383:	b8 18 00 00 00       	mov    $0x18,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+ 38b:	66 90                	xchg   %ax,%ax
+ 38d:	66 90                	xchg   %ax,%ax
+ 38f:	90                   	nop
+
+00000390 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 380:	55                   	push   %ebp
- 381:	89 e5                	mov    %esp,%ebp
- 383:	57                   	push   %edi
- 384:	56                   	push   %esi
- 385:	53                   	push   %ebx
- 386:	83 ec 3c             	sub    $0x3c,%esp
- 389:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 390:	55                   	push   %ebp
+ 391:	89 e5                	mov    %esp,%ebp
+ 393:	57                   	push   %edi
+ 394:	56                   	push   %esi
+ 395:	53                   	push   %ebx
+ 396:	83 ec 3c             	sub    $0x3c,%esp
+ 399:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 38c:	89 d1                	mov    %edx,%ecx
+ 39c:	89 d1                	mov    %edx,%ecx
 {
- 38e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 39e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 391:	85 d2                	test   %edx,%edx
- 393:	0f 89 7f 00 00 00    	jns    418 <printint+0x98>
- 399:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 39d:	74 79                	je     418 <printint+0x98>
+ 3a1:	85 d2                	test   %edx,%edx
+ 3a3:	0f 89 7f 00 00 00    	jns    428 <printint+0x98>
+ 3a9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3ad:	74 79                	je     428 <printint+0x98>
     neg = 1;
- 39f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 3af:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 3a6:	f7 d9                	neg    %ecx
+ 3b6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 3a8:	31 db                	xor    %ebx,%ebx
- 3aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 3ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 3b8:	31 db                	xor    %ebx,%ebx
+ 3ba:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3bd:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 3b0:	89 c8                	mov    %ecx,%eax
- 3b2:	31 d2                	xor    %edx,%edx
- 3b4:	89 cf                	mov    %ecx,%edi
- 3b6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3b9:	0f b6 92 b4 07 00 00 	movzbl 0x7b4(%edx),%edx
- 3c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3c3:	89 d8                	mov    %ebx,%eax
- 3c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 3c0:	89 c8                	mov    %ecx,%eax
+ 3c2:	31 d2                	xor    %edx,%edx
+ 3c4:	89 cf                	mov    %ecx,%edi
+ 3c6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3c9:	0f b6 92 c4 07 00 00 	movzbl 0x7c4(%edx),%edx
+ 3d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3d3:	89 d8                	mov    %ebx,%eax
+ 3d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 3c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 3d8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 3cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 3db:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 3ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3d1:	76 dd                	jbe    3b0 <printint+0x30>
+ 3de:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3e1:	76 dd                	jbe    3c0 <printint+0x30>
   if(neg)
- 3d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3d6:	85 c9                	test   %ecx,%ecx
- 3d8:	74 0c                	je     3e6 <printint+0x66>
+ 3e3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3e6:	85 c9                	test   %ecx,%ecx
+ 3e8:	74 0c                	je     3f6 <printint+0x66>
     buf[i++] = '-';
- 3da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 3ea:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 3df:	89 d8                	mov    %ebx,%eax
+ 3ef:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 3e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 3f1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 3e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3ed:	eb 07                	jmp    3f6 <printint+0x76>
- 3ef:	90                   	nop
- 3f0:	0f b6 13             	movzbl (%ebx),%edx
- 3f3:	83 eb 01             	sub    $0x1,%ebx
+ 3f6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3f9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3fd:	eb 07                	jmp    406 <printint+0x76>
+ 3ff:	90                   	nop
+ 400:	0f b6 13             	movzbl (%ebx),%edx
+ 403:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 3f6:	83 ec 04             	sub    $0x4,%esp
- 3f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 3fc:	6a 01                	push   $0x1
- 3fe:	56                   	push   %esi
- 3ff:	57                   	push   %edi
- 400:	e8 ee fe ff ff       	call   2f3 <write>
+ 406:	83 ec 04             	sub    $0x4,%esp
+ 409:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 40c:	6a 01                	push   $0x1
+ 40e:	56                   	push   %esi
+ 40f:	57                   	push   %edi
+ 410:	e8 de fe ff ff       	call   2f3 <write>
   while(--i >= 0)
- 405:	83 c4 10             	add    $0x10,%esp
- 408:	39 de                	cmp    %ebx,%esi
- 40a:	75 e4                	jne    3f0 <printint+0x70>
+ 415:	83 c4 10             	add    $0x10,%esp
+ 418:	39 de                	cmp    %ebx,%esi
+ 41a:	75 e4                	jne    400 <printint+0x70>
     putc(fd, buf[i]);
 }
- 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 40f:	5b                   	pop    %ebx
- 410:	5e                   	pop    %esi
- 411:	5f                   	pop    %edi
- 412:	5d                   	pop    %ebp
- 413:	c3                   	ret    
- 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 41c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 41f:	5b                   	pop    %ebx
+ 420:	5e                   	pop    %esi
+ 421:	5f                   	pop    %edi
+ 422:	5d                   	pop    %ebp
+ 423:	c3                   	ret    
+ 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 418:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 41f:	eb 87                	jmp    3a8 <printint+0x28>
- 421:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 428:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 42f:	90                   	nop
+ 428:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 42f:	eb 87                	jmp    3b8 <printint+0x28>
+ 431:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 438:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 43f:	90                   	nop
 
-00000430 <printf>:
+00000440 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 430:	f3 0f 1e fb          	endbr32 
- 434:	55                   	push   %ebp
- 435:	89 e5                	mov    %esp,%ebp
- 437:	57                   	push   %edi
- 438:	56                   	push   %esi
- 439:	53                   	push   %ebx
- 43a:	83 ec 2c             	sub    $0x2c,%esp
+ 440:	f3 0f 1e fb          	endbr32 
+ 444:	55                   	push   %ebp
+ 445:	89 e5                	mov    %esp,%ebp
+ 447:	57                   	push   %edi
+ 448:	56                   	push   %esi
+ 449:	53                   	push   %ebx
+ 44a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 43d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 440:	0f b6 1e             	movzbl (%esi),%ebx
- 443:	84 db                	test   %bl,%bl
- 445:	0f 84 b4 00 00 00    	je     4ff <printf+0xcf>
+ 44d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 450:	0f b6 1e             	movzbl (%esi),%ebx
+ 453:	84 db                	test   %bl,%bl
+ 455:	0f 84 b4 00 00 00    	je     50f <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 44b:	8d 45 10             	lea    0x10(%ebp),%eax
- 44e:	83 c6 01             	add    $0x1,%esi
+ 45b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 45e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 451:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 461:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 454:	31 d2                	xor    %edx,%edx
+ 464:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 456:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 459:	eb 33                	jmp    48e <printf+0x5e>
- 45b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 45f:	90                   	nop
- 460:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 466:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 469:	eb 33                	jmp    49e <printf+0x5e>
+ 46b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 46f:	90                   	nop
+ 470:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 463:	ba 25 00 00 00       	mov    $0x25,%edx
+ 473:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 468:	83 f8 25             	cmp    $0x25,%eax
- 46b:	74 17                	je     484 <printf+0x54>
+ 478:	83 f8 25             	cmp    $0x25,%eax
+ 47b:	74 17                	je     494 <printf+0x54>
   write(fd, &c, 1);
- 46d:	83 ec 04             	sub    $0x4,%esp
- 470:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 473:	6a 01                	push   $0x1
- 475:	57                   	push   %edi
- 476:	ff 75 08             	pushl  0x8(%ebp)
- 479:	e8 75 fe ff ff       	call   2f3 <write>
- 47e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 47d:	83 ec 04             	sub    $0x4,%esp
+ 480:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 483:	6a 01                	push   $0x1
+ 485:	57                   	push   %edi
+ 486:	ff 75 08             	pushl  0x8(%ebp)
+ 489:	e8 65 fe ff ff       	call   2f3 <write>
+ 48e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 481:	83 c4 10             	add    $0x10,%esp
+ 491:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 484:	0f b6 1e             	movzbl (%esi),%ebx
- 487:	83 c6 01             	add    $0x1,%esi
- 48a:	84 db                	test   %bl,%bl
- 48c:	74 71                	je     4ff <printf+0xcf>
+ 494:	0f b6 1e             	movzbl (%esi),%ebx
+ 497:	83 c6 01             	add    $0x1,%esi
+ 49a:	84 db                	test   %bl,%bl
+ 49c:	74 71                	je     50f <printf+0xcf>
     c = fmt[i] & 0xff;
- 48e:	0f be cb             	movsbl %bl,%ecx
- 491:	0f b6 c3             	movzbl %bl,%eax
+ 49e:	0f be cb             	movsbl %bl,%ecx
+ 4a1:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 494:	85 d2                	test   %edx,%edx
- 496:	74 c8                	je     460 <printf+0x30>
+ 4a4:	85 d2                	test   %edx,%edx
+ 4a6:	74 c8                	je     470 <printf+0x30>
       }
     } else if(state == '%'){
- 498:	83 fa 25             	cmp    $0x25,%edx
- 49b:	75 e7                	jne    484 <printf+0x54>
+ 4a8:	83 fa 25             	cmp    $0x25,%edx
+ 4ab:	75 e7                	jne    494 <printf+0x54>
       if(c == 'd'){
- 49d:	83 f8 64             	cmp    $0x64,%eax
- 4a0:	0f 84 9a 00 00 00    	je     540 <printf+0x110>
+ 4ad:	83 f8 64             	cmp    $0x64,%eax
+ 4b0:	0f 84 9a 00 00 00    	je     550 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 4a6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 4ac:	83 f9 70             	cmp    $0x70,%ecx
- 4af:	74 5f                	je     510 <printf+0xe0>
+ 4b6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4bc:	83 f9 70             	cmp    $0x70,%ecx
+ 4bf:	74 5f                	je     520 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 4b1:	83 f8 73             	cmp    $0x73,%eax
- 4b4:	0f 84 d6 00 00 00    	je     590 <printf+0x160>
+ 4c1:	83 f8 73             	cmp    $0x73,%eax
+ 4c4:	0f 84 d6 00 00 00    	je     5a0 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 4ba:	83 f8 63             	cmp    $0x63,%eax
- 4bd:	0f 84 8d 00 00 00    	je     550 <printf+0x120>
+ 4ca:	83 f8 63             	cmp    $0x63,%eax
+ 4cd:	0f 84 8d 00 00 00    	je     560 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 4c3:	83 f8 25             	cmp    $0x25,%eax
- 4c6:	0f 84 b4 00 00 00    	je     580 <printf+0x150>
+ 4d3:	83 f8 25             	cmp    $0x25,%eax
+ 4d6:	0f 84 b4 00 00 00    	je     590 <printf+0x150>
   write(fd, &c, 1);
- 4cc:	83 ec 04             	sub    $0x4,%esp
- 4cf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4d3:	6a 01                	push   $0x1
- 4d5:	57                   	push   %edi
- 4d6:	ff 75 08             	pushl  0x8(%ebp)
- 4d9:	e8 15 fe ff ff       	call   2f3 <write>
+ 4dc:	83 ec 04             	sub    $0x4,%esp
+ 4df:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4e3:	6a 01                	push   $0x1
+ 4e5:	57                   	push   %edi
+ 4e6:	ff 75 08             	pushl  0x8(%ebp)
+ 4e9:	e8 05 fe ff ff       	call   2f3 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 4de:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4ee:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 4e1:	83 c4 0c             	add    $0xc,%esp
- 4e4:	6a 01                	push   $0x1
- 4e6:	83 c6 01             	add    $0x1,%esi
- 4e9:	57                   	push   %edi
- 4ea:	ff 75 08             	pushl  0x8(%ebp)
- 4ed:	e8 01 fe ff ff       	call   2f3 <write>
+ 4f1:	83 c4 0c             	add    $0xc,%esp
+ 4f4:	6a 01                	push   $0x1
+ 4f6:	83 c6 01             	add    $0x1,%esi
+ 4f9:	57                   	push   %edi
+ 4fa:	ff 75 08             	pushl  0x8(%ebp)
+ 4fd:	e8 f1 fd ff ff       	call   2f3 <write>
   for(i = 0; fmt[i]; i++){
- 4f2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 502:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 4f6:	83 c4 10             	add    $0x10,%esp
+ 506:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 4f9:	31 d2                	xor    %edx,%edx
+ 509:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 4fb:	84 db                	test   %bl,%bl
- 4fd:	75 8f                	jne    48e <printf+0x5e>
+ 50b:	84 db                	test   %bl,%bl
+ 50d:	75 8f                	jne    49e <printf+0x5e>
     }
   }
 }
- 4ff:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 502:	5b                   	pop    %ebx
- 503:	5e                   	pop    %esi
- 504:	5f                   	pop    %edi
- 505:	5d                   	pop    %ebp
- 506:	c3                   	ret    
- 507:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 50e:	66 90                	xchg   %ax,%ax
+ 50f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 512:	5b                   	pop    %ebx
+ 513:	5e                   	pop    %esi
+ 514:	5f                   	pop    %edi
+ 515:	5d                   	pop    %ebp
+ 516:	c3                   	ret    
+ 517:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 51e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 510:	83 ec 0c             	sub    $0xc,%esp
- 513:	b9 10 00 00 00       	mov    $0x10,%ecx
- 518:	6a 00                	push   $0x0
- 51a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 51d:	8b 45 08             	mov    0x8(%ebp),%eax
- 520:	8b 13                	mov    (%ebx),%edx
- 522:	e8 59 fe ff ff       	call   380 <printint>
+ 520:	83 ec 0c             	sub    $0xc,%esp
+ 523:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 528:	6a 00                	push   $0x0
+ 52a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 52d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 530:	8b 13                	mov    (%ebx),%edx
+ 532:	e8 59 fe ff ff       	call   390 <printint>
         ap++;
- 527:	89 d8                	mov    %ebx,%eax
- 529:	83 c4 10             	add    $0x10,%esp
+ 537:	89 d8                	mov    %ebx,%eax
+ 539:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 52c:	31 d2                	xor    %edx,%edx
+ 53c:	31 d2                	xor    %edx,%edx
         ap++;
- 52e:	83 c0 04             	add    $0x4,%eax
- 531:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 534:	e9 4b ff ff ff       	jmp    484 <printf+0x54>
- 539:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 53e:	83 c0 04             	add    $0x4,%eax
+ 541:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 544:	e9 4b ff ff ff       	jmp    494 <printf+0x54>
+ 549:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 540:	83 ec 0c             	sub    $0xc,%esp
- 543:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 548:	6a 01                	push   $0x1
- 54a:	eb ce                	jmp    51a <printf+0xea>
- 54c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 550:	83 ec 0c             	sub    $0xc,%esp
+ 553:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 558:	6a 01                	push   $0x1
+ 55a:	eb ce                	jmp    52a <printf+0xea>
+ 55c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 550:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 560:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 553:	83 ec 04             	sub    $0x4,%esp
+ 563:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 556:	8b 03                	mov    (%ebx),%eax
+ 566:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 558:	6a 01                	push   $0x1
+ 568:	6a 01                	push   $0x1
         ap++;
- 55a:	83 c3 04             	add    $0x4,%ebx
+ 56a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 55d:	57                   	push   %edi
- 55e:	ff 75 08             	pushl  0x8(%ebp)
+ 56d:	57                   	push   %edi
+ 56e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 561:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 571:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 564:	e8 8a fd ff ff       	call   2f3 <write>
+ 574:	e8 7a fd ff ff       	call   2f3 <write>
         ap++;
- 569:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 56c:	83 c4 10             	add    $0x10,%esp
+ 579:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 57c:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 56f:	31 d2                	xor    %edx,%edx
- 571:	e9 0e ff ff ff       	jmp    484 <printf+0x54>
- 576:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 57d:	8d 76 00             	lea    0x0(%esi),%esi
+ 57f:	31 d2                	xor    %edx,%edx
+ 581:	e9 0e ff ff ff       	jmp    494 <printf+0x54>
+ 586:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 58d:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 580:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 590:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 583:	83 ec 04             	sub    $0x4,%esp
- 586:	e9 59 ff ff ff       	jmp    4e4 <printf+0xb4>
- 58b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 58f:	90                   	nop
+ 593:	83 ec 04             	sub    $0x4,%esp
+ 596:	e9 59 ff ff ff       	jmp    4f4 <printf+0xb4>
+ 59b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 59f:	90                   	nop
         s = (char*)*ap;
- 590:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 593:	8b 18                	mov    (%eax),%ebx
+ 5a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5a3:	8b 18                	mov    (%eax),%ebx
         ap++;
- 595:	83 c0 04             	add    $0x4,%eax
- 598:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5a5:	83 c0 04             	add    $0x4,%eax
+ 5a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 59b:	85 db                	test   %ebx,%ebx
- 59d:	74 17                	je     5b6 <printf+0x186>
+ 5ab:	85 db                	test   %ebx,%ebx
+ 5ad:	74 17                	je     5c6 <printf+0x186>
         while(*s != 0){
- 59f:	0f b6 03             	movzbl (%ebx),%eax
+ 5af:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 5a2:	31 d2                	xor    %edx,%edx
+ 5b2:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 5a4:	84 c0                	test   %al,%al
- 5a6:	0f 84 d8 fe ff ff    	je     484 <printf+0x54>
- 5ac:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5af:	89 de                	mov    %ebx,%esi
- 5b1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5b4:	eb 1a                	jmp    5d0 <printf+0x1a0>
+ 5b4:	84 c0                	test   %al,%al
+ 5b6:	0f 84 d8 fe ff ff    	je     494 <printf+0x54>
+ 5bc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5bf:	89 de                	mov    %ebx,%esi
+ 5c1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5c4:	eb 1a                	jmp    5e0 <printf+0x1a0>
           s = "(null)";
- 5b6:	bb ac 07 00 00       	mov    $0x7ac,%ebx
+ 5c6:	bb bc 07 00 00       	mov    $0x7bc,%ebx
         while(*s != 0){
- 5bb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5be:	b8 28 00 00 00       	mov    $0x28,%eax
- 5c3:	89 de                	mov    %ebx,%esi
- 5c5:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5cf:	90                   	nop
+ 5cb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ce:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5d3:	89 de                	mov    %ebx,%esi
+ 5d5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5df:	90                   	nop
   write(fd, &c, 1);
- 5d0:	83 ec 04             	sub    $0x4,%esp
+ 5e0:	83 ec 04             	sub    $0x4,%esp
           s++;
- 5d3:	83 c6 01             	add    $0x1,%esi
- 5d6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 5e3:	83 c6 01             	add    $0x1,%esi
+ 5e6:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 5d9:	6a 01                	push   $0x1
- 5db:	57                   	push   %edi
- 5dc:	53                   	push   %ebx
- 5dd:	e8 11 fd ff ff       	call   2f3 <write>
+ 5e9:	6a 01                	push   $0x1
+ 5eb:	57                   	push   %edi
+ 5ec:	53                   	push   %ebx
+ 5ed:	e8 01 fd ff ff       	call   2f3 <write>
         while(*s != 0){
- 5e2:	0f b6 06             	movzbl (%esi),%eax
- 5e5:	83 c4 10             	add    $0x10,%esp
- 5e8:	84 c0                	test   %al,%al
- 5ea:	75 e4                	jne    5d0 <printf+0x1a0>
- 5ec:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 5f2:	0f b6 06             	movzbl (%esi),%eax
+ 5f5:	83 c4 10             	add    $0x10,%esp
+ 5f8:	84 c0                	test   %al,%al
+ 5fa:	75 e4                	jne    5e0 <printf+0x1a0>
+ 5fc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 5ef:	31 d2                	xor    %edx,%edx
- 5f1:	e9 8e fe ff ff       	jmp    484 <printf+0x54>
- 5f6:	66 90                	xchg   %ax,%ax
- 5f8:	66 90                	xchg   %ax,%ax
- 5fa:	66 90                	xchg   %ax,%ax
- 5fc:	66 90                	xchg   %ax,%ax
- 5fe:	66 90                	xchg   %ax,%ax
+ 5ff:	31 d2                	xor    %edx,%edx
+ 601:	e9 8e fe ff ff       	jmp    494 <printf+0x54>
+ 606:	66 90                	xchg   %ax,%ax
+ 608:	66 90                	xchg   %ax,%ax
+ 60a:	66 90                	xchg   %ax,%ax
+ 60c:	66 90                	xchg   %ax,%ax
+ 60e:	66 90                	xchg   %ax,%ax
 
-00000600 <free>:
+00000610 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 600:	f3 0f 1e fb          	endbr32 
- 604:	55                   	push   %ebp
+ 610:	f3 0f 1e fb          	endbr32 
+ 614:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 605:	a1 64 0a 00 00       	mov    0xa64,%eax
+ 615:	a1 74 0a 00 00       	mov    0xa74,%eax
 {
- 60a:	89 e5                	mov    %esp,%ebp
- 60c:	57                   	push   %edi
- 60d:	56                   	push   %esi
- 60e:	53                   	push   %ebx
- 60f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 612:	8b 10                	mov    (%eax),%edx
+ 61a:	89 e5                	mov    %esp,%ebp
+ 61c:	57                   	push   %edi
+ 61d:	56                   	push   %esi
+ 61e:	53                   	push   %ebx
+ 61f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 622:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 614:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 624:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 617:	39 c8                	cmp    %ecx,%eax
- 619:	73 15                	jae    630 <free+0x30>
- 61b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 61f:	90                   	nop
- 620:	39 d1                	cmp    %edx,%ecx
- 622:	72 14                	jb     638 <free+0x38>
+ 627:	39 c8                	cmp    %ecx,%eax
+ 629:	73 15                	jae    640 <free+0x30>
+ 62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 62f:	90                   	nop
+ 630:	39 d1                	cmp    %edx,%ecx
+ 632:	72 14                	jb     648 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 624:	39 d0                	cmp    %edx,%eax
- 626:	73 10                	jae    638 <free+0x38>
+ 634:	39 d0                	cmp    %edx,%eax
+ 636:	73 10                	jae    648 <free+0x38>
 {
- 628:	89 d0                	mov    %edx,%eax
+ 638:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 62a:	8b 10                	mov    (%eax),%edx
- 62c:	39 c8                	cmp    %ecx,%eax
- 62e:	72 f0                	jb     620 <free+0x20>
+ 63a:	8b 10                	mov    (%eax),%edx
+ 63c:	39 c8                	cmp    %ecx,%eax
+ 63e:	72 f0                	jb     630 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 630:	39 d0                	cmp    %edx,%eax
- 632:	72 f4                	jb     628 <free+0x28>
- 634:	39 d1                	cmp    %edx,%ecx
- 636:	73 f0                	jae    628 <free+0x28>
+ 640:	39 d0                	cmp    %edx,%eax
+ 642:	72 f4                	jb     638 <free+0x28>
+ 644:	39 d1                	cmp    %edx,%ecx
+ 646:	73 f0                	jae    638 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 638:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 63b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 63e:	39 fa                	cmp    %edi,%edx
- 640:	74 1e                	je     660 <free+0x60>
+ 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 64e:	39 fa                	cmp    %edi,%edx
+ 650:	74 1e                	je     670 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 642:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 652:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 645:	8b 50 04             	mov    0x4(%eax),%edx
- 648:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 64b:	39 f1                	cmp    %esi,%ecx
- 64d:	74 28                	je     677 <free+0x77>
+ 655:	8b 50 04             	mov    0x4(%eax),%edx
+ 658:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 65b:	39 f1                	cmp    %esi,%ecx
+ 65d:	74 28                	je     687 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 64f:	89 08                	mov    %ecx,(%eax)
+ 65f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 651:	5b                   	pop    %ebx
+ 661:	5b                   	pop    %ebx
   freep = p;
- 652:	a3 64 0a 00 00       	mov    %eax,0xa64
+ 662:	a3 74 0a 00 00       	mov    %eax,0xa74
 }
- 657:	5e                   	pop    %esi
- 658:	5f                   	pop    %edi
- 659:	5d                   	pop    %ebp
- 65a:	c3                   	ret    
- 65b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 65f:	90                   	nop
+ 667:	5e                   	pop    %esi
+ 668:	5f                   	pop    %edi
+ 669:	5d                   	pop    %ebp
+ 66a:	c3                   	ret    
+ 66b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 66f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 660:	03 72 04             	add    0x4(%edx),%esi
- 663:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 670:	03 72 04             	add    0x4(%edx),%esi
+ 673:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 666:	8b 10                	mov    (%eax),%edx
- 668:	8b 12                	mov    (%edx),%edx
- 66a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 676:	8b 10                	mov    (%eax),%edx
+ 678:	8b 12                	mov    (%edx),%edx
+ 67a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 66d:	8b 50 04             	mov    0x4(%eax),%edx
- 670:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 673:	39 f1                	cmp    %esi,%ecx
- 675:	75 d8                	jne    64f <free+0x4f>
+ 67d:	8b 50 04             	mov    0x4(%eax),%edx
+ 680:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 683:	39 f1                	cmp    %esi,%ecx
+ 685:	75 d8                	jne    65f <free+0x4f>
     p->s.size += bp->s.size;
- 677:	03 53 fc             	add    -0x4(%ebx),%edx
+ 687:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 67a:	a3 64 0a 00 00       	mov    %eax,0xa64
+ 68a:	a3 74 0a 00 00       	mov    %eax,0xa74
     p->s.size += bp->s.size;
- 67f:	89 50 04             	mov    %edx,0x4(%eax)
+ 68f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 682:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 685:	89 10                	mov    %edx,(%eax)
+ 692:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 695:	89 10                	mov    %edx,(%eax)
 }
- 687:	5b                   	pop    %ebx
- 688:	5e                   	pop    %esi
- 689:	5f                   	pop    %edi
- 68a:	5d                   	pop    %ebp
- 68b:	c3                   	ret    
- 68c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 697:	5b                   	pop    %ebx
+ 698:	5e                   	pop    %esi
+ 699:	5f                   	pop    %edi
+ 69a:	5d                   	pop    %ebp
+ 69b:	c3                   	ret    
+ 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000690 <malloc>:
+000006a0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 690:	f3 0f 1e fb          	endbr32 
- 694:	55                   	push   %ebp
- 695:	89 e5                	mov    %esp,%ebp
- 697:	57                   	push   %edi
- 698:	56                   	push   %esi
- 699:	53                   	push   %ebx
- 69a:	83 ec 1c             	sub    $0x1c,%esp
+ 6a0:	f3 0f 1e fb          	endbr32 
+ 6a4:	55                   	push   %ebp
+ 6a5:	89 e5                	mov    %esp,%ebp
+ 6a7:	57                   	push   %edi
+ 6a8:	56                   	push   %esi
+ 6a9:	53                   	push   %ebx
+ 6aa:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 69d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6ad:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 6a0:	8b 3d 64 0a 00 00    	mov    0xa64,%edi
+ 6b0:	8b 3d 74 0a 00 00    	mov    0xa74,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6a6:	8d 70 07             	lea    0x7(%eax),%esi
- 6a9:	c1 ee 03             	shr    $0x3,%esi
- 6ac:	83 c6 01             	add    $0x1,%esi
+ 6b6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6b9:	c1 ee 03             	shr    $0x3,%esi
+ 6bc:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 6af:	85 ff                	test   %edi,%edi
- 6b1:	0f 84 a9 00 00 00    	je     760 <malloc+0xd0>
+ 6bf:	85 ff                	test   %edi,%edi
+ 6c1:	0f 84 a9 00 00 00    	je     770 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6b7:	8b 07                	mov    (%edi),%eax
+ 6c7:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 6b9:	8b 48 04             	mov    0x4(%eax),%ecx
- 6bc:	39 f1                	cmp    %esi,%ecx
- 6be:	73 6d                	jae    72d <malloc+0x9d>
- 6c0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 6c6:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6cb:	0f 43 de             	cmovae %esi,%ebx
+ 6c9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6cc:	39 f1                	cmp    %esi,%ecx
+ 6ce:	73 6d                	jae    73d <malloc+0x9d>
+ 6d0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6d6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6db:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 6ce:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 6d5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 6d8:	eb 17                	jmp    6f1 <malloc+0x61>
- 6da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6de:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6e5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6e8:	eb 17                	jmp    701 <malloc+0x61>
+ 6ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6e0:	8b 10                	mov    (%eax),%edx
+ 6f0:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 6e2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 6e5:	39 f1                	cmp    %esi,%ecx
- 6e7:	73 4f                	jae    738 <malloc+0xa8>
- 6e9:	8b 3d 64 0a 00 00    	mov    0xa64,%edi
- 6ef:	89 d0                	mov    %edx,%eax
+ 6f2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6f5:	39 f1                	cmp    %esi,%ecx
+ 6f7:	73 4f                	jae    748 <malloc+0xa8>
+ 6f9:	8b 3d 74 0a 00 00    	mov    0xa74,%edi
+ 6ff:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6f1:	39 c7                	cmp    %eax,%edi
- 6f3:	75 eb                	jne    6e0 <malloc+0x50>
+ 701:	39 c7                	cmp    %eax,%edi
+ 703:	75 eb                	jne    6f0 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 6f5:	83 ec 0c             	sub    $0xc,%esp
- 6f8:	ff 75 e4             	pushl  -0x1c(%ebp)
- 6fb:	e8 5b fc ff ff       	call   35b <sbrk>
+ 705:	83 ec 0c             	sub    $0xc,%esp
+ 708:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 70b:	e8 4b fc ff ff       	call   35b <sbrk>
   if(p == (char*)-1)
- 700:	83 c4 10             	add    $0x10,%esp
- 703:	83 f8 ff             	cmp    $0xffffffff,%eax
- 706:	74 1b                	je     723 <malloc+0x93>
+ 710:	83 c4 10             	add    $0x10,%esp
+ 713:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 716:	74 1b                	je     733 <malloc+0x93>
   hp->s.size = nu;
- 708:	89 58 04             	mov    %ebx,0x4(%eax)
+ 718:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 70b:	83 ec 0c             	sub    $0xc,%esp
- 70e:	83 c0 08             	add    $0x8,%eax
- 711:	50                   	push   %eax
- 712:	e8 e9 fe ff ff       	call   600 <free>
+ 71b:	83 ec 0c             	sub    $0xc,%esp
+ 71e:	83 c0 08             	add    $0x8,%eax
+ 721:	50                   	push   %eax
+ 722:	e8 e9 fe ff ff       	call   610 <free>
   return freep;
- 717:	a1 64 0a 00 00       	mov    0xa64,%eax
+ 727:	a1 74 0a 00 00       	mov    0xa74,%eax
       if((p = morecore(nunits)) == 0)
- 71c:	83 c4 10             	add    $0x10,%esp
- 71f:	85 c0                	test   %eax,%eax
- 721:	75 bd                	jne    6e0 <malloc+0x50>
+ 72c:	83 c4 10             	add    $0x10,%esp
+ 72f:	85 c0                	test   %eax,%eax
+ 731:	75 bd                	jne    6f0 <malloc+0x50>
         return 0;
   }
 }
- 723:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 733:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 726:	31 c0                	xor    %eax,%eax
+ 736:	31 c0                	xor    %eax,%eax
 }
- 728:	5b                   	pop    %ebx
- 729:	5e                   	pop    %esi
- 72a:	5f                   	pop    %edi
- 72b:	5d                   	pop    %ebp
- 72c:	c3                   	ret    
+ 738:	5b                   	pop    %ebx
+ 739:	5e                   	pop    %esi
+ 73a:	5f                   	pop    %edi
+ 73b:	5d                   	pop    %ebp
+ 73c:	c3                   	ret    
     if(p->s.size >= nunits){
- 72d:	89 c2                	mov    %eax,%edx
- 72f:	89 f8                	mov    %edi,%eax
- 731:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 73d:	89 c2                	mov    %eax,%edx
+ 73f:	89 f8                	mov    %edi,%eax
+ 741:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 738:	39 ce                	cmp    %ecx,%esi
- 73a:	74 54                	je     790 <malloc+0x100>
+ 748:	39 ce                	cmp    %ecx,%esi
+ 74a:	74 54                	je     7a0 <malloc+0x100>
         p->s.size -= nunits;
- 73c:	29 f1                	sub    %esi,%ecx
- 73e:	89 4a 04             	mov    %ecx,0x4(%edx)
+ 74c:	29 f1                	sub    %esi,%ecx
+ 74e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- 741:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ 751:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- 744:	89 72 04             	mov    %esi,0x4(%edx)
+ 754:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 747:	a3 64 0a 00 00       	mov    %eax,0xa64
+ 757:	a3 74 0a 00 00       	mov    %eax,0xa74
 }
- 74c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 75c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 74f:	8d 42 08             	lea    0x8(%edx),%eax
+ 75f:	8d 42 08             	lea    0x8(%edx),%eax
 }
- 752:	5b                   	pop    %ebx
- 753:	5e                   	pop    %esi
- 754:	5f                   	pop    %edi
- 755:	5d                   	pop    %ebp
- 756:	c3                   	ret    
- 757:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 75e:	66 90                	xchg   %ax,%ax
+ 762:	5b                   	pop    %ebx
+ 763:	5e                   	pop    %esi
+ 764:	5f                   	pop    %edi
+ 765:	5d                   	pop    %ebp
+ 766:	c3                   	ret    
+ 767:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 76e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 760:	c7 05 64 0a 00 00 68 	movl   $0xa68,0xa64
- 767:	0a 00 00 
+ 770:	c7 05 74 0a 00 00 78 	movl   $0xa78,0xa74
+ 777:	0a 00 00 
     base.s.size = 0;
- 76a:	bf 68 0a 00 00       	mov    $0xa68,%edi
+ 77a:	bf 78 0a 00 00       	mov    $0xa78,%edi
     base.s.ptr = freep = prevp = &base;
- 76f:	c7 05 68 0a 00 00 68 	movl   $0xa68,0xa68
- 776:	0a 00 00 
+ 77f:	c7 05 78 0a 00 00 78 	movl   $0xa78,0xa78
+ 786:	0a 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 779:	89 f8                	mov    %edi,%eax
+ 789:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 77b:	c7 05 6c 0a 00 00 00 	movl   $0x0,0xa6c
- 782:	00 00 00 
+ 78b:	c7 05 7c 0a 00 00 00 	movl   $0x0,0xa7c
+ 792:	00 00 00 
     if(p->s.size >= nunits){
- 785:	e9 36 ff ff ff       	jmp    6c0 <malloc+0x30>
- 78a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 795:	e9 36 ff ff ff       	jmp    6d0 <malloc+0x30>
+ 79a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 790:	8b 0a                	mov    (%edx),%ecx
- 792:	89 08                	mov    %ecx,(%eax)
- 794:	eb b1                	jmp    747 <malloc+0xb7>
+ 7a0:	8b 0a                	mov    (%edx),%ecx
+ 7a2:	89 08                	mov    %ecx,(%eax)
+ 7a4:	eb b1                	jmp    757 <malloc+0xb7>
Binary files xv6-public-original/kill.o and xv6-public/kill.o differ
diff -ruN xv6-public-original/kill.sym xv6-public/kill.sym
--- xv6-public-original/kill.sym	2022-08-13 16:28:54.344332000 +0530
+++ xv6-public/kill.sym	2022-09-05 20:56:49.806960000 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000798 .rodata
-000007c8 .eh_frame
-00000a64 .bss
+000007a8 .rodata
+000007d8 .eh_frame
+00000a74 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,18 +13,19 @@
 00000000 kill.c
 00000000 ulib.c
 00000000 printf.c
-00000380 printint
-000007b4 digits.1085
+00000390 printint
+000007c4 digits.1094
 00000000 umalloc.c
-00000a64 freep
-00000a68 base
+00000a74 freep
+00000a78 base
 00000070 strcpy
-00000430 printf
+00000440 printf
+00000383 thread_exit
 000002a0 memmove
 0000031b mknod
 00000190 gets
 00000353 getpid
-00000690 malloc
+000006a0 malloc
 00000363 sleep
 000002e3 pipe
 000002f3 write
@@ -38,20 +39,22 @@
 000002cb fork
 0000035b sbrk
 0000036b uptime
-00000a64 __bss_start
+00000a74 __bss_start
 00000130 memset
 00000000 main
 000000a0 strcmp
 0000034b dup
 00000210 stat
-00000a64 _edata
-00000a70 _end
+00000a74 _edata
+00000a80 _end
 00000333 link
 000002d3 exit
 00000260 atoi
 000000f0 strlen
 00000313 open
 00000150 strchr
+00000373 thread_create
 0000033b mkdir
 000002fb close
-00000600 free
+0000037b thread_join
+00000610 free
Binary files xv6-public-original/lapic.o and xv6-public/lapic.o differ
Binary files xv6-public-original/_ln and xv6-public/_ln differ
diff -ruN xv6-public-original/ln.asm xv6-public/ln.asm
--- xv6-public-original/ln.asm	2022-08-13 16:28:54.404313000 +0530
+++ xv6-public/ln.asm	2022-09-05 20:56:49.886960000 +0530
@@ -28,9 +28,9 @@
     printf(2, "Usage: ln old new\n");
   1b:	52                   	push   %edx
   1c:	52                   	push   %edx
-  1d:	68 88 07 00 00       	push   $0x788
+  1d:	68 98 07 00 00       	push   $0x798
   22:	6a 02                	push   $0x2
-  24:	e8 f7 03 00 00       	call   420 <printf>
+  24:	e8 07 04 00 00       	call   430 <printf>
     exit();
   29:	e8 95 02 00 00       	call   2c3 <exit>
   }
@@ -49,9 +49,9 @@
     printf(2, "link %s %s: failed\n", argv[1], argv[2]);
   47:	ff 73 08             	pushl  0x8(%ebx)
   4a:	ff 73 04             	pushl  0x4(%ebx)
-  4d:	68 9b 07 00 00       	push   $0x79b
+  4d:	68 ab 07 00 00       	push   $0x7ab
   52:	6a 02                	push   $0x2
-  54:	e8 c7 03 00 00       	call   420 <printf>
+  54:	e8 d7 03 00 00       	call   430 <printf>
   59:	83 c4 10             	add    $0x10,%esp
   5c:	eb e4                	jmp    42 <main+0x42>
   5e:	66 90                	xchg   %ax,%ax
@@ -582,609 +582,623 @@
  35b:	b8 0e 00 00 00       	mov    $0xe,%eax
  360:	cd 40                	int    $0x40
  362:	c3                   	ret    
- 363:	66 90                	xchg   %ax,%ax
- 365:	66 90                	xchg   %ax,%ax
- 367:	66 90                	xchg   %ax,%ax
- 369:	66 90                	xchg   %ax,%ax
- 36b:	66 90                	xchg   %ax,%ax
- 36d:	66 90                	xchg   %ax,%ax
- 36f:	90                   	nop
 
-00000370 <printint>:
+00000363 <thread_create>:
+SYSCALL(thread_create)
+ 363:	b8 16 00 00 00       	mov    $0x16,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <thread_join>:
+SYSCALL(thread_join)
+ 36b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <thread_exit>:
+SYSCALL(thread_exit)
+ 373:	b8 18 00 00 00       	mov    $0x18,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+ 37b:	66 90                	xchg   %ax,%ax
+ 37d:	66 90                	xchg   %ax,%ax
+ 37f:	90                   	nop
+
+00000380 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 370:	55                   	push   %ebp
- 371:	89 e5                	mov    %esp,%ebp
- 373:	57                   	push   %edi
- 374:	56                   	push   %esi
- 375:	53                   	push   %ebx
- 376:	83 ec 3c             	sub    $0x3c,%esp
- 379:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 380:	55                   	push   %ebp
+ 381:	89 e5                	mov    %esp,%ebp
+ 383:	57                   	push   %edi
+ 384:	56                   	push   %esi
+ 385:	53                   	push   %ebx
+ 386:	83 ec 3c             	sub    $0x3c,%esp
+ 389:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 37c:	89 d1                	mov    %edx,%ecx
+ 38c:	89 d1                	mov    %edx,%ecx
 {
- 37e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 38e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 381:	85 d2                	test   %edx,%edx
- 383:	0f 89 7f 00 00 00    	jns    408 <printint+0x98>
- 389:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 38d:	74 79                	je     408 <printint+0x98>
+ 391:	85 d2                	test   %edx,%edx
+ 393:	0f 89 7f 00 00 00    	jns    418 <printint+0x98>
+ 399:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 39d:	74 79                	je     418 <printint+0x98>
     neg = 1;
- 38f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 39f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 396:	f7 d9                	neg    %ecx
+ 3a6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 398:	31 db                	xor    %ebx,%ebx
- 39a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 39d:	8d 76 00             	lea    0x0(%esi),%esi
+ 3a8:	31 db                	xor    %ebx,%ebx
+ 3aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3ad:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 3a0:	89 c8                	mov    %ecx,%eax
- 3a2:	31 d2                	xor    %edx,%edx
- 3a4:	89 cf                	mov    %ecx,%edi
- 3a6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3a9:	0f b6 92 b8 07 00 00 	movzbl 0x7b8(%edx),%edx
- 3b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3b3:	89 d8                	mov    %ebx,%eax
- 3b5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 3b0:	89 c8                	mov    %ecx,%eax
+ 3b2:	31 d2                	xor    %edx,%edx
+ 3b4:	89 cf                	mov    %ecx,%edi
+ 3b6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3b9:	0f b6 92 c8 07 00 00 	movzbl 0x7c8(%edx),%edx
+ 3c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3c3:	89 d8                	mov    %ebx,%eax
+ 3c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 3b8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 3c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 3bb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 3cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 3be:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3c1:	76 dd                	jbe    3a0 <printint+0x30>
+ 3ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3d1:	76 dd                	jbe    3b0 <printint+0x30>
   if(neg)
- 3c3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3c6:	85 c9                	test   %ecx,%ecx
- 3c8:	74 0c                	je     3d6 <printint+0x66>
+ 3d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3d6:	85 c9                	test   %ecx,%ecx
+ 3d8:	74 0c                	je     3e6 <printint+0x66>
     buf[i++] = '-';
- 3ca:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 3da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 3cf:	89 d8                	mov    %ebx,%eax
+ 3df:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 3d1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 3e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 3d6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3d9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3dd:	eb 07                	jmp    3e6 <printint+0x76>
- 3df:	90                   	nop
- 3e0:	0f b6 13             	movzbl (%ebx),%edx
- 3e3:	83 eb 01             	sub    $0x1,%ebx
+ 3e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3ed:	eb 07                	jmp    3f6 <printint+0x76>
+ 3ef:	90                   	nop
+ 3f0:	0f b6 13             	movzbl (%ebx),%edx
+ 3f3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 3e6:	83 ec 04             	sub    $0x4,%esp
- 3e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 3ec:	6a 01                	push   $0x1
- 3ee:	56                   	push   %esi
- 3ef:	57                   	push   %edi
- 3f0:	e8 ee fe ff ff       	call   2e3 <write>
+ 3f6:	83 ec 04             	sub    $0x4,%esp
+ 3f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3fc:	6a 01                	push   $0x1
+ 3fe:	56                   	push   %esi
+ 3ff:	57                   	push   %edi
+ 400:	e8 de fe ff ff       	call   2e3 <write>
   while(--i >= 0)
- 3f5:	83 c4 10             	add    $0x10,%esp
- 3f8:	39 de                	cmp    %ebx,%esi
- 3fa:	75 e4                	jne    3e0 <printint+0x70>
+ 405:	83 c4 10             	add    $0x10,%esp
+ 408:	39 de                	cmp    %ebx,%esi
+ 40a:	75 e4                	jne    3f0 <printint+0x70>
     putc(fd, buf[i]);
 }
- 3fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 3ff:	5b                   	pop    %ebx
- 400:	5e                   	pop    %esi
- 401:	5f                   	pop    %edi
- 402:	5d                   	pop    %ebp
- 403:	c3                   	ret    
- 404:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 40f:	5b                   	pop    %ebx
+ 410:	5e                   	pop    %esi
+ 411:	5f                   	pop    %edi
+ 412:	5d                   	pop    %ebp
+ 413:	c3                   	ret    
+ 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 408:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 40f:	eb 87                	jmp    398 <printint+0x28>
- 411:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 418:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 41f:	90                   	nop
+ 418:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 41f:	eb 87                	jmp    3a8 <printint+0x28>
+ 421:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 428:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 42f:	90                   	nop
 
-00000420 <printf>:
+00000430 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 420:	f3 0f 1e fb          	endbr32 
- 424:	55                   	push   %ebp
- 425:	89 e5                	mov    %esp,%ebp
- 427:	57                   	push   %edi
- 428:	56                   	push   %esi
- 429:	53                   	push   %ebx
- 42a:	83 ec 2c             	sub    $0x2c,%esp
+ 430:	f3 0f 1e fb          	endbr32 
+ 434:	55                   	push   %ebp
+ 435:	89 e5                	mov    %esp,%ebp
+ 437:	57                   	push   %edi
+ 438:	56                   	push   %esi
+ 439:	53                   	push   %ebx
+ 43a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 42d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 430:	0f b6 1e             	movzbl (%esi),%ebx
- 433:	84 db                	test   %bl,%bl
- 435:	0f 84 b4 00 00 00    	je     4ef <printf+0xcf>
+ 43d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 440:	0f b6 1e             	movzbl (%esi),%ebx
+ 443:	84 db                	test   %bl,%bl
+ 445:	0f 84 b4 00 00 00    	je     4ff <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 43b:	8d 45 10             	lea    0x10(%ebp),%eax
- 43e:	83 c6 01             	add    $0x1,%esi
+ 44b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 44e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 441:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 451:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 444:	31 d2                	xor    %edx,%edx
+ 454:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 446:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 449:	eb 33                	jmp    47e <printf+0x5e>
- 44b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 44f:	90                   	nop
- 450:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 456:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 459:	eb 33                	jmp    48e <printf+0x5e>
+ 45b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 45f:	90                   	nop
+ 460:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 453:	ba 25 00 00 00       	mov    $0x25,%edx
+ 463:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 458:	83 f8 25             	cmp    $0x25,%eax
- 45b:	74 17                	je     474 <printf+0x54>
+ 468:	83 f8 25             	cmp    $0x25,%eax
+ 46b:	74 17                	je     484 <printf+0x54>
   write(fd, &c, 1);
- 45d:	83 ec 04             	sub    $0x4,%esp
- 460:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 463:	6a 01                	push   $0x1
- 465:	57                   	push   %edi
- 466:	ff 75 08             	pushl  0x8(%ebp)
- 469:	e8 75 fe ff ff       	call   2e3 <write>
- 46e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 46d:	83 ec 04             	sub    $0x4,%esp
+ 470:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 473:	6a 01                	push   $0x1
+ 475:	57                   	push   %edi
+ 476:	ff 75 08             	pushl  0x8(%ebp)
+ 479:	e8 65 fe ff ff       	call   2e3 <write>
+ 47e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 471:	83 c4 10             	add    $0x10,%esp
+ 481:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 474:	0f b6 1e             	movzbl (%esi),%ebx
- 477:	83 c6 01             	add    $0x1,%esi
- 47a:	84 db                	test   %bl,%bl
- 47c:	74 71                	je     4ef <printf+0xcf>
+ 484:	0f b6 1e             	movzbl (%esi),%ebx
+ 487:	83 c6 01             	add    $0x1,%esi
+ 48a:	84 db                	test   %bl,%bl
+ 48c:	74 71                	je     4ff <printf+0xcf>
     c = fmt[i] & 0xff;
- 47e:	0f be cb             	movsbl %bl,%ecx
- 481:	0f b6 c3             	movzbl %bl,%eax
+ 48e:	0f be cb             	movsbl %bl,%ecx
+ 491:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 484:	85 d2                	test   %edx,%edx
- 486:	74 c8                	je     450 <printf+0x30>
+ 494:	85 d2                	test   %edx,%edx
+ 496:	74 c8                	je     460 <printf+0x30>
       }
     } else if(state == '%'){
- 488:	83 fa 25             	cmp    $0x25,%edx
- 48b:	75 e7                	jne    474 <printf+0x54>
+ 498:	83 fa 25             	cmp    $0x25,%edx
+ 49b:	75 e7                	jne    484 <printf+0x54>
       if(c == 'd'){
- 48d:	83 f8 64             	cmp    $0x64,%eax
- 490:	0f 84 9a 00 00 00    	je     530 <printf+0x110>
+ 49d:	83 f8 64             	cmp    $0x64,%eax
+ 4a0:	0f 84 9a 00 00 00    	je     540 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 496:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 49c:	83 f9 70             	cmp    $0x70,%ecx
- 49f:	74 5f                	je     500 <printf+0xe0>
+ 4a6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4ac:	83 f9 70             	cmp    $0x70,%ecx
+ 4af:	74 5f                	je     510 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 4a1:	83 f8 73             	cmp    $0x73,%eax
- 4a4:	0f 84 d6 00 00 00    	je     580 <printf+0x160>
+ 4b1:	83 f8 73             	cmp    $0x73,%eax
+ 4b4:	0f 84 d6 00 00 00    	je     590 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 4aa:	83 f8 63             	cmp    $0x63,%eax
- 4ad:	0f 84 8d 00 00 00    	je     540 <printf+0x120>
+ 4ba:	83 f8 63             	cmp    $0x63,%eax
+ 4bd:	0f 84 8d 00 00 00    	je     550 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 4b3:	83 f8 25             	cmp    $0x25,%eax
- 4b6:	0f 84 b4 00 00 00    	je     570 <printf+0x150>
+ 4c3:	83 f8 25             	cmp    $0x25,%eax
+ 4c6:	0f 84 b4 00 00 00    	je     580 <printf+0x150>
   write(fd, &c, 1);
- 4bc:	83 ec 04             	sub    $0x4,%esp
- 4bf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4c3:	6a 01                	push   $0x1
- 4c5:	57                   	push   %edi
- 4c6:	ff 75 08             	pushl  0x8(%ebp)
- 4c9:	e8 15 fe ff ff       	call   2e3 <write>
+ 4cc:	83 ec 04             	sub    $0x4,%esp
+ 4cf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4d3:	6a 01                	push   $0x1
+ 4d5:	57                   	push   %edi
+ 4d6:	ff 75 08             	pushl  0x8(%ebp)
+ 4d9:	e8 05 fe ff ff       	call   2e3 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 4ce:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4de:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 4d1:	83 c4 0c             	add    $0xc,%esp
- 4d4:	6a 01                	push   $0x1
- 4d6:	83 c6 01             	add    $0x1,%esi
- 4d9:	57                   	push   %edi
- 4da:	ff 75 08             	pushl  0x8(%ebp)
- 4dd:	e8 01 fe ff ff       	call   2e3 <write>
+ 4e1:	83 c4 0c             	add    $0xc,%esp
+ 4e4:	6a 01                	push   $0x1
+ 4e6:	83 c6 01             	add    $0x1,%esi
+ 4e9:	57                   	push   %edi
+ 4ea:	ff 75 08             	pushl  0x8(%ebp)
+ 4ed:	e8 f1 fd ff ff       	call   2e3 <write>
   for(i = 0; fmt[i]; i++){
- 4e2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 4f2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 4e6:	83 c4 10             	add    $0x10,%esp
+ 4f6:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 4e9:	31 d2                	xor    %edx,%edx
+ 4f9:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 4eb:	84 db                	test   %bl,%bl
- 4ed:	75 8f                	jne    47e <printf+0x5e>
+ 4fb:	84 db                	test   %bl,%bl
+ 4fd:	75 8f                	jne    48e <printf+0x5e>
     }
   }
 }
- 4ef:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4f2:	5b                   	pop    %ebx
- 4f3:	5e                   	pop    %esi
- 4f4:	5f                   	pop    %edi
- 4f5:	5d                   	pop    %ebp
- 4f6:	c3                   	ret    
- 4f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4fe:	66 90                	xchg   %ax,%ax
+ 4ff:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 502:	5b                   	pop    %ebx
+ 503:	5e                   	pop    %esi
+ 504:	5f                   	pop    %edi
+ 505:	5d                   	pop    %ebp
+ 506:	c3                   	ret    
+ 507:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 50e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 500:	83 ec 0c             	sub    $0xc,%esp
- 503:	b9 10 00 00 00       	mov    $0x10,%ecx
- 508:	6a 00                	push   $0x0
- 50a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 50d:	8b 45 08             	mov    0x8(%ebp),%eax
- 510:	8b 13                	mov    (%ebx),%edx
- 512:	e8 59 fe ff ff       	call   370 <printint>
+ 510:	83 ec 0c             	sub    $0xc,%esp
+ 513:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 518:	6a 00                	push   $0x0
+ 51a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 51d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 520:	8b 13                	mov    (%ebx),%edx
+ 522:	e8 59 fe ff ff       	call   380 <printint>
         ap++;
- 517:	89 d8                	mov    %ebx,%eax
- 519:	83 c4 10             	add    $0x10,%esp
+ 527:	89 d8                	mov    %ebx,%eax
+ 529:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 51c:	31 d2                	xor    %edx,%edx
+ 52c:	31 d2                	xor    %edx,%edx
         ap++;
- 51e:	83 c0 04             	add    $0x4,%eax
- 521:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 524:	e9 4b ff ff ff       	jmp    474 <printf+0x54>
- 529:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 52e:	83 c0 04             	add    $0x4,%eax
+ 531:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 534:	e9 4b ff ff ff       	jmp    484 <printf+0x54>
+ 539:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 530:	83 ec 0c             	sub    $0xc,%esp
- 533:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 538:	6a 01                	push   $0x1
- 53a:	eb ce                	jmp    50a <printf+0xea>
- 53c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 540:	83 ec 0c             	sub    $0xc,%esp
+ 543:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 548:	6a 01                	push   $0x1
+ 54a:	eb ce                	jmp    51a <printf+0xea>
+ 54c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 540:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 550:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 543:	83 ec 04             	sub    $0x4,%esp
+ 553:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 546:	8b 03                	mov    (%ebx),%eax
+ 556:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 548:	6a 01                	push   $0x1
+ 558:	6a 01                	push   $0x1
         ap++;
- 54a:	83 c3 04             	add    $0x4,%ebx
+ 55a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 54d:	57                   	push   %edi
- 54e:	ff 75 08             	pushl  0x8(%ebp)
+ 55d:	57                   	push   %edi
+ 55e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 551:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 561:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 554:	e8 8a fd ff ff       	call   2e3 <write>
+ 564:	e8 7a fd ff ff       	call   2e3 <write>
         ap++;
- 559:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 55c:	83 c4 10             	add    $0x10,%esp
+ 569:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 56c:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 55f:	31 d2                	xor    %edx,%edx
- 561:	e9 0e ff ff ff       	jmp    474 <printf+0x54>
- 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 56d:	8d 76 00             	lea    0x0(%esi),%esi
+ 56f:	31 d2                	xor    %edx,%edx
+ 571:	e9 0e ff ff ff       	jmp    484 <printf+0x54>
+ 576:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 57d:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 570:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 580:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 573:	83 ec 04             	sub    $0x4,%esp
- 576:	e9 59 ff ff ff       	jmp    4d4 <printf+0xb4>
- 57b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 57f:	90                   	nop
+ 583:	83 ec 04             	sub    $0x4,%esp
+ 586:	e9 59 ff ff ff       	jmp    4e4 <printf+0xb4>
+ 58b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 58f:	90                   	nop
         s = (char*)*ap;
- 580:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 583:	8b 18                	mov    (%eax),%ebx
+ 590:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 593:	8b 18                	mov    (%eax),%ebx
         ap++;
- 585:	83 c0 04             	add    $0x4,%eax
- 588:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 595:	83 c0 04             	add    $0x4,%eax
+ 598:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 58b:	85 db                	test   %ebx,%ebx
- 58d:	74 17                	je     5a6 <printf+0x186>
+ 59b:	85 db                	test   %ebx,%ebx
+ 59d:	74 17                	je     5b6 <printf+0x186>
         while(*s != 0){
- 58f:	0f b6 03             	movzbl (%ebx),%eax
+ 59f:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 592:	31 d2                	xor    %edx,%edx
+ 5a2:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 594:	84 c0                	test   %al,%al
- 596:	0f 84 d8 fe ff ff    	je     474 <printf+0x54>
- 59c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 59f:	89 de                	mov    %ebx,%esi
- 5a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5a4:	eb 1a                	jmp    5c0 <printf+0x1a0>
+ 5a4:	84 c0                	test   %al,%al
+ 5a6:	0f 84 d8 fe ff ff    	je     484 <printf+0x54>
+ 5ac:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5af:	89 de                	mov    %ebx,%esi
+ 5b1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5b4:	eb 1a                	jmp    5d0 <printf+0x1a0>
           s = "(null)";
- 5a6:	bb af 07 00 00       	mov    $0x7af,%ebx
+ 5b6:	bb bf 07 00 00       	mov    $0x7bf,%ebx
         while(*s != 0){
- 5ab:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5ae:	b8 28 00 00 00       	mov    $0x28,%eax
- 5b3:	89 de                	mov    %ebx,%esi
- 5b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5bf:	90                   	nop
+ 5bb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5be:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5c3:	89 de                	mov    %ebx,%esi
+ 5c5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5cf:	90                   	nop
   write(fd, &c, 1);
- 5c0:	83 ec 04             	sub    $0x4,%esp
+ 5d0:	83 ec 04             	sub    $0x4,%esp
           s++;
- 5c3:	83 c6 01             	add    $0x1,%esi
- 5c6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 5d3:	83 c6 01             	add    $0x1,%esi
+ 5d6:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 5c9:	6a 01                	push   $0x1
- 5cb:	57                   	push   %edi
- 5cc:	53                   	push   %ebx
- 5cd:	e8 11 fd ff ff       	call   2e3 <write>
+ 5d9:	6a 01                	push   $0x1
+ 5db:	57                   	push   %edi
+ 5dc:	53                   	push   %ebx
+ 5dd:	e8 01 fd ff ff       	call   2e3 <write>
         while(*s != 0){
- 5d2:	0f b6 06             	movzbl (%esi),%eax
- 5d5:	83 c4 10             	add    $0x10,%esp
- 5d8:	84 c0                	test   %al,%al
- 5da:	75 e4                	jne    5c0 <printf+0x1a0>
- 5dc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 5e2:	0f b6 06             	movzbl (%esi),%eax
+ 5e5:	83 c4 10             	add    $0x10,%esp
+ 5e8:	84 c0                	test   %al,%al
+ 5ea:	75 e4                	jne    5d0 <printf+0x1a0>
+ 5ec:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 5df:	31 d2                	xor    %edx,%edx
- 5e1:	e9 8e fe ff ff       	jmp    474 <printf+0x54>
- 5e6:	66 90                	xchg   %ax,%ax
- 5e8:	66 90                	xchg   %ax,%ax
- 5ea:	66 90                	xchg   %ax,%ax
- 5ec:	66 90                	xchg   %ax,%ax
- 5ee:	66 90                	xchg   %ax,%ax
+ 5ef:	31 d2                	xor    %edx,%edx
+ 5f1:	e9 8e fe ff ff       	jmp    484 <printf+0x54>
+ 5f6:	66 90                	xchg   %ax,%ax
+ 5f8:	66 90                	xchg   %ax,%ax
+ 5fa:	66 90                	xchg   %ax,%ax
+ 5fc:	66 90                	xchg   %ax,%ax
+ 5fe:	66 90                	xchg   %ax,%ax
 
-000005f0 <free>:
+00000600 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5f0:	f3 0f 1e fb          	endbr32 
- 5f4:	55                   	push   %ebp
+ 600:	f3 0f 1e fb          	endbr32 
+ 604:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5f5:	a1 64 0a 00 00       	mov    0xa64,%eax
+ 605:	a1 74 0a 00 00       	mov    0xa74,%eax
 {
- 5fa:	89 e5                	mov    %esp,%ebp
- 5fc:	57                   	push   %edi
- 5fd:	56                   	push   %esi
- 5fe:	53                   	push   %ebx
- 5ff:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 602:	8b 10                	mov    (%eax),%edx
+ 60a:	89 e5                	mov    %esp,%ebp
+ 60c:	57                   	push   %edi
+ 60d:	56                   	push   %esi
+ 60e:	53                   	push   %ebx
+ 60f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 612:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 604:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 614:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 607:	39 c8                	cmp    %ecx,%eax
- 609:	73 15                	jae    620 <free+0x30>
- 60b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 60f:	90                   	nop
- 610:	39 d1                	cmp    %edx,%ecx
- 612:	72 14                	jb     628 <free+0x38>
+ 617:	39 c8                	cmp    %ecx,%eax
+ 619:	73 15                	jae    630 <free+0x30>
+ 61b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 61f:	90                   	nop
+ 620:	39 d1                	cmp    %edx,%ecx
+ 622:	72 14                	jb     638 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 614:	39 d0                	cmp    %edx,%eax
- 616:	73 10                	jae    628 <free+0x38>
+ 624:	39 d0                	cmp    %edx,%eax
+ 626:	73 10                	jae    638 <free+0x38>
 {
- 618:	89 d0                	mov    %edx,%eax
+ 628:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 61a:	8b 10                	mov    (%eax),%edx
- 61c:	39 c8                	cmp    %ecx,%eax
- 61e:	72 f0                	jb     610 <free+0x20>
+ 62a:	8b 10                	mov    (%eax),%edx
+ 62c:	39 c8                	cmp    %ecx,%eax
+ 62e:	72 f0                	jb     620 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 620:	39 d0                	cmp    %edx,%eax
- 622:	72 f4                	jb     618 <free+0x28>
- 624:	39 d1                	cmp    %edx,%ecx
- 626:	73 f0                	jae    618 <free+0x28>
+ 630:	39 d0                	cmp    %edx,%eax
+ 632:	72 f4                	jb     628 <free+0x28>
+ 634:	39 d1                	cmp    %edx,%ecx
+ 636:	73 f0                	jae    628 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 62e:	39 fa                	cmp    %edi,%edx
- 630:	74 1e                	je     650 <free+0x60>
+ 638:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 63b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 63e:	39 fa                	cmp    %edi,%edx
+ 640:	74 1e                	je     660 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 632:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 642:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 635:	8b 50 04             	mov    0x4(%eax),%edx
- 638:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 63b:	39 f1                	cmp    %esi,%ecx
- 63d:	74 28                	je     667 <free+0x77>
+ 645:	8b 50 04             	mov    0x4(%eax),%edx
+ 648:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 64b:	39 f1                	cmp    %esi,%ecx
+ 64d:	74 28                	je     677 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 63f:	89 08                	mov    %ecx,(%eax)
+ 64f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 641:	5b                   	pop    %ebx
+ 651:	5b                   	pop    %ebx
   freep = p;
- 642:	a3 64 0a 00 00       	mov    %eax,0xa64
+ 652:	a3 74 0a 00 00       	mov    %eax,0xa74
 }
- 647:	5e                   	pop    %esi
- 648:	5f                   	pop    %edi
- 649:	5d                   	pop    %ebp
- 64a:	c3                   	ret    
- 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 64f:	90                   	nop
+ 657:	5e                   	pop    %esi
+ 658:	5f                   	pop    %edi
+ 659:	5d                   	pop    %ebp
+ 65a:	c3                   	ret    
+ 65b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 65f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 650:	03 72 04             	add    0x4(%edx),%esi
- 653:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 660:	03 72 04             	add    0x4(%edx),%esi
+ 663:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 656:	8b 10                	mov    (%eax),%edx
- 658:	8b 12                	mov    (%edx),%edx
- 65a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 666:	8b 10                	mov    (%eax),%edx
+ 668:	8b 12                	mov    (%edx),%edx
+ 66a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 65d:	8b 50 04             	mov    0x4(%eax),%edx
- 660:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 663:	39 f1                	cmp    %esi,%ecx
- 665:	75 d8                	jne    63f <free+0x4f>
+ 66d:	8b 50 04             	mov    0x4(%eax),%edx
+ 670:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 673:	39 f1                	cmp    %esi,%ecx
+ 675:	75 d8                	jne    64f <free+0x4f>
     p->s.size += bp->s.size;
- 667:	03 53 fc             	add    -0x4(%ebx),%edx
+ 677:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 66a:	a3 64 0a 00 00       	mov    %eax,0xa64
+ 67a:	a3 74 0a 00 00       	mov    %eax,0xa74
     p->s.size += bp->s.size;
- 66f:	89 50 04             	mov    %edx,0x4(%eax)
+ 67f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 672:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 675:	89 10                	mov    %edx,(%eax)
+ 682:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 685:	89 10                	mov    %edx,(%eax)
 }
- 677:	5b                   	pop    %ebx
- 678:	5e                   	pop    %esi
- 679:	5f                   	pop    %edi
- 67a:	5d                   	pop    %ebp
- 67b:	c3                   	ret    
- 67c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 687:	5b                   	pop    %ebx
+ 688:	5e                   	pop    %esi
+ 689:	5f                   	pop    %edi
+ 68a:	5d                   	pop    %ebp
+ 68b:	c3                   	ret    
+ 68c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000680 <malloc>:
+00000690 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 680:	f3 0f 1e fb          	endbr32 
- 684:	55                   	push   %ebp
- 685:	89 e5                	mov    %esp,%ebp
- 687:	57                   	push   %edi
- 688:	56                   	push   %esi
- 689:	53                   	push   %ebx
- 68a:	83 ec 1c             	sub    $0x1c,%esp
+ 690:	f3 0f 1e fb          	endbr32 
+ 694:	55                   	push   %ebp
+ 695:	89 e5                	mov    %esp,%ebp
+ 697:	57                   	push   %edi
+ 698:	56                   	push   %esi
+ 699:	53                   	push   %ebx
+ 69a:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 68d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 69d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 690:	8b 3d 64 0a 00 00    	mov    0xa64,%edi
+ 6a0:	8b 3d 74 0a 00 00    	mov    0xa74,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 696:	8d 70 07             	lea    0x7(%eax),%esi
- 699:	c1 ee 03             	shr    $0x3,%esi
- 69c:	83 c6 01             	add    $0x1,%esi
+ 6a6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6a9:	c1 ee 03             	shr    $0x3,%esi
+ 6ac:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 69f:	85 ff                	test   %edi,%edi
- 6a1:	0f 84 a9 00 00 00    	je     750 <malloc+0xd0>
+ 6af:	85 ff                	test   %edi,%edi
+ 6b1:	0f 84 a9 00 00 00    	je     760 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6a7:	8b 07                	mov    (%edi),%eax
+ 6b7:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 6a9:	8b 48 04             	mov    0x4(%eax),%ecx
- 6ac:	39 f1                	cmp    %esi,%ecx
- 6ae:	73 6d                	jae    71d <malloc+0x9d>
- 6b0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 6b6:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6bb:	0f 43 de             	cmovae %esi,%ebx
+ 6b9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6bc:	39 f1                	cmp    %esi,%ecx
+ 6be:	73 6d                	jae    72d <malloc+0x9d>
+ 6c0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6c6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6cb:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 6be:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 6c5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 6c8:	eb 17                	jmp    6e1 <malloc+0x61>
- 6ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6ce:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6d5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6d8:	eb 17                	jmp    6f1 <malloc+0x61>
+ 6da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6d0:	8b 10                	mov    (%eax),%edx
+ 6e0:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 6d2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 6d5:	39 f1                	cmp    %esi,%ecx
- 6d7:	73 4f                	jae    728 <malloc+0xa8>
- 6d9:	8b 3d 64 0a 00 00    	mov    0xa64,%edi
- 6df:	89 d0                	mov    %edx,%eax
+ 6e2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6e5:	39 f1                	cmp    %esi,%ecx
+ 6e7:	73 4f                	jae    738 <malloc+0xa8>
+ 6e9:	8b 3d 74 0a 00 00    	mov    0xa74,%edi
+ 6ef:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6e1:	39 c7                	cmp    %eax,%edi
- 6e3:	75 eb                	jne    6d0 <malloc+0x50>
+ 6f1:	39 c7                	cmp    %eax,%edi
+ 6f3:	75 eb                	jne    6e0 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 6e5:	83 ec 0c             	sub    $0xc,%esp
- 6e8:	ff 75 e4             	pushl  -0x1c(%ebp)
- 6eb:	e8 5b fc ff ff       	call   34b <sbrk>
+ 6f5:	83 ec 0c             	sub    $0xc,%esp
+ 6f8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 6fb:	e8 4b fc ff ff       	call   34b <sbrk>
   if(p == (char*)-1)
- 6f0:	83 c4 10             	add    $0x10,%esp
- 6f3:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6f6:	74 1b                	je     713 <malloc+0x93>
+ 700:	83 c4 10             	add    $0x10,%esp
+ 703:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 706:	74 1b                	je     723 <malloc+0x93>
   hp->s.size = nu;
- 6f8:	89 58 04             	mov    %ebx,0x4(%eax)
+ 708:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 6fb:	83 ec 0c             	sub    $0xc,%esp
- 6fe:	83 c0 08             	add    $0x8,%eax
- 701:	50                   	push   %eax
- 702:	e8 e9 fe ff ff       	call   5f0 <free>
+ 70b:	83 ec 0c             	sub    $0xc,%esp
+ 70e:	83 c0 08             	add    $0x8,%eax
+ 711:	50                   	push   %eax
+ 712:	e8 e9 fe ff ff       	call   600 <free>
   return freep;
- 707:	a1 64 0a 00 00       	mov    0xa64,%eax
+ 717:	a1 74 0a 00 00       	mov    0xa74,%eax
       if((p = morecore(nunits)) == 0)
- 70c:	83 c4 10             	add    $0x10,%esp
- 70f:	85 c0                	test   %eax,%eax
- 711:	75 bd                	jne    6d0 <malloc+0x50>
+ 71c:	83 c4 10             	add    $0x10,%esp
+ 71f:	85 c0                	test   %eax,%eax
+ 721:	75 bd                	jne    6e0 <malloc+0x50>
         return 0;
   }
 }
- 713:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 723:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 716:	31 c0                	xor    %eax,%eax
+ 726:	31 c0                	xor    %eax,%eax
 }
- 718:	5b                   	pop    %ebx
- 719:	5e                   	pop    %esi
- 71a:	5f                   	pop    %edi
- 71b:	5d                   	pop    %ebp
- 71c:	c3                   	ret    
+ 728:	5b                   	pop    %ebx
+ 729:	5e                   	pop    %esi
+ 72a:	5f                   	pop    %edi
+ 72b:	5d                   	pop    %ebp
+ 72c:	c3                   	ret    
     if(p->s.size >= nunits){
- 71d:	89 c2                	mov    %eax,%edx
- 71f:	89 f8                	mov    %edi,%eax
- 721:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 72d:	89 c2                	mov    %eax,%edx
+ 72f:	89 f8                	mov    %edi,%eax
+ 731:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 728:	39 ce                	cmp    %ecx,%esi
- 72a:	74 54                	je     780 <malloc+0x100>
+ 738:	39 ce                	cmp    %ecx,%esi
+ 73a:	74 54                	je     790 <malloc+0x100>
         p->s.size -= nunits;
- 72c:	29 f1                	sub    %esi,%ecx
- 72e:	89 4a 04             	mov    %ecx,0x4(%edx)
+ 73c:	29 f1                	sub    %esi,%ecx
+ 73e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- 731:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ 741:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- 734:	89 72 04             	mov    %esi,0x4(%edx)
+ 744:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 737:	a3 64 0a 00 00       	mov    %eax,0xa64
+ 747:	a3 74 0a 00 00       	mov    %eax,0xa74
 }
- 73c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 74c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 73f:	8d 42 08             	lea    0x8(%edx),%eax
+ 74f:	8d 42 08             	lea    0x8(%edx),%eax
 }
- 742:	5b                   	pop    %ebx
- 743:	5e                   	pop    %esi
- 744:	5f                   	pop    %edi
- 745:	5d                   	pop    %ebp
- 746:	c3                   	ret    
- 747:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 74e:	66 90                	xchg   %ax,%ax
+ 752:	5b                   	pop    %ebx
+ 753:	5e                   	pop    %esi
+ 754:	5f                   	pop    %edi
+ 755:	5d                   	pop    %ebp
+ 756:	c3                   	ret    
+ 757:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 75e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 750:	c7 05 64 0a 00 00 68 	movl   $0xa68,0xa64
- 757:	0a 00 00 
+ 760:	c7 05 74 0a 00 00 78 	movl   $0xa78,0xa74
+ 767:	0a 00 00 
     base.s.size = 0;
- 75a:	bf 68 0a 00 00       	mov    $0xa68,%edi
+ 76a:	bf 78 0a 00 00       	mov    $0xa78,%edi
     base.s.ptr = freep = prevp = &base;
- 75f:	c7 05 68 0a 00 00 68 	movl   $0xa68,0xa68
- 766:	0a 00 00 
+ 76f:	c7 05 78 0a 00 00 78 	movl   $0xa78,0xa78
+ 776:	0a 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 769:	89 f8                	mov    %edi,%eax
+ 779:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 76b:	c7 05 6c 0a 00 00 00 	movl   $0x0,0xa6c
- 772:	00 00 00 
+ 77b:	c7 05 7c 0a 00 00 00 	movl   $0x0,0xa7c
+ 782:	00 00 00 
     if(p->s.size >= nunits){
- 775:	e9 36 ff ff ff       	jmp    6b0 <malloc+0x30>
- 77a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 785:	e9 36 ff ff ff       	jmp    6c0 <malloc+0x30>
+ 78a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 780:	8b 0a                	mov    (%edx),%ecx
- 782:	89 08                	mov    %ecx,(%eax)
- 784:	eb b1                	jmp    737 <malloc+0xb7>
+ 790:	8b 0a                	mov    (%edx),%ecx
+ 792:	89 08                	mov    %ecx,(%eax)
+ 794:	eb b1                	jmp    747 <malloc+0xb7>
Binary files xv6-public-original/ln.o and xv6-public/ln.o differ
diff -ruN xv6-public-original/ln.sym xv6-public/ln.sym
--- xv6-public-original/ln.sym	2022-08-13 16:28:54.420308000 +0530
+++ xv6-public/ln.sym	2022-09-05 20:56:49.894960000 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000788 .rodata
-000007cc .eh_frame
-00000a64 .bss
+00000798 .rodata
+000007dc .eh_frame
+00000a74 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,18 +13,19 @@
 00000000 ln.c
 00000000 ulib.c
 00000000 printf.c
-00000370 printint
-000007b8 digits.1085
+00000380 printint
+000007c8 digits.1094
 00000000 umalloc.c
-00000a64 freep
-00000a68 base
+00000a74 freep
+00000a78 base
 00000060 strcpy
-00000420 printf
+00000430 printf
+00000373 thread_exit
 00000290 memmove
 0000030b mknod
 00000180 gets
 00000343 getpid
-00000680 malloc
+00000690 malloc
 00000353 sleep
 000002d3 pipe
 000002e3 write
@@ -38,20 +39,22 @@
 000002bb fork
 0000034b sbrk
 0000035b uptime
-00000a64 __bss_start
+00000a74 __bss_start
 00000120 memset
 00000000 main
 00000090 strcmp
 0000033b dup
 00000200 stat
-00000a64 _edata
-00000a70 _end
+00000a74 _edata
+00000a80 _end
 00000323 link
 000002c3 exit
 00000250 atoi
 000000e0 strlen
 00000303 open
 00000140 strchr
+00000363 thread_create
 0000032b mkdir
 000002eb close
-000005f0 free
+0000036b thread_join
+00000600 free
Binary files xv6-public-original/log.o and xv6-public/log.o differ
Binary files xv6-public-original/_ls and xv6-public/_ls differ
diff -ruN xv6-public-original/ls.asm xv6-public/ls.asm
--- xv6-public-original/ls.asm	2022-08-13 16:28:54.508280000 +0530
+++ xv6-public/ls.asm	2022-09-05 20:56:49.998960000 +0530
@@ -49,7 +49,7 @@
   44:	e8 5a 05 00 00       	call   5a3 <exit>
     ls(".");
   49:	83 ec 0c             	sub    $0xc,%esp
-  4c:	68 b0 0a 00 00       	push   $0xab0
+  4c:	68 c0 0a 00 00       	push   $0xac0
   51:	e8 aa 00 00 00       	call   100 <ls>
     exit();
   56:	e8 48 05 00 00       	call   5a3 <exit>
@@ -95,21 +95,21 @@
   ab:	83 c4 0c             	add    $0xc,%esp
   ae:	50                   	push   %eax
   af:	53                   	push   %ebx
-  b0:	68 e4 0d 00 00       	push   $0xde4
+  b0:	68 f4 0d 00 00       	push   $0xdf4
   b5:	e8 b6 04 00 00       	call   570 <memmove>
   memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
   ba:	89 1c 24             	mov    %ebx,(%esp)
   bd:	e8 fe 02 00 00       	call   3c0 <strlen>
   c2:	89 1c 24             	mov    %ebx,(%esp)
   return buf;
-  c5:	bb e4 0d 00 00       	mov    $0xde4,%ebx
+  c5:	bb f4 0d 00 00       	mov    $0xdf4,%ebx
   memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
   ca:	89 c6                	mov    %eax,%esi
   cc:	e8 ef 02 00 00       	call   3c0 <strlen>
   d1:	ba 0e 00 00 00       	mov    $0xe,%edx
   d6:	83 c4 0c             	add    $0xc,%esp
   d9:	29 f2                	sub    %esi,%edx
-  db:	05 e4 0d 00 00       	add    $0xde4,%eax
+  db:	05 f4 0d 00 00       	add    $0xdf4,%eax
   e0:	52                   	push   %edx
   e1:	6a 20                	push   $0x20
   e3:	50                   	push   %eax
@@ -186,9 +186,9 @@
  194:	56                   	push   %esi
  195:	6a 02                	push   $0x2
  197:	50                   	push   %eax
- 198:	68 90 0a 00 00       	push   $0xa90
+ 198:	68 a0 0a 00 00       	push   $0xaa0
  19d:	6a 01                	push   $0x1
- 19f:	e8 5c 05 00 00       	call   700 <printf>
+ 19f:	e8 6c 05 00 00       	call   710 <printf>
     break;
  1a4:	83 c4 20             	add    $0x20,%esp
  1a7:	eb ad                	jmp    156 <ls+0x56>
@@ -273,9 +273,9 @@
  29a:	52                   	push   %edx
  29b:	ff b5 b4 fd ff ff    	pushl  -0x24c(%ebp)
  2a1:	50                   	push   %eax
- 2a2:	68 90 0a 00 00       	push   $0xa90
+ 2a2:	68 a0 0a 00 00       	push   $0xaa0
  2a7:	6a 01                	push   $0x1
- 2a9:	e8 52 04 00 00       	call   700 <printf>
+ 2a9:	e8 62 04 00 00       	call   710 <printf>
  2ae:	83 c4 20             	add    $0x20,%esp
  2b1:	e9 4a ff ff ff       	jmp    200 <ls+0x100>
  2b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -283,9 +283,9 @@
     printf(2, "ls: cannot open %s\n", path);
  2c0:	83 ec 04             	sub    $0x4,%esp
  2c3:	57                   	push   %edi
- 2c4:	68 68 0a 00 00       	push   $0xa68
+ 2c4:	68 78 0a 00 00       	push   $0xa78
  2c9:	6a 02                	push   $0x2
- 2cb:	e8 30 04 00 00       	call   700 <printf>
+ 2cb:	e8 40 04 00 00       	call   710 <printf>
     return;
  2d0:	83 c4 10             	add    $0x10,%esp
 }
@@ -299,9 +299,9 @@
  2df:	90                   	nop
       printf(1, "ls: path too long\n");
  2e0:	83 ec 08             	sub    $0x8,%esp
- 2e3:	68 9d 0a 00 00       	push   $0xa9d
+ 2e3:	68 ad 0a 00 00       	push   $0xaad
  2e8:	6a 01                	push   $0x1
- 2ea:	e8 11 04 00 00       	call   700 <printf>
+ 2ea:	e8 21 04 00 00       	call   710 <printf>
       break;
  2ef:	83 c4 10             	add    $0x10,%esp
  2f2:	e9 5f fe ff ff       	jmp    156 <ls+0x56>
@@ -310,9 +310,9 @@
     printf(2, "ls: cannot stat %s\n", path);
  300:	83 ec 04             	sub    $0x4,%esp
  303:	57                   	push   %edi
- 304:	68 7c 0a 00 00       	push   $0xa7c
+ 304:	68 8c 0a 00 00       	push   $0xa8c
  309:	6a 02                	push   $0x2
- 30b:	e8 f0 03 00 00       	call   700 <printf>
+ 30b:	e8 00 04 00 00       	call   710 <printf>
     close(fd);
  310:	89 1c 24             	mov    %ebx,(%esp)
  313:	e8 b3 02 00 00       	call   5cb <close>
@@ -330,9 +330,9 @@
         printf(1, "ls: cannot stat %s\n", buf);
  328:	83 ec 04             	sub    $0x4,%esp
  32b:	57                   	push   %edi
- 32c:	68 7c 0a 00 00       	push   $0xa7c
+ 32c:	68 8c 0a 00 00       	push   $0xa8c
  331:	6a 01                	push   $0x1
- 333:	e8 c8 03 00 00       	call   700 <printf>
+ 333:	e8 d8 03 00 00       	call   710 <printf>
         continue;
  338:	83 c4 10             	add    $0x10,%esp
  33b:	e9 c0 fe ff ff       	jmp    200 <ls+0x100>
@@ -863,609 +863,623 @@
  63b:	b8 0e 00 00 00       	mov    $0xe,%eax
  640:	cd 40                	int    $0x40
  642:	c3                   	ret    
- 643:	66 90                	xchg   %ax,%ax
- 645:	66 90                	xchg   %ax,%ax
- 647:	66 90                	xchg   %ax,%ax
- 649:	66 90                	xchg   %ax,%ax
- 64b:	66 90                	xchg   %ax,%ax
- 64d:	66 90                	xchg   %ax,%ax
- 64f:	90                   	nop
 
-00000650 <printint>:
+00000643 <thread_create>:
+SYSCALL(thread_create)
+ 643:	b8 16 00 00 00       	mov    $0x16,%eax
+ 648:	cd 40                	int    $0x40
+ 64a:	c3                   	ret    
+
+0000064b <thread_join>:
+SYSCALL(thread_join)
+ 64b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 650:	cd 40                	int    $0x40
+ 652:	c3                   	ret    
+
+00000653 <thread_exit>:
+SYSCALL(thread_exit)
+ 653:	b8 18 00 00 00       	mov    $0x18,%eax
+ 658:	cd 40                	int    $0x40
+ 65a:	c3                   	ret    
+ 65b:	66 90                	xchg   %ax,%ax
+ 65d:	66 90                	xchg   %ax,%ax
+ 65f:	90                   	nop
+
+00000660 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 650:	55                   	push   %ebp
- 651:	89 e5                	mov    %esp,%ebp
- 653:	57                   	push   %edi
- 654:	56                   	push   %esi
- 655:	53                   	push   %ebx
- 656:	83 ec 3c             	sub    $0x3c,%esp
- 659:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 660:	55                   	push   %ebp
+ 661:	89 e5                	mov    %esp,%ebp
+ 663:	57                   	push   %edi
+ 664:	56                   	push   %esi
+ 665:	53                   	push   %ebx
+ 666:	83 ec 3c             	sub    $0x3c,%esp
+ 669:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 65c:	89 d1                	mov    %edx,%ecx
+ 66c:	89 d1                	mov    %edx,%ecx
 {
- 65e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 66e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 661:	85 d2                	test   %edx,%edx
- 663:	0f 89 7f 00 00 00    	jns    6e8 <printint+0x98>
- 669:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 66d:	74 79                	je     6e8 <printint+0x98>
+ 671:	85 d2                	test   %edx,%edx
+ 673:	0f 89 7f 00 00 00    	jns    6f8 <printint+0x98>
+ 679:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 67d:	74 79                	je     6f8 <printint+0x98>
     neg = 1;
- 66f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 67f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 676:	f7 d9                	neg    %ecx
+ 686:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 678:	31 db                	xor    %ebx,%ebx
- 67a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 67d:	8d 76 00             	lea    0x0(%esi),%esi
+ 688:	31 db                	xor    %ebx,%ebx
+ 68a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 68d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 680:	89 c8                	mov    %ecx,%eax
- 682:	31 d2                	xor    %edx,%edx
- 684:	89 cf                	mov    %ecx,%edi
- 686:	f7 75 c4             	divl   -0x3c(%ebp)
- 689:	0f b6 92 bc 0a 00 00 	movzbl 0xabc(%edx),%edx
- 690:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 693:	89 d8                	mov    %ebx,%eax
- 695:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 690:	89 c8                	mov    %ecx,%eax
+ 692:	31 d2                	xor    %edx,%edx
+ 694:	89 cf                	mov    %ecx,%edi
+ 696:	f7 75 c4             	divl   -0x3c(%ebp)
+ 699:	0f b6 92 cc 0a 00 00 	movzbl 0xacc(%edx),%edx
+ 6a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 6a3:	89 d8                	mov    %ebx,%eax
+ 6a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 698:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 6a8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 69b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 6ab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 69e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 6a1:	76 dd                	jbe    680 <printint+0x30>
+ 6ae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 6b1:	76 dd                	jbe    690 <printint+0x30>
   if(neg)
- 6a3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 6a6:	85 c9                	test   %ecx,%ecx
- 6a8:	74 0c                	je     6b6 <printint+0x66>
+ 6b3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 6b6:	85 c9                	test   %ecx,%ecx
+ 6b8:	74 0c                	je     6c6 <printint+0x66>
     buf[i++] = '-';
- 6aa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 6ba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 6af:	89 d8                	mov    %ebx,%eax
+ 6bf:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 6b1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 6c1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 6b6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 6b9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 6bd:	eb 07                	jmp    6c6 <printint+0x76>
- 6bf:	90                   	nop
- 6c0:	0f b6 13             	movzbl (%ebx),%edx
- 6c3:	83 eb 01             	sub    $0x1,%ebx
+ 6c6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 6c9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6cd:	eb 07                	jmp    6d6 <printint+0x76>
+ 6cf:	90                   	nop
+ 6d0:	0f b6 13             	movzbl (%ebx),%edx
+ 6d3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 6c6:	83 ec 04             	sub    $0x4,%esp
- 6c9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 6cc:	6a 01                	push   $0x1
- 6ce:	56                   	push   %esi
- 6cf:	57                   	push   %edi
- 6d0:	e8 ee fe ff ff       	call   5c3 <write>
+ 6d6:	83 ec 04             	sub    $0x4,%esp
+ 6d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 6dc:	6a 01                	push   $0x1
+ 6de:	56                   	push   %esi
+ 6df:	57                   	push   %edi
+ 6e0:	e8 de fe ff ff       	call   5c3 <write>
   while(--i >= 0)
- 6d5:	83 c4 10             	add    $0x10,%esp
- 6d8:	39 de                	cmp    %ebx,%esi
- 6da:	75 e4                	jne    6c0 <printint+0x70>
+ 6e5:	83 c4 10             	add    $0x10,%esp
+ 6e8:	39 de                	cmp    %ebx,%esi
+ 6ea:	75 e4                	jne    6d0 <printint+0x70>
     putc(fd, buf[i]);
 }
- 6dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 6df:	5b                   	pop    %ebx
- 6e0:	5e                   	pop    %esi
- 6e1:	5f                   	pop    %edi
- 6e2:	5d                   	pop    %ebp
- 6e3:	c3                   	ret    
- 6e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6ef:	5b                   	pop    %ebx
+ 6f0:	5e                   	pop    %esi
+ 6f1:	5f                   	pop    %edi
+ 6f2:	5d                   	pop    %ebp
+ 6f3:	c3                   	ret    
+ 6f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 6e8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 6ef:	eb 87                	jmp    678 <printint+0x28>
- 6f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 6f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 6ff:	90                   	nop
+ 6f8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 6ff:	eb 87                	jmp    688 <printint+0x28>
+ 701:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 708:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 70f:	90                   	nop
 
-00000700 <printf>:
+00000710 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 700:	f3 0f 1e fb          	endbr32 
- 704:	55                   	push   %ebp
- 705:	89 e5                	mov    %esp,%ebp
- 707:	57                   	push   %edi
- 708:	56                   	push   %esi
- 709:	53                   	push   %ebx
- 70a:	83 ec 2c             	sub    $0x2c,%esp
+ 710:	f3 0f 1e fb          	endbr32 
+ 714:	55                   	push   %ebp
+ 715:	89 e5                	mov    %esp,%ebp
+ 717:	57                   	push   %edi
+ 718:	56                   	push   %esi
+ 719:	53                   	push   %ebx
+ 71a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 70d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 710:	0f b6 1e             	movzbl (%esi),%ebx
- 713:	84 db                	test   %bl,%bl
- 715:	0f 84 b4 00 00 00    	je     7cf <printf+0xcf>
+ 71d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 720:	0f b6 1e             	movzbl (%esi),%ebx
+ 723:	84 db                	test   %bl,%bl
+ 725:	0f 84 b4 00 00 00    	je     7df <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 71b:	8d 45 10             	lea    0x10(%ebp),%eax
- 71e:	83 c6 01             	add    $0x1,%esi
+ 72b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 72e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 721:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 731:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 724:	31 d2                	xor    %edx,%edx
+ 734:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 726:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 729:	eb 33                	jmp    75e <printf+0x5e>
- 72b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 72f:	90                   	nop
- 730:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 736:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 739:	eb 33                	jmp    76e <printf+0x5e>
+ 73b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 73f:	90                   	nop
+ 740:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 733:	ba 25 00 00 00       	mov    $0x25,%edx
+ 743:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 738:	83 f8 25             	cmp    $0x25,%eax
- 73b:	74 17                	je     754 <printf+0x54>
+ 748:	83 f8 25             	cmp    $0x25,%eax
+ 74b:	74 17                	je     764 <printf+0x54>
   write(fd, &c, 1);
- 73d:	83 ec 04             	sub    $0x4,%esp
- 740:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 743:	6a 01                	push   $0x1
- 745:	57                   	push   %edi
- 746:	ff 75 08             	pushl  0x8(%ebp)
- 749:	e8 75 fe ff ff       	call   5c3 <write>
- 74e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 74d:	83 ec 04             	sub    $0x4,%esp
+ 750:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 753:	6a 01                	push   $0x1
+ 755:	57                   	push   %edi
+ 756:	ff 75 08             	pushl  0x8(%ebp)
+ 759:	e8 65 fe ff ff       	call   5c3 <write>
+ 75e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 751:	83 c4 10             	add    $0x10,%esp
+ 761:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 754:	0f b6 1e             	movzbl (%esi),%ebx
- 757:	83 c6 01             	add    $0x1,%esi
- 75a:	84 db                	test   %bl,%bl
- 75c:	74 71                	je     7cf <printf+0xcf>
+ 764:	0f b6 1e             	movzbl (%esi),%ebx
+ 767:	83 c6 01             	add    $0x1,%esi
+ 76a:	84 db                	test   %bl,%bl
+ 76c:	74 71                	je     7df <printf+0xcf>
     c = fmt[i] & 0xff;
- 75e:	0f be cb             	movsbl %bl,%ecx
- 761:	0f b6 c3             	movzbl %bl,%eax
+ 76e:	0f be cb             	movsbl %bl,%ecx
+ 771:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 764:	85 d2                	test   %edx,%edx
- 766:	74 c8                	je     730 <printf+0x30>
+ 774:	85 d2                	test   %edx,%edx
+ 776:	74 c8                	je     740 <printf+0x30>
       }
     } else if(state == '%'){
- 768:	83 fa 25             	cmp    $0x25,%edx
- 76b:	75 e7                	jne    754 <printf+0x54>
+ 778:	83 fa 25             	cmp    $0x25,%edx
+ 77b:	75 e7                	jne    764 <printf+0x54>
       if(c == 'd'){
- 76d:	83 f8 64             	cmp    $0x64,%eax
- 770:	0f 84 9a 00 00 00    	je     810 <printf+0x110>
+ 77d:	83 f8 64             	cmp    $0x64,%eax
+ 780:	0f 84 9a 00 00 00    	je     820 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 776:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 77c:	83 f9 70             	cmp    $0x70,%ecx
- 77f:	74 5f                	je     7e0 <printf+0xe0>
+ 786:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 78c:	83 f9 70             	cmp    $0x70,%ecx
+ 78f:	74 5f                	je     7f0 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 781:	83 f8 73             	cmp    $0x73,%eax
- 784:	0f 84 d6 00 00 00    	je     860 <printf+0x160>
+ 791:	83 f8 73             	cmp    $0x73,%eax
+ 794:	0f 84 d6 00 00 00    	je     870 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 78a:	83 f8 63             	cmp    $0x63,%eax
- 78d:	0f 84 8d 00 00 00    	je     820 <printf+0x120>
+ 79a:	83 f8 63             	cmp    $0x63,%eax
+ 79d:	0f 84 8d 00 00 00    	je     830 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 793:	83 f8 25             	cmp    $0x25,%eax
- 796:	0f 84 b4 00 00 00    	je     850 <printf+0x150>
+ 7a3:	83 f8 25             	cmp    $0x25,%eax
+ 7a6:	0f 84 b4 00 00 00    	je     860 <printf+0x150>
   write(fd, &c, 1);
- 79c:	83 ec 04             	sub    $0x4,%esp
- 79f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 7a3:	6a 01                	push   $0x1
- 7a5:	57                   	push   %edi
- 7a6:	ff 75 08             	pushl  0x8(%ebp)
- 7a9:	e8 15 fe ff ff       	call   5c3 <write>
+ 7ac:	83 ec 04             	sub    $0x4,%esp
+ 7af:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7b3:	6a 01                	push   $0x1
+ 7b5:	57                   	push   %edi
+ 7b6:	ff 75 08             	pushl  0x8(%ebp)
+ 7b9:	e8 05 fe ff ff       	call   5c3 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 7ae:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 7be:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 7b1:	83 c4 0c             	add    $0xc,%esp
- 7b4:	6a 01                	push   $0x1
- 7b6:	83 c6 01             	add    $0x1,%esi
- 7b9:	57                   	push   %edi
- 7ba:	ff 75 08             	pushl  0x8(%ebp)
- 7bd:	e8 01 fe ff ff       	call   5c3 <write>
+ 7c1:	83 c4 0c             	add    $0xc,%esp
+ 7c4:	6a 01                	push   $0x1
+ 7c6:	83 c6 01             	add    $0x1,%esi
+ 7c9:	57                   	push   %edi
+ 7ca:	ff 75 08             	pushl  0x8(%ebp)
+ 7cd:	e8 f1 fd ff ff       	call   5c3 <write>
   for(i = 0; fmt[i]; i++){
- 7c2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 7d2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 7c6:	83 c4 10             	add    $0x10,%esp
+ 7d6:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 7c9:	31 d2                	xor    %edx,%edx
+ 7d9:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 7cb:	84 db                	test   %bl,%bl
- 7cd:	75 8f                	jne    75e <printf+0x5e>
+ 7db:	84 db                	test   %bl,%bl
+ 7dd:	75 8f                	jne    76e <printf+0x5e>
     }
   }
 }
- 7cf:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 7d2:	5b                   	pop    %ebx
- 7d3:	5e                   	pop    %esi
- 7d4:	5f                   	pop    %edi
- 7d5:	5d                   	pop    %ebp
- 7d6:	c3                   	ret    
- 7d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 7de:	66 90                	xchg   %ax,%ax
+ 7df:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7e2:	5b                   	pop    %ebx
+ 7e3:	5e                   	pop    %esi
+ 7e4:	5f                   	pop    %edi
+ 7e5:	5d                   	pop    %ebp
+ 7e6:	c3                   	ret    
+ 7e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7ee:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 7e0:	83 ec 0c             	sub    $0xc,%esp
- 7e3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 7e8:	6a 00                	push   $0x0
- 7ea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 7ed:	8b 45 08             	mov    0x8(%ebp),%eax
- 7f0:	8b 13                	mov    (%ebx),%edx
- 7f2:	e8 59 fe ff ff       	call   650 <printint>
+ 7f0:	83 ec 0c             	sub    $0xc,%esp
+ 7f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 7f8:	6a 00                	push   $0x0
+ 7fa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 7fd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 800:	8b 13                	mov    (%ebx),%edx
+ 802:	e8 59 fe ff ff       	call   660 <printint>
         ap++;
- 7f7:	89 d8                	mov    %ebx,%eax
- 7f9:	83 c4 10             	add    $0x10,%esp
+ 807:	89 d8                	mov    %ebx,%eax
+ 809:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 7fc:	31 d2                	xor    %edx,%edx
+ 80c:	31 d2                	xor    %edx,%edx
         ap++;
- 7fe:	83 c0 04             	add    $0x4,%eax
- 801:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 804:	e9 4b ff ff ff       	jmp    754 <printf+0x54>
- 809:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 80e:	83 c0 04             	add    $0x4,%eax
+ 811:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 814:	e9 4b ff ff ff       	jmp    764 <printf+0x54>
+ 819:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 810:	83 ec 0c             	sub    $0xc,%esp
- 813:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 818:	6a 01                	push   $0x1
- 81a:	eb ce                	jmp    7ea <printf+0xea>
- 81c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 820:	83 ec 0c             	sub    $0xc,%esp
+ 823:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 828:	6a 01                	push   $0x1
+ 82a:	eb ce                	jmp    7fa <printf+0xea>
+ 82c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 820:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 830:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 823:	83 ec 04             	sub    $0x4,%esp
+ 833:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 826:	8b 03                	mov    (%ebx),%eax
+ 836:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 828:	6a 01                	push   $0x1
+ 838:	6a 01                	push   $0x1
         ap++;
- 82a:	83 c3 04             	add    $0x4,%ebx
+ 83a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 82d:	57                   	push   %edi
- 82e:	ff 75 08             	pushl  0x8(%ebp)
+ 83d:	57                   	push   %edi
+ 83e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 831:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 841:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 834:	e8 8a fd ff ff       	call   5c3 <write>
+ 844:	e8 7a fd ff ff       	call   5c3 <write>
         ap++;
- 839:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 83c:	83 c4 10             	add    $0x10,%esp
+ 849:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 84c:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 83f:	31 d2                	xor    %edx,%edx
- 841:	e9 0e ff ff ff       	jmp    754 <printf+0x54>
- 846:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 84d:	8d 76 00             	lea    0x0(%esi),%esi
+ 84f:	31 d2                	xor    %edx,%edx
+ 851:	e9 0e ff ff ff       	jmp    764 <printf+0x54>
+ 856:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 85d:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 850:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 860:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 853:	83 ec 04             	sub    $0x4,%esp
- 856:	e9 59 ff ff ff       	jmp    7b4 <printf+0xb4>
- 85b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 85f:	90                   	nop
+ 863:	83 ec 04             	sub    $0x4,%esp
+ 866:	e9 59 ff ff ff       	jmp    7c4 <printf+0xb4>
+ 86b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 86f:	90                   	nop
         s = (char*)*ap;
- 860:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 863:	8b 18                	mov    (%eax),%ebx
+ 870:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 873:	8b 18                	mov    (%eax),%ebx
         ap++;
- 865:	83 c0 04             	add    $0x4,%eax
- 868:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 875:	83 c0 04             	add    $0x4,%eax
+ 878:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 86b:	85 db                	test   %ebx,%ebx
- 86d:	74 17                	je     886 <printf+0x186>
+ 87b:	85 db                	test   %ebx,%ebx
+ 87d:	74 17                	je     896 <printf+0x186>
         while(*s != 0){
- 86f:	0f b6 03             	movzbl (%ebx),%eax
+ 87f:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 872:	31 d2                	xor    %edx,%edx
+ 882:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 874:	84 c0                	test   %al,%al
- 876:	0f 84 d8 fe ff ff    	je     754 <printf+0x54>
- 87c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 87f:	89 de                	mov    %ebx,%esi
- 881:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 884:	eb 1a                	jmp    8a0 <printf+0x1a0>
+ 884:	84 c0                	test   %al,%al
+ 886:	0f 84 d8 fe ff ff    	je     764 <printf+0x54>
+ 88c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 88f:	89 de                	mov    %ebx,%esi
+ 891:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 894:	eb 1a                	jmp    8b0 <printf+0x1a0>
           s = "(null)";
- 886:	bb b2 0a 00 00       	mov    $0xab2,%ebx
+ 896:	bb c2 0a 00 00       	mov    $0xac2,%ebx
         while(*s != 0){
- 88b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 88e:	b8 28 00 00 00       	mov    $0x28,%eax
- 893:	89 de                	mov    %ebx,%esi
- 895:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 898:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 89f:	90                   	nop
+ 89b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 89e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8a3:	89 de                	mov    %ebx,%esi
+ 8a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8af:	90                   	nop
   write(fd, &c, 1);
- 8a0:	83 ec 04             	sub    $0x4,%esp
+ 8b0:	83 ec 04             	sub    $0x4,%esp
           s++;
- 8a3:	83 c6 01             	add    $0x1,%esi
- 8a6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 8b3:	83 c6 01             	add    $0x1,%esi
+ 8b6:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 8a9:	6a 01                	push   $0x1
- 8ab:	57                   	push   %edi
- 8ac:	53                   	push   %ebx
- 8ad:	e8 11 fd ff ff       	call   5c3 <write>
+ 8b9:	6a 01                	push   $0x1
+ 8bb:	57                   	push   %edi
+ 8bc:	53                   	push   %ebx
+ 8bd:	e8 01 fd ff ff       	call   5c3 <write>
         while(*s != 0){
- 8b2:	0f b6 06             	movzbl (%esi),%eax
- 8b5:	83 c4 10             	add    $0x10,%esp
- 8b8:	84 c0                	test   %al,%al
- 8ba:	75 e4                	jne    8a0 <printf+0x1a0>
- 8bc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 8c2:	0f b6 06             	movzbl (%esi),%eax
+ 8c5:	83 c4 10             	add    $0x10,%esp
+ 8c8:	84 c0                	test   %al,%al
+ 8ca:	75 e4                	jne    8b0 <printf+0x1a0>
+ 8cc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 8bf:	31 d2                	xor    %edx,%edx
- 8c1:	e9 8e fe ff ff       	jmp    754 <printf+0x54>
- 8c6:	66 90                	xchg   %ax,%ax
- 8c8:	66 90                	xchg   %ax,%ax
- 8ca:	66 90                	xchg   %ax,%ax
- 8cc:	66 90                	xchg   %ax,%ax
- 8ce:	66 90                	xchg   %ax,%ax
+ 8cf:	31 d2                	xor    %edx,%edx
+ 8d1:	e9 8e fe ff ff       	jmp    764 <printf+0x54>
+ 8d6:	66 90                	xchg   %ax,%ax
+ 8d8:	66 90                	xchg   %ax,%ax
+ 8da:	66 90                	xchg   %ax,%ax
+ 8dc:	66 90                	xchg   %ax,%ax
+ 8de:	66 90                	xchg   %ax,%ax
 
-000008d0 <free>:
+000008e0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 8d0:	f3 0f 1e fb          	endbr32 
- 8d4:	55                   	push   %ebp
+ 8e0:	f3 0f 1e fb          	endbr32 
+ 8e4:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8d5:	a1 f4 0d 00 00       	mov    0xdf4,%eax
+ 8e5:	a1 04 0e 00 00       	mov    0xe04,%eax
 {
- 8da:	89 e5                	mov    %esp,%ebp
- 8dc:	57                   	push   %edi
- 8dd:	56                   	push   %esi
- 8de:	53                   	push   %ebx
- 8df:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 8e2:	8b 10                	mov    (%eax),%edx
+ 8ea:	89 e5                	mov    %esp,%ebp
+ 8ec:	57                   	push   %edi
+ 8ed:	56                   	push   %esi
+ 8ee:	53                   	push   %ebx
+ 8ef:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8f2:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 8e4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 8f4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8e7:	39 c8                	cmp    %ecx,%eax
- 8e9:	73 15                	jae    900 <free+0x30>
- 8eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 8ef:	90                   	nop
- 8f0:	39 d1                	cmp    %edx,%ecx
- 8f2:	72 14                	jb     908 <free+0x38>
+ 8f7:	39 c8                	cmp    %ecx,%eax
+ 8f9:	73 15                	jae    910 <free+0x30>
+ 8fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 8ff:	90                   	nop
+ 900:	39 d1                	cmp    %edx,%ecx
+ 902:	72 14                	jb     918 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 8f4:	39 d0                	cmp    %edx,%eax
- 8f6:	73 10                	jae    908 <free+0x38>
+ 904:	39 d0                	cmp    %edx,%eax
+ 906:	73 10                	jae    918 <free+0x38>
 {
- 8f8:	89 d0                	mov    %edx,%eax
+ 908:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8fa:	8b 10                	mov    (%eax),%edx
- 8fc:	39 c8                	cmp    %ecx,%eax
- 8fe:	72 f0                	jb     8f0 <free+0x20>
+ 90a:	8b 10                	mov    (%eax),%edx
+ 90c:	39 c8                	cmp    %ecx,%eax
+ 90e:	72 f0                	jb     900 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 900:	39 d0                	cmp    %edx,%eax
- 902:	72 f4                	jb     8f8 <free+0x28>
- 904:	39 d1                	cmp    %edx,%ecx
- 906:	73 f0                	jae    8f8 <free+0x28>
+ 910:	39 d0                	cmp    %edx,%eax
+ 912:	72 f4                	jb     908 <free+0x28>
+ 914:	39 d1                	cmp    %edx,%ecx
+ 916:	73 f0                	jae    908 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 908:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 90b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 90e:	39 fa                	cmp    %edi,%edx
- 910:	74 1e                	je     930 <free+0x60>
+ 918:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 91b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 91e:	39 fa                	cmp    %edi,%edx
+ 920:	74 1e                	je     940 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 912:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 922:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 915:	8b 50 04             	mov    0x4(%eax),%edx
- 918:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 91b:	39 f1                	cmp    %esi,%ecx
- 91d:	74 28                	je     947 <free+0x77>
+ 925:	8b 50 04             	mov    0x4(%eax),%edx
+ 928:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 92b:	39 f1                	cmp    %esi,%ecx
+ 92d:	74 28                	je     957 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 91f:	89 08                	mov    %ecx,(%eax)
+ 92f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 921:	5b                   	pop    %ebx
+ 931:	5b                   	pop    %ebx
   freep = p;
- 922:	a3 f4 0d 00 00       	mov    %eax,0xdf4
+ 932:	a3 04 0e 00 00       	mov    %eax,0xe04
 }
- 927:	5e                   	pop    %esi
- 928:	5f                   	pop    %edi
- 929:	5d                   	pop    %ebp
- 92a:	c3                   	ret    
- 92b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 92f:	90                   	nop
+ 937:	5e                   	pop    %esi
+ 938:	5f                   	pop    %edi
+ 939:	5d                   	pop    %ebp
+ 93a:	c3                   	ret    
+ 93b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 93f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 930:	03 72 04             	add    0x4(%edx),%esi
- 933:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 940:	03 72 04             	add    0x4(%edx),%esi
+ 943:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 936:	8b 10                	mov    (%eax),%edx
- 938:	8b 12                	mov    (%edx),%edx
- 93a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 946:	8b 10                	mov    (%eax),%edx
+ 948:	8b 12                	mov    (%edx),%edx
+ 94a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 93d:	8b 50 04             	mov    0x4(%eax),%edx
- 940:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 943:	39 f1                	cmp    %esi,%ecx
- 945:	75 d8                	jne    91f <free+0x4f>
+ 94d:	8b 50 04             	mov    0x4(%eax),%edx
+ 950:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 953:	39 f1                	cmp    %esi,%ecx
+ 955:	75 d8                	jne    92f <free+0x4f>
     p->s.size += bp->s.size;
- 947:	03 53 fc             	add    -0x4(%ebx),%edx
+ 957:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 94a:	a3 f4 0d 00 00       	mov    %eax,0xdf4
+ 95a:	a3 04 0e 00 00       	mov    %eax,0xe04
     p->s.size += bp->s.size;
- 94f:	89 50 04             	mov    %edx,0x4(%eax)
+ 95f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 952:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 955:	89 10                	mov    %edx,(%eax)
+ 962:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 965:	89 10                	mov    %edx,(%eax)
 }
- 957:	5b                   	pop    %ebx
- 958:	5e                   	pop    %esi
- 959:	5f                   	pop    %edi
- 95a:	5d                   	pop    %ebp
- 95b:	c3                   	ret    
- 95c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 967:	5b                   	pop    %ebx
+ 968:	5e                   	pop    %esi
+ 969:	5f                   	pop    %edi
+ 96a:	5d                   	pop    %ebp
+ 96b:	c3                   	ret    
+ 96c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000960 <malloc>:
+00000970 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 960:	f3 0f 1e fb          	endbr32 
- 964:	55                   	push   %ebp
- 965:	89 e5                	mov    %esp,%ebp
- 967:	57                   	push   %edi
- 968:	56                   	push   %esi
- 969:	53                   	push   %ebx
- 96a:	83 ec 1c             	sub    $0x1c,%esp
+ 970:	f3 0f 1e fb          	endbr32 
+ 974:	55                   	push   %ebp
+ 975:	89 e5                	mov    %esp,%ebp
+ 977:	57                   	push   %edi
+ 978:	56                   	push   %esi
+ 979:	53                   	push   %ebx
+ 97a:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 96d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 97d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 970:	8b 3d f4 0d 00 00    	mov    0xdf4,%edi
+ 980:	8b 3d 04 0e 00 00    	mov    0xe04,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 976:	8d 70 07             	lea    0x7(%eax),%esi
- 979:	c1 ee 03             	shr    $0x3,%esi
- 97c:	83 c6 01             	add    $0x1,%esi
+ 986:	8d 70 07             	lea    0x7(%eax),%esi
+ 989:	c1 ee 03             	shr    $0x3,%esi
+ 98c:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 97f:	85 ff                	test   %edi,%edi
- 981:	0f 84 a9 00 00 00    	je     a30 <malloc+0xd0>
+ 98f:	85 ff                	test   %edi,%edi
+ 991:	0f 84 a9 00 00 00    	je     a40 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 987:	8b 07                	mov    (%edi),%eax
+ 997:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 989:	8b 48 04             	mov    0x4(%eax),%ecx
- 98c:	39 f1                	cmp    %esi,%ecx
- 98e:	73 6d                	jae    9fd <malloc+0x9d>
- 990:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 996:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 99b:	0f 43 de             	cmovae %esi,%ebx
+ 999:	8b 48 04             	mov    0x4(%eax),%ecx
+ 99c:	39 f1                	cmp    %esi,%ecx
+ 99e:	73 6d                	jae    a0d <malloc+0x9d>
+ 9a0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 9a6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 9ab:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 99e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 9a5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 9a8:	eb 17                	jmp    9c1 <malloc+0x61>
- 9aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 9ae:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 9b5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 9b8:	eb 17                	jmp    9d1 <malloc+0x61>
+ 9ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 9b0:	8b 10                	mov    (%eax),%edx
+ 9c0:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 9b2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 9b5:	39 f1                	cmp    %esi,%ecx
- 9b7:	73 4f                	jae    a08 <malloc+0xa8>
- 9b9:	8b 3d f4 0d 00 00    	mov    0xdf4,%edi
- 9bf:	89 d0                	mov    %edx,%eax
+ 9c2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 9c5:	39 f1                	cmp    %esi,%ecx
+ 9c7:	73 4f                	jae    a18 <malloc+0xa8>
+ 9c9:	8b 3d 04 0e 00 00    	mov    0xe04,%edi
+ 9cf:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 9c1:	39 c7                	cmp    %eax,%edi
- 9c3:	75 eb                	jne    9b0 <malloc+0x50>
+ 9d1:	39 c7                	cmp    %eax,%edi
+ 9d3:	75 eb                	jne    9c0 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 9c5:	83 ec 0c             	sub    $0xc,%esp
- 9c8:	ff 75 e4             	pushl  -0x1c(%ebp)
- 9cb:	e8 5b fc ff ff       	call   62b <sbrk>
+ 9d5:	83 ec 0c             	sub    $0xc,%esp
+ 9d8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 9db:	e8 4b fc ff ff       	call   62b <sbrk>
   if(p == (char*)-1)
- 9d0:	83 c4 10             	add    $0x10,%esp
- 9d3:	83 f8 ff             	cmp    $0xffffffff,%eax
- 9d6:	74 1b                	je     9f3 <malloc+0x93>
+ 9e0:	83 c4 10             	add    $0x10,%esp
+ 9e3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 9e6:	74 1b                	je     a03 <malloc+0x93>
   hp->s.size = nu;
- 9d8:	89 58 04             	mov    %ebx,0x4(%eax)
+ 9e8:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 9db:	83 ec 0c             	sub    $0xc,%esp
- 9de:	83 c0 08             	add    $0x8,%eax
- 9e1:	50                   	push   %eax
- 9e2:	e8 e9 fe ff ff       	call   8d0 <free>
+ 9eb:	83 ec 0c             	sub    $0xc,%esp
+ 9ee:	83 c0 08             	add    $0x8,%eax
+ 9f1:	50                   	push   %eax
+ 9f2:	e8 e9 fe ff ff       	call   8e0 <free>
   return freep;
- 9e7:	a1 f4 0d 00 00       	mov    0xdf4,%eax
+ 9f7:	a1 04 0e 00 00       	mov    0xe04,%eax
       if((p = morecore(nunits)) == 0)
- 9ec:	83 c4 10             	add    $0x10,%esp
- 9ef:	85 c0                	test   %eax,%eax
- 9f1:	75 bd                	jne    9b0 <malloc+0x50>
+ 9fc:	83 c4 10             	add    $0x10,%esp
+ 9ff:	85 c0                	test   %eax,%eax
+ a01:	75 bd                	jne    9c0 <malloc+0x50>
         return 0;
   }
 }
- 9f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ a03:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 9f6:	31 c0                	xor    %eax,%eax
+ a06:	31 c0                	xor    %eax,%eax
 }
- 9f8:	5b                   	pop    %ebx
- 9f9:	5e                   	pop    %esi
- 9fa:	5f                   	pop    %edi
- 9fb:	5d                   	pop    %ebp
- 9fc:	c3                   	ret    
+ a08:	5b                   	pop    %ebx
+ a09:	5e                   	pop    %esi
+ a0a:	5f                   	pop    %edi
+ a0b:	5d                   	pop    %ebp
+ a0c:	c3                   	ret    
     if(p->s.size >= nunits){
- 9fd:	89 c2                	mov    %eax,%edx
- 9ff:	89 f8                	mov    %edi,%eax
- a01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a0d:	89 c2                	mov    %eax,%edx
+ a0f:	89 f8                	mov    %edi,%eax
+ a11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- a08:	39 ce                	cmp    %ecx,%esi
- a0a:	74 54                	je     a60 <malloc+0x100>
+ a18:	39 ce                	cmp    %ecx,%esi
+ a1a:	74 54                	je     a70 <malloc+0x100>
         p->s.size -= nunits;
- a0c:	29 f1                	sub    %esi,%ecx
- a0e:	89 4a 04             	mov    %ecx,0x4(%edx)
+ a1c:	29 f1                	sub    %esi,%ecx
+ a1e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- a11:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ a21:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- a14:	89 72 04             	mov    %esi,0x4(%edx)
+ a24:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- a17:	a3 f4 0d 00 00       	mov    %eax,0xdf4
+ a27:	a3 04 0e 00 00       	mov    %eax,0xe04
 }
- a1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ a2c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- a1f:	8d 42 08             	lea    0x8(%edx),%eax
+ a2f:	8d 42 08             	lea    0x8(%edx),%eax
 }
- a22:	5b                   	pop    %ebx
- a23:	5e                   	pop    %esi
- a24:	5f                   	pop    %edi
- a25:	5d                   	pop    %ebp
- a26:	c3                   	ret    
- a27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- a2e:	66 90                	xchg   %ax,%ax
+ a32:	5b                   	pop    %ebx
+ a33:	5e                   	pop    %esi
+ a34:	5f                   	pop    %edi
+ a35:	5d                   	pop    %ebp
+ a36:	c3                   	ret    
+ a37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a3e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- a30:	c7 05 f4 0d 00 00 f8 	movl   $0xdf8,0xdf4
- a37:	0d 00 00 
+ a40:	c7 05 04 0e 00 00 08 	movl   $0xe08,0xe04
+ a47:	0e 00 00 
     base.s.size = 0;
- a3a:	bf f8 0d 00 00       	mov    $0xdf8,%edi
+ a4a:	bf 08 0e 00 00       	mov    $0xe08,%edi
     base.s.ptr = freep = prevp = &base;
- a3f:	c7 05 f8 0d 00 00 f8 	movl   $0xdf8,0xdf8
- a46:	0d 00 00 
+ a4f:	c7 05 08 0e 00 00 08 	movl   $0xe08,0xe08
+ a56:	0e 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- a49:	89 f8                	mov    %edi,%eax
+ a59:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- a4b:	c7 05 fc 0d 00 00 00 	movl   $0x0,0xdfc
- a52:	00 00 00 
+ a5b:	c7 05 0c 0e 00 00 00 	movl   $0x0,0xe0c
+ a62:	00 00 00 
     if(p->s.size >= nunits){
- a55:	e9 36 ff ff ff       	jmp    990 <malloc+0x30>
- a5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ a65:	e9 36 ff ff ff       	jmp    9a0 <malloc+0x30>
+ a6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- a60:	8b 0a                	mov    (%edx),%ecx
- a62:	89 08                	mov    %ecx,(%eax)
- a64:	eb b1                	jmp    a17 <malloc+0xb7>
+ a70:	8b 0a                	mov    (%edx),%ecx
+ a72:	89 08                	mov    %ecx,(%eax)
+ a74:	eb b1                	jmp    a27 <malloc+0xb7>
Binary files xv6-public-original/ls.o and xv6-public/ls.o differ
diff -ruN xv6-public-original/ls.sym xv6-public/ls.sym
--- xv6-public-original/ls.sym	2022-08-13 16:28:54.516277000 +0530
+++ xv6-public/ls.sym	2022-09-05 20:56:50.006960000 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000a68 .rodata
-00000ad0 .eh_frame
-00000de4 .bss
+00000a78 .rodata
+00000ae0 .eh_frame
+00000df4 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -11,22 +11,23 @@
 00000000 .debug_loc
 00000000 .debug_ranges
 00000000 ls.c
-00000de4 buf.1096
+00000df4 buf.1105
 00000000 ulib.c
 00000000 printf.c
-00000650 printint
-00000abc digits.1085
+00000660 printint
+00000acc digits.1094
 00000000 umalloc.c
-00000df4 freep
-00000df8 base
+00000e04 freep
+00000e08 base
 00000340 strcpy
 00000060 fmtname
-00000700 printf
+00000710 printf
+00000653 thread_exit
 00000570 memmove
 000005eb mknod
 00000460 gets
 00000623 getpid
-00000960 malloc
+00000970 malloc
 00000633 sleep
 000005b3 pipe
 000005c3 write
@@ -40,14 +41,14 @@
 0000059b fork
 0000062b sbrk
 0000063b uptime
-00000de4 __bss_start
+00000df4 __bss_start
 00000400 memset
 00000000 main
 00000370 strcmp
 0000061b dup
 000004e0 stat
-00000de4 _edata
-00000e00 _end
+00000df4 _edata
+00000e10 _end
 00000603 link
 00000100 ls
 000005a3 exit
@@ -55,6 +56,8 @@
 000003c0 strlen
 000005e3 open
 00000420 strchr
+00000643 thread_create
 0000060b mkdir
 000005cb close
-000008d0 free
+0000064b thread_join
+000008e0 free
Binary files xv6-public-original/main.o and xv6-public/main.o differ
diff -ruN xv6-public-original/Makefile xv6-public/Makefile
--- xv6-public-original/Makefile	2022-08-13 16:26:49.404213000 +0530
+++ xv6-public/Makefile	2022-08-30 01:00:12.000000000 +0530
@@ -76,7 +76,7 @@
 LD = $(TOOLPREFIX)ld
 OBJCOPY = $(TOOLPREFIX)objcopy
 OBJDUMP = $(TOOLPREFIX)objdump
-CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer
+CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Werror -Wall -MD -ggdb -m32  -fno-omit-frame-pointer
 CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
 ASFLAGS = -m32 -gdwarf-2 -Wa,-divide
 # FreeBSD ld wants ``elf_i386_fbsd''
@@ -181,6 +181,7 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_thread\
 	
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -253,6 +254,7 @@
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
+	printf.c umalloc.c thread.c\
 
 dist:
 	rm -rf dist
Binary files xv6-public-original/_mkdir and xv6-public/_mkdir differ
diff -ruN xv6-public-original/mkdir.asm xv6-public/mkdir.asm
--- xv6-public-original/mkdir.asm	2022-08-13 16:28:54.588254000 +0530
+++ xv6-public/mkdir.asm	2022-09-05 20:56:50.094960000 +0530
@@ -59,18 +59,18 @@
       printf(2, "mkdir: %s failed to create\n", argv[i]);
   50:	50                   	push   %eax
   51:	ff 33                	pushl  (%ebx)
-  53:	68 bf 07 00 00       	push   $0x7bf
+  53:	68 cf 07 00 00       	push   $0x7cf
   58:	6a 02                	push   $0x2
-  5a:	e8 e1 03 00 00       	call   440 <printf>
+  5a:	e8 f1 03 00 00       	call   450 <printf>
       break;
   5f:	83 c4 10             	add    $0x10,%esp
   62:	eb e7                	jmp    4b <main+0x4b>
     printf(2, "Usage: mkdir files...\n");
   64:	52                   	push   %edx
   65:	52                   	push   %edx
-  66:	68 a8 07 00 00       	push   $0x7a8
+  66:	68 b8 07 00 00       	push   $0x7b8
   6b:	6a 02                	push   $0x2
-  6d:	e8 ce 03 00 00       	call   440 <printf>
+  6d:	e8 de 03 00 00       	call   450 <printf>
     exit();
   72:	e8 6c 02 00 00       	call   2e3 <exit>
   77:	66 90                	xchg   %ax,%ax
@@ -605,609 +605,623 @@
  37b:	b8 0e 00 00 00       	mov    $0xe,%eax
  380:	cd 40                	int    $0x40
  382:	c3                   	ret    
- 383:	66 90                	xchg   %ax,%ax
- 385:	66 90                	xchg   %ax,%ax
- 387:	66 90                	xchg   %ax,%ax
- 389:	66 90                	xchg   %ax,%ax
- 38b:	66 90                	xchg   %ax,%ax
- 38d:	66 90                	xchg   %ax,%ax
- 38f:	90                   	nop
 
-00000390 <printint>:
+00000383 <thread_create>:
+SYSCALL(thread_create)
+ 383:	b8 16 00 00 00       	mov    $0x16,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <thread_join>:
+SYSCALL(thread_join)
+ 38b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <thread_exit>:
+SYSCALL(thread_exit)
+ 393:	b8 18 00 00 00       	mov    $0x18,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+ 39b:	66 90                	xchg   %ax,%ax
+ 39d:	66 90                	xchg   %ax,%ax
+ 39f:	90                   	nop
+
+000003a0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 390:	55                   	push   %ebp
- 391:	89 e5                	mov    %esp,%ebp
- 393:	57                   	push   %edi
- 394:	56                   	push   %esi
- 395:	53                   	push   %ebx
- 396:	83 ec 3c             	sub    $0x3c,%esp
- 399:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	56                   	push   %esi
+ 3a5:	53                   	push   %ebx
+ 3a6:	83 ec 3c             	sub    $0x3c,%esp
+ 3a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 39c:	89 d1                	mov    %edx,%ecx
+ 3ac:	89 d1                	mov    %edx,%ecx
 {
- 39e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 3ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 3a1:	85 d2                	test   %edx,%edx
- 3a3:	0f 89 7f 00 00 00    	jns    428 <printint+0x98>
- 3a9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 3ad:	74 79                	je     428 <printint+0x98>
+ 3b1:	85 d2                	test   %edx,%edx
+ 3b3:	0f 89 7f 00 00 00    	jns    438 <printint+0x98>
+ 3b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3bd:	74 79                	je     438 <printint+0x98>
     neg = 1;
- 3af:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 3bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 3b6:	f7 d9                	neg    %ecx
+ 3c6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 3b8:	31 db                	xor    %ebx,%ebx
- 3ba:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 3bd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3c8:	31 db                	xor    %ebx,%ebx
+ 3ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 3c0:	89 c8                	mov    %ecx,%eax
- 3c2:	31 d2                	xor    %edx,%edx
- 3c4:	89 cf                	mov    %ecx,%edi
- 3c6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3c9:	0f b6 92 e4 07 00 00 	movzbl 0x7e4(%edx),%edx
- 3d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3d3:	89 d8                	mov    %ebx,%eax
- 3d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 3d0:	89 c8                	mov    %ecx,%eax
+ 3d2:	31 d2                	xor    %edx,%edx
+ 3d4:	89 cf                	mov    %ecx,%edi
+ 3d6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3d9:	0f b6 92 f4 07 00 00 	movzbl 0x7f4(%edx),%edx
+ 3e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3e3:	89 d8                	mov    %ebx,%eax
+ 3e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 3d8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 3e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 3db:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 3eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 3de:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3e1:	76 dd                	jbe    3c0 <printint+0x30>
+ 3ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3f1:	76 dd                	jbe    3d0 <printint+0x30>
   if(neg)
- 3e3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3e6:	85 c9                	test   %ecx,%ecx
- 3e8:	74 0c                	je     3f6 <printint+0x66>
+ 3f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3f6:	85 c9                	test   %ecx,%ecx
+ 3f8:	74 0c                	je     406 <printint+0x66>
     buf[i++] = '-';
- 3ea:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 3fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 3ef:	89 d8                	mov    %ebx,%eax
+ 3ff:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 3f1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 401:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 3f6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3f9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3fd:	eb 07                	jmp    406 <printint+0x76>
- 3ff:	90                   	nop
- 400:	0f b6 13             	movzbl (%ebx),%edx
- 403:	83 eb 01             	sub    $0x1,%ebx
+ 406:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 409:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 40d:	eb 07                	jmp    416 <printint+0x76>
+ 40f:	90                   	nop
+ 410:	0f b6 13             	movzbl (%ebx),%edx
+ 413:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 406:	83 ec 04             	sub    $0x4,%esp
- 409:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 40c:	6a 01                	push   $0x1
- 40e:	56                   	push   %esi
- 40f:	57                   	push   %edi
- 410:	e8 ee fe ff ff       	call   303 <write>
+ 416:	83 ec 04             	sub    $0x4,%esp
+ 419:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 41c:	6a 01                	push   $0x1
+ 41e:	56                   	push   %esi
+ 41f:	57                   	push   %edi
+ 420:	e8 de fe ff ff       	call   303 <write>
   while(--i >= 0)
- 415:	83 c4 10             	add    $0x10,%esp
- 418:	39 de                	cmp    %ebx,%esi
- 41a:	75 e4                	jne    400 <printint+0x70>
+ 425:	83 c4 10             	add    $0x10,%esp
+ 428:	39 de                	cmp    %ebx,%esi
+ 42a:	75 e4                	jne    410 <printint+0x70>
     putc(fd, buf[i]);
 }
- 41c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 41f:	5b                   	pop    %ebx
- 420:	5e                   	pop    %esi
- 421:	5f                   	pop    %edi
- 422:	5d                   	pop    %ebp
- 423:	c3                   	ret    
- 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 42c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 42f:	5b                   	pop    %ebx
+ 430:	5e                   	pop    %esi
+ 431:	5f                   	pop    %edi
+ 432:	5d                   	pop    %ebp
+ 433:	c3                   	ret    
+ 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 428:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 42f:	eb 87                	jmp    3b8 <printint+0x28>
- 431:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 438:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 43f:	90                   	nop
+ 438:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 43f:	eb 87                	jmp    3c8 <printint+0x28>
+ 441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 448:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44f:	90                   	nop
 
-00000440 <printf>:
+00000450 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 440:	f3 0f 1e fb          	endbr32 
- 444:	55                   	push   %ebp
- 445:	89 e5                	mov    %esp,%ebp
- 447:	57                   	push   %edi
- 448:	56                   	push   %esi
- 449:	53                   	push   %ebx
- 44a:	83 ec 2c             	sub    $0x2c,%esp
+ 450:	f3 0f 1e fb          	endbr32 
+ 454:	55                   	push   %ebp
+ 455:	89 e5                	mov    %esp,%ebp
+ 457:	57                   	push   %edi
+ 458:	56                   	push   %esi
+ 459:	53                   	push   %ebx
+ 45a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 44d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 450:	0f b6 1e             	movzbl (%esi),%ebx
- 453:	84 db                	test   %bl,%bl
- 455:	0f 84 b4 00 00 00    	je     50f <printf+0xcf>
+ 45d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 460:	0f b6 1e             	movzbl (%esi),%ebx
+ 463:	84 db                	test   %bl,%bl
+ 465:	0f 84 b4 00 00 00    	je     51f <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 45b:	8d 45 10             	lea    0x10(%ebp),%eax
- 45e:	83 c6 01             	add    $0x1,%esi
+ 46b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 46e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 461:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 471:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 464:	31 d2                	xor    %edx,%edx
+ 474:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 466:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 469:	eb 33                	jmp    49e <printf+0x5e>
- 46b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 46f:	90                   	nop
- 470:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 476:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 479:	eb 33                	jmp    4ae <printf+0x5e>
+ 47b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 47f:	90                   	nop
+ 480:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 473:	ba 25 00 00 00       	mov    $0x25,%edx
+ 483:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 478:	83 f8 25             	cmp    $0x25,%eax
- 47b:	74 17                	je     494 <printf+0x54>
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	74 17                	je     4a4 <printf+0x54>
   write(fd, &c, 1);
- 47d:	83 ec 04             	sub    $0x4,%esp
- 480:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 483:	6a 01                	push   $0x1
- 485:	57                   	push   %edi
- 486:	ff 75 08             	pushl  0x8(%ebp)
- 489:	e8 75 fe ff ff       	call   303 <write>
- 48e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 48d:	83 ec 04             	sub    $0x4,%esp
+ 490:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 493:	6a 01                	push   $0x1
+ 495:	57                   	push   %edi
+ 496:	ff 75 08             	pushl  0x8(%ebp)
+ 499:	e8 65 fe ff ff       	call   303 <write>
+ 49e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 491:	83 c4 10             	add    $0x10,%esp
+ 4a1:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 494:	0f b6 1e             	movzbl (%esi),%ebx
- 497:	83 c6 01             	add    $0x1,%esi
- 49a:	84 db                	test   %bl,%bl
- 49c:	74 71                	je     50f <printf+0xcf>
+ 4a4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4a7:	83 c6 01             	add    $0x1,%esi
+ 4aa:	84 db                	test   %bl,%bl
+ 4ac:	74 71                	je     51f <printf+0xcf>
     c = fmt[i] & 0xff;
- 49e:	0f be cb             	movsbl %bl,%ecx
- 4a1:	0f b6 c3             	movzbl %bl,%eax
+ 4ae:	0f be cb             	movsbl %bl,%ecx
+ 4b1:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 4a4:	85 d2                	test   %edx,%edx
- 4a6:	74 c8                	je     470 <printf+0x30>
+ 4b4:	85 d2                	test   %edx,%edx
+ 4b6:	74 c8                	je     480 <printf+0x30>
       }
     } else if(state == '%'){
- 4a8:	83 fa 25             	cmp    $0x25,%edx
- 4ab:	75 e7                	jne    494 <printf+0x54>
+ 4b8:	83 fa 25             	cmp    $0x25,%edx
+ 4bb:	75 e7                	jne    4a4 <printf+0x54>
       if(c == 'd'){
- 4ad:	83 f8 64             	cmp    $0x64,%eax
- 4b0:	0f 84 9a 00 00 00    	je     550 <printf+0x110>
+ 4bd:	83 f8 64             	cmp    $0x64,%eax
+ 4c0:	0f 84 9a 00 00 00    	je     560 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 4b6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 4bc:	83 f9 70             	cmp    $0x70,%ecx
- 4bf:	74 5f                	je     520 <printf+0xe0>
+ 4c6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4cc:	83 f9 70             	cmp    $0x70,%ecx
+ 4cf:	74 5f                	je     530 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 4c1:	83 f8 73             	cmp    $0x73,%eax
- 4c4:	0f 84 d6 00 00 00    	je     5a0 <printf+0x160>
+ 4d1:	83 f8 73             	cmp    $0x73,%eax
+ 4d4:	0f 84 d6 00 00 00    	je     5b0 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 4ca:	83 f8 63             	cmp    $0x63,%eax
- 4cd:	0f 84 8d 00 00 00    	je     560 <printf+0x120>
+ 4da:	83 f8 63             	cmp    $0x63,%eax
+ 4dd:	0f 84 8d 00 00 00    	je     570 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 4d3:	83 f8 25             	cmp    $0x25,%eax
- 4d6:	0f 84 b4 00 00 00    	je     590 <printf+0x150>
+ 4e3:	83 f8 25             	cmp    $0x25,%eax
+ 4e6:	0f 84 b4 00 00 00    	je     5a0 <printf+0x150>
   write(fd, &c, 1);
- 4dc:	83 ec 04             	sub    $0x4,%esp
- 4df:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4e3:	6a 01                	push   $0x1
- 4e5:	57                   	push   %edi
- 4e6:	ff 75 08             	pushl  0x8(%ebp)
- 4e9:	e8 15 fe ff ff       	call   303 <write>
+ 4ec:	83 ec 04             	sub    $0x4,%esp
+ 4ef:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4f3:	6a 01                	push   $0x1
+ 4f5:	57                   	push   %edi
+ 4f6:	ff 75 08             	pushl  0x8(%ebp)
+ 4f9:	e8 05 fe ff ff       	call   303 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 4ee:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4fe:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 4f1:	83 c4 0c             	add    $0xc,%esp
- 4f4:	6a 01                	push   $0x1
- 4f6:	83 c6 01             	add    $0x1,%esi
- 4f9:	57                   	push   %edi
- 4fa:	ff 75 08             	pushl  0x8(%ebp)
- 4fd:	e8 01 fe ff ff       	call   303 <write>
+ 501:	83 c4 0c             	add    $0xc,%esp
+ 504:	6a 01                	push   $0x1
+ 506:	83 c6 01             	add    $0x1,%esi
+ 509:	57                   	push   %edi
+ 50a:	ff 75 08             	pushl  0x8(%ebp)
+ 50d:	e8 f1 fd ff ff       	call   303 <write>
   for(i = 0; fmt[i]; i++){
- 502:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 512:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 506:	83 c4 10             	add    $0x10,%esp
+ 516:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 509:	31 d2                	xor    %edx,%edx
+ 519:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 50b:	84 db                	test   %bl,%bl
- 50d:	75 8f                	jne    49e <printf+0x5e>
+ 51b:	84 db                	test   %bl,%bl
+ 51d:	75 8f                	jne    4ae <printf+0x5e>
     }
   }
 }
- 50f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 512:	5b                   	pop    %ebx
- 513:	5e                   	pop    %esi
- 514:	5f                   	pop    %edi
- 515:	5d                   	pop    %ebp
- 516:	c3                   	ret    
- 517:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 51e:	66 90                	xchg   %ax,%ax
+ 51f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 522:	5b                   	pop    %ebx
+ 523:	5e                   	pop    %esi
+ 524:	5f                   	pop    %edi
+ 525:	5d                   	pop    %ebp
+ 526:	c3                   	ret    
+ 527:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 52e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 520:	83 ec 0c             	sub    $0xc,%esp
- 523:	b9 10 00 00 00       	mov    $0x10,%ecx
- 528:	6a 00                	push   $0x0
- 52a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 52d:	8b 45 08             	mov    0x8(%ebp),%eax
- 530:	8b 13                	mov    (%ebx),%edx
- 532:	e8 59 fe ff ff       	call   390 <printint>
+ 530:	83 ec 0c             	sub    $0xc,%esp
+ 533:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 538:	6a 00                	push   $0x0
+ 53a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 53d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 540:	8b 13                	mov    (%ebx),%edx
+ 542:	e8 59 fe ff ff       	call   3a0 <printint>
         ap++;
- 537:	89 d8                	mov    %ebx,%eax
- 539:	83 c4 10             	add    $0x10,%esp
+ 547:	89 d8                	mov    %ebx,%eax
+ 549:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 53c:	31 d2                	xor    %edx,%edx
+ 54c:	31 d2                	xor    %edx,%edx
         ap++;
- 53e:	83 c0 04             	add    $0x4,%eax
- 541:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 544:	e9 4b ff ff ff       	jmp    494 <printf+0x54>
- 549:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54e:	83 c0 04             	add    $0x4,%eax
+ 551:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 554:	e9 4b ff ff ff       	jmp    4a4 <printf+0x54>
+ 559:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 550:	83 ec 0c             	sub    $0xc,%esp
- 553:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 558:	6a 01                	push   $0x1
- 55a:	eb ce                	jmp    52a <printf+0xea>
- 55c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 560:	83 ec 0c             	sub    $0xc,%esp
+ 563:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 568:	6a 01                	push   $0x1
+ 56a:	eb ce                	jmp    53a <printf+0xea>
+ 56c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 560:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 570:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 563:	83 ec 04             	sub    $0x4,%esp
+ 573:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 566:	8b 03                	mov    (%ebx),%eax
+ 576:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 568:	6a 01                	push   $0x1
+ 578:	6a 01                	push   $0x1
         ap++;
- 56a:	83 c3 04             	add    $0x4,%ebx
+ 57a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 56d:	57                   	push   %edi
- 56e:	ff 75 08             	pushl  0x8(%ebp)
+ 57d:	57                   	push   %edi
+ 57e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 571:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 581:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 574:	e8 8a fd ff ff       	call   303 <write>
+ 584:	e8 7a fd ff ff       	call   303 <write>
         ap++;
- 579:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 57c:	83 c4 10             	add    $0x10,%esp
+ 589:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 58c:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 57f:	31 d2                	xor    %edx,%edx
- 581:	e9 0e ff ff ff       	jmp    494 <printf+0x54>
- 586:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 58d:	8d 76 00             	lea    0x0(%esi),%esi
+ 58f:	31 d2                	xor    %edx,%edx
+ 591:	e9 0e ff ff ff       	jmp    4a4 <printf+0x54>
+ 596:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 59d:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 590:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 5a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 593:	83 ec 04             	sub    $0x4,%esp
- 596:	e9 59 ff ff ff       	jmp    4f4 <printf+0xb4>
- 59b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 59f:	90                   	nop
+ 5a3:	83 ec 04             	sub    $0x4,%esp
+ 5a6:	e9 59 ff ff ff       	jmp    504 <printf+0xb4>
+ 5ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5af:	90                   	nop
         s = (char*)*ap;
- 5a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 5a3:	8b 18                	mov    (%eax),%ebx
+ 5b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5b3:	8b 18                	mov    (%eax),%ebx
         ap++;
- 5a5:	83 c0 04             	add    $0x4,%eax
- 5a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5b5:	83 c0 04             	add    $0x4,%eax
+ 5b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 5ab:	85 db                	test   %ebx,%ebx
- 5ad:	74 17                	je     5c6 <printf+0x186>
+ 5bb:	85 db                	test   %ebx,%ebx
+ 5bd:	74 17                	je     5d6 <printf+0x186>
         while(*s != 0){
- 5af:	0f b6 03             	movzbl (%ebx),%eax
+ 5bf:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 5b2:	31 d2                	xor    %edx,%edx
+ 5c2:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 5b4:	84 c0                	test   %al,%al
- 5b6:	0f 84 d8 fe ff ff    	je     494 <printf+0x54>
- 5bc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5bf:	89 de                	mov    %ebx,%esi
- 5c1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5c4:	eb 1a                	jmp    5e0 <printf+0x1a0>
+ 5c4:	84 c0                	test   %al,%al
+ 5c6:	0f 84 d8 fe ff ff    	je     4a4 <printf+0x54>
+ 5cc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5cf:	89 de                	mov    %ebx,%esi
+ 5d1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d4:	eb 1a                	jmp    5f0 <printf+0x1a0>
           s = "(null)";
- 5c6:	bb db 07 00 00       	mov    $0x7db,%ebx
+ 5d6:	bb eb 07 00 00       	mov    $0x7eb,%ebx
         while(*s != 0){
- 5cb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5ce:	b8 28 00 00 00       	mov    $0x28,%eax
- 5d3:	89 de                	mov    %ebx,%esi
- 5d5:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5df:	90                   	nop
+ 5db:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5de:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5e3:	89 de                	mov    %ebx,%esi
+ 5e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ef:	90                   	nop
   write(fd, &c, 1);
- 5e0:	83 ec 04             	sub    $0x4,%esp
+ 5f0:	83 ec 04             	sub    $0x4,%esp
           s++;
- 5e3:	83 c6 01             	add    $0x1,%esi
- 5e6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 5f3:	83 c6 01             	add    $0x1,%esi
+ 5f6:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 5e9:	6a 01                	push   $0x1
- 5eb:	57                   	push   %edi
- 5ec:	53                   	push   %ebx
- 5ed:	e8 11 fd ff ff       	call   303 <write>
+ 5f9:	6a 01                	push   $0x1
+ 5fb:	57                   	push   %edi
+ 5fc:	53                   	push   %ebx
+ 5fd:	e8 01 fd ff ff       	call   303 <write>
         while(*s != 0){
- 5f2:	0f b6 06             	movzbl (%esi),%eax
- 5f5:	83 c4 10             	add    $0x10,%esp
- 5f8:	84 c0                	test   %al,%al
- 5fa:	75 e4                	jne    5e0 <printf+0x1a0>
- 5fc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 602:	0f b6 06             	movzbl (%esi),%eax
+ 605:	83 c4 10             	add    $0x10,%esp
+ 608:	84 c0                	test   %al,%al
+ 60a:	75 e4                	jne    5f0 <printf+0x1a0>
+ 60c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 5ff:	31 d2                	xor    %edx,%edx
- 601:	e9 8e fe ff ff       	jmp    494 <printf+0x54>
- 606:	66 90                	xchg   %ax,%ax
- 608:	66 90                	xchg   %ax,%ax
- 60a:	66 90                	xchg   %ax,%ax
- 60c:	66 90                	xchg   %ax,%ax
- 60e:	66 90                	xchg   %ax,%ax
+ 60f:	31 d2                	xor    %edx,%edx
+ 611:	e9 8e fe ff ff       	jmp    4a4 <printf+0x54>
+ 616:	66 90                	xchg   %ax,%ax
+ 618:	66 90                	xchg   %ax,%ax
+ 61a:	66 90                	xchg   %ax,%ax
+ 61c:	66 90                	xchg   %ax,%ax
+ 61e:	66 90                	xchg   %ax,%ax
 
-00000610 <free>:
+00000620 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 610:	f3 0f 1e fb          	endbr32 
- 614:	55                   	push   %ebp
+ 620:	f3 0f 1e fb          	endbr32 
+ 624:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 615:	a1 9c 0a 00 00       	mov    0xa9c,%eax
+ 625:	a1 ac 0a 00 00       	mov    0xaac,%eax
 {
- 61a:	89 e5                	mov    %esp,%ebp
- 61c:	57                   	push   %edi
- 61d:	56                   	push   %esi
- 61e:	53                   	push   %ebx
- 61f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 622:	8b 10                	mov    (%eax),%edx
+ 62a:	89 e5                	mov    %esp,%ebp
+ 62c:	57                   	push   %edi
+ 62d:	56                   	push   %esi
+ 62e:	53                   	push   %ebx
+ 62f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 632:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 624:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 634:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 627:	39 c8                	cmp    %ecx,%eax
- 629:	73 15                	jae    640 <free+0x30>
- 62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 62f:	90                   	nop
- 630:	39 d1                	cmp    %edx,%ecx
- 632:	72 14                	jb     648 <free+0x38>
+ 637:	39 c8                	cmp    %ecx,%eax
+ 639:	73 15                	jae    650 <free+0x30>
+ 63b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 63f:	90                   	nop
+ 640:	39 d1                	cmp    %edx,%ecx
+ 642:	72 14                	jb     658 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 634:	39 d0                	cmp    %edx,%eax
- 636:	73 10                	jae    648 <free+0x38>
+ 644:	39 d0                	cmp    %edx,%eax
+ 646:	73 10                	jae    658 <free+0x38>
 {
- 638:	89 d0                	mov    %edx,%eax
+ 648:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 63a:	8b 10                	mov    (%eax),%edx
- 63c:	39 c8                	cmp    %ecx,%eax
- 63e:	72 f0                	jb     630 <free+0x20>
+ 64a:	8b 10                	mov    (%eax),%edx
+ 64c:	39 c8                	cmp    %ecx,%eax
+ 64e:	72 f0                	jb     640 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 640:	39 d0                	cmp    %edx,%eax
- 642:	72 f4                	jb     638 <free+0x28>
- 644:	39 d1                	cmp    %edx,%ecx
- 646:	73 f0                	jae    638 <free+0x28>
+ 650:	39 d0                	cmp    %edx,%eax
+ 652:	72 f4                	jb     648 <free+0x28>
+ 654:	39 d1                	cmp    %edx,%ecx
+ 656:	73 f0                	jae    648 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 64e:	39 fa                	cmp    %edi,%edx
- 650:	74 1e                	je     670 <free+0x60>
+ 658:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 65b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 65e:	39 fa                	cmp    %edi,%edx
+ 660:	74 1e                	je     680 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 652:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 662:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 655:	8b 50 04             	mov    0x4(%eax),%edx
- 658:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 65b:	39 f1                	cmp    %esi,%ecx
- 65d:	74 28                	je     687 <free+0x77>
+ 665:	8b 50 04             	mov    0x4(%eax),%edx
+ 668:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 66b:	39 f1                	cmp    %esi,%ecx
+ 66d:	74 28                	je     697 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 65f:	89 08                	mov    %ecx,(%eax)
+ 66f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 661:	5b                   	pop    %ebx
+ 671:	5b                   	pop    %ebx
   freep = p;
- 662:	a3 9c 0a 00 00       	mov    %eax,0xa9c
+ 672:	a3 ac 0a 00 00       	mov    %eax,0xaac
 }
- 667:	5e                   	pop    %esi
- 668:	5f                   	pop    %edi
- 669:	5d                   	pop    %ebp
- 66a:	c3                   	ret    
- 66b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 66f:	90                   	nop
+ 677:	5e                   	pop    %esi
+ 678:	5f                   	pop    %edi
+ 679:	5d                   	pop    %ebp
+ 67a:	c3                   	ret    
+ 67b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 67f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 670:	03 72 04             	add    0x4(%edx),%esi
- 673:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 680:	03 72 04             	add    0x4(%edx),%esi
+ 683:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 676:	8b 10                	mov    (%eax),%edx
- 678:	8b 12                	mov    (%edx),%edx
- 67a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 686:	8b 10                	mov    (%eax),%edx
+ 688:	8b 12                	mov    (%edx),%edx
+ 68a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 67d:	8b 50 04             	mov    0x4(%eax),%edx
- 680:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 683:	39 f1                	cmp    %esi,%ecx
- 685:	75 d8                	jne    65f <free+0x4f>
+ 68d:	8b 50 04             	mov    0x4(%eax),%edx
+ 690:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 693:	39 f1                	cmp    %esi,%ecx
+ 695:	75 d8                	jne    66f <free+0x4f>
     p->s.size += bp->s.size;
- 687:	03 53 fc             	add    -0x4(%ebx),%edx
+ 697:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 68a:	a3 9c 0a 00 00       	mov    %eax,0xa9c
+ 69a:	a3 ac 0a 00 00       	mov    %eax,0xaac
     p->s.size += bp->s.size;
- 68f:	89 50 04             	mov    %edx,0x4(%eax)
+ 69f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 692:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 695:	89 10                	mov    %edx,(%eax)
+ 6a2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6a5:	89 10                	mov    %edx,(%eax)
 }
- 697:	5b                   	pop    %ebx
- 698:	5e                   	pop    %esi
- 699:	5f                   	pop    %edi
- 69a:	5d                   	pop    %ebp
- 69b:	c3                   	ret    
- 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6a7:	5b                   	pop    %ebx
+ 6a8:	5e                   	pop    %esi
+ 6a9:	5f                   	pop    %edi
+ 6aa:	5d                   	pop    %ebp
+ 6ab:	c3                   	ret    
+ 6ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-000006a0 <malloc>:
+000006b0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 6a0:	f3 0f 1e fb          	endbr32 
- 6a4:	55                   	push   %ebp
- 6a5:	89 e5                	mov    %esp,%ebp
- 6a7:	57                   	push   %edi
- 6a8:	56                   	push   %esi
- 6a9:	53                   	push   %ebx
- 6aa:	83 ec 1c             	sub    $0x1c,%esp
+ 6b0:	f3 0f 1e fb          	endbr32 
+ 6b4:	55                   	push   %ebp
+ 6b5:	89 e5                	mov    %esp,%ebp
+ 6b7:	57                   	push   %edi
+ 6b8:	56                   	push   %esi
+ 6b9:	53                   	push   %ebx
+ 6ba:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6ad:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6bd:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 6b0:	8b 3d 9c 0a 00 00    	mov    0xa9c,%edi
+ 6c0:	8b 3d ac 0a 00 00    	mov    0xaac,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6b6:	8d 70 07             	lea    0x7(%eax),%esi
- 6b9:	c1 ee 03             	shr    $0x3,%esi
- 6bc:	83 c6 01             	add    $0x1,%esi
+ 6c6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6c9:	c1 ee 03             	shr    $0x3,%esi
+ 6cc:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 6bf:	85 ff                	test   %edi,%edi
- 6c1:	0f 84 a9 00 00 00    	je     770 <malloc+0xd0>
+ 6cf:	85 ff                	test   %edi,%edi
+ 6d1:	0f 84 a9 00 00 00    	je     780 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6c7:	8b 07                	mov    (%edi),%eax
+ 6d7:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 6c9:	8b 48 04             	mov    0x4(%eax),%ecx
- 6cc:	39 f1                	cmp    %esi,%ecx
- 6ce:	73 6d                	jae    73d <malloc+0x9d>
- 6d0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 6d6:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6db:	0f 43 de             	cmovae %esi,%ebx
+ 6d9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6dc:	39 f1                	cmp    %esi,%ecx
+ 6de:	73 6d                	jae    74d <malloc+0x9d>
+ 6e0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6e6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6eb:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 6de:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 6e5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 6e8:	eb 17                	jmp    701 <malloc+0x61>
- 6ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6ee:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6f5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6f8:	eb 17                	jmp    711 <malloc+0x61>
+ 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6f0:	8b 10                	mov    (%eax),%edx
+ 700:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 6f2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 6f5:	39 f1                	cmp    %esi,%ecx
- 6f7:	73 4f                	jae    748 <malloc+0xa8>
- 6f9:	8b 3d 9c 0a 00 00    	mov    0xa9c,%edi
- 6ff:	89 d0                	mov    %edx,%eax
+ 702:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 705:	39 f1                	cmp    %esi,%ecx
+ 707:	73 4f                	jae    758 <malloc+0xa8>
+ 709:	8b 3d ac 0a 00 00    	mov    0xaac,%edi
+ 70f:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 701:	39 c7                	cmp    %eax,%edi
- 703:	75 eb                	jne    6f0 <malloc+0x50>
+ 711:	39 c7                	cmp    %eax,%edi
+ 713:	75 eb                	jne    700 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 705:	83 ec 0c             	sub    $0xc,%esp
- 708:	ff 75 e4             	pushl  -0x1c(%ebp)
- 70b:	e8 5b fc ff ff       	call   36b <sbrk>
+ 715:	83 ec 0c             	sub    $0xc,%esp
+ 718:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 71b:	e8 4b fc ff ff       	call   36b <sbrk>
   if(p == (char*)-1)
- 710:	83 c4 10             	add    $0x10,%esp
- 713:	83 f8 ff             	cmp    $0xffffffff,%eax
- 716:	74 1b                	je     733 <malloc+0x93>
+ 720:	83 c4 10             	add    $0x10,%esp
+ 723:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 726:	74 1b                	je     743 <malloc+0x93>
   hp->s.size = nu;
- 718:	89 58 04             	mov    %ebx,0x4(%eax)
+ 728:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 71b:	83 ec 0c             	sub    $0xc,%esp
- 71e:	83 c0 08             	add    $0x8,%eax
- 721:	50                   	push   %eax
- 722:	e8 e9 fe ff ff       	call   610 <free>
+ 72b:	83 ec 0c             	sub    $0xc,%esp
+ 72e:	83 c0 08             	add    $0x8,%eax
+ 731:	50                   	push   %eax
+ 732:	e8 e9 fe ff ff       	call   620 <free>
   return freep;
- 727:	a1 9c 0a 00 00       	mov    0xa9c,%eax
+ 737:	a1 ac 0a 00 00       	mov    0xaac,%eax
       if((p = morecore(nunits)) == 0)
- 72c:	83 c4 10             	add    $0x10,%esp
- 72f:	85 c0                	test   %eax,%eax
- 731:	75 bd                	jne    6f0 <malloc+0x50>
+ 73c:	83 c4 10             	add    $0x10,%esp
+ 73f:	85 c0                	test   %eax,%eax
+ 741:	75 bd                	jne    700 <malloc+0x50>
         return 0;
   }
 }
- 733:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 743:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 736:	31 c0                	xor    %eax,%eax
+ 746:	31 c0                	xor    %eax,%eax
 }
- 738:	5b                   	pop    %ebx
- 739:	5e                   	pop    %esi
- 73a:	5f                   	pop    %edi
- 73b:	5d                   	pop    %ebp
- 73c:	c3                   	ret    
+ 748:	5b                   	pop    %ebx
+ 749:	5e                   	pop    %esi
+ 74a:	5f                   	pop    %edi
+ 74b:	5d                   	pop    %ebp
+ 74c:	c3                   	ret    
     if(p->s.size >= nunits){
- 73d:	89 c2                	mov    %eax,%edx
- 73f:	89 f8                	mov    %edi,%eax
- 741:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 74d:	89 c2                	mov    %eax,%edx
+ 74f:	89 f8                	mov    %edi,%eax
+ 751:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 748:	39 ce                	cmp    %ecx,%esi
- 74a:	74 54                	je     7a0 <malloc+0x100>
+ 758:	39 ce                	cmp    %ecx,%esi
+ 75a:	74 54                	je     7b0 <malloc+0x100>
         p->s.size -= nunits;
- 74c:	29 f1                	sub    %esi,%ecx
- 74e:	89 4a 04             	mov    %ecx,0x4(%edx)
+ 75c:	29 f1                	sub    %esi,%ecx
+ 75e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- 751:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ 761:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- 754:	89 72 04             	mov    %esi,0x4(%edx)
+ 764:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 757:	a3 9c 0a 00 00       	mov    %eax,0xa9c
+ 767:	a3 ac 0a 00 00       	mov    %eax,0xaac
 }
- 75c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 76c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 75f:	8d 42 08             	lea    0x8(%edx),%eax
+ 76f:	8d 42 08             	lea    0x8(%edx),%eax
 }
- 762:	5b                   	pop    %ebx
- 763:	5e                   	pop    %esi
- 764:	5f                   	pop    %edi
- 765:	5d                   	pop    %ebp
- 766:	c3                   	ret    
- 767:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 76e:	66 90                	xchg   %ax,%ax
+ 772:	5b                   	pop    %ebx
+ 773:	5e                   	pop    %esi
+ 774:	5f                   	pop    %edi
+ 775:	5d                   	pop    %ebp
+ 776:	c3                   	ret    
+ 777:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 77e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 770:	c7 05 9c 0a 00 00 a0 	movl   $0xaa0,0xa9c
- 777:	0a 00 00 
+ 780:	c7 05 ac 0a 00 00 b0 	movl   $0xab0,0xaac
+ 787:	0a 00 00 
     base.s.size = 0;
- 77a:	bf a0 0a 00 00       	mov    $0xaa0,%edi
+ 78a:	bf b0 0a 00 00       	mov    $0xab0,%edi
     base.s.ptr = freep = prevp = &base;
- 77f:	c7 05 a0 0a 00 00 a0 	movl   $0xaa0,0xaa0
- 786:	0a 00 00 
+ 78f:	c7 05 b0 0a 00 00 b0 	movl   $0xab0,0xab0
+ 796:	0a 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 789:	89 f8                	mov    %edi,%eax
+ 799:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 78b:	c7 05 a4 0a 00 00 00 	movl   $0x0,0xaa4
- 792:	00 00 00 
+ 79b:	c7 05 b4 0a 00 00 00 	movl   $0x0,0xab4
+ 7a2:	00 00 00 
     if(p->s.size >= nunits){
- 795:	e9 36 ff ff ff       	jmp    6d0 <malloc+0x30>
- 79a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7a5:	e9 36 ff ff ff       	jmp    6e0 <malloc+0x30>
+ 7aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 7a0:	8b 0a                	mov    (%edx),%ecx
- 7a2:	89 08                	mov    %ecx,(%eax)
- 7a4:	eb b1                	jmp    757 <malloc+0xb7>
+ 7b0:	8b 0a                	mov    (%edx),%ecx
+ 7b2:	89 08                	mov    %ecx,(%eax)
+ 7b4:	eb b1                	jmp    767 <malloc+0xb7>
Binary files xv6-public-original/mkdir.o and xv6-public/mkdir.o differ
diff -ruN xv6-public-original/mkdir.sym xv6-public/mkdir.sym
--- xv6-public-original/mkdir.sym	2022-08-13 16:28:54.596252000 +0530
+++ xv6-public/mkdir.sym	2022-09-05 20:56:50.118960000 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-000007a8 .rodata
-000007f8 .eh_frame
-00000a9c .bss
+000007b8 .rodata
+00000808 .eh_frame
+00000aac .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,18 +13,19 @@
 00000000 mkdir.c
 00000000 ulib.c
 00000000 printf.c
-00000390 printint
-000007e4 digits.1085
+000003a0 printint
+000007f4 digits.1094
 00000000 umalloc.c
-00000a9c freep
-00000aa0 base
+00000aac freep
+00000ab0 base
 00000080 strcpy
-00000440 printf
+00000450 printf
+00000393 thread_exit
 000002b0 memmove
 0000032b mknod
 000001a0 gets
 00000363 getpid
-000006a0 malloc
+000006b0 malloc
 00000373 sleep
 000002f3 pipe
 00000303 write
@@ -38,20 +39,22 @@
 000002db fork
 0000036b sbrk
 0000037b uptime
-00000a9c __bss_start
+00000aac __bss_start
 00000140 memset
 00000000 main
 000000b0 strcmp
 0000035b dup
 00000220 stat
-00000a9c _edata
-00000aa8 _end
+00000aac _edata
+00000ab8 _end
 00000343 link
 000002e3 exit
 00000270 atoi
 00000100 strlen
 00000323 open
 00000160 strchr
+00000383 thread_create
 0000034b mkdir
 0000030b close
-00000610 free
+0000038b thread_join
+00000620 free
Binary files xv6-public-original/mp.o and xv6-public/mp.o differ
Binary files xv6-public-original/picirq.o and xv6-public/picirq.o differ
Binary files xv6-public-original/pipe.o and xv6-public/pipe.o differ
Binary files xv6-public-original/printf.o and xv6-public/printf.o differ
diff -ruN xv6-public-original/proc.c xv6-public/proc.c
--- xv6-public-original/proc.c	2022-08-11 13:14:39.068070000 +0530
+++ xv6-public/proc.c	2022-09-05 20:56:22.014959000 +0530
@@ -235,18 +235,16 @@
     panic("init exiting");
 
   // Close all open files.
-  for(fd = 0; fd < NOFILE; fd++){
-    if(curproc->ofile[fd]){
-      fileclose(curproc->ofile[fd]);
-      curproc->ofile[fd] = 0;
-    }
-  }
-
-  begin_op();
-  iput(curproc->cwd);
-  end_op();
-  curproc->cwd = 0;
-
+	for(fd = 0; fd < NOFILE; fd++){
+		if(curproc->ofile[fd]){
+		  fileclose(curproc->ofile[fd]);
+		  curproc->ofile[fd] = 0;
+		}
+	}
+	begin_op();
+	iput(curproc->cwd);
+	end_op();
+	curproc->cwd = 0;
   acquire(&ptable.lock);
 
   // Parent might be sleeping in wait().
@@ -281,7 +279,7 @@
     // Scan through table looking for exited children.
     havekids = 0;
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->parent != curproc)
+      if(p->parent != curproc || curproc->pgdir == p->pgdir)
         continue;
       havekids = 1;
       if(p->state == ZOMBIE){
@@ -532,3 +530,131 @@
     cprintf("\n");
   }
 }
+
+// newly created threads
+int
+thread_create(void)
+{
+	void* stack;
+	void* args;
+	void (*fnptr) (void*);
+	if(argptr(0, (void*)&fnptr, sizeof(*fnptr)) < 0 || argptr(1, (void*)&args, sizeof(*args)) < 0|| argptr(2, (void*)&stack, sizeof(*stack)) < 0 ) return -1;
+	// using argptr to get the 3 arguments required from user call
+	
+	int i, pid;
+	struct proc *np;
+	struct proc *curproc = myproc();
+
+	// Allocate process.
+	if((np = allocproc()) == 0){
+		return -1;
+	}
+
+	// Copy process state from proc.
+	np->pgdir = curproc->pgdir;					// not copying the page directory
+	np->sz = curproc->sz;
+	np->parent = curproc;
+	*np->tf = *curproc->tf;
+	
+	void* args1 = stack + PGSIZE - 1*sizeof(void*);
+	*(void**)args1 = args;
+	
+	void* ret_addr = stack + PGSIZE - 2*sizeof(void*);
+	*(uint*)ret_addr = 0xFFFFFFFF;
+	
+	np->tf->esp = (uint) stack+PGSIZE-2*sizeof(void*);
+	np->tf->ebp = np->tf->esp;
+
+	np->tf->eip = (uint) fnptr;
+	
+	// Clear %eax so that fork returns 0 in the child.
+	np->tf->eax = 0;
+
+	for(i = 0; i < NOFILE; i++)
+	if(curproc->ofile[i])
+	  np->ofile[i] = filedup(curproc->ofile[i]);
+	np->cwd = idup(curproc->cwd);
+
+	safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+
+	pid = np->pid;
+
+	acquire(&ptable.lock);
+
+	np->state = RUNNABLE;
+
+	release(&ptable.lock);
+	return pid;
+}
+
+int
+thread_join(void)
+{
+	struct proc *p;
+	int havekids, pid;
+	struct proc *curproc = myproc();
+
+	acquire(&ptable.lock);
+	for(;;){
+	// Scan through table looking for exited children.
+		havekids = 0;
+		for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+			if(p->parent != curproc || curproc->pgdir != p->pgdir)	// changed - thread_join should only wait for child threads, not other child processes
+				continue;
+			havekids = 1;
+			if(p->state == ZOMBIE){
+				// Found one.
+				pid = p->pid;
+				kfree(p->kstack);
+				p->kstack = 0;
+				//freevm(p->pgdir);			// this line removed as we're not freeing the page table when a thread ends
+				p->pid = 0;
+				p->parent = 0;
+				p->name[0] = 0;
+				p->killed = 0;
+				p->state = UNUSED;
+				release(&ptable.lock);
+				return pid;
+		  	}
+		}	
+
+		// No point waiting if we don't have any children.
+		if(!havekids || curproc->killed){
+		  release(&ptable.lock);
+		  return -1;
+		}
+
+		// Wait for children to exit.  (See wakeup1 call in proc_exit.)
+		sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+	}
+}
+int
+thread_exit(void)
+{
+	struct proc *curproc = myproc();
+	struct proc *p;
+	
+	int pid = curproc->pid;
+	if(curproc == initproc)
+		panic("init exiting");
+
+	acquire(&ptable.lock);
+
+	// Parent might be sleeping in wait().
+	wakeup1(curproc->parent);
+
+	// Pass abandoned children to init.
+	for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+		if(p->parent == curproc){
+		  p->parent = initproc;
+		  if(p->state == ZOMBIE)
+			wakeup1(initproc);
+		}
+	}
+
+	// Jump into the scheduler, never to return.
+	curproc->state = ZOMBIE;
+	sched();
+	panic("zombie exit");
+	return pid;
+}
Binary files xv6-public-original/proc.o and xv6-public/proc.o differ
Binary files xv6-public-original/_rm and xv6-public/_rm differ
diff -ruN xv6-public-original/rm.asm xv6-public/rm.asm
--- xv6-public-original/rm.asm	2022-08-13 16:28:54.676227000 +0530
+++ xv6-public/rm.asm	2022-09-05 20:56:50.198960000 +0530
@@ -59,18 +59,18 @@
       printf(2, "rm: %s failed to delete\n", argv[i]);
   50:	50                   	push   %eax
   51:	ff 33                	pushl  (%ebx)
-  53:	68 bc 07 00 00       	push   $0x7bc
+  53:	68 cc 07 00 00       	push   $0x7cc
   58:	6a 02                	push   $0x2
-  5a:	e8 e1 03 00 00       	call   440 <printf>
+  5a:	e8 f1 03 00 00       	call   450 <printf>
       break;
   5f:	83 c4 10             	add    $0x10,%esp
   62:	eb e7                	jmp    4b <main+0x4b>
     printf(2, "Usage: rm files...\n");
   64:	52                   	push   %edx
   65:	52                   	push   %edx
-  66:	68 a8 07 00 00       	push   $0x7a8
+  66:	68 b8 07 00 00       	push   $0x7b8
   6b:	6a 02                	push   $0x2
-  6d:	e8 ce 03 00 00       	call   440 <printf>
+  6d:	e8 de 03 00 00       	call   450 <printf>
     exit();
   72:	e8 6c 02 00 00       	call   2e3 <exit>
   77:	66 90                	xchg   %ax,%ax
@@ -605,609 +605,623 @@
  37b:	b8 0e 00 00 00       	mov    $0xe,%eax
  380:	cd 40                	int    $0x40
  382:	c3                   	ret    
- 383:	66 90                	xchg   %ax,%ax
- 385:	66 90                	xchg   %ax,%ax
- 387:	66 90                	xchg   %ax,%ax
- 389:	66 90                	xchg   %ax,%ax
- 38b:	66 90                	xchg   %ax,%ax
- 38d:	66 90                	xchg   %ax,%ax
- 38f:	90                   	nop
 
-00000390 <printint>:
+00000383 <thread_create>:
+SYSCALL(thread_create)
+ 383:	b8 16 00 00 00       	mov    $0x16,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <thread_join>:
+SYSCALL(thread_join)
+ 38b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <thread_exit>:
+SYSCALL(thread_exit)
+ 393:	b8 18 00 00 00       	mov    $0x18,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+ 39b:	66 90                	xchg   %ax,%ax
+ 39d:	66 90                	xchg   %ax,%ax
+ 39f:	90                   	nop
+
+000003a0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 390:	55                   	push   %ebp
- 391:	89 e5                	mov    %esp,%ebp
- 393:	57                   	push   %edi
- 394:	56                   	push   %esi
- 395:	53                   	push   %ebx
- 396:	83 ec 3c             	sub    $0x3c,%esp
- 399:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	56                   	push   %esi
+ 3a5:	53                   	push   %ebx
+ 3a6:	83 ec 3c             	sub    $0x3c,%esp
+ 3a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 39c:	89 d1                	mov    %edx,%ecx
+ 3ac:	89 d1                	mov    %edx,%ecx
 {
- 39e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 3ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 3a1:	85 d2                	test   %edx,%edx
- 3a3:	0f 89 7f 00 00 00    	jns    428 <printint+0x98>
- 3a9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 3ad:	74 79                	je     428 <printint+0x98>
+ 3b1:	85 d2                	test   %edx,%edx
+ 3b3:	0f 89 7f 00 00 00    	jns    438 <printint+0x98>
+ 3b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3bd:	74 79                	je     438 <printint+0x98>
     neg = 1;
- 3af:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 3bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 3b6:	f7 d9                	neg    %ecx
+ 3c6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 3b8:	31 db                	xor    %ebx,%ebx
- 3ba:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 3bd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3c8:	31 db                	xor    %ebx,%ebx
+ 3ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 3c0:	89 c8                	mov    %ecx,%eax
- 3c2:	31 d2                	xor    %edx,%edx
- 3c4:	89 cf                	mov    %ecx,%edi
- 3c6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3c9:	0f b6 92 dc 07 00 00 	movzbl 0x7dc(%edx),%edx
- 3d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3d3:	89 d8                	mov    %ebx,%eax
- 3d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 3d0:	89 c8                	mov    %ecx,%eax
+ 3d2:	31 d2                	xor    %edx,%edx
+ 3d4:	89 cf                	mov    %ecx,%edi
+ 3d6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3d9:	0f b6 92 ec 07 00 00 	movzbl 0x7ec(%edx),%edx
+ 3e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3e3:	89 d8                	mov    %ebx,%eax
+ 3e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 3d8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 3e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 3db:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 3eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 3de:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3e1:	76 dd                	jbe    3c0 <printint+0x30>
+ 3ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3f1:	76 dd                	jbe    3d0 <printint+0x30>
   if(neg)
- 3e3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3e6:	85 c9                	test   %ecx,%ecx
- 3e8:	74 0c                	je     3f6 <printint+0x66>
+ 3f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3f6:	85 c9                	test   %ecx,%ecx
+ 3f8:	74 0c                	je     406 <printint+0x66>
     buf[i++] = '-';
- 3ea:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 3fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 3ef:	89 d8                	mov    %ebx,%eax
+ 3ff:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 3f1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 401:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 3f6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3f9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3fd:	eb 07                	jmp    406 <printint+0x76>
- 3ff:	90                   	nop
- 400:	0f b6 13             	movzbl (%ebx),%edx
- 403:	83 eb 01             	sub    $0x1,%ebx
+ 406:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 409:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 40d:	eb 07                	jmp    416 <printint+0x76>
+ 40f:	90                   	nop
+ 410:	0f b6 13             	movzbl (%ebx),%edx
+ 413:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 406:	83 ec 04             	sub    $0x4,%esp
- 409:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 40c:	6a 01                	push   $0x1
- 40e:	56                   	push   %esi
- 40f:	57                   	push   %edi
- 410:	e8 ee fe ff ff       	call   303 <write>
+ 416:	83 ec 04             	sub    $0x4,%esp
+ 419:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 41c:	6a 01                	push   $0x1
+ 41e:	56                   	push   %esi
+ 41f:	57                   	push   %edi
+ 420:	e8 de fe ff ff       	call   303 <write>
   while(--i >= 0)
- 415:	83 c4 10             	add    $0x10,%esp
- 418:	39 de                	cmp    %ebx,%esi
- 41a:	75 e4                	jne    400 <printint+0x70>
+ 425:	83 c4 10             	add    $0x10,%esp
+ 428:	39 de                	cmp    %ebx,%esi
+ 42a:	75 e4                	jne    410 <printint+0x70>
     putc(fd, buf[i]);
 }
- 41c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 41f:	5b                   	pop    %ebx
- 420:	5e                   	pop    %esi
- 421:	5f                   	pop    %edi
- 422:	5d                   	pop    %ebp
- 423:	c3                   	ret    
- 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 42c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 42f:	5b                   	pop    %ebx
+ 430:	5e                   	pop    %esi
+ 431:	5f                   	pop    %edi
+ 432:	5d                   	pop    %ebp
+ 433:	c3                   	ret    
+ 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 428:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 42f:	eb 87                	jmp    3b8 <printint+0x28>
- 431:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 438:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 43f:	90                   	nop
+ 438:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 43f:	eb 87                	jmp    3c8 <printint+0x28>
+ 441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 448:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44f:	90                   	nop
 
-00000440 <printf>:
+00000450 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 440:	f3 0f 1e fb          	endbr32 
- 444:	55                   	push   %ebp
- 445:	89 e5                	mov    %esp,%ebp
- 447:	57                   	push   %edi
- 448:	56                   	push   %esi
- 449:	53                   	push   %ebx
- 44a:	83 ec 2c             	sub    $0x2c,%esp
+ 450:	f3 0f 1e fb          	endbr32 
+ 454:	55                   	push   %ebp
+ 455:	89 e5                	mov    %esp,%ebp
+ 457:	57                   	push   %edi
+ 458:	56                   	push   %esi
+ 459:	53                   	push   %ebx
+ 45a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 44d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 450:	0f b6 1e             	movzbl (%esi),%ebx
- 453:	84 db                	test   %bl,%bl
- 455:	0f 84 b4 00 00 00    	je     50f <printf+0xcf>
+ 45d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 460:	0f b6 1e             	movzbl (%esi),%ebx
+ 463:	84 db                	test   %bl,%bl
+ 465:	0f 84 b4 00 00 00    	je     51f <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 45b:	8d 45 10             	lea    0x10(%ebp),%eax
- 45e:	83 c6 01             	add    $0x1,%esi
+ 46b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 46e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 461:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 471:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 464:	31 d2                	xor    %edx,%edx
+ 474:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 466:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 469:	eb 33                	jmp    49e <printf+0x5e>
- 46b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 46f:	90                   	nop
- 470:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 476:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 479:	eb 33                	jmp    4ae <printf+0x5e>
+ 47b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 47f:	90                   	nop
+ 480:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 473:	ba 25 00 00 00       	mov    $0x25,%edx
+ 483:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 478:	83 f8 25             	cmp    $0x25,%eax
- 47b:	74 17                	je     494 <printf+0x54>
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	74 17                	je     4a4 <printf+0x54>
   write(fd, &c, 1);
- 47d:	83 ec 04             	sub    $0x4,%esp
- 480:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 483:	6a 01                	push   $0x1
- 485:	57                   	push   %edi
- 486:	ff 75 08             	pushl  0x8(%ebp)
- 489:	e8 75 fe ff ff       	call   303 <write>
- 48e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 48d:	83 ec 04             	sub    $0x4,%esp
+ 490:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 493:	6a 01                	push   $0x1
+ 495:	57                   	push   %edi
+ 496:	ff 75 08             	pushl  0x8(%ebp)
+ 499:	e8 65 fe ff ff       	call   303 <write>
+ 49e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 491:	83 c4 10             	add    $0x10,%esp
+ 4a1:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 494:	0f b6 1e             	movzbl (%esi),%ebx
- 497:	83 c6 01             	add    $0x1,%esi
- 49a:	84 db                	test   %bl,%bl
- 49c:	74 71                	je     50f <printf+0xcf>
+ 4a4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4a7:	83 c6 01             	add    $0x1,%esi
+ 4aa:	84 db                	test   %bl,%bl
+ 4ac:	74 71                	je     51f <printf+0xcf>
     c = fmt[i] & 0xff;
- 49e:	0f be cb             	movsbl %bl,%ecx
- 4a1:	0f b6 c3             	movzbl %bl,%eax
+ 4ae:	0f be cb             	movsbl %bl,%ecx
+ 4b1:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 4a4:	85 d2                	test   %edx,%edx
- 4a6:	74 c8                	je     470 <printf+0x30>
+ 4b4:	85 d2                	test   %edx,%edx
+ 4b6:	74 c8                	je     480 <printf+0x30>
       }
     } else if(state == '%'){
- 4a8:	83 fa 25             	cmp    $0x25,%edx
- 4ab:	75 e7                	jne    494 <printf+0x54>
+ 4b8:	83 fa 25             	cmp    $0x25,%edx
+ 4bb:	75 e7                	jne    4a4 <printf+0x54>
       if(c == 'd'){
- 4ad:	83 f8 64             	cmp    $0x64,%eax
- 4b0:	0f 84 9a 00 00 00    	je     550 <printf+0x110>
+ 4bd:	83 f8 64             	cmp    $0x64,%eax
+ 4c0:	0f 84 9a 00 00 00    	je     560 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 4b6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 4bc:	83 f9 70             	cmp    $0x70,%ecx
- 4bf:	74 5f                	je     520 <printf+0xe0>
+ 4c6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4cc:	83 f9 70             	cmp    $0x70,%ecx
+ 4cf:	74 5f                	je     530 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 4c1:	83 f8 73             	cmp    $0x73,%eax
- 4c4:	0f 84 d6 00 00 00    	je     5a0 <printf+0x160>
+ 4d1:	83 f8 73             	cmp    $0x73,%eax
+ 4d4:	0f 84 d6 00 00 00    	je     5b0 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 4ca:	83 f8 63             	cmp    $0x63,%eax
- 4cd:	0f 84 8d 00 00 00    	je     560 <printf+0x120>
+ 4da:	83 f8 63             	cmp    $0x63,%eax
+ 4dd:	0f 84 8d 00 00 00    	je     570 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 4d3:	83 f8 25             	cmp    $0x25,%eax
- 4d6:	0f 84 b4 00 00 00    	je     590 <printf+0x150>
+ 4e3:	83 f8 25             	cmp    $0x25,%eax
+ 4e6:	0f 84 b4 00 00 00    	je     5a0 <printf+0x150>
   write(fd, &c, 1);
- 4dc:	83 ec 04             	sub    $0x4,%esp
- 4df:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4e3:	6a 01                	push   $0x1
- 4e5:	57                   	push   %edi
- 4e6:	ff 75 08             	pushl  0x8(%ebp)
- 4e9:	e8 15 fe ff ff       	call   303 <write>
+ 4ec:	83 ec 04             	sub    $0x4,%esp
+ 4ef:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4f3:	6a 01                	push   $0x1
+ 4f5:	57                   	push   %edi
+ 4f6:	ff 75 08             	pushl  0x8(%ebp)
+ 4f9:	e8 05 fe ff ff       	call   303 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 4ee:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4fe:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 4f1:	83 c4 0c             	add    $0xc,%esp
- 4f4:	6a 01                	push   $0x1
- 4f6:	83 c6 01             	add    $0x1,%esi
- 4f9:	57                   	push   %edi
- 4fa:	ff 75 08             	pushl  0x8(%ebp)
- 4fd:	e8 01 fe ff ff       	call   303 <write>
+ 501:	83 c4 0c             	add    $0xc,%esp
+ 504:	6a 01                	push   $0x1
+ 506:	83 c6 01             	add    $0x1,%esi
+ 509:	57                   	push   %edi
+ 50a:	ff 75 08             	pushl  0x8(%ebp)
+ 50d:	e8 f1 fd ff ff       	call   303 <write>
   for(i = 0; fmt[i]; i++){
- 502:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 512:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 506:	83 c4 10             	add    $0x10,%esp
+ 516:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 509:	31 d2                	xor    %edx,%edx
+ 519:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 50b:	84 db                	test   %bl,%bl
- 50d:	75 8f                	jne    49e <printf+0x5e>
+ 51b:	84 db                	test   %bl,%bl
+ 51d:	75 8f                	jne    4ae <printf+0x5e>
     }
   }
 }
- 50f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 512:	5b                   	pop    %ebx
- 513:	5e                   	pop    %esi
- 514:	5f                   	pop    %edi
- 515:	5d                   	pop    %ebp
- 516:	c3                   	ret    
- 517:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 51e:	66 90                	xchg   %ax,%ax
+ 51f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 522:	5b                   	pop    %ebx
+ 523:	5e                   	pop    %esi
+ 524:	5f                   	pop    %edi
+ 525:	5d                   	pop    %ebp
+ 526:	c3                   	ret    
+ 527:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 52e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 520:	83 ec 0c             	sub    $0xc,%esp
- 523:	b9 10 00 00 00       	mov    $0x10,%ecx
- 528:	6a 00                	push   $0x0
- 52a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 52d:	8b 45 08             	mov    0x8(%ebp),%eax
- 530:	8b 13                	mov    (%ebx),%edx
- 532:	e8 59 fe ff ff       	call   390 <printint>
+ 530:	83 ec 0c             	sub    $0xc,%esp
+ 533:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 538:	6a 00                	push   $0x0
+ 53a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 53d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 540:	8b 13                	mov    (%ebx),%edx
+ 542:	e8 59 fe ff ff       	call   3a0 <printint>
         ap++;
- 537:	89 d8                	mov    %ebx,%eax
- 539:	83 c4 10             	add    $0x10,%esp
+ 547:	89 d8                	mov    %ebx,%eax
+ 549:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 53c:	31 d2                	xor    %edx,%edx
+ 54c:	31 d2                	xor    %edx,%edx
         ap++;
- 53e:	83 c0 04             	add    $0x4,%eax
- 541:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 544:	e9 4b ff ff ff       	jmp    494 <printf+0x54>
- 549:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54e:	83 c0 04             	add    $0x4,%eax
+ 551:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 554:	e9 4b ff ff ff       	jmp    4a4 <printf+0x54>
+ 559:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 550:	83 ec 0c             	sub    $0xc,%esp
- 553:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 558:	6a 01                	push   $0x1
- 55a:	eb ce                	jmp    52a <printf+0xea>
- 55c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 560:	83 ec 0c             	sub    $0xc,%esp
+ 563:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 568:	6a 01                	push   $0x1
+ 56a:	eb ce                	jmp    53a <printf+0xea>
+ 56c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 560:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 570:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 563:	83 ec 04             	sub    $0x4,%esp
+ 573:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 566:	8b 03                	mov    (%ebx),%eax
+ 576:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 568:	6a 01                	push   $0x1
+ 578:	6a 01                	push   $0x1
         ap++;
- 56a:	83 c3 04             	add    $0x4,%ebx
+ 57a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 56d:	57                   	push   %edi
- 56e:	ff 75 08             	pushl  0x8(%ebp)
+ 57d:	57                   	push   %edi
+ 57e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 571:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 581:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 574:	e8 8a fd ff ff       	call   303 <write>
+ 584:	e8 7a fd ff ff       	call   303 <write>
         ap++;
- 579:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 57c:	83 c4 10             	add    $0x10,%esp
+ 589:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 58c:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 57f:	31 d2                	xor    %edx,%edx
- 581:	e9 0e ff ff ff       	jmp    494 <printf+0x54>
- 586:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 58d:	8d 76 00             	lea    0x0(%esi),%esi
+ 58f:	31 d2                	xor    %edx,%edx
+ 591:	e9 0e ff ff ff       	jmp    4a4 <printf+0x54>
+ 596:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 59d:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 590:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 5a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 593:	83 ec 04             	sub    $0x4,%esp
- 596:	e9 59 ff ff ff       	jmp    4f4 <printf+0xb4>
- 59b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 59f:	90                   	nop
+ 5a3:	83 ec 04             	sub    $0x4,%esp
+ 5a6:	e9 59 ff ff ff       	jmp    504 <printf+0xb4>
+ 5ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5af:	90                   	nop
         s = (char*)*ap;
- 5a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 5a3:	8b 18                	mov    (%eax),%ebx
+ 5b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5b3:	8b 18                	mov    (%eax),%ebx
         ap++;
- 5a5:	83 c0 04             	add    $0x4,%eax
- 5a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5b5:	83 c0 04             	add    $0x4,%eax
+ 5b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 5ab:	85 db                	test   %ebx,%ebx
- 5ad:	74 17                	je     5c6 <printf+0x186>
+ 5bb:	85 db                	test   %ebx,%ebx
+ 5bd:	74 17                	je     5d6 <printf+0x186>
         while(*s != 0){
- 5af:	0f b6 03             	movzbl (%ebx),%eax
+ 5bf:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 5b2:	31 d2                	xor    %edx,%edx
+ 5c2:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 5b4:	84 c0                	test   %al,%al
- 5b6:	0f 84 d8 fe ff ff    	je     494 <printf+0x54>
- 5bc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5bf:	89 de                	mov    %ebx,%esi
- 5c1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5c4:	eb 1a                	jmp    5e0 <printf+0x1a0>
+ 5c4:	84 c0                	test   %al,%al
+ 5c6:	0f 84 d8 fe ff ff    	je     4a4 <printf+0x54>
+ 5cc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5cf:	89 de                	mov    %ebx,%esi
+ 5d1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d4:	eb 1a                	jmp    5f0 <printf+0x1a0>
           s = "(null)";
- 5c6:	bb d5 07 00 00       	mov    $0x7d5,%ebx
+ 5d6:	bb e5 07 00 00       	mov    $0x7e5,%ebx
         while(*s != 0){
- 5cb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5ce:	b8 28 00 00 00       	mov    $0x28,%eax
- 5d3:	89 de                	mov    %ebx,%esi
- 5d5:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5df:	90                   	nop
+ 5db:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5de:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5e3:	89 de                	mov    %ebx,%esi
+ 5e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ef:	90                   	nop
   write(fd, &c, 1);
- 5e0:	83 ec 04             	sub    $0x4,%esp
+ 5f0:	83 ec 04             	sub    $0x4,%esp
           s++;
- 5e3:	83 c6 01             	add    $0x1,%esi
- 5e6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 5f3:	83 c6 01             	add    $0x1,%esi
+ 5f6:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 5e9:	6a 01                	push   $0x1
- 5eb:	57                   	push   %edi
- 5ec:	53                   	push   %ebx
- 5ed:	e8 11 fd ff ff       	call   303 <write>
+ 5f9:	6a 01                	push   $0x1
+ 5fb:	57                   	push   %edi
+ 5fc:	53                   	push   %ebx
+ 5fd:	e8 01 fd ff ff       	call   303 <write>
         while(*s != 0){
- 5f2:	0f b6 06             	movzbl (%esi),%eax
- 5f5:	83 c4 10             	add    $0x10,%esp
- 5f8:	84 c0                	test   %al,%al
- 5fa:	75 e4                	jne    5e0 <printf+0x1a0>
- 5fc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 602:	0f b6 06             	movzbl (%esi),%eax
+ 605:	83 c4 10             	add    $0x10,%esp
+ 608:	84 c0                	test   %al,%al
+ 60a:	75 e4                	jne    5f0 <printf+0x1a0>
+ 60c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 5ff:	31 d2                	xor    %edx,%edx
- 601:	e9 8e fe ff ff       	jmp    494 <printf+0x54>
- 606:	66 90                	xchg   %ax,%ax
- 608:	66 90                	xchg   %ax,%ax
- 60a:	66 90                	xchg   %ax,%ax
- 60c:	66 90                	xchg   %ax,%ax
- 60e:	66 90                	xchg   %ax,%ax
+ 60f:	31 d2                	xor    %edx,%edx
+ 611:	e9 8e fe ff ff       	jmp    4a4 <printf+0x54>
+ 616:	66 90                	xchg   %ax,%ax
+ 618:	66 90                	xchg   %ax,%ax
+ 61a:	66 90                	xchg   %ax,%ax
+ 61c:	66 90                	xchg   %ax,%ax
+ 61e:	66 90                	xchg   %ax,%ax
 
-00000610 <free>:
+00000620 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 610:	f3 0f 1e fb          	endbr32 
- 614:	55                   	push   %ebp
+ 620:	f3 0f 1e fb          	endbr32 
+ 624:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 615:	a1 94 0a 00 00       	mov    0xa94,%eax
+ 625:	a1 a4 0a 00 00       	mov    0xaa4,%eax
 {
- 61a:	89 e5                	mov    %esp,%ebp
- 61c:	57                   	push   %edi
- 61d:	56                   	push   %esi
- 61e:	53                   	push   %ebx
- 61f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 622:	8b 10                	mov    (%eax),%edx
+ 62a:	89 e5                	mov    %esp,%ebp
+ 62c:	57                   	push   %edi
+ 62d:	56                   	push   %esi
+ 62e:	53                   	push   %ebx
+ 62f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 632:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 624:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 634:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 627:	39 c8                	cmp    %ecx,%eax
- 629:	73 15                	jae    640 <free+0x30>
- 62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 62f:	90                   	nop
- 630:	39 d1                	cmp    %edx,%ecx
- 632:	72 14                	jb     648 <free+0x38>
+ 637:	39 c8                	cmp    %ecx,%eax
+ 639:	73 15                	jae    650 <free+0x30>
+ 63b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 63f:	90                   	nop
+ 640:	39 d1                	cmp    %edx,%ecx
+ 642:	72 14                	jb     658 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 634:	39 d0                	cmp    %edx,%eax
- 636:	73 10                	jae    648 <free+0x38>
+ 644:	39 d0                	cmp    %edx,%eax
+ 646:	73 10                	jae    658 <free+0x38>
 {
- 638:	89 d0                	mov    %edx,%eax
+ 648:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 63a:	8b 10                	mov    (%eax),%edx
- 63c:	39 c8                	cmp    %ecx,%eax
- 63e:	72 f0                	jb     630 <free+0x20>
+ 64a:	8b 10                	mov    (%eax),%edx
+ 64c:	39 c8                	cmp    %ecx,%eax
+ 64e:	72 f0                	jb     640 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 640:	39 d0                	cmp    %edx,%eax
- 642:	72 f4                	jb     638 <free+0x28>
- 644:	39 d1                	cmp    %edx,%ecx
- 646:	73 f0                	jae    638 <free+0x28>
+ 650:	39 d0                	cmp    %edx,%eax
+ 652:	72 f4                	jb     648 <free+0x28>
+ 654:	39 d1                	cmp    %edx,%ecx
+ 656:	73 f0                	jae    648 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 64e:	39 fa                	cmp    %edi,%edx
- 650:	74 1e                	je     670 <free+0x60>
+ 658:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 65b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 65e:	39 fa                	cmp    %edi,%edx
+ 660:	74 1e                	je     680 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 652:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 662:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 655:	8b 50 04             	mov    0x4(%eax),%edx
- 658:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 65b:	39 f1                	cmp    %esi,%ecx
- 65d:	74 28                	je     687 <free+0x77>
+ 665:	8b 50 04             	mov    0x4(%eax),%edx
+ 668:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 66b:	39 f1                	cmp    %esi,%ecx
+ 66d:	74 28                	je     697 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 65f:	89 08                	mov    %ecx,(%eax)
+ 66f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 661:	5b                   	pop    %ebx
+ 671:	5b                   	pop    %ebx
   freep = p;
- 662:	a3 94 0a 00 00       	mov    %eax,0xa94
+ 672:	a3 a4 0a 00 00       	mov    %eax,0xaa4
 }
- 667:	5e                   	pop    %esi
- 668:	5f                   	pop    %edi
- 669:	5d                   	pop    %ebp
- 66a:	c3                   	ret    
- 66b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 66f:	90                   	nop
+ 677:	5e                   	pop    %esi
+ 678:	5f                   	pop    %edi
+ 679:	5d                   	pop    %ebp
+ 67a:	c3                   	ret    
+ 67b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 67f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 670:	03 72 04             	add    0x4(%edx),%esi
- 673:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 680:	03 72 04             	add    0x4(%edx),%esi
+ 683:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 676:	8b 10                	mov    (%eax),%edx
- 678:	8b 12                	mov    (%edx),%edx
- 67a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 686:	8b 10                	mov    (%eax),%edx
+ 688:	8b 12                	mov    (%edx),%edx
+ 68a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 67d:	8b 50 04             	mov    0x4(%eax),%edx
- 680:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 683:	39 f1                	cmp    %esi,%ecx
- 685:	75 d8                	jne    65f <free+0x4f>
+ 68d:	8b 50 04             	mov    0x4(%eax),%edx
+ 690:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 693:	39 f1                	cmp    %esi,%ecx
+ 695:	75 d8                	jne    66f <free+0x4f>
     p->s.size += bp->s.size;
- 687:	03 53 fc             	add    -0x4(%ebx),%edx
+ 697:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 68a:	a3 94 0a 00 00       	mov    %eax,0xa94
+ 69a:	a3 a4 0a 00 00       	mov    %eax,0xaa4
     p->s.size += bp->s.size;
- 68f:	89 50 04             	mov    %edx,0x4(%eax)
+ 69f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 692:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 695:	89 10                	mov    %edx,(%eax)
+ 6a2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6a5:	89 10                	mov    %edx,(%eax)
 }
- 697:	5b                   	pop    %ebx
- 698:	5e                   	pop    %esi
- 699:	5f                   	pop    %edi
- 69a:	5d                   	pop    %ebp
- 69b:	c3                   	ret    
- 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6a7:	5b                   	pop    %ebx
+ 6a8:	5e                   	pop    %esi
+ 6a9:	5f                   	pop    %edi
+ 6aa:	5d                   	pop    %ebp
+ 6ab:	c3                   	ret    
+ 6ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-000006a0 <malloc>:
+000006b0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 6a0:	f3 0f 1e fb          	endbr32 
- 6a4:	55                   	push   %ebp
- 6a5:	89 e5                	mov    %esp,%ebp
- 6a7:	57                   	push   %edi
- 6a8:	56                   	push   %esi
- 6a9:	53                   	push   %ebx
- 6aa:	83 ec 1c             	sub    $0x1c,%esp
+ 6b0:	f3 0f 1e fb          	endbr32 
+ 6b4:	55                   	push   %ebp
+ 6b5:	89 e5                	mov    %esp,%ebp
+ 6b7:	57                   	push   %edi
+ 6b8:	56                   	push   %esi
+ 6b9:	53                   	push   %ebx
+ 6ba:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6ad:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6bd:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 6b0:	8b 3d 94 0a 00 00    	mov    0xa94,%edi
+ 6c0:	8b 3d a4 0a 00 00    	mov    0xaa4,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6b6:	8d 70 07             	lea    0x7(%eax),%esi
- 6b9:	c1 ee 03             	shr    $0x3,%esi
- 6bc:	83 c6 01             	add    $0x1,%esi
+ 6c6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6c9:	c1 ee 03             	shr    $0x3,%esi
+ 6cc:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 6bf:	85 ff                	test   %edi,%edi
- 6c1:	0f 84 a9 00 00 00    	je     770 <malloc+0xd0>
+ 6cf:	85 ff                	test   %edi,%edi
+ 6d1:	0f 84 a9 00 00 00    	je     780 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6c7:	8b 07                	mov    (%edi),%eax
+ 6d7:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 6c9:	8b 48 04             	mov    0x4(%eax),%ecx
- 6cc:	39 f1                	cmp    %esi,%ecx
- 6ce:	73 6d                	jae    73d <malloc+0x9d>
- 6d0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 6d6:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6db:	0f 43 de             	cmovae %esi,%ebx
+ 6d9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6dc:	39 f1                	cmp    %esi,%ecx
+ 6de:	73 6d                	jae    74d <malloc+0x9d>
+ 6e0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6e6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6eb:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 6de:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 6e5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 6e8:	eb 17                	jmp    701 <malloc+0x61>
- 6ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6ee:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6f5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6f8:	eb 17                	jmp    711 <malloc+0x61>
+ 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6f0:	8b 10                	mov    (%eax),%edx
+ 700:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 6f2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 6f5:	39 f1                	cmp    %esi,%ecx
- 6f7:	73 4f                	jae    748 <malloc+0xa8>
- 6f9:	8b 3d 94 0a 00 00    	mov    0xa94,%edi
- 6ff:	89 d0                	mov    %edx,%eax
+ 702:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 705:	39 f1                	cmp    %esi,%ecx
+ 707:	73 4f                	jae    758 <malloc+0xa8>
+ 709:	8b 3d a4 0a 00 00    	mov    0xaa4,%edi
+ 70f:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 701:	39 c7                	cmp    %eax,%edi
- 703:	75 eb                	jne    6f0 <malloc+0x50>
+ 711:	39 c7                	cmp    %eax,%edi
+ 713:	75 eb                	jne    700 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 705:	83 ec 0c             	sub    $0xc,%esp
- 708:	ff 75 e4             	pushl  -0x1c(%ebp)
- 70b:	e8 5b fc ff ff       	call   36b <sbrk>
+ 715:	83 ec 0c             	sub    $0xc,%esp
+ 718:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 71b:	e8 4b fc ff ff       	call   36b <sbrk>
   if(p == (char*)-1)
- 710:	83 c4 10             	add    $0x10,%esp
- 713:	83 f8 ff             	cmp    $0xffffffff,%eax
- 716:	74 1b                	je     733 <malloc+0x93>
+ 720:	83 c4 10             	add    $0x10,%esp
+ 723:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 726:	74 1b                	je     743 <malloc+0x93>
   hp->s.size = nu;
- 718:	89 58 04             	mov    %ebx,0x4(%eax)
+ 728:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 71b:	83 ec 0c             	sub    $0xc,%esp
- 71e:	83 c0 08             	add    $0x8,%eax
- 721:	50                   	push   %eax
- 722:	e8 e9 fe ff ff       	call   610 <free>
+ 72b:	83 ec 0c             	sub    $0xc,%esp
+ 72e:	83 c0 08             	add    $0x8,%eax
+ 731:	50                   	push   %eax
+ 732:	e8 e9 fe ff ff       	call   620 <free>
   return freep;
- 727:	a1 94 0a 00 00       	mov    0xa94,%eax
+ 737:	a1 a4 0a 00 00       	mov    0xaa4,%eax
       if((p = morecore(nunits)) == 0)
- 72c:	83 c4 10             	add    $0x10,%esp
- 72f:	85 c0                	test   %eax,%eax
- 731:	75 bd                	jne    6f0 <malloc+0x50>
+ 73c:	83 c4 10             	add    $0x10,%esp
+ 73f:	85 c0                	test   %eax,%eax
+ 741:	75 bd                	jne    700 <malloc+0x50>
         return 0;
   }
 }
- 733:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 743:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 736:	31 c0                	xor    %eax,%eax
+ 746:	31 c0                	xor    %eax,%eax
 }
- 738:	5b                   	pop    %ebx
- 739:	5e                   	pop    %esi
- 73a:	5f                   	pop    %edi
- 73b:	5d                   	pop    %ebp
- 73c:	c3                   	ret    
+ 748:	5b                   	pop    %ebx
+ 749:	5e                   	pop    %esi
+ 74a:	5f                   	pop    %edi
+ 74b:	5d                   	pop    %ebp
+ 74c:	c3                   	ret    
     if(p->s.size >= nunits){
- 73d:	89 c2                	mov    %eax,%edx
- 73f:	89 f8                	mov    %edi,%eax
- 741:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 74d:	89 c2                	mov    %eax,%edx
+ 74f:	89 f8                	mov    %edi,%eax
+ 751:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 748:	39 ce                	cmp    %ecx,%esi
- 74a:	74 54                	je     7a0 <malloc+0x100>
+ 758:	39 ce                	cmp    %ecx,%esi
+ 75a:	74 54                	je     7b0 <malloc+0x100>
         p->s.size -= nunits;
- 74c:	29 f1                	sub    %esi,%ecx
- 74e:	89 4a 04             	mov    %ecx,0x4(%edx)
+ 75c:	29 f1                	sub    %esi,%ecx
+ 75e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- 751:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ 761:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- 754:	89 72 04             	mov    %esi,0x4(%edx)
+ 764:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 757:	a3 94 0a 00 00       	mov    %eax,0xa94
+ 767:	a3 a4 0a 00 00       	mov    %eax,0xaa4
 }
- 75c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 76c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 75f:	8d 42 08             	lea    0x8(%edx),%eax
+ 76f:	8d 42 08             	lea    0x8(%edx),%eax
 }
- 762:	5b                   	pop    %ebx
- 763:	5e                   	pop    %esi
- 764:	5f                   	pop    %edi
- 765:	5d                   	pop    %ebp
- 766:	c3                   	ret    
- 767:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 76e:	66 90                	xchg   %ax,%ax
+ 772:	5b                   	pop    %ebx
+ 773:	5e                   	pop    %esi
+ 774:	5f                   	pop    %edi
+ 775:	5d                   	pop    %ebp
+ 776:	c3                   	ret    
+ 777:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 77e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 770:	c7 05 94 0a 00 00 98 	movl   $0xa98,0xa94
- 777:	0a 00 00 
+ 780:	c7 05 a4 0a 00 00 a8 	movl   $0xaa8,0xaa4
+ 787:	0a 00 00 
     base.s.size = 0;
- 77a:	bf 98 0a 00 00       	mov    $0xa98,%edi
+ 78a:	bf a8 0a 00 00       	mov    $0xaa8,%edi
     base.s.ptr = freep = prevp = &base;
- 77f:	c7 05 98 0a 00 00 98 	movl   $0xa98,0xa98
- 786:	0a 00 00 
+ 78f:	c7 05 a8 0a 00 00 a8 	movl   $0xaa8,0xaa8
+ 796:	0a 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 789:	89 f8                	mov    %edi,%eax
+ 799:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 78b:	c7 05 9c 0a 00 00 00 	movl   $0x0,0xa9c
- 792:	00 00 00 
+ 79b:	c7 05 ac 0a 00 00 00 	movl   $0x0,0xaac
+ 7a2:	00 00 00 
     if(p->s.size >= nunits){
- 795:	e9 36 ff ff ff       	jmp    6d0 <malloc+0x30>
- 79a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7a5:	e9 36 ff ff ff       	jmp    6e0 <malloc+0x30>
+ 7aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 7a0:	8b 0a                	mov    (%edx),%ecx
- 7a2:	89 08                	mov    %ecx,(%eax)
- 7a4:	eb b1                	jmp    757 <malloc+0xb7>
+ 7b0:	8b 0a                	mov    (%edx),%ecx
+ 7b2:	89 08                	mov    %ecx,(%eax)
+ 7b4:	eb b1                	jmp    767 <malloc+0xb7>
Binary files xv6-public-original/rm.o and xv6-public/rm.o differ
diff -ruN xv6-public-original/rm.sym xv6-public/rm.sym
--- xv6-public-original/rm.sym	2022-08-13 16:28:54.688223000 +0530
+++ xv6-public/rm.sym	2022-09-05 20:56:50.222960000 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-000007a8 .rodata
-000007f0 .eh_frame
-00000a94 .bss
+000007b8 .rodata
+00000800 .eh_frame
+00000aa4 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,18 +13,19 @@
 00000000 rm.c
 00000000 ulib.c
 00000000 printf.c
-00000390 printint
-000007dc digits.1085
+000003a0 printint
+000007ec digits.1094
 00000000 umalloc.c
-00000a94 freep
-00000a98 base
+00000aa4 freep
+00000aa8 base
 00000080 strcpy
-00000440 printf
+00000450 printf
+00000393 thread_exit
 000002b0 memmove
 0000032b mknod
 000001a0 gets
 00000363 getpid
-000006a0 malloc
+000006b0 malloc
 00000373 sleep
 000002f3 pipe
 00000303 write
@@ -38,20 +39,22 @@
 000002db fork
 0000036b sbrk
 0000037b uptime
-00000a94 __bss_start
+00000aa4 __bss_start
 00000140 memset
 00000000 main
 000000b0 strcmp
 0000035b dup
 00000220 stat
-00000a94 _edata
-00000aa0 _end
+00000aa4 _edata
+00000ab0 _end
 00000343 link
 000002e3 exit
 00000270 atoi
 00000100 strlen
 00000323 open
 00000160 strchr
+00000383 thread_create
 0000034b mkdir
 0000030b close
-00000610 free
+0000038b thread_join
+00000620 free
Binary files xv6-public-original/_sh and xv6-public/_sh differ
diff -ruN xv6-public-original/sh.asm xv6-public/sh.asm
--- xv6-public-original/sh.asm	2022-08-13 16:28:54.932145000 +0530
+++ xv6-public/sh.asm	2022-09-05 20:56:50.486960000 +0530
@@ -33,7 +33,7 @@
   while((fd = open("console", O_RDWR)) >= 0){
       29:	83 ec 08             	sub    $0x8,%esp
       2c:	6a 02                	push   $0x2
-      2e:	68 f9 12 00 00       	push   $0x12f9
+      2e:	68 09 13 00 00       	push   $0x1309
       33:	e8 9b 0d 00 00       	call   dd3 <open>
       38:	83 c4 10             	add    $0x10,%esp
       3b:	85 c0                	test   %eax,%eax
@@ -96,9 +96,9 @@
         printf(2, "cannot cd %s\n", buf+3);
       c9:	50                   	push   %eax
       ca:	68 43 19 00 00       	push   $0x1943
-      cf:	68 01 13 00 00       	push   $0x1301
+      cf:	68 11 13 00 00       	push   $0x1311
       d4:	6a 02                	push   $0x2
-      d6:	e8 15 0e 00 00       	call   ef0 <printf>
+      d6:	e8 25 0e 00 00       	call   f00 <printf>
       db:	83 c4 10             	add    $0x10,%esp
       de:	eb 93                	jmp    73 <main+0x73>
       close(fd);
@@ -116,7 +116,7 @@
       fe:	e8 7d 00 00 00       	call   180 <runcmd>
     panic("fork");
      103:	83 ec 0c             	sub    $0xc,%esp
-     106:	68 82 12 00 00       	push   $0x1282
+     106:	68 92 12 00 00       	push   $0x1292
      10b:	e8 50 00 00 00       	call   160 <panic>
 
 00000110 <getcmd>:
@@ -130,9 +130,9 @@
      11c:	8b 5d 08             	mov    0x8(%ebp),%ebx
   printf(2, "$ ");
      11f:	83 ec 08             	sub    $0x8,%esp
-     122:	68 58 12 00 00       	push   $0x1258
+     122:	68 68 12 00 00       	push   $0x1268
      127:	6a 02                	push   $0x2
-     129:	e8 c2 0d 00 00       	call   ef0 <printf>
+     129:	e8 d2 0d 00 00       	call   f00 <printf>
   memset(buf, 0, nbuf);
      12e:	83 c4 0c             	add    $0xc,%esp
      131:	56                   	push   %esi
@@ -170,9 +170,9 @@
      167:	83 ec 0c             	sub    $0xc,%esp
   printf(2, "%s\n", s);
      16a:	ff 75 08             	pushl  0x8(%ebp)
-     16d:	68 f5 12 00 00       	push   $0x12f5
+     16d:	68 05 13 00 00       	push   $0x1305
      172:	6a 02                	push   $0x2
-     174:	e8 77 0d 00 00       	call   ef0 <printf>
+     174:	e8 87 0d 00 00       	call   f00 <printf>
   exit();
      179:	e8 15 0c 00 00       	call   d93 <exit>
      17e:	66 90                	xchg   %ax,%ax
@@ -192,7 +192,7 @@
      192:	83 3b 05             	cmpl   $0x5,(%ebx)
      195:	0f 87 04 01 00 00    	ja     29f <runcmd+0x11f>
      19b:	8b 03                	mov    (%ebx),%eax
-     19d:	3e ff 24 85 10 13 00 	notrack jmp *0x1310(,%eax,4)
+     19d:	3e ff 24 85 20 13 00 	notrack jmp *0x1320(,%eax,4)
      1a4:	00 
     if(pipe(p) < 0)
      1a5:	83 ec 0c             	sub    $0xc,%esp
@@ -258,9 +258,9 @@
     printf(2, "exec %s failed\n", ecmd->argv[0]);
      23c:	83 c4 0c             	add    $0xc,%esp
      23f:	ff 73 04             	pushl  0x4(%ebx)
-     242:	68 62 12 00 00       	push   $0x1262
+     242:	68 72 12 00 00       	push   $0x1272
      247:	6a 02                	push   $0x2
-     249:	e8 a2 0c 00 00       	call   ef0 <printf>
+     249:	e8 b2 0c 00 00       	call   f00 <printf>
     break;
      24e:	83 c4 10             	add    $0x10,%esp
      251:	eb bd                	jmp    210 <runcmd+0x90>
@@ -297,19 +297,19 @@
      29a:	e8 e1 fe ff ff       	call   180 <runcmd>
     panic("runcmd");
      29f:	83 ec 0c             	sub    $0xc,%esp
-     2a2:	68 5b 12 00 00       	push   $0x125b
+     2a2:	68 6b 12 00 00       	push   $0x126b
      2a7:	e8 b4 fe ff ff       	call   160 <panic>
       printf(2, "open %s failed\n", rcmd->file);
      2ac:	51                   	push   %ecx
      2ad:	ff 73 08             	pushl  0x8(%ebx)
-     2b0:	68 72 12 00 00       	push   $0x1272
+     2b0:	68 82 12 00 00       	push   $0x1282
      2b5:	6a 02                	push   $0x2
-     2b7:	e8 34 0c 00 00       	call   ef0 <printf>
+     2b7:	e8 44 0c 00 00       	call   f00 <printf>
       exit();
      2bc:	e8 d2 0a 00 00       	call   d93 <exit>
       panic("pipe");
      2c1:	83 ec 0c             	sub    $0xc,%esp
-     2c4:	68 87 12 00 00       	push   $0x1287
+     2c4:	68 97 12 00 00       	push   $0x1297
      2c9:	e8 92 fe ff ff       	call   160 <panic>
       close(1);
      2ce:	83 ec 0c             	sub    $0xc,%esp
@@ -353,7 +353,7 @@
      325:	e8 56 fe ff ff       	call   180 <runcmd>
     panic("fork");
      32a:	83 ec 0c             	sub    $0xc,%esp
-     32d:	68 82 12 00 00       	push   $0x1282
+     32d:	68 92 12 00 00       	push   $0x1292
      332:	e8 29 fe ff ff       	call   160 <panic>
      337:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      33e:	66 90                	xchg   %ax,%ax
@@ -375,7 +375,7 @@
      355:	c3                   	ret    
     panic("fork");
      356:	83 ec 0c             	sub    $0xc,%esp
-     359:	68 82 12 00 00       	push   $0x1282
+     359:	68 92 12 00 00       	push   $0x1292
      35e:	e8 fd fd ff ff       	call   160 <panic>
      363:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -396,7 +396,7 @@
 
   cmd = malloc(sizeof(*cmd));
      37b:	6a 54                	push   $0x54
-     37d:	e8 ce 0d 00 00       	call   1150 <malloc>
+     37d:	e8 de 0d 00 00       	call   1160 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      382:	83 c4 0c             	add    $0xc,%esp
      385:	6a 54                	push   $0x54
@@ -430,7 +430,7 @@
 
   cmd = malloc(sizeof(*cmd));
      3ab:	6a 18                	push   $0x18
-     3ad:	e8 9e 0d 00 00       	call   1150 <malloc>
+     3ad:	e8 ae 0d 00 00       	call   1160 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      3b2:	83 c4 0c             	add    $0xc,%esp
      3b5:	6a 18                	push   $0x18
@@ -481,7 +481,7 @@
 
   cmd = malloc(sizeof(*cmd));
      3fb:	6a 0c                	push   $0xc
-     3fd:	e8 4e 0d 00 00       	call   1150 <malloc>
+     3fd:	e8 5e 0d 00 00       	call   1160 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      402:	83 c4 0c             	add    $0xc,%esp
      405:	6a 0c                	push   $0xc
@@ -523,7 +523,7 @@
 
   cmd = malloc(sizeof(*cmd));
      43b:	6a 0c                	push   $0xc
-     43d:	e8 0e 0d 00 00       	call   1150 <malloc>
+     43d:	e8 1e 0d 00 00       	call   1160 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      442:	83 c4 0c             	add    $0xc,%esp
      445:	6a 0c                	push   $0xc
@@ -565,7 +565,7 @@
 
   cmd = malloc(sizeof(*cmd));
      47b:	6a 08                	push   $0x8
-     47d:	e8 ce 0c 00 00       	call   1150 <malloc>
+     47d:	e8 de 0c 00 00       	call   1160 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      482:	83 c4 0c             	add    $0xc,%esp
      485:	6a 08                	push   $0x8
@@ -629,7 +629,7 @@
      4d7:	0f be 07             	movsbl (%edi),%eax
      4da:	83 ec 08             	sub    $0x8,%esp
      4dd:	50                   	push   %eax
-     4de:	68 20 19 00 00       	push   $0x1920
+     4de:	68 30 19 00 00       	push   $0x1930
      4e3:	e8 28 07 00 00       	call   c10 <strchr>
      4e8:	83 c4 10             	add    $0x10,%esp
      4eb:	85 c0                	test   %eax,%eax
@@ -674,7 +674,7 @@
      527:	0f be 07             	movsbl (%edi),%eax
      52a:	83 ec 08             	sub    $0x8,%esp
      52d:	50                   	push   %eax
-     52e:	68 20 19 00 00       	push   $0x1920
+     52e:	68 30 19 00 00       	push   $0x1930
      533:	e8 d8 06 00 00       	call   c10 <strchr>
      538:	83 c4 10             	add    $0x10,%esp
      53b:	85 c0                	test   %eax,%eax
@@ -708,7 +708,7 @@
      568:	0f be 07             	movsbl (%edi),%eax
      56b:	83 ec 08             	sub    $0x8,%esp
      56e:	50                   	push   %eax
-     56f:	68 18 19 00 00       	push   $0x1918
+     56f:	68 28 19 00 00       	push   $0x1928
      574:	e8 97 06 00 00       	call   c10 <strchr>
      579:	83 c4 10             	add    $0x10,%esp
      57c:	85 c0                	test   %eax,%eax
@@ -722,7 +722,7 @@
      58a:	83 ec 08             	sub    $0x8,%esp
      58d:	0f be f0             	movsbl %al,%esi
      590:	56                   	push   %esi
-     591:	68 20 19 00 00       	push   $0x1920
+     591:	68 30 19 00 00       	push   $0x1930
      596:	e8 75 06 00 00       	call   c10 <strchr>
      59b:	83 c4 10             	add    $0x10,%esp
      59e:	85 c0                	test   %eax,%eax
@@ -803,7 +803,7 @@
      637:	0f be 03             	movsbl (%ebx),%eax
      63a:	83 ec 08             	sub    $0x8,%esp
      63d:	50                   	push   %eax
-     63e:	68 20 19 00 00       	push   $0x1920
+     63e:	68 30 19 00 00       	push   $0x1930
      643:	e8 c8 05 00 00       	call   c10 <strchr>
      648:	83 c4 10             	add    $0x10,%esp
      64b:	85 c0                	test   %eax,%eax
@@ -867,7 +867,7 @@
      6a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      6a7:	90                   	nop
      6a8:	83 ec 04             	sub    $0x4,%esp
-     6ab:	68 a9 12 00 00       	push   $0x12a9
+     6ab:	68 b9 12 00 00       	push   $0x12b9
      6b0:	53                   	push   %ebx
      6b1:	56                   	push   %esi
      6b2:	e8 59 ff ff ff       	call   610 <peek>
@@ -939,7 +939,7 @@
      732:	c3                   	ret    
       panic("missing file for redirection");
      733:	83 ec 0c             	sub    $0xc,%esp
-     736:	68 8c 12 00 00       	push   $0x128c
+     736:	68 9c 12 00 00       	push   $0x129c
      73b:	e8 20 fa ff ff       	call   160 <panic>
 
 00000740 <parseexec>:
@@ -964,7 +964,7 @@
   struct cmd *ret;
 
   if(peek(ps, es, "("))
-     753:	68 ac 12 00 00       	push   $0x12ac
+     753:	68 bc 12 00 00       	push   $0x12bc
      758:	57                   	push   %edi
      759:	56                   	push   %esi
      75a:	e8 b1 fe ff ff       	call   610 <peek>
@@ -1011,7 +1011,7 @@
      7a0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   while(!peek(ps, es, "|)&;")){
      7a3:	83 ec 04             	sub    $0x4,%esp
-     7a6:	68 c3 12 00 00       	push   $0x12c3
+     7a6:	68 d3 12 00 00       	push   $0x12d3
      7ab:	57                   	push   %edi
      7ac:	56                   	push   %esi
      7ad:	e8 5e fe ff ff       	call   610 <peek>
@@ -1046,7 +1046,7 @@
      7eb:	75 a3                	jne    790 <parseexec+0x50>
       panic("too many args");
      7ed:	83 ec 0c             	sub    $0xc,%esp
-     7f0:	68 b5 12 00 00       	push   $0x12b5
+     7f0:	68 c5 12 00 00       	push   $0x12c5
      7f5:	e8 66 f9 ff ff       	call   160 <panic>
      7fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     return parseblock(ps, es);
@@ -1086,7 +1086,7 @@
      83e:	c3                   	ret    
       panic("syntax");
      83f:	83 ec 0c             	sub    $0xc,%esp
-     842:	68 ae 12 00 00       	push   $0x12ae
+     842:	68 be 12 00 00       	push   $0x12be
      847:	e8 14 f9 ff ff       	call   160 <panic>
      84c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
@@ -1107,7 +1107,7 @@
      865:	e8 d6 fe ff ff       	call   740 <parseexec>
   if(peek(ps, es, "|")){
      86a:	83 c4 0c             	add    $0xc,%esp
-     86d:	68 c8 12 00 00       	push   $0x12c8
+     86d:	68 d8 12 00 00       	push   $0x12d8
   cmd = parseexec(ps, es);
      872:	89 c3                	mov    %eax,%ebx
   if(peek(ps, es, "|")){
@@ -1186,7 +1186,7 @@
      8fe:	89 c3                	mov    %eax,%ebx
   while(peek(ps, es, "&")){
      900:	83 ec 04             	sub    $0x4,%esp
-     903:	68 ca 12 00 00       	push   $0x12ca
+     903:	68 da 12 00 00       	push   $0x12da
      908:	57                   	push   %edi
      909:	56                   	push   %esi
      90a:	e8 01 fd ff ff       	call   610 <peek>
@@ -1195,7 +1195,7 @@
      914:	75 d2                	jne    8e8 <parseline+0x28>
   if(peek(ps, es, ";")){
      916:	83 ec 04             	sub    $0x4,%esp
-     919:	68 c6 12 00 00       	push   $0x12c6
+     919:	68 d6 12 00 00       	push   $0x12d6
      91e:	57                   	push   %edi
      91f:	56                   	push   %esi
      920:	e8 eb fc ff ff       	call   610 <peek>
@@ -1249,7 +1249,7 @@
      97d:	8b 5d 08             	mov    0x8(%ebp),%ebx
      980:	8b 75 0c             	mov    0xc(%ebp),%esi
   if(!peek(ps, es, "("))
-     983:	68 ac 12 00 00       	push   $0x12ac
+     983:	68 bc 12 00 00       	push   $0x12bc
      988:	56                   	push   %esi
      989:	53                   	push   %ebx
      98a:	e8 81 fc ff ff       	call   610 <peek>
@@ -1270,7 +1270,7 @@
      9a5:	e8 16 ff ff ff       	call   8c0 <parseline>
   if(!peek(ps, es, ")"))
      9aa:	83 c4 0c             	add    $0xc,%esp
-     9ad:	68 e8 12 00 00       	push   $0x12e8
+     9ad:	68 f8 12 00 00       	push   $0x12f8
   cmd = parseline(ps, es);
      9b2:	89 c7                	mov    %eax,%edi
   if(!peek(ps, es, ")"))
@@ -1301,11 +1301,11 @@
      9df:	c3                   	ret    
     panic("parseblock");
      9e0:	83 ec 0c             	sub    $0xc,%esp
-     9e3:	68 cc 12 00 00       	push   $0x12cc
+     9e3:	68 dc 12 00 00       	push   $0x12dc
      9e8:	e8 73 f7 ff ff       	call   160 <panic>
     panic("syntax - missing )");
      9ed:	83 ec 0c             	sub    $0xc,%esp
-     9f0:	68 d7 12 00 00       	push   $0x12d7
+     9f0:	68 e7 12 00 00       	push   $0x12e7
      9f5:	e8 66 f7 ff ff       	call   160 <panic>
      9fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
@@ -1335,7 +1335,7 @@
      a16:	83 3b 05             	cmpl   $0x5,(%ebx)
      a19:	77 6d                	ja     a88 <nulterminate+0x88>
      a1b:	8b 03                	mov    (%ebx),%eax
-     a1d:	3e ff 24 85 28 13 00 	notrack jmp *0x1328(,%eax,4)
+     a1d:	3e ff 24 85 38 13 00 	notrack jmp *0x1338(,%eax,4)
      a24:	00 
      a25:	8d 76 00             	lea    0x0(%esi),%esi
     nulterminate(pcmd->right);
@@ -1451,7 +1451,7 @@
      ae6:	89 c6                	mov    %eax,%esi
   peek(&s, es, "");
      ae8:	8d 45 08             	lea    0x8(%ebp),%eax
-     aeb:	68 71 12 00 00       	push   $0x1271
+     aeb:	68 81 12 00 00       	push   $0x1281
      af0:	53                   	push   %ebx
      af1:	50                   	push   %eax
      af2:	e8 19 fb ff ff       	call   610 <peek>
@@ -1474,11 +1474,11 @@
     printf(2, "leftovers: %s\n", s);
      b13:	52                   	push   %edx
      b14:	50                   	push   %eax
-     b15:	68 ea 12 00 00       	push   $0x12ea
+     b15:	68 fa 12 00 00       	push   $0x12fa
      b1a:	6a 02                	push   $0x2
-     b1c:	e8 cf 03 00 00       	call   ef0 <printf>
+     b1c:	e8 df 03 00 00       	call   f00 <printf>
     panic("syntax");
-     b21:	c7 04 24 ae 12 00 00 	movl   $0x12ae,(%esp)
+     b21:	c7 04 24 be 12 00 00 	movl   $0x12be,(%esp)
      b28:	e8 33 f6 ff ff       	call   160 <panic>
      b2d:	66 90                	xchg   %ax,%ax
      b2f:	90                   	nop
@@ -2009,609 +2009,623 @@
      e2b:	b8 0e 00 00 00       	mov    $0xe,%eax
      e30:	cd 40                	int    $0x40
      e32:	c3                   	ret    
-     e33:	66 90                	xchg   %ax,%ax
-     e35:	66 90                	xchg   %ax,%ax
-     e37:	66 90                	xchg   %ax,%ax
-     e39:	66 90                	xchg   %ax,%ax
-     e3b:	66 90                	xchg   %ax,%ax
-     e3d:	66 90                	xchg   %ax,%ax
-     e3f:	90                   	nop
 
-00000e40 <printint>:
+00000e33 <thread_create>:
+SYSCALL(thread_create)
+     e33:	b8 16 00 00 00       	mov    $0x16,%eax
+     e38:	cd 40                	int    $0x40
+     e3a:	c3                   	ret    
+
+00000e3b <thread_join>:
+SYSCALL(thread_join)
+     e3b:	b8 17 00 00 00       	mov    $0x17,%eax
+     e40:	cd 40                	int    $0x40
+     e42:	c3                   	ret    
+
+00000e43 <thread_exit>:
+SYSCALL(thread_exit)
+     e43:	b8 18 00 00 00       	mov    $0x18,%eax
+     e48:	cd 40                	int    $0x40
+     e4a:	c3                   	ret    
+     e4b:	66 90                	xchg   %ax,%ax
+     e4d:	66 90                	xchg   %ax,%ax
+     e4f:	90                   	nop
+
+00000e50 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
-     e40:	55                   	push   %ebp
-     e41:	89 e5                	mov    %esp,%ebp
-     e43:	57                   	push   %edi
-     e44:	56                   	push   %esi
-     e45:	53                   	push   %ebx
-     e46:	83 ec 3c             	sub    $0x3c,%esp
-     e49:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+     e50:	55                   	push   %ebp
+     e51:	89 e5                	mov    %esp,%ebp
+     e53:	57                   	push   %edi
+     e54:	56                   	push   %esi
+     e55:	53                   	push   %ebx
+     e56:	83 ec 3c             	sub    $0x3c,%esp
+     e59:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
-     e4c:	89 d1                	mov    %edx,%ecx
+     e5c:	89 d1                	mov    %edx,%ecx
 {
-     e4e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+     e5e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
-     e51:	85 d2                	test   %edx,%edx
-     e53:	0f 89 7f 00 00 00    	jns    ed8 <printint+0x98>
-     e59:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
-     e5d:	74 79                	je     ed8 <printint+0x98>
+     e61:	85 d2                	test   %edx,%edx
+     e63:	0f 89 7f 00 00 00    	jns    ee8 <printint+0x98>
+     e69:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+     e6d:	74 79                	je     ee8 <printint+0x98>
     neg = 1;
-     e5f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+     e6f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
-     e66:	f7 d9                	neg    %ecx
+     e76:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
-     e68:	31 db                	xor    %ebx,%ebx
-     e6a:	8d 75 d7             	lea    -0x29(%ebp),%esi
-     e6d:	8d 76 00             	lea    0x0(%esi),%esi
+     e78:	31 db                	xor    %ebx,%ebx
+     e7a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+     e7d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
-     e70:	89 c8                	mov    %ecx,%eax
-     e72:	31 d2                	xor    %edx,%edx
-     e74:	89 cf                	mov    %ecx,%edi
-     e76:	f7 75 c4             	divl   -0x3c(%ebp)
-     e79:	0f b6 92 48 13 00 00 	movzbl 0x1348(%edx),%edx
-     e80:	89 45 c0             	mov    %eax,-0x40(%ebp)
-     e83:	89 d8                	mov    %ebx,%eax
-     e85:	8d 5b 01             	lea    0x1(%ebx),%ebx
+     e80:	89 c8                	mov    %ecx,%eax
+     e82:	31 d2                	xor    %edx,%edx
+     e84:	89 cf                	mov    %ecx,%edi
+     e86:	f7 75 c4             	divl   -0x3c(%ebp)
+     e89:	0f b6 92 58 13 00 00 	movzbl 0x1358(%edx),%edx
+     e90:	89 45 c0             	mov    %eax,-0x40(%ebp)
+     e93:	89 d8                	mov    %ebx,%eax
+     e95:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
-     e88:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+     e98:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
-     e8b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+     e9b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
-     e8e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
-     e91:	76 dd                	jbe    e70 <printint+0x30>
+     e9e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+     ea1:	76 dd                	jbe    e80 <printint+0x30>
   if(neg)
-     e93:	8b 4d bc             	mov    -0x44(%ebp),%ecx
-     e96:	85 c9                	test   %ecx,%ecx
-     e98:	74 0c                	je     ea6 <printint+0x66>
+     ea3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+     ea6:	85 c9                	test   %ecx,%ecx
+     ea8:	74 0c                	je     eb6 <printint+0x66>
     buf[i++] = '-';
-     e9a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+     eaa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
-     e9f:	89 d8                	mov    %ebx,%eax
+     eaf:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
-     ea1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+     eb1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
-     ea6:	8b 7d b8             	mov    -0x48(%ebp),%edi
-     ea9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
-     ead:	eb 07                	jmp    eb6 <printint+0x76>
-     eaf:	90                   	nop
-     eb0:	0f b6 13             	movzbl (%ebx),%edx
-     eb3:	83 eb 01             	sub    $0x1,%ebx
+     eb6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+     eb9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+     ebd:	eb 07                	jmp    ec6 <printint+0x76>
+     ebf:	90                   	nop
+     ec0:	0f b6 13             	movzbl (%ebx),%edx
+     ec3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
-     eb6:	83 ec 04             	sub    $0x4,%esp
-     eb9:	88 55 d7             	mov    %dl,-0x29(%ebp)
-     ebc:	6a 01                	push   $0x1
-     ebe:	56                   	push   %esi
-     ebf:	57                   	push   %edi
-     ec0:	e8 ee fe ff ff       	call   db3 <write>
+     ec6:	83 ec 04             	sub    $0x4,%esp
+     ec9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+     ecc:	6a 01                	push   $0x1
+     ece:	56                   	push   %esi
+     ecf:	57                   	push   %edi
+     ed0:	e8 de fe ff ff       	call   db3 <write>
   while(--i >= 0)
-     ec5:	83 c4 10             	add    $0x10,%esp
-     ec8:	39 de                	cmp    %ebx,%esi
-     eca:	75 e4                	jne    eb0 <printint+0x70>
+     ed5:	83 c4 10             	add    $0x10,%esp
+     ed8:	39 de                	cmp    %ebx,%esi
+     eda:	75 e4                	jne    ec0 <printint+0x70>
     putc(fd, buf[i]);
 }
-     ecc:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     ecf:	5b                   	pop    %ebx
-     ed0:	5e                   	pop    %esi
-     ed1:	5f                   	pop    %edi
-     ed2:	5d                   	pop    %ebp
-     ed3:	c3                   	ret    
-     ed4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     edc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     edf:	5b                   	pop    %ebx
+     ee0:	5e                   	pop    %esi
+     ee1:	5f                   	pop    %edi
+     ee2:	5d                   	pop    %ebp
+     ee3:	c3                   	ret    
+     ee4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
-     ed8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
-     edf:	eb 87                	jmp    e68 <printint+0x28>
-     ee1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     ee8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     eef:	90                   	nop
+     ee8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+     eef:	eb 87                	jmp    e78 <printint+0x28>
+     ef1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     ef8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     eff:	90                   	nop
 
-00000ef0 <printf>:
+00000f00 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
-     ef0:	f3 0f 1e fb          	endbr32 
-     ef4:	55                   	push   %ebp
-     ef5:	89 e5                	mov    %esp,%ebp
-     ef7:	57                   	push   %edi
-     ef8:	56                   	push   %esi
-     ef9:	53                   	push   %ebx
-     efa:	83 ec 2c             	sub    $0x2c,%esp
+     f00:	f3 0f 1e fb          	endbr32 
+     f04:	55                   	push   %ebp
+     f05:	89 e5                	mov    %esp,%ebp
+     f07:	57                   	push   %edi
+     f08:	56                   	push   %esi
+     f09:	53                   	push   %ebx
+     f0a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
-     efd:	8b 75 0c             	mov    0xc(%ebp),%esi
-     f00:	0f b6 1e             	movzbl (%esi),%ebx
-     f03:	84 db                	test   %bl,%bl
-     f05:	0f 84 b4 00 00 00    	je     fbf <printf+0xcf>
+     f0d:	8b 75 0c             	mov    0xc(%ebp),%esi
+     f10:	0f b6 1e             	movzbl (%esi),%ebx
+     f13:	84 db                	test   %bl,%bl
+     f15:	0f 84 b4 00 00 00    	je     fcf <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
-     f0b:	8d 45 10             	lea    0x10(%ebp),%eax
-     f0e:	83 c6 01             	add    $0x1,%esi
+     f1b:	8d 45 10             	lea    0x10(%ebp),%eax
+     f1e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
-     f11:	8d 7d e7             	lea    -0x19(%ebp),%edi
+     f21:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
-     f14:	31 d2                	xor    %edx,%edx
+     f24:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
-     f16:	89 45 d0             	mov    %eax,-0x30(%ebp)
-     f19:	eb 33                	jmp    f4e <printf+0x5e>
-     f1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     f1f:	90                   	nop
-     f20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+     f26:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     f29:	eb 33                	jmp    f5e <printf+0x5e>
+     f2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     f2f:	90                   	nop
+     f30:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
-     f23:	ba 25 00 00 00       	mov    $0x25,%edx
+     f33:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
-     f28:	83 f8 25             	cmp    $0x25,%eax
-     f2b:	74 17                	je     f44 <printf+0x54>
+     f38:	83 f8 25             	cmp    $0x25,%eax
+     f3b:	74 17                	je     f54 <printf+0x54>
   write(fd, &c, 1);
-     f2d:	83 ec 04             	sub    $0x4,%esp
-     f30:	88 5d e7             	mov    %bl,-0x19(%ebp)
-     f33:	6a 01                	push   $0x1
-     f35:	57                   	push   %edi
-     f36:	ff 75 08             	pushl  0x8(%ebp)
-     f39:	e8 75 fe ff ff       	call   db3 <write>
-     f3e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     f3d:	83 ec 04             	sub    $0x4,%esp
+     f40:	88 5d e7             	mov    %bl,-0x19(%ebp)
+     f43:	6a 01                	push   $0x1
+     f45:	57                   	push   %edi
+     f46:	ff 75 08             	pushl  0x8(%ebp)
+     f49:	e8 65 fe ff ff       	call   db3 <write>
+     f4e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
-     f41:	83 c4 10             	add    $0x10,%esp
+     f51:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
-     f44:	0f b6 1e             	movzbl (%esi),%ebx
-     f47:	83 c6 01             	add    $0x1,%esi
-     f4a:	84 db                	test   %bl,%bl
-     f4c:	74 71                	je     fbf <printf+0xcf>
+     f54:	0f b6 1e             	movzbl (%esi),%ebx
+     f57:	83 c6 01             	add    $0x1,%esi
+     f5a:	84 db                	test   %bl,%bl
+     f5c:	74 71                	je     fcf <printf+0xcf>
     c = fmt[i] & 0xff;
-     f4e:	0f be cb             	movsbl %bl,%ecx
-     f51:	0f b6 c3             	movzbl %bl,%eax
+     f5e:	0f be cb             	movsbl %bl,%ecx
+     f61:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
-     f54:	85 d2                	test   %edx,%edx
-     f56:	74 c8                	je     f20 <printf+0x30>
+     f64:	85 d2                	test   %edx,%edx
+     f66:	74 c8                	je     f30 <printf+0x30>
       }
     } else if(state == '%'){
-     f58:	83 fa 25             	cmp    $0x25,%edx
-     f5b:	75 e7                	jne    f44 <printf+0x54>
+     f68:	83 fa 25             	cmp    $0x25,%edx
+     f6b:	75 e7                	jne    f54 <printf+0x54>
       if(c == 'd'){
-     f5d:	83 f8 64             	cmp    $0x64,%eax
-     f60:	0f 84 9a 00 00 00    	je     1000 <printf+0x110>
+     f6d:	83 f8 64             	cmp    $0x64,%eax
+     f70:	0f 84 9a 00 00 00    	je     1010 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
-     f66:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
-     f6c:	83 f9 70             	cmp    $0x70,%ecx
-     f6f:	74 5f                	je     fd0 <printf+0xe0>
+     f76:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+     f7c:	83 f9 70             	cmp    $0x70,%ecx
+     f7f:	74 5f                	je     fe0 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
-     f71:	83 f8 73             	cmp    $0x73,%eax
-     f74:	0f 84 d6 00 00 00    	je     1050 <printf+0x160>
+     f81:	83 f8 73             	cmp    $0x73,%eax
+     f84:	0f 84 d6 00 00 00    	je     1060 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
-     f7a:	83 f8 63             	cmp    $0x63,%eax
-     f7d:	0f 84 8d 00 00 00    	je     1010 <printf+0x120>
+     f8a:	83 f8 63             	cmp    $0x63,%eax
+     f8d:	0f 84 8d 00 00 00    	je     1020 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
-     f83:	83 f8 25             	cmp    $0x25,%eax
-     f86:	0f 84 b4 00 00 00    	je     1040 <printf+0x150>
+     f93:	83 f8 25             	cmp    $0x25,%eax
+     f96:	0f 84 b4 00 00 00    	je     1050 <printf+0x150>
   write(fd, &c, 1);
-     f8c:	83 ec 04             	sub    $0x4,%esp
-     f8f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
-     f93:	6a 01                	push   $0x1
-     f95:	57                   	push   %edi
-     f96:	ff 75 08             	pushl  0x8(%ebp)
-     f99:	e8 15 fe ff ff       	call   db3 <write>
+     f9c:	83 ec 04             	sub    $0x4,%esp
+     f9f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+     fa3:	6a 01                	push   $0x1
+     fa5:	57                   	push   %edi
+     fa6:	ff 75 08             	pushl  0x8(%ebp)
+     fa9:	e8 05 fe ff ff       	call   db3 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
-     f9e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+     fae:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
-     fa1:	83 c4 0c             	add    $0xc,%esp
-     fa4:	6a 01                	push   $0x1
-     fa6:	83 c6 01             	add    $0x1,%esi
-     fa9:	57                   	push   %edi
-     faa:	ff 75 08             	pushl  0x8(%ebp)
-     fad:	e8 01 fe ff ff       	call   db3 <write>
+     fb1:	83 c4 0c             	add    $0xc,%esp
+     fb4:	6a 01                	push   $0x1
+     fb6:	83 c6 01             	add    $0x1,%esi
+     fb9:	57                   	push   %edi
+     fba:	ff 75 08             	pushl  0x8(%ebp)
+     fbd:	e8 f1 fd ff ff       	call   db3 <write>
   for(i = 0; fmt[i]; i++){
-     fb2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+     fc2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
-     fb6:	83 c4 10             	add    $0x10,%esp
+     fc6:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
-     fb9:	31 d2                	xor    %edx,%edx
+     fc9:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
-     fbb:	84 db                	test   %bl,%bl
-     fbd:	75 8f                	jne    f4e <printf+0x5e>
+     fcb:	84 db                	test   %bl,%bl
+     fcd:	75 8f                	jne    f5e <printf+0x5e>
     }
   }
 }
-     fbf:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     fc2:	5b                   	pop    %ebx
-     fc3:	5e                   	pop    %esi
-     fc4:	5f                   	pop    %edi
-     fc5:	5d                   	pop    %ebp
-     fc6:	c3                   	ret    
-     fc7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     fce:	66 90                	xchg   %ax,%ax
+     fcf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     fd2:	5b                   	pop    %ebx
+     fd3:	5e                   	pop    %esi
+     fd4:	5f                   	pop    %edi
+     fd5:	5d                   	pop    %ebp
+     fd6:	c3                   	ret    
+     fd7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     fde:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
-     fd0:	83 ec 0c             	sub    $0xc,%esp
-     fd3:	b9 10 00 00 00       	mov    $0x10,%ecx
-     fd8:	6a 00                	push   $0x0
-     fda:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-     fdd:	8b 45 08             	mov    0x8(%ebp),%eax
-     fe0:	8b 13                	mov    (%ebx),%edx
-     fe2:	e8 59 fe ff ff       	call   e40 <printint>
+     fe0:	83 ec 0c             	sub    $0xc,%esp
+     fe3:	b9 10 00 00 00       	mov    $0x10,%ecx
+     fe8:	6a 00                	push   $0x0
+     fea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+     fed:	8b 45 08             	mov    0x8(%ebp),%eax
+     ff0:	8b 13                	mov    (%ebx),%edx
+     ff2:	e8 59 fe ff ff       	call   e50 <printint>
         ap++;
-     fe7:	89 d8                	mov    %ebx,%eax
-     fe9:	83 c4 10             	add    $0x10,%esp
+     ff7:	89 d8                	mov    %ebx,%eax
+     ff9:	83 c4 10             	add    $0x10,%esp
       state = 0;
-     fec:	31 d2                	xor    %edx,%edx
+     ffc:	31 d2                	xor    %edx,%edx
         ap++;
-     fee:	83 c0 04             	add    $0x4,%eax
-     ff1:	89 45 d0             	mov    %eax,-0x30(%ebp)
-     ff4:	e9 4b ff ff ff       	jmp    f44 <printf+0x54>
-     ff9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     ffe:	83 c0 04             	add    $0x4,%eax
+    1001:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    1004:	e9 4b ff ff ff       	jmp    f54 <printf+0x54>
+    1009:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
-    1000:	83 ec 0c             	sub    $0xc,%esp
-    1003:	b9 0a 00 00 00       	mov    $0xa,%ecx
-    1008:	6a 01                	push   $0x1
-    100a:	eb ce                	jmp    fda <printf+0xea>
-    100c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1010:	83 ec 0c             	sub    $0xc,%esp
+    1013:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    1018:	6a 01                	push   $0x1
+    101a:	eb ce                	jmp    fea <printf+0xea>
+    101c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
-    1010:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+    1020:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
-    1013:	83 ec 04             	sub    $0x4,%esp
+    1023:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
-    1016:	8b 03                	mov    (%ebx),%eax
+    1026:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
-    1018:	6a 01                	push   $0x1
+    1028:	6a 01                	push   $0x1
         ap++;
-    101a:	83 c3 04             	add    $0x4,%ebx
+    102a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
-    101d:	57                   	push   %edi
-    101e:	ff 75 08             	pushl  0x8(%ebp)
+    102d:	57                   	push   %edi
+    102e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
-    1021:	88 45 e7             	mov    %al,-0x19(%ebp)
+    1031:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
-    1024:	e8 8a fd ff ff       	call   db3 <write>
+    1034:	e8 7a fd ff ff       	call   db3 <write>
         ap++;
-    1029:	89 5d d0             	mov    %ebx,-0x30(%ebp)
-    102c:	83 c4 10             	add    $0x10,%esp
+    1039:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+    103c:	83 c4 10             	add    $0x10,%esp
       state = 0;
-    102f:	31 d2                	xor    %edx,%edx
-    1031:	e9 0e ff ff ff       	jmp    f44 <printf+0x54>
-    1036:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    103d:	8d 76 00             	lea    0x0(%esi),%esi
+    103f:	31 d2                	xor    %edx,%edx
+    1041:	e9 0e ff ff ff       	jmp    f54 <printf+0x54>
+    1046:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    104d:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
-    1040:	88 5d e7             	mov    %bl,-0x19(%ebp)
+    1050:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
-    1043:	83 ec 04             	sub    $0x4,%esp
-    1046:	e9 59 ff ff ff       	jmp    fa4 <printf+0xb4>
-    104b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    104f:	90                   	nop
+    1053:	83 ec 04             	sub    $0x4,%esp
+    1056:	e9 59 ff ff ff       	jmp    fb4 <printf+0xb4>
+    105b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    105f:	90                   	nop
         s = (char*)*ap;
-    1050:	8b 45 d0             	mov    -0x30(%ebp),%eax
-    1053:	8b 18                	mov    (%eax),%ebx
+    1060:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    1063:	8b 18                	mov    (%eax),%ebx
         ap++;
-    1055:	83 c0 04             	add    $0x4,%eax
-    1058:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    1065:	83 c0 04             	add    $0x4,%eax
+    1068:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
-    105b:	85 db                	test   %ebx,%ebx
-    105d:	74 17                	je     1076 <printf+0x186>
+    106b:	85 db                	test   %ebx,%ebx
+    106d:	74 17                	je     1086 <printf+0x186>
         while(*s != 0){
-    105f:	0f b6 03             	movzbl (%ebx),%eax
+    106f:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
-    1062:	31 d2                	xor    %edx,%edx
+    1072:	31 d2                	xor    %edx,%edx
         while(*s != 0){
-    1064:	84 c0                	test   %al,%al
-    1066:	0f 84 d8 fe ff ff    	je     f44 <printf+0x54>
-    106c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
-    106f:	89 de                	mov    %ebx,%esi
-    1071:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    1074:	eb 1a                	jmp    1090 <printf+0x1a0>
+    1074:	84 c0                	test   %al,%al
+    1076:	0f 84 d8 fe ff ff    	je     f54 <printf+0x54>
+    107c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    107f:	89 de                	mov    %ebx,%esi
+    1081:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    1084:	eb 1a                	jmp    10a0 <printf+0x1a0>
           s = "(null)";
-    1076:	bb 40 13 00 00       	mov    $0x1340,%ebx
+    1086:	bb 50 13 00 00       	mov    $0x1350,%ebx
         while(*s != 0){
-    107b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
-    107e:	b8 28 00 00 00       	mov    $0x28,%eax
-    1083:	89 de                	mov    %ebx,%esi
-    1085:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    1088:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    108f:	90                   	nop
+    108b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    108e:	b8 28 00 00 00       	mov    $0x28,%eax
+    1093:	89 de                	mov    %ebx,%esi
+    1095:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    1098:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    109f:	90                   	nop
   write(fd, &c, 1);
-    1090:	83 ec 04             	sub    $0x4,%esp
+    10a0:	83 ec 04             	sub    $0x4,%esp
           s++;
-    1093:	83 c6 01             	add    $0x1,%esi
-    1096:	88 45 e7             	mov    %al,-0x19(%ebp)
+    10a3:	83 c6 01             	add    $0x1,%esi
+    10a6:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
-    1099:	6a 01                	push   $0x1
-    109b:	57                   	push   %edi
-    109c:	53                   	push   %ebx
-    109d:	e8 11 fd ff ff       	call   db3 <write>
+    10a9:	6a 01                	push   $0x1
+    10ab:	57                   	push   %edi
+    10ac:	53                   	push   %ebx
+    10ad:	e8 01 fd ff ff       	call   db3 <write>
         while(*s != 0){
-    10a2:	0f b6 06             	movzbl (%esi),%eax
-    10a5:	83 c4 10             	add    $0x10,%esp
-    10a8:	84 c0                	test   %al,%al
-    10aa:	75 e4                	jne    1090 <printf+0x1a0>
-    10ac:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+    10b2:	0f b6 06             	movzbl (%esi),%eax
+    10b5:	83 c4 10             	add    $0x10,%esp
+    10b8:	84 c0                	test   %al,%al
+    10ba:	75 e4                	jne    10a0 <printf+0x1a0>
+    10bc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
-    10af:	31 d2                	xor    %edx,%edx
-    10b1:	e9 8e fe ff ff       	jmp    f44 <printf+0x54>
-    10b6:	66 90                	xchg   %ax,%ax
-    10b8:	66 90                	xchg   %ax,%ax
-    10ba:	66 90                	xchg   %ax,%ax
-    10bc:	66 90                	xchg   %ax,%ax
-    10be:	66 90                	xchg   %ax,%ax
+    10bf:	31 d2                	xor    %edx,%edx
+    10c1:	e9 8e fe ff ff       	jmp    f54 <printf+0x54>
+    10c6:	66 90                	xchg   %ax,%ax
+    10c8:	66 90                	xchg   %ax,%ax
+    10ca:	66 90                	xchg   %ax,%ax
+    10cc:	66 90                	xchg   %ax,%ax
+    10ce:	66 90                	xchg   %ax,%ax
 
-000010c0 <free>:
+000010d0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
-    10c0:	f3 0f 1e fb          	endbr32 
-    10c4:	55                   	push   %ebp
+    10d0:	f3 0f 1e fb          	endbr32 
+    10d4:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    10c5:	a1 a4 19 00 00       	mov    0x19a4,%eax
+    10d5:	a1 a4 19 00 00       	mov    0x19a4,%eax
 {
-    10ca:	89 e5                	mov    %esp,%ebp
-    10cc:	57                   	push   %edi
-    10cd:	56                   	push   %esi
-    10ce:	53                   	push   %ebx
-    10cf:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    10d2:	8b 10                	mov    (%eax),%edx
+    10da:	89 e5                	mov    %esp,%ebp
+    10dc:	57                   	push   %edi
+    10dd:	56                   	push   %esi
+    10de:	53                   	push   %ebx
+    10df:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    10e2:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
-    10d4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+    10e4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    10d7:	39 c8                	cmp    %ecx,%eax
-    10d9:	73 15                	jae    10f0 <free+0x30>
-    10db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    10df:	90                   	nop
-    10e0:	39 d1                	cmp    %edx,%ecx
-    10e2:	72 14                	jb     10f8 <free+0x38>
+    10e7:	39 c8                	cmp    %ecx,%eax
+    10e9:	73 15                	jae    1100 <free+0x30>
+    10eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    10ef:	90                   	nop
+    10f0:	39 d1                	cmp    %edx,%ecx
+    10f2:	72 14                	jb     1108 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    10e4:	39 d0                	cmp    %edx,%eax
-    10e6:	73 10                	jae    10f8 <free+0x38>
+    10f4:	39 d0                	cmp    %edx,%eax
+    10f6:	73 10                	jae    1108 <free+0x38>
 {
-    10e8:	89 d0                	mov    %edx,%eax
+    10f8:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    10ea:	8b 10                	mov    (%eax),%edx
-    10ec:	39 c8                	cmp    %ecx,%eax
-    10ee:	72 f0                	jb     10e0 <free+0x20>
+    10fa:	8b 10                	mov    (%eax),%edx
+    10fc:	39 c8                	cmp    %ecx,%eax
+    10fe:	72 f0                	jb     10f0 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    10f0:	39 d0                	cmp    %edx,%eax
-    10f2:	72 f4                	jb     10e8 <free+0x28>
-    10f4:	39 d1                	cmp    %edx,%ecx
-    10f6:	73 f0                	jae    10e8 <free+0x28>
+    1100:	39 d0                	cmp    %edx,%eax
+    1102:	72 f4                	jb     10f8 <free+0x28>
+    1104:	39 d1                	cmp    %edx,%ecx
+    1106:	73 f0                	jae    10f8 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
-    10f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
-    10fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
-    10fe:	39 fa                	cmp    %edi,%edx
-    1100:	74 1e                	je     1120 <free+0x60>
+    1108:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    110b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    110e:	39 fa                	cmp    %edi,%edx
+    1110:	74 1e                	je     1130 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
-    1102:	89 53 f8             	mov    %edx,-0x8(%ebx)
+    1112:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
-    1105:	8b 50 04             	mov    0x4(%eax),%edx
-    1108:	8d 34 d0             	lea    (%eax,%edx,8),%esi
-    110b:	39 f1                	cmp    %esi,%ecx
-    110d:	74 28                	je     1137 <free+0x77>
+    1115:	8b 50 04             	mov    0x4(%eax),%edx
+    1118:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    111b:	39 f1                	cmp    %esi,%ecx
+    111d:	74 28                	je     1147 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
-    110f:	89 08                	mov    %ecx,(%eax)
+    111f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
-    1111:	5b                   	pop    %ebx
+    1121:	5b                   	pop    %ebx
   freep = p;
-    1112:	a3 a4 19 00 00       	mov    %eax,0x19a4
+    1122:	a3 a4 19 00 00       	mov    %eax,0x19a4
 }
-    1117:	5e                   	pop    %esi
-    1118:	5f                   	pop    %edi
-    1119:	5d                   	pop    %ebp
-    111a:	c3                   	ret    
-    111b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    111f:	90                   	nop
+    1127:	5e                   	pop    %esi
+    1128:	5f                   	pop    %edi
+    1129:	5d                   	pop    %ebp
+    112a:	c3                   	ret    
+    112b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    112f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
-    1120:	03 72 04             	add    0x4(%edx),%esi
-    1123:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    1130:	03 72 04             	add    0x4(%edx),%esi
+    1133:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
-    1126:	8b 10                	mov    (%eax),%edx
-    1128:	8b 12                	mov    (%edx),%edx
-    112a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+    1136:	8b 10                	mov    (%eax),%edx
+    1138:	8b 12                	mov    (%edx),%edx
+    113a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
-    112d:	8b 50 04             	mov    0x4(%eax),%edx
-    1130:	8d 34 d0             	lea    (%eax,%edx,8),%esi
-    1133:	39 f1                	cmp    %esi,%ecx
-    1135:	75 d8                	jne    110f <free+0x4f>
+    113d:	8b 50 04             	mov    0x4(%eax),%edx
+    1140:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    1143:	39 f1                	cmp    %esi,%ecx
+    1145:	75 d8                	jne    111f <free+0x4f>
     p->s.size += bp->s.size;
-    1137:	03 53 fc             	add    -0x4(%ebx),%edx
+    1147:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
-    113a:	a3 a4 19 00 00       	mov    %eax,0x19a4
+    114a:	a3 a4 19 00 00       	mov    %eax,0x19a4
     p->s.size += bp->s.size;
-    113f:	89 50 04             	mov    %edx,0x4(%eax)
+    114f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
-    1142:	8b 53 f8             	mov    -0x8(%ebx),%edx
-    1145:	89 10                	mov    %edx,(%eax)
+    1152:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    1155:	89 10                	mov    %edx,(%eax)
 }
-    1147:	5b                   	pop    %ebx
-    1148:	5e                   	pop    %esi
-    1149:	5f                   	pop    %edi
-    114a:	5d                   	pop    %ebp
-    114b:	c3                   	ret    
-    114c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1157:	5b                   	pop    %ebx
+    1158:	5e                   	pop    %esi
+    1159:	5f                   	pop    %edi
+    115a:	5d                   	pop    %ebp
+    115b:	c3                   	ret    
+    115c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00001150 <malloc>:
+00001160 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
-    1150:	f3 0f 1e fb          	endbr32 
-    1154:	55                   	push   %ebp
-    1155:	89 e5                	mov    %esp,%ebp
-    1157:	57                   	push   %edi
-    1158:	56                   	push   %esi
-    1159:	53                   	push   %ebx
-    115a:	83 ec 1c             	sub    $0x1c,%esp
+    1160:	f3 0f 1e fb          	endbr32 
+    1164:	55                   	push   %ebp
+    1165:	89 e5                	mov    %esp,%ebp
+    1167:	57                   	push   %edi
+    1168:	56                   	push   %esi
+    1169:	53                   	push   %ebx
+    116a:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    115d:	8b 45 08             	mov    0x8(%ebp),%eax
+    116d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
-    1160:	8b 3d a4 19 00 00    	mov    0x19a4,%edi
+    1170:	8b 3d a4 19 00 00    	mov    0x19a4,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    1166:	8d 70 07             	lea    0x7(%eax),%esi
-    1169:	c1 ee 03             	shr    $0x3,%esi
-    116c:	83 c6 01             	add    $0x1,%esi
+    1176:	8d 70 07             	lea    0x7(%eax),%esi
+    1179:	c1 ee 03             	shr    $0x3,%esi
+    117c:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
-    116f:	85 ff                	test   %edi,%edi
-    1171:	0f 84 a9 00 00 00    	je     1220 <malloc+0xd0>
+    117f:	85 ff                	test   %edi,%edi
+    1181:	0f 84 a9 00 00 00    	je     1230 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    1177:	8b 07                	mov    (%edi),%eax
+    1187:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
-    1179:	8b 48 04             	mov    0x4(%eax),%ecx
-    117c:	39 f1                	cmp    %esi,%ecx
-    117e:	73 6d                	jae    11ed <malloc+0x9d>
-    1180:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
-    1186:	bb 00 10 00 00       	mov    $0x1000,%ebx
-    118b:	0f 43 de             	cmovae %esi,%ebx
+    1189:	8b 48 04             	mov    0x4(%eax),%ecx
+    118c:	39 f1                	cmp    %esi,%ecx
+    118e:	73 6d                	jae    11fd <malloc+0x9d>
+    1190:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+    1196:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    119b:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
-    118e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
-    1195:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
-    1198:	eb 17                	jmp    11b1 <malloc+0x61>
-    119a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    119e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+    11a5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+    11a8:	eb 17                	jmp    11c1 <malloc+0x61>
+    11aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    11a0:	8b 10                	mov    (%eax),%edx
+    11b0:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
-    11a2:	8b 4a 04             	mov    0x4(%edx),%ecx
-    11a5:	39 f1                	cmp    %esi,%ecx
-    11a7:	73 4f                	jae    11f8 <malloc+0xa8>
-    11a9:	8b 3d a4 19 00 00    	mov    0x19a4,%edi
-    11af:	89 d0                	mov    %edx,%eax
+    11b2:	8b 4a 04             	mov    0x4(%edx),%ecx
+    11b5:	39 f1                	cmp    %esi,%ecx
+    11b7:	73 4f                	jae    1208 <malloc+0xa8>
+    11b9:	8b 3d a4 19 00 00    	mov    0x19a4,%edi
+    11bf:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
-    11b1:	39 c7                	cmp    %eax,%edi
-    11b3:	75 eb                	jne    11a0 <malloc+0x50>
+    11c1:	39 c7                	cmp    %eax,%edi
+    11c3:	75 eb                	jne    11b0 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
-    11b5:	83 ec 0c             	sub    $0xc,%esp
-    11b8:	ff 75 e4             	pushl  -0x1c(%ebp)
-    11bb:	e8 5b fc ff ff       	call   e1b <sbrk>
+    11c5:	83 ec 0c             	sub    $0xc,%esp
+    11c8:	ff 75 e4             	pushl  -0x1c(%ebp)
+    11cb:	e8 4b fc ff ff       	call   e1b <sbrk>
   if(p == (char*)-1)
-    11c0:	83 c4 10             	add    $0x10,%esp
-    11c3:	83 f8 ff             	cmp    $0xffffffff,%eax
-    11c6:	74 1b                	je     11e3 <malloc+0x93>
+    11d0:	83 c4 10             	add    $0x10,%esp
+    11d3:	83 f8 ff             	cmp    $0xffffffff,%eax
+    11d6:	74 1b                	je     11f3 <malloc+0x93>
   hp->s.size = nu;
-    11c8:	89 58 04             	mov    %ebx,0x4(%eax)
+    11d8:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
-    11cb:	83 ec 0c             	sub    $0xc,%esp
-    11ce:	83 c0 08             	add    $0x8,%eax
-    11d1:	50                   	push   %eax
-    11d2:	e8 e9 fe ff ff       	call   10c0 <free>
+    11db:	83 ec 0c             	sub    $0xc,%esp
+    11de:	83 c0 08             	add    $0x8,%eax
+    11e1:	50                   	push   %eax
+    11e2:	e8 e9 fe ff ff       	call   10d0 <free>
   return freep;
-    11d7:	a1 a4 19 00 00       	mov    0x19a4,%eax
+    11e7:	a1 a4 19 00 00       	mov    0x19a4,%eax
       if((p = morecore(nunits)) == 0)
-    11dc:	83 c4 10             	add    $0x10,%esp
-    11df:	85 c0                	test   %eax,%eax
-    11e1:	75 bd                	jne    11a0 <malloc+0x50>
+    11ec:	83 c4 10             	add    $0x10,%esp
+    11ef:	85 c0                	test   %eax,%eax
+    11f1:	75 bd                	jne    11b0 <malloc+0x50>
         return 0;
   }
 }
-    11e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    11f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
-    11e6:	31 c0                	xor    %eax,%eax
+    11f6:	31 c0                	xor    %eax,%eax
 }
-    11e8:	5b                   	pop    %ebx
-    11e9:	5e                   	pop    %esi
-    11ea:	5f                   	pop    %edi
-    11eb:	5d                   	pop    %ebp
-    11ec:	c3                   	ret    
+    11f8:	5b                   	pop    %ebx
+    11f9:	5e                   	pop    %esi
+    11fa:	5f                   	pop    %edi
+    11fb:	5d                   	pop    %ebp
+    11fc:	c3                   	ret    
     if(p->s.size >= nunits){
-    11ed:	89 c2                	mov    %eax,%edx
-    11ef:	89 f8                	mov    %edi,%eax
-    11f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    11fd:	89 c2                	mov    %eax,%edx
+    11ff:	89 f8                	mov    %edi,%eax
+    1201:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
-    11f8:	39 ce                	cmp    %ecx,%esi
-    11fa:	74 54                	je     1250 <malloc+0x100>
+    1208:	39 ce                	cmp    %ecx,%esi
+    120a:	74 54                	je     1260 <malloc+0x100>
         p->s.size -= nunits;
-    11fc:	29 f1                	sub    %esi,%ecx
-    11fe:	89 4a 04             	mov    %ecx,0x4(%edx)
+    120c:	29 f1                	sub    %esi,%ecx
+    120e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
-    1201:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+    1211:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
-    1204:	89 72 04             	mov    %esi,0x4(%edx)
+    1214:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
-    1207:	a3 a4 19 00 00       	mov    %eax,0x19a4
+    1217:	a3 a4 19 00 00       	mov    %eax,0x19a4
 }
-    120c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    121c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
-    120f:	8d 42 08             	lea    0x8(%edx),%eax
+    121f:	8d 42 08             	lea    0x8(%edx),%eax
 }
-    1212:	5b                   	pop    %ebx
-    1213:	5e                   	pop    %esi
-    1214:	5f                   	pop    %edi
-    1215:	5d                   	pop    %ebp
-    1216:	c3                   	ret    
-    1217:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    121e:	66 90                	xchg   %ax,%ax
+    1222:	5b                   	pop    %ebx
+    1223:	5e                   	pop    %esi
+    1224:	5f                   	pop    %edi
+    1225:	5d                   	pop    %ebp
+    1226:	c3                   	ret    
+    1227:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    122e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
-    1220:	c7 05 a4 19 00 00 a8 	movl   $0x19a8,0x19a4
-    1227:	19 00 00 
+    1230:	c7 05 a4 19 00 00 a8 	movl   $0x19a8,0x19a4
+    1237:	19 00 00 
     base.s.size = 0;
-    122a:	bf a8 19 00 00       	mov    $0x19a8,%edi
+    123a:	bf a8 19 00 00       	mov    $0x19a8,%edi
     base.s.ptr = freep = prevp = &base;
-    122f:	c7 05 a8 19 00 00 a8 	movl   $0x19a8,0x19a8
-    1236:	19 00 00 
+    123f:	c7 05 a8 19 00 00 a8 	movl   $0x19a8,0x19a8
+    1246:	19 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    1239:	89 f8                	mov    %edi,%eax
+    1249:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
-    123b:	c7 05 ac 19 00 00 00 	movl   $0x0,0x19ac
-    1242:	00 00 00 
+    124b:	c7 05 ac 19 00 00 00 	movl   $0x0,0x19ac
+    1252:	00 00 00 
     if(p->s.size >= nunits){
-    1245:	e9 36 ff ff ff       	jmp    1180 <malloc+0x30>
-    124a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    1255:	e9 36 ff ff ff       	jmp    1190 <malloc+0x30>
+    125a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
-    1250:	8b 0a                	mov    (%edx),%ecx
-    1252:	89 08                	mov    %ecx,(%eax)
-    1254:	eb b1                	jmp    1207 <malloc+0xb7>
+    1260:	8b 0a                	mov    (%edx),%ecx
+    1262:	89 08                	mov    %ecx,(%eax)
+    1264:	eb b1                	jmp    1217 <malloc+0xb7>
Binary files xv6-public-original/sh.o and xv6-public/sh.o differ
diff -ruN xv6-public-original/sh.sym xv6-public/sh.sym
--- xv6-public-original/sh.sym	2022-08-13 16:28:54.940143000 +0530
+++ xv6-public/sh.sym	2022-09-05 20:56:50.490960000 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00001258 .rodata
-0000135c .eh_frame
-00001918 .data
+00001268 .rodata
+0000136c .eh_frame
+00001928 .data
 00001940 .bss
 00000000 .comment
 00000000 .debug_aranges
@@ -12,16 +12,17 @@
 00000000 .debug_loc
 00000000 .debug_ranges
 00000000 sh.c
-00001940 buf.1123
+00001940 buf.1132
 00000000 ulib.c
 00000000 printf.c
-00000e40 printint
-00001348 digits.1085
+00000e50 printint
+00001358 digits.1094
 00000000 umalloc.c
 000019a4 freep
 000019a8 base
 00000b30 strcpy
-00000ef0 printf
+00000f00 printf
+00000e43 thread_exit
 00000d60 memmove
 00000ddb mknod
 00000370 execcmd
@@ -33,9 +34,9 @@
 00000610 peek
 00000690 parseredirs
 000004b0 gettoken
-00001150 malloc
+00001160 malloc
 00000e23 sleep
-00001920 whitespace
+00001930 whitespace
 00000340 fork1
 00000a00 nulterminate
 00000da3 pipe
@@ -49,7 +50,7 @@
 00000970 parseblock
 00000dcb exec
 00000d9b wait
-00001918 symbols
+00001928 symbols
 00000dab read
 00000740 parseexec
 00000de3 unlink
@@ -57,7 +58,7 @@
 00000d8b fork
 00000e1b sbrk
 00000e2b uptime
-00001926 __bss_start
+00001936 __bss_start
 00000bf0 memset
 00000000 main
 00000b60 strcmp
@@ -65,7 +66,7 @@
 000003f0 pipecmd
 000003a0 redircmd
 00000cd0 stat
-00001926 _edata
+00001936 _edata
 000019b0 _end
 00000df3 link
 00000d93 exit
@@ -73,7 +74,9 @@
 00000bb0 strlen
 00000dd3 open
 00000c10 strchr
+00000e33 thread_create
 00000dfb mkdir
 00000dbb close
+00000e3b thread_join
 00000430 listcmd
-000010c0 free
+000010d0 free
Binary files xv6-public-original/sleeplock.o and xv6-public/sleeplock.o differ
Binary files xv6-public-original/spinlock.o and xv6-public/spinlock.o differ
Binary files xv6-public-original/_stressfs and xv6-public/_stressfs differ
diff -ruN xv6-public-original/stressfs.asm xv6-public/stressfs.asm
--- xv6-public-original/stressfs.asm	2022-08-13 16:28:55.016119000 +0530
+++ xv6-public/stressfs.asm	2022-09-05 20:56:50.534960000 +0530
@@ -39,7 +39,7 @@
   char path[] = "stressfs0";
   28:	66 89 85 e6 fd ff ff 	mov    %ax,-0x21a(%ebp)
   printf(1, "stressfs starting\n");
-  2f:	68 68 08 00 00       	push   $0x868
+  2f:	68 78 08 00 00       	push   $0x878
   34:	6a 01                	push   $0x1
   char path[] = "stressfs0";
   36:	c7 85 de fd ff ff 73 	movl   $0x65727473,-0x222(%ebp)
@@ -47,7 +47,7 @@
   40:	c7 85 e2 fd ff ff 73 	movl   $0x73667373,-0x21e(%ebp)
   47:	73 66 73 
   printf(1, "stressfs starting\n");
-  4a:	e8 b1 04 00 00       	call   500 <printf>
+  4a:	e8 c1 04 00 00       	call   510 <printf>
   memset(data, 'a', sizeof(data));
   4f:	83 c4 0c             	add    $0xc,%esp
   52:	68 00 02 00 00       	push   $0x200
@@ -74,9 +74,9 @@
   fd = open(path, O_CREATE | O_RDWR);
   80:	bb 14 00 00 00       	mov    $0x14,%ebx
   printf(1, "write %d\n", i);
-  85:	68 7b 08 00 00       	push   $0x87b
+  85:	68 8b 08 00 00       	push   $0x88b
   8a:	6a 01                	push   $0x1
-  8c:	e8 6f 04 00 00       	call   500 <printf>
+  8c:	e8 7f 04 00 00       	call   510 <printf>
   path[8] += i;
   91:	89 f8                	mov    %edi,%eax
   fd = open(path, O_CREATE | O_RDWR);
@@ -112,9 +112,9 @@
   printf(1, "read\n");
   d8:	58                   	pop    %eax
   d9:	5a                   	pop    %edx
-  da:	68 85 08 00 00       	push   $0x885
+  da:	68 95 08 00 00       	push   $0x895
   df:	6a 01                	push   $0x1
-  e1:	e8 1a 04 00 00       	call   500 <printf>
+  e1:	e8 2a 04 00 00       	call   510 <printf>
 
   fd = open(path, O_RDONLY);
   e6:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
@@ -684,609 +684,623 @@
  43b:	b8 0e 00 00 00       	mov    $0xe,%eax
  440:	cd 40                	int    $0x40
  442:	c3                   	ret    
- 443:	66 90                	xchg   %ax,%ax
- 445:	66 90                	xchg   %ax,%ax
- 447:	66 90                	xchg   %ax,%ax
- 449:	66 90                	xchg   %ax,%ax
- 44b:	66 90                	xchg   %ax,%ax
- 44d:	66 90                	xchg   %ax,%ax
- 44f:	90                   	nop
 
-00000450 <printint>:
+00000443 <thread_create>:
+SYSCALL(thread_create)
+ 443:	b8 16 00 00 00       	mov    $0x16,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <thread_join>:
+SYSCALL(thread_join)
+ 44b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+
+00000453 <thread_exit>:
+SYSCALL(thread_exit)
+ 453:	b8 18 00 00 00       	mov    $0x18,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+ 45b:	66 90                	xchg   %ax,%ax
+ 45d:	66 90                	xchg   %ax,%ax
+ 45f:	90                   	nop
+
+00000460 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 450:	55                   	push   %ebp
- 451:	89 e5                	mov    %esp,%ebp
- 453:	57                   	push   %edi
- 454:	56                   	push   %esi
- 455:	53                   	push   %ebx
- 456:	83 ec 3c             	sub    $0x3c,%esp
- 459:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 460:	55                   	push   %ebp
+ 461:	89 e5                	mov    %esp,%ebp
+ 463:	57                   	push   %edi
+ 464:	56                   	push   %esi
+ 465:	53                   	push   %ebx
+ 466:	83 ec 3c             	sub    $0x3c,%esp
+ 469:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 45c:	89 d1                	mov    %edx,%ecx
+ 46c:	89 d1                	mov    %edx,%ecx
 {
- 45e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 46e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 461:	85 d2                	test   %edx,%edx
- 463:	0f 89 7f 00 00 00    	jns    4e8 <printint+0x98>
- 469:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 46d:	74 79                	je     4e8 <printint+0x98>
+ 471:	85 d2                	test   %edx,%edx
+ 473:	0f 89 7f 00 00 00    	jns    4f8 <printint+0x98>
+ 479:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 47d:	74 79                	je     4f8 <printint+0x98>
     neg = 1;
- 46f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 47f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 476:	f7 d9                	neg    %ecx
+ 486:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 478:	31 db                	xor    %ebx,%ebx
- 47a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 47d:	8d 76 00             	lea    0x0(%esi),%esi
+ 488:	31 db                	xor    %ebx,%ebx
+ 48a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 48d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 480:	89 c8                	mov    %ecx,%eax
- 482:	31 d2                	xor    %edx,%edx
- 484:	89 cf                	mov    %ecx,%edi
- 486:	f7 75 c4             	divl   -0x3c(%ebp)
- 489:	0f b6 92 94 08 00 00 	movzbl 0x894(%edx),%edx
- 490:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 493:	89 d8                	mov    %ebx,%eax
- 495:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 490:	89 c8                	mov    %ecx,%eax
+ 492:	31 d2                	xor    %edx,%edx
+ 494:	89 cf                	mov    %ecx,%edi
+ 496:	f7 75 c4             	divl   -0x3c(%ebp)
+ 499:	0f b6 92 a4 08 00 00 	movzbl 0x8a4(%edx),%edx
+ 4a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 4a3:	89 d8                	mov    %ebx,%eax
+ 4a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 498:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 4a8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 49b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 4ab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 49e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 4a1:	76 dd                	jbe    480 <printint+0x30>
+ 4ae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 4b1:	76 dd                	jbe    490 <printint+0x30>
   if(neg)
- 4a3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 4a6:	85 c9                	test   %ecx,%ecx
- 4a8:	74 0c                	je     4b6 <printint+0x66>
+ 4b3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 4b6:	85 c9                	test   %ecx,%ecx
+ 4b8:	74 0c                	je     4c6 <printint+0x66>
     buf[i++] = '-';
- 4aa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 4ba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 4af:	89 d8                	mov    %ebx,%eax
+ 4bf:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 4b1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 4c1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 4b6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 4b9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 4bd:	eb 07                	jmp    4c6 <printint+0x76>
- 4bf:	90                   	nop
- 4c0:	0f b6 13             	movzbl (%ebx),%edx
- 4c3:	83 eb 01             	sub    $0x1,%ebx
+ 4c6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 4c9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 4cd:	eb 07                	jmp    4d6 <printint+0x76>
+ 4cf:	90                   	nop
+ 4d0:	0f b6 13             	movzbl (%ebx),%edx
+ 4d3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 4c6:	83 ec 04             	sub    $0x4,%esp
- 4c9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 4cc:	6a 01                	push   $0x1
- 4ce:	56                   	push   %esi
- 4cf:	57                   	push   %edi
- 4d0:	e8 ee fe ff ff       	call   3c3 <write>
+ 4d6:	83 ec 04             	sub    $0x4,%esp
+ 4d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4dc:	6a 01                	push   $0x1
+ 4de:	56                   	push   %esi
+ 4df:	57                   	push   %edi
+ 4e0:	e8 de fe ff ff       	call   3c3 <write>
   while(--i >= 0)
- 4d5:	83 c4 10             	add    $0x10,%esp
- 4d8:	39 de                	cmp    %ebx,%esi
- 4da:	75 e4                	jne    4c0 <printint+0x70>
+ 4e5:	83 c4 10             	add    $0x10,%esp
+ 4e8:	39 de                	cmp    %ebx,%esi
+ 4ea:	75 e4                	jne    4d0 <printint+0x70>
     putc(fd, buf[i]);
 }
- 4dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4df:	5b                   	pop    %ebx
- 4e0:	5e                   	pop    %esi
- 4e1:	5f                   	pop    %edi
- 4e2:	5d                   	pop    %ebp
- 4e3:	c3                   	ret    
- 4e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4ef:	5b                   	pop    %ebx
+ 4f0:	5e                   	pop    %esi
+ 4f1:	5f                   	pop    %edi
+ 4f2:	5d                   	pop    %ebp
+ 4f3:	c3                   	ret    
+ 4f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 4e8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 4ef:	eb 87                	jmp    478 <printint+0x28>
- 4f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4ff:	90                   	nop
+ 4f8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4ff:	eb 87                	jmp    488 <printint+0x28>
+ 501:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 508:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 50f:	90                   	nop
 
-00000500 <printf>:
+00000510 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 500:	f3 0f 1e fb          	endbr32 
- 504:	55                   	push   %ebp
- 505:	89 e5                	mov    %esp,%ebp
- 507:	57                   	push   %edi
- 508:	56                   	push   %esi
- 509:	53                   	push   %ebx
- 50a:	83 ec 2c             	sub    $0x2c,%esp
+ 510:	f3 0f 1e fb          	endbr32 
+ 514:	55                   	push   %ebp
+ 515:	89 e5                	mov    %esp,%ebp
+ 517:	57                   	push   %edi
+ 518:	56                   	push   %esi
+ 519:	53                   	push   %ebx
+ 51a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 50d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 510:	0f b6 1e             	movzbl (%esi),%ebx
- 513:	84 db                	test   %bl,%bl
- 515:	0f 84 b4 00 00 00    	je     5cf <printf+0xcf>
+ 51d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 520:	0f b6 1e             	movzbl (%esi),%ebx
+ 523:	84 db                	test   %bl,%bl
+ 525:	0f 84 b4 00 00 00    	je     5df <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 51b:	8d 45 10             	lea    0x10(%ebp),%eax
- 51e:	83 c6 01             	add    $0x1,%esi
+ 52b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 52e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 521:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 531:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 524:	31 d2                	xor    %edx,%edx
+ 534:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 526:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 529:	eb 33                	jmp    55e <printf+0x5e>
- 52b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 52f:	90                   	nop
- 530:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 536:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 539:	eb 33                	jmp    56e <printf+0x5e>
+ 53b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 53f:	90                   	nop
+ 540:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 533:	ba 25 00 00 00       	mov    $0x25,%edx
+ 543:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 538:	83 f8 25             	cmp    $0x25,%eax
- 53b:	74 17                	je     554 <printf+0x54>
+ 548:	83 f8 25             	cmp    $0x25,%eax
+ 54b:	74 17                	je     564 <printf+0x54>
   write(fd, &c, 1);
- 53d:	83 ec 04             	sub    $0x4,%esp
- 540:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 543:	6a 01                	push   $0x1
- 545:	57                   	push   %edi
- 546:	ff 75 08             	pushl  0x8(%ebp)
- 549:	e8 75 fe ff ff       	call   3c3 <write>
- 54e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 54d:	83 ec 04             	sub    $0x4,%esp
+ 550:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 553:	6a 01                	push   $0x1
+ 555:	57                   	push   %edi
+ 556:	ff 75 08             	pushl  0x8(%ebp)
+ 559:	e8 65 fe ff ff       	call   3c3 <write>
+ 55e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 551:	83 c4 10             	add    $0x10,%esp
+ 561:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 554:	0f b6 1e             	movzbl (%esi),%ebx
- 557:	83 c6 01             	add    $0x1,%esi
- 55a:	84 db                	test   %bl,%bl
- 55c:	74 71                	je     5cf <printf+0xcf>
+ 564:	0f b6 1e             	movzbl (%esi),%ebx
+ 567:	83 c6 01             	add    $0x1,%esi
+ 56a:	84 db                	test   %bl,%bl
+ 56c:	74 71                	je     5df <printf+0xcf>
     c = fmt[i] & 0xff;
- 55e:	0f be cb             	movsbl %bl,%ecx
- 561:	0f b6 c3             	movzbl %bl,%eax
+ 56e:	0f be cb             	movsbl %bl,%ecx
+ 571:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 564:	85 d2                	test   %edx,%edx
- 566:	74 c8                	je     530 <printf+0x30>
+ 574:	85 d2                	test   %edx,%edx
+ 576:	74 c8                	je     540 <printf+0x30>
       }
     } else if(state == '%'){
- 568:	83 fa 25             	cmp    $0x25,%edx
- 56b:	75 e7                	jne    554 <printf+0x54>
+ 578:	83 fa 25             	cmp    $0x25,%edx
+ 57b:	75 e7                	jne    564 <printf+0x54>
       if(c == 'd'){
- 56d:	83 f8 64             	cmp    $0x64,%eax
- 570:	0f 84 9a 00 00 00    	je     610 <printf+0x110>
+ 57d:	83 f8 64             	cmp    $0x64,%eax
+ 580:	0f 84 9a 00 00 00    	je     620 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 576:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 57c:	83 f9 70             	cmp    $0x70,%ecx
- 57f:	74 5f                	je     5e0 <printf+0xe0>
+ 586:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 58c:	83 f9 70             	cmp    $0x70,%ecx
+ 58f:	74 5f                	je     5f0 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 581:	83 f8 73             	cmp    $0x73,%eax
- 584:	0f 84 d6 00 00 00    	je     660 <printf+0x160>
+ 591:	83 f8 73             	cmp    $0x73,%eax
+ 594:	0f 84 d6 00 00 00    	je     670 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 58a:	83 f8 63             	cmp    $0x63,%eax
- 58d:	0f 84 8d 00 00 00    	je     620 <printf+0x120>
+ 59a:	83 f8 63             	cmp    $0x63,%eax
+ 59d:	0f 84 8d 00 00 00    	je     630 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 593:	83 f8 25             	cmp    $0x25,%eax
- 596:	0f 84 b4 00 00 00    	je     650 <printf+0x150>
+ 5a3:	83 f8 25             	cmp    $0x25,%eax
+ 5a6:	0f 84 b4 00 00 00    	je     660 <printf+0x150>
   write(fd, &c, 1);
- 59c:	83 ec 04             	sub    $0x4,%esp
- 59f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 5a3:	6a 01                	push   $0x1
- 5a5:	57                   	push   %edi
- 5a6:	ff 75 08             	pushl  0x8(%ebp)
- 5a9:	e8 15 fe ff ff       	call   3c3 <write>
+ 5ac:	83 ec 04             	sub    $0x4,%esp
+ 5af:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5b3:	6a 01                	push   $0x1
+ 5b5:	57                   	push   %edi
+ 5b6:	ff 75 08             	pushl  0x8(%ebp)
+ 5b9:	e8 05 fe ff ff       	call   3c3 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 5ae:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 5be:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 5b1:	83 c4 0c             	add    $0xc,%esp
- 5b4:	6a 01                	push   $0x1
- 5b6:	83 c6 01             	add    $0x1,%esi
- 5b9:	57                   	push   %edi
- 5ba:	ff 75 08             	pushl  0x8(%ebp)
- 5bd:	e8 01 fe ff ff       	call   3c3 <write>
+ 5c1:	83 c4 0c             	add    $0xc,%esp
+ 5c4:	6a 01                	push   $0x1
+ 5c6:	83 c6 01             	add    $0x1,%esi
+ 5c9:	57                   	push   %edi
+ 5ca:	ff 75 08             	pushl  0x8(%ebp)
+ 5cd:	e8 f1 fd ff ff       	call   3c3 <write>
   for(i = 0; fmt[i]; i++){
- 5c2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 5d2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 5c6:	83 c4 10             	add    $0x10,%esp
+ 5d6:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 5c9:	31 d2                	xor    %edx,%edx
+ 5d9:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 5cb:	84 db                	test   %bl,%bl
- 5cd:	75 8f                	jne    55e <printf+0x5e>
+ 5db:	84 db                	test   %bl,%bl
+ 5dd:	75 8f                	jne    56e <printf+0x5e>
     }
   }
 }
- 5cf:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 5d2:	5b                   	pop    %ebx
- 5d3:	5e                   	pop    %esi
- 5d4:	5f                   	pop    %edi
- 5d5:	5d                   	pop    %ebp
- 5d6:	c3                   	ret    
- 5d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5de:	66 90                	xchg   %ax,%ax
+ 5df:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5e2:	5b                   	pop    %ebx
+ 5e3:	5e                   	pop    %esi
+ 5e4:	5f                   	pop    %edi
+ 5e5:	5d                   	pop    %ebp
+ 5e6:	c3                   	ret    
+ 5e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ee:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 5e0:	83 ec 0c             	sub    $0xc,%esp
- 5e3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 5e8:	6a 00                	push   $0x0
- 5ea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 5ed:	8b 45 08             	mov    0x8(%ebp),%eax
- 5f0:	8b 13                	mov    (%ebx),%edx
- 5f2:	e8 59 fe ff ff       	call   450 <printint>
+ 5f0:	83 ec 0c             	sub    $0xc,%esp
+ 5f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5f8:	6a 00                	push   $0x0
+ 5fa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 5fd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 600:	8b 13                	mov    (%ebx),%edx
+ 602:	e8 59 fe ff ff       	call   460 <printint>
         ap++;
- 5f7:	89 d8                	mov    %ebx,%eax
- 5f9:	83 c4 10             	add    $0x10,%esp
+ 607:	89 d8                	mov    %ebx,%eax
+ 609:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5fc:	31 d2                	xor    %edx,%edx
+ 60c:	31 d2                	xor    %edx,%edx
         ap++;
- 5fe:	83 c0 04             	add    $0x4,%eax
- 601:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 604:	e9 4b ff ff ff       	jmp    554 <printf+0x54>
- 609:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 60e:	83 c0 04             	add    $0x4,%eax
+ 611:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 614:	e9 4b ff ff ff       	jmp    564 <printf+0x54>
+ 619:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 610:	83 ec 0c             	sub    $0xc,%esp
- 613:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 618:	6a 01                	push   $0x1
- 61a:	eb ce                	jmp    5ea <printf+0xea>
- 61c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 620:	83 ec 0c             	sub    $0xc,%esp
+ 623:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 628:	6a 01                	push   $0x1
+ 62a:	eb ce                	jmp    5fa <printf+0xea>
+ 62c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 620:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 630:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 623:	83 ec 04             	sub    $0x4,%esp
+ 633:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 626:	8b 03                	mov    (%ebx),%eax
+ 636:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 628:	6a 01                	push   $0x1
+ 638:	6a 01                	push   $0x1
         ap++;
- 62a:	83 c3 04             	add    $0x4,%ebx
+ 63a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 62d:	57                   	push   %edi
- 62e:	ff 75 08             	pushl  0x8(%ebp)
+ 63d:	57                   	push   %edi
+ 63e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 631:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 641:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 634:	e8 8a fd ff ff       	call   3c3 <write>
+ 644:	e8 7a fd ff ff       	call   3c3 <write>
         ap++;
- 639:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 63c:	83 c4 10             	add    $0x10,%esp
+ 649:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 64c:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 63f:	31 d2                	xor    %edx,%edx
- 641:	e9 0e ff ff ff       	jmp    554 <printf+0x54>
- 646:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 64d:	8d 76 00             	lea    0x0(%esi),%esi
+ 64f:	31 d2                	xor    %edx,%edx
+ 651:	e9 0e ff ff ff       	jmp    564 <printf+0x54>
+ 656:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 65d:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 650:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 660:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 653:	83 ec 04             	sub    $0x4,%esp
- 656:	e9 59 ff ff ff       	jmp    5b4 <printf+0xb4>
- 65b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 65f:	90                   	nop
+ 663:	83 ec 04             	sub    $0x4,%esp
+ 666:	e9 59 ff ff ff       	jmp    5c4 <printf+0xb4>
+ 66b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 66f:	90                   	nop
         s = (char*)*ap;
- 660:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 663:	8b 18                	mov    (%eax),%ebx
+ 670:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 673:	8b 18                	mov    (%eax),%ebx
         ap++;
- 665:	83 c0 04             	add    $0x4,%eax
- 668:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 675:	83 c0 04             	add    $0x4,%eax
+ 678:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 66b:	85 db                	test   %ebx,%ebx
- 66d:	74 17                	je     686 <printf+0x186>
+ 67b:	85 db                	test   %ebx,%ebx
+ 67d:	74 17                	je     696 <printf+0x186>
         while(*s != 0){
- 66f:	0f b6 03             	movzbl (%ebx),%eax
+ 67f:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 672:	31 d2                	xor    %edx,%edx
+ 682:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 674:	84 c0                	test   %al,%al
- 676:	0f 84 d8 fe ff ff    	je     554 <printf+0x54>
- 67c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 67f:	89 de                	mov    %ebx,%esi
- 681:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 684:	eb 1a                	jmp    6a0 <printf+0x1a0>
+ 684:	84 c0                	test   %al,%al
+ 686:	0f 84 d8 fe ff ff    	je     564 <printf+0x54>
+ 68c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 68f:	89 de                	mov    %ebx,%esi
+ 691:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 694:	eb 1a                	jmp    6b0 <printf+0x1a0>
           s = "(null)";
- 686:	bb 8b 08 00 00       	mov    $0x88b,%ebx
+ 696:	bb 9b 08 00 00       	mov    $0x89b,%ebx
         while(*s != 0){
- 68b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 68e:	b8 28 00 00 00       	mov    $0x28,%eax
- 693:	89 de                	mov    %ebx,%esi
- 695:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 698:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 69f:	90                   	nop
+ 69b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 69e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6a3:	89 de                	mov    %ebx,%esi
+ 6a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6af:	90                   	nop
   write(fd, &c, 1);
- 6a0:	83 ec 04             	sub    $0x4,%esp
+ 6b0:	83 ec 04             	sub    $0x4,%esp
           s++;
- 6a3:	83 c6 01             	add    $0x1,%esi
- 6a6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 6b3:	83 c6 01             	add    $0x1,%esi
+ 6b6:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 6a9:	6a 01                	push   $0x1
- 6ab:	57                   	push   %edi
- 6ac:	53                   	push   %ebx
- 6ad:	e8 11 fd ff ff       	call   3c3 <write>
+ 6b9:	6a 01                	push   $0x1
+ 6bb:	57                   	push   %edi
+ 6bc:	53                   	push   %ebx
+ 6bd:	e8 01 fd ff ff       	call   3c3 <write>
         while(*s != 0){
- 6b2:	0f b6 06             	movzbl (%esi),%eax
- 6b5:	83 c4 10             	add    $0x10,%esp
- 6b8:	84 c0                	test   %al,%al
- 6ba:	75 e4                	jne    6a0 <printf+0x1a0>
- 6bc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 6c2:	0f b6 06             	movzbl (%esi),%eax
+ 6c5:	83 c4 10             	add    $0x10,%esp
+ 6c8:	84 c0                	test   %al,%al
+ 6ca:	75 e4                	jne    6b0 <printf+0x1a0>
+ 6cc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 6bf:	31 d2                	xor    %edx,%edx
- 6c1:	e9 8e fe ff ff       	jmp    554 <printf+0x54>
- 6c6:	66 90                	xchg   %ax,%ax
- 6c8:	66 90                	xchg   %ax,%ax
- 6ca:	66 90                	xchg   %ax,%ax
- 6cc:	66 90                	xchg   %ax,%ax
- 6ce:	66 90                	xchg   %ax,%ax
+ 6cf:	31 d2                	xor    %edx,%edx
+ 6d1:	e9 8e fe ff ff       	jmp    564 <printf+0x54>
+ 6d6:	66 90                	xchg   %ax,%ax
+ 6d8:	66 90                	xchg   %ax,%ax
+ 6da:	66 90                	xchg   %ax,%ax
+ 6dc:	66 90                	xchg   %ax,%ax
+ 6de:	66 90                	xchg   %ax,%ax
 
-000006d0 <free>:
+000006e0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 6d0:	f3 0f 1e fb          	endbr32 
- 6d4:	55                   	push   %ebp
+ 6e0:	f3 0f 1e fb          	endbr32 
+ 6e4:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6d5:	a1 4c 0b 00 00       	mov    0xb4c,%eax
+ 6e5:	a1 5c 0b 00 00       	mov    0xb5c,%eax
 {
- 6da:	89 e5                	mov    %esp,%ebp
- 6dc:	57                   	push   %edi
- 6dd:	56                   	push   %esi
- 6de:	53                   	push   %ebx
- 6df:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 6e2:	8b 10                	mov    (%eax),%edx
+ 6ea:	89 e5                	mov    %esp,%ebp
+ 6ec:	57                   	push   %edi
+ 6ed:	56                   	push   %esi
+ 6ee:	53                   	push   %ebx
+ 6ef:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6f2:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 6e4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 6f4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6e7:	39 c8                	cmp    %ecx,%eax
- 6e9:	73 15                	jae    700 <free+0x30>
- 6eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 6ef:	90                   	nop
- 6f0:	39 d1                	cmp    %edx,%ecx
- 6f2:	72 14                	jb     708 <free+0x38>
+ 6f7:	39 c8                	cmp    %ecx,%eax
+ 6f9:	73 15                	jae    710 <free+0x30>
+ 6fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6ff:	90                   	nop
+ 700:	39 d1                	cmp    %edx,%ecx
+ 702:	72 14                	jb     718 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6f4:	39 d0                	cmp    %edx,%eax
- 6f6:	73 10                	jae    708 <free+0x38>
+ 704:	39 d0                	cmp    %edx,%eax
+ 706:	73 10                	jae    718 <free+0x38>
 {
- 6f8:	89 d0                	mov    %edx,%eax
+ 708:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6fa:	8b 10                	mov    (%eax),%edx
- 6fc:	39 c8                	cmp    %ecx,%eax
- 6fe:	72 f0                	jb     6f0 <free+0x20>
+ 70a:	8b 10                	mov    (%eax),%edx
+ 70c:	39 c8                	cmp    %ecx,%eax
+ 70e:	72 f0                	jb     700 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 700:	39 d0                	cmp    %edx,%eax
- 702:	72 f4                	jb     6f8 <free+0x28>
- 704:	39 d1                	cmp    %edx,%ecx
- 706:	73 f0                	jae    6f8 <free+0x28>
+ 710:	39 d0                	cmp    %edx,%eax
+ 712:	72 f4                	jb     708 <free+0x28>
+ 714:	39 d1                	cmp    %edx,%ecx
+ 716:	73 f0                	jae    708 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 708:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 70b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 70e:	39 fa                	cmp    %edi,%edx
- 710:	74 1e                	je     730 <free+0x60>
+ 718:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 71b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 71e:	39 fa                	cmp    %edi,%edx
+ 720:	74 1e                	je     740 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 712:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 722:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 715:	8b 50 04             	mov    0x4(%eax),%edx
- 718:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 71b:	39 f1                	cmp    %esi,%ecx
- 71d:	74 28                	je     747 <free+0x77>
+ 725:	8b 50 04             	mov    0x4(%eax),%edx
+ 728:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 72b:	39 f1                	cmp    %esi,%ecx
+ 72d:	74 28                	je     757 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 71f:	89 08                	mov    %ecx,(%eax)
+ 72f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 721:	5b                   	pop    %ebx
+ 731:	5b                   	pop    %ebx
   freep = p;
- 722:	a3 4c 0b 00 00       	mov    %eax,0xb4c
+ 732:	a3 5c 0b 00 00       	mov    %eax,0xb5c
 }
- 727:	5e                   	pop    %esi
- 728:	5f                   	pop    %edi
- 729:	5d                   	pop    %ebp
- 72a:	c3                   	ret    
- 72b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 72f:	90                   	nop
+ 737:	5e                   	pop    %esi
+ 738:	5f                   	pop    %edi
+ 739:	5d                   	pop    %ebp
+ 73a:	c3                   	ret    
+ 73b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 73f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 730:	03 72 04             	add    0x4(%edx),%esi
- 733:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 740:	03 72 04             	add    0x4(%edx),%esi
+ 743:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 736:	8b 10                	mov    (%eax),%edx
- 738:	8b 12                	mov    (%edx),%edx
- 73a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 746:	8b 10                	mov    (%eax),%edx
+ 748:	8b 12                	mov    (%edx),%edx
+ 74a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 73d:	8b 50 04             	mov    0x4(%eax),%edx
- 740:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 743:	39 f1                	cmp    %esi,%ecx
- 745:	75 d8                	jne    71f <free+0x4f>
+ 74d:	8b 50 04             	mov    0x4(%eax),%edx
+ 750:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 753:	39 f1                	cmp    %esi,%ecx
+ 755:	75 d8                	jne    72f <free+0x4f>
     p->s.size += bp->s.size;
- 747:	03 53 fc             	add    -0x4(%ebx),%edx
+ 757:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 74a:	a3 4c 0b 00 00       	mov    %eax,0xb4c
+ 75a:	a3 5c 0b 00 00       	mov    %eax,0xb5c
     p->s.size += bp->s.size;
- 74f:	89 50 04             	mov    %edx,0x4(%eax)
+ 75f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 752:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 755:	89 10                	mov    %edx,(%eax)
+ 762:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 765:	89 10                	mov    %edx,(%eax)
 }
- 757:	5b                   	pop    %ebx
- 758:	5e                   	pop    %esi
- 759:	5f                   	pop    %edi
- 75a:	5d                   	pop    %ebp
- 75b:	c3                   	ret    
- 75c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 767:	5b                   	pop    %ebx
+ 768:	5e                   	pop    %esi
+ 769:	5f                   	pop    %edi
+ 76a:	5d                   	pop    %ebp
+ 76b:	c3                   	ret    
+ 76c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000760 <malloc>:
+00000770 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 760:	f3 0f 1e fb          	endbr32 
- 764:	55                   	push   %ebp
- 765:	89 e5                	mov    %esp,%ebp
- 767:	57                   	push   %edi
- 768:	56                   	push   %esi
- 769:	53                   	push   %ebx
- 76a:	83 ec 1c             	sub    $0x1c,%esp
+ 770:	f3 0f 1e fb          	endbr32 
+ 774:	55                   	push   %ebp
+ 775:	89 e5                	mov    %esp,%ebp
+ 777:	57                   	push   %edi
+ 778:	56                   	push   %esi
+ 779:	53                   	push   %ebx
+ 77a:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 76d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 77d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 770:	8b 3d 4c 0b 00 00    	mov    0xb4c,%edi
+ 780:	8b 3d 5c 0b 00 00    	mov    0xb5c,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 776:	8d 70 07             	lea    0x7(%eax),%esi
- 779:	c1 ee 03             	shr    $0x3,%esi
- 77c:	83 c6 01             	add    $0x1,%esi
+ 786:	8d 70 07             	lea    0x7(%eax),%esi
+ 789:	c1 ee 03             	shr    $0x3,%esi
+ 78c:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 77f:	85 ff                	test   %edi,%edi
- 781:	0f 84 a9 00 00 00    	je     830 <malloc+0xd0>
+ 78f:	85 ff                	test   %edi,%edi
+ 791:	0f 84 a9 00 00 00    	je     840 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 787:	8b 07                	mov    (%edi),%eax
+ 797:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 789:	8b 48 04             	mov    0x4(%eax),%ecx
- 78c:	39 f1                	cmp    %esi,%ecx
- 78e:	73 6d                	jae    7fd <malloc+0x9d>
- 790:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 796:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 79b:	0f 43 de             	cmovae %esi,%ebx
+ 799:	8b 48 04             	mov    0x4(%eax),%ecx
+ 79c:	39 f1                	cmp    %esi,%ecx
+ 79e:	73 6d                	jae    80d <malloc+0x9d>
+ 7a0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 7a6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 7ab:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 79e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 7a5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 7a8:	eb 17                	jmp    7c1 <malloc+0x61>
- 7aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7ae:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 7b5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 7b8:	eb 17                	jmp    7d1 <malloc+0x61>
+ 7ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7b0:	8b 10                	mov    (%eax),%edx
+ 7c0:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 7b2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 7b5:	39 f1                	cmp    %esi,%ecx
- 7b7:	73 4f                	jae    808 <malloc+0xa8>
- 7b9:	8b 3d 4c 0b 00 00    	mov    0xb4c,%edi
- 7bf:	89 d0                	mov    %edx,%eax
+ 7c2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 7c5:	39 f1                	cmp    %esi,%ecx
+ 7c7:	73 4f                	jae    818 <malloc+0xa8>
+ 7c9:	8b 3d 5c 0b 00 00    	mov    0xb5c,%edi
+ 7cf:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 7c1:	39 c7                	cmp    %eax,%edi
- 7c3:	75 eb                	jne    7b0 <malloc+0x50>
+ 7d1:	39 c7                	cmp    %eax,%edi
+ 7d3:	75 eb                	jne    7c0 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 7c5:	83 ec 0c             	sub    $0xc,%esp
- 7c8:	ff 75 e4             	pushl  -0x1c(%ebp)
- 7cb:	e8 5b fc ff ff       	call   42b <sbrk>
+ 7d5:	83 ec 0c             	sub    $0xc,%esp
+ 7d8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 7db:	e8 4b fc ff ff       	call   42b <sbrk>
   if(p == (char*)-1)
- 7d0:	83 c4 10             	add    $0x10,%esp
- 7d3:	83 f8 ff             	cmp    $0xffffffff,%eax
- 7d6:	74 1b                	je     7f3 <malloc+0x93>
+ 7e0:	83 c4 10             	add    $0x10,%esp
+ 7e3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7e6:	74 1b                	je     803 <malloc+0x93>
   hp->s.size = nu;
- 7d8:	89 58 04             	mov    %ebx,0x4(%eax)
+ 7e8:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 7db:	83 ec 0c             	sub    $0xc,%esp
- 7de:	83 c0 08             	add    $0x8,%eax
- 7e1:	50                   	push   %eax
- 7e2:	e8 e9 fe ff ff       	call   6d0 <free>
+ 7eb:	83 ec 0c             	sub    $0xc,%esp
+ 7ee:	83 c0 08             	add    $0x8,%eax
+ 7f1:	50                   	push   %eax
+ 7f2:	e8 e9 fe ff ff       	call   6e0 <free>
   return freep;
- 7e7:	a1 4c 0b 00 00       	mov    0xb4c,%eax
+ 7f7:	a1 5c 0b 00 00       	mov    0xb5c,%eax
       if((p = morecore(nunits)) == 0)
- 7ec:	83 c4 10             	add    $0x10,%esp
- 7ef:	85 c0                	test   %eax,%eax
- 7f1:	75 bd                	jne    7b0 <malloc+0x50>
+ 7fc:	83 c4 10             	add    $0x10,%esp
+ 7ff:	85 c0                	test   %eax,%eax
+ 801:	75 bd                	jne    7c0 <malloc+0x50>
         return 0;
   }
 }
- 7f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 803:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 7f6:	31 c0                	xor    %eax,%eax
+ 806:	31 c0                	xor    %eax,%eax
 }
- 7f8:	5b                   	pop    %ebx
- 7f9:	5e                   	pop    %esi
- 7fa:	5f                   	pop    %edi
- 7fb:	5d                   	pop    %ebp
- 7fc:	c3                   	ret    
+ 808:	5b                   	pop    %ebx
+ 809:	5e                   	pop    %esi
+ 80a:	5f                   	pop    %edi
+ 80b:	5d                   	pop    %ebp
+ 80c:	c3                   	ret    
     if(p->s.size >= nunits){
- 7fd:	89 c2                	mov    %eax,%edx
- 7ff:	89 f8                	mov    %edi,%eax
- 801:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 80d:	89 c2                	mov    %eax,%edx
+ 80f:	89 f8                	mov    %edi,%eax
+ 811:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 808:	39 ce                	cmp    %ecx,%esi
- 80a:	74 54                	je     860 <malloc+0x100>
+ 818:	39 ce                	cmp    %ecx,%esi
+ 81a:	74 54                	je     870 <malloc+0x100>
         p->s.size -= nunits;
- 80c:	29 f1                	sub    %esi,%ecx
- 80e:	89 4a 04             	mov    %ecx,0x4(%edx)
+ 81c:	29 f1                	sub    %esi,%ecx
+ 81e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- 811:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ 821:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- 814:	89 72 04             	mov    %esi,0x4(%edx)
+ 824:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 817:	a3 4c 0b 00 00       	mov    %eax,0xb4c
+ 827:	a3 5c 0b 00 00       	mov    %eax,0xb5c
 }
- 81c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 82c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 81f:	8d 42 08             	lea    0x8(%edx),%eax
+ 82f:	8d 42 08             	lea    0x8(%edx),%eax
 }
- 822:	5b                   	pop    %ebx
- 823:	5e                   	pop    %esi
- 824:	5f                   	pop    %edi
- 825:	5d                   	pop    %ebp
- 826:	c3                   	ret    
- 827:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 82e:	66 90                	xchg   %ax,%ax
+ 832:	5b                   	pop    %ebx
+ 833:	5e                   	pop    %esi
+ 834:	5f                   	pop    %edi
+ 835:	5d                   	pop    %ebp
+ 836:	c3                   	ret    
+ 837:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 83e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 830:	c7 05 4c 0b 00 00 50 	movl   $0xb50,0xb4c
- 837:	0b 00 00 
+ 840:	c7 05 5c 0b 00 00 60 	movl   $0xb60,0xb5c
+ 847:	0b 00 00 
     base.s.size = 0;
- 83a:	bf 50 0b 00 00       	mov    $0xb50,%edi
+ 84a:	bf 60 0b 00 00       	mov    $0xb60,%edi
     base.s.ptr = freep = prevp = &base;
- 83f:	c7 05 50 0b 00 00 50 	movl   $0xb50,0xb50
- 846:	0b 00 00 
+ 84f:	c7 05 60 0b 00 00 60 	movl   $0xb60,0xb60
+ 856:	0b 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 849:	89 f8                	mov    %edi,%eax
+ 859:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 84b:	c7 05 54 0b 00 00 00 	movl   $0x0,0xb54
- 852:	00 00 00 
+ 85b:	c7 05 64 0b 00 00 00 	movl   $0x0,0xb64
+ 862:	00 00 00 
     if(p->s.size >= nunits){
- 855:	e9 36 ff ff ff       	jmp    790 <malloc+0x30>
- 85a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 865:	e9 36 ff ff ff       	jmp    7a0 <malloc+0x30>
+ 86a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 860:	8b 0a                	mov    (%edx),%ecx
- 862:	89 08                	mov    %ecx,(%eax)
- 864:	eb b1                	jmp    817 <malloc+0xb7>
+ 870:	8b 0a                	mov    (%edx),%ecx
+ 872:	89 08                	mov    %ecx,(%eax)
+ 874:	eb b1                	jmp    827 <malloc+0xb7>
Binary files xv6-public-original/stressfs.o and xv6-public/stressfs.o differ
diff -ruN xv6-public-original/stressfs.sym xv6-public/stressfs.sym
--- xv6-public-original/stressfs.sym	2022-08-13 16:28:55.024116000 +0530
+++ xv6-public/stressfs.sym	2022-09-05 20:56:50.538960000 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000868 .rodata
-000008a8 .eh_frame
-00000b4c .bss
+00000878 .rodata
+000008b8 .eh_frame
+00000b5c .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,18 +13,19 @@
 00000000 stressfs.c
 00000000 ulib.c
 00000000 printf.c
-00000450 printint
-00000894 digits.1085
+00000460 printint
+000008a4 digits.1094
 00000000 umalloc.c
-00000b4c freep
-00000b50 base
+00000b5c freep
+00000b60 base
 00000140 strcpy
-00000500 printf
+00000510 printf
+00000453 thread_exit
 00000370 memmove
 000003eb mknod
 00000260 gets
 00000423 getpid
-00000760 malloc
+00000770 malloc
 00000433 sleep
 000003b3 pipe
 000003c3 write
@@ -38,20 +39,22 @@
 0000039b fork
 0000042b sbrk
 0000043b uptime
-00000b4c __bss_start
+00000b5c __bss_start
 00000200 memset
 00000000 main
 00000170 strcmp
 0000041b dup
 000002e0 stat
-00000b4c _edata
-00000b58 _end
+00000b5c _edata
+00000b68 _end
 00000403 link
 000003a3 exit
 00000330 atoi
 000001c0 strlen
 000003e3 open
 00000220 strchr
+00000443 thread_create
 0000040b mkdir
 000003cb close
-000006d0 free
+0000044b thread_join
+000006e0 free
Binary files xv6-public-original/string.o and xv6-public/string.o differ
Binary files xv6-public-original/swtch.o and xv6-public/swtch.o differ
diff -ruN xv6-public-original/syscall.c xv6-public/syscall.c
--- xv6-public-original/syscall.c	2022-08-13 16:27:21.635275000 +0530
+++ xv6-public/syscall.c	2022-08-29 21:10:24.000000000 +0530
@@ -103,6 +103,9 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_thread_create(void);
+extern int sys_thread_join(void);
+extern int sys_thread_exit(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +129,9 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create] sys_thread_create,
+[SYS_thread_join] sys_thread_join,
+[SYS_thread_exit] sys_thread_exit,
 };
 
 void
diff -ruN xv6-public-original/syscall.h xv6-public/syscall.h
--- xv6-public-original/syscall.h	2022-08-13 16:27:50.499482000 +0530
+++ xv6-public/syscall.h	2022-08-29 21:07:10.000000000 +0530
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create 22
+#define SYS_thread_join 23
+#define SYS_thread_exit 24
Binary files xv6-public-original/syscall.o and xv6-public/syscall.o differ
Binary files xv6-public-original/sysfile.o and xv6-public/sysfile.o differ
diff -ruN xv6-public-original/sysproc.c xv6-public/sysproc.c
--- xv6-public-original/sysproc.c	2022-08-13 16:28:07.631304000 +0530
+++ xv6-public/sysproc.c	2022-08-30 01:01:30.000000000 +0530
@@ -6,7 +6,11 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "spinlock.h"
 
+int thread_create(void);
+int thread_join(void);
+int thread_exit(void);
 int
 sys_fork(void)
 {
@@ -90,4 +94,20 @@
   return xticks;
 }
 
+// newly created threads
+int
+sys_thread_create(void)
+{
+	return thread_create();
+}
 
+int
+sys_thread_join(void)
+{
+	return thread_join();
+}
+int
+sys_thread_exit(void)
+{
+	return thread_exit();
+}
diff -ruN xv6-public-original/sysproc.d xv6-public/sysproc.d
--- xv6-public-original/sysproc.d	2022-08-13 16:28:45.055178000 +0530
+++ xv6-public/sysproc.d	2022-09-05 20:56:54.106960000 +0530
@@ -1,2 +1,2 @@
 sysproc.o: sysproc.c /usr/include/stdc-predef.h types.h x86.h defs.h \
- date.h param.h memlayout.h mmu.h proc.h
+ date.h param.h memlayout.h mmu.h proc.h spinlock.h
Binary files xv6-public-original/sysproc.o and xv6-public/sysproc.o differ
Binary files xv6-public-original/_thread and xv6-public/_thread differ
diff -ruN xv6-public-original/thread.asm xv6-public/thread.asm
--- xv6-public-original/thread.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/thread.asm	2022-09-05 20:56:51.382960000 +0530
@@ -0,0 +1,1456 @@
+
+_thread:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+	thread_exit();
+}
+
+
+
+int main(int argc, char *argv[]) {
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	53                   	push   %ebx
+  14:	51                   	push   %ecx
+  15:	83 ec 64             	sub    $0x64,%esp
+	thread_spin_init(&lock);
+	thread_mutex_init(&mLock);
+	struct balance b1 = {"b1", 3200};
+  18:	c7 45 a0 62 31 00 00 	movl   $0x3162,-0x60(%ebp)
+	struct balance b2 = {"b2", 2800};
+	void *s1, *s2;
+	int t1, t2, r1, r2;
+	s1 = malloc(4096);
+  1f:	68 00 10 00 00       	push   $0x1000
+	lk->locked = 0;
+  24:	c7 05 20 0e 00 00 00 	movl   $0x0,0xe20
+  2b:	00 00 00 
+	lk->mutexLocked = 0;
+  2e:	c7 05 24 0e 00 00 00 	movl   $0x0,0xe24
+  35:	00 00 00 
+	struct balance b1 = {"b1", 3200};
+  38:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
+  3f:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
+  46:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
+  4d:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
+  54:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
+  5b:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
+  62:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+  69:	c7 45 c0 80 0c 00 00 	movl   $0xc80,-0x40(%ebp)
+	struct balance b2 = {"b2", 2800};
+  70:	c7 45 c4 62 32 00 00 	movl   $0x3262,-0x3c(%ebp)
+  77:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
+  7e:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
+  85:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
+  8c:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+  93:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
+  9a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  a1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+  a8:	c7 45 e4 f0 0a 00 00 	movl   $0xaf0,-0x1c(%ebp)
+	s1 = malloc(4096);
+  af:	e8 2c 08 00 00       	call   8e0 <malloc>
+	s2 = malloc(4096);
+  b4:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
+	s1 = malloc(4096);
+  bb:	89 c3                	mov    %eax,%ebx
+	s2 = malloc(4096);
+  bd:	e8 1e 08 00 00       	call   8e0 <malloc>
+	t1 = thread_create(do_work, (void*)&b1, s1);
+  c2:	83 c4 0c             	add    $0xc,%esp
+	s2 = malloc(4096);
+  c5:	89 c6                	mov    %eax,%esi
+	t1 = thread_create(do_work, (void*)&b1, s1);
+  c7:	8d 45 a0             	lea    -0x60(%ebp),%eax
+  ca:	53                   	push   %ebx
+  cb:	50                   	push   %eax
+  cc:	68 20 01 00 00       	push   $0x120
+  d1:	e8 dd 04 00 00       	call   5b3 <thread_create>
+	t2 = thread_create(do_work, (void*)&b2, s2);
+  d6:	83 c4 0c             	add    $0xc,%esp
+	t1 = thread_create(do_work, (void*)&b1, s1);
+  d9:	89 c3                	mov    %eax,%ebx
+	t2 = thread_create(do_work, (void*)&b2, s2);
+  db:	8d 45 c4             	lea    -0x3c(%ebp),%eax
+  de:	56                   	push   %esi
+  df:	50                   	push   %eax
+  e0:	68 20 01 00 00       	push   $0x120
+  e5:	e8 c9 04 00 00       	call   5b3 <thread_create>
+  ea:	89 c7                	mov    %eax,%edi
+	r1 = thread_join();
+  ec:	e8 ca 04 00 00       	call   5bb <thread_join>
+  f1:	89 c6                	mov    %eax,%esi
+	r2 = thread_join();
+  f3:	e8 c3 04 00 00       	call   5bb <thread_join>
+	
+	printf(1, "Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
+  f8:	8b 15 10 0e 00 00    	mov    0xe10,%edx
+  fe:	83 c4 0c             	add    $0xc,%esp
+ 101:	52                   	push   %edx
+ 102:	50                   	push   %eax
+ 103:	57                   	push   %edi
+ 104:	56                   	push   %esi
+ 105:	53                   	push   %ebx
+ 106:	68 0c 0a 00 00       	push   $0xa0c
+ 10b:	6a 01                	push   $0x1
+ 10d:	e8 6e 05 00 00       	call   680 <printf>
+	t1, r1, t2, r2, total_balance);
+	exit(); 
+ 112:	83 c4 20             	add    $0x20,%esp
+ 115:	e8 f9 03 00 00       	call   513 <exit>
+ 11a:	66 90                	xchg   %ax,%ax
+ 11c:	66 90                	xchg   %ax,%ax
+ 11e:	66 90                	xchg   %ax,%ax
+
+00000120 <do_work>:
+{
+ 120:	f3 0f 1e fb          	endbr32 
+ 124:	55                   	push   %ebp
+ 125:	89 e5                	mov    %esp,%ebp
+ 127:	56                   	push   %esi
+ 128:	53                   	push   %ebx
+ 129:	8b 75 08             	mov    0x8(%ebp),%esi
+	printf(1, "Starting do_work: s:%s\n", b->name);
+ 12c:	83 ec 04             	sub    $0x4,%esp
+ 12f:	56                   	push   %esi
+ 130:	68 e8 09 00 00       	push   $0x9e8
+ 135:	6a 01                	push   $0x1
+ 137:	e8 44 05 00 00       	call   680 <printf>
+	for (i = 0; i < b->amount; i++)
+ 13c:	8b 5e 20             	mov    0x20(%esi),%ebx
+ 13f:	83 c4 10             	add    $0x10,%esp
+ 142:	85 db                	test   %ebx,%ebx
+ 144:	7e 2f                	jle    175 <do_work+0x55>
+ 146:	31 c9                	xor    %ecx,%ecx
+ 148:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 14f:	90                   	nop
+		old = total_balance;
+ 150:	8b 15 10 0e 00 00    	mov    0xe10,%edx
+ 156:	b8 a0 86 01 00       	mov    $0x186a0,%eax
+ 15b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 15f:	90                   	nop
+		__asm volatile( "nop" ::: );
+ 160:	90                   	nop
+	for (i = 0; i < d; i++)
+ 161:	83 e8 01             	sub    $0x1,%eax
+ 164:	75 fa                	jne    160 <do_work+0x40>
+		total_balance = old + 1;
+ 166:	8d 42 01             	lea    0x1(%edx),%eax
+	for (i = 0; i < b->amount; i++)
+ 169:	83 c1 01             	add    $0x1,%ecx
+		total_balance = old + 1;
+ 16c:	a3 10 0e 00 00       	mov    %eax,0xe10
+	for (i = 0; i < b->amount; i++)
+ 171:	39 d9                	cmp    %ebx,%ecx
+ 173:	75 db                	jne    150 <do_work+0x30>
+	printf(1, "Done s:%x\n", b->name);
+ 175:	83 ec 04             	sub    $0x4,%esp
+ 178:	56                   	push   %esi
+ 179:	68 00 0a 00 00       	push   $0xa00
+ 17e:	6a 01                	push   $0x1
+ 180:	e8 fb 04 00 00       	call   680 <printf>
+	thread_exit();
+ 185:	83 c4 10             	add    $0x10,%esp
+}
+ 188:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 18b:	5b                   	pop    %ebx
+ 18c:	5e                   	pop    %esi
+ 18d:	5d                   	pop    %ebp
+	thread_exit();
+ 18e:	e9 30 04 00 00       	jmp    5c3 <thread_exit>
+ 193:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 19a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000001a0 <thread_spin_init>:
+void thread_spin_init(struct thread_spinlock *lk){
+ 1a0:	f3 0f 1e fb          	endbr32 
+ 1a4:	55                   	push   %ebp
+ 1a5:	89 e5                	mov    %esp,%ebp
+	lk->locked = 0;
+ 1a7:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1aa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+};
+ 1b0:	5d                   	pop    %ebp
+ 1b1:	c3                   	ret    
+ 1b2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000001c0 <thread_spin_lock>:
+void thread_spin_lock(struct thread_spinlock *lk){
+ 1c0:	f3 0f 1e fb          	endbr32 
+ 1c4:	55                   	push   %ebp
+xchg(volatile uint *addr, uint newval)
+{
+  uint result;
+
+  // The + in "+m" denotes a read-modify-write operand.
+  asm volatile("lock; xchgl %0, %1" :
+ 1c5:	b9 01 00 00 00       	mov    $0x1,%ecx
+ 1ca:	89 e5                	mov    %esp,%ebp
+ 1cc:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1cf:	90                   	nop
+ 1d0:	89 c8                	mov    %ecx,%eax
+ 1d2:	f0 87 02             	lock xchg %eax,(%edx)
+	while(xchg(&lk->locked, 1) != 0)
+ 1d5:	85 c0                	test   %eax,%eax
+ 1d7:	75 f7                	jne    1d0 <thread_spin_lock+0x10>
+	__sync_synchronize();
+ 1d9:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+};
+ 1de:	5d                   	pop    %ebp
+ 1df:	c3                   	ret    
+
+000001e0 <thread_spin_unlock>:
+void thread_spin_unlock(struct thread_spinlock *lk){
+ 1e0:	f3 0f 1e fb          	endbr32 
+ 1e4:	55                   	push   %ebp
+ 1e5:	89 e5                	mov    %esp,%ebp
+ 1e7:	8b 45 08             	mov    0x8(%ebp),%eax
+	__sync_synchronize();
+ 1ea:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+	asm volatile("movl $0, %0" : "+m" (lk->locked) : );
+ 1ef:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+};
+ 1f5:	5d                   	pop    %ebp
+ 1f6:	c3                   	ret    
+ 1f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1fe:	66 90                	xchg   %ax,%ax
+
+00000200 <thread_mutex_init>:
+void thread_mutex_init(struct thread_mutex *lk){
+ 200:	f3 0f 1e fb          	endbr32 
+ 204:	55                   	push   %ebp
+ 205:	89 e5                	mov    %esp,%ebp
+	lk->mutexLocked = 0;
+ 207:	8b 45 08             	mov    0x8(%ebp),%eax
+ 20a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+};
+ 210:	5d                   	pop    %ebp
+ 211:	c3                   	ret    
+ 212:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 219:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000220 <thread_mutex_lock>:
+void thread_mutex_lock(struct thread_mutex *lk){
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	b8 01 00 00 00       	mov    $0x1,%eax
+ 22a:	89 e5                	mov    %esp,%ebp
+ 22c:	56                   	push   %esi
+ 22d:	53                   	push   %ebx
+ 22e:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 231:	f0 87 03             	lock xchg %eax,(%ebx)
+	while(xchg(&lk->mutexLocked, 1) != 0)
+ 234:	85 c0                	test   %eax,%eax
+ 236:	74 1e                	je     256 <thread_mutex_lock+0x36>
+ 238:	be 01 00 00 00       	mov    $0x1,%esi
+ 23d:	8d 76 00             	lea    0x0(%esi),%esi
+	sleep(1);
+ 240:	83 ec 0c             	sub    $0xc,%esp
+ 243:	6a 01                	push   $0x1
+ 245:	e8 59 03 00 00       	call   5a3 <sleep>
+ 24a:	89 f0                	mov    %esi,%eax
+ 24c:	f0 87 03             	lock xchg %eax,(%ebx)
+	while(xchg(&lk->mutexLocked, 1) != 0)
+ 24f:	83 c4 10             	add    $0x10,%esp
+ 252:	85 c0                	test   %eax,%eax
+ 254:	75 ea                	jne    240 <thread_mutex_lock+0x20>
+	__sync_synchronize();
+ 256:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+};
+ 25b:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 25e:	5b                   	pop    %ebx
+ 25f:	5e                   	pop    %esi
+ 260:	5d                   	pop    %ebp
+ 261:	c3                   	ret    
+ 262:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 269:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000270 <thread_mutex_unlock>:
+void thread_mutex_unlock(struct thread_mutex *lk){
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	8b 45 08             	mov    0x8(%ebp),%eax
+	__sync_synchronize();
+ 27a:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+	asm volatile("movl $0, %0" : "+m" (lk->mutexLocked) : );
+ 27f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+};
+ 285:	5d                   	pop    %ebp
+ 286:	c3                   	ret    
+ 287:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 28e:	66 90                	xchg   %ax,%ax
+
+00000290 <delay>:
+{
+ 290:	f3 0f 1e fb          	endbr32 
+ 294:	55                   	push   %ebp
+ 295:	89 e5                	mov    %esp,%ebp
+ 297:	8b 55 08             	mov    0x8(%ebp),%edx
+	for (i = 0; i < d; i++)
+ 29a:	85 d2                	test   %edx,%edx
+ 29c:	74 0a                	je     2a8 <delay+0x18>
+ 29e:	31 c0                	xor    %eax,%eax
+		__asm volatile( "nop" ::: );
+ 2a0:	90                   	nop
+	for (i = 0; i < d; i++)
+ 2a1:	83 c0 01             	add    $0x1,%eax
+ 2a4:	39 c2                	cmp    %eax,%edx
+ 2a6:	75 f8                	jne    2a0 <delay+0x10>
+}
+ 2a8:	89 d0                	mov    %edx,%eax
+ 2aa:	5d                   	pop    %ebp
+ 2ab:	c3                   	ret    
+ 2ac:	66 90                	xchg   %ax,%ax
+ 2ae:	66 90                	xchg   %ax,%ax
+
+000002b0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 2b5:	31 c0                	xor    %eax,%eax
+{
+ 2b7:	89 e5                	mov    %esp,%ebp
+ 2b9:	53                   	push   %ebx
+ 2ba:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 2bd:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 2c0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 2c4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 2c7:	83 c0 01             	add    $0x1,%eax
+ 2ca:	84 d2                	test   %dl,%dl
+ 2cc:	75 f2                	jne    2c0 <strcpy+0x10>
+    ;
+  return os;
+}
+ 2ce:	89 c8                	mov    %ecx,%eax
+ 2d0:	5b                   	pop    %ebx
+ 2d1:	5d                   	pop    %ebp
+ 2d2:	c3                   	ret    
+ 2d3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000002e0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 2e0:	f3 0f 1e fb          	endbr32 
+ 2e4:	55                   	push   %ebp
+ 2e5:	89 e5                	mov    %esp,%ebp
+ 2e7:	53                   	push   %ebx
+ 2e8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 2eb:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 2ee:	0f b6 01             	movzbl (%ecx),%eax
+ 2f1:	0f b6 1a             	movzbl (%edx),%ebx
+ 2f4:	84 c0                	test   %al,%al
+ 2f6:	75 19                	jne    311 <strcmp+0x31>
+ 2f8:	eb 26                	jmp    320 <strcmp+0x40>
+ 2fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 300:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 304:	83 c1 01             	add    $0x1,%ecx
+ 307:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 30a:	0f b6 1a             	movzbl (%edx),%ebx
+ 30d:	84 c0                	test   %al,%al
+ 30f:	74 0f                	je     320 <strcmp+0x40>
+ 311:	38 d8                	cmp    %bl,%al
+ 313:	74 eb                	je     300 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 315:	29 d8                	sub    %ebx,%eax
+}
+ 317:	5b                   	pop    %ebx
+ 318:	5d                   	pop    %ebp
+ 319:	c3                   	ret    
+ 31a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 320:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 322:	29 d8                	sub    %ebx,%eax
+}
+ 324:	5b                   	pop    %ebx
+ 325:	5d                   	pop    %ebp
+ 326:	c3                   	ret    
+ 327:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 32e:	66 90                	xchg   %ax,%ax
+
+00000330 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 330:	f3 0f 1e fb          	endbr32 
+ 334:	55                   	push   %ebp
+ 335:	89 e5                	mov    %esp,%ebp
+ 337:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 33a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 33d:	74 21                	je     360 <strlen+0x30>
+ 33f:	31 c0                	xor    %eax,%eax
+ 341:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 348:	83 c0 01             	add    $0x1,%eax
+ 34b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 34f:	89 c1                	mov    %eax,%ecx
+ 351:	75 f5                	jne    348 <strlen+0x18>
+    ;
+  return n;
+}
+ 353:	89 c8                	mov    %ecx,%eax
+ 355:	5d                   	pop    %ebp
+ 356:	c3                   	ret    
+ 357:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 35e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 360:	31 c9                	xor    %ecx,%ecx
+}
+ 362:	5d                   	pop    %ebp
+ 363:	89 c8                	mov    %ecx,%eax
+ 365:	c3                   	ret    
+ 366:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 36d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000370 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 370:	f3 0f 1e fb          	endbr32 
+ 374:	55                   	push   %ebp
+ 375:	89 e5                	mov    %esp,%ebp
+ 377:	57                   	push   %edi
+ 378:	8b 55 08             	mov    0x8(%ebp),%edx
+  asm volatile("cld; rep stosb" :
+ 37b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 37e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 381:	89 d7                	mov    %edx,%edi
+ 383:	fc                   	cld    
+ 384:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 386:	89 d0                	mov    %edx,%eax
+ 388:	5f                   	pop    %edi
+ 389:	5d                   	pop    %ebp
+ 38a:	c3                   	ret    
+ 38b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 38f:	90                   	nop
+
+00000390 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 390:	f3 0f 1e fb          	endbr32 
+ 394:	55                   	push   %ebp
+ 395:	89 e5                	mov    %esp,%ebp
+ 397:	8b 45 08             	mov    0x8(%ebp),%eax
+ 39a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 39e:	0f b6 10             	movzbl (%eax),%edx
+ 3a1:	84 d2                	test   %dl,%dl
+ 3a3:	75 16                	jne    3bb <strchr+0x2b>
+ 3a5:	eb 21                	jmp    3c8 <strchr+0x38>
+ 3a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ae:	66 90                	xchg   %ax,%ax
+ 3b0:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 3b4:	83 c0 01             	add    $0x1,%eax
+ 3b7:	84 d2                	test   %dl,%dl
+ 3b9:	74 0d                	je     3c8 <strchr+0x38>
+    if(*s == c)
+ 3bb:	38 d1                	cmp    %dl,%cl
+ 3bd:	75 f1                	jne    3b0 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 3bf:	5d                   	pop    %ebp
+ 3c0:	c3                   	ret    
+ 3c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 3c8:	31 c0                	xor    %eax,%eax
+}
+ 3ca:	5d                   	pop    %ebp
+ 3cb:	c3                   	ret    
+ 3cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000003d0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 3d0:	f3 0f 1e fb          	endbr32 
+ 3d4:	55                   	push   %ebp
+ 3d5:	89 e5                	mov    %esp,%ebp
+ 3d7:	57                   	push   %edi
+ 3d8:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 3d9:	31 f6                	xor    %esi,%esi
+{
+ 3db:	53                   	push   %ebx
+ 3dc:	89 f3                	mov    %esi,%ebx
+ 3de:	83 ec 1c             	sub    $0x1c,%esp
+ 3e1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 3e4:	eb 33                	jmp    419 <gets+0x49>
+ 3e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ed:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 3f0:	83 ec 04             	sub    $0x4,%esp
+ 3f3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 3f6:	6a 01                	push   $0x1
+ 3f8:	50                   	push   %eax
+ 3f9:	6a 00                	push   $0x0
+ 3fb:	e8 2b 01 00 00       	call   52b <read>
+    if(cc < 1)
+ 400:	83 c4 10             	add    $0x10,%esp
+ 403:	85 c0                	test   %eax,%eax
+ 405:	7e 1c                	jle    423 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 407:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 40b:	83 c7 01             	add    $0x1,%edi
+ 40e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 411:	3c 0a                	cmp    $0xa,%al
+ 413:	74 23                	je     438 <gets+0x68>
+ 415:	3c 0d                	cmp    $0xd,%al
+ 417:	74 1f                	je     438 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 419:	83 c3 01             	add    $0x1,%ebx
+ 41c:	89 fe                	mov    %edi,%esi
+ 41e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 421:	7c cd                	jl     3f0 <gets+0x20>
+ 423:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 425:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 428:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 42b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 42e:	5b                   	pop    %ebx
+ 42f:	5e                   	pop    %esi
+ 430:	5f                   	pop    %edi
+ 431:	5d                   	pop    %ebp
+ 432:	c3                   	ret    
+ 433:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 437:	90                   	nop
+ 438:	8b 75 08             	mov    0x8(%ebp),%esi
+ 43b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 43e:	01 de                	add    %ebx,%esi
+ 440:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 442:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 445:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 448:	5b                   	pop    %ebx
+ 449:	5e                   	pop    %esi
+ 44a:	5f                   	pop    %edi
+ 44b:	5d                   	pop    %ebp
+ 44c:	c3                   	ret    
+ 44d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000450 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 450:	f3 0f 1e fb          	endbr32 
+ 454:	55                   	push   %ebp
+ 455:	89 e5                	mov    %esp,%ebp
+ 457:	56                   	push   %esi
+ 458:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 459:	83 ec 08             	sub    $0x8,%esp
+ 45c:	6a 00                	push   $0x0
+ 45e:	ff 75 08             	pushl  0x8(%ebp)
+ 461:	e8 ed 00 00 00       	call   553 <open>
+  if(fd < 0)
+ 466:	83 c4 10             	add    $0x10,%esp
+ 469:	85 c0                	test   %eax,%eax
+ 46b:	78 2b                	js     498 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 46d:	83 ec 08             	sub    $0x8,%esp
+ 470:	ff 75 0c             	pushl  0xc(%ebp)
+ 473:	89 c3                	mov    %eax,%ebx
+ 475:	50                   	push   %eax
+ 476:	e8 f0 00 00 00       	call   56b <fstat>
+  close(fd);
+ 47b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 47e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 480:	e8 b6 00 00 00       	call   53b <close>
+  return r;
+ 485:	83 c4 10             	add    $0x10,%esp
+}
+ 488:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 48b:	89 f0                	mov    %esi,%eax
+ 48d:	5b                   	pop    %ebx
+ 48e:	5e                   	pop    %esi
+ 48f:	5d                   	pop    %ebp
+ 490:	c3                   	ret    
+ 491:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 498:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 49d:	eb e9                	jmp    488 <stat+0x38>
+ 49f:	90                   	nop
+
+000004a0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 4a0:	f3 0f 1e fb          	endbr32 
+ 4a4:	55                   	push   %ebp
+ 4a5:	89 e5                	mov    %esp,%ebp
+ 4a7:	53                   	push   %ebx
+ 4a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 4ab:	0f be 02             	movsbl (%edx),%eax
+ 4ae:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 4b1:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 4b4:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 4b9:	77 1a                	ja     4d5 <atoi+0x35>
+ 4bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4bf:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 4c0:	83 c2 01             	add    $0x1,%edx
+ 4c3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 4c6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 4ca:	0f be 02             	movsbl (%edx),%eax
+ 4cd:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 4d0:	80 fb 09             	cmp    $0x9,%bl
+ 4d3:	76 eb                	jbe    4c0 <atoi+0x20>
+  return n;
+}
+ 4d5:	89 c8                	mov    %ecx,%eax
+ 4d7:	5b                   	pop    %ebx
+ 4d8:	5d                   	pop    %ebp
+ 4d9:	c3                   	ret    
+ 4da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000004e0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 4e0:	f3 0f 1e fb          	endbr32 
+ 4e4:	55                   	push   %ebp
+ 4e5:	89 e5                	mov    %esp,%ebp
+ 4e7:	57                   	push   %edi
+ 4e8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 4eb:	8b 55 08             	mov    0x8(%ebp),%edx
+ 4ee:	56                   	push   %esi
+ 4ef:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 4f2:	85 c0                	test   %eax,%eax
+ 4f4:	7e 0f                	jle    505 <memmove+0x25>
+ 4f6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 4f8:	89 d7                	mov    %edx,%edi
+ 4fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 500:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 501:	39 f8                	cmp    %edi,%eax
+ 503:	75 fb                	jne    500 <memmove+0x20>
+  return vdst;
+}
+ 505:	5e                   	pop    %esi
+ 506:	89 d0                	mov    %edx,%eax
+ 508:	5f                   	pop    %edi
+ 509:	5d                   	pop    %ebp
+ 50a:	c3                   	ret    
+
+0000050b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 50b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 510:	cd 40                	int    $0x40
+ 512:	c3                   	ret    
+
+00000513 <exit>:
+SYSCALL(exit)
+ 513:	b8 02 00 00 00       	mov    $0x2,%eax
+ 518:	cd 40                	int    $0x40
+ 51a:	c3                   	ret    
+
+0000051b <wait>:
+SYSCALL(wait)
+ 51b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 520:	cd 40                	int    $0x40
+ 522:	c3                   	ret    
+
+00000523 <pipe>:
+SYSCALL(pipe)
+ 523:	b8 04 00 00 00       	mov    $0x4,%eax
+ 528:	cd 40                	int    $0x40
+ 52a:	c3                   	ret    
+
+0000052b <read>:
+SYSCALL(read)
+ 52b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 530:	cd 40                	int    $0x40
+ 532:	c3                   	ret    
+
+00000533 <write>:
+SYSCALL(write)
+ 533:	b8 10 00 00 00       	mov    $0x10,%eax
+ 538:	cd 40                	int    $0x40
+ 53a:	c3                   	ret    
+
+0000053b <close>:
+SYSCALL(close)
+ 53b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 540:	cd 40                	int    $0x40
+ 542:	c3                   	ret    
+
+00000543 <kill>:
+SYSCALL(kill)
+ 543:	b8 06 00 00 00       	mov    $0x6,%eax
+ 548:	cd 40                	int    $0x40
+ 54a:	c3                   	ret    
+
+0000054b <exec>:
+SYSCALL(exec)
+ 54b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 550:	cd 40                	int    $0x40
+ 552:	c3                   	ret    
+
+00000553 <open>:
+SYSCALL(open)
+ 553:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 558:	cd 40                	int    $0x40
+ 55a:	c3                   	ret    
+
+0000055b <mknod>:
+SYSCALL(mknod)
+ 55b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 560:	cd 40                	int    $0x40
+ 562:	c3                   	ret    
+
+00000563 <unlink>:
+SYSCALL(unlink)
+ 563:	b8 12 00 00 00       	mov    $0x12,%eax
+ 568:	cd 40                	int    $0x40
+ 56a:	c3                   	ret    
+
+0000056b <fstat>:
+SYSCALL(fstat)
+ 56b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 570:	cd 40                	int    $0x40
+ 572:	c3                   	ret    
+
+00000573 <link>:
+SYSCALL(link)
+ 573:	b8 13 00 00 00       	mov    $0x13,%eax
+ 578:	cd 40                	int    $0x40
+ 57a:	c3                   	ret    
+
+0000057b <mkdir>:
+SYSCALL(mkdir)
+ 57b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 580:	cd 40                	int    $0x40
+ 582:	c3                   	ret    
+
+00000583 <chdir>:
+SYSCALL(chdir)
+ 583:	b8 09 00 00 00       	mov    $0x9,%eax
+ 588:	cd 40                	int    $0x40
+ 58a:	c3                   	ret    
+
+0000058b <dup>:
+SYSCALL(dup)
+ 58b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 590:	cd 40                	int    $0x40
+ 592:	c3                   	ret    
+
+00000593 <getpid>:
+SYSCALL(getpid)
+ 593:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 598:	cd 40                	int    $0x40
+ 59a:	c3                   	ret    
+
+0000059b <sbrk>:
+SYSCALL(sbrk)
+ 59b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 5a0:	cd 40                	int    $0x40
+ 5a2:	c3                   	ret    
+
+000005a3 <sleep>:
+SYSCALL(sleep)
+ 5a3:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 5a8:	cd 40                	int    $0x40
+ 5aa:	c3                   	ret    
+
+000005ab <uptime>:
+SYSCALL(uptime)
+ 5ab:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 5b0:	cd 40                	int    $0x40
+ 5b2:	c3                   	ret    
+
+000005b3 <thread_create>:
+SYSCALL(thread_create)
+ 5b3:	b8 16 00 00 00       	mov    $0x16,%eax
+ 5b8:	cd 40                	int    $0x40
+ 5ba:	c3                   	ret    
+
+000005bb <thread_join>:
+SYSCALL(thread_join)
+ 5bb:	b8 17 00 00 00       	mov    $0x17,%eax
+ 5c0:	cd 40                	int    $0x40
+ 5c2:	c3                   	ret    
+
+000005c3 <thread_exit>:
+SYSCALL(thread_exit)
+ 5c3:	b8 18 00 00 00       	mov    $0x18,%eax
+ 5c8:	cd 40                	int    $0x40
+ 5ca:	c3                   	ret    
+ 5cb:	66 90                	xchg   %ax,%ax
+ 5cd:	66 90                	xchg   %ax,%ax
+ 5cf:	90                   	nop
+
+000005d0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 5d0:	55                   	push   %ebp
+ 5d1:	89 e5                	mov    %esp,%ebp
+ 5d3:	57                   	push   %edi
+ 5d4:	56                   	push   %esi
+ 5d5:	53                   	push   %ebx
+ 5d6:	83 ec 3c             	sub    $0x3c,%esp
+ 5d9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 5dc:	89 d1                	mov    %edx,%ecx
+{
+ 5de:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 5e1:	85 d2                	test   %edx,%edx
+ 5e3:	0f 89 7f 00 00 00    	jns    668 <printint+0x98>
+ 5e9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 5ed:	74 79                	je     668 <printint+0x98>
+    neg = 1;
+ 5ef:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 5f6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 5f8:	31 db                	xor    %ebx,%ebx
+ 5fa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 5fd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 600:	89 c8                	mov    %ecx,%eax
+ 602:	31 d2                	xor    %edx,%edx
+ 604:	89 cf                	mov    %ecx,%edi
+ 606:	f7 75 c4             	divl   -0x3c(%ebp)
+ 609:	0f b6 92 4c 0a 00 00 	movzbl 0xa4c(%edx),%edx
+ 610:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 613:	89 d8                	mov    %ebx,%eax
+ 615:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 618:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 61b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 61e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 621:	76 dd                	jbe    600 <printint+0x30>
+  if(neg)
+ 623:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 626:	85 c9                	test   %ecx,%ecx
+ 628:	74 0c                	je     636 <printint+0x66>
+    buf[i++] = '-';
+ 62a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 62f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 631:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 636:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 639:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 63d:	eb 07                	jmp    646 <printint+0x76>
+ 63f:	90                   	nop
+ 640:	0f b6 13             	movzbl (%ebx),%edx
+ 643:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 646:	83 ec 04             	sub    $0x4,%esp
+ 649:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 64c:	6a 01                	push   $0x1
+ 64e:	56                   	push   %esi
+ 64f:	57                   	push   %edi
+ 650:	e8 de fe ff ff       	call   533 <write>
+  while(--i >= 0)
+ 655:	83 c4 10             	add    $0x10,%esp
+ 658:	39 de                	cmp    %ebx,%esi
+ 65a:	75 e4                	jne    640 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 65c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 65f:	5b                   	pop    %ebx
+ 660:	5e                   	pop    %esi
+ 661:	5f                   	pop    %edi
+ 662:	5d                   	pop    %ebp
+ 663:	c3                   	ret    
+ 664:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 668:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 66f:	eb 87                	jmp    5f8 <printint+0x28>
+ 671:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 678:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 67f:	90                   	nop
+
+00000680 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 680:	f3 0f 1e fb          	endbr32 
+ 684:	55                   	push   %ebp
+ 685:	89 e5                	mov    %esp,%ebp
+ 687:	57                   	push   %edi
+ 688:	56                   	push   %esi
+ 689:	53                   	push   %ebx
+ 68a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 68d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 690:	0f b6 1e             	movzbl (%esi),%ebx
+ 693:	84 db                	test   %bl,%bl
+ 695:	0f 84 b4 00 00 00    	je     74f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 69b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 69e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 6a1:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 6a4:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 6a6:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 6a9:	eb 33                	jmp    6de <printf+0x5e>
+ 6ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6af:	90                   	nop
+ 6b0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 6b3:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 6b8:	83 f8 25             	cmp    $0x25,%eax
+ 6bb:	74 17                	je     6d4 <printf+0x54>
+  write(fd, &c, 1);
+ 6bd:	83 ec 04             	sub    $0x4,%esp
+ 6c0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 6c3:	6a 01                	push   $0x1
+ 6c5:	57                   	push   %edi
+ 6c6:	ff 75 08             	pushl  0x8(%ebp)
+ 6c9:	e8 65 fe ff ff       	call   533 <write>
+ 6ce:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 6d1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 6d4:	0f b6 1e             	movzbl (%esi),%ebx
+ 6d7:	83 c6 01             	add    $0x1,%esi
+ 6da:	84 db                	test   %bl,%bl
+ 6dc:	74 71                	je     74f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 6de:	0f be cb             	movsbl %bl,%ecx
+ 6e1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 6e4:	85 d2                	test   %edx,%edx
+ 6e6:	74 c8                	je     6b0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 6e8:	83 fa 25             	cmp    $0x25,%edx
+ 6eb:	75 e7                	jne    6d4 <printf+0x54>
+      if(c == 'd'){
+ 6ed:	83 f8 64             	cmp    $0x64,%eax
+ 6f0:	0f 84 9a 00 00 00    	je     790 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 6f6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 6fc:	83 f9 70             	cmp    $0x70,%ecx
+ 6ff:	74 5f                	je     760 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 701:	83 f8 73             	cmp    $0x73,%eax
+ 704:	0f 84 d6 00 00 00    	je     7e0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 70a:	83 f8 63             	cmp    $0x63,%eax
+ 70d:	0f 84 8d 00 00 00    	je     7a0 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 713:	83 f8 25             	cmp    $0x25,%eax
+ 716:	0f 84 b4 00 00 00    	je     7d0 <printf+0x150>
+  write(fd, &c, 1);
+ 71c:	83 ec 04             	sub    $0x4,%esp
+ 71f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 723:	6a 01                	push   $0x1
+ 725:	57                   	push   %edi
+ 726:	ff 75 08             	pushl  0x8(%ebp)
+ 729:	e8 05 fe ff ff       	call   533 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 72e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 731:	83 c4 0c             	add    $0xc,%esp
+ 734:	6a 01                	push   $0x1
+ 736:	83 c6 01             	add    $0x1,%esi
+ 739:	57                   	push   %edi
+ 73a:	ff 75 08             	pushl  0x8(%ebp)
+ 73d:	e8 f1 fd ff ff       	call   533 <write>
+  for(i = 0; fmt[i]; i++){
+ 742:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 746:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 749:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 74b:	84 db                	test   %bl,%bl
+ 74d:	75 8f                	jne    6de <printf+0x5e>
+    }
+  }
+}
+ 74f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 752:	5b                   	pop    %ebx
+ 753:	5e                   	pop    %esi
+ 754:	5f                   	pop    %edi
+ 755:	5d                   	pop    %ebp
+ 756:	c3                   	ret    
+ 757:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 75e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 760:	83 ec 0c             	sub    $0xc,%esp
+ 763:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 768:	6a 00                	push   $0x0
+ 76a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 76d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 770:	8b 13                	mov    (%ebx),%edx
+ 772:	e8 59 fe ff ff       	call   5d0 <printint>
+        ap++;
+ 777:	89 d8                	mov    %ebx,%eax
+ 779:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 77c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 77e:	83 c0 04             	add    $0x4,%eax
+ 781:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 784:	e9 4b ff ff ff       	jmp    6d4 <printf+0x54>
+ 789:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 790:	83 ec 0c             	sub    $0xc,%esp
+ 793:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 798:	6a 01                	push   $0x1
+ 79a:	eb ce                	jmp    76a <printf+0xea>
+ 79c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 7a0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 7a3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 7a6:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 7a8:	6a 01                	push   $0x1
+        ap++;
+ 7aa:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 7ad:	57                   	push   %edi
+ 7ae:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 7b1:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 7b4:	e8 7a fd ff ff       	call   533 <write>
+        ap++;
+ 7b9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 7bc:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 7bf:	31 d2                	xor    %edx,%edx
+ 7c1:	e9 0e ff ff ff       	jmp    6d4 <printf+0x54>
+ 7c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7cd:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 7d0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 7d3:	83 ec 04             	sub    $0x4,%esp
+ 7d6:	e9 59 ff ff ff       	jmp    734 <printf+0xb4>
+ 7db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7df:	90                   	nop
+        s = (char*)*ap;
+ 7e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 7e3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 7e5:	83 c0 04             	add    $0x4,%eax
+ 7e8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 7eb:	85 db                	test   %ebx,%ebx
+ 7ed:	74 17                	je     806 <printf+0x186>
+        while(*s != 0){
+ 7ef:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 7f2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 7f4:	84 c0                	test   %al,%al
+ 7f6:	0f 84 d8 fe ff ff    	je     6d4 <printf+0x54>
+ 7fc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 7ff:	89 de                	mov    %ebx,%esi
+ 801:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 804:	eb 1a                	jmp    820 <printf+0x1a0>
+          s = "(null)";
+ 806:	bb 43 0a 00 00       	mov    $0xa43,%ebx
+        while(*s != 0){
+ 80b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 80e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 813:	89 de                	mov    %ebx,%esi
+ 815:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 818:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 81f:	90                   	nop
+  write(fd, &c, 1);
+ 820:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 823:	83 c6 01             	add    $0x1,%esi
+ 826:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 829:	6a 01                	push   $0x1
+ 82b:	57                   	push   %edi
+ 82c:	53                   	push   %ebx
+ 82d:	e8 01 fd ff ff       	call   533 <write>
+        while(*s != 0){
+ 832:	0f b6 06             	movzbl (%esi),%eax
+ 835:	83 c4 10             	add    $0x10,%esp
+ 838:	84 c0                	test   %al,%al
+ 83a:	75 e4                	jne    820 <printf+0x1a0>
+ 83c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 83f:	31 d2                	xor    %edx,%edx
+ 841:	e9 8e fe ff ff       	jmp    6d4 <printf+0x54>
+ 846:	66 90                	xchg   %ax,%ax
+ 848:	66 90                	xchg   %ax,%ax
+ 84a:	66 90                	xchg   %ax,%ax
+ 84c:	66 90                	xchg   %ax,%ax
+ 84e:	66 90                	xchg   %ax,%ax
+
+00000850 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 850:	f3 0f 1e fb          	endbr32 
+ 854:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 855:	a1 14 0e 00 00       	mov    0xe14,%eax
+{
+ 85a:	89 e5                	mov    %esp,%ebp
+ 85c:	57                   	push   %edi
+ 85d:	56                   	push   %esi
+ 85e:	53                   	push   %ebx
+ 85f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 862:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 864:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 867:	39 c8                	cmp    %ecx,%eax
+ 869:	73 15                	jae    880 <free+0x30>
+ 86b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 86f:	90                   	nop
+ 870:	39 d1                	cmp    %edx,%ecx
+ 872:	72 14                	jb     888 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 874:	39 d0                	cmp    %edx,%eax
+ 876:	73 10                	jae    888 <free+0x38>
+{
+ 878:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 87a:	8b 10                	mov    (%eax),%edx
+ 87c:	39 c8                	cmp    %ecx,%eax
+ 87e:	72 f0                	jb     870 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 880:	39 d0                	cmp    %edx,%eax
+ 882:	72 f4                	jb     878 <free+0x28>
+ 884:	39 d1                	cmp    %edx,%ecx
+ 886:	73 f0                	jae    878 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 888:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 88b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 88e:	39 fa                	cmp    %edi,%edx
+ 890:	74 1e                	je     8b0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 892:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 895:	8b 50 04             	mov    0x4(%eax),%edx
+ 898:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 89b:	39 f1                	cmp    %esi,%ecx
+ 89d:	74 28                	je     8c7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 89f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 8a1:	5b                   	pop    %ebx
+  freep = p;
+ 8a2:	a3 14 0e 00 00       	mov    %eax,0xe14
+}
+ 8a7:	5e                   	pop    %esi
+ 8a8:	5f                   	pop    %edi
+ 8a9:	5d                   	pop    %ebp
+ 8aa:	c3                   	ret    
+ 8ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 8af:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 8b0:	03 72 04             	add    0x4(%edx),%esi
+ 8b3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 8b6:	8b 10                	mov    (%eax),%edx
+ 8b8:	8b 12                	mov    (%edx),%edx
+ 8ba:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 8bd:	8b 50 04             	mov    0x4(%eax),%edx
+ 8c0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 8c3:	39 f1                	cmp    %esi,%ecx
+ 8c5:	75 d8                	jne    89f <free+0x4f>
+    p->s.size += bp->s.size;
+ 8c7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 8ca:	a3 14 0e 00 00       	mov    %eax,0xe14
+    p->s.size += bp->s.size;
+ 8cf:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 8d2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 8d5:	89 10                	mov    %edx,(%eax)
+}
+ 8d7:	5b                   	pop    %ebx
+ 8d8:	5e                   	pop    %esi
+ 8d9:	5f                   	pop    %edi
+ 8da:	5d                   	pop    %ebp
+ 8db:	c3                   	ret    
+ 8dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000008e0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 8e0:	f3 0f 1e fb          	endbr32 
+ 8e4:	55                   	push   %ebp
+ 8e5:	89 e5                	mov    %esp,%ebp
+ 8e7:	57                   	push   %edi
+ 8e8:	56                   	push   %esi
+ 8e9:	53                   	push   %ebx
+ 8ea:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 8ed:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 8f0:	8b 3d 14 0e 00 00    	mov    0xe14,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 8f6:	8d 70 07             	lea    0x7(%eax),%esi
+ 8f9:	c1 ee 03             	shr    $0x3,%esi
+ 8fc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 8ff:	85 ff                	test   %edi,%edi
+ 901:	0f 84 a9 00 00 00    	je     9b0 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 907:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 909:	8b 48 04             	mov    0x4(%eax),%ecx
+ 90c:	39 f1                	cmp    %esi,%ecx
+ 90e:	73 6d                	jae    97d <malloc+0x9d>
+ 910:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 916:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 91b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 91e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 925:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 928:	eb 17                	jmp    941 <malloc+0x61>
+ 92a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 930:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 932:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 935:	39 f1                	cmp    %esi,%ecx
+ 937:	73 4f                	jae    988 <malloc+0xa8>
+ 939:	8b 3d 14 0e 00 00    	mov    0xe14,%edi
+ 93f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 941:	39 c7                	cmp    %eax,%edi
+ 943:	75 eb                	jne    930 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 945:	83 ec 0c             	sub    $0xc,%esp
+ 948:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 94b:	e8 4b fc ff ff       	call   59b <sbrk>
+  if(p == (char*)-1)
+ 950:	83 c4 10             	add    $0x10,%esp
+ 953:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 956:	74 1b                	je     973 <malloc+0x93>
+  hp->s.size = nu;
+ 958:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 95b:	83 ec 0c             	sub    $0xc,%esp
+ 95e:	83 c0 08             	add    $0x8,%eax
+ 961:	50                   	push   %eax
+ 962:	e8 e9 fe ff ff       	call   850 <free>
+  return freep;
+ 967:	a1 14 0e 00 00       	mov    0xe14,%eax
+      if((p = morecore(nunits)) == 0)
+ 96c:	83 c4 10             	add    $0x10,%esp
+ 96f:	85 c0                	test   %eax,%eax
+ 971:	75 bd                	jne    930 <malloc+0x50>
+        return 0;
+  }
+}
+ 973:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 976:	31 c0                	xor    %eax,%eax
+}
+ 978:	5b                   	pop    %ebx
+ 979:	5e                   	pop    %esi
+ 97a:	5f                   	pop    %edi
+ 97b:	5d                   	pop    %ebp
+ 97c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 97d:	89 c2                	mov    %eax,%edx
+ 97f:	89 f8                	mov    %edi,%eax
+ 981:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 988:	39 ce                	cmp    %ecx,%esi
+ 98a:	74 54                	je     9e0 <malloc+0x100>
+        p->s.size -= nunits;
+ 98c:	29 f1                	sub    %esi,%ecx
+ 98e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 991:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 994:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 997:	a3 14 0e 00 00       	mov    %eax,0xe14
+}
+ 99c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 99f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 9a2:	5b                   	pop    %ebx
+ 9a3:	5e                   	pop    %esi
+ 9a4:	5f                   	pop    %edi
+ 9a5:	5d                   	pop    %ebp
+ 9a6:	c3                   	ret    
+ 9a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 9ae:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 9b0:	c7 05 14 0e 00 00 18 	movl   $0xe18,0xe14
+ 9b7:	0e 00 00 
+    base.s.size = 0;
+ 9ba:	bf 18 0e 00 00       	mov    $0xe18,%edi
+    base.s.ptr = freep = prevp = &base;
+ 9bf:	c7 05 18 0e 00 00 18 	movl   $0xe18,0xe18
+ 9c6:	0e 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9c9:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 9cb:	c7 05 1c 0e 00 00 00 	movl   $0x0,0xe1c
+ 9d2:	00 00 00 
+    if(p->s.size >= nunits){
+ 9d5:	e9 36 ff ff ff       	jmp    910 <malloc+0x30>
+ 9da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 9e0:	8b 0a                	mov    (%edx),%ecx
+ 9e2:	89 08                	mov    %ecx,(%eax)
+ 9e4:	eb b1                	jmp    997 <malloc+0xb7>
diff -ruN xv6-public-original/thread.c xv6-public/thread.c
--- xv6-public-original/thread.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/thread.c	2022-09-05 20:43:56.186928000 +0530
@@ -0,0 +1,118 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "x86.h"
+struct balance
+{
+	char name[32];
+	int amount;
+};
+
+struct thread_spinlock {
+  uint locked;
+};
+
+void thread_spin_init(struct thread_spinlock *lk){
+	lk->locked = 0;
+};
+void thread_spin_lock(struct thread_spinlock *lk){
+	// The xchg is atomic.
+	while(xchg(&lk->locked, 1) != 0)
+	;
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen after the lock is acquired.
+	__sync_synchronize();
+};
+void thread_spin_unlock(struct thread_spinlock *lk){
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other cores before the lock is released.
+  // Both the C compiler and the hardware may re-order loads and
+  // stores; __sync_synchronize() tells them both not to.
+	__sync_synchronize();
+	asm volatile("movl $0, %0" : "+m" (lk->locked) : );
+};
+
+struct thread_mutex {
+  uint mutexLocked;
+};
+
+
+void thread_mutex_init(struct thread_mutex *lk){
+	lk->mutexLocked = 0;
+};
+void thread_mutex_lock(struct thread_mutex *lk){
+	// The xchg is atomic.
+	while(xchg(&lk->mutexLocked, 1) != 0)
+	sleep(1);
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen after the lock is acquired.
+	__sync_synchronize();
+};
+void thread_mutex_unlock(struct thread_mutex *lk){
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other cores before the lock is released.
+  // Both the C compiler and the hardware may re-order loads and
+  // stores; __sync_synchronize() tells them both not to.
+	__sync_synchronize();
+	asm volatile("movl $0, %0" : "+m" (lk->mutexLocked) : );
+};
+
+volatile int total_balance = 0;
+volatile unsigned int delay (unsigned int d)
+{
+	unsigned int i;
+	for (i = 0; i < d; i++)
+	{
+		__asm volatile( "nop" ::: );
+	}
+	return i;
+}
+
+struct thread_spinlock lock;		// declaring spinlock
+struct thread_mutex mLock;		// declaring mutex lock
+
+void do_work(void *arg)
+{
+	int i;
+	int old;
+	struct balance *b = (struct balance*) arg;
+	printf(1, "Starting do_work: s:%s\n", b->name);
+	for (i = 0; i < b->amount; i++)
+	{
+		// thread_spin_lock(&lock);		// uncomment this line for spinlock
+		// thread_mutex_lock(&mLock);		// uncomment this line for mutex lock
+		old = total_balance;
+		delay(100000);
+		total_balance = old + 1;
+		// thread_spin_unlock(&lock);		// uncomment this line for mutex lock
+		// thread_mutex_unlock(&mLock);	// uncomment this line for spinlock
+	}
+	printf(1, "Done s:%x\n", b->name);
+	thread_exit();
+}
+
+
+
+int main(int argc, char *argv[]) {
+	thread_spin_init(&lock);
+	thread_mutex_init(&mLock);
+	struct balance b1 = {"b1", 3200};
+	struct balance b2 = {"b2", 2800};
+	void *s1, *s2;
+	int t1, t2, r1, r2;
+	s1 = malloc(4096);
+	s2 = malloc(4096);
+	t1 = thread_create(do_work, (void*)&b1, s1);
+	t2 = thread_create(do_work, (void*)&b2, s2);
+	r1 = thread_join();
+	r2 = thread_join();
+	
+	printf(1, "Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
+	t1, r1, t2, r2, total_balance);
+	exit(); 
+}
+
diff -ruN xv6-public-original/thread.d xv6-public/thread.d
--- xv6-public-original/thread.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/thread.d	2022-09-05 20:56:51.366960000 +0530
@@ -0,0 +1 @@
+thread.o: thread.c /usr/include/stdc-predef.h types.h stat.h user.h x86.h
Binary files xv6-public-original/thread.o and xv6-public/thread.o differ
diff -ruN xv6-public-original/thread.sym xv6-public/thread.sym
--- xv6-public-original/thread.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/thread.sym	2022-09-05 20:56:51.386960000 +0530
@@ -0,0 +1,71 @@
+00000000 .text
+000009e8 .rodata
+00000a60 .eh_frame
+00000e10 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 thread.c
+00000000 ulib.c
+00000000 printf.c
+000005d0 printint
+00000a4c digits.1094
+00000000 umalloc.c
+00000e14 freep
+00000e18 base
+00000270 thread_mutex_unlock
+000002b0 strcpy
+00000680 printf
+000005c3 thread_exit
+000004e0 memmove
+0000055b mknod
+00000e20 lock
+000003d0 gets
+00000593 getpid
+00000200 thread_mutex_init
+000008e0 malloc
+000005a3 sleep
+000001a0 thread_spin_init
+000001e0 thread_spin_unlock
+00000523 pipe
+00000533 write
+000001c0 thread_spin_lock
+0000056b fstat
+00000543 kill
+00000583 chdir
+0000054b exec
+0000051b wait
+0000052b read
+00000563 unlink
+0000050b fork
+0000059b sbrk
+000005ab uptime
+00000e10 __bss_start
+00000120 do_work
+00000370 memset
+00000000 main
+00000e10 total_balance
+000002e0 strcmp
+0000058b dup
+00000290 delay
+00000450 stat
+00000e10 _edata
+00000e28 _end
+00000573 link
+00000513 exit
+000004a0 atoi
+00000330 strlen
+00000553 open
+00000e24 mLock
+00000390 strchr
+000005b3 thread_create
+00000220 thread_mutex_lock
+0000057b mkdir
+0000053b close
+000005bb thread_join
+00000850 free
Binary files xv6-public-original/trapasm.o and xv6-public/trapasm.o differ
Binary files xv6-public-original/trap.o and xv6-public/trap.o differ
Binary files xv6-public-original/uart.o and xv6-public/uart.o differ
Binary files xv6-public-original/ulib.o and xv6-public/ulib.o differ
Binary files xv6-public-original/umalloc.o and xv6-public/umalloc.o differ
diff -ruN xv6-public-original/user.h xv6-public/user.h
--- xv6-public-original/user.h	2022-08-13 16:28:15.738212000 +0530
+++ xv6-public/user.h	2022-08-29 20:56:00.000000000 +0530
@@ -23,6 +23,9 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void (*) (void* ), void* , void* );
+int thread_join(void);
+int thread_exit(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
Binary files xv6-public-original/_usertests and xv6-public/_usertests differ
diff -ruN xv6-public-original/usertests.asm xv6-public/usertests.asm
--- xv6-public-original/usertests.asm	2022-08-13 16:28:55.495966000 +0530
+++ xv6-public/usertests.asm	2022-09-05 20:56:51.078960000 +0530
@@ -20,15 +20,15 @@
       11:	51                   	push   %ecx
       12:	83 ec 0c             	sub    $0xc,%esp
   printf(1, "usertests starting\n");
-      15:	68 36 4e 00 00       	push   $0x4e36
+      15:	68 46 4e 00 00       	push   $0x4e46
       1a:	6a 01                	push   $0x1
-      1c:	e8 bf 3a 00 00       	call   3ae0 <printf>
+      1c:	e8 cf 3a 00 00       	call   3af0 <printf>
 
   if(open("usertests.ran", 0) >= 0){
       21:	59                   	pop    %ecx
       22:	58                   	pop    %eax
       23:	6a 00                	push   $0x0
-      25:	68 4a 4e 00 00       	push   $0x4e4a
+      25:	68 5a 4e 00 00       	push   $0x4e5a
       2a:	e8 94 39 00 00       	call   39c3 <open>
       2f:	83 c4 10             	add    $0x10,%esp
       32:	85 c0                	test   %eax,%eax
@@ -36,9 +36,9 @@
     printf(1, "already ran user tests -- rebuild fs.img\n");
       36:	52                   	push   %edx
       37:	52                   	push   %edx
-      38:	68 b4 55 00 00       	push   $0x55b4
+      38:	68 c4 55 00 00       	push   $0x55c4
       3d:	6a 01                	push   $0x1
-      3f:	e8 9c 3a 00 00       	call   3ae0 <printf>
+      3f:	e8 ac 3a 00 00       	call   3af0 <printf>
     exit();
       44:	e8 3a 39 00 00       	call   3983 <exit>
   }
@@ -46,7 +46,7 @@
       49:	50                   	push   %eax
       4a:	50                   	push   %eax
       4b:	68 00 02 00 00       	push   $0x200
-      50:	68 4a 4e 00 00       	push   $0x4e4a
+      50:	68 5a 4e 00 00       	push   $0x4e5a
       55:	e8 69 39 00 00       	call   39c3 <open>
       5a:	89 04 24             	mov    %eax,(%esp)
       5d:	e8 49 39 00 00       	call   39ab <close>
@@ -144,41 +144,41 @@
      125:	89 e5                	mov    %esp,%ebp
      127:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "iput test\n");
-     12a:	68 dc 3e 00 00       	push   $0x3edc
-     12f:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     135:	e8 a6 39 00 00       	call   3ae0 <printf>
+     12a:	68 ec 3e 00 00       	push   $0x3eec
+     12f:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     135:	e8 b6 39 00 00       	call   3af0 <printf>
   if(mkdir("iputdir") < 0){
-     13a:	c7 04 24 6f 3e 00 00 	movl   $0x3e6f,(%esp)
+     13a:	c7 04 24 7f 3e 00 00 	movl   $0x3e7f,(%esp)
      141:	e8 a5 38 00 00       	call   39eb <mkdir>
      146:	83 c4 10             	add    $0x10,%esp
      149:	85 c0                	test   %eax,%eax
      14b:	78 58                	js     1a5 <iputtest+0x85>
   if(chdir("iputdir") < 0){
      14d:	83 ec 0c             	sub    $0xc,%esp
-     150:	68 6f 3e 00 00       	push   $0x3e6f
+     150:	68 7f 3e 00 00       	push   $0x3e7f
      155:	e8 99 38 00 00       	call   39f3 <chdir>
      15a:	83 c4 10             	add    $0x10,%esp
      15d:	85 c0                	test   %eax,%eax
      15f:	0f 88 85 00 00 00    	js     1ea <iputtest+0xca>
   if(unlink("../iputdir") < 0){
      165:	83 ec 0c             	sub    $0xc,%esp
-     168:	68 6c 3e 00 00       	push   $0x3e6c
+     168:	68 7c 3e 00 00       	push   $0x3e7c
      16d:	e8 61 38 00 00       	call   39d3 <unlink>
      172:	83 c4 10             	add    $0x10,%esp
      175:	85 c0                	test   %eax,%eax
      177:	78 5a                	js     1d3 <iputtest+0xb3>
   if(chdir("/") < 0){
      179:	83 ec 0c             	sub    $0xc,%esp
-     17c:	68 91 3e 00 00       	push   $0x3e91
+     17c:	68 a1 3e 00 00       	push   $0x3ea1
      181:	e8 6d 38 00 00       	call   39f3 <chdir>
      186:	83 c4 10             	add    $0x10,%esp
      189:	85 c0                	test   %eax,%eax
      18b:	78 2f                	js     1bc <iputtest+0x9c>
   printf(stdout, "iput test ok\n");
      18d:	83 ec 08             	sub    $0x8,%esp
-     190:	68 14 3f 00 00       	push   $0x3f14
-     195:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     19b:	e8 40 39 00 00       	call   3ae0 <printf>
+     190:	68 24 3f 00 00       	push   $0x3f24
+     195:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     19b:	e8 50 39 00 00       	call   3af0 <printf>
 }
      1a0:	83 c4 10             	add    $0x10,%esp
      1a3:	c9                   	leave  
@@ -186,33 +186,33 @@
     printf(stdout, "mkdir failed\n");
      1a5:	50                   	push   %eax
      1a6:	50                   	push   %eax
-     1a7:	68 48 3e 00 00       	push   $0x3e48
-     1ac:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     1b2:	e8 29 39 00 00       	call   3ae0 <printf>
+     1a7:	68 58 3e 00 00       	push   $0x3e58
+     1ac:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     1b2:	e8 39 39 00 00       	call   3af0 <printf>
     exit();
      1b7:	e8 c7 37 00 00       	call   3983 <exit>
     printf(stdout, "chdir / failed\n");
      1bc:	50                   	push   %eax
      1bd:	50                   	push   %eax
-     1be:	68 93 3e 00 00       	push   $0x3e93
-     1c3:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     1c9:	e8 12 39 00 00       	call   3ae0 <printf>
+     1be:	68 a3 3e 00 00       	push   $0x3ea3
+     1c3:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     1c9:	e8 22 39 00 00       	call   3af0 <printf>
     exit();
      1ce:	e8 b0 37 00 00       	call   3983 <exit>
     printf(stdout, "unlink ../iputdir failed\n");
      1d3:	52                   	push   %edx
      1d4:	52                   	push   %edx
-     1d5:	68 77 3e 00 00       	push   $0x3e77
-     1da:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     1e0:	e8 fb 38 00 00       	call   3ae0 <printf>
+     1d5:	68 87 3e 00 00       	push   $0x3e87
+     1da:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     1e0:	e8 0b 39 00 00       	call   3af0 <printf>
     exit();
      1e5:	e8 99 37 00 00       	call   3983 <exit>
     printf(stdout, "chdir iputdir failed\n");
      1ea:	51                   	push   %ecx
      1eb:	51                   	push   %ecx
-     1ec:	68 56 3e 00 00       	push   $0x3e56
-     1f1:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     1f7:	e8 e4 38 00 00       	call   3ae0 <printf>
+     1ec:	68 66 3e 00 00       	push   $0x3e66
+     1f1:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     1f7:	e8 f4 38 00 00       	call   3af0 <printf>
     exit();
      1fc:	e8 82 37 00 00       	call   3983 <exit>
      201:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -226,9 +226,9 @@
      215:	89 e5                	mov    %esp,%ebp
      217:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "exitiput test\n");
-     21a:	68 a3 3e 00 00       	push   $0x3ea3
-     21f:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     225:	e8 b6 38 00 00       	call   3ae0 <printf>
+     21a:	68 b3 3e 00 00       	push   $0x3eb3
+     21f:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     225:	e8 c6 38 00 00       	call   3af0 <printf>
   pid = fork();
      22a:	e8 4c 37 00 00       	call   397b <fork>
   if(pid < 0){
@@ -239,21 +239,21 @@
      23a:	75 4c                	jne    288 <exitiputtest+0x78>
     if(mkdir("iputdir") < 0){
      23c:	83 ec 0c             	sub    $0xc,%esp
-     23f:	68 6f 3e 00 00       	push   $0x3e6f
+     23f:	68 7f 3e 00 00       	push   $0x3e7f
      244:	e8 a2 37 00 00       	call   39eb <mkdir>
      249:	83 c4 10             	add    $0x10,%esp
      24c:	85 c0                	test   %eax,%eax
      24e:	0f 88 83 00 00 00    	js     2d7 <exitiputtest+0xc7>
     if(chdir("iputdir") < 0){
      254:	83 ec 0c             	sub    $0xc,%esp
-     257:	68 6f 3e 00 00       	push   $0x3e6f
+     257:	68 7f 3e 00 00       	push   $0x3e7f
      25c:	e8 92 37 00 00       	call   39f3 <chdir>
      261:	83 c4 10             	add    $0x10,%esp
      264:	85 c0                	test   %eax,%eax
      266:	0f 88 82 00 00 00    	js     2ee <exitiputtest+0xde>
     if(unlink("../iputdir") < 0){
      26c:	83 ec 0c             	sub    $0xc,%esp
-     26f:	68 6c 3e 00 00       	push   $0x3e6c
+     26f:	68 7c 3e 00 00       	push   $0x3e7c
      274:	e8 5a 37 00 00       	call   39d3 <unlink>
      279:	83 c4 10             	add    $0x10,%esp
      27c:	85 c0                	test   %eax,%eax
@@ -265,9 +265,9 @@
      288:	e8 fe 36 00 00       	call   398b <wait>
   printf(stdout, "exitiput test ok\n");
      28d:	83 ec 08             	sub    $0x8,%esp
-     290:	68 c6 3e 00 00       	push   $0x3ec6
-     295:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     29b:	e8 40 38 00 00       	call   3ae0 <printf>
+     290:	68 d6 3e 00 00       	push   $0x3ed6
+     295:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     29b:	e8 50 38 00 00       	call   3af0 <printf>
 }
      2a0:	83 c4 10             	add    $0x10,%esp
      2a3:	c9                   	leave  
@@ -275,33 +275,33 @@
      2a5:	8d 76 00             	lea    0x0(%esi),%esi
       printf(stdout, "unlink ../iputdir failed\n");
      2a8:	83 ec 08             	sub    $0x8,%esp
-     2ab:	68 77 3e 00 00       	push   $0x3e77
-     2b0:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     2b6:	e8 25 38 00 00       	call   3ae0 <printf>
+     2ab:	68 87 3e 00 00       	push   $0x3e87
+     2b0:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     2b6:	e8 35 38 00 00       	call   3af0 <printf>
       exit();
      2bb:	e8 c3 36 00 00       	call   3983 <exit>
     printf(stdout, "fork failed\n");
      2c0:	51                   	push   %ecx
      2c1:	51                   	push   %ecx
-     2c2:	68 89 4d 00 00       	push   $0x4d89
-     2c7:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     2cd:	e8 0e 38 00 00       	call   3ae0 <printf>
+     2c2:	68 99 4d 00 00       	push   $0x4d99
+     2c7:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     2cd:	e8 1e 38 00 00       	call   3af0 <printf>
     exit();
      2d2:	e8 ac 36 00 00       	call   3983 <exit>
       printf(stdout, "mkdir failed\n");
      2d7:	52                   	push   %edx
      2d8:	52                   	push   %edx
-     2d9:	68 48 3e 00 00       	push   $0x3e48
-     2de:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     2e4:	e8 f7 37 00 00       	call   3ae0 <printf>
+     2d9:	68 58 3e 00 00       	push   $0x3e58
+     2de:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     2e4:	e8 07 38 00 00       	call   3af0 <printf>
       exit();
      2e9:	e8 95 36 00 00       	call   3983 <exit>
       printf(stdout, "child chdir failed\n");
      2ee:	50                   	push   %eax
      2ef:	50                   	push   %eax
-     2f0:	68 b2 3e 00 00       	push   $0x3eb2
-     2f5:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     2fb:	e8 e0 37 00 00       	call   3ae0 <printf>
+     2f0:	68 c2 3e 00 00       	push   $0x3ec2
+     2f5:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     2fb:	e8 f0 37 00 00       	call   3af0 <printf>
       exit();
      300:	e8 7e 36 00 00       	call   3983 <exit>
      305:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -314,11 +314,11 @@
      315:	89 e5                	mov    %esp,%ebp
      317:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "openiput test\n");
-     31a:	68 d8 3e 00 00       	push   $0x3ed8
-     31f:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     325:	e8 b6 37 00 00       	call   3ae0 <printf>
+     31a:	68 e8 3e 00 00       	push   $0x3ee8
+     31f:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     325:	e8 c6 37 00 00       	call   3af0 <printf>
   if(mkdir("oidir") < 0){
-     32a:	c7 04 24 e7 3e 00 00 	movl   $0x3ee7,(%esp)
+     32a:	c7 04 24 f7 3e 00 00 	movl   $0x3ef7,(%esp)
      331:	e8 b5 36 00 00       	call   39eb <mkdir>
      336:	83 c4 10             	add    $0x10,%esp
      339:	85 c0                	test   %eax,%eax
@@ -333,7 +333,7 @@
     int fd = open("oidir", O_RDWR);
      34c:	83 ec 08             	sub    $0x8,%esp
      34f:	6a 02                	push   $0x2
-     351:	68 e7 3e 00 00       	push   $0x3ee7
+     351:	68 f7 3e 00 00       	push   $0x3ef7
      356:	e8 68 36 00 00       	call   39c3 <open>
     if(fd >= 0){
      35b:	83 c4 10             	add    $0x10,%esp
@@ -341,9 +341,9 @@
      360:	78 5e                	js     3c0 <openiputtest+0xb0>
       printf(stdout, "open directory for write succeeded\n");
      362:	83 ec 08             	sub    $0x8,%esp
-     365:	68 6c 4e 00 00       	push   $0x4e6c
-     36a:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     370:	e8 6b 37 00 00       	call   3ae0 <printf>
+     365:	68 7c 4e 00 00       	push   $0x4e7c
+     36a:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     370:	e8 7b 37 00 00       	call   3af0 <printf>
       exit();
      375:	e8 09 36 00 00       	call   3983 <exit>
      37a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -352,7 +352,7 @@
      383:	6a 01                	push   $0x1
      385:	e8 89 36 00 00       	call   3a13 <sleep>
   if(unlink("oidir") != 0){
-     38a:	c7 04 24 e7 3e 00 00 	movl   $0x3ee7,(%esp)
+     38a:	c7 04 24 f7 3e 00 00 	movl   $0x3ef7,(%esp)
      391:	e8 3d 36 00 00       	call   39d3 <unlink>
      396:	83 c4 10             	add    $0x10,%esp
      399:	85 c0                	test   %eax,%eax
@@ -361,9 +361,9 @@
      39d:	e8 e9 35 00 00       	call   398b <wait>
   printf(stdout, "openiput test ok\n");
      3a2:	83 ec 08             	sub    $0x8,%esp
-     3a5:	68 10 3f 00 00       	push   $0x3f10
-     3aa:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     3b0:	e8 2b 37 00 00       	call   3ae0 <printf>
+     3a5:	68 20 3f 00 00       	push   $0x3f20
+     3aa:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     3b0:	e8 3b 37 00 00       	call   3af0 <printf>
      3b5:	83 c4 10             	add    $0x10,%esp
 }
      3b8:	c9                   	leave  
@@ -374,25 +374,25 @@
     printf(stdout, "fork failed\n");
      3c5:	52                   	push   %edx
      3c6:	52                   	push   %edx
-     3c7:	68 89 4d 00 00       	push   $0x4d89
-     3cc:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     3d2:	e8 09 37 00 00       	call   3ae0 <printf>
+     3c7:	68 99 4d 00 00       	push   $0x4d99
+     3cc:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     3d2:	e8 19 37 00 00       	call   3af0 <printf>
     exit();
      3d7:	e8 a7 35 00 00       	call   3983 <exit>
     printf(stdout, "mkdir oidir failed\n");
      3dc:	51                   	push   %ecx
      3dd:	51                   	push   %ecx
-     3de:	68 ed 3e 00 00       	push   $0x3eed
-     3e3:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     3e9:	e8 f2 36 00 00       	call   3ae0 <printf>
+     3de:	68 fd 3e 00 00       	push   $0x3efd
+     3e3:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     3e9:	e8 02 37 00 00       	call   3af0 <printf>
     exit();
      3ee:	e8 90 35 00 00       	call   3983 <exit>
     printf(stdout, "unlink failed\n");
      3f3:	50                   	push   %eax
      3f4:	50                   	push   %eax
-     3f5:	68 01 3f 00 00       	push   $0x3f01
-     3fa:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     400:	e8 db 36 00 00       	call   3ae0 <printf>
+     3f5:	68 11 3f 00 00       	push   $0x3f11
+     3fa:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     400:	e8 eb 36 00 00       	call   3af0 <printf>
     exit();
      405:	e8 79 35 00 00       	call   3983 <exit>
      40a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -404,14 +404,14 @@
      415:	89 e5                	mov    %esp,%ebp
      417:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "open test\n");
-     41a:	68 22 3f 00 00       	push   $0x3f22
-     41f:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     425:	e8 b6 36 00 00       	call   3ae0 <printf>
+     41a:	68 32 3f 00 00       	push   $0x3f32
+     41f:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     425:	e8 c6 36 00 00       	call   3af0 <printf>
   fd = open("echo", 0);
      42a:	58                   	pop    %eax
      42b:	5a                   	pop    %edx
      42c:	6a 00                	push   $0x0
-     42e:	68 2d 3f 00 00       	push   $0x3f2d
+     42e:	68 3d 3f 00 00       	push   $0x3f3d
      433:	e8 8b 35 00 00       	call   39c3 <open>
   if(fd < 0){
      438:	83 c4 10             	add    $0x10,%esp
@@ -425,7 +425,7 @@
      448:	5a                   	pop    %edx
      449:	59                   	pop    %ecx
      44a:	6a 00                	push   $0x0
-     44c:	68 45 3f 00 00       	push   $0x3f45
+     44c:	68 55 3f 00 00       	push   $0x3f55
      451:	e8 6d 35 00 00       	call   39c3 <open>
   if(fd >= 0){
      456:	83 c4 10             	add    $0x10,%esp
@@ -433,9 +433,9 @@
      45b:	79 2f                	jns    48c <opentest+0x7c>
   printf(stdout, "open test ok\n");
      45d:	83 ec 08             	sub    $0x8,%esp
-     460:	68 70 3f 00 00       	push   $0x3f70
-     465:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     46b:	e8 70 36 00 00       	call   3ae0 <printf>
+     460:	68 80 3f 00 00       	push   $0x3f80
+     465:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     46b:	e8 80 36 00 00       	call   3af0 <printf>
 }
      470:	83 c4 10             	add    $0x10,%esp
      473:	c9                   	leave  
@@ -443,17 +443,17 @@
     printf(stdout, "open echo failed!\n");
      475:	50                   	push   %eax
      476:	50                   	push   %eax
-     477:	68 32 3f 00 00       	push   $0x3f32
-     47c:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     482:	e8 59 36 00 00       	call   3ae0 <printf>
+     477:	68 42 3f 00 00       	push   $0x3f42
+     47c:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     482:	e8 69 36 00 00       	call   3af0 <printf>
     exit();
      487:	e8 f7 34 00 00       	call   3983 <exit>
     printf(stdout, "open doesnotexist succeeded!\n");
      48c:	50                   	push   %eax
      48d:	50                   	push   %eax
-     48e:	68 52 3f 00 00       	push   $0x3f52
-     493:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     499:	e8 42 36 00 00       	call   3ae0 <printf>
+     48e:	68 62 3f 00 00       	push   $0x3f62
+     493:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     499:	e8 52 36 00 00       	call   3af0 <printf>
     exit();
      49e:	e8 e0 34 00 00       	call   3983 <exit>
      4a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -468,14 +468,14 @@
      4b8:	53                   	push   %ebx
   printf(stdout, "small file test\n");
      4b9:	83 ec 08             	sub    $0x8,%esp
-     4bc:	68 7e 3f 00 00       	push   $0x3f7e
-     4c1:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     4c7:	e8 14 36 00 00       	call   3ae0 <printf>
+     4bc:	68 8e 3f 00 00       	push   $0x3f8e
+     4c1:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     4c7:	e8 24 36 00 00       	call   3af0 <printf>
   fd = open("small", O_CREATE|O_RDWR);
      4cc:	58                   	pop    %eax
      4cd:	5a                   	pop    %edx
      4ce:	68 02 02 00 00       	push   $0x202
-     4d3:	68 8f 3f 00 00       	push   $0x3f8f
+     4d3:	68 9f 3f 00 00       	push   $0x3f9f
      4d8:	e8 e6 34 00 00       	call   39c3 <open>
   if(fd >= 0){
      4dd:	83 c4 10             	add    $0x10,%esp
@@ -487,15 +487,15 @@
   for(i = 0; i < 100; i++){
      4ed:	31 db                	xor    %ebx,%ebx
     printf(stdout, "creat small succeeded; ok\n");
-     4ef:	68 95 3f 00 00       	push   $0x3f95
-     4f4:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     4fa:	e8 e1 35 00 00       	call   3ae0 <printf>
+     4ef:	68 a5 3f 00 00       	push   $0x3fa5
+     4f4:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     4fa:	e8 f1 35 00 00       	call   3af0 <printf>
      4ff:	83 c4 10             	add    $0x10,%esp
      502:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(write(fd, "aaaaaaaaaa", 10) != 10){
      508:	83 ec 04             	sub    $0x4,%esp
      50b:	6a 0a                	push   $0xa
-     50d:	68 cc 3f 00 00       	push   $0x3fcc
+     50d:	68 dc 3f 00 00       	push   $0x3fdc
      512:	56                   	push   %esi
      513:	e8 8b 34 00 00       	call   39a3 <write>
      518:	83 c4 10             	add    $0x10,%esp
@@ -504,7 +504,7 @@
     if(write(fd, "bbbbbbbbbb", 10) != 10){
      524:	83 ec 04             	sub    $0x4,%esp
      527:	6a 0a                	push   $0xa
-     529:	68 d7 3f 00 00       	push   $0x3fd7
+     529:	68 e7 3f 00 00       	push   $0x3fe7
      52e:	56                   	push   %esi
      52f:	e8 6f 34 00 00       	call   39a3 <write>
      534:	83 c4 10             	add    $0x10,%esp
@@ -516,9 +516,9 @@
      546:	75 c0                	jne    508 <writetest+0x58>
   printf(stdout, "writes ok\n");
      548:	83 ec 08             	sub    $0x8,%esp
-     54b:	68 e2 3f 00 00       	push   $0x3fe2
-     550:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     556:	e8 85 35 00 00       	call   3ae0 <printf>
+     54b:	68 f2 3f 00 00       	push   $0x3ff2
+     550:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     556:	e8 95 35 00 00       	call   3af0 <printf>
   close(fd);
      55b:	89 34 24             	mov    %esi,(%esp)
      55e:	e8 48 34 00 00       	call   39ab <close>
@@ -526,7 +526,7 @@
      563:	5b                   	pop    %ebx
      564:	5e                   	pop    %esi
      565:	6a 00                	push   $0x0
-     567:	68 8f 3f 00 00       	push   $0x3f8f
+     567:	68 9f 3f 00 00       	push   $0x3f9f
      56c:	e8 52 34 00 00       	call   39c3 <open>
   if(fd >= 0){
      571:	83 c4 10             	add    $0x10,%esp
@@ -537,13 +537,13 @@
      578:	0f 88 b1 00 00 00    	js     62f <writetest+0x17f>
     printf(stdout, "open small succeeded ok\n");
      57e:	83 ec 08             	sub    $0x8,%esp
-     581:	68 ed 3f 00 00       	push   $0x3fed
-     586:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     58c:	e8 4f 35 00 00       	call   3ae0 <printf>
+     581:	68 fd 3f 00 00       	push   $0x3ffd
+     586:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     58c:	e8 5f 35 00 00       	call   3af0 <printf>
   i = read(fd, buf, 2000);
      591:	83 c4 0c             	add    $0xc,%esp
      594:	68 d0 07 00 00       	push   $0x7d0
-     599:	68 c0 86 00 00       	push   $0x86c0
+     599:	68 e0 86 00 00       	push   $0x86e0
      59e:	53                   	push   %ebx
      59f:	e8 f7 33 00 00       	call   399b <read>
   if(i == 2000){
@@ -552,23 +552,23 @@
      5ac:	0f 85 94 00 00 00    	jne    646 <writetest+0x196>
     printf(stdout, "read succeeded ok\n");
      5b2:	83 ec 08             	sub    $0x8,%esp
-     5b5:	68 21 40 00 00       	push   $0x4021
-     5ba:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     5c0:	e8 1b 35 00 00       	call   3ae0 <printf>
+     5b5:	68 31 40 00 00       	push   $0x4031
+     5ba:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     5c0:	e8 2b 35 00 00       	call   3af0 <printf>
   close(fd);
      5c5:	89 1c 24             	mov    %ebx,(%esp)
      5c8:	e8 de 33 00 00       	call   39ab <close>
   if(unlink("small") < 0){
-     5cd:	c7 04 24 8f 3f 00 00 	movl   $0x3f8f,(%esp)
+     5cd:	c7 04 24 9f 3f 00 00 	movl   $0x3f9f,(%esp)
      5d4:	e8 fa 33 00 00       	call   39d3 <unlink>
      5d9:	83 c4 10             	add    $0x10,%esp
      5dc:	85 c0                	test   %eax,%eax
      5de:	78 7d                	js     65d <writetest+0x1ad>
   printf(stdout, "small file test ok\n");
      5e0:	83 ec 08             	sub    $0x8,%esp
-     5e3:	68 49 40 00 00       	push   $0x4049
-     5e8:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     5ee:	e8 ed 34 00 00       	call   3ae0 <printf>
+     5e3:	68 59 40 00 00       	push   $0x4059
+     5e8:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     5ee:	e8 fd 34 00 00       	call   3af0 <printf>
 }
      5f3:	83 c4 10             	add    $0x10,%esp
      5f6:	8d 65 f8             	lea    -0x8(%ebp),%esp
@@ -579,49 +579,49 @@
       printf(stdout, "error: write aa %d new file failed\n", i);
      5fd:	83 ec 04             	sub    $0x4,%esp
      600:	53                   	push   %ebx
-     601:	68 90 4e 00 00       	push   $0x4e90
-     606:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     60c:	e8 cf 34 00 00       	call   3ae0 <printf>
+     601:	68 a0 4e 00 00       	push   $0x4ea0
+     606:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     60c:	e8 df 34 00 00       	call   3af0 <printf>
       exit();
      611:	e8 6d 33 00 00       	call   3983 <exit>
       printf(stdout, "error: write bb %d new file failed\n", i);
      616:	83 ec 04             	sub    $0x4,%esp
      619:	53                   	push   %ebx
-     61a:	68 b4 4e 00 00       	push   $0x4eb4
-     61f:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     625:	e8 b6 34 00 00       	call   3ae0 <printf>
+     61a:	68 c4 4e 00 00       	push   $0x4ec4
+     61f:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     625:	e8 c6 34 00 00       	call   3af0 <printf>
       exit();
      62a:	e8 54 33 00 00       	call   3983 <exit>
     printf(stdout, "error: open small failed!\n");
      62f:	51                   	push   %ecx
      630:	51                   	push   %ecx
-     631:	68 06 40 00 00       	push   $0x4006
-     636:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     63c:	e8 9f 34 00 00       	call   3ae0 <printf>
+     631:	68 16 40 00 00       	push   $0x4016
+     636:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     63c:	e8 af 34 00 00       	call   3af0 <printf>
     exit();
      641:	e8 3d 33 00 00       	call   3983 <exit>
     printf(stdout, "read failed\n");
      646:	52                   	push   %edx
      647:	52                   	push   %edx
-     648:	68 4d 43 00 00       	push   $0x434d
-     64d:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     653:	e8 88 34 00 00       	call   3ae0 <printf>
+     648:	68 5d 43 00 00       	push   $0x435d
+     64d:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     653:	e8 98 34 00 00       	call   3af0 <printf>
     exit();
      658:	e8 26 33 00 00       	call   3983 <exit>
     printf(stdout, "unlink small failed\n");
      65d:	50                   	push   %eax
      65e:	50                   	push   %eax
-     65f:	68 34 40 00 00       	push   $0x4034
-     664:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     66a:	e8 71 34 00 00       	call   3ae0 <printf>
+     65f:	68 44 40 00 00       	push   $0x4044
+     664:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     66a:	e8 81 34 00 00       	call   3af0 <printf>
     exit();
      66f:	e8 0f 33 00 00       	call   3983 <exit>
     printf(stdout, "error: creat small failed!\n");
      674:	50                   	push   %eax
      675:	50                   	push   %eax
-     676:	68 b0 3f 00 00       	push   $0x3fb0
-     67b:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     681:	e8 5a 34 00 00       	call   3ae0 <printf>
+     676:	68 c0 3f 00 00       	push   $0x3fc0
+     67b:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     681:	e8 6a 34 00 00       	call   3af0 <printf>
     exit();
      686:	e8 f8 32 00 00       	call   3983 <exit>
      68b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -636,14 +636,14 @@
      698:	53                   	push   %ebx
   printf(stdout, "big files test\n");
      699:	83 ec 08             	sub    $0x8,%esp
-     69c:	68 5d 40 00 00       	push   $0x405d
-     6a1:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     6a7:	e8 34 34 00 00       	call   3ae0 <printf>
+     69c:	68 6d 40 00 00       	push   $0x406d
+     6a1:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     6a7:	e8 44 34 00 00       	call   3af0 <printf>
   fd = open("big", O_CREATE|O_RDWR);
      6ac:	58                   	pop    %eax
      6ad:	5a                   	pop    %edx
      6ae:	68 02 02 00 00       	push   $0x202
-     6b3:	68 d7 40 00 00       	push   $0x40d7
+     6b3:	68 e7 40 00 00       	push   $0x40e7
      6b8:	e8 06 33 00 00       	call   39c3 <open>
   if(fd < 0){
      6bd:	83 c4 10             	add    $0x10,%esp
@@ -656,10 +656,10 @@
     if(write(fd, buf, 512) != 512){
      6d0:	83 ec 04             	sub    $0x4,%esp
     ((int*)buf)[0] = i;
-     6d3:	89 1d c0 86 00 00    	mov    %ebx,0x86c0
+     6d3:	89 1d e0 86 00 00    	mov    %ebx,0x86e0
     if(write(fd, buf, 512) != 512){
      6d9:	68 00 02 00 00       	push   $0x200
-     6de:	68 c0 86 00 00       	push   $0x86c0
+     6de:	68 e0 86 00 00       	push   $0x86e0
      6e3:	56                   	push   %esi
      6e4:	e8 ba 32 00 00       	call   39a3 <write>
      6e9:	83 c4 10             	add    $0x10,%esp
@@ -677,7 +677,7 @@
      70b:	5b                   	pop    %ebx
      70c:	5e                   	pop    %esi
      70d:	6a 00                	push   $0x0
-     70f:	68 d7 40 00 00       	push   $0x40d7
+     70f:	68 e7 40 00 00       	push   $0x40e7
      714:	e8 aa 32 00 00       	call   39c3 <open>
   if(fd < 0){
      719:	83 c4 10             	add    $0x10,%esp
@@ -694,7 +694,7 @@
      730:	3d 00 02 00 00       	cmp    $0x200,%eax
      735:	0f 85 9f 00 00 00    	jne    7da <writetest1+0x14a>
     if(((int*)buf)[0] != n){
-     73b:	a1 c0 86 00 00       	mov    0x86c0,%eax
+     73b:	a1 e0 86 00 00       	mov    0x86e0,%eax
      740:	39 f0                	cmp    %esi,%eax
      742:	75 7f                	jne    7c3 <writetest1+0x133>
     n++;
@@ -702,7 +702,7 @@
     i = read(fd, buf, 512);
      747:	83 ec 04             	sub    $0x4,%esp
      74a:	68 00 02 00 00       	push   $0x200
-     74f:	68 c0 86 00 00       	push   $0x86c0
+     74f:	68 e0 86 00 00       	push   $0x86e0
      754:	53                   	push   %ebx
      755:	e8 41 32 00 00       	call   399b <read>
     if(i == 0){
@@ -717,16 +717,16 @@
      770:	53                   	push   %ebx
      771:	e8 35 32 00 00       	call   39ab <close>
   if(unlink("big") < 0){
-     776:	c7 04 24 d7 40 00 00 	movl   $0x40d7,(%esp)
+     776:	c7 04 24 e7 40 00 00 	movl   $0x40e7,(%esp)
      77d:	e8 51 32 00 00       	call   39d3 <unlink>
      782:	83 c4 10             	add    $0x10,%esp
      785:	85 c0                	test   %eax,%eax
      787:	0f 88 af 00 00 00    	js     83c <writetest1+0x1ac>
   printf(stdout, "big files ok\n");
      78d:	83 ec 08             	sub    $0x8,%esp
-     790:	68 fe 40 00 00       	push   $0x40fe
-     795:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     79b:	e8 40 33 00 00       	call   3ae0 <printf>
+     790:	68 0e 41 00 00       	push   $0x410e
+     795:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     79b:	e8 50 33 00 00       	call   3af0 <printf>
 }
      7a0:	83 c4 10             	add    $0x10,%esp
      7a3:	8d 65 f8             	lea    -0x8(%ebp),%esp
@@ -737,57 +737,57 @@
       printf(stdout, "error: write big file failed\n", i);
      7aa:	83 ec 04             	sub    $0x4,%esp
      7ad:	53                   	push   %ebx
-     7ae:	68 87 40 00 00       	push   $0x4087
-     7b3:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     7b9:	e8 22 33 00 00       	call   3ae0 <printf>
+     7ae:	68 97 40 00 00       	push   $0x4097
+     7b3:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     7b9:	e8 32 33 00 00       	call   3af0 <printf>
       exit();
      7be:	e8 c0 31 00 00       	call   3983 <exit>
       printf(stdout, "read content of block %d is %d\n",
      7c3:	50                   	push   %eax
      7c4:	56                   	push   %esi
-     7c5:	68 d8 4e 00 00       	push   $0x4ed8
-     7ca:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     7d0:	e8 0b 33 00 00       	call   3ae0 <printf>
+     7c5:	68 e8 4e 00 00       	push   $0x4ee8
+     7ca:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     7d0:	e8 1b 33 00 00       	call   3af0 <printf>
       exit();
      7d5:	e8 a9 31 00 00       	call   3983 <exit>
       printf(stdout, "read failed %d\n", i);
      7da:	83 ec 04             	sub    $0x4,%esp
      7dd:	50                   	push   %eax
-     7de:	68 db 40 00 00       	push   $0x40db
-     7e3:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     7e9:	e8 f2 32 00 00       	call   3ae0 <printf>
+     7de:	68 eb 40 00 00       	push   $0x40eb
+     7e3:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     7e9:	e8 02 33 00 00       	call   3af0 <printf>
       exit();
      7ee:	e8 90 31 00 00       	call   3983 <exit>
         printf(stdout, "read only %d blocks from big", n);
      7f3:	52                   	push   %edx
      7f4:	68 8b 00 00 00       	push   $0x8b
-     7f9:	68 be 40 00 00       	push   $0x40be
-     7fe:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     804:	e8 d7 32 00 00       	call   3ae0 <printf>
+     7f9:	68 ce 40 00 00       	push   $0x40ce
+     7fe:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     804:	e8 e7 32 00 00       	call   3af0 <printf>
         exit();
      809:	e8 75 31 00 00       	call   3983 <exit>
     printf(stdout, "error: open big failed!\n");
      80e:	51                   	push   %ecx
      80f:	51                   	push   %ecx
-     810:	68 a5 40 00 00       	push   $0x40a5
-     815:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     81b:	e8 c0 32 00 00       	call   3ae0 <printf>
+     810:	68 b5 40 00 00       	push   $0x40b5
+     815:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     81b:	e8 d0 32 00 00       	call   3af0 <printf>
     exit();
      820:	e8 5e 31 00 00       	call   3983 <exit>
     printf(stdout, "error: creat big failed!\n");
      825:	50                   	push   %eax
      826:	50                   	push   %eax
-     827:	68 6d 40 00 00       	push   $0x406d
-     82c:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     832:	e8 a9 32 00 00       	call   3ae0 <printf>
+     827:	68 7d 40 00 00       	push   $0x407d
+     82c:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     832:	e8 b9 32 00 00       	call   3af0 <printf>
     exit();
      837:	e8 47 31 00 00       	call   3983 <exit>
     printf(stdout, "unlink big failed\n");
      83c:	50                   	push   %eax
      83d:	50                   	push   %eax
-     83e:	68 eb 40 00 00       	push   $0x40eb
-     843:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     849:	e8 92 32 00 00       	call   3ae0 <printf>
+     83e:	68 fb 40 00 00       	push   $0x40fb
+     843:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     849:	e8 a2 32 00 00       	call   3af0 <printf>
     exit();
      84e:	e8 30 31 00 00       	call   3983 <exit>
      853:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -804,24 +804,24 @@
 {
      86d:	83 ec 0c             	sub    $0xc,%esp
   printf(stdout, "many creates, followed by unlink test\n");
-     870:	68 f8 4e 00 00       	push   $0x4ef8
-     875:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     87b:	e8 60 32 00 00       	call   3ae0 <printf>
+     870:	68 08 4f 00 00       	push   $0x4f08
+     875:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     87b:	e8 70 32 00 00       	call   3af0 <printf>
   name[0] = 'a';
-     880:	c6 05 c0 a6 00 00 61 	movb   $0x61,0xa6c0
+     880:	c6 05 e0 a6 00 00 61 	movb   $0x61,0xa6e0
   name[2] = '\0';
      887:	83 c4 10             	add    $0x10,%esp
-     88a:	c6 05 c2 a6 00 00 00 	movb   $0x0,0xa6c2
+     88a:	c6 05 e2 a6 00 00 00 	movb   $0x0,0xa6e2
   for(i = 0; i < 52; i++){
      891:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     fd = open(name, O_CREATE|O_RDWR);
      898:	83 ec 08             	sub    $0x8,%esp
     name[1] = '0' + i;
-     89b:	88 1d c1 a6 00 00    	mov    %bl,0xa6c1
+     89b:	88 1d e1 a6 00 00    	mov    %bl,0xa6e1
     fd = open(name, O_CREATE|O_RDWR);
      8a1:	83 c3 01             	add    $0x1,%ebx
      8a4:	68 02 02 00 00       	push   $0x202
-     8a9:	68 c0 a6 00 00       	push   $0xa6c0
+     8a9:	68 e0 a6 00 00       	push   $0xa6e0
      8ae:	e8 10 31 00 00       	call   39c3 <open>
     close(fd);
      8b3:	89 04 24             	mov    %eax,(%esp)
@@ -831,20 +831,20 @@
      8be:	80 fb 64             	cmp    $0x64,%bl
      8c1:	75 d5                	jne    898 <createtest+0x38>
   name[0] = 'a';
-     8c3:	c6 05 c0 a6 00 00 61 	movb   $0x61,0xa6c0
+     8c3:	c6 05 e0 a6 00 00 61 	movb   $0x61,0xa6e0
   name[2] = '\0';
      8ca:	bb 30 00 00 00       	mov    $0x30,%ebx
-     8cf:	c6 05 c2 a6 00 00 00 	movb   $0x0,0xa6c2
+     8cf:	c6 05 e2 a6 00 00 00 	movb   $0x0,0xa6e2
   for(i = 0; i < 52; i++){
      8d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      8dd:	8d 76 00             	lea    0x0(%esi),%esi
     unlink(name);
      8e0:	83 ec 0c             	sub    $0xc,%esp
     name[1] = '0' + i;
-     8e3:	88 1d c1 a6 00 00    	mov    %bl,0xa6c1
+     8e3:	88 1d e1 a6 00 00    	mov    %bl,0xa6e1
     unlink(name);
      8e9:	83 c3 01             	add    $0x1,%ebx
-     8ec:	68 c0 a6 00 00       	push   $0xa6c0
+     8ec:	68 e0 a6 00 00       	push   $0xa6e0
      8f1:	e8 dd 30 00 00       	call   39d3 <unlink>
   for(i = 0; i < 52; i++){
      8f6:	83 c4 10             	add    $0x10,%esp
@@ -852,9 +852,9 @@
      8fc:	75 e2                	jne    8e0 <createtest+0x80>
   printf(stdout, "many creates, followed by unlink; ok\n");
      8fe:	83 ec 08             	sub    $0x8,%esp
-     901:	68 20 4f 00 00       	push   $0x4f20
-     906:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     90c:	e8 cf 31 00 00       	call   3ae0 <printf>
+     901:	68 30 4f 00 00       	push   $0x4f30
+     906:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     90c:	e8 df 31 00 00       	call   3af0 <printf>
 }
      911:	8b 5d fc             	mov    -0x4(%ebp),%ebx
      914:	83 c4 10             	add    $0x10,%esp
@@ -869,41 +869,41 @@
      925:	89 e5                	mov    %esp,%ebp
      927:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "mkdir test\n");
-     92a:	68 0c 41 00 00       	push   $0x410c
-     92f:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     935:	e8 a6 31 00 00       	call   3ae0 <printf>
+     92a:	68 1c 41 00 00       	push   $0x411c
+     92f:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     935:	e8 b6 31 00 00       	call   3af0 <printf>
   if(mkdir("dir0") < 0){
-     93a:	c7 04 24 18 41 00 00 	movl   $0x4118,(%esp)
+     93a:	c7 04 24 28 41 00 00 	movl   $0x4128,(%esp)
      941:	e8 a5 30 00 00       	call   39eb <mkdir>
      946:	83 c4 10             	add    $0x10,%esp
      949:	85 c0                	test   %eax,%eax
      94b:	78 58                	js     9a5 <dirtest+0x85>
   if(chdir("dir0") < 0){
      94d:	83 ec 0c             	sub    $0xc,%esp
-     950:	68 18 41 00 00       	push   $0x4118
+     950:	68 28 41 00 00       	push   $0x4128
      955:	e8 99 30 00 00       	call   39f3 <chdir>
      95a:	83 c4 10             	add    $0x10,%esp
      95d:	85 c0                	test   %eax,%eax
      95f:	0f 88 85 00 00 00    	js     9ea <dirtest+0xca>
   if(chdir("..") < 0){
      965:	83 ec 0c             	sub    $0xc,%esp
-     968:	68 bd 46 00 00       	push   $0x46bd
+     968:	68 cd 46 00 00       	push   $0x46cd
      96d:	e8 81 30 00 00       	call   39f3 <chdir>
      972:	83 c4 10             	add    $0x10,%esp
      975:	85 c0                	test   %eax,%eax
      977:	78 5a                	js     9d3 <dirtest+0xb3>
   if(unlink("dir0") < 0){
      979:	83 ec 0c             	sub    $0xc,%esp
-     97c:	68 18 41 00 00       	push   $0x4118
+     97c:	68 28 41 00 00       	push   $0x4128
      981:	e8 4d 30 00 00       	call   39d3 <unlink>
      986:	83 c4 10             	add    $0x10,%esp
      989:	85 c0                	test   %eax,%eax
      98b:	78 2f                	js     9bc <dirtest+0x9c>
   printf(stdout, "mkdir test ok\n");
      98d:	83 ec 08             	sub    $0x8,%esp
-     990:	68 55 41 00 00       	push   $0x4155
-     995:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     99b:	e8 40 31 00 00       	call   3ae0 <printf>
+     990:	68 65 41 00 00       	push   $0x4165
+     995:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     99b:	e8 50 31 00 00       	call   3af0 <printf>
 }
      9a0:	83 c4 10             	add    $0x10,%esp
      9a3:	c9                   	leave  
@@ -911,33 +911,33 @@
     printf(stdout, "mkdir failed\n");
      9a5:	50                   	push   %eax
      9a6:	50                   	push   %eax
-     9a7:	68 48 3e 00 00       	push   $0x3e48
-     9ac:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     9b2:	e8 29 31 00 00       	call   3ae0 <printf>
+     9a7:	68 58 3e 00 00       	push   $0x3e58
+     9ac:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     9b2:	e8 39 31 00 00       	call   3af0 <printf>
     exit();
      9b7:	e8 c7 2f 00 00       	call   3983 <exit>
     printf(stdout, "unlink dir0 failed\n");
      9bc:	50                   	push   %eax
      9bd:	50                   	push   %eax
-     9be:	68 41 41 00 00       	push   $0x4141
-     9c3:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     9c9:	e8 12 31 00 00       	call   3ae0 <printf>
+     9be:	68 51 41 00 00       	push   $0x4151
+     9c3:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     9c9:	e8 22 31 00 00       	call   3af0 <printf>
     exit();
      9ce:	e8 b0 2f 00 00       	call   3983 <exit>
     printf(stdout, "chdir .. failed\n");
      9d3:	52                   	push   %edx
      9d4:	52                   	push   %edx
-     9d5:	68 30 41 00 00       	push   $0x4130
-     9da:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     9e0:	e8 fb 30 00 00       	call   3ae0 <printf>
+     9d5:	68 40 41 00 00       	push   $0x4140
+     9da:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     9e0:	e8 0b 31 00 00       	call   3af0 <printf>
     exit();
      9e5:	e8 99 2f 00 00       	call   3983 <exit>
     printf(stdout, "chdir dir0 failed\n");
      9ea:	51                   	push   %ecx
      9eb:	51                   	push   %ecx
-     9ec:	68 1d 41 00 00       	push   $0x411d
-     9f1:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     9f7:	e8 e4 30 00 00       	call   3ae0 <printf>
+     9ec:	68 2d 41 00 00       	push   $0x412d
+     9f1:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     9f7:	e8 f4 30 00 00       	call   3af0 <printf>
     exit();
      9fc:	e8 82 2f 00 00       	call   3983 <exit>
      a01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -951,14 +951,14 @@
      a15:	89 e5                	mov    %esp,%ebp
      a17:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "exec test\n");
-     a1a:	68 64 41 00 00       	push   $0x4164
-     a1f:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     a25:	e8 b6 30 00 00       	call   3ae0 <printf>
+     a1a:	68 74 41 00 00       	push   $0x4174
+     a1f:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     a25:	e8 c6 30 00 00       	call   3af0 <printf>
   if(exec("echo", echoargv) < 0){
      a2a:	5a                   	pop    %edx
      a2b:	59                   	pop    %ecx
-     a2c:	68 e4 5e 00 00       	push   $0x5ee4
-     a31:	68 2d 3f 00 00       	push   $0x3f2d
+     a2c:	68 f4 5e 00 00       	push   $0x5ef4
+     a31:	68 3d 3f 00 00       	push   $0x3f3d
      a36:	e8 80 2f 00 00       	call   39bb <exec>
      a3b:	83 c4 10             	add    $0x10,%esp
      a3e:	85 c0                	test   %eax,%eax
@@ -969,9 +969,9 @@
     printf(stdout, "exec echo failed\n");
      a44:	50                   	push   %eax
      a45:	50                   	push   %eax
-     a46:	68 6f 41 00 00       	push   $0x416f
-     a4b:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-     a51:	e8 8a 30 00 00       	call   3ae0 <printf>
+     a46:	68 7f 41 00 00       	push   $0x417f
+     a4b:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     a51:	e8 9a 30 00 00       	call   3af0 <printf>
     exit();
      a56:	e8 28 2f 00 00       	call   3983 <exit>
      a5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -1017,7 +1017,7 @@
      aad:	83 c4 10             	add    $0x10,%esp
      ab0:	83 ec 04             	sub    $0x4,%esp
      ab3:	56                   	push   %esi
-     ab4:	68 c0 86 00 00       	push   $0x86c0
+     ab4:	68 e0 86 00 00       	push   $0x86e0
      ab9:	ff 75 e0             	pushl  -0x20(%ebp)
      abc:	e8 da 2e 00 00       	call   399b <read>
      ac1:	83 c4 10             	add    $0x10,%esp
@@ -1032,7 +1032,7 @@
         if((buf[i] & 0xff) != (seq++ & 0xff)){
      ad8:	89 da                	mov    %ebx,%edx
      ada:	83 c3 01             	add    $0x1,%ebx
-     add:	38 90 c0 86 00 00    	cmp    %dl,0x86c0(%eax)
+     add:	38 90 e0 86 00 00    	cmp    %dl,0x86e0(%eax)
      ae3:	75 1c                	jne    b01 <pipe1+0xa1>
       for(i = 0; i < n; i++){
      ae5:	83 c0 01             	add    $0x1,%eax
@@ -1048,9 +1048,9 @@
      aff:	eb af                	jmp    ab0 <pipe1+0x50>
           printf(1, "pipe1 oops 2\n");
      b01:	83 ec 08             	sub    $0x8,%esp
-     b04:	68 9e 41 00 00       	push   $0x419e
+     b04:	68 ae 41 00 00       	push   $0x41ae
      b09:	6a 01                	push   $0x1
-     b0b:	e8 d0 2f 00 00       	call   3ae0 <printf>
+     b0b:	e8 e0 2f 00 00       	call   3af0 <printf>
           return;
      b10:	83 c4 10             	add    $0x10,%esp
 }
@@ -1076,7 +1076,7 @@
       for(i = 0; i < 1033; i++)
      b33:	83 c0 01             	add    $0x1,%eax
         buf[i] = seq++;
-     b36:	88 90 bf 86 00 00    	mov    %dl,0x86bf(%eax)
+     b36:	88 90 df 86 00 00    	mov    %dl,0x86df(%eax)
       for(i = 0; i < 1033; i++)
      b3c:	3d 09 04 00 00       	cmp    $0x409,%eax
      b41:	75 ed                	jne    b30 <pipe1+0xd0>
@@ -1084,7 +1084,7 @@
      b43:	83 ec 04             	sub    $0x4,%esp
      b46:	81 c3 09 04 00 00    	add    $0x409,%ebx
      b4c:	68 09 04 00 00       	push   $0x409
-     b51:	68 c0 86 00 00       	push   $0x86c0
+     b51:	68 e0 86 00 00       	push   $0x86e0
      b56:	ff 75 e4             	pushl  -0x1c(%ebp)
      b59:	e8 45 2e 00 00       	call   39a3 <write>
      b5e:	83 c4 10             	add    $0x10,%esp
@@ -1107,41 +1107,41 @@
   printf(1, "pipe1 ok\n");
      b8e:	5a                   	pop    %edx
      b8f:	59                   	pop    %ecx
-     b90:	68 c3 41 00 00       	push   $0x41c3
+     b90:	68 d3 41 00 00       	push   $0x41d3
      b95:	6a 01                	push   $0x1
-     b97:	e8 44 2f 00 00       	call   3ae0 <printf>
+     b97:	e8 54 2f 00 00       	call   3af0 <printf>
      b9c:	83 c4 10             	add    $0x10,%esp
      b9f:	e9 6f ff ff ff       	jmp    b13 <pipe1+0xb3>
       printf(1, "pipe1 oops 3 total %d\n", total);
      ba4:	53                   	push   %ebx
      ba5:	ff 75 d4             	pushl  -0x2c(%ebp)
-     ba8:	68 ac 41 00 00       	push   $0x41ac
+     ba8:	68 bc 41 00 00       	push   $0x41bc
      bad:	6a 01                	push   $0x1
-     baf:	e8 2c 2f 00 00       	call   3ae0 <printf>
+     baf:	e8 3c 2f 00 00       	call   3af0 <printf>
       exit();
      bb4:	e8 ca 2d 00 00       	call   3983 <exit>
     printf(1, "pipe() failed\n");
      bb9:	57                   	push   %edi
      bba:	57                   	push   %edi
-     bbb:	68 81 41 00 00       	push   $0x4181
+     bbb:	68 91 41 00 00       	push   $0x4191
      bc0:	6a 01                	push   $0x1
-     bc2:	e8 19 2f 00 00       	call   3ae0 <printf>
+     bc2:	e8 29 2f 00 00       	call   3af0 <printf>
     exit();
      bc7:	e8 b7 2d 00 00       	call   3983 <exit>
     printf(1, "fork() failed\n");
      bcc:	50                   	push   %eax
      bcd:	50                   	push   %eax
-     bce:	68 cd 41 00 00       	push   $0x41cd
+     bce:	68 dd 41 00 00       	push   $0x41dd
      bd3:	6a 01                	push   $0x1
-     bd5:	e8 06 2f 00 00       	call   3ae0 <printf>
+     bd5:	e8 16 2f 00 00       	call   3af0 <printf>
     exit();
      bda:	e8 a4 2d 00 00       	call   3983 <exit>
         printf(1, "pipe1 oops 1\n");
      bdf:	56                   	push   %esi
      be0:	56                   	push   %esi
-     be1:	68 90 41 00 00       	push   $0x4190
+     be1:	68 a0 41 00 00       	push   $0x41a0
      be6:	6a 01                	push   $0x1
-     be8:	e8 f3 2e 00 00       	call   3ae0 <printf>
+     be8:	e8 03 2f 00 00       	call   3af0 <printf>
         exit();
      bed:	e8 91 2d 00 00       	call   3983 <exit>
      bf2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -1157,9 +1157,9 @@
      c09:	53                   	push   %ebx
      c0a:	83 ec 24             	sub    $0x24,%esp
   printf(1, "preempt: ");
-     c0d:	68 dc 41 00 00       	push   $0x41dc
+     c0d:	68 ec 41 00 00       	push   $0x41ec
      c12:	6a 01                	push   $0x1
-     c14:	e8 c7 2e 00 00       	call   3ae0 <printf>
+     c14:	e8 d7 2e 00 00       	call   3af0 <printf>
   pid1 = fork();
      c19:	e8 5d 2d 00 00       	call   397b <fork>
   if(pid1 == 0)
@@ -1201,7 +1201,7 @@
     if(write(pfds[1], "x", 1) != 1)
      c65:	83 c4 0c             	add    $0xc,%esp
      c68:	6a 01                	push   $0x1
-     c6a:	68 a1 47 00 00       	push   $0x47a1
+     c6a:	68 b1 47 00 00       	push   $0x47b1
      c6f:	ff 75 e4             	pushl  -0x1c(%ebp)
      c72:	e8 2c 2d 00 00       	call   39a3 <write>
      c77:	83 c4 10             	add    $0x10,%esp
@@ -1223,7 +1223,7 @@
   if(read(pfds[0], buf, sizeof(buf)) != 1){
      ca3:	83 c4 0c             	add    $0xc,%esp
      ca6:	68 00 20 00 00       	push   $0x2000
-     cab:	68 c0 86 00 00       	push   $0x86c0
+     cab:	68 e0 86 00 00       	push   $0x86e0
      cb0:	ff 75 e0             	pushl  -0x20(%ebp)
      cb3:	e8 e3 2c 00 00       	call   399b <read>
      cb8:	83 c4 10             	add    $0x10,%esp
@@ -1236,9 +1236,9 @@
   printf(1, "kill... ");
      ccb:	58                   	pop    %eax
      ccc:	5a                   	pop    %edx
-     ccd:	68 0d 42 00 00       	push   $0x420d
+     ccd:	68 1d 42 00 00       	push   $0x421d
      cd2:	6a 01                	push   $0x1
-     cd4:	e8 07 2e 00 00       	call   3ae0 <printf>
+     cd4:	e8 17 2e 00 00       	call   3af0 <printf>
   kill(pid1);
      cd9:	89 3c 24             	mov    %edi,(%esp)
      cdc:	e8 d2 2c 00 00       	call   39b3 <kill>
@@ -1251,9 +1251,9 @@
   printf(1, "wait... ");
      cf1:	59                   	pop    %ecx
      cf2:	5b                   	pop    %ebx
-     cf3:	68 16 42 00 00       	push   $0x4216
+     cf3:	68 26 42 00 00       	push   $0x4226
      cf8:	6a 01                	push   $0x1
-     cfa:	e8 e1 2d 00 00       	call   3ae0 <printf>
+     cfa:	e8 f1 2d 00 00       	call   3af0 <printf>
   wait();
      cff:	e8 87 2c 00 00       	call   398b <wait>
   wait();
@@ -1263,9 +1263,9 @@
   printf(1, "preempt ok\n");
      d0e:	5e                   	pop    %esi
      d0f:	5f                   	pop    %edi
-     d10:	68 1f 42 00 00       	push   $0x421f
+     d10:	68 2f 42 00 00       	push   $0x422f
      d15:	6a 01                	push   $0x1
-     d17:	e8 c4 2d 00 00       	call   3ae0 <printf>
+     d17:	e8 d4 2d 00 00       	call   3af0 <printf>
      d1c:	83 c4 10             	add    $0x10,%esp
 }
      d1f:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -1276,16 +1276,16 @@
      d26:	c3                   	ret    
       printf(1, "preempt write error");
      d27:	83 ec 08             	sub    $0x8,%esp
-     d2a:	68 e6 41 00 00       	push   $0x41e6
+     d2a:	68 f6 41 00 00       	push   $0x41f6
      d2f:	6a 01                	push   $0x1
-     d31:	e8 aa 2d 00 00       	call   3ae0 <printf>
+     d31:	e8 ba 2d 00 00       	call   3af0 <printf>
      d36:	83 c4 10             	add    $0x10,%esp
      d39:	e9 45 ff ff ff       	jmp    c83 <preempt+0x83>
     printf(1, "preempt read error");
      d3e:	83 ec 08             	sub    $0x8,%esp
-     d41:	68 fa 41 00 00       	push   $0x41fa
+     d41:	68 0a 42 00 00       	push   $0x420a
      d46:	6a 01                	push   $0x1
-     d48:	e8 93 2d 00 00       	call   3ae0 <printf>
+     d48:	e8 a3 2d 00 00       	call   3af0 <printf>
     return;
      d4d:	83 c4 10             	add    $0x10,%esp
      d50:	eb cd                	jmp    d1f <preempt+0x11f>
@@ -1318,9 +1318,9 @@
      d89:	79 e5                	jns    d70 <exitwait+0x10>
       printf(1, "fork failed\n");
      d8b:	83 ec 08             	sub    $0x8,%esp
-     d8e:	68 89 4d 00 00       	push   $0x4d89
+     d8e:	68 99 4d 00 00       	push   $0x4d99
      d93:	6a 01                	push   $0x1
-     d95:	e8 46 2d 00 00       	call   3ae0 <printf>
+     d95:	e8 56 2d 00 00       	call   3af0 <printf>
       return;
      d9a:	83 c4 10             	add    $0x10,%esp
 }
@@ -1332,9 +1332,9 @@
      da4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         printf(1, "wait wrong pid\n");
      da8:	83 ec 08             	sub    $0x8,%esp
-     dab:	68 2b 42 00 00       	push   $0x422b
+     dab:	68 3b 42 00 00       	push   $0x423b
      db0:	6a 01                	push   $0x1
-     db2:	e8 29 2d 00 00       	call   3ae0 <printf>
+     db2:	e8 39 2d 00 00       	call   3af0 <printf>
         return;
      db7:	83 c4 10             	add    $0x10,%esp
 }
@@ -1345,9 +1345,9 @@
      dc0:	c3                   	ret    
   printf(1, "exitwait ok\n");
      dc1:	83 ec 08             	sub    $0x8,%esp
-     dc4:	68 3b 42 00 00       	push   $0x423b
+     dc4:	68 4b 42 00 00       	push   $0x424b
      dc9:	6a 01                	push   $0x1
-     dcb:	e8 10 2d 00 00       	call   3ae0 <printf>
+     dcb:	e8 20 2d 00 00       	call   3af0 <printf>
      dd0:	83 c4 10             	add    $0x10,%esp
 }
      dd3:	8d 65 f8             	lea    -0x8(%ebp),%esp
@@ -1369,9 +1369,9 @@
      dea:	53                   	push   %ebx
   printf(1, "mem test\n");
      deb:	83 ec 08             	sub    $0x8,%esp
-     dee:	68 48 42 00 00       	push   $0x4248
+     dee:	68 58 42 00 00       	push   $0x4258
      df3:	6a 01                	push   $0x1
-     df5:	e8 e6 2c 00 00       	call   3ae0 <printf>
+     df5:	e8 f6 2c 00 00       	call   3af0 <printf>
   ppid = getpid();
      dfa:	e8 04 2c 00 00       	call   3a03 <getpid>
      dff:	89 c3                	mov    %eax,%ebx
@@ -1388,7 +1388,7 @@
     while((m2 = malloc(10001)) != 0){
      e1c:	83 ec 0c             	sub    $0xc,%esp
      e1f:	68 11 27 00 00       	push   $0x2711
-     e24:	e8 17 2f 00 00       	call   3d40 <malloc>
+     e24:	e8 27 2f 00 00       	call   3d50 <malloc>
      e29:	83 c4 10             	add    $0x10,%esp
      e2c:	85 c0                	test   %eax,%eax
      e2e:	75 e8                	jne    e18 <mem+0x38>
@@ -1404,7 +1404,7 @@
      e3d:	8b 36                	mov    (%esi),%esi
       free(m1);
      e3f:	50                   	push   %eax
-     e40:	e8 6b 2e 00 00       	call   3cb0 <free>
+     e40:	e8 7b 2e 00 00       	call   3cc0 <free>
     while(m1){
      e45:	83 c4 10             	add    $0x10,%esp
      e48:	85 f6                	test   %esi,%esi
@@ -1412,7 +1412,7 @@
     m1 = malloc(1024*20);
      e4c:	83 ec 0c             	sub    $0xc,%esp
      e4f:	68 00 50 00 00       	push   $0x5000
-     e54:	e8 e7 2e 00 00       	call   3d40 <malloc>
+     e54:	e8 f7 2e 00 00       	call   3d50 <malloc>
     if(m1 == 0){
      e59:	83 c4 10             	add    $0x10,%esp
      e5c:	85 c0                	test   %eax,%eax
@@ -1420,21 +1420,21 @@
     free(m1);
      e60:	83 ec 0c             	sub    $0xc,%esp
      e63:	50                   	push   %eax
-     e64:	e8 47 2e 00 00       	call   3cb0 <free>
+     e64:	e8 57 2e 00 00       	call   3cc0 <free>
     printf(1, "mem ok\n");
      e69:	58                   	pop    %eax
      e6a:	5a                   	pop    %edx
-     e6b:	68 6c 42 00 00       	push   $0x426c
+     e6b:	68 7c 42 00 00       	push   $0x427c
      e70:	6a 01                	push   $0x1
-     e72:	e8 69 2c 00 00       	call   3ae0 <printf>
+     e72:	e8 79 2c 00 00       	call   3af0 <printf>
     exit();
      e77:	e8 07 2b 00 00       	call   3983 <exit>
      e7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       printf(1, "couldn't allocate mem?!!\n");
      e80:	83 ec 08             	sub    $0x8,%esp
-     e83:	68 52 42 00 00       	push   $0x4252
+     e83:	68 62 42 00 00       	push   $0x4262
      e88:	6a 01                	push   $0x1
-     e8a:	e8 51 2c 00 00       	call   3ae0 <printf>
+     e8a:	e8 61 2c 00 00       	call   3af0 <printf>
       kill(ppid);
      e8f:	89 1c 24             	mov    %ebx,(%esp)
      e92:	e8 1c 2b 00 00       	call   39b3 <kill>
@@ -1461,17 +1461,17 @@
      eb9:	53                   	push   %ebx
      eba:	83 ec 34             	sub    $0x34,%esp
   printf(1, "sharedfd test\n");
-     ebd:	68 74 42 00 00       	push   $0x4274
+     ebd:	68 84 42 00 00       	push   $0x4284
      ec2:	6a 01                	push   $0x1
-     ec4:	e8 17 2c 00 00       	call   3ae0 <printf>
+     ec4:	e8 27 2c 00 00       	call   3af0 <printf>
   unlink("sharedfd");
-     ec9:	c7 04 24 83 42 00 00 	movl   $0x4283,(%esp)
+     ec9:	c7 04 24 93 42 00 00 	movl   $0x4293,(%esp)
      ed0:	e8 fe 2a 00 00       	call   39d3 <unlink>
   fd = open("sharedfd", O_CREATE|O_RDWR);
      ed5:	5b                   	pop    %ebx
      ed6:	5e                   	pop    %esi
      ed7:	68 02 02 00 00       	push   $0x202
-     edc:	68 83 42 00 00       	push   $0x4283
+     edc:	68 93 42 00 00       	push   $0x4293
      ee1:	e8 dd 2a 00 00       	call   39c3 <open>
   if(fd < 0){
      ee6:	83 c4 10             	add    $0x10,%esp
@@ -1513,9 +1513,9 @@
      f37:	74 e7                	je     f20 <sharedfd+0x70>
       printf(1, "fstests: write sharedfd failed\n");
      f39:	83 ec 08             	sub    $0x8,%esp
-     f3c:	68 74 4f 00 00       	push   $0x4f74
+     f3c:	68 84 4f 00 00       	push   $0x4f84
      f41:	6a 01                	push   $0x1
-     f43:	e8 98 2b 00 00       	call   3ae0 <printf>
+     f43:	e8 a8 2b 00 00       	call   3af0 <printf>
       break;
      f48:	83 c4 10             	add    $0x10,%esp
   if(pid == 0)
@@ -1536,7 +1536,7 @@
      f69:	58                   	pop    %eax
      f6a:	5a                   	pop    %edx
      f6b:	6a 00                	push   $0x0
-     f6d:	68 83 42 00 00       	push   $0x4283
+     f6d:	68 93 42 00 00       	push   $0x4293
      f72:	e8 4c 2a 00 00       	call   39c3 <open>
   if(fd < 0){
      f77:	83 c4 10             	add    $0x10,%esp
@@ -1587,7 +1587,7 @@
      fd3:	ff 75 d0             	pushl  -0x30(%ebp)
      fd6:	e8 d0 29 00 00       	call   39ab <close>
   unlink("sharedfd");
-     fdb:	c7 04 24 83 42 00 00 	movl   $0x4283,(%esp)
+     fdb:	c7 04 24 93 42 00 00 	movl   $0x4293,(%esp)
      fe2:	e8 ec 29 00 00       	call   39d3 <unlink>
   if(nc == 10000 && np == 10000){
      fe7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
@@ -1598,9 +1598,9 @@
      ffb:	75 53                	jne    1050 <sharedfd+0x1a0>
     printf(1, "sharedfd ok\n");
      ffd:	83 ec 08             	sub    $0x8,%esp
-    1000:	68 8c 42 00 00       	push   $0x428c
+    1000:	68 9c 42 00 00       	push   $0x429c
     1005:	6a 01                	push   $0x1
-    1007:	e8 d4 2a 00 00       	call   3ae0 <printf>
+    1007:	e8 e4 2a 00 00       	call   3af0 <printf>
     100c:	83 c4 10             	add    $0x10,%esp
 }
     100f:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -1611,9 +1611,9 @@
     1016:	c3                   	ret    
     printf(1, "fstests: cannot open sharedfd for writing");
     1017:	83 ec 08             	sub    $0x8,%esp
-    101a:	68 48 4f 00 00       	push   $0x4f48
+    101a:	68 58 4f 00 00       	push   $0x4f58
     101f:	6a 01                	push   $0x1
-    1021:	e8 ba 2a 00 00       	call   3ae0 <printf>
+    1021:	e8 ca 2a 00 00       	call   3af0 <printf>
     return;
     1026:	83 c4 10             	add    $0x10,%esp
 }
@@ -1625,9 +1625,9 @@
     1030:	c3                   	ret    
     printf(1, "fstests: cannot open sharedfd for reading\n");
     1031:	83 ec 08             	sub    $0x8,%esp
-    1034:	68 94 4f 00 00       	push   $0x4f94
+    1034:	68 a4 4f 00 00       	push   $0x4fa4
     1039:	6a 01                	push   $0x1
-    103b:	e8 a0 2a 00 00       	call   3ae0 <printf>
+    103b:	e8 b0 2a 00 00       	call   3af0 <printf>
     return;
     1040:	83 c4 10             	add    $0x10,%esp
 }
@@ -1642,9 +1642,9 @@
     printf(1, "sharedfd oops %d %d\n", nc, np);
     1050:	53                   	push   %ebx
     1051:	52                   	push   %edx
-    1052:	68 99 42 00 00       	push   $0x4299
+    1052:	68 a9 42 00 00       	push   $0x42a9
     1057:	6a 01                	push   $0x1
-    1059:	e8 82 2a 00 00       	call   3ae0 <printf>
+    1059:	e8 92 2a 00 00       	call   3af0 <printf>
     exit();
     105e:	e8 20 29 00 00       	call   3983 <exit>
     1063:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -1658,7 +1658,7 @@
     1077:	57                   	push   %edi
     1078:	56                   	push   %esi
   printf(1, "fourfiles test\n");
-    1079:	be ae 42 00 00       	mov    $0x42ae,%esi
+    1079:	be be 42 00 00       	mov    $0x42be,%esi
 {
     107e:	53                   	push   %ebx
   for(pi = 0; pi < 4; pi++){
@@ -1666,16 +1666,16 @@
 {
     1081:	83 ec 34             	sub    $0x34,%esp
   char *names[] = { "f0", "f1", "f2", "f3" };
-    1084:	c7 45 d8 ae 42 00 00 	movl   $0x42ae,-0x28(%ebp)
+    1084:	c7 45 d8 be 42 00 00 	movl   $0x42be,-0x28(%ebp)
   printf(1, "fourfiles test\n");
-    108b:	68 b4 42 00 00       	push   $0x42b4
+    108b:	68 c4 42 00 00       	push   $0x42c4
     1090:	6a 01                	push   $0x1
   char *names[] = { "f0", "f1", "f2", "f3" };
-    1092:	c7 45 dc f7 43 00 00 	movl   $0x43f7,-0x24(%ebp)
-    1099:	c7 45 e0 fb 43 00 00 	movl   $0x43fb,-0x20(%ebp)
-    10a0:	c7 45 e4 b1 42 00 00 	movl   $0x42b1,-0x1c(%ebp)
+    1092:	c7 45 dc 07 44 00 00 	movl   $0x4407,-0x24(%ebp)
+    1099:	c7 45 e0 0b 44 00 00 	movl   $0x440b,-0x20(%ebp)
+    10a0:	c7 45 e4 c1 42 00 00 	movl   $0x42c1,-0x1c(%ebp)
   printf(1, "fourfiles test\n");
-    10a7:	e8 34 2a 00 00       	call   3ae0 <printf>
+    10a7:	e8 44 2a 00 00       	call   3af0 <printf>
     10ac:	83 c4 10             	add    $0x10,%esp
     unlink(fname);
     10af:	83 ec 0c             	sub    $0xc,%esp
@@ -1724,7 +1724,7 @@
     110c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     1110:	83 ec 04             	sub    $0x4,%esp
     1113:	68 00 20 00 00       	push   $0x2000
-    1118:	68 c0 86 00 00       	push   $0x86c0
+    1118:	68 e0 86 00 00       	push   $0x86e0
     111d:	ff 75 d4             	pushl  -0x2c(%ebp)
     1120:	e8 76 28 00 00       	call   399b <read>
     1125:	83 c4 10             	add    $0x10,%esp
@@ -1735,7 +1735,7 @@
     112e:	66 90                	xchg   %ax,%ax
         if(buf[j] != '0'+i){
     1130:	83 fe 01             	cmp    $0x1,%esi
-    1133:	0f be ba c0 86 00 00 	movsbl 0x86c0(%edx),%edi
+    1133:	0f be ba e0 86 00 00 	movsbl 0x86e0(%edx),%edi
     113a:	19 c9                	sbb    %ecx,%ecx
     113c:	83 c1 31             	add    $0x31,%ecx
     113f:	39 cf                	cmp    %ecx,%edi
@@ -1765,9 +1765,9 @@
     1179:	75 1a                	jne    1195 <fourfiles+0x125>
   printf(1, "fourfiles ok\n");
     117b:	83 ec 08             	sub    $0x8,%esp
-    117e:	68 f2 42 00 00       	push   $0x42f2
+    117e:	68 02 43 00 00       	push   $0x4302
     1183:	6a 01                	push   $0x1
-    1185:	e8 56 29 00 00       	call   3ae0 <printf>
+    1185:	e8 66 29 00 00       	call   3af0 <printf>
 }
     118a:	83 c4 10             	add    $0x10,%esp
     118d:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -1780,9 +1780,9 @@
     119a:	e9 53 ff ff ff       	jmp    10f2 <fourfiles+0x82>
           printf(1, "wrong char\n");
     119f:	83 ec 08             	sub    $0x8,%esp
-    11a2:	68 d5 42 00 00       	push   $0x42d5
+    11a2:	68 e5 42 00 00       	push   $0x42e5
     11a7:	6a 01                	push   $0x1
-    11a9:	e8 32 29 00 00       	call   3ae0 <printf>
+    11a9:	e8 42 29 00 00       	call   3af0 <printf>
           exit();
     11ae:	e8 d0 27 00 00       	call   3983 <exit>
       fd = open(fname, O_CREATE | O_RDWR);
@@ -1803,13 +1803,13 @@
     11d0:	68 00 02 00 00       	push   $0x200
     11d5:	53                   	push   %ebx
     11d6:	bb 0c 00 00 00       	mov    $0xc,%ebx
-    11db:	68 c0 86 00 00       	push   $0x86c0
+    11db:	68 e0 86 00 00       	push   $0x86e0
     11e0:	e8 fb 25 00 00       	call   37e0 <memset>
     11e5:	83 c4 10             	add    $0x10,%esp
         if((n = write(fd, buf, 500)) != 500){
     11e8:	83 ec 04             	sub    $0x4,%esp
     11eb:	68 f4 01 00 00       	push   $0x1f4
-    11f0:	68 c0 86 00 00       	push   $0x86c0
+    11f0:	68 e0 86 00 00       	push   $0x86e0
     11f5:	56                   	push   %esi
     11f6:	e8 a8 27 00 00       	call   39a3 <write>
     11fb:	83 c4 10             	add    $0x10,%esp
@@ -1823,33 +1823,33 @@
         printf(1, "create failed\n");
     120f:	51                   	push   %ecx
     1210:	51                   	push   %ecx
-    1211:	68 4f 45 00 00       	push   $0x454f
+    1211:	68 5f 45 00 00       	push   $0x455f
     1216:	6a 01                	push   $0x1
-    1218:	e8 c3 28 00 00       	call   3ae0 <printf>
+    1218:	e8 d3 28 00 00       	call   3af0 <printf>
         exit();
     121d:	e8 61 27 00 00       	call   3983 <exit>
     1222:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       printf(1, "fork failed\n");
     1228:	83 ec 08             	sub    $0x8,%esp
-    122b:	68 89 4d 00 00       	push   $0x4d89
+    122b:	68 99 4d 00 00       	push   $0x4d99
     1230:	6a 01                	push   $0x1
-    1232:	e8 a9 28 00 00       	call   3ae0 <printf>
+    1232:	e8 b9 28 00 00       	call   3af0 <printf>
       exit();
     1237:	e8 47 27 00 00       	call   3983 <exit>
       printf(1, "wrong length %d\n", total);
     123c:	50                   	push   %eax
     123d:	53                   	push   %ebx
-    123e:	68 e1 42 00 00       	push   $0x42e1
+    123e:	68 f1 42 00 00       	push   $0x42f1
     1243:	6a 01                	push   $0x1
-    1245:	e8 96 28 00 00       	call   3ae0 <printf>
+    1245:	e8 a6 28 00 00       	call   3af0 <printf>
       exit();
     124a:	e8 34 27 00 00       	call   3983 <exit>
           printf(1, "write failed %d\n", n);
     124f:	52                   	push   %edx
     1250:	50                   	push   %eax
-    1251:	68 c4 42 00 00       	push   $0x42c4
+    1251:	68 d4 42 00 00       	push   $0x42d4
     1256:	6a 01                	push   $0x1
-    1258:	e8 83 28 00 00       	call   3ae0 <printf>
+    1258:	e8 93 28 00 00       	call   3af0 <printf>
           exit();
     125d:	e8 21 27 00 00       	call   3983 <exit>
     1262:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -1868,9 +1868,9 @@
 {
     127c:	83 ec 44             	sub    $0x44,%esp
   printf(1, "createdelete test\n");
-    127f:	68 00 43 00 00       	push   $0x4300
+    127f:	68 10 43 00 00       	push   $0x4310
     1284:	6a 01                	push   $0x1
-    1286:	e8 55 28 00 00       	call   3ae0 <printf>
+    1286:	e8 65 28 00 00       	call   3af0 <printf>
     128b:	83 c4 10             	add    $0x10,%esp
     pid = fork();
     128e:	e8 e8 26 00 00       	call   397b <fork>
@@ -1977,9 +1977,9 @@
     137f:	75 cf                	jne    1350 <createdelete+0xe0>
   printf(1, "createdelete ok\n");
     1381:	83 ec 08             	sub    $0x8,%esp
-    1384:	68 13 43 00 00       	push   $0x4313
+    1384:	68 23 43 00 00       	push   $0x4323
     1389:	6a 01                	push   $0x1
-    138b:	e8 50 27 00 00       	call   3ae0 <printf>
+    138b:	e8 60 27 00 00       	call   3af0 <printf>
 }
     1390:	8d 65 f4             	lea    -0xc(%ebp),%esp
     1393:	5b                   	pop    %ebx
@@ -2055,9 +2055,9 @@
             printf(1, "unlink failed\n");
     1422:	52                   	push   %edx
     1423:	52                   	push   %edx
-    1424:	68 01 3f 00 00       	push   $0x3f01
+    1424:	68 11 3f 00 00       	push   $0x3f11
     1429:	6a 01                	push   $0x1
-    142b:	e8 b0 26 00 00       	call   3ae0 <printf>
+    142b:	e8 c0 26 00 00       	call   3af0 <printf>
             exit();
     1430:	e8 4e 25 00 00       	call   3983 <exit>
     1435:	8d 76 00             	lea    0x0(%esi),%esi
@@ -2067,23 +2067,23 @@
         printf(1, "oops createdelete %s didn't exist\n", name);
     1440:	83 ec 04             	sub    $0x4,%esp
     1443:	57                   	push   %edi
-    1444:	68 c0 4f 00 00       	push   $0x4fc0
+    1444:	68 d0 4f 00 00       	push   $0x4fd0
     1449:	6a 01                	push   $0x1
-    144b:	e8 90 26 00 00       	call   3ae0 <printf>
+    144b:	e8 a0 26 00 00       	call   3af0 <printf>
         exit();
     1450:	e8 2e 25 00 00       	call   3983 <exit>
           printf(1, "create failed\n");
     1455:	83 ec 08             	sub    $0x8,%esp
-    1458:	68 4f 45 00 00       	push   $0x454f
+    1458:	68 5f 45 00 00       	push   $0x455f
     145d:	6a 01                	push   $0x1
-    145f:	e8 7c 26 00 00       	call   3ae0 <printf>
+    145f:	e8 8c 26 00 00       	call   3af0 <printf>
           exit();
     1464:	e8 1a 25 00 00       	call   3983 <exit>
       printf(1, "fork failed\n");
     1469:	83 ec 08             	sub    $0x8,%esp
-    146c:	68 89 4d 00 00       	push   $0x4d89
+    146c:	68 99 4d 00 00       	push   $0x4d99
     1471:	6a 01                	push   $0x1
-    1473:	e8 68 26 00 00       	call   3ae0 <printf>
+    1473:	e8 78 26 00 00       	call   3af0 <printf>
       exit();
     1478:	e8 06 25 00 00       	call   3983 <exit>
       } else if((i >= 1 && i < N/2) && fd >= 0){
@@ -2093,9 +2093,9 @@
         printf(1, "oops createdelete %s did exist\n", name);
     1488:	50                   	push   %eax
     1489:	57                   	push   %edi
-    148a:	68 e4 4f 00 00       	push   $0x4fe4
+    148a:	68 f4 4f 00 00       	push   $0x4ff4
     148f:	6a 01                	push   $0x1
-    1491:	e8 4a 26 00 00       	call   3ae0 <printf>
+    1491:	e8 5a 26 00 00       	call   3af0 <printf>
         exit();
     1496:	e8 e8 24 00 00       	call   3983 <exit>
     149b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2110,14 +2110,14 @@
     14a8:	53                   	push   %ebx
   printf(1, "unlinkread test\n");
     14a9:	83 ec 08             	sub    $0x8,%esp
-    14ac:	68 24 43 00 00       	push   $0x4324
+    14ac:	68 34 43 00 00       	push   $0x4334
     14b1:	6a 01                	push   $0x1
-    14b3:	e8 28 26 00 00       	call   3ae0 <printf>
+    14b3:	e8 38 26 00 00       	call   3af0 <printf>
   fd = open("unlinkread", O_CREATE | O_RDWR);
     14b8:	5b                   	pop    %ebx
     14b9:	5e                   	pop    %esi
     14ba:	68 02 02 00 00       	push   $0x202
-    14bf:	68 35 43 00 00       	push   $0x4335
+    14bf:	68 45 43 00 00       	push   $0x4345
     14c4:	e8 fa 24 00 00       	call   39c3 <open>
   if(fd < 0){
     14c9:	83 c4 10             	add    $0x10,%esp
@@ -2127,7 +2127,7 @@
     14d4:	83 ec 04             	sub    $0x4,%esp
     14d7:	89 c3                	mov    %eax,%ebx
     14d9:	6a 05                	push   $0x5
-    14db:	68 5a 43 00 00       	push   $0x435a
+    14db:	68 6a 43 00 00       	push   $0x436a
     14e0:	50                   	push   %eax
     14e1:	e8 bd 24 00 00       	call   39a3 <write>
   close(fd);
@@ -2137,7 +2137,7 @@
     14ee:	58                   	pop    %eax
     14ef:	5a                   	pop    %edx
     14f0:	6a 02                	push   $0x2
-    14f2:	68 35 43 00 00       	push   $0x4335
+    14f2:	68 45 43 00 00       	push   $0x4345
     14f7:	e8 c7 24 00 00       	call   39c3 <open>
   if(fd < 0){
     14fc:	83 c4 10             	add    $0x10,%esp
@@ -2148,7 +2148,7 @@
     1503:	0f 88 10 01 00 00    	js     1619 <unlinkread+0x179>
   if(unlink("unlinkread") != 0){
     1509:	83 ec 0c             	sub    $0xc,%esp
-    150c:	68 35 43 00 00       	push   $0x4335
+    150c:	68 45 43 00 00       	push   $0x4345
     1511:	e8 bd 24 00 00       	call   39d3 <unlink>
     1516:	83 c4 10             	add    $0x10,%esp
     1519:	85 c0                	test   %eax,%eax
@@ -2156,7 +2156,7 @@
   fd1 = open("unlinkread", O_CREATE | O_RDWR);
     1521:	83 ec 08             	sub    $0x8,%esp
     1524:	68 02 02 00 00       	push   $0x202
-    1529:	68 35 43 00 00       	push   $0x4335
+    1529:	68 45 43 00 00       	push   $0x4345
     152e:	e8 90 24 00 00       	call   39c3 <open>
   write(fd1, "yyy", 3);
     1533:	83 c4 0c             	add    $0xc,%esp
@@ -2164,7 +2164,7 @@
   fd1 = open("unlinkread", O_CREATE | O_RDWR);
     1538:	89 c6                	mov    %eax,%esi
   write(fd1, "yyy", 3);
-    153a:	68 92 43 00 00       	push   $0x4392
+    153a:	68 a2 43 00 00       	push   $0x43a2
     153f:	50                   	push   %eax
     1540:	e8 5e 24 00 00       	call   39a3 <write>
   close(fd1);
@@ -2173,19 +2173,19 @@
   if(read(fd, buf, sizeof(buf)) != 5){
     154d:	83 c4 0c             	add    $0xc,%esp
     1550:	68 00 20 00 00       	push   $0x2000
-    1555:	68 c0 86 00 00       	push   $0x86c0
+    1555:	68 e0 86 00 00       	push   $0x86e0
     155a:	53                   	push   %ebx
     155b:	e8 3b 24 00 00       	call   399b <read>
     1560:	83 c4 10             	add    $0x10,%esp
     1563:	83 f8 05             	cmp    $0x5,%eax
     1566:	0f 85 87 00 00 00    	jne    15f3 <unlinkread+0x153>
   if(buf[0] != 'h'){
-    156c:	80 3d c0 86 00 00 68 	cmpb   $0x68,0x86c0
+    156c:	80 3d e0 86 00 00 68 	cmpb   $0x68,0x86e0
     1573:	75 6b                	jne    15e0 <unlinkread+0x140>
   if(write(fd, buf, 10) != 10){
     1575:	83 ec 04             	sub    $0x4,%esp
     1578:	6a 0a                	push   $0xa
-    157a:	68 c0 86 00 00       	push   $0x86c0
+    157a:	68 e0 86 00 00       	push   $0x86e0
     157f:	53                   	push   %ebx
     1580:	e8 1e 24 00 00       	call   39a3 <write>
     1585:	83 c4 10             	add    $0x10,%esp
@@ -2196,14 +2196,14 @@
     1590:	53                   	push   %ebx
     1591:	e8 15 24 00 00       	call   39ab <close>
   unlink("unlinkread");
-    1596:	c7 04 24 35 43 00 00 	movl   $0x4335,(%esp)
+    1596:	c7 04 24 45 43 00 00 	movl   $0x4345,(%esp)
     159d:	e8 31 24 00 00       	call   39d3 <unlink>
   printf(1, "unlinkread ok\n");
     15a2:	58                   	pop    %eax
     15a3:	5a                   	pop    %edx
-    15a4:	68 dd 43 00 00       	push   $0x43dd
+    15a4:	68 ed 43 00 00       	push   $0x43ed
     15a9:	6a 01                	push   $0x1
-    15ab:	e8 30 25 00 00       	call   3ae0 <printf>
+    15ab:	e8 40 25 00 00       	call   3af0 <printf>
 }
     15b0:	83 c4 10             	add    $0x10,%esp
     15b3:	8d 65 f8             	lea    -0x8(%ebp),%esp
@@ -2214,49 +2214,49 @@
     printf(1, "create unlinkread failed\n");
     15ba:	51                   	push   %ecx
     15bb:	51                   	push   %ecx
-    15bc:	68 40 43 00 00       	push   $0x4340
+    15bc:	68 50 43 00 00       	push   $0x4350
     15c1:	6a 01                	push   $0x1
-    15c3:	e8 18 25 00 00       	call   3ae0 <printf>
+    15c3:	e8 28 25 00 00       	call   3af0 <printf>
     exit();
     15c8:	e8 b6 23 00 00       	call   3983 <exit>
     printf(1, "unlinkread write failed\n");
     15cd:	51                   	push   %ecx
     15ce:	51                   	push   %ecx
-    15cf:	68 c4 43 00 00       	push   $0x43c4
+    15cf:	68 d4 43 00 00       	push   $0x43d4
     15d4:	6a 01                	push   $0x1
-    15d6:	e8 05 25 00 00       	call   3ae0 <printf>
+    15d6:	e8 15 25 00 00       	call   3af0 <printf>
     exit();
     15db:	e8 a3 23 00 00       	call   3983 <exit>
     printf(1, "unlinkread wrong data\n");
     15e0:	53                   	push   %ebx
     15e1:	53                   	push   %ebx
-    15e2:	68 ad 43 00 00       	push   $0x43ad
+    15e2:	68 bd 43 00 00       	push   $0x43bd
     15e7:	6a 01                	push   $0x1
-    15e9:	e8 f2 24 00 00       	call   3ae0 <printf>
+    15e9:	e8 02 25 00 00       	call   3af0 <printf>
     exit();
     15ee:	e8 90 23 00 00       	call   3983 <exit>
     printf(1, "unlinkread read failed");
     15f3:	56                   	push   %esi
     15f4:	56                   	push   %esi
-    15f5:	68 96 43 00 00       	push   $0x4396
+    15f5:	68 a6 43 00 00       	push   $0x43a6
     15fa:	6a 01                	push   $0x1
-    15fc:	e8 df 24 00 00       	call   3ae0 <printf>
+    15fc:	e8 ef 24 00 00       	call   3af0 <printf>
     exit();
     1601:	e8 7d 23 00 00       	call   3983 <exit>
     printf(1, "unlink unlinkread failed\n");
     1606:	50                   	push   %eax
     1607:	50                   	push   %eax
-    1608:	68 78 43 00 00       	push   $0x4378
+    1608:	68 88 43 00 00       	push   $0x4388
     160d:	6a 01                	push   $0x1
-    160f:	e8 cc 24 00 00       	call   3ae0 <printf>
+    160f:	e8 dc 24 00 00       	call   3af0 <printf>
     exit();
     1614:	e8 6a 23 00 00       	call   3983 <exit>
     printf(1, "open unlinkread failed\n");
     1619:	50                   	push   %eax
     161a:	50                   	push   %eax
-    161b:	68 60 43 00 00       	push   $0x4360
+    161b:	68 70 43 00 00       	push   $0x4370
     1620:	6a 01                	push   $0x1
-    1622:	e8 b9 24 00 00       	call   3ae0 <printf>
+    1622:	e8 c9 24 00 00       	call   3af0 <printf>
     exit();
     1627:	e8 57 23 00 00       	call   3983 <exit>
     162c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2269,20 +2269,20 @@
     1637:	53                   	push   %ebx
     1638:	83 ec 0c             	sub    $0xc,%esp
   printf(1, "linktest\n");
-    163b:	68 ec 43 00 00       	push   $0x43ec
+    163b:	68 fc 43 00 00       	push   $0x43fc
     1640:	6a 01                	push   $0x1
-    1642:	e8 99 24 00 00       	call   3ae0 <printf>
+    1642:	e8 a9 24 00 00       	call   3af0 <printf>
   unlink("lf1");
-    1647:	c7 04 24 f6 43 00 00 	movl   $0x43f6,(%esp)
+    1647:	c7 04 24 06 44 00 00 	movl   $0x4406,(%esp)
     164e:	e8 80 23 00 00       	call   39d3 <unlink>
   unlink("lf2");
-    1653:	c7 04 24 fa 43 00 00 	movl   $0x43fa,(%esp)
+    1653:	c7 04 24 0a 44 00 00 	movl   $0x440a,(%esp)
     165a:	e8 74 23 00 00       	call   39d3 <unlink>
   fd = open("lf1", O_CREATE|O_RDWR);
     165f:	58                   	pop    %eax
     1660:	5a                   	pop    %edx
     1661:	68 02 02 00 00       	push   $0x202
-    1666:	68 f6 43 00 00       	push   $0x43f6
+    1666:	68 06 44 00 00       	push   $0x4406
     166b:	e8 53 23 00 00       	call   39c3 <open>
   if(fd < 0){
     1670:	83 c4 10             	add    $0x10,%esp
@@ -2292,7 +2292,7 @@
     167b:	83 ec 04             	sub    $0x4,%esp
     167e:	89 c3                	mov    %eax,%ebx
     1680:	6a 05                	push   $0x5
-    1682:	68 5a 43 00 00       	push   $0x435a
+    1682:	68 6a 43 00 00       	push   $0x436a
     1687:	50                   	push   %eax
     1688:	e8 16 23 00 00       	call   39a3 <write>
     168d:	83 c4 10             	add    $0x10,%esp
@@ -2305,21 +2305,21 @@
   if(link("lf1", "lf2") < 0){
     16a2:	5b                   	pop    %ebx
     16a3:	58                   	pop    %eax
-    16a4:	68 fa 43 00 00       	push   $0x43fa
-    16a9:	68 f6 43 00 00       	push   $0x43f6
+    16a4:	68 0a 44 00 00       	push   $0x440a
+    16a9:	68 06 44 00 00       	push   $0x4406
     16ae:	e8 30 23 00 00       	call   39e3 <link>
     16b3:	83 c4 10             	add    $0x10,%esp
     16b6:	85 c0                	test   %eax,%eax
     16b8:	0f 88 60 01 00 00    	js     181e <linktest+0x1ee>
   unlink("lf1");
     16be:	83 ec 0c             	sub    $0xc,%esp
-    16c1:	68 f6 43 00 00       	push   $0x43f6
+    16c1:	68 06 44 00 00       	push   $0x4406
     16c6:	e8 08 23 00 00       	call   39d3 <unlink>
   if(open("lf1", 0) >= 0){
     16cb:	58                   	pop    %eax
     16cc:	5a                   	pop    %edx
     16cd:	6a 00                	push   $0x0
-    16cf:	68 f6 43 00 00       	push   $0x43f6
+    16cf:	68 06 44 00 00       	push   $0x4406
     16d4:	e8 ea 22 00 00       	call   39c3 <open>
     16d9:	83 c4 10             	add    $0x10,%esp
     16dc:	85 c0                	test   %eax,%eax
@@ -2327,7 +2327,7 @@
   fd = open("lf2", 0);
     16e4:	83 ec 08             	sub    $0x8,%esp
     16e7:	6a 00                	push   $0x0
-    16e9:	68 fa 43 00 00       	push   $0x43fa
+    16e9:	68 0a 44 00 00       	push   $0x440a
     16ee:	e8 d0 22 00 00       	call   39c3 <open>
   if(fd < 0){
     16f3:	83 c4 10             	add    $0x10,%esp
@@ -2339,7 +2339,7 @@
   if(read(fd, buf, sizeof(buf)) != 5){
     1700:	83 ec 04             	sub    $0x4,%esp
     1703:	68 00 20 00 00       	push   $0x2000
-    1708:	68 c0 86 00 00       	push   $0x86c0
+    1708:	68 e0 86 00 00       	push   $0x86e0
     170d:	50                   	push   %eax
     170e:	e8 88 22 00 00       	call   399b <read>
     1713:	83 c4 10             	add    $0x10,%esp
@@ -2352,38 +2352,38 @@
   if(link("lf2", "lf2") >= 0){
     1728:	58                   	pop    %eax
     1729:	5a                   	pop    %edx
-    172a:	68 fa 43 00 00       	push   $0x43fa
-    172f:	68 fa 43 00 00       	push   $0x43fa
+    172a:	68 0a 44 00 00       	push   $0x440a
+    172f:	68 0a 44 00 00       	push   $0x440a
     1734:	e8 aa 22 00 00       	call   39e3 <link>
     1739:	83 c4 10             	add    $0x10,%esp
     173c:	85 c0                	test   %eax,%eax
     173e:	0f 89 8e 00 00 00    	jns    17d2 <linktest+0x1a2>
   unlink("lf2");
     1744:	83 ec 0c             	sub    $0xc,%esp
-    1747:	68 fa 43 00 00       	push   $0x43fa
+    1747:	68 0a 44 00 00       	push   $0x440a
     174c:	e8 82 22 00 00       	call   39d3 <unlink>
   if(link("lf2", "lf1") >= 0){
     1751:	59                   	pop    %ecx
     1752:	5b                   	pop    %ebx
-    1753:	68 f6 43 00 00       	push   $0x43f6
-    1758:	68 fa 43 00 00       	push   $0x43fa
+    1753:	68 06 44 00 00       	push   $0x4406
+    1758:	68 0a 44 00 00       	push   $0x440a
     175d:	e8 81 22 00 00       	call   39e3 <link>
     1762:	83 c4 10             	add    $0x10,%esp
     1765:	85 c0                	test   %eax,%eax
     1767:	79 56                	jns    17bf <linktest+0x18f>
   if(link(".", "lf1") >= 0){
     1769:	83 ec 08             	sub    $0x8,%esp
-    176c:	68 f6 43 00 00       	push   $0x43f6
-    1771:	68 be 46 00 00       	push   $0x46be
+    176c:	68 06 44 00 00       	push   $0x4406
+    1771:	68 ce 46 00 00       	push   $0x46ce
     1776:	e8 68 22 00 00       	call   39e3 <link>
     177b:	83 c4 10             	add    $0x10,%esp
     177e:	85 c0                	test   %eax,%eax
     1780:	79 2a                	jns    17ac <linktest+0x17c>
   printf(1, "linktest ok\n");
     1782:	83 ec 08             	sub    $0x8,%esp
-    1785:	68 94 44 00 00       	push   $0x4494
+    1785:	68 a4 44 00 00       	push   $0x44a4
     178a:	6a 01                	push   $0x1
-    178c:	e8 4f 23 00 00       	call   3ae0 <printf>
+    178c:	e8 5f 23 00 00       	call   3af0 <printf>
 }
     1791:	8b 5d fc             	mov    -0x4(%ebp),%ebx
     1794:	83 c4 10             	add    $0x10,%esp
@@ -2392,73 +2392,73 @@
     printf(1, "create lf1 failed\n");
     1799:	50                   	push   %eax
     179a:	50                   	push   %eax
-    179b:	68 fe 43 00 00       	push   $0x43fe
+    179b:	68 0e 44 00 00       	push   $0x440e
     17a0:	6a 01                	push   $0x1
-    17a2:	e8 39 23 00 00       	call   3ae0 <printf>
+    17a2:	e8 49 23 00 00       	call   3af0 <printf>
     exit();
     17a7:	e8 d7 21 00 00       	call   3983 <exit>
     printf(1, "link . lf1 succeeded! oops\n");
     17ac:	50                   	push   %eax
     17ad:	50                   	push   %eax
-    17ae:	68 78 44 00 00       	push   $0x4478
+    17ae:	68 88 44 00 00       	push   $0x4488
     17b3:	6a 01                	push   $0x1
-    17b5:	e8 26 23 00 00       	call   3ae0 <printf>
+    17b5:	e8 36 23 00 00       	call   3af0 <printf>
     exit();
     17ba:	e8 c4 21 00 00       	call   3983 <exit>
     printf(1, "link non-existant succeeded! oops\n");
     17bf:	52                   	push   %edx
     17c0:	52                   	push   %edx
-    17c1:	68 2c 50 00 00       	push   $0x502c
+    17c1:	68 3c 50 00 00       	push   $0x503c
     17c6:	6a 01                	push   $0x1
-    17c8:	e8 13 23 00 00       	call   3ae0 <printf>
+    17c8:	e8 23 23 00 00       	call   3af0 <printf>
     exit();
     17cd:	e8 b1 21 00 00       	call   3983 <exit>
     printf(1, "link lf2 lf2 succeeded! oops\n");
     17d2:	50                   	push   %eax
     17d3:	50                   	push   %eax
-    17d4:	68 5a 44 00 00       	push   $0x445a
+    17d4:	68 6a 44 00 00       	push   $0x446a
     17d9:	6a 01                	push   $0x1
-    17db:	e8 00 23 00 00       	call   3ae0 <printf>
+    17db:	e8 10 23 00 00       	call   3af0 <printf>
     exit();
     17e0:	e8 9e 21 00 00       	call   3983 <exit>
     printf(1, "read lf2 failed\n");
     17e5:	51                   	push   %ecx
     17e6:	51                   	push   %ecx
-    17e7:	68 49 44 00 00       	push   $0x4449
+    17e7:	68 59 44 00 00       	push   $0x4459
     17ec:	6a 01                	push   $0x1
-    17ee:	e8 ed 22 00 00       	call   3ae0 <printf>
+    17ee:	e8 fd 22 00 00       	call   3af0 <printf>
     exit();
     17f3:	e8 8b 21 00 00       	call   3983 <exit>
     printf(1, "open lf2 failed\n");
     17f8:	53                   	push   %ebx
     17f9:	53                   	push   %ebx
-    17fa:	68 38 44 00 00       	push   $0x4438
+    17fa:	68 48 44 00 00       	push   $0x4448
     17ff:	6a 01                	push   $0x1
-    1801:	e8 da 22 00 00       	call   3ae0 <printf>
+    1801:	e8 ea 22 00 00       	call   3af0 <printf>
     exit();
     1806:	e8 78 21 00 00       	call   3983 <exit>
     printf(1, "unlinked lf1 but it is still there!\n");
     180b:	50                   	push   %eax
     180c:	50                   	push   %eax
-    180d:	68 04 50 00 00       	push   $0x5004
+    180d:	68 14 50 00 00       	push   $0x5014
     1812:	6a 01                	push   $0x1
-    1814:	e8 c7 22 00 00       	call   3ae0 <printf>
+    1814:	e8 d7 22 00 00       	call   3af0 <printf>
     exit();
     1819:	e8 65 21 00 00       	call   3983 <exit>
     printf(1, "link lf1 lf2 failed\n");
     181e:	51                   	push   %ecx
     181f:	51                   	push   %ecx
-    1820:	68 23 44 00 00       	push   $0x4423
+    1820:	68 33 44 00 00       	push   $0x4433
     1825:	6a 01                	push   $0x1
-    1827:	e8 b4 22 00 00       	call   3ae0 <printf>
+    1827:	e8 c4 22 00 00       	call   3af0 <printf>
     exit();
     182c:	e8 52 21 00 00       	call   3983 <exit>
     printf(1, "write lf1 failed\n");
     1831:	50                   	push   %eax
     1832:	50                   	push   %eax
-    1833:	68 11 44 00 00       	push   $0x4411
+    1833:	68 21 44 00 00       	push   $0x4421
     1838:	6a 01                	push   $0x1
-    183a:	e8 a1 22 00 00       	call   3ae0 <printf>
+    183a:	e8 b1 22 00 00       	call   3af0 <printf>
     exit();
     183f:	e8 3f 21 00 00       	call   3983 <exit>
     1844:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -2479,9 +2479,9 @@
     185c:	8d 5d ad             	lea    -0x53(%ebp),%ebx
     185f:	83 ec 64             	sub    $0x64,%esp
   printf(1, "concreate test\n");
-    1862:	68 a1 44 00 00       	push   $0x44a1
+    1862:	68 b1 44 00 00       	push   $0x44b1
     1867:	6a 01                	push   $0x1
-    1869:	e8 72 22 00 00       	call   3ae0 <printf>
+    1869:	e8 82 22 00 00       	call   3af0 <printf>
   file[0] = 'C';
     186e:	c6 45 ad 43          	movb   $0x43,-0x53(%ebp)
   file[2] = '\0';
@@ -2550,16 +2550,16 @@
         printf(1, "concreate create %s failed\n", file);
     1905:	83 ec 04             	sub    $0x4,%esp
     1908:	53                   	push   %ebx
-    1909:	68 b4 44 00 00       	push   $0x44b4
+    1909:	68 c4 44 00 00       	push   $0x44c4
     190e:	6a 01                	push   $0x1
-    1910:	e8 cb 21 00 00       	call   3ae0 <printf>
+    1910:	e8 db 21 00 00       	call   3af0 <printf>
         exit();
     1915:	e8 69 20 00 00       	call   3983 <exit>
     191a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       link("C0", file);
     1920:	83 ec 08             	sub    $0x8,%esp
     1923:	53                   	push   %ebx
-    1924:	68 b1 44 00 00       	push   $0x44b1
+    1924:	68 c1 44 00 00       	push   $0x44c1
     1929:	e8 b5 20 00 00       	call   39e3 <link>
     192e:	83 c4 10             	add    $0x10,%esp
       exit();
@@ -2572,7 +2572,7 @@
     1943:	83 c6 01             	add    $0x1,%esi
       link("C0", file);
     1946:	53                   	push   %ebx
-    1947:	68 b1 44 00 00       	push   $0x44b1
+    1947:	68 c1 44 00 00       	push   $0x44c1
     194c:	e8 92 20 00 00       	call   39e3 <link>
     1951:	83 c4 10             	add    $0x10,%esp
       wait();
@@ -2591,7 +2591,7 @@
     1972:	5e                   	pop    %esi
     1973:	5f                   	pop    %edi
     1974:	6a 00                	push   $0x0
-    1976:	68 be 46 00 00       	push   $0x46be
+    1976:	68 ce 46 00 00       	push   $0x46ce
     197b:	8d 7d b0             	lea    -0x50(%ebp),%edi
     197e:	e8 40 20 00 00       	call   39c3 <open>
   n = 0;
@@ -2732,9 +2732,9 @@
     1acd:	8d 76 00             	lea    0x0(%esi),%esi
   printf(1, "concreate ok\n");
     1ad0:	83 ec 08             	sub    $0x8,%esp
-    1ad3:	68 06 45 00 00       	push   $0x4506
+    1ad3:	68 16 45 00 00       	push   $0x4516
     1ad8:	6a 01                	push   $0x1
-    1ada:	e8 01 20 00 00       	call   3ae0 <printf>
+    1ada:	e8 11 20 00 00       	call   3af0 <printf>
 }
     1adf:	8d 65 f4             	lea    -0xc(%ebp),%esp
     1ae2:	5b                   	pop    %ebx
@@ -2744,35 +2744,35 @@
     1ae6:	c3                   	ret    
       printf(1, "fork failed\n");
     1ae7:	83 ec 08             	sub    $0x8,%esp
-    1aea:	68 89 4d 00 00       	push   $0x4d89
+    1aea:	68 99 4d 00 00       	push   $0x4d99
     1aef:	6a 01                	push   $0x1
-    1af1:	e8 ea 1f 00 00       	call   3ae0 <printf>
+    1af1:	e8 fa 1f 00 00       	call   3af0 <printf>
       exit();
     1af6:	e8 88 1e 00 00       	call   3983 <exit>
     printf(1, "concreate not enough files in directory listing\n");
     1afb:	51                   	push   %ecx
     1afc:	51                   	push   %ecx
-    1afd:	68 50 50 00 00       	push   $0x5050
+    1afd:	68 60 50 00 00       	push   $0x5060
     1b02:	6a 01                	push   $0x1
-    1b04:	e8 d7 1f 00 00       	call   3ae0 <printf>
+    1b04:	e8 e7 1f 00 00       	call   3af0 <printf>
     exit();
     1b09:	e8 75 1e 00 00       	call   3983 <exit>
         printf(1, "concreate duplicate file %s\n", de.name);
     1b0e:	83 ec 04             	sub    $0x4,%esp
     1b11:	8d 45 b2             	lea    -0x4e(%ebp),%eax
     1b14:	50                   	push   %eax
-    1b15:	68 e9 44 00 00       	push   $0x44e9
+    1b15:	68 f9 44 00 00       	push   $0x44f9
     1b1a:	6a 01                	push   $0x1
-    1b1c:	e8 bf 1f 00 00       	call   3ae0 <printf>
+    1b1c:	e8 cf 1f 00 00       	call   3af0 <printf>
         exit();
     1b21:	e8 5d 1e 00 00       	call   3983 <exit>
         printf(1, "concreate weird file %s\n", de.name);
     1b26:	83 ec 04             	sub    $0x4,%esp
     1b29:	8d 45 b2             	lea    -0x4e(%ebp),%eax
     1b2c:	50                   	push   %eax
-    1b2d:	68 d0 44 00 00       	push   $0x44d0
+    1b2d:	68 e0 44 00 00       	push   $0x44e0
     1b32:	6a 01                	push   $0x1
-    1b34:	e8 a7 1f 00 00       	call   3ae0 <printf>
+    1b34:	e8 b7 1f 00 00       	call   3af0 <printf>
         exit();
     1b39:	e8 45 1e 00 00       	call   3983 <exit>
       close(fd);
@@ -2793,11 +2793,11 @@
     1b59:	53                   	push   %ebx
     1b5a:	83 ec 24             	sub    $0x24,%esp
   printf(1, "linkunlink test\n");
-    1b5d:	68 14 45 00 00       	push   $0x4514
+    1b5d:	68 24 45 00 00       	push   $0x4524
     1b62:	6a 01                	push   $0x1
-    1b64:	e8 77 1f 00 00       	call   3ae0 <printf>
+    1b64:	e8 87 1f 00 00       	call   3af0 <printf>
   unlink("x");
-    1b69:	c7 04 24 a1 47 00 00 	movl   $0x47a1,(%esp)
+    1b69:	c7 04 24 b1 47 00 00 	movl   $0x47b1,(%esp)
     1b70:	e8 5e 1e 00 00       	call   39d3 <unlink>
   pid = fork();
     1b75:	e8 01 1e 00 00       	call   397b <fork>
@@ -2823,7 +2823,7 @@
     1ba3:	74 7b                	je     1c20 <linkunlink+0xd0>
       unlink("x");
     1ba5:	83 ec 0c             	sub    $0xc,%esp
-    1ba8:	68 a1 47 00 00       	push   $0x47a1
+    1ba8:	68 b1 47 00 00       	push   $0x47b1
     1bad:	e8 21 1e 00 00       	call   39d3 <unlink>
     1bb2:	83 c4 10             	add    $0x10,%esp
   for(i = 0; i < 100; i++){
@@ -2845,7 +2845,7 @@
       close(open("x", O_RDWR | O_CREATE));
     1bd9:	83 ec 08             	sub    $0x8,%esp
     1bdc:	68 02 02 00 00       	push   $0x202
-    1be1:	68 a1 47 00 00       	push   $0x47a1
+    1be1:	68 b1 47 00 00       	push   $0x47b1
     1be6:	e8 d8 1d 00 00       	call   39c3 <open>
     1beb:	89 04 24             	mov    %eax,(%esp)
     1bee:	e8 b8 1d 00 00       	call   39ab <close>
@@ -2861,9 +2861,9 @@
     1c02:	e8 84 1d 00 00       	call   398b <wait>
   printf(1, "linkunlink ok\n");
     1c07:	83 ec 08             	sub    $0x8,%esp
-    1c0a:	68 29 45 00 00       	push   $0x4529
+    1c0a:	68 39 45 00 00       	push   $0x4539
     1c0f:	6a 01                	push   $0x1
-    1c11:	e8 ca 1e 00 00       	call   3ae0 <printf>
+    1c11:	e8 da 1e 00 00       	call   3af0 <printf>
 }
     1c16:	8d 65 f4             	lea    -0xc(%ebp),%esp
     1c19:	5b                   	pop    %ebx
@@ -2874,17 +2874,17 @@
     1c1e:	66 90                	xchg   %ax,%ax
       link("cat", "x");
     1c20:	83 ec 08             	sub    $0x8,%esp
-    1c23:	68 a1 47 00 00       	push   $0x47a1
-    1c28:	68 25 45 00 00       	push   $0x4525
+    1c23:	68 b1 47 00 00       	push   $0x47b1
+    1c28:	68 35 45 00 00       	push   $0x4535
     1c2d:	e8 b1 1d 00 00       	call   39e3 <link>
     1c32:	83 c4 10             	add    $0x10,%esp
     1c35:	e9 7b ff ff ff       	jmp    1bb5 <linkunlink+0x65>
     printf(1, "fork failed\n");
     1c3a:	52                   	push   %edx
     1c3b:	52                   	push   %edx
-    1c3c:	68 89 4d 00 00       	push   $0x4d89
+    1c3c:	68 99 4d 00 00       	push   $0x4d99
     1c41:	6a 01                	push   $0x1
-    1c43:	e8 98 1e 00 00       	call   3ae0 <printf>
+    1c43:	e8 a8 1e 00 00       	call   3af0 <printf>
     exit();
     1c48:	e8 36 1d 00 00       	call   3983 <exit>
     exit();
@@ -2902,17 +2902,17 @@
     1c69:	53                   	push   %ebx
     1c6a:	83 ec 24             	sub    $0x24,%esp
   printf(1, "bigdir test\n");
-    1c6d:	68 38 45 00 00       	push   $0x4538
+    1c6d:	68 48 45 00 00       	push   $0x4548
     1c72:	6a 01                	push   $0x1
-    1c74:	e8 67 1e 00 00       	call   3ae0 <printf>
+    1c74:	e8 77 1e 00 00       	call   3af0 <printf>
   unlink("bd");
-    1c79:	c7 04 24 45 45 00 00 	movl   $0x4545,(%esp)
+    1c79:	c7 04 24 55 45 00 00 	movl   $0x4555,(%esp)
     1c80:	e8 4e 1d 00 00       	call   39d3 <unlink>
   fd = open("bd", O_CREATE);
     1c85:	5a                   	pop    %edx
     1c86:	59                   	pop    %ecx
     1c87:	68 00 02 00 00       	push   $0x200
-    1c8c:	68 45 45 00 00       	push   $0x4545
+    1c8c:	68 55 45 00 00       	push   $0x4555
     1c91:	e8 2d 1d 00 00       	call   39c3 <open>
   if(fd < 0){
     1c96:	83 c4 10             	add    $0x10,%esp
@@ -2941,7 +2941,7 @@
     name[1] = '0' + (i / 64);
     1cc5:	83 c0 30             	add    $0x30,%eax
     if(link("bd", name) != 0){
-    1cc8:	68 45 45 00 00       	push   $0x4545
+    1cc8:	68 55 45 00 00       	push   $0x4555
     name[1] = '0' + (i / 64);
     1ccd:	88 45 df             	mov    %al,-0x21(%ebp)
     name[2] = '0' + (i % 64);
@@ -2964,7 +2964,7 @@
     1cf6:	75 c0                	jne    1cb8 <bigdir+0x58>
   unlink("bd");
     1cf8:	83 ec 0c             	sub    $0xc,%esp
-    1cfb:	68 45 45 00 00       	push   $0x4545
+    1cfb:	68 55 45 00 00       	push   $0x4555
     1d00:	e8 ce 1c 00 00       	call   39d3 <unlink>
     1d05:	83 c4 10             	add    $0x10,%esp
     1d08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -3001,9 +3001,9 @@
     1d47:	75 c7                	jne    1d10 <bigdir+0xb0>
   printf(1, "bigdir ok\n");
     1d49:	83 ec 08             	sub    $0x8,%esp
-    1d4c:	68 87 45 00 00       	push   $0x4587
+    1d4c:	68 97 45 00 00       	push   $0x4597
     1d51:	6a 01                	push   $0x1
-    1d53:	e8 88 1d 00 00       	call   3ae0 <printf>
+    1d53:	e8 98 1d 00 00       	call   3af0 <printf>
     1d58:	83 c4 10             	add    $0x10,%esp
 }
     1d5b:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -3014,24 +3014,24 @@
     1d62:	c3                   	ret    
       printf(1, "bigdir link failed\n");
     1d63:	83 ec 08             	sub    $0x8,%esp
-    1d66:	68 5e 45 00 00       	push   $0x455e
+    1d66:	68 6e 45 00 00       	push   $0x456e
     1d6b:	6a 01                	push   $0x1
-    1d6d:	e8 6e 1d 00 00       	call   3ae0 <printf>
+    1d6d:	e8 7e 1d 00 00       	call   3af0 <printf>
       exit();
     1d72:	e8 0c 1c 00 00       	call   3983 <exit>
       printf(1, "bigdir unlink failed");
     1d77:	83 ec 08             	sub    $0x8,%esp
-    1d7a:	68 72 45 00 00       	push   $0x4572
+    1d7a:	68 82 45 00 00       	push   $0x4582
     1d7f:	6a 01                	push   $0x1
-    1d81:	e8 5a 1d 00 00       	call   3ae0 <printf>
+    1d81:	e8 6a 1d 00 00       	call   3af0 <printf>
       exit();
     1d86:	e8 f8 1b 00 00       	call   3983 <exit>
     printf(1, "bigdir create failed\n");
     1d8b:	50                   	push   %eax
     1d8c:	50                   	push   %eax
-    1d8d:	68 48 45 00 00       	push   $0x4548
+    1d8d:	68 58 45 00 00       	push   $0x4558
     1d92:	6a 01                	push   $0x1
-    1d94:	e8 47 1d 00 00       	call   3ae0 <printf>
+    1d94:	e8 57 1d 00 00       	call   3af0 <printf>
     exit();
     1d99:	e8 e5 1b 00 00       	call   3983 <exit>
     1d9e:	66 90                	xchg   %ax,%ax
@@ -3044,14 +3044,14 @@
     1da7:	53                   	push   %ebx
     1da8:	83 ec 0c             	sub    $0xc,%esp
   printf(1, "subdir test\n");
-    1dab:	68 92 45 00 00       	push   $0x4592
+    1dab:	68 a2 45 00 00       	push   $0x45a2
     1db0:	6a 01                	push   $0x1
-    1db2:	e8 29 1d 00 00       	call   3ae0 <printf>
+    1db2:	e8 39 1d 00 00       	call   3af0 <printf>
   unlink("ff");
-    1db7:	c7 04 24 1b 46 00 00 	movl   $0x461b,(%esp)
+    1db7:	c7 04 24 2b 46 00 00 	movl   $0x462b,(%esp)
     1dbe:	e8 10 1c 00 00       	call   39d3 <unlink>
   if(mkdir("dd") != 0){
-    1dc3:	c7 04 24 b8 46 00 00 	movl   $0x46b8,(%esp)
+    1dc3:	c7 04 24 c8 46 00 00 	movl   $0x46c8,(%esp)
     1dca:	e8 1c 1c 00 00       	call   39eb <mkdir>
     1dcf:	83 c4 10             	add    $0x10,%esp
     1dd2:	85 c0                	test   %eax,%eax
@@ -3059,7 +3059,7 @@
   fd = open("dd/ff", O_CREATE | O_RDWR);
     1dda:	83 ec 08             	sub    $0x8,%esp
     1ddd:	68 02 02 00 00       	push   $0x202
-    1de2:	68 f1 45 00 00       	push   $0x45f1
+    1de2:	68 01 46 00 00       	push   $0x4601
     1de7:	e8 d7 1b 00 00       	call   39c3 <open>
   if(fd < 0){
     1dec:	83 c4 10             	add    $0x10,%esp
@@ -3071,21 +3071,21 @@
   write(fd, "ff", 2);
     1df9:	83 ec 04             	sub    $0x4,%esp
     1dfc:	6a 02                	push   $0x2
-    1dfe:	68 1b 46 00 00       	push   $0x461b
+    1dfe:	68 2b 46 00 00       	push   $0x462b
     1e03:	50                   	push   %eax
     1e04:	e8 9a 1b 00 00       	call   39a3 <write>
   close(fd);
     1e09:	89 1c 24             	mov    %ebx,(%esp)
     1e0c:	e8 9a 1b 00 00       	call   39ab <close>
   if(unlink("dd") >= 0){
-    1e11:	c7 04 24 b8 46 00 00 	movl   $0x46b8,(%esp)
+    1e11:	c7 04 24 c8 46 00 00 	movl   $0x46c8,(%esp)
     1e18:	e8 b6 1b 00 00       	call   39d3 <unlink>
     1e1d:	83 c4 10             	add    $0x10,%esp
     1e20:	85 c0                	test   %eax,%eax
     1e22:	0f 89 3f 05 00 00    	jns    2367 <subdir+0x5c7>
   if(mkdir("/dd/dd") != 0){
     1e28:	83 ec 0c             	sub    $0xc,%esp
-    1e2b:	68 cc 45 00 00       	push   $0x45cc
+    1e2b:	68 dc 45 00 00       	push   $0x45dc
     1e30:	e8 b6 1b 00 00       	call   39eb <mkdir>
     1e35:	83 c4 10             	add    $0x10,%esp
     1e38:	85 c0                	test   %eax,%eax
@@ -3093,7 +3093,7 @@
   fd = open("dd/dd/ff", O_CREATE | O_RDWR);
     1e40:	83 ec 08             	sub    $0x8,%esp
     1e43:	68 02 02 00 00       	push   $0x202
-    1e48:	68 ee 45 00 00       	push   $0x45ee
+    1e48:	68 fe 45 00 00       	push   $0x45fe
     1e4d:	e8 71 1b 00 00       	call   39c3 <open>
   if(fd < 0){
     1e52:	83 c4 10             	add    $0x10,%esp
@@ -3105,7 +3105,7 @@
   write(fd, "FF", 2);
     1e5f:	83 ec 04             	sub    $0x4,%esp
     1e62:	6a 02                	push   $0x2
-    1e64:	68 0f 46 00 00       	push   $0x460f
+    1e64:	68 1f 46 00 00       	push   $0x461f
     1e69:	50                   	push   %eax
     1e6a:	e8 34 1b 00 00       	call   39a3 <write>
   close(fd);
@@ -3115,7 +3115,7 @@
     1e77:	58                   	pop    %eax
     1e78:	5a                   	pop    %edx
     1e79:	6a 00                	push   $0x0
-    1e7b:	68 12 46 00 00       	push   $0x4612
+    1e7b:	68 22 46 00 00       	push   $0x4622
     1e80:	e8 3e 1b 00 00       	call   39c3 <open>
   if(fd < 0){
     1e85:	83 c4 10             	add    $0x10,%esp
@@ -3127,14 +3127,14 @@
   cc = read(fd, buf, sizeof(buf));
     1e92:	83 ec 04             	sub    $0x4,%esp
     1e95:	68 00 20 00 00       	push   $0x2000
-    1e9a:	68 c0 86 00 00       	push   $0x86c0
+    1e9a:	68 e0 86 00 00       	push   $0x86e0
     1e9f:	50                   	push   %eax
     1ea0:	e8 f6 1a 00 00       	call   399b <read>
   if(cc != 2 || buf[0] != 'f'){
     1ea5:	83 c4 10             	add    $0x10,%esp
     1ea8:	83 f8 02             	cmp    $0x2,%eax
     1eab:	0f 85 3a 03 00 00    	jne    21eb <subdir+0x44b>
-    1eb1:	80 3d c0 86 00 00 66 	cmpb   $0x66,0x86c0
+    1eb1:	80 3d e0 86 00 00 66 	cmpb   $0x66,0x86e0
     1eb8:	0f 85 2d 03 00 00    	jne    21eb <subdir+0x44b>
   close(fd);
     1ebe:	83 ec 0c             	sub    $0xc,%esp
@@ -3143,15 +3143,15 @@
   if(link("dd/dd/ff", "dd/dd/ffff") != 0){
     1ec7:	59                   	pop    %ecx
     1ec8:	5b                   	pop    %ebx
-    1ec9:	68 52 46 00 00       	push   $0x4652
-    1ece:	68 ee 45 00 00       	push   $0x45ee
+    1ec9:	68 62 46 00 00       	push   $0x4662
+    1ece:	68 fe 45 00 00       	push   $0x45fe
     1ed3:	e8 0b 1b 00 00       	call   39e3 <link>
     1ed8:	83 c4 10             	add    $0x10,%esp
     1edb:	85 c0                	test   %eax,%eax
     1edd:	0f 85 c6 03 00 00    	jne    22a9 <subdir+0x509>
   if(unlink("dd/dd/ff") != 0){
     1ee3:	83 ec 0c             	sub    $0xc,%esp
-    1ee6:	68 ee 45 00 00       	push   $0x45ee
+    1ee6:	68 fe 45 00 00       	push   $0x45fe
     1eeb:	e8 e3 1a 00 00       	call   39d3 <unlink>
     1ef0:	83 c4 10             	add    $0x10,%esp
     1ef3:	85 c0                	test   %eax,%eax
@@ -3159,35 +3159,35 @@
   if(open("dd/dd/ff", O_RDONLY) >= 0){
     1efb:	83 ec 08             	sub    $0x8,%esp
     1efe:	6a 00                	push   $0x0
-    1f00:	68 ee 45 00 00       	push   $0x45ee
+    1f00:	68 fe 45 00 00       	push   $0x45fe
     1f05:	e8 b9 1a 00 00       	call   39c3 <open>
     1f0a:	83 c4 10             	add    $0x10,%esp
     1f0d:	85 c0                	test   %eax,%eax
     1f0f:	0f 89 2c 04 00 00    	jns    2341 <subdir+0x5a1>
   if(chdir("dd") != 0){
     1f15:	83 ec 0c             	sub    $0xc,%esp
-    1f18:	68 b8 46 00 00       	push   $0x46b8
+    1f18:	68 c8 46 00 00       	push   $0x46c8
     1f1d:	e8 d1 1a 00 00       	call   39f3 <chdir>
     1f22:	83 c4 10             	add    $0x10,%esp
     1f25:	85 c0                	test   %eax,%eax
     1f27:	0f 85 01 04 00 00    	jne    232e <subdir+0x58e>
   if(chdir("dd/../../dd") != 0){
     1f2d:	83 ec 0c             	sub    $0xc,%esp
-    1f30:	68 86 46 00 00       	push   $0x4686
+    1f30:	68 96 46 00 00       	push   $0x4696
     1f35:	e8 b9 1a 00 00       	call   39f3 <chdir>
     1f3a:	83 c4 10             	add    $0x10,%esp
     1f3d:	85 c0                	test   %eax,%eax
     1f3f:	0f 85 b9 02 00 00    	jne    21fe <subdir+0x45e>
   if(chdir("dd/../../../dd") != 0){
     1f45:	83 ec 0c             	sub    $0xc,%esp
-    1f48:	68 ac 46 00 00       	push   $0x46ac
+    1f48:	68 bc 46 00 00       	push   $0x46bc
     1f4d:	e8 a1 1a 00 00       	call   39f3 <chdir>
     1f52:	83 c4 10             	add    $0x10,%esp
     1f55:	85 c0                	test   %eax,%eax
     1f57:	0f 85 a1 02 00 00    	jne    21fe <subdir+0x45e>
   if(chdir("./..") != 0){
     1f5d:	83 ec 0c             	sub    $0xc,%esp
-    1f60:	68 bb 46 00 00       	push   $0x46bb
+    1f60:	68 cb 46 00 00       	push   $0x46cb
     1f65:	e8 89 1a 00 00       	call   39f3 <chdir>
     1f6a:	83 c4 10             	add    $0x10,%esp
     1f6d:	85 c0                	test   %eax,%eax
@@ -3195,7 +3195,7 @@
   fd = open("dd/dd/ffff", 0);
     1f75:	83 ec 08             	sub    $0x8,%esp
     1f78:	6a 00                	push   $0x0
-    1f7a:	68 52 46 00 00       	push   $0x4652
+    1f7a:	68 62 46 00 00       	push   $0x4662
     1f7f:	e8 3f 1a 00 00       	call   39c3 <open>
   if(fd < 0){
     1f84:	83 c4 10             	add    $0x10,%esp
@@ -3207,7 +3207,7 @@
   if(read(fd, buf, sizeof(buf)) != 2){
     1f91:	83 ec 04             	sub    $0x4,%esp
     1f94:	68 00 20 00 00       	push   $0x2000
-    1f99:	68 c0 86 00 00       	push   $0x86c0
+    1f99:	68 e0 86 00 00       	push   $0x86e0
     1f9e:	50                   	push   %eax
     1f9f:	e8 f7 19 00 00       	call   399b <read>
     1fa4:	83 c4 10             	add    $0x10,%esp
@@ -3221,7 +3221,7 @@
     1fb9:	58                   	pop    %eax
     1fba:	5a                   	pop    %edx
     1fbb:	6a 00                	push   $0x0
-    1fbd:	68 ee 45 00 00       	push   $0x45ee
+    1fbd:	68 fe 45 00 00       	push   $0x45fe
     1fc2:	e8 fc 19 00 00       	call   39c3 <open>
     1fc7:	83 c4 10             	add    $0x10,%esp
     1fca:	85 c0                	test   %eax,%eax
@@ -3229,7 +3229,7 @@
   if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
     1fd2:	83 ec 08             	sub    $0x8,%esp
     1fd5:	68 02 02 00 00       	push   $0x202
-    1fda:	68 06 47 00 00       	push   $0x4706
+    1fda:	68 16 47 00 00       	push   $0x4716
     1fdf:	e8 df 19 00 00       	call   39c3 <open>
     1fe4:	83 c4 10             	add    $0x10,%esp
     1fe7:	85 c0                	test   %eax,%eax
@@ -3237,7 +3237,7 @@
   if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
     1fef:	83 ec 08             	sub    $0x8,%esp
     1ff2:	68 02 02 00 00       	push   $0x202
-    1ff7:	68 2b 47 00 00       	push   $0x472b
+    1ff7:	68 3b 47 00 00       	push   $0x473b
     1ffc:	e8 c2 19 00 00       	call   39c3 <open>
     2001:	83 c4 10             	add    $0x10,%esp
     2004:	85 c0                	test   %eax,%eax
@@ -3245,7 +3245,7 @@
   if(open("dd", O_CREATE) >= 0){
     200c:	83 ec 08             	sub    $0x8,%esp
     200f:	68 00 02 00 00       	push   $0x200
-    2014:	68 b8 46 00 00       	push   $0x46b8
+    2014:	68 c8 46 00 00       	push   $0x46c8
     2019:	e8 a5 19 00 00       	call   39c3 <open>
     201e:	83 c4 10             	add    $0x10,%esp
     2021:	85 c0                	test   %eax,%eax
@@ -3253,7 +3253,7 @@
   if(open("dd", O_RDWR) >= 0){
     2029:	83 ec 08             	sub    $0x8,%esp
     202c:	6a 02                	push   $0x2
-    202e:	68 b8 46 00 00       	push   $0x46b8
+    202e:	68 c8 46 00 00       	push   $0x46c8
     2033:	e8 8b 19 00 00       	call   39c3 <open>
     2038:	83 c4 10             	add    $0x10,%esp
     203b:	85 c0                	test   %eax,%eax
@@ -3261,124 +3261,124 @@
   if(open("dd", O_WRONLY) >= 0){
     2043:	83 ec 08             	sub    $0x8,%esp
     2046:	6a 01                	push   $0x1
-    2048:	68 b8 46 00 00       	push   $0x46b8
+    2048:	68 c8 46 00 00       	push   $0x46c8
     204d:	e8 71 19 00 00       	call   39c3 <open>
     2052:	83 c4 10             	add    $0x10,%esp
     2055:	85 c0                	test   %eax,%eax
     2057:	0f 89 85 02 00 00    	jns    22e2 <subdir+0x542>
   if(link("dd/ff/ff", "dd/dd/xx") == 0){
     205d:	83 ec 08             	sub    $0x8,%esp
-    2060:	68 9a 47 00 00       	push   $0x479a
-    2065:	68 06 47 00 00       	push   $0x4706
+    2060:	68 aa 47 00 00       	push   $0x47aa
+    2065:	68 16 47 00 00       	push   $0x4716
     206a:	e8 74 19 00 00       	call   39e3 <link>
     206f:	83 c4 10             	add    $0x10,%esp
     2072:	85 c0                	test   %eax,%eax
     2074:	0f 84 55 02 00 00    	je     22cf <subdir+0x52f>
   if(link("dd/xx/ff", "dd/dd/xx") == 0){
     207a:	83 ec 08             	sub    $0x8,%esp
-    207d:	68 9a 47 00 00       	push   $0x479a
-    2082:	68 2b 47 00 00       	push   $0x472b
+    207d:	68 aa 47 00 00       	push   $0x47aa
+    2082:	68 3b 47 00 00       	push   $0x473b
     2087:	e8 57 19 00 00       	call   39e3 <link>
     208c:	83 c4 10             	add    $0x10,%esp
     208f:	85 c0                	test   %eax,%eax
     2091:	0f 84 25 02 00 00    	je     22bc <subdir+0x51c>
   if(link("dd/ff", "dd/dd/ffff") == 0){
     2097:	83 ec 08             	sub    $0x8,%esp
-    209a:	68 52 46 00 00       	push   $0x4652
-    209f:	68 f1 45 00 00       	push   $0x45f1
+    209a:	68 62 46 00 00       	push   $0x4662
+    209f:	68 01 46 00 00       	push   $0x4601
     20a4:	e8 3a 19 00 00       	call   39e3 <link>
     20a9:	83 c4 10             	add    $0x10,%esp
     20ac:	85 c0                	test   %eax,%eax
     20ae:	0f 84 a9 01 00 00    	je     225d <subdir+0x4bd>
   if(mkdir("dd/ff/ff") == 0){
     20b4:	83 ec 0c             	sub    $0xc,%esp
-    20b7:	68 06 47 00 00       	push   $0x4706
+    20b7:	68 16 47 00 00       	push   $0x4716
     20bc:	e8 2a 19 00 00       	call   39eb <mkdir>
     20c1:	83 c4 10             	add    $0x10,%esp
     20c4:	85 c0                	test   %eax,%eax
     20c6:	0f 84 7e 01 00 00    	je     224a <subdir+0x4aa>
   if(mkdir("dd/xx/ff") == 0){
     20cc:	83 ec 0c             	sub    $0xc,%esp
-    20cf:	68 2b 47 00 00       	push   $0x472b
+    20cf:	68 3b 47 00 00       	push   $0x473b
     20d4:	e8 12 19 00 00       	call   39eb <mkdir>
     20d9:	83 c4 10             	add    $0x10,%esp
     20dc:	85 c0                	test   %eax,%eax
     20de:	0f 84 67 03 00 00    	je     244b <subdir+0x6ab>
   if(mkdir("dd/dd/ffff") == 0){
     20e4:	83 ec 0c             	sub    $0xc,%esp
-    20e7:	68 52 46 00 00       	push   $0x4652
+    20e7:	68 62 46 00 00       	push   $0x4662
     20ec:	e8 fa 18 00 00       	call   39eb <mkdir>
     20f1:	83 c4 10             	add    $0x10,%esp
     20f4:	85 c0                	test   %eax,%eax
     20f6:	0f 84 3c 03 00 00    	je     2438 <subdir+0x698>
   if(unlink("dd/xx/ff") == 0){
     20fc:	83 ec 0c             	sub    $0xc,%esp
-    20ff:	68 2b 47 00 00       	push   $0x472b
+    20ff:	68 3b 47 00 00       	push   $0x473b
     2104:	e8 ca 18 00 00       	call   39d3 <unlink>
     2109:	83 c4 10             	add    $0x10,%esp
     210c:	85 c0                	test   %eax,%eax
     210e:	0f 84 11 03 00 00    	je     2425 <subdir+0x685>
   if(unlink("dd/ff/ff") == 0){
     2114:	83 ec 0c             	sub    $0xc,%esp
-    2117:	68 06 47 00 00       	push   $0x4706
+    2117:	68 16 47 00 00       	push   $0x4716
     211c:	e8 b2 18 00 00       	call   39d3 <unlink>
     2121:	83 c4 10             	add    $0x10,%esp
     2124:	85 c0                	test   %eax,%eax
     2126:	0f 84 e6 02 00 00    	je     2412 <subdir+0x672>
   if(chdir("dd/ff") == 0){
     212c:	83 ec 0c             	sub    $0xc,%esp
-    212f:	68 f1 45 00 00       	push   $0x45f1
+    212f:	68 01 46 00 00       	push   $0x4601
     2134:	e8 ba 18 00 00       	call   39f3 <chdir>
     2139:	83 c4 10             	add    $0x10,%esp
     213c:	85 c0                	test   %eax,%eax
     213e:	0f 84 bb 02 00 00    	je     23ff <subdir+0x65f>
   if(chdir("dd/xx") == 0){
     2144:	83 ec 0c             	sub    $0xc,%esp
-    2147:	68 9d 47 00 00       	push   $0x479d
+    2147:	68 ad 47 00 00       	push   $0x47ad
     214c:	e8 a2 18 00 00       	call   39f3 <chdir>
     2151:	83 c4 10             	add    $0x10,%esp
     2154:	85 c0                	test   %eax,%eax
     2156:	0f 84 90 02 00 00    	je     23ec <subdir+0x64c>
   if(unlink("dd/dd/ffff") != 0){
     215c:	83 ec 0c             	sub    $0xc,%esp
-    215f:	68 52 46 00 00       	push   $0x4652
+    215f:	68 62 46 00 00       	push   $0x4662
     2164:	e8 6a 18 00 00       	call   39d3 <unlink>
     2169:	83 c4 10             	add    $0x10,%esp
     216c:	85 c0                	test   %eax,%eax
     216e:	0f 85 9d 00 00 00    	jne    2211 <subdir+0x471>
   if(unlink("dd/ff") != 0){
     2174:	83 ec 0c             	sub    $0xc,%esp
-    2177:	68 f1 45 00 00       	push   $0x45f1
+    2177:	68 01 46 00 00       	push   $0x4601
     217c:	e8 52 18 00 00       	call   39d3 <unlink>
     2181:	83 c4 10             	add    $0x10,%esp
     2184:	85 c0                	test   %eax,%eax
     2186:	0f 85 4d 02 00 00    	jne    23d9 <subdir+0x639>
   if(unlink("dd") == 0){
     218c:	83 ec 0c             	sub    $0xc,%esp
-    218f:	68 b8 46 00 00       	push   $0x46b8
+    218f:	68 c8 46 00 00       	push   $0x46c8
     2194:	e8 3a 18 00 00       	call   39d3 <unlink>
     2199:	83 c4 10             	add    $0x10,%esp
     219c:	85 c0                	test   %eax,%eax
     219e:	0f 84 22 02 00 00    	je     23c6 <subdir+0x626>
   if(unlink("dd/dd") < 0){
     21a4:	83 ec 0c             	sub    $0xc,%esp
-    21a7:	68 cd 45 00 00       	push   $0x45cd
+    21a7:	68 dd 45 00 00       	push   $0x45dd
     21ac:	e8 22 18 00 00       	call   39d3 <unlink>
     21b1:	83 c4 10             	add    $0x10,%esp
     21b4:	85 c0                	test   %eax,%eax
     21b6:	0f 88 f7 01 00 00    	js     23b3 <subdir+0x613>
   if(unlink("dd") < 0){
     21bc:	83 ec 0c             	sub    $0xc,%esp
-    21bf:	68 b8 46 00 00       	push   $0x46b8
+    21bf:	68 c8 46 00 00       	push   $0x46c8
     21c4:	e8 0a 18 00 00       	call   39d3 <unlink>
     21c9:	83 c4 10             	add    $0x10,%esp
     21cc:	85 c0                	test   %eax,%eax
     21ce:	0f 88 cc 01 00 00    	js     23a0 <subdir+0x600>
   printf(1, "subdir ok\n");
     21d4:	83 ec 08             	sub    $0x8,%esp
-    21d7:	68 9a 48 00 00       	push   $0x489a
+    21d7:	68 aa 48 00 00       	push   $0x48aa
     21dc:	6a 01                	push   $0x1
-    21de:	e8 fd 18 00 00       	call   3ae0 <printf>
+    21de:	e8 0d 19 00 00       	call   3af0 <printf>
 }
     21e3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
     21e6:	83 c4 10             	add    $0x10,%esp
@@ -3387,281 +3387,281 @@
     printf(1, "dd/dd/../ff wrong content\n");
     21eb:	50                   	push   %eax
     21ec:	50                   	push   %eax
-    21ed:	68 37 46 00 00       	push   $0x4637
+    21ed:	68 47 46 00 00       	push   $0x4647
     21f2:	6a 01                	push   $0x1
-    21f4:	e8 e7 18 00 00       	call   3ae0 <printf>
+    21f4:	e8 f7 18 00 00       	call   3af0 <printf>
     exit();
     21f9:	e8 85 17 00 00       	call   3983 <exit>
     printf(1, "chdir dd/../../dd failed\n");
     21fe:	50                   	push   %eax
     21ff:	50                   	push   %eax
-    2200:	68 92 46 00 00       	push   $0x4692
+    2200:	68 a2 46 00 00       	push   $0x46a2
     2205:	6a 01                	push   $0x1
-    2207:	e8 d4 18 00 00       	call   3ae0 <printf>
+    2207:	e8 e4 18 00 00       	call   3af0 <printf>
     exit();
     220c:	e8 72 17 00 00       	call   3983 <exit>
     printf(1, "unlink dd/dd/ff failed\n");
     2211:	50                   	push   %eax
     2212:	50                   	push   %eax
-    2213:	68 5d 46 00 00       	push   $0x465d
+    2213:	68 6d 46 00 00       	push   $0x466d
     2218:	6a 01                	push   $0x1
-    221a:	e8 c1 18 00 00       	call   3ae0 <printf>
+    221a:	e8 d1 18 00 00       	call   3af0 <printf>
     exit();
     221f:	e8 5f 17 00 00       	call   3983 <exit>
     printf(1, "create dd/ff/ff succeeded!\n");
     2224:	51                   	push   %ecx
     2225:	51                   	push   %ecx
-    2226:	68 0f 47 00 00       	push   $0x470f
+    2226:	68 1f 47 00 00       	push   $0x471f
     222b:	6a 01                	push   $0x1
-    222d:	e8 ae 18 00 00       	call   3ae0 <printf>
+    222d:	e8 be 18 00 00       	call   3af0 <printf>
     exit();
     2232:	e8 4c 17 00 00       	call   3983 <exit>
     printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
     2237:	53                   	push   %ebx
     2238:	53                   	push   %ebx
-    2239:	68 f4 50 00 00       	push   $0x50f4
+    2239:	68 04 51 00 00       	push   $0x5104
     223e:	6a 01                	push   $0x1
-    2240:	e8 9b 18 00 00       	call   3ae0 <printf>
+    2240:	e8 ab 18 00 00       	call   3af0 <printf>
     exit();
     2245:	e8 39 17 00 00       	call   3983 <exit>
     printf(1, "mkdir dd/ff/ff succeeded!\n");
     224a:	51                   	push   %ecx
     224b:	51                   	push   %ecx
-    224c:	68 a3 47 00 00       	push   $0x47a3
+    224c:	68 b3 47 00 00       	push   $0x47b3
     2251:	6a 01                	push   $0x1
-    2253:	e8 88 18 00 00       	call   3ae0 <printf>
+    2253:	e8 98 18 00 00       	call   3af0 <printf>
     exit();
     2258:	e8 26 17 00 00       	call   3983 <exit>
     printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
     225d:	53                   	push   %ebx
     225e:	53                   	push   %ebx
-    225f:	68 64 51 00 00       	push   $0x5164
+    225f:	68 74 51 00 00       	push   $0x5174
     2264:	6a 01                	push   $0x1
-    2266:	e8 75 18 00 00       	call   3ae0 <printf>
+    2266:	e8 85 18 00 00       	call   3af0 <printf>
     exit();
     226b:	e8 13 17 00 00       	call   3983 <exit>
     printf(1, "open dd/dd/../ff failed\n");
     2270:	50                   	push   %eax
     2271:	50                   	push   %eax
-    2272:	68 1e 46 00 00       	push   $0x461e
+    2272:	68 2e 46 00 00       	push   $0x462e
     2277:	6a 01                	push   $0x1
-    2279:	e8 62 18 00 00       	call   3ae0 <printf>
+    2279:	e8 72 18 00 00       	call   3af0 <printf>
     exit();
     227e:	e8 00 17 00 00       	call   3983 <exit>
     printf(1, "create dd/dd/ff failed\n");
     2283:	51                   	push   %ecx
     2284:	51                   	push   %ecx
-    2285:	68 f7 45 00 00       	push   $0x45f7
+    2285:	68 07 46 00 00       	push   $0x4607
     228a:	6a 01                	push   $0x1
-    228c:	e8 4f 18 00 00       	call   3ae0 <printf>
+    228c:	e8 5f 18 00 00       	call   3af0 <printf>
     exit();
     2291:	e8 ed 16 00 00       	call   3983 <exit>
     printf(1, "chdir ./.. failed\n");
     2296:	50                   	push   %eax
     2297:	50                   	push   %eax
-    2298:	68 c0 46 00 00       	push   $0x46c0
+    2298:	68 d0 46 00 00       	push   $0x46d0
     229d:	6a 01                	push   $0x1
-    229f:	e8 3c 18 00 00       	call   3ae0 <printf>
+    229f:	e8 4c 18 00 00       	call   3af0 <printf>
     exit();
     22a4:	e8 da 16 00 00       	call   3983 <exit>
     printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
     22a9:	52                   	push   %edx
     22aa:	52                   	push   %edx
-    22ab:	68 ac 50 00 00       	push   $0x50ac
+    22ab:	68 bc 50 00 00       	push   $0x50bc
     22b0:	6a 01                	push   $0x1
-    22b2:	e8 29 18 00 00       	call   3ae0 <printf>
+    22b2:	e8 39 18 00 00       	call   3af0 <printf>
     exit();
     22b7:	e8 c7 16 00 00       	call   3983 <exit>
     printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
     22bc:	50                   	push   %eax
     22bd:	50                   	push   %eax
-    22be:	68 40 51 00 00       	push   $0x5140
+    22be:	68 50 51 00 00       	push   $0x5150
     22c3:	6a 01                	push   $0x1
-    22c5:	e8 16 18 00 00       	call   3ae0 <printf>
+    22c5:	e8 26 18 00 00       	call   3af0 <printf>
     exit();
     22ca:	e8 b4 16 00 00       	call   3983 <exit>
     printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
     22cf:	50                   	push   %eax
     22d0:	50                   	push   %eax
-    22d1:	68 1c 51 00 00       	push   $0x511c
+    22d1:	68 2c 51 00 00       	push   $0x512c
     22d6:	6a 01                	push   $0x1
-    22d8:	e8 03 18 00 00       	call   3ae0 <printf>
+    22d8:	e8 13 18 00 00       	call   3af0 <printf>
     exit();
     22dd:	e8 a1 16 00 00       	call   3983 <exit>
     printf(1, "open dd wronly succeeded!\n");
     22e2:	50                   	push   %eax
     22e3:	50                   	push   %eax
-    22e4:	68 7f 47 00 00       	push   $0x477f
+    22e4:	68 8f 47 00 00       	push   $0x478f
     22e9:	6a 01                	push   $0x1
-    22eb:	e8 f0 17 00 00       	call   3ae0 <printf>
+    22eb:	e8 00 18 00 00       	call   3af0 <printf>
     exit();
     22f0:	e8 8e 16 00 00       	call   3983 <exit>
     printf(1, "open dd rdwr succeeded!\n");
     22f5:	50                   	push   %eax
     22f6:	50                   	push   %eax
-    22f7:	68 66 47 00 00       	push   $0x4766
+    22f7:	68 76 47 00 00       	push   $0x4776
     22fc:	6a 01                	push   $0x1
-    22fe:	e8 dd 17 00 00       	call   3ae0 <printf>
+    22fe:	e8 ed 17 00 00       	call   3af0 <printf>
     exit();
     2303:	e8 7b 16 00 00       	call   3983 <exit>
     printf(1, "create dd succeeded!\n");
     2308:	50                   	push   %eax
     2309:	50                   	push   %eax
-    230a:	68 50 47 00 00       	push   $0x4750
+    230a:	68 60 47 00 00       	push   $0x4760
     230f:	6a 01                	push   $0x1
-    2311:	e8 ca 17 00 00       	call   3ae0 <printf>
+    2311:	e8 da 17 00 00       	call   3af0 <printf>
     exit();
     2316:	e8 68 16 00 00       	call   3983 <exit>
     printf(1, "create dd/xx/ff succeeded!\n");
     231b:	52                   	push   %edx
     231c:	52                   	push   %edx
-    231d:	68 34 47 00 00       	push   $0x4734
+    231d:	68 44 47 00 00       	push   $0x4744
     2322:	6a 01                	push   $0x1
-    2324:	e8 b7 17 00 00       	call   3ae0 <printf>
+    2324:	e8 c7 17 00 00       	call   3af0 <printf>
     exit();
     2329:	e8 55 16 00 00       	call   3983 <exit>
     printf(1, "chdir dd failed\n");
     232e:	50                   	push   %eax
     232f:	50                   	push   %eax
-    2330:	68 75 46 00 00       	push   $0x4675
+    2330:	68 85 46 00 00       	push   $0x4685
     2335:	6a 01                	push   $0x1
-    2337:	e8 a4 17 00 00       	call   3ae0 <printf>
+    2337:	e8 b4 17 00 00       	call   3af0 <printf>
     exit();
     233c:	e8 42 16 00 00       	call   3983 <exit>
     printf(1, "open (unlinked) dd/dd/ff succeeded\n");
     2341:	50                   	push   %eax
     2342:	50                   	push   %eax
-    2343:	68 d0 50 00 00       	push   $0x50d0
+    2343:	68 e0 50 00 00       	push   $0x50e0
     2348:	6a 01                	push   $0x1
-    234a:	e8 91 17 00 00       	call   3ae0 <printf>
+    234a:	e8 a1 17 00 00       	call   3af0 <printf>
     exit();
     234f:	e8 2f 16 00 00       	call   3983 <exit>
     printf(1, "subdir mkdir dd/dd failed\n");
     2354:	53                   	push   %ebx
     2355:	53                   	push   %ebx
-    2356:	68 d3 45 00 00       	push   $0x45d3
+    2356:	68 e3 45 00 00       	push   $0x45e3
     235b:	6a 01                	push   $0x1
-    235d:	e8 7e 17 00 00       	call   3ae0 <printf>
+    235d:	e8 8e 17 00 00       	call   3af0 <printf>
     exit();
     2362:	e8 1c 16 00 00       	call   3983 <exit>
     printf(1, "unlink dd (non-empty dir) succeeded!\n");
     2367:	50                   	push   %eax
     2368:	50                   	push   %eax
-    2369:	68 84 50 00 00       	push   $0x5084
+    2369:	68 94 50 00 00       	push   $0x5094
     236e:	6a 01                	push   $0x1
-    2370:	e8 6b 17 00 00       	call   3ae0 <printf>
+    2370:	e8 7b 17 00 00       	call   3af0 <printf>
     exit();
     2375:	e8 09 16 00 00       	call   3983 <exit>
     printf(1, "create dd/ff failed\n");
     237a:	50                   	push   %eax
     237b:	50                   	push   %eax
-    237c:	68 b7 45 00 00       	push   $0x45b7
+    237c:	68 c7 45 00 00       	push   $0x45c7
     2381:	6a 01                	push   $0x1
-    2383:	e8 58 17 00 00       	call   3ae0 <printf>
+    2383:	e8 68 17 00 00       	call   3af0 <printf>
     exit();
     2388:	e8 f6 15 00 00       	call   3983 <exit>
     printf(1, "subdir mkdir dd failed\n");
     238d:	50                   	push   %eax
     238e:	50                   	push   %eax
-    238f:	68 9f 45 00 00       	push   $0x459f
+    238f:	68 af 45 00 00       	push   $0x45af
     2394:	6a 01                	push   $0x1
-    2396:	e8 45 17 00 00       	call   3ae0 <printf>
+    2396:	e8 55 17 00 00       	call   3af0 <printf>
     exit();
     239b:	e8 e3 15 00 00       	call   3983 <exit>
     printf(1, "unlink dd failed\n");
     23a0:	50                   	push   %eax
     23a1:	50                   	push   %eax
-    23a2:	68 88 48 00 00       	push   $0x4888
+    23a2:	68 98 48 00 00       	push   $0x4898
     23a7:	6a 01                	push   $0x1
-    23a9:	e8 32 17 00 00       	call   3ae0 <printf>
+    23a9:	e8 42 17 00 00       	call   3af0 <printf>
     exit();
     23ae:	e8 d0 15 00 00       	call   3983 <exit>
     printf(1, "unlink dd/dd failed\n");
     23b3:	52                   	push   %edx
     23b4:	52                   	push   %edx
-    23b5:	68 73 48 00 00       	push   $0x4873
+    23b5:	68 83 48 00 00       	push   $0x4883
     23ba:	6a 01                	push   $0x1
-    23bc:	e8 1f 17 00 00       	call   3ae0 <printf>
+    23bc:	e8 2f 17 00 00       	call   3af0 <printf>
     exit();
     23c1:	e8 bd 15 00 00       	call   3983 <exit>
     printf(1, "unlink non-empty dd succeeded!\n");
     23c6:	51                   	push   %ecx
     23c7:	51                   	push   %ecx
-    23c8:	68 88 51 00 00       	push   $0x5188
+    23c8:	68 98 51 00 00       	push   $0x5198
     23cd:	6a 01                	push   $0x1
-    23cf:	e8 0c 17 00 00       	call   3ae0 <printf>
+    23cf:	e8 1c 17 00 00       	call   3af0 <printf>
     exit();
     23d4:	e8 aa 15 00 00       	call   3983 <exit>
     printf(1, "unlink dd/ff failed\n");
     23d9:	53                   	push   %ebx
     23da:	53                   	push   %ebx
-    23db:	68 5e 48 00 00       	push   $0x485e
+    23db:	68 6e 48 00 00       	push   $0x486e
     23e0:	6a 01                	push   $0x1
-    23e2:	e8 f9 16 00 00       	call   3ae0 <printf>
+    23e2:	e8 09 17 00 00       	call   3af0 <printf>
     exit();
     23e7:	e8 97 15 00 00       	call   3983 <exit>
     printf(1, "chdir dd/xx succeeded!\n");
     23ec:	50                   	push   %eax
     23ed:	50                   	push   %eax
-    23ee:	68 46 48 00 00       	push   $0x4846
+    23ee:	68 56 48 00 00       	push   $0x4856
     23f3:	6a 01                	push   $0x1
-    23f5:	e8 e6 16 00 00       	call   3ae0 <printf>
+    23f5:	e8 f6 16 00 00       	call   3af0 <printf>
     exit();
     23fa:	e8 84 15 00 00       	call   3983 <exit>
     printf(1, "chdir dd/ff succeeded!\n");
     23ff:	50                   	push   %eax
     2400:	50                   	push   %eax
-    2401:	68 2e 48 00 00       	push   $0x482e
+    2401:	68 3e 48 00 00       	push   $0x483e
     2406:	6a 01                	push   $0x1
-    2408:	e8 d3 16 00 00       	call   3ae0 <printf>
+    2408:	e8 e3 16 00 00       	call   3af0 <printf>
     exit();
     240d:	e8 71 15 00 00       	call   3983 <exit>
     printf(1, "unlink dd/ff/ff succeeded!\n");
     2412:	50                   	push   %eax
     2413:	50                   	push   %eax
-    2414:	68 12 48 00 00       	push   $0x4812
+    2414:	68 22 48 00 00       	push   $0x4822
     2419:	6a 01                	push   $0x1
-    241b:	e8 c0 16 00 00       	call   3ae0 <printf>
+    241b:	e8 d0 16 00 00       	call   3af0 <printf>
     exit();
     2420:	e8 5e 15 00 00       	call   3983 <exit>
     printf(1, "unlink dd/xx/ff succeeded!\n");
     2425:	50                   	push   %eax
     2426:	50                   	push   %eax
-    2427:	68 f6 47 00 00       	push   $0x47f6
+    2427:	68 06 48 00 00       	push   $0x4806
     242c:	6a 01                	push   $0x1
-    242e:	e8 ad 16 00 00       	call   3ae0 <printf>
+    242e:	e8 bd 16 00 00       	call   3af0 <printf>
     exit();
     2433:	e8 4b 15 00 00       	call   3983 <exit>
     printf(1, "mkdir dd/dd/ffff succeeded!\n");
     2438:	50                   	push   %eax
     2439:	50                   	push   %eax
-    243a:	68 d9 47 00 00       	push   $0x47d9
+    243a:	68 e9 47 00 00       	push   $0x47e9
     243f:	6a 01                	push   $0x1
-    2441:	e8 9a 16 00 00       	call   3ae0 <printf>
+    2441:	e8 aa 16 00 00       	call   3af0 <printf>
     exit();
     2446:	e8 38 15 00 00       	call   3983 <exit>
     printf(1, "mkdir dd/xx/ff succeeded!\n");
     244b:	52                   	push   %edx
     244c:	52                   	push   %edx
-    244d:	68 be 47 00 00       	push   $0x47be
+    244d:	68 ce 47 00 00       	push   $0x47ce
     2452:	6a 01                	push   $0x1
-    2454:	e8 87 16 00 00       	call   3ae0 <printf>
+    2454:	e8 97 16 00 00       	call   3af0 <printf>
     exit();
     2459:	e8 25 15 00 00       	call   3983 <exit>
     printf(1, "read dd/dd/ffff wrong len\n");
     245e:	51                   	push   %ecx
     245f:	51                   	push   %ecx
-    2460:	68 eb 46 00 00       	push   $0x46eb
+    2460:	68 fb 46 00 00       	push   $0x46fb
     2465:	6a 01                	push   $0x1
-    2467:	e8 74 16 00 00       	call   3ae0 <printf>
+    2467:	e8 84 16 00 00       	call   3af0 <printf>
     exit();
     246c:	e8 12 15 00 00       	call   3983 <exit>
     printf(1, "open dd/dd/ffff failed\n");
     2471:	53                   	push   %ebx
     2472:	53                   	push   %ebx
-    2473:	68 d3 46 00 00       	push   $0x46d3
+    2473:	68 e3 46 00 00       	push   $0x46e3
     2478:	6a 01                	push   $0x1
-    247a:	e8 61 16 00 00       	call   3ae0 <printf>
+    247a:	e8 71 16 00 00       	call   3af0 <printf>
     exit();
     247f:	e8 ff 14 00 00       	call   3983 <exit>
     2484:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -3679,18 +3679,18 @@
     2499:	bb f3 01 00 00       	mov    $0x1f3,%ebx
   printf(1, "bigwrite test\n");
     249e:	83 ec 08             	sub    $0x8,%esp
-    24a1:	68 a5 48 00 00       	push   $0x48a5
+    24a1:	68 b5 48 00 00       	push   $0x48b5
     24a6:	6a 01                	push   $0x1
-    24a8:	e8 33 16 00 00       	call   3ae0 <printf>
+    24a8:	e8 43 16 00 00       	call   3af0 <printf>
   unlink("bigwrite");
-    24ad:	c7 04 24 b4 48 00 00 	movl   $0x48b4,(%esp)
+    24ad:	c7 04 24 c4 48 00 00 	movl   $0x48c4,(%esp)
     24b4:	e8 1a 15 00 00       	call   39d3 <unlink>
     24b9:	83 c4 10             	add    $0x10,%esp
     24bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     fd = open("bigwrite", O_CREATE | O_RDWR);
     24c0:	83 ec 08             	sub    $0x8,%esp
     24c3:	68 02 02 00 00       	push   $0x202
-    24c8:	68 b4 48 00 00       	push   $0x48b4
+    24c8:	68 c4 48 00 00       	push   $0x48c4
     24cd:	e8 f1 14 00 00       	call   39c3 <open>
     if(fd < 0){
     24d2:	83 c4 10             	add    $0x10,%esp
@@ -3702,7 +3702,7 @@
       int cc = write(fd, buf, sz);
     24db:	83 ec 04             	sub    $0x4,%esp
     24de:	53                   	push   %ebx
-    24df:	68 c0 86 00 00       	push   $0x86c0
+    24df:	68 e0 86 00 00       	push   $0x86e0
     24e4:	50                   	push   %eax
     24e5:	e8 b9 14 00 00       	call   39a3 <write>
       if(cc != sz){
@@ -3712,7 +3712,7 @@
       int cc = write(fd, buf, sz);
     24f1:	83 ec 04             	sub    $0x4,%esp
     24f4:	53                   	push   %ebx
-    24f5:	68 c0 86 00 00       	push   $0x86c0
+    24f5:	68 e0 86 00 00       	push   $0x86e0
     24fa:	56                   	push   %esi
     24fb:	e8 a3 14 00 00       	call   39a3 <write>
       if(cc != sz){
@@ -3727,7 +3727,7 @@
     2510:	56                   	push   %esi
     2511:	e8 95 14 00 00       	call   39ab <close>
     unlink("bigwrite");
-    2516:	c7 04 24 b4 48 00 00 	movl   $0x48b4,(%esp)
+    2516:	c7 04 24 c4 48 00 00 	movl   $0x48c4,(%esp)
     251d:	e8 b1 14 00 00       	call   39d3 <unlink>
   for(sz = 499; sz < 12*512; sz += 471){
     2522:	83 c4 10             	add    $0x10,%esp
@@ -3735,9 +3735,9 @@
     252b:	75 93                	jne    24c0 <bigwrite+0x30>
   printf(1, "bigwrite ok\n");
     252d:	83 ec 08             	sub    $0x8,%esp
-    2530:	68 e7 48 00 00       	push   $0x48e7
+    2530:	68 f7 48 00 00       	push   $0x48f7
     2535:	6a 01                	push   $0x1
-    2537:	e8 a4 15 00 00       	call   3ae0 <printf>
+    2537:	e8 b4 15 00 00       	call   3af0 <printf>
 }
     253c:	83 c4 10             	add    $0x10,%esp
     253f:	8d 65 f8             	lea    -0x8(%ebp),%esp
@@ -3748,16 +3748,16 @@
         printf(1, "write(%d) ret %d\n", sz, cc);
     2546:	50                   	push   %eax
     2547:	53                   	push   %ebx
-    2548:	68 d5 48 00 00       	push   $0x48d5
+    2548:	68 e5 48 00 00       	push   $0x48e5
     254d:	6a 01                	push   $0x1
-    254f:	e8 8c 15 00 00       	call   3ae0 <printf>
+    254f:	e8 9c 15 00 00       	call   3af0 <printf>
         exit();
     2554:	e8 2a 14 00 00       	call   3983 <exit>
       printf(1, "cannot create bigwrite\n");
     2559:	83 ec 08             	sub    $0x8,%esp
-    255c:	68 bd 48 00 00       	push   $0x48bd
+    255c:	68 cd 48 00 00       	push   $0x48cd
     2561:	6a 01                	push   $0x1
-    2563:	e8 78 15 00 00       	call   3ae0 <printf>
+    2563:	e8 88 15 00 00       	call   3af0 <printf>
       exit();
     2568:	e8 16 14 00 00       	call   3983 <exit>
     256d:	8d 76 00             	lea    0x0(%esi),%esi
@@ -3772,17 +3772,17 @@
     2579:	53                   	push   %ebx
     257a:	83 ec 14             	sub    $0x14,%esp
   printf(1, "bigfile test\n");
-    257d:	68 f4 48 00 00       	push   $0x48f4
+    257d:	68 04 49 00 00       	push   $0x4904
     2582:	6a 01                	push   $0x1
-    2584:	e8 57 15 00 00       	call   3ae0 <printf>
+    2584:	e8 67 15 00 00       	call   3af0 <printf>
   unlink("bigfile");
-    2589:	c7 04 24 10 49 00 00 	movl   $0x4910,(%esp)
+    2589:	c7 04 24 20 49 00 00 	movl   $0x4920,(%esp)
     2590:	e8 3e 14 00 00       	call   39d3 <unlink>
   fd = open("bigfile", O_CREATE | O_RDWR);
     2595:	58                   	pop    %eax
     2596:	5a                   	pop    %edx
     2597:	68 02 02 00 00       	push   $0x202
-    259c:	68 10 49 00 00       	push   $0x4910
+    259c:	68 20 49 00 00       	push   $0x4920
     25a1:	e8 1d 14 00 00       	call   39c3 <open>
   if(fd < 0){
     25a6:	83 c4 10             	add    $0x10,%esp
@@ -3796,12 +3796,12 @@
     25b8:	83 ec 04             	sub    $0x4,%esp
     25bb:	68 58 02 00 00       	push   $0x258
     25c0:	53                   	push   %ebx
-    25c1:	68 c0 86 00 00       	push   $0x86c0
+    25c1:	68 e0 86 00 00       	push   $0x86e0
     25c6:	e8 15 12 00 00       	call   37e0 <memset>
     if(write(fd, buf, 600) != 600){
     25cb:	83 c4 0c             	add    $0xc,%esp
     25ce:	68 58 02 00 00       	push   $0x258
-    25d3:	68 c0 86 00 00       	push   $0x86c0
+    25d3:	68 e0 86 00 00       	push   $0x86e0
     25d8:	56                   	push   %esi
     25d9:	e8 c5 13 00 00       	call   39a3 <write>
     25de:	83 c4 10             	add    $0x10,%esp
@@ -3819,7 +3819,7 @@
     25fd:	5e                   	pop    %esi
     25fe:	5f                   	pop    %edi
     25ff:	6a 00                	push   $0x0
-    2601:	68 10 49 00 00       	push   $0x4910
+    2601:	68 20 49 00 00       	push   $0x4920
     2606:	e8 b8 13 00 00       	call   39c3 <open>
   if(fd < 0){
     260b:	83 c4 10             	add    $0x10,%esp
@@ -3839,11 +3839,11 @@
     2625:	0f 85 91 00 00 00    	jne    26bc <bigfile+0x14c>
     if(buf[0] != i/2 || buf[299] != i/2){
     262b:	89 fa                	mov    %edi,%edx
-    262d:	0f be 05 c0 86 00 00 	movsbl 0x86c0,%eax
+    262d:	0f be 05 e0 86 00 00 	movsbl 0x86e0,%eax
     2634:	d1 fa                	sar    %edx
     2636:	39 d0                	cmp    %edx,%eax
     2638:	75 6e                	jne    26a8 <bigfile+0x138>
-    263a:	0f be 15 eb 87 00 00 	movsbl 0x87eb,%edx
+    263a:	0f be 15 0b 88 00 00 	movsbl 0x880b,%edx
     2641:	39 d0                	cmp    %edx,%eax
     2643:	75 63                	jne    26a8 <bigfile+0x138>
     total += cc;
@@ -3853,7 +3853,7 @@
     cc = read(fd, buf, 300);
     264e:	83 ec 04             	sub    $0x4,%esp
     2651:	68 2c 01 00 00       	push   $0x12c
-    2656:	68 c0 86 00 00       	push   $0x86c0
+    2656:	68 e0 86 00 00       	push   $0x86e0
     265b:	56                   	push   %esi
     265c:	e8 3a 13 00 00       	call   399b <read>
     if(cc < 0){
@@ -3872,14 +3872,14 @@
     267c:	0f 85 9c 00 00 00    	jne    271e <bigfile+0x1ae>
   unlink("bigfile");
     2682:	83 ec 0c             	sub    $0xc,%esp
-    2685:	68 10 49 00 00       	push   $0x4910
+    2685:	68 20 49 00 00       	push   $0x4920
     268a:	e8 44 13 00 00       	call   39d3 <unlink>
   printf(1, "bigfile test ok\n");
     268f:	58                   	pop    %eax
     2690:	5a                   	pop    %edx
-    2691:	68 9f 49 00 00       	push   $0x499f
+    2691:	68 af 49 00 00       	push   $0x49af
     2696:	6a 01                	push   $0x1
-    2698:	e8 43 14 00 00       	call   3ae0 <printf>
+    2698:	e8 53 14 00 00       	call   3af0 <printf>
 }
     269d:	83 c4 10             	add    $0x10,%esp
     26a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -3890,54 +3890,54 @@
     26a7:	c3                   	ret    
       printf(1, "read bigfile wrong data\n");
     26a8:	83 ec 08             	sub    $0x8,%esp
-    26ab:	68 6c 49 00 00       	push   $0x496c
+    26ab:	68 7c 49 00 00       	push   $0x497c
     26b0:	6a 01                	push   $0x1
-    26b2:	e8 29 14 00 00       	call   3ae0 <printf>
+    26b2:	e8 39 14 00 00       	call   3af0 <printf>
       exit();
     26b7:	e8 c7 12 00 00       	call   3983 <exit>
       printf(1, "short read bigfile\n");
     26bc:	83 ec 08             	sub    $0x8,%esp
-    26bf:	68 58 49 00 00       	push   $0x4958
+    26bf:	68 68 49 00 00       	push   $0x4968
     26c4:	6a 01                	push   $0x1
-    26c6:	e8 15 14 00 00       	call   3ae0 <printf>
+    26c6:	e8 25 14 00 00       	call   3af0 <printf>
       exit();
     26cb:	e8 b3 12 00 00       	call   3983 <exit>
       printf(1, "read bigfile failed\n");
     26d0:	83 ec 08             	sub    $0x8,%esp
-    26d3:	68 43 49 00 00       	push   $0x4943
+    26d3:	68 53 49 00 00       	push   $0x4953
     26d8:	6a 01                	push   $0x1
-    26da:	e8 01 14 00 00       	call   3ae0 <printf>
+    26da:	e8 11 14 00 00       	call   3af0 <printf>
       exit();
     26df:	e8 9f 12 00 00       	call   3983 <exit>
       printf(1, "write bigfile failed\n");
     26e4:	83 ec 08             	sub    $0x8,%esp
-    26e7:	68 18 49 00 00       	push   $0x4918
+    26e7:	68 28 49 00 00       	push   $0x4928
     26ec:	6a 01                	push   $0x1
-    26ee:	e8 ed 13 00 00       	call   3ae0 <printf>
+    26ee:	e8 fd 13 00 00       	call   3af0 <printf>
       exit();
     26f3:	e8 8b 12 00 00       	call   3983 <exit>
     printf(1, "cannot open bigfile\n");
     26f8:	53                   	push   %ebx
     26f9:	53                   	push   %ebx
-    26fa:	68 2e 49 00 00       	push   $0x492e
+    26fa:	68 3e 49 00 00       	push   $0x493e
     26ff:	6a 01                	push   $0x1
-    2701:	e8 da 13 00 00       	call   3ae0 <printf>
+    2701:	e8 ea 13 00 00       	call   3af0 <printf>
     exit();
     2706:	e8 78 12 00 00       	call   3983 <exit>
     printf(1, "cannot create bigfile");
     270b:	50                   	push   %eax
     270c:	50                   	push   %eax
-    270d:	68 02 49 00 00       	push   $0x4902
+    270d:	68 12 49 00 00       	push   $0x4912
     2712:	6a 01                	push   $0x1
-    2714:	e8 c7 13 00 00       	call   3ae0 <printf>
+    2714:	e8 d7 13 00 00       	call   3af0 <printf>
     exit();
     2719:	e8 65 12 00 00       	call   3983 <exit>
     printf(1, "read bigfile wrong total\n");
     271e:	51                   	push   %ecx
     271f:	51                   	push   %ecx
-    2720:	68 85 49 00 00       	push   $0x4985
+    2720:	68 95 49 00 00       	push   $0x4995
     2725:	6a 01                	push   $0x1
-    2727:	e8 b4 13 00 00       	call   3ae0 <printf>
+    2727:	e8 c4 13 00 00       	call   3af0 <printf>
     exit();
     272c:	e8 52 12 00 00       	call   3983 <exit>
     2731:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -3951,18 +3951,18 @@
     2745:	89 e5                	mov    %esp,%ebp
     2747:	83 ec 10             	sub    $0x10,%esp
   printf(1, "fourteen test\n");
-    274a:	68 b0 49 00 00       	push   $0x49b0
+    274a:	68 c0 49 00 00       	push   $0x49c0
     274f:	6a 01                	push   $0x1
-    2751:	e8 8a 13 00 00       	call   3ae0 <printf>
+    2751:	e8 9a 13 00 00       	call   3af0 <printf>
   if(mkdir("12345678901234") != 0){
-    2756:	c7 04 24 eb 49 00 00 	movl   $0x49eb,(%esp)
+    2756:	c7 04 24 fb 49 00 00 	movl   $0x49fb,(%esp)
     275d:	e8 89 12 00 00       	call   39eb <mkdir>
     2762:	83 c4 10             	add    $0x10,%esp
     2765:	85 c0                	test   %eax,%eax
     2767:	0f 85 97 00 00 00    	jne    2804 <fourteen+0xc4>
   if(mkdir("12345678901234/123456789012345") != 0){
     276d:	83 ec 0c             	sub    $0xc,%esp
-    2770:	68 a8 51 00 00       	push   $0x51a8
+    2770:	68 b8 51 00 00       	push   $0x51b8
     2775:	e8 71 12 00 00       	call   39eb <mkdir>
     277a:	83 c4 10             	add    $0x10,%esp
     277d:	85 c0                	test   %eax,%eax
@@ -3970,7 +3970,7 @@
   fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
     2785:	83 ec 08             	sub    $0x8,%esp
     2788:	68 00 02 00 00       	push   $0x200
-    278d:	68 f8 51 00 00       	push   $0x51f8
+    278d:	68 08 52 00 00       	push   $0x5208
     2792:	e8 2c 12 00 00       	call   39c3 <open>
   if(fd < 0){
     2797:	83 c4 10             	add    $0x10,%esp
@@ -3984,7 +3984,7 @@
     27ab:	58                   	pop    %eax
     27ac:	5a                   	pop    %edx
     27ad:	6a 00                	push   $0x0
-    27af:	68 68 52 00 00       	push   $0x5268
+    27af:	68 78 52 00 00       	push   $0x5278
     27b4:	e8 0a 12 00 00       	call   39c3 <open>
   if(fd < 0){
     27b9:	83 c4 10             	add    $0x10,%esp
@@ -3995,23 +3995,23 @@
     27c3:	50                   	push   %eax
     27c4:	e8 e2 11 00 00       	call   39ab <close>
   if(mkdir("12345678901234/12345678901234") == 0){
-    27c9:	c7 04 24 dc 49 00 00 	movl   $0x49dc,(%esp)
+    27c9:	c7 04 24 ec 49 00 00 	movl   $0x49ec,(%esp)
     27d0:	e8 16 12 00 00       	call   39eb <mkdir>
     27d5:	83 c4 10             	add    $0x10,%esp
     27d8:	85 c0                	test   %eax,%eax
     27da:	74 4e                	je     282a <fourteen+0xea>
   if(mkdir("123456789012345/12345678901234") == 0){
     27dc:	83 ec 0c             	sub    $0xc,%esp
-    27df:	68 04 53 00 00       	push   $0x5304
+    27df:	68 14 53 00 00       	push   $0x5314
     27e4:	e8 02 12 00 00       	call   39eb <mkdir>
     27e9:	83 c4 10             	add    $0x10,%esp
     27ec:	85 c0                	test   %eax,%eax
     27ee:	74 27                	je     2817 <fourteen+0xd7>
   printf(1, "fourteen ok\n");
     27f0:	83 ec 08             	sub    $0x8,%esp
-    27f3:	68 fa 49 00 00       	push   $0x49fa
+    27f3:	68 0a 4a 00 00       	push   $0x4a0a
     27f8:	6a 01                	push   $0x1
-    27fa:	e8 e1 12 00 00       	call   3ae0 <printf>
+    27fa:	e8 f1 12 00 00       	call   3af0 <printf>
 }
     27ff:	83 c4 10             	add    $0x10,%esp
     2802:	c9                   	leave  
@@ -4019,49 +4019,49 @@
     printf(1, "mkdir 12345678901234 failed\n");
     2804:	50                   	push   %eax
     2805:	50                   	push   %eax
-    2806:	68 bf 49 00 00       	push   $0x49bf
+    2806:	68 cf 49 00 00       	push   $0x49cf
     280b:	6a 01                	push   $0x1
-    280d:	e8 ce 12 00 00       	call   3ae0 <printf>
+    280d:	e8 de 12 00 00       	call   3af0 <printf>
     exit();
     2812:	e8 6c 11 00 00       	call   3983 <exit>
     printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
     2817:	50                   	push   %eax
     2818:	50                   	push   %eax
-    2819:	68 24 53 00 00       	push   $0x5324
+    2819:	68 34 53 00 00       	push   $0x5334
     281e:	6a 01                	push   $0x1
-    2820:	e8 bb 12 00 00       	call   3ae0 <printf>
+    2820:	e8 cb 12 00 00       	call   3af0 <printf>
     exit();
     2825:	e8 59 11 00 00       	call   3983 <exit>
     printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
     282a:	52                   	push   %edx
     282b:	52                   	push   %edx
-    282c:	68 d4 52 00 00       	push   $0x52d4
+    282c:	68 e4 52 00 00       	push   $0x52e4
     2831:	6a 01                	push   $0x1
-    2833:	e8 a8 12 00 00       	call   3ae0 <printf>
+    2833:	e8 b8 12 00 00       	call   3af0 <printf>
     exit();
     2838:	e8 46 11 00 00       	call   3983 <exit>
     printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
     283d:	51                   	push   %ecx
     283e:	51                   	push   %ecx
-    283f:	68 98 52 00 00       	push   $0x5298
+    283f:	68 a8 52 00 00       	push   $0x52a8
     2844:	6a 01                	push   $0x1
-    2846:	e8 95 12 00 00       	call   3ae0 <printf>
+    2846:	e8 a5 12 00 00       	call   3af0 <printf>
     exit();
     284b:	e8 33 11 00 00       	call   3983 <exit>
     printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
     2850:	51                   	push   %ecx
     2851:	51                   	push   %ecx
-    2852:	68 28 52 00 00       	push   $0x5228
+    2852:	68 38 52 00 00       	push   $0x5238
     2857:	6a 01                	push   $0x1
-    2859:	e8 82 12 00 00       	call   3ae0 <printf>
+    2859:	e8 92 12 00 00       	call   3af0 <printf>
     exit();
     285e:	e8 20 11 00 00       	call   3983 <exit>
     printf(1, "mkdir 12345678901234/123456789012345 failed\n");
     2863:	50                   	push   %eax
     2864:	50                   	push   %eax
-    2865:	68 c8 51 00 00       	push   $0x51c8
+    2865:	68 d8 51 00 00       	push   $0x51d8
     286a:	6a 01                	push   $0x1
-    286c:	e8 6f 12 00 00       	call   3ae0 <printf>
+    286c:	e8 7f 12 00 00       	call   3af0 <printf>
     exit();
     2871:	e8 0d 11 00 00       	call   3983 <exit>
     2876:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -4074,69 +4074,69 @@
     2885:	89 e5                	mov    %esp,%ebp
     2887:	83 ec 10             	sub    $0x10,%esp
   printf(1, "rmdot test\n");
-    288a:	68 07 4a 00 00       	push   $0x4a07
+    288a:	68 17 4a 00 00       	push   $0x4a17
     288f:	6a 01                	push   $0x1
-    2891:	e8 4a 12 00 00       	call   3ae0 <printf>
+    2891:	e8 5a 12 00 00       	call   3af0 <printf>
   if(mkdir("dots") != 0){
-    2896:	c7 04 24 13 4a 00 00 	movl   $0x4a13,(%esp)
+    2896:	c7 04 24 23 4a 00 00 	movl   $0x4a23,(%esp)
     289d:	e8 49 11 00 00       	call   39eb <mkdir>
     28a2:	83 c4 10             	add    $0x10,%esp
     28a5:	85 c0                	test   %eax,%eax
     28a7:	0f 85 b0 00 00 00    	jne    295d <rmdot+0xdd>
   if(chdir("dots") != 0){
     28ad:	83 ec 0c             	sub    $0xc,%esp
-    28b0:	68 13 4a 00 00       	push   $0x4a13
+    28b0:	68 23 4a 00 00       	push   $0x4a23
     28b5:	e8 39 11 00 00       	call   39f3 <chdir>
     28ba:	83 c4 10             	add    $0x10,%esp
     28bd:	85 c0                	test   %eax,%eax
     28bf:	0f 85 1d 01 00 00    	jne    29e2 <rmdot+0x162>
   if(unlink(".") == 0){
     28c5:	83 ec 0c             	sub    $0xc,%esp
-    28c8:	68 be 46 00 00       	push   $0x46be
+    28c8:	68 ce 46 00 00       	push   $0x46ce
     28cd:	e8 01 11 00 00       	call   39d3 <unlink>
     28d2:	83 c4 10             	add    $0x10,%esp
     28d5:	85 c0                	test   %eax,%eax
     28d7:	0f 84 f2 00 00 00    	je     29cf <rmdot+0x14f>
   if(unlink("..") == 0){
     28dd:	83 ec 0c             	sub    $0xc,%esp
-    28e0:	68 bd 46 00 00       	push   $0x46bd
+    28e0:	68 cd 46 00 00       	push   $0x46cd
     28e5:	e8 e9 10 00 00       	call   39d3 <unlink>
     28ea:	83 c4 10             	add    $0x10,%esp
     28ed:	85 c0                	test   %eax,%eax
     28ef:	0f 84 c7 00 00 00    	je     29bc <rmdot+0x13c>
   if(chdir("/") != 0){
     28f5:	83 ec 0c             	sub    $0xc,%esp
-    28f8:	68 91 3e 00 00       	push   $0x3e91
+    28f8:	68 a1 3e 00 00       	push   $0x3ea1
     28fd:	e8 f1 10 00 00       	call   39f3 <chdir>
     2902:	83 c4 10             	add    $0x10,%esp
     2905:	85 c0                	test   %eax,%eax
     2907:	0f 85 9c 00 00 00    	jne    29a9 <rmdot+0x129>
   if(unlink("dots/.") == 0){
     290d:	83 ec 0c             	sub    $0xc,%esp
-    2910:	68 5b 4a 00 00       	push   $0x4a5b
+    2910:	68 6b 4a 00 00       	push   $0x4a6b
     2915:	e8 b9 10 00 00       	call   39d3 <unlink>
     291a:	83 c4 10             	add    $0x10,%esp
     291d:	85 c0                	test   %eax,%eax
     291f:	74 75                	je     2996 <rmdot+0x116>
   if(unlink("dots/..") == 0){
     2921:	83 ec 0c             	sub    $0xc,%esp
-    2924:	68 79 4a 00 00       	push   $0x4a79
+    2924:	68 89 4a 00 00       	push   $0x4a89
     2929:	e8 a5 10 00 00       	call   39d3 <unlink>
     292e:	83 c4 10             	add    $0x10,%esp
     2931:	85 c0                	test   %eax,%eax
     2933:	74 4e                	je     2983 <rmdot+0x103>
   if(unlink("dots") != 0){
     2935:	83 ec 0c             	sub    $0xc,%esp
-    2938:	68 13 4a 00 00       	push   $0x4a13
+    2938:	68 23 4a 00 00       	push   $0x4a23
     293d:	e8 91 10 00 00       	call   39d3 <unlink>
     2942:	83 c4 10             	add    $0x10,%esp
     2945:	85 c0                	test   %eax,%eax
     2947:	75 27                	jne    2970 <rmdot+0xf0>
   printf(1, "rmdot ok\n");
     2949:	83 ec 08             	sub    $0x8,%esp
-    294c:	68 ae 4a 00 00       	push   $0x4aae
+    294c:	68 be 4a 00 00       	push   $0x4abe
     2951:	6a 01                	push   $0x1
-    2953:	e8 88 11 00 00       	call   3ae0 <printf>
+    2953:	e8 98 11 00 00       	call   3af0 <printf>
 }
     2958:	83 c4 10             	add    $0x10,%esp
     295b:	c9                   	leave  
@@ -4144,65 +4144,65 @@
     printf(1, "mkdir dots failed\n");
     295d:	50                   	push   %eax
     295e:	50                   	push   %eax
-    295f:	68 18 4a 00 00       	push   $0x4a18
+    295f:	68 28 4a 00 00       	push   $0x4a28
     2964:	6a 01                	push   $0x1
-    2966:	e8 75 11 00 00       	call   3ae0 <printf>
+    2966:	e8 85 11 00 00       	call   3af0 <printf>
     exit();
     296b:	e8 13 10 00 00       	call   3983 <exit>
     printf(1, "unlink dots failed!\n");
     2970:	50                   	push   %eax
     2971:	50                   	push   %eax
-    2972:	68 99 4a 00 00       	push   $0x4a99
+    2972:	68 a9 4a 00 00       	push   $0x4aa9
     2977:	6a 01                	push   $0x1
-    2979:	e8 62 11 00 00       	call   3ae0 <printf>
+    2979:	e8 72 11 00 00       	call   3af0 <printf>
     exit();
     297e:	e8 00 10 00 00       	call   3983 <exit>
     printf(1, "unlink dots/.. worked!\n");
     2983:	52                   	push   %edx
     2984:	52                   	push   %edx
-    2985:	68 81 4a 00 00       	push   $0x4a81
+    2985:	68 91 4a 00 00       	push   $0x4a91
     298a:	6a 01                	push   $0x1
-    298c:	e8 4f 11 00 00       	call   3ae0 <printf>
+    298c:	e8 5f 11 00 00       	call   3af0 <printf>
     exit();
     2991:	e8 ed 0f 00 00       	call   3983 <exit>
     printf(1, "unlink dots/. worked!\n");
     2996:	51                   	push   %ecx
     2997:	51                   	push   %ecx
-    2998:	68 62 4a 00 00       	push   $0x4a62
+    2998:	68 72 4a 00 00       	push   $0x4a72
     299d:	6a 01                	push   $0x1
-    299f:	e8 3c 11 00 00       	call   3ae0 <printf>
+    299f:	e8 4c 11 00 00       	call   3af0 <printf>
     exit();
     29a4:	e8 da 0f 00 00       	call   3983 <exit>
     printf(1, "chdir / failed\n");
     29a9:	50                   	push   %eax
     29aa:	50                   	push   %eax
-    29ab:	68 93 3e 00 00       	push   $0x3e93
+    29ab:	68 a3 3e 00 00       	push   $0x3ea3
     29b0:	6a 01                	push   $0x1
-    29b2:	e8 29 11 00 00       	call   3ae0 <printf>
+    29b2:	e8 39 11 00 00       	call   3af0 <printf>
     exit();
     29b7:	e8 c7 0f 00 00       	call   3983 <exit>
     printf(1, "rm .. worked!\n");
     29bc:	50                   	push   %eax
     29bd:	50                   	push   %eax
-    29be:	68 4c 4a 00 00       	push   $0x4a4c
+    29be:	68 5c 4a 00 00       	push   $0x4a5c
     29c3:	6a 01                	push   $0x1
-    29c5:	e8 16 11 00 00       	call   3ae0 <printf>
+    29c5:	e8 26 11 00 00       	call   3af0 <printf>
     exit();
     29ca:	e8 b4 0f 00 00       	call   3983 <exit>
     printf(1, "rm . worked!\n");
     29cf:	50                   	push   %eax
     29d0:	50                   	push   %eax
-    29d1:	68 3e 4a 00 00       	push   $0x4a3e
+    29d1:	68 4e 4a 00 00       	push   $0x4a4e
     29d6:	6a 01                	push   $0x1
-    29d8:	e8 03 11 00 00       	call   3ae0 <printf>
+    29d8:	e8 13 11 00 00       	call   3af0 <printf>
     exit();
     29dd:	e8 a1 0f 00 00       	call   3983 <exit>
     printf(1, "chdir dots failed\n");
     29e2:	50                   	push   %eax
     29e3:	50                   	push   %eax
-    29e4:	68 2b 4a 00 00       	push   $0x4a2b
+    29e4:	68 3b 4a 00 00       	push   $0x4a3b
     29e9:	6a 01                	push   $0x1
-    29eb:	e8 f0 10 00 00       	call   3ae0 <printf>
+    29eb:	e8 00 11 00 00       	call   3af0 <printf>
     exit();
     29f0:	e8 8e 0f 00 00       	call   3983 <exit>
     29f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -4216,14 +4216,14 @@
     2a07:	53                   	push   %ebx
     2a08:	83 ec 0c             	sub    $0xc,%esp
   printf(1, "dir vs file\n");
-    2a0b:	68 b8 4a 00 00       	push   $0x4ab8
+    2a0b:	68 c8 4a 00 00       	push   $0x4ac8
     2a10:	6a 01                	push   $0x1
-    2a12:	e8 c9 10 00 00       	call   3ae0 <printf>
+    2a12:	e8 d9 10 00 00       	call   3af0 <printf>
   fd = open("dirfile", O_CREATE);
     2a17:	5b                   	pop    %ebx
     2a18:	58                   	pop    %eax
     2a19:	68 00 02 00 00       	push   $0x200
-    2a1e:	68 c5 4a 00 00       	push   $0x4ac5
+    2a1e:	68 d5 4a 00 00       	push   $0x4ad5
     2a23:	e8 9b 0f 00 00       	call   39c3 <open>
   if(fd < 0){
     2a28:	83 c4 10             	add    $0x10,%esp
@@ -4234,7 +4234,7 @@
     2a36:	50                   	push   %eax
     2a37:	e8 6f 0f 00 00       	call   39ab <close>
   if(chdir("dirfile") == 0){
-    2a3c:	c7 04 24 c5 4a 00 00 	movl   $0x4ac5,(%esp)
+    2a3c:	c7 04 24 d5 4a 00 00 	movl   $0x4ad5,(%esp)
     2a43:	e8 ab 0f 00 00       	call   39f3 <chdir>
     2a48:	83 c4 10             	add    $0x10,%esp
     2a4b:	85 c0                	test   %eax,%eax
@@ -4242,7 +4242,7 @@
   fd = open("dirfile/xx", 0);
     2a53:	83 ec 08             	sub    $0x8,%esp
     2a56:	6a 00                	push   $0x0
-    2a58:	68 fe 4a 00 00       	push   $0x4afe
+    2a58:	68 0e 4b 00 00       	push   $0x4b0e
     2a5d:	e8 61 0f 00 00       	call   39c3 <open>
   if(fd >= 0){
     2a62:	83 c4 10             	add    $0x10,%esp
@@ -4251,7 +4251,7 @@
   fd = open("dirfile/xx", O_CREATE);
     2a6d:	83 ec 08             	sub    $0x8,%esp
     2a70:	68 00 02 00 00       	push   $0x200
-    2a75:	68 fe 4a 00 00       	push   $0x4afe
+    2a75:	68 0e 4b 00 00       	push   $0x4b0e
     2a7a:	e8 44 0f 00 00       	call   39c3 <open>
   if(fd >= 0){
     2a7f:	83 c4 10             	add    $0x10,%esp
@@ -4259,29 +4259,29 @@
     2a84:	0f 89 c6 00 00 00    	jns    2b50 <dirfile+0x150>
   if(mkdir("dirfile/xx") == 0){
     2a8a:	83 ec 0c             	sub    $0xc,%esp
-    2a8d:	68 fe 4a 00 00       	push   $0x4afe
+    2a8d:	68 0e 4b 00 00       	push   $0x4b0e
     2a92:	e8 54 0f 00 00       	call   39eb <mkdir>
     2a97:	83 c4 10             	add    $0x10,%esp
     2a9a:	85 c0                	test   %eax,%eax
     2a9c:	0f 84 46 01 00 00    	je     2be8 <dirfile+0x1e8>
   if(unlink("dirfile/xx") == 0){
     2aa2:	83 ec 0c             	sub    $0xc,%esp
-    2aa5:	68 fe 4a 00 00       	push   $0x4afe
+    2aa5:	68 0e 4b 00 00       	push   $0x4b0e
     2aaa:	e8 24 0f 00 00       	call   39d3 <unlink>
     2aaf:	83 c4 10             	add    $0x10,%esp
     2ab2:	85 c0                	test   %eax,%eax
     2ab4:	0f 84 1b 01 00 00    	je     2bd5 <dirfile+0x1d5>
   if(link("README", "dirfile/xx") == 0){
     2aba:	83 ec 08             	sub    $0x8,%esp
-    2abd:	68 fe 4a 00 00       	push   $0x4afe
-    2ac2:	68 62 4b 00 00       	push   $0x4b62
+    2abd:	68 0e 4b 00 00       	push   $0x4b0e
+    2ac2:	68 72 4b 00 00       	push   $0x4b72
     2ac7:	e8 17 0f 00 00       	call   39e3 <link>
     2acc:	83 c4 10             	add    $0x10,%esp
     2acf:	85 c0                	test   %eax,%eax
     2ad1:	0f 84 eb 00 00 00    	je     2bc2 <dirfile+0x1c2>
   if(unlink("dirfile") != 0){
     2ad7:	83 ec 0c             	sub    $0xc,%esp
-    2ada:	68 c5 4a 00 00       	push   $0x4ac5
+    2ada:	68 d5 4a 00 00       	push   $0x4ad5
     2adf:	e8 ef 0e 00 00       	call   39d3 <unlink>
     2ae4:	83 c4 10             	add    $0x10,%esp
     2ae7:	85 c0                	test   %eax,%eax
@@ -4289,7 +4289,7 @@
   fd = open(".", O_RDWR);
     2aef:	83 ec 08             	sub    $0x8,%esp
     2af2:	6a 02                	push   $0x2
-    2af4:	68 be 46 00 00       	push   $0x46be
+    2af4:	68 ce 46 00 00       	push   $0x46ce
     2af9:	e8 c5 0e 00 00       	call   39c3 <open>
   if(fd >= 0){
     2afe:	83 c4 10             	add    $0x10,%esp
@@ -4298,7 +4298,7 @@
   fd = open(".", 0);
     2b09:	83 ec 08             	sub    $0x8,%esp
     2b0c:	6a 00                	push   $0x0
-    2b0e:	68 be 46 00 00       	push   $0x46be
+    2b0e:	68 ce 46 00 00       	push   $0x46ce
     2b13:	e8 ab 0e 00 00       	call   39c3 <open>
   if(write(fd, "x", 1) > 0){
     2b18:	83 c4 0c             	add    $0xc,%esp
@@ -4306,7 +4306,7 @@
   fd = open(".", 0);
     2b1d:	89 c3                	mov    %eax,%ebx
   if(write(fd, "x", 1) > 0){
-    2b1f:	68 a1 47 00 00       	push   $0x47a1
+    2b1f:	68 b1 47 00 00       	push   $0x47b1
     2b24:	50                   	push   %eax
     2b25:	e8 79 0e 00 00       	call   39a3 <write>
     2b2a:	83 c4 10             	add    $0x10,%esp
@@ -4319,9 +4319,9 @@
   printf(1, "dir vs file OK\n");
     2b3a:	58                   	pop    %eax
     2b3b:	5a                   	pop    %edx
-    2b3c:	68 95 4b 00 00       	push   $0x4b95
+    2b3c:	68 a5 4b 00 00       	push   $0x4ba5
     2b41:	6a 01                	push   $0x1
-    2b43:	e8 98 0f 00 00       	call   3ae0 <printf>
+    2b43:	e8 a8 0f 00 00       	call   3af0 <printf>
 }
     2b48:	8b 5d fc             	mov    -0x4(%ebp),%ebx
     2b4b:	83 c4 10             	add    $0x10,%esp
@@ -4330,73 +4330,73 @@
     printf(1, "create dirfile/xx succeeded!\n");
     2b50:	50                   	push   %eax
     2b51:	50                   	push   %eax
-    2b52:	68 09 4b 00 00       	push   $0x4b09
+    2b52:	68 19 4b 00 00       	push   $0x4b19
     2b57:	6a 01                	push   $0x1
-    2b59:	e8 82 0f 00 00       	call   3ae0 <printf>
+    2b59:	e8 92 0f 00 00       	call   3af0 <printf>
     exit();
     2b5e:	e8 20 0e 00 00       	call   3983 <exit>
     printf(1, "chdir dirfile succeeded!\n");
     2b63:	52                   	push   %edx
     2b64:	52                   	push   %edx
-    2b65:	68 e4 4a 00 00       	push   $0x4ae4
+    2b65:	68 f4 4a 00 00       	push   $0x4af4
     2b6a:	6a 01                	push   $0x1
-    2b6c:	e8 6f 0f 00 00       	call   3ae0 <printf>
+    2b6c:	e8 7f 0f 00 00       	call   3af0 <printf>
     exit();
     2b71:	e8 0d 0e 00 00       	call   3983 <exit>
     printf(1, "create dirfile failed\n");
     2b76:	51                   	push   %ecx
     2b77:	51                   	push   %ecx
-    2b78:	68 cd 4a 00 00       	push   $0x4acd
+    2b78:	68 dd 4a 00 00       	push   $0x4add
     2b7d:	6a 01                	push   $0x1
-    2b7f:	e8 5c 0f 00 00       	call   3ae0 <printf>
+    2b7f:	e8 6c 0f 00 00       	call   3af0 <printf>
     exit();
     2b84:	e8 fa 0d 00 00       	call   3983 <exit>
     printf(1, "write . succeeded!\n");
     2b89:	51                   	push   %ecx
     2b8a:	51                   	push   %ecx
-    2b8b:	68 81 4b 00 00       	push   $0x4b81
+    2b8b:	68 91 4b 00 00       	push   $0x4b91
     2b90:	6a 01                	push   $0x1
-    2b92:	e8 49 0f 00 00       	call   3ae0 <printf>
+    2b92:	e8 59 0f 00 00       	call   3af0 <printf>
     exit();
     2b97:	e8 e7 0d 00 00       	call   3983 <exit>
     printf(1, "open . for writing succeeded!\n");
     2b9c:	53                   	push   %ebx
     2b9d:	53                   	push   %ebx
-    2b9e:	68 78 53 00 00       	push   $0x5378
+    2b9e:	68 88 53 00 00       	push   $0x5388
     2ba3:	6a 01                	push   $0x1
-    2ba5:	e8 36 0f 00 00       	call   3ae0 <printf>
+    2ba5:	e8 46 0f 00 00       	call   3af0 <printf>
     exit();
     2baa:	e8 d4 0d 00 00       	call   3983 <exit>
     printf(1, "unlink dirfile failed!\n");
     2baf:	50                   	push   %eax
     2bb0:	50                   	push   %eax
-    2bb1:	68 69 4b 00 00       	push   $0x4b69
+    2bb1:	68 79 4b 00 00       	push   $0x4b79
     2bb6:	6a 01                	push   $0x1
-    2bb8:	e8 23 0f 00 00       	call   3ae0 <printf>
+    2bb8:	e8 33 0f 00 00       	call   3af0 <printf>
     exit();
     2bbd:	e8 c1 0d 00 00       	call   3983 <exit>
     printf(1, "link to dirfile/xx succeeded!\n");
     2bc2:	50                   	push   %eax
     2bc3:	50                   	push   %eax
-    2bc4:	68 58 53 00 00       	push   $0x5358
+    2bc4:	68 68 53 00 00       	push   $0x5368
     2bc9:	6a 01                	push   $0x1
-    2bcb:	e8 10 0f 00 00       	call   3ae0 <printf>
+    2bcb:	e8 20 0f 00 00       	call   3af0 <printf>
     exit();
     2bd0:	e8 ae 0d 00 00       	call   3983 <exit>
     printf(1, "unlink dirfile/xx succeeded!\n");
     2bd5:	50                   	push   %eax
     2bd6:	50                   	push   %eax
-    2bd7:	68 44 4b 00 00       	push   $0x4b44
+    2bd7:	68 54 4b 00 00       	push   $0x4b54
     2bdc:	6a 01                	push   $0x1
-    2bde:	e8 fd 0e 00 00       	call   3ae0 <printf>
+    2bde:	e8 0d 0f 00 00       	call   3af0 <printf>
     exit();
     2be3:	e8 9b 0d 00 00       	call   3983 <exit>
     printf(1, "mkdir dirfile/xx succeeded!\n");
     2be8:	50                   	push   %eax
     2be9:	50                   	push   %eax
-    2bea:	68 27 4b 00 00       	push   $0x4b27
+    2bea:	68 37 4b 00 00       	push   $0x4b37
     2bef:	6a 01                	push   $0x1
-    2bf1:	e8 ea 0e 00 00       	call   3ae0 <printf>
+    2bf1:	e8 fa 0e 00 00       	call   3af0 <printf>
     exit();
     2bf6:	e8 88 0d 00 00       	call   3983 <exit>
     2bfb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -4413,40 +4413,40 @@
 {
     2c0d:	83 ec 0c             	sub    $0xc,%esp
   printf(1, "empty file name\n");
-    2c10:	68 a5 4b 00 00       	push   $0x4ba5
+    2c10:	68 b5 4b 00 00       	push   $0x4bb5
     2c15:	6a 01                	push   $0x1
-    2c17:	e8 c4 0e 00 00       	call   3ae0 <printf>
+    2c17:	e8 d4 0e 00 00       	call   3af0 <printf>
     2c1c:	83 c4 10             	add    $0x10,%esp
     2c1f:	90                   	nop
     if(mkdir("irefd") != 0){
     2c20:	83 ec 0c             	sub    $0xc,%esp
-    2c23:	68 b6 4b 00 00       	push   $0x4bb6
+    2c23:	68 c6 4b 00 00       	push   $0x4bc6
     2c28:	e8 be 0d 00 00       	call   39eb <mkdir>
     2c2d:	83 c4 10             	add    $0x10,%esp
     2c30:	85 c0                	test   %eax,%eax
     2c32:	0f 85 bb 00 00 00    	jne    2cf3 <iref+0xf3>
     if(chdir("irefd") != 0){
     2c38:	83 ec 0c             	sub    $0xc,%esp
-    2c3b:	68 b6 4b 00 00       	push   $0x4bb6
+    2c3b:	68 c6 4b 00 00       	push   $0x4bc6
     2c40:	e8 ae 0d 00 00       	call   39f3 <chdir>
     2c45:	83 c4 10             	add    $0x10,%esp
     2c48:	85 c0                	test   %eax,%eax
     2c4a:	0f 85 b7 00 00 00    	jne    2d07 <iref+0x107>
     mkdir("");
     2c50:	83 ec 0c             	sub    $0xc,%esp
-    2c53:	68 6b 42 00 00       	push   $0x426b
+    2c53:	68 7b 42 00 00       	push   $0x427b
     2c58:	e8 8e 0d 00 00       	call   39eb <mkdir>
     link("README", "");
     2c5d:	59                   	pop    %ecx
     2c5e:	58                   	pop    %eax
-    2c5f:	68 6b 42 00 00       	push   $0x426b
-    2c64:	68 62 4b 00 00       	push   $0x4b62
+    2c5f:	68 7b 42 00 00       	push   $0x427b
+    2c64:	68 72 4b 00 00       	push   $0x4b72
     2c69:	e8 75 0d 00 00       	call   39e3 <link>
     fd = open("", O_CREATE);
     2c6e:	58                   	pop    %eax
     2c6f:	5a                   	pop    %edx
     2c70:	68 00 02 00 00       	push   $0x200
-    2c75:	68 6b 42 00 00       	push   $0x426b
+    2c75:	68 7b 42 00 00       	push   $0x427b
     2c7a:	e8 44 0d 00 00       	call   39c3 <open>
     if(fd >= 0)
     2c7f:	83 c4 10             	add    $0x10,%esp
@@ -4460,7 +4460,7 @@
     fd = open("xx", O_CREATE);
     2c92:	83 ec 08             	sub    $0x8,%esp
     2c95:	68 00 02 00 00       	push   $0x200
-    2c9a:	68 a0 47 00 00       	push   $0x47a0
+    2c9a:	68 b0 47 00 00       	push   $0x47b0
     2c9f:	e8 1f 0d 00 00       	call   39c3 <open>
     if(fd >= 0)
     2ca4:	83 c4 10             	add    $0x10,%esp
@@ -4473,7 +4473,7 @@
     2cb4:	83 c4 10             	add    $0x10,%esp
     unlink("xx");
     2cb7:	83 ec 0c             	sub    $0xc,%esp
-    2cba:	68 a0 47 00 00       	push   $0x47a0
+    2cba:	68 b0 47 00 00       	push   $0x47b0
     2cbf:	e8 0f 0d 00 00       	call   39d3 <unlink>
   for(i = 0; i < 50 + 1; i++){
     2cc4:	83 c4 10             	add    $0x10,%esp
@@ -4481,14 +4481,14 @@
     2cca:	0f 85 50 ff ff ff    	jne    2c20 <iref+0x20>
   chdir("/");
     2cd0:	83 ec 0c             	sub    $0xc,%esp
-    2cd3:	68 91 3e 00 00       	push   $0x3e91
+    2cd3:	68 a1 3e 00 00       	push   $0x3ea1
     2cd8:	e8 16 0d 00 00       	call   39f3 <chdir>
   printf(1, "empty file name OK\n");
     2cdd:	58                   	pop    %eax
     2cde:	5a                   	pop    %edx
-    2cdf:	68 e4 4b 00 00       	push   $0x4be4
+    2cdf:	68 f4 4b 00 00       	push   $0x4bf4
     2ce4:	6a 01                	push   $0x1
-    2ce6:	e8 f5 0d 00 00       	call   3ae0 <printf>
+    2ce6:	e8 05 0e 00 00       	call   3af0 <printf>
 }
     2ceb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
     2cee:	83 c4 10             	add    $0x10,%esp
@@ -4496,16 +4496,16 @@
     2cf2:	c3                   	ret    
       printf(1, "mkdir irefd failed\n");
     2cf3:	83 ec 08             	sub    $0x8,%esp
-    2cf6:	68 bc 4b 00 00       	push   $0x4bbc
+    2cf6:	68 cc 4b 00 00       	push   $0x4bcc
     2cfb:	6a 01                	push   $0x1
-    2cfd:	e8 de 0d 00 00       	call   3ae0 <printf>
+    2cfd:	e8 ee 0d 00 00       	call   3af0 <printf>
       exit();
     2d02:	e8 7c 0c 00 00       	call   3983 <exit>
       printf(1, "chdir irefd failed\n");
     2d07:	83 ec 08             	sub    $0x8,%esp
-    2d0a:	68 d0 4b 00 00       	push   $0x4bd0
+    2d0a:	68 e0 4b 00 00       	push   $0x4be0
     2d0f:	6a 01                	push   $0x1
-    2d11:	e8 ca 0d 00 00       	call   3ae0 <printf>
+    2d11:	e8 da 0d 00 00       	call   3af0 <printf>
       exit();
     2d16:	e8 68 0c 00 00       	call   3983 <exit>
     2d1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -4522,9 +4522,9 @@
 {
     2d2a:	83 ec 0c             	sub    $0xc,%esp
   printf(1, "fork test\n");
-    2d2d:	68 f8 4b 00 00       	push   $0x4bf8
+    2d2d:	68 08 4c 00 00       	push   $0x4c08
     2d32:	6a 01                	push   $0x1
-    2d34:	e8 a7 0d 00 00       	call   3ae0 <printf>
+    2d34:	e8 b7 0d 00 00       	call   3af0 <printf>
     2d39:	83 c4 10             	add    $0x10,%esp
     2d3c:	eb 0f                	jmp    2d4d <forktest+0x2d>
     2d3e:	66 90                	xchg   %ax,%ax
@@ -4556,9 +4556,9 @@
     2d76:	75 2d                	jne    2da5 <forktest+0x85>
   printf(1, "fork test OK\n");
     2d78:	83 ec 08             	sub    $0x8,%esp
-    2d7b:	68 2a 4c 00 00       	push   $0x4c2a
+    2d7b:	68 3a 4c 00 00       	push   $0x4c3a
     2d80:	6a 01                	push   $0x1
-    2d82:	e8 59 0d 00 00       	call   3ae0 <printf>
+    2d82:	e8 69 0d 00 00       	call   3af0 <printf>
 }
     2d87:	8b 5d fc             	mov    -0x4(%ebp),%ebx
     2d8a:	c9                   	leave  
@@ -4567,25 +4567,25 @@
     2d8c:	e8 f2 0b 00 00       	call   3983 <exit>
       printf(1, "wait stopped early\n");
     2d91:	83 ec 08             	sub    $0x8,%esp
-    2d94:	68 03 4c 00 00       	push   $0x4c03
+    2d94:	68 13 4c 00 00       	push   $0x4c13
     2d99:	6a 01                	push   $0x1
-    2d9b:	e8 40 0d 00 00       	call   3ae0 <printf>
+    2d9b:	e8 50 0d 00 00       	call   3af0 <printf>
       exit();
     2da0:	e8 de 0b 00 00       	call   3983 <exit>
     printf(1, "wait got too many\n");
     2da5:	52                   	push   %edx
     2da6:	52                   	push   %edx
-    2da7:	68 17 4c 00 00       	push   $0x4c17
+    2da7:	68 27 4c 00 00       	push   $0x4c27
     2dac:	6a 01                	push   $0x1
-    2dae:	e8 2d 0d 00 00       	call   3ae0 <printf>
+    2dae:	e8 3d 0d 00 00       	call   3af0 <printf>
     exit();
     2db3:	e8 cb 0b 00 00       	call   3983 <exit>
     printf(1, "fork claimed to work 1000 times!\n");
     2db8:	50                   	push   %eax
     2db9:	50                   	push   %eax
-    2dba:	68 98 53 00 00       	push   $0x5398
+    2dba:	68 a8 53 00 00       	push   $0x53a8
     2dbf:	6a 01                	push   $0x1
-    2dc1:	e8 1a 0d 00 00       	call   3ae0 <printf>
+    2dc1:	e8 2a 0d 00 00       	call   3af0 <printf>
     exit();
     2dc6:	e8 b8 0b 00 00       	call   3983 <exit>
     2dcb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -4604,9 +4604,9 @@
     2ddb:	53                   	push   %ebx
     2ddc:	83 ec 54             	sub    $0x54,%esp
   printf(stdout, "sbrk test\n");
-    2ddf:	68 38 4c 00 00       	push   $0x4c38
-    2de4:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    2dea:	e8 f1 0c 00 00       	call   3ae0 <printf>
+    2ddf:	68 48 4c 00 00       	push   $0x4c48
+    2de4:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    2dea:	e8 01 0d 00 00       	call   3af0 <printf>
   oldbrk = sbrk(0);
     2def:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
     2df6:	e8 10 0c 00 00       	call   3a0b <sbrk>
@@ -4834,9 +4834,9 @@
     302f:	72 61                	jb     3092 <sbrktest+0x2c2>
   printf(stdout, "sbrk test OK\n");
     3031:	83 ec 08             	sub    $0x8,%esp
-    3034:	68 e0 4c 00 00       	push   $0x4ce0
-    3039:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    303f:	e8 9c 0a 00 00       	call   3ae0 <printf>
+    3034:	68 f0 4c 00 00       	push   $0x4cf0
+    3039:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    303f:	e8 ac 0a 00 00       	call   3af0 <printf>
 }
     3044:	83 c4 10             	add    $0x10,%esp
     3047:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -4857,7 +4857,7 @@
       write(fds[1], "x", 1);
     306a:	83 c4 0c             	add    $0xc,%esp
     306d:	6a 01                	push   $0x1
-    306f:	68 a1 47 00 00       	push   $0x47a1
+    306f:	68 b1 47 00 00       	push   $0x47b1
     3074:	ff 75 bc             	pushl  -0x44(%ebp)
     3077:	e8 27 09 00 00       	call   39a3 <write>
     307c:	83 c4 10             	add    $0x10,%esp
@@ -4882,26 +4882,26 @@
     30ae:	50                   	push   %eax
     30af:	56                   	push   %esi
     30b0:	57                   	push   %edi
-    30b1:	68 43 4c 00 00       	push   $0x4c43
-    30b6:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    30bc:	e8 1f 0a 00 00       	call   3ae0 <printf>
+    30b1:	68 53 4c 00 00       	push   $0x4c53
+    30b6:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    30bc:	e8 2f 0a 00 00       	call   3af0 <printf>
       exit();
     30c1:	83 c4 20             	add    $0x20,%esp
     30c4:	e8 ba 08 00 00       	call   3983 <exit>
     printf(stdout, "failed sbrk leaked memory\n");
     30c9:	50                   	push   %eax
     30ca:	50                   	push   %eax
-    30cb:	68 c5 4c 00 00       	push   $0x4cc5
-    30d0:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    30d6:	e8 05 0a 00 00       	call   3ae0 <printf>
+    30cb:	68 d5 4c 00 00       	push   $0x4cd5
+    30d0:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    30d6:	e8 15 0a 00 00       	call   3af0 <printf>
     exit();
     30db:	e8 a3 08 00 00       	call   3983 <exit>
     printf(1, "pipe() failed\n");
     30e0:	52                   	push   %edx
     30e1:	52                   	push   %edx
-    30e2:	68 81 41 00 00       	push   $0x4181
+    30e2:	68 91 41 00 00       	push   $0x4191
     30e7:	6a 01                	push   $0x1
-    30e9:	e8 f2 09 00 00       	call   3ae0 <printf>
+    30e9:	e8 02 0a 00 00       	call   3af0 <printf>
     exit();
     30ee:	e8 90 08 00 00       	call   3983 <exit>
     30f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -4910,9 +4910,9 @@
     30f8:	0f be 06             	movsbl (%esi),%eax
     30fb:	50                   	push   %eax
     30fc:	56                   	push   %esi
-    30fd:	68 ac 4c 00 00       	push   $0x4cac
-    3102:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    3108:	e8 d3 09 00 00       	call   3ae0 <printf>
+    30fd:	68 bc 4c 00 00       	push   $0x4cbc
+    3102:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    3108:	e8 e3 09 00 00       	call   3af0 <printf>
       kill(ppid);
     310d:	89 3c 24             	mov    %edi,(%esp)
     3110:	e8 9e 08 00 00       	call   39b3 <kill>
@@ -4920,57 +4920,57 @@
     3115:	e8 69 08 00 00       	call   3983 <exit>
       printf(stdout, "fork failed\n");
     311a:	83 ec 08             	sub    $0x8,%esp
-    311d:	68 89 4d 00 00       	push   $0x4d89
-    3122:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    3128:	e8 b3 09 00 00       	call   3ae0 <printf>
+    311d:	68 99 4d 00 00       	push   $0x4d99
+    3122:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    3128:	e8 c3 09 00 00       	call   3af0 <printf>
       exit();
     312d:	e8 51 08 00 00       	call   3983 <exit>
     printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
     3132:	50                   	push   %eax
     3133:	56                   	push   %esi
-    3134:	68 8c 54 00 00       	push   $0x548c
-    3139:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    313f:	e8 9c 09 00 00       	call   3ae0 <printf>
+    3134:	68 9c 54 00 00       	push   $0x549c
+    3139:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    313f:	e8 ac 09 00 00       	call   3af0 <printf>
     exit();
     3144:	e8 3a 08 00 00       	call   3983 <exit>
     printf(stdout, "sbrk de-allocation didn't really deallocate\n");
     3149:	51                   	push   %ecx
     314a:	51                   	push   %ecx
-    314b:	68 5c 54 00 00       	push   $0x545c
-    3150:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    3156:	e8 85 09 00 00       	call   3ae0 <printf>
+    314b:	68 6c 54 00 00       	push   $0x546c
+    3150:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    3156:	e8 95 09 00 00       	call   3af0 <printf>
     exit();
     315b:	e8 23 08 00 00       	call   3983 <exit>
     printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
     3160:	57                   	push   %edi
     3161:	56                   	push   %esi
-    3162:	68 34 54 00 00       	push   $0x5434
-    3167:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    316d:	e8 6e 09 00 00       	call   3ae0 <printf>
+    3162:	68 44 54 00 00       	push   $0x5444
+    3167:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    316d:	e8 7e 09 00 00       	call   3af0 <printf>
     exit();
     3172:	e8 0c 08 00 00       	call   3983 <exit>
     printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
     3177:	50                   	push   %eax
     3178:	56                   	push   %esi
-    3179:	68 fc 53 00 00       	push   $0x53fc
-    317e:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    3184:	e8 57 09 00 00       	call   3ae0 <printf>
+    3179:	68 0c 54 00 00       	push   $0x540c
+    317e:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    3184:	e8 67 09 00 00       	call   3af0 <printf>
     exit();
     3189:	e8 f5 07 00 00       	call   3983 <exit>
     printf(stdout, "sbrk could not deallocate\n");
     318e:	53                   	push   %ebx
     318f:	53                   	push   %ebx
-    3190:	68 91 4c 00 00       	push   $0x4c91
-    3195:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    319b:	e8 40 09 00 00       	call   3ae0 <printf>
+    3190:	68 a1 4c 00 00       	push   $0x4ca1
+    3195:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    319b:	e8 50 09 00 00       	call   3af0 <printf>
     exit();
     31a0:	e8 de 07 00 00       	call   3983 <exit>
     printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
     31a5:	56                   	push   %esi
     31a6:	56                   	push   %esi
-    31a7:	68 bc 53 00 00       	push   $0x53bc
-    31ac:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    31b2:	e8 29 09 00 00       	call   3ae0 <printf>
+    31a7:	68 cc 53 00 00       	push   $0x53cc
+    31ac:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    31b2:	e8 39 09 00 00       	call   3af0 <printf>
     exit();
     31b7:	e8 c7 07 00 00       	call   3983 <exit>
     exit();
@@ -4978,17 +4978,17 @@
     printf(stdout, "sbrk test failed post-fork\n");
     31c1:	57                   	push   %edi
     31c2:	57                   	push   %edi
-    31c3:	68 75 4c 00 00       	push   $0x4c75
-    31c8:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    31ce:	e8 0d 09 00 00       	call   3ae0 <printf>
+    31c3:	68 85 4c 00 00       	push   $0x4c85
+    31c8:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    31ce:	e8 1d 09 00 00       	call   3af0 <printf>
     exit();
     31d3:	e8 ab 07 00 00       	call   3983 <exit>
     printf(stdout, "sbrk test fork failed\n");
     31d8:	50                   	push   %eax
     31d9:	50                   	push   %eax
-    31da:	68 5e 4c 00 00       	push   $0x4c5e
-    31df:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    31e5:	e8 f6 08 00 00       	call   3ae0 <printf>
+    31da:	68 6e 4c 00 00       	push   $0x4c6e
+    31df:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    31e5:	e8 06 09 00 00       	call   3af0 <printf>
     exit();
     31ea:	e8 94 07 00 00       	call   3983 <exit>
     31ef:	90                   	nop
@@ -5013,9 +5013,9 @@
     320a:	53                   	push   %ebx
   printf(stdout, "validate test\n");
     320b:	83 ec 08             	sub    $0x8,%esp
-    320e:	68 ee 4c 00 00       	push   $0x4cee
-    3213:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    3219:	e8 c2 08 00 00       	call   3ae0 <printf>
+    320e:	68 fe 4c 00 00       	push   $0x4cfe
+    3213:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    3219:	e8 d2 08 00 00       	call   3af0 <printf>
     321e:	83 c4 10             	add    $0x10,%esp
     3221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if((pid = fork()) == 0){
@@ -5039,7 +5039,7 @@
     3256:	58                   	pop    %eax
     3257:	5a                   	pop    %edx
     3258:	56                   	push   %esi
-    3259:	68 fd 4c 00 00       	push   $0x4cfd
+    3259:	68 0d 4d 00 00       	push   $0x4d0d
     325e:	e8 80 07 00 00       	call   39e3 <link>
     3263:	83 c4 10             	add    $0x10,%esp
     3266:	83 f8 ff             	cmp    $0xffffffff,%eax
@@ -5050,9 +5050,9 @@
     3277:	75 af                	jne    3228 <validatetest+0x28>
   printf(stdout, "validate ok\n");
     3279:	83 ec 08             	sub    $0x8,%esp
-    327c:	68 21 4d 00 00       	push   $0x4d21
-    3281:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    3287:	e8 54 08 00 00       	call   3ae0 <printf>
+    327c:	68 31 4d 00 00       	push   $0x4d31
+    3281:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    3287:	e8 64 08 00 00       	call   3af0 <printf>
 }
     328c:	83 c4 10             	add    $0x10,%esp
     328f:	8d 65 f8             	lea    -0x8(%ebp),%esp
@@ -5064,9 +5064,9 @@
     3296:	e8 e8 06 00 00       	call   3983 <exit>
       printf(stdout, "link should not succeed\n");
     329b:	83 ec 08             	sub    $0x8,%esp
-    329e:	68 08 4d 00 00       	push   $0x4d08
-    32a3:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    32a9:	e8 32 08 00 00       	call   3ae0 <printf>
+    329e:	68 18 4d 00 00       	push   $0x4d18
+    32a3:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    32a9:	e8 42 08 00 00       	call   3af0 <printf>
       exit();
     32ae:	e8 d0 06 00 00       	call   3983 <exit>
     32b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -5079,15 +5079,15 @@
     32c5:	89 e5                	mov    %esp,%ebp
     32c7:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "bss test\n");
-    32ca:	68 2e 4d 00 00       	push   $0x4d2e
-    32cf:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    32d5:	e8 06 08 00 00       	call   3ae0 <printf>
+    32ca:	68 3e 4d 00 00       	push   $0x4d3e
+    32cf:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    32d5:	e8 16 08 00 00       	call   3af0 <printf>
     32da:	83 c4 10             	add    $0x10,%esp
   for(i = 0; i < sizeof(uninit); i++){
     32dd:	31 c0                	xor    %eax,%eax
     32df:	90                   	nop
     if(uninit[i] != '\0'){
-    32e0:	80 b8 a0 5f 00 00 00 	cmpb   $0x0,0x5fa0(%eax)
+    32e0:	80 b8 c0 5f 00 00 00 	cmpb   $0x0,0x5fc0(%eax)
     32e7:	75 22                	jne    330b <bsstest+0x4b>
   for(i = 0; i < sizeof(uninit); i++){
     32e9:	83 c0 01             	add    $0x1,%eax
@@ -5095,18 +5095,18 @@
     32f1:	75 ed                	jne    32e0 <bsstest+0x20>
   printf(stdout, "bss test ok\n");
     32f3:	83 ec 08             	sub    $0x8,%esp
-    32f6:	68 49 4d 00 00       	push   $0x4d49
-    32fb:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    3301:	e8 da 07 00 00       	call   3ae0 <printf>
+    32f6:	68 59 4d 00 00       	push   $0x4d59
+    32fb:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    3301:	e8 ea 07 00 00       	call   3af0 <printf>
 }
     3306:	83 c4 10             	add    $0x10,%esp
     3309:	c9                   	leave  
     330a:	c3                   	ret    
       printf(stdout, "bss test failed\n");
     330b:	83 ec 08             	sub    $0x8,%esp
-    330e:	68 38 4d 00 00       	push   $0x4d38
-    3313:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    3319:	e8 c2 07 00 00       	call   3ae0 <printf>
+    330e:	68 48 4d 00 00       	push   $0x4d48
+    3313:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    3319:	e8 d2 07 00 00       	call   3af0 <printf>
       exit();
     331e:	e8 60 06 00 00       	call   3983 <exit>
     3323:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -5119,7 +5119,7 @@
     3335:	89 e5                	mov    %esp,%ebp
     3337:	83 ec 14             	sub    $0x14,%esp
   unlink("bigarg-ok");
-    333a:	68 56 4d 00 00       	push   $0x4d56
+    333a:	68 66 4d 00 00       	push   $0x4d66
     333f:	e8 8f 06 00 00       	call   39d3 <unlink>
   pid = fork();
     3344:	e8 32 06 00 00       	call   397b <fork>
@@ -5134,7 +5134,7 @@
   fd = open("bigarg-ok", 0);
     335b:	83 ec 08             	sub    $0x8,%esp
     335e:	6a 00                	push   $0x0
-    3360:	68 56 4d 00 00       	push   $0x4d56
+    3360:	68 66 4d 00 00       	push   $0x4d66
     3365:	e8 59 06 00 00       	call   39c3 <open>
   if(fd < 0){
     336a:	83 c4 10             	add    $0x10,%esp
@@ -5145,7 +5145,7 @@
     3378:	50                   	push   %eax
     3379:	e8 2d 06 00 00       	call   39ab <close>
   unlink("bigarg-ok");
-    337e:	c7 04 24 56 4d 00 00 	movl   $0x4d56,(%esp)
+    337e:	c7 04 24 66 4d 00 00 	movl   $0x4d66,(%esp)
     3385:	e8 49 06 00 00       	call   39d3 <unlink>
 }
     338a:	83 c4 10             	add    $0x10,%esp
@@ -5153,8 +5153,8 @@
     338e:	c3                   	ret    
     338f:	90                   	nop
       args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
-    3390:	c7 04 85 00 5f 00 00 	movl   $0x54b0,0x5f00(,%eax,4)
-    3397:	b0 54 00 00 
+    3390:	c7 04 85 20 5f 00 00 	movl   $0x54c0,0x5f20(,%eax,4)
+    3397:	c0 54 00 00 
     for(i = 0; i < MAXARG-1; i++)
     339b:	83 c0 01             	add    $0x1,%eax
     339e:	83 f8 1f             	cmp    $0x1f,%eax
@@ -5162,30 +5162,30 @@
     printf(stdout, "bigarg test\n");
     33a3:	51                   	push   %ecx
     33a4:	51                   	push   %ecx
-    33a5:	68 60 4d 00 00       	push   $0x4d60
-    33aa:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    33a5:	68 70 4d 00 00       	push   $0x4d70
+    33aa:	ff 35 f0 5e 00 00    	pushl  0x5ef0
     args[MAXARG-1] = 0;
-    33b0:	c7 05 7c 5f 00 00 00 	movl   $0x0,0x5f7c
+    33b0:	c7 05 9c 5f 00 00 00 	movl   $0x0,0x5f9c
     33b7:	00 00 00 
     printf(stdout, "bigarg test\n");
-    33ba:	e8 21 07 00 00       	call   3ae0 <printf>
+    33ba:	e8 31 07 00 00       	call   3af0 <printf>
     exec("echo", args);
     33bf:	58                   	pop    %eax
     33c0:	5a                   	pop    %edx
-    33c1:	68 00 5f 00 00       	push   $0x5f00
-    33c6:	68 2d 3f 00 00       	push   $0x3f2d
+    33c1:	68 20 5f 00 00       	push   $0x5f20
+    33c6:	68 3d 3f 00 00       	push   $0x3f3d
     33cb:	e8 eb 05 00 00       	call   39bb <exec>
     printf(stdout, "bigarg test ok\n");
     33d0:	59                   	pop    %ecx
     33d1:	58                   	pop    %eax
-    33d2:	68 6d 4d 00 00       	push   $0x4d6d
-    33d7:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    33dd:	e8 fe 06 00 00       	call   3ae0 <printf>
+    33d2:	68 7d 4d 00 00       	push   $0x4d7d
+    33d7:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    33dd:	e8 0e 07 00 00       	call   3af0 <printf>
     fd = open("bigarg-ok", O_CREATE);
     33e2:	58                   	pop    %eax
     33e3:	5a                   	pop    %edx
     33e4:	68 00 02 00 00       	push   $0x200
-    33e9:	68 56 4d 00 00       	push   $0x4d56
+    33e9:	68 66 4d 00 00       	push   $0x4d66
     33ee:	e8 d0 05 00 00       	call   39c3 <open>
     close(fd);
     33f3:	89 04 24             	mov    %eax,(%esp)
@@ -5195,17 +5195,17 @@
     printf(stdout, "bigarg test failed!\n");
     3400:	50                   	push   %eax
     3401:	50                   	push   %eax
-    3402:	68 96 4d 00 00       	push   $0x4d96
-    3407:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    340d:	e8 ce 06 00 00       	call   3ae0 <printf>
+    3402:	68 a6 4d 00 00       	push   $0x4da6
+    3407:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    340d:	e8 de 06 00 00       	call   3af0 <printf>
     exit();
     3412:	e8 6c 05 00 00       	call   3983 <exit>
     printf(stdout, "bigargtest: fork failed\n");
     3417:	52                   	push   %edx
     3418:	52                   	push   %edx
-    3419:	68 7d 4d 00 00       	push   $0x4d7d
-    341e:	ff 35 e0 5e 00 00    	pushl  0x5ee0
-    3424:	e8 b7 06 00 00       	call   3ae0 <printf>
+    3419:	68 8d 4d 00 00       	push   $0x4d8d
+    341e:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    3424:	e8 c7 06 00 00       	call   3af0 <printf>
     exit();
     3429:	e8 55 05 00 00       	call   3983 <exit>
     342e:	66 90                	xchg   %ax,%ax
@@ -5223,9 +5223,9 @@
     343b:	53                   	push   %ebx
     343c:	83 ec 54             	sub    $0x54,%esp
   printf(1, "fsfull test\n");
-    343f:	68 ab 4d 00 00       	push   $0x4dab
+    343f:	68 bb 4d 00 00       	push   $0x4dbb
     3444:	6a 01                	push   $0x1
-    3446:	e8 95 06 00 00       	call   3ae0 <printf>
+    3446:	e8 a5 06 00 00       	call   3af0 <printf>
     344b:	83 c4 10             	add    $0x10,%esp
     344e:	66 90                	xchg   %ax,%ax
     name[1] = '0' + nfiles / 1000;
@@ -5285,9 +5285,9 @@
     printf(1, "writing %s\n", name);
     34c0:	8d 45 a8             	lea    -0x58(%ebp),%eax
     34c3:	50                   	push   %eax
-    34c4:	68 b8 4d 00 00       	push   $0x4db8
+    34c4:	68 c8 4d 00 00       	push   $0x4dc8
     34c9:	6a 01                	push   $0x1
-    34cb:	e8 10 06 00 00       	call   3ae0 <printf>
+    34cb:	e8 20 06 00 00       	call   3af0 <printf>
     int fd = open(name, O_CREATE|O_RDWR);
     34d0:	58                   	pop    %eax
     34d1:	8d 45 a8             	lea    -0x58(%ebp),%eax
@@ -5311,7 +5311,7 @@
       int cc = write(fd, buf, 512);
     34f2:	83 ec 04             	sub    $0x4,%esp
     34f5:	68 00 02 00 00       	push   $0x200
-    34fa:	68 c0 86 00 00       	push   $0x86c0
+    34fa:	68 e0 86 00 00       	push   $0x86e0
     34ff:	57                   	push   %edi
     3500:	e8 9e 04 00 00       	call   39a3 <write>
       if(cc < 512)
@@ -5321,9 +5321,9 @@
     printf(1, "wrote %d bytes\n", total);
     350f:	83 ec 04             	sub    $0x4,%esp
     3512:	53                   	push   %ebx
-    3513:	68 d4 4d 00 00       	push   $0x4dd4
+    3513:	68 e4 4d 00 00       	push   $0x4de4
     3518:	6a 01                	push   $0x1
-    351a:	e8 c1 05 00 00       	call   3ae0 <printf>
+    351a:	e8 d1 05 00 00       	call   3af0 <printf>
     close(fd);
     351f:	89 3c 24             	mov    %edi,(%esp)
     3522:	e8 84 04 00 00       	call   39ab <close>
@@ -5338,9 +5338,9 @@
     3536:	83 ec 04             	sub    $0x4,%esp
     3539:	8d 45 a8             	lea    -0x58(%ebp),%eax
     353c:	50                   	push   %eax
-    353d:	68 c4 4d 00 00       	push   $0x4dc4
+    353d:	68 d4 4d 00 00       	push   $0x4dd4
     3542:	6a 01                	push   $0x1
-    3544:	e8 97 05 00 00       	call   3ae0 <printf>
+    3544:	e8 a7 05 00 00       	call   3af0 <printf>
       break;
     3549:	83 c4 10             	add    $0x10,%esp
     name[1] = '0' + nfiles / 1000;
@@ -5419,9 +5419,9 @@
     35e5:	0f 85 75 ff ff ff    	jne    3560 <fsfull+0x130>
   printf(1, "fsfull test finished\n");
     35eb:	83 ec 08             	sub    $0x8,%esp
-    35ee:	68 e4 4d 00 00       	push   $0x4de4
+    35ee:	68 f4 4d 00 00       	push   $0x4df4
     35f3:	6a 01                	push   $0x1
-    35f5:	e8 e6 04 00 00       	call   3ae0 <printf>
+    35f5:	e8 f6 04 00 00       	call   3af0 <printf>
 }
     35fa:	83 c4 10             	add    $0x10,%esp
     35fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -5440,9 +5440,9 @@
     3615:	89 e5                	mov    %esp,%ebp
     3617:	83 ec 10             	sub    $0x10,%esp
   printf(1, "uio test\n");
-    361a:	68 fa 4d 00 00       	push   $0x4dfa
+    361a:	68 0a 4e 00 00       	push   $0x4e0a
     361f:	6a 01                	push   $0x1
-    3621:	e8 ba 04 00 00       	call   3ae0 <printf>
+    3621:	e8 ca 04 00 00       	call   3af0 <printf>
   pid = fork();
     3626:	e8 50 03 00 00       	call   397b <fork>
   if(pid == 0){
@@ -5455,9 +5455,9 @@
     3634:	e8 52 03 00 00       	call   398b <wait>
   printf(1, "uio test done\n");
     3639:	83 ec 08             	sub    $0x8,%esp
-    363c:	68 04 4e 00 00       	push   $0x4e04
+    363c:	68 14 4e 00 00       	push   $0x4e14
     3641:	6a 01                	push   $0x1
-    3643:	e8 98 04 00 00       	call   3ae0 <printf>
+    3643:	e8 a8 04 00 00       	call   3af0 <printf>
 }
     3648:	83 c4 10             	add    $0x10,%esp
     364b:	c9                   	leave  
@@ -5472,17 +5472,17 @@
     printf(1, "uio: uio succeeded; test FAILED\n");
     365e:	52                   	push   %edx
     365f:	52                   	push   %edx
-    3660:	68 90 55 00 00       	push   $0x5590
+    3660:	68 a0 55 00 00       	push   $0x55a0
     3665:	6a 01                	push   $0x1
-    3667:	e8 74 04 00 00       	call   3ae0 <printf>
+    3667:	e8 84 04 00 00       	call   3af0 <printf>
     exit();
     366c:	e8 12 03 00 00       	call   3983 <exit>
     printf (1, "fork failed\n");
     3671:	50                   	push   %eax
     3672:	50                   	push   %eax
-    3673:	68 89 4d 00 00       	push   $0x4d89
+    3673:	68 99 4d 00 00       	push   $0x4d99
     3678:	6a 01                	push   $0x1
-    367a:	e8 61 04 00 00       	call   3ae0 <printf>
+    367a:	e8 71 04 00 00       	call   3af0 <printf>
     exit();
     367f:	e8 ff 02 00 00       	call   3983 <exit>
     3684:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -5498,7 +5498,7 @@
     3698:	83 ec 0c             	sub    $0xc,%esp
   fd = open("init", O_RDONLY);
     369b:	6a 00                	push   $0x0
-    369d:	68 13 4e 00 00       	push   $0x4e13
+    369d:	68 23 4e 00 00       	push   $0x4e23
     36a2:	e8 1c 03 00 00       	call   39c3 <open>
   if (fd < 0) {
     36a7:	83 c4 10             	add    $0x10,%esp
@@ -5521,9 +5521,9 @@
   printf(1, "arg test passed\n");
     36d1:	58                   	pop    %eax
     36d2:	5a                   	pop    %edx
-    36d3:	68 25 4e 00 00       	push   $0x4e25
+    36d3:	68 35 4e 00 00       	push   $0x4e35
     36d8:	6a 01                	push   $0x1
-    36da:	e8 01 04 00 00       	call   3ae0 <printf>
+    36da:	e8 11 04 00 00       	call   3af0 <printf>
 }
     36df:	8b 5d fc             	mov    -0x4(%ebp),%ebx
     36e2:	83 c4 10             	add    $0x10,%esp
@@ -5532,9 +5532,9 @@
     printf(2, "open failed\n");
     36e7:	51                   	push   %ecx
     36e8:	51                   	push   %ecx
-    36e9:	68 18 4e 00 00       	push   $0x4e18
+    36e9:	68 28 4e 00 00       	push   $0x4e28
     36ee:	6a 02                	push   $0x2
-    36f0:	e8 eb 03 00 00       	call   3ae0 <printf>
+    36f0:	e8 fb 03 00 00       	call   3af0 <printf>
     exit();
     36f5:	e8 89 02 00 00       	call   3983 <exit>
     36fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -5543,10 +5543,10 @@
 {
     3700:	f3 0f 1e fb          	endbr32 
   randstate = randstate * 1664525 + 1013904223;
-    3704:	69 05 dc 5e 00 00 0d 	imul   $0x19660d,0x5edc,%eax
+    3704:	69 05 ec 5e 00 00 0d 	imul   $0x19660d,0x5eec,%eax
     370b:	66 19 00 
     370e:	05 5f f3 6e 3c       	add    $0x3c6ef35f,%eax
-    3713:	a3 dc 5e 00 00       	mov    %eax,0x5edc
+    3713:	a3 ec 5e 00 00       	mov    %eax,0x5eec
 }
     3718:	c3                   	ret    
     3719:	66 90                	xchg   %ax,%ax
@@ -6080,609 +6080,623 @@
     3a1b:	b8 0e 00 00 00       	mov    $0xe,%eax
     3a20:	cd 40                	int    $0x40
     3a22:	c3                   	ret    
-    3a23:	66 90                	xchg   %ax,%ax
-    3a25:	66 90                	xchg   %ax,%ax
-    3a27:	66 90                	xchg   %ax,%ax
-    3a29:	66 90                	xchg   %ax,%ax
-    3a2b:	66 90                	xchg   %ax,%ax
-    3a2d:	66 90                	xchg   %ax,%ax
-    3a2f:	90                   	nop
 
-00003a30 <printint>:
+00003a23 <thread_create>:
+SYSCALL(thread_create)
+    3a23:	b8 16 00 00 00       	mov    $0x16,%eax
+    3a28:	cd 40                	int    $0x40
+    3a2a:	c3                   	ret    
+
+00003a2b <thread_join>:
+SYSCALL(thread_join)
+    3a2b:	b8 17 00 00 00       	mov    $0x17,%eax
+    3a30:	cd 40                	int    $0x40
+    3a32:	c3                   	ret    
+
+00003a33 <thread_exit>:
+SYSCALL(thread_exit)
+    3a33:	b8 18 00 00 00       	mov    $0x18,%eax
+    3a38:	cd 40                	int    $0x40
+    3a3a:	c3                   	ret    
+    3a3b:	66 90                	xchg   %ax,%ax
+    3a3d:	66 90                	xchg   %ax,%ax
+    3a3f:	90                   	nop
+
+00003a40 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
-    3a30:	55                   	push   %ebp
-    3a31:	89 e5                	mov    %esp,%ebp
-    3a33:	57                   	push   %edi
-    3a34:	56                   	push   %esi
-    3a35:	53                   	push   %ebx
-    3a36:	83 ec 3c             	sub    $0x3c,%esp
-    3a39:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+    3a40:	55                   	push   %ebp
+    3a41:	89 e5                	mov    %esp,%ebp
+    3a43:	57                   	push   %edi
+    3a44:	56                   	push   %esi
+    3a45:	53                   	push   %ebx
+    3a46:	83 ec 3c             	sub    $0x3c,%esp
+    3a49:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
-    3a3c:	89 d1                	mov    %edx,%ecx
+    3a4c:	89 d1                	mov    %edx,%ecx
 {
-    3a3e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+    3a4e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
-    3a41:	85 d2                	test   %edx,%edx
-    3a43:	0f 89 7f 00 00 00    	jns    3ac8 <printint+0x98>
-    3a49:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
-    3a4d:	74 79                	je     3ac8 <printint+0x98>
+    3a51:	85 d2                	test   %edx,%edx
+    3a53:	0f 89 7f 00 00 00    	jns    3ad8 <printint+0x98>
+    3a59:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+    3a5d:	74 79                	je     3ad8 <printint+0x98>
     neg = 1;
-    3a4f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    3a5f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
-    3a56:	f7 d9                	neg    %ecx
+    3a66:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
-    3a58:	31 db                	xor    %ebx,%ebx
-    3a5a:	8d 75 d7             	lea    -0x29(%ebp),%esi
-    3a5d:	8d 76 00             	lea    0x0(%esi),%esi
+    3a68:	31 db                	xor    %ebx,%ebx
+    3a6a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+    3a6d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
-    3a60:	89 c8                	mov    %ecx,%eax
-    3a62:	31 d2                	xor    %edx,%edx
-    3a64:	89 cf                	mov    %ecx,%edi
-    3a66:	f7 75 c4             	divl   -0x3c(%ebp)
-    3a69:	0f b6 92 e8 55 00 00 	movzbl 0x55e8(%edx),%edx
-    3a70:	89 45 c0             	mov    %eax,-0x40(%ebp)
-    3a73:	89 d8                	mov    %ebx,%eax
-    3a75:	8d 5b 01             	lea    0x1(%ebx),%ebx
+    3a70:	89 c8                	mov    %ecx,%eax
+    3a72:	31 d2                	xor    %edx,%edx
+    3a74:	89 cf                	mov    %ecx,%edi
+    3a76:	f7 75 c4             	divl   -0x3c(%ebp)
+    3a79:	0f b6 92 f8 55 00 00 	movzbl 0x55f8(%edx),%edx
+    3a80:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    3a83:	89 d8                	mov    %ebx,%eax
+    3a85:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
-    3a78:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    3a88:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
-    3a7b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+    3a8b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
-    3a7e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
-    3a81:	76 dd                	jbe    3a60 <printint+0x30>
+    3a8e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+    3a91:	76 dd                	jbe    3a70 <printint+0x30>
   if(neg)
-    3a83:	8b 4d bc             	mov    -0x44(%ebp),%ecx
-    3a86:	85 c9                	test   %ecx,%ecx
-    3a88:	74 0c                	je     3a96 <printint+0x66>
+    3a93:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+    3a96:	85 c9                	test   %ecx,%ecx
+    3a98:	74 0c                	je     3aa6 <printint+0x66>
     buf[i++] = '-';
-    3a8a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    3a9a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
-    3a8f:	89 d8                	mov    %ebx,%eax
+    3a9f:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
-    3a91:	ba 2d 00 00 00       	mov    $0x2d,%edx
+    3aa1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
-    3a96:	8b 7d b8             	mov    -0x48(%ebp),%edi
-    3a99:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
-    3a9d:	eb 07                	jmp    3aa6 <printint+0x76>
-    3a9f:	90                   	nop
-    3aa0:	0f b6 13             	movzbl (%ebx),%edx
-    3aa3:	83 eb 01             	sub    $0x1,%ebx
+    3aa6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+    3aa9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+    3aad:	eb 07                	jmp    3ab6 <printint+0x76>
+    3aaf:	90                   	nop
+    3ab0:	0f b6 13             	movzbl (%ebx),%edx
+    3ab3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
-    3aa6:	83 ec 04             	sub    $0x4,%esp
-    3aa9:	88 55 d7             	mov    %dl,-0x29(%ebp)
-    3aac:	6a 01                	push   $0x1
-    3aae:	56                   	push   %esi
-    3aaf:	57                   	push   %edi
-    3ab0:	e8 ee fe ff ff       	call   39a3 <write>
+    3ab6:	83 ec 04             	sub    $0x4,%esp
+    3ab9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+    3abc:	6a 01                	push   $0x1
+    3abe:	56                   	push   %esi
+    3abf:	57                   	push   %edi
+    3ac0:	e8 de fe ff ff       	call   39a3 <write>
   while(--i >= 0)
-    3ab5:	83 c4 10             	add    $0x10,%esp
-    3ab8:	39 de                	cmp    %ebx,%esi
-    3aba:	75 e4                	jne    3aa0 <printint+0x70>
+    3ac5:	83 c4 10             	add    $0x10,%esp
+    3ac8:	39 de                	cmp    %ebx,%esi
+    3aca:	75 e4                	jne    3ab0 <printint+0x70>
     putc(fd, buf[i]);
 }
-    3abc:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    3abf:	5b                   	pop    %ebx
-    3ac0:	5e                   	pop    %esi
-    3ac1:	5f                   	pop    %edi
-    3ac2:	5d                   	pop    %ebp
-    3ac3:	c3                   	ret    
-    3ac4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3acc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3acf:	5b                   	pop    %ebx
+    3ad0:	5e                   	pop    %esi
+    3ad1:	5f                   	pop    %edi
+    3ad2:	5d                   	pop    %ebp
+    3ad3:	c3                   	ret    
+    3ad4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
-    3ac8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
-    3acf:	eb 87                	jmp    3a58 <printint+0x28>
-    3ad1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    3ad8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    3adf:	90                   	nop
+    3ad8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+    3adf:	eb 87                	jmp    3a68 <printint+0x28>
+    3ae1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3ae8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3aef:	90                   	nop
 
-00003ae0 <printf>:
+00003af0 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
-    3ae0:	f3 0f 1e fb          	endbr32 
-    3ae4:	55                   	push   %ebp
-    3ae5:	89 e5                	mov    %esp,%ebp
-    3ae7:	57                   	push   %edi
-    3ae8:	56                   	push   %esi
-    3ae9:	53                   	push   %ebx
-    3aea:	83 ec 2c             	sub    $0x2c,%esp
+    3af0:	f3 0f 1e fb          	endbr32 
+    3af4:	55                   	push   %ebp
+    3af5:	89 e5                	mov    %esp,%ebp
+    3af7:	57                   	push   %edi
+    3af8:	56                   	push   %esi
+    3af9:	53                   	push   %ebx
+    3afa:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
-    3aed:	8b 75 0c             	mov    0xc(%ebp),%esi
-    3af0:	0f b6 1e             	movzbl (%esi),%ebx
-    3af3:	84 db                	test   %bl,%bl
-    3af5:	0f 84 b4 00 00 00    	je     3baf <printf+0xcf>
+    3afd:	8b 75 0c             	mov    0xc(%ebp),%esi
+    3b00:	0f b6 1e             	movzbl (%esi),%ebx
+    3b03:	84 db                	test   %bl,%bl
+    3b05:	0f 84 b4 00 00 00    	je     3bbf <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
-    3afb:	8d 45 10             	lea    0x10(%ebp),%eax
-    3afe:	83 c6 01             	add    $0x1,%esi
+    3b0b:	8d 45 10             	lea    0x10(%ebp),%eax
+    3b0e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
-    3b01:	8d 7d e7             	lea    -0x19(%ebp),%edi
+    3b11:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
-    3b04:	31 d2                	xor    %edx,%edx
+    3b14:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
-    3b06:	89 45 d0             	mov    %eax,-0x30(%ebp)
-    3b09:	eb 33                	jmp    3b3e <printf+0x5e>
-    3b0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    3b0f:	90                   	nop
-    3b10:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    3b16:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    3b19:	eb 33                	jmp    3b4e <printf+0x5e>
+    3b1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3b1f:	90                   	nop
+    3b20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
-    3b13:	ba 25 00 00 00       	mov    $0x25,%edx
+    3b23:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
-    3b18:	83 f8 25             	cmp    $0x25,%eax
-    3b1b:	74 17                	je     3b34 <printf+0x54>
+    3b28:	83 f8 25             	cmp    $0x25,%eax
+    3b2b:	74 17                	je     3b44 <printf+0x54>
   write(fd, &c, 1);
-    3b1d:	83 ec 04             	sub    $0x4,%esp
-    3b20:	88 5d e7             	mov    %bl,-0x19(%ebp)
-    3b23:	6a 01                	push   $0x1
-    3b25:	57                   	push   %edi
-    3b26:	ff 75 08             	pushl  0x8(%ebp)
-    3b29:	e8 75 fe ff ff       	call   39a3 <write>
-    3b2e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+    3b2d:	83 ec 04             	sub    $0x4,%esp
+    3b30:	88 5d e7             	mov    %bl,-0x19(%ebp)
+    3b33:	6a 01                	push   $0x1
+    3b35:	57                   	push   %edi
+    3b36:	ff 75 08             	pushl  0x8(%ebp)
+    3b39:	e8 65 fe ff ff       	call   39a3 <write>
+    3b3e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
-    3b31:	83 c4 10             	add    $0x10,%esp
+    3b41:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
-    3b34:	0f b6 1e             	movzbl (%esi),%ebx
-    3b37:	83 c6 01             	add    $0x1,%esi
-    3b3a:	84 db                	test   %bl,%bl
-    3b3c:	74 71                	je     3baf <printf+0xcf>
+    3b44:	0f b6 1e             	movzbl (%esi),%ebx
+    3b47:	83 c6 01             	add    $0x1,%esi
+    3b4a:	84 db                	test   %bl,%bl
+    3b4c:	74 71                	je     3bbf <printf+0xcf>
     c = fmt[i] & 0xff;
-    3b3e:	0f be cb             	movsbl %bl,%ecx
-    3b41:	0f b6 c3             	movzbl %bl,%eax
+    3b4e:	0f be cb             	movsbl %bl,%ecx
+    3b51:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
-    3b44:	85 d2                	test   %edx,%edx
-    3b46:	74 c8                	je     3b10 <printf+0x30>
+    3b54:	85 d2                	test   %edx,%edx
+    3b56:	74 c8                	je     3b20 <printf+0x30>
       }
     } else if(state == '%'){
-    3b48:	83 fa 25             	cmp    $0x25,%edx
-    3b4b:	75 e7                	jne    3b34 <printf+0x54>
+    3b58:	83 fa 25             	cmp    $0x25,%edx
+    3b5b:	75 e7                	jne    3b44 <printf+0x54>
       if(c == 'd'){
-    3b4d:	83 f8 64             	cmp    $0x64,%eax
-    3b50:	0f 84 9a 00 00 00    	je     3bf0 <printf+0x110>
+    3b5d:	83 f8 64             	cmp    $0x64,%eax
+    3b60:	0f 84 9a 00 00 00    	je     3c00 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
-    3b56:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
-    3b5c:	83 f9 70             	cmp    $0x70,%ecx
-    3b5f:	74 5f                	je     3bc0 <printf+0xe0>
+    3b66:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+    3b6c:	83 f9 70             	cmp    $0x70,%ecx
+    3b6f:	74 5f                	je     3bd0 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
-    3b61:	83 f8 73             	cmp    $0x73,%eax
-    3b64:	0f 84 d6 00 00 00    	je     3c40 <printf+0x160>
+    3b71:	83 f8 73             	cmp    $0x73,%eax
+    3b74:	0f 84 d6 00 00 00    	je     3c50 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
-    3b6a:	83 f8 63             	cmp    $0x63,%eax
-    3b6d:	0f 84 8d 00 00 00    	je     3c00 <printf+0x120>
+    3b7a:	83 f8 63             	cmp    $0x63,%eax
+    3b7d:	0f 84 8d 00 00 00    	je     3c10 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
-    3b73:	83 f8 25             	cmp    $0x25,%eax
-    3b76:	0f 84 b4 00 00 00    	je     3c30 <printf+0x150>
+    3b83:	83 f8 25             	cmp    $0x25,%eax
+    3b86:	0f 84 b4 00 00 00    	je     3c40 <printf+0x150>
   write(fd, &c, 1);
-    3b7c:	83 ec 04             	sub    $0x4,%esp
-    3b7f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
-    3b83:	6a 01                	push   $0x1
-    3b85:	57                   	push   %edi
-    3b86:	ff 75 08             	pushl  0x8(%ebp)
-    3b89:	e8 15 fe ff ff       	call   39a3 <write>
+    3b8c:	83 ec 04             	sub    $0x4,%esp
+    3b8f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+    3b93:	6a 01                	push   $0x1
+    3b95:	57                   	push   %edi
+    3b96:	ff 75 08             	pushl  0x8(%ebp)
+    3b99:	e8 05 fe ff ff       	call   39a3 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
-    3b8e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+    3b9e:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
-    3b91:	83 c4 0c             	add    $0xc,%esp
-    3b94:	6a 01                	push   $0x1
-    3b96:	83 c6 01             	add    $0x1,%esi
-    3b99:	57                   	push   %edi
-    3b9a:	ff 75 08             	pushl  0x8(%ebp)
-    3b9d:	e8 01 fe ff ff       	call   39a3 <write>
+    3ba1:	83 c4 0c             	add    $0xc,%esp
+    3ba4:	6a 01                	push   $0x1
+    3ba6:	83 c6 01             	add    $0x1,%esi
+    3ba9:	57                   	push   %edi
+    3baa:	ff 75 08             	pushl  0x8(%ebp)
+    3bad:	e8 f1 fd ff ff       	call   39a3 <write>
   for(i = 0; fmt[i]; i++){
-    3ba2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+    3bb2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
-    3ba6:	83 c4 10             	add    $0x10,%esp
+    3bb6:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
-    3ba9:	31 d2                	xor    %edx,%edx
+    3bb9:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
-    3bab:	84 db                	test   %bl,%bl
-    3bad:	75 8f                	jne    3b3e <printf+0x5e>
+    3bbb:	84 db                	test   %bl,%bl
+    3bbd:	75 8f                	jne    3b4e <printf+0x5e>
     }
   }
 }
-    3baf:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    3bb2:	5b                   	pop    %ebx
-    3bb3:	5e                   	pop    %esi
-    3bb4:	5f                   	pop    %edi
-    3bb5:	5d                   	pop    %ebp
-    3bb6:	c3                   	ret    
-    3bb7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    3bbe:	66 90                	xchg   %ax,%ax
+    3bbf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3bc2:	5b                   	pop    %ebx
+    3bc3:	5e                   	pop    %esi
+    3bc4:	5f                   	pop    %edi
+    3bc5:	5d                   	pop    %ebp
+    3bc6:	c3                   	ret    
+    3bc7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3bce:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
-    3bc0:	83 ec 0c             	sub    $0xc,%esp
-    3bc3:	b9 10 00 00 00       	mov    $0x10,%ecx
-    3bc8:	6a 00                	push   $0x0
-    3bca:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-    3bcd:	8b 45 08             	mov    0x8(%ebp),%eax
-    3bd0:	8b 13                	mov    (%ebx),%edx
-    3bd2:	e8 59 fe ff ff       	call   3a30 <printint>
+    3bd0:	83 ec 0c             	sub    $0xc,%esp
+    3bd3:	b9 10 00 00 00       	mov    $0x10,%ecx
+    3bd8:	6a 00                	push   $0x0
+    3bda:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+    3bdd:	8b 45 08             	mov    0x8(%ebp),%eax
+    3be0:	8b 13                	mov    (%ebx),%edx
+    3be2:	e8 59 fe ff ff       	call   3a40 <printint>
         ap++;
-    3bd7:	89 d8                	mov    %ebx,%eax
-    3bd9:	83 c4 10             	add    $0x10,%esp
+    3be7:	89 d8                	mov    %ebx,%eax
+    3be9:	83 c4 10             	add    $0x10,%esp
       state = 0;
-    3bdc:	31 d2                	xor    %edx,%edx
+    3bec:	31 d2                	xor    %edx,%edx
         ap++;
-    3bde:	83 c0 04             	add    $0x4,%eax
-    3be1:	89 45 d0             	mov    %eax,-0x30(%ebp)
-    3be4:	e9 4b ff ff ff       	jmp    3b34 <printf+0x54>
-    3be9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3bee:	83 c0 04             	add    $0x4,%eax
+    3bf1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    3bf4:	e9 4b ff ff ff       	jmp    3b44 <printf+0x54>
+    3bf9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
-    3bf0:	83 ec 0c             	sub    $0xc,%esp
-    3bf3:	b9 0a 00 00 00       	mov    $0xa,%ecx
-    3bf8:	6a 01                	push   $0x1
-    3bfa:	eb ce                	jmp    3bca <printf+0xea>
-    3bfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3c00:	83 ec 0c             	sub    $0xc,%esp
+    3c03:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    3c08:	6a 01                	push   $0x1
+    3c0a:	eb ce                	jmp    3bda <printf+0xea>
+    3c0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
-    3c00:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+    3c10:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
-    3c03:	83 ec 04             	sub    $0x4,%esp
+    3c13:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
-    3c06:	8b 03                	mov    (%ebx),%eax
+    3c16:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
-    3c08:	6a 01                	push   $0x1
+    3c18:	6a 01                	push   $0x1
         ap++;
-    3c0a:	83 c3 04             	add    $0x4,%ebx
+    3c1a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
-    3c0d:	57                   	push   %edi
-    3c0e:	ff 75 08             	pushl  0x8(%ebp)
+    3c1d:	57                   	push   %edi
+    3c1e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
-    3c11:	88 45 e7             	mov    %al,-0x19(%ebp)
+    3c21:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
-    3c14:	e8 8a fd ff ff       	call   39a3 <write>
+    3c24:	e8 7a fd ff ff       	call   39a3 <write>
         ap++;
-    3c19:	89 5d d0             	mov    %ebx,-0x30(%ebp)
-    3c1c:	83 c4 10             	add    $0x10,%esp
+    3c29:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+    3c2c:	83 c4 10             	add    $0x10,%esp
       state = 0;
-    3c1f:	31 d2                	xor    %edx,%edx
-    3c21:	e9 0e ff ff ff       	jmp    3b34 <printf+0x54>
-    3c26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    3c2d:	8d 76 00             	lea    0x0(%esi),%esi
+    3c2f:	31 d2                	xor    %edx,%edx
+    3c31:	e9 0e ff ff ff       	jmp    3b44 <printf+0x54>
+    3c36:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3c3d:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
-    3c30:	88 5d e7             	mov    %bl,-0x19(%ebp)
+    3c40:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
-    3c33:	83 ec 04             	sub    $0x4,%esp
-    3c36:	e9 59 ff ff ff       	jmp    3b94 <printf+0xb4>
-    3c3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    3c3f:	90                   	nop
+    3c43:	83 ec 04             	sub    $0x4,%esp
+    3c46:	e9 59 ff ff ff       	jmp    3ba4 <printf+0xb4>
+    3c4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3c4f:	90                   	nop
         s = (char*)*ap;
-    3c40:	8b 45 d0             	mov    -0x30(%ebp),%eax
-    3c43:	8b 18                	mov    (%eax),%ebx
+    3c50:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    3c53:	8b 18                	mov    (%eax),%ebx
         ap++;
-    3c45:	83 c0 04             	add    $0x4,%eax
-    3c48:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    3c55:	83 c0 04             	add    $0x4,%eax
+    3c58:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
-    3c4b:	85 db                	test   %ebx,%ebx
-    3c4d:	74 17                	je     3c66 <printf+0x186>
+    3c5b:	85 db                	test   %ebx,%ebx
+    3c5d:	74 17                	je     3c76 <printf+0x186>
         while(*s != 0){
-    3c4f:	0f b6 03             	movzbl (%ebx),%eax
+    3c5f:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
-    3c52:	31 d2                	xor    %edx,%edx
+    3c62:	31 d2                	xor    %edx,%edx
         while(*s != 0){
-    3c54:	84 c0                	test   %al,%al
-    3c56:	0f 84 d8 fe ff ff    	je     3b34 <printf+0x54>
-    3c5c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
-    3c5f:	89 de                	mov    %ebx,%esi
-    3c61:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    3c64:	eb 1a                	jmp    3c80 <printf+0x1a0>
+    3c64:	84 c0                	test   %al,%al
+    3c66:	0f 84 d8 fe ff ff    	je     3b44 <printf+0x54>
+    3c6c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    3c6f:	89 de                	mov    %ebx,%esi
+    3c71:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3c74:	eb 1a                	jmp    3c90 <printf+0x1a0>
           s = "(null)";
-    3c66:	bb de 55 00 00       	mov    $0x55de,%ebx
+    3c76:	bb ee 55 00 00       	mov    $0x55ee,%ebx
         while(*s != 0){
-    3c6b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
-    3c6e:	b8 28 00 00 00       	mov    $0x28,%eax
-    3c73:	89 de                	mov    %ebx,%esi
-    3c75:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    3c78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    3c7f:	90                   	nop
+    3c7b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    3c7e:	b8 28 00 00 00       	mov    $0x28,%eax
+    3c83:	89 de                	mov    %ebx,%esi
+    3c85:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3c88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3c8f:	90                   	nop
   write(fd, &c, 1);
-    3c80:	83 ec 04             	sub    $0x4,%esp
+    3c90:	83 ec 04             	sub    $0x4,%esp
           s++;
-    3c83:	83 c6 01             	add    $0x1,%esi
-    3c86:	88 45 e7             	mov    %al,-0x19(%ebp)
+    3c93:	83 c6 01             	add    $0x1,%esi
+    3c96:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
-    3c89:	6a 01                	push   $0x1
-    3c8b:	57                   	push   %edi
-    3c8c:	53                   	push   %ebx
-    3c8d:	e8 11 fd ff ff       	call   39a3 <write>
+    3c99:	6a 01                	push   $0x1
+    3c9b:	57                   	push   %edi
+    3c9c:	53                   	push   %ebx
+    3c9d:	e8 01 fd ff ff       	call   39a3 <write>
         while(*s != 0){
-    3c92:	0f b6 06             	movzbl (%esi),%eax
-    3c95:	83 c4 10             	add    $0x10,%esp
-    3c98:	84 c0                	test   %al,%al
-    3c9a:	75 e4                	jne    3c80 <printf+0x1a0>
-    3c9c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+    3ca2:	0f b6 06             	movzbl (%esi),%eax
+    3ca5:	83 c4 10             	add    $0x10,%esp
+    3ca8:	84 c0                	test   %al,%al
+    3caa:	75 e4                	jne    3c90 <printf+0x1a0>
+    3cac:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
-    3c9f:	31 d2                	xor    %edx,%edx
-    3ca1:	e9 8e fe ff ff       	jmp    3b34 <printf+0x54>
-    3ca6:	66 90                	xchg   %ax,%ax
-    3ca8:	66 90                	xchg   %ax,%ax
-    3caa:	66 90                	xchg   %ax,%ax
-    3cac:	66 90                	xchg   %ax,%ax
-    3cae:	66 90                	xchg   %ax,%ax
+    3caf:	31 d2                	xor    %edx,%edx
+    3cb1:	e9 8e fe ff ff       	jmp    3b44 <printf+0x54>
+    3cb6:	66 90                	xchg   %ax,%ax
+    3cb8:	66 90                	xchg   %ax,%ax
+    3cba:	66 90                	xchg   %ax,%ax
+    3cbc:	66 90                	xchg   %ax,%ax
+    3cbe:	66 90                	xchg   %ax,%ax
 
-00003cb0 <free>:
+00003cc0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
-    3cb0:	f3 0f 1e fb          	endbr32 
-    3cb4:	55                   	push   %ebp
+    3cc0:	f3 0f 1e fb          	endbr32 
+    3cc4:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    3cb5:	a1 80 5f 00 00       	mov    0x5f80,%eax
+    3cc5:	a1 a0 5f 00 00       	mov    0x5fa0,%eax
 {
-    3cba:	89 e5                	mov    %esp,%ebp
-    3cbc:	57                   	push   %edi
-    3cbd:	56                   	push   %esi
-    3cbe:	53                   	push   %ebx
-    3cbf:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    3cc2:	8b 10                	mov    (%eax),%edx
+    3cca:	89 e5                	mov    %esp,%ebp
+    3ccc:	57                   	push   %edi
+    3ccd:	56                   	push   %esi
+    3cce:	53                   	push   %ebx
+    3ccf:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3cd2:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
-    3cc4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+    3cd4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    3cc7:	39 c8                	cmp    %ecx,%eax
-    3cc9:	73 15                	jae    3ce0 <free+0x30>
-    3ccb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    3ccf:	90                   	nop
-    3cd0:	39 d1                	cmp    %edx,%ecx
-    3cd2:	72 14                	jb     3ce8 <free+0x38>
+    3cd7:	39 c8                	cmp    %ecx,%eax
+    3cd9:	73 15                	jae    3cf0 <free+0x30>
+    3cdb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3cdf:	90                   	nop
+    3ce0:	39 d1                	cmp    %edx,%ecx
+    3ce2:	72 14                	jb     3cf8 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    3cd4:	39 d0                	cmp    %edx,%eax
-    3cd6:	73 10                	jae    3ce8 <free+0x38>
+    3ce4:	39 d0                	cmp    %edx,%eax
+    3ce6:	73 10                	jae    3cf8 <free+0x38>
 {
-    3cd8:	89 d0                	mov    %edx,%eax
+    3ce8:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    3cda:	8b 10                	mov    (%eax),%edx
-    3cdc:	39 c8                	cmp    %ecx,%eax
-    3cde:	72 f0                	jb     3cd0 <free+0x20>
+    3cea:	8b 10                	mov    (%eax),%edx
+    3cec:	39 c8                	cmp    %ecx,%eax
+    3cee:	72 f0                	jb     3ce0 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    3ce0:	39 d0                	cmp    %edx,%eax
-    3ce2:	72 f4                	jb     3cd8 <free+0x28>
-    3ce4:	39 d1                	cmp    %edx,%ecx
-    3ce6:	73 f0                	jae    3cd8 <free+0x28>
+    3cf0:	39 d0                	cmp    %edx,%eax
+    3cf2:	72 f4                	jb     3ce8 <free+0x28>
+    3cf4:	39 d1                	cmp    %edx,%ecx
+    3cf6:	73 f0                	jae    3ce8 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
-    3ce8:	8b 73 fc             	mov    -0x4(%ebx),%esi
-    3ceb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
-    3cee:	39 fa                	cmp    %edi,%edx
-    3cf0:	74 1e                	je     3d10 <free+0x60>
+    3cf8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    3cfb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    3cfe:	39 fa                	cmp    %edi,%edx
+    3d00:	74 1e                	je     3d20 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
-    3cf2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+    3d02:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
-    3cf5:	8b 50 04             	mov    0x4(%eax),%edx
-    3cf8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
-    3cfb:	39 f1                	cmp    %esi,%ecx
-    3cfd:	74 28                	je     3d27 <free+0x77>
+    3d05:	8b 50 04             	mov    0x4(%eax),%edx
+    3d08:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    3d0b:	39 f1                	cmp    %esi,%ecx
+    3d0d:	74 28                	je     3d37 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
-    3cff:	89 08                	mov    %ecx,(%eax)
+    3d0f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
-    3d01:	5b                   	pop    %ebx
+    3d11:	5b                   	pop    %ebx
   freep = p;
-    3d02:	a3 80 5f 00 00       	mov    %eax,0x5f80
+    3d12:	a3 a0 5f 00 00       	mov    %eax,0x5fa0
 }
-    3d07:	5e                   	pop    %esi
-    3d08:	5f                   	pop    %edi
-    3d09:	5d                   	pop    %ebp
-    3d0a:	c3                   	ret    
-    3d0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    3d0f:	90                   	nop
+    3d17:	5e                   	pop    %esi
+    3d18:	5f                   	pop    %edi
+    3d19:	5d                   	pop    %ebp
+    3d1a:	c3                   	ret    
+    3d1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3d1f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
-    3d10:	03 72 04             	add    0x4(%edx),%esi
-    3d13:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    3d20:	03 72 04             	add    0x4(%edx),%esi
+    3d23:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
-    3d16:	8b 10                	mov    (%eax),%edx
-    3d18:	8b 12                	mov    (%edx),%edx
-    3d1a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+    3d26:	8b 10                	mov    (%eax),%edx
+    3d28:	8b 12                	mov    (%edx),%edx
+    3d2a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
-    3d1d:	8b 50 04             	mov    0x4(%eax),%edx
-    3d20:	8d 34 d0             	lea    (%eax,%edx,8),%esi
-    3d23:	39 f1                	cmp    %esi,%ecx
-    3d25:	75 d8                	jne    3cff <free+0x4f>
+    3d2d:	8b 50 04             	mov    0x4(%eax),%edx
+    3d30:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    3d33:	39 f1                	cmp    %esi,%ecx
+    3d35:	75 d8                	jne    3d0f <free+0x4f>
     p->s.size += bp->s.size;
-    3d27:	03 53 fc             	add    -0x4(%ebx),%edx
+    3d37:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
-    3d2a:	a3 80 5f 00 00       	mov    %eax,0x5f80
+    3d3a:	a3 a0 5f 00 00       	mov    %eax,0x5fa0
     p->s.size += bp->s.size;
-    3d2f:	89 50 04             	mov    %edx,0x4(%eax)
+    3d3f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
-    3d32:	8b 53 f8             	mov    -0x8(%ebx),%edx
-    3d35:	89 10                	mov    %edx,(%eax)
+    3d42:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    3d45:	89 10                	mov    %edx,(%eax)
 }
-    3d37:	5b                   	pop    %ebx
-    3d38:	5e                   	pop    %esi
-    3d39:	5f                   	pop    %edi
-    3d3a:	5d                   	pop    %ebp
-    3d3b:	c3                   	ret    
-    3d3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3d47:	5b                   	pop    %ebx
+    3d48:	5e                   	pop    %esi
+    3d49:	5f                   	pop    %edi
+    3d4a:	5d                   	pop    %ebp
+    3d4b:	c3                   	ret    
+    3d4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00003d40 <malloc>:
+00003d50 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
-    3d40:	f3 0f 1e fb          	endbr32 
-    3d44:	55                   	push   %ebp
-    3d45:	89 e5                	mov    %esp,%ebp
-    3d47:	57                   	push   %edi
-    3d48:	56                   	push   %esi
-    3d49:	53                   	push   %ebx
-    3d4a:	83 ec 1c             	sub    $0x1c,%esp
+    3d50:	f3 0f 1e fb          	endbr32 
+    3d54:	55                   	push   %ebp
+    3d55:	89 e5                	mov    %esp,%ebp
+    3d57:	57                   	push   %edi
+    3d58:	56                   	push   %esi
+    3d59:	53                   	push   %ebx
+    3d5a:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    3d4d:	8b 45 08             	mov    0x8(%ebp),%eax
+    3d5d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
-    3d50:	8b 3d 80 5f 00 00    	mov    0x5f80,%edi
+    3d60:	8b 3d a0 5f 00 00    	mov    0x5fa0,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    3d56:	8d 70 07             	lea    0x7(%eax),%esi
-    3d59:	c1 ee 03             	shr    $0x3,%esi
-    3d5c:	83 c6 01             	add    $0x1,%esi
+    3d66:	8d 70 07             	lea    0x7(%eax),%esi
+    3d69:	c1 ee 03             	shr    $0x3,%esi
+    3d6c:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
-    3d5f:	85 ff                	test   %edi,%edi
-    3d61:	0f 84 a9 00 00 00    	je     3e10 <malloc+0xd0>
+    3d6f:	85 ff                	test   %edi,%edi
+    3d71:	0f 84 a9 00 00 00    	je     3e20 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    3d67:	8b 07                	mov    (%edi),%eax
+    3d77:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
-    3d69:	8b 48 04             	mov    0x4(%eax),%ecx
-    3d6c:	39 f1                	cmp    %esi,%ecx
-    3d6e:	73 6d                	jae    3ddd <malloc+0x9d>
-    3d70:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
-    3d76:	bb 00 10 00 00       	mov    $0x1000,%ebx
-    3d7b:	0f 43 de             	cmovae %esi,%ebx
+    3d79:	8b 48 04             	mov    0x4(%eax),%ecx
+    3d7c:	39 f1                	cmp    %esi,%ecx
+    3d7e:	73 6d                	jae    3ded <malloc+0x9d>
+    3d80:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+    3d86:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    3d8b:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
-    3d7e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
-    3d85:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
-    3d88:	eb 17                	jmp    3da1 <malloc+0x61>
-    3d8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3d8e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+    3d95:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+    3d98:	eb 17                	jmp    3db1 <malloc+0x61>
+    3d9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    3d90:	8b 10                	mov    (%eax),%edx
+    3da0:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
-    3d92:	8b 4a 04             	mov    0x4(%edx),%ecx
-    3d95:	39 f1                	cmp    %esi,%ecx
-    3d97:	73 4f                	jae    3de8 <malloc+0xa8>
-    3d99:	8b 3d 80 5f 00 00    	mov    0x5f80,%edi
-    3d9f:	89 d0                	mov    %edx,%eax
+    3da2:	8b 4a 04             	mov    0x4(%edx),%ecx
+    3da5:	39 f1                	cmp    %esi,%ecx
+    3da7:	73 4f                	jae    3df8 <malloc+0xa8>
+    3da9:	8b 3d a0 5f 00 00    	mov    0x5fa0,%edi
+    3daf:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
-    3da1:	39 c7                	cmp    %eax,%edi
-    3da3:	75 eb                	jne    3d90 <malloc+0x50>
+    3db1:	39 c7                	cmp    %eax,%edi
+    3db3:	75 eb                	jne    3da0 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
-    3da5:	83 ec 0c             	sub    $0xc,%esp
-    3da8:	ff 75 e4             	pushl  -0x1c(%ebp)
-    3dab:	e8 5b fc ff ff       	call   3a0b <sbrk>
+    3db5:	83 ec 0c             	sub    $0xc,%esp
+    3db8:	ff 75 e4             	pushl  -0x1c(%ebp)
+    3dbb:	e8 4b fc ff ff       	call   3a0b <sbrk>
   if(p == (char*)-1)
-    3db0:	83 c4 10             	add    $0x10,%esp
-    3db3:	83 f8 ff             	cmp    $0xffffffff,%eax
-    3db6:	74 1b                	je     3dd3 <malloc+0x93>
+    3dc0:	83 c4 10             	add    $0x10,%esp
+    3dc3:	83 f8 ff             	cmp    $0xffffffff,%eax
+    3dc6:	74 1b                	je     3de3 <malloc+0x93>
   hp->s.size = nu;
-    3db8:	89 58 04             	mov    %ebx,0x4(%eax)
+    3dc8:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
-    3dbb:	83 ec 0c             	sub    $0xc,%esp
-    3dbe:	83 c0 08             	add    $0x8,%eax
-    3dc1:	50                   	push   %eax
-    3dc2:	e8 e9 fe ff ff       	call   3cb0 <free>
+    3dcb:	83 ec 0c             	sub    $0xc,%esp
+    3dce:	83 c0 08             	add    $0x8,%eax
+    3dd1:	50                   	push   %eax
+    3dd2:	e8 e9 fe ff ff       	call   3cc0 <free>
   return freep;
-    3dc7:	a1 80 5f 00 00       	mov    0x5f80,%eax
+    3dd7:	a1 a0 5f 00 00       	mov    0x5fa0,%eax
       if((p = morecore(nunits)) == 0)
-    3dcc:	83 c4 10             	add    $0x10,%esp
-    3dcf:	85 c0                	test   %eax,%eax
-    3dd1:	75 bd                	jne    3d90 <malloc+0x50>
+    3ddc:	83 c4 10             	add    $0x10,%esp
+    3ddf:	85 c0                	test   %eax,%eax
+    3de1:	75 bd                	jne    3da0 <malloc+0x50>
         return 0;
   }
 }
-    3dd3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3de3:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
-    3dd6:	31 c0                	xor    %eax,%eax
+    3de6:	31 c0                	xor    %eax,%eax
 }
-    3dd8:	5b                   	pop    %ebx
-    3dd9:	5e                   	pop    %esi
-    3dda:	5f                   	pop    %edi
-    3ddb:	5d                   	pop    %ebp
-    3ddc:	c3                   	ret    
+    3de8:	5b                   	pop    %ebx
+    3de9:	5e                   	pop    %esi
+    3dea:	5f                   	pop    %edi
+    3deb:	5d                   	pop    %ebp
+    3dec:	c3                   	ret    
     if(p->s.size >= nunits){
-    3ddd:	89 c2                	mov    %eax,%edx
-    3ddf:	89 f8                	mov    %edi,%eax
-    3de1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3ded:	89 c2                	mov    %eax,%edx
+    3def:	89 f8                	mov    %edi,%eax
+    3df1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
-    3de8:	39 ce                	cmp    %ecx,%esi
-    3dea:	74 54                	je     3e40 <malloc+0x100>
+    3df8:	39 ce                	cmp    %ecx,%esi
+    3dfa:	74 54                	je     3e50 <malloc+0x100>
         p->s.size -= nunits;
-    3dec:	29 f1                	sub    %esi,%ecx
-    3dee:	89 4a 04             	mov    %ecx,0x4(%edx)
+    3dfc:	29 f1                	sub    %esi,%ecx
+    3dfe:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
-    3df1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+    3e01:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
-    3df4:	89 72 04             	mov    %esi,0x4(%edx)
+    3e04:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
-    3df7:	a3 80 5f 00 00       	mov    %eax,0x5f80
+    3e07:	a3 a0 5f 00 00       	mov    %eax,0x5fa0
 }
-    3dfc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3e0c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
-    3dff:	8d 42 08             	lea    0x8(%edx),%eax
+    3e0f:	8d 42 08             	lea    0x8(%edx),%eax
 }
-    3e02:	5b                   	pop    %ebx
-    3e03:	5e                   	pop    %esi
-    3e04:	5f                   	pop    %edi
-    3e05:	5d                   	pop    %ebp
-    3e06:	c3                   	ret    
-    3e07:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    3e0e:	66 90                	xchg   %ax,%ax
+    3e12:	5b                   	pop    %ebx
+    3e13:	5e                   	pop    %esi
+    3e14:	5f                   	pop    %edi
+    3e15:	5d                   	pop    %ebp
+    3e16:	c3                   	ret    
+    3e17:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3e1e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
-    3e10:	c7 05 80 5f 00 00 84 	movl   $0x5f84,0x5f80
-    3e17:	5f 00 00 
+    3e20:	c7 05 a0 5f 00 00 a4 	movl   $0x5fa4,0x5fa0
+    3e27:	5f 00 00 
     base.s.size = 0;
-    3e1a:	bf 84 5f 00 00       	mov    $0x5f84,%edi
+    3e2a:	bf a4 5f 00 00       	mov    $0x5fa4,%edi
     base.s.ptr = freep = prevp = &base;
-    3e1f:	c7 05 84 5f 00 00 84 	movl   $0x5f84,0x5f84
-    3e26:	5f 00 00 
+    3e2f:	c7 05 a4 5f 00 00 a4 	movl   $0x5fa4,0x5fa4
+    3e36:	5f 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    3e29:	89 f8                	mov    %edi,%eax
+    3e39:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
-    3e2b:	c7 05 88 5f 00 00 00 	movl   $0x0,0x5f88
-    3e32:	00 00 00 
+    3e3b:	c7 05 a8 5f 00 00 00 	movl   $0x0,0x5fa8
+    3e42:	00 00 00 
     if(p->s.size >= nunits){
-    3e35:	e9 36 ff ff ff       	jmp    3d70 <malloc+0x30>
-    3e3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3e45:	e9 36 ff ff ff       	jmp    3d80 <malloc+0x30>
+    3e4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
-    3e40:	8b 0a                	mov    (%edx),%ecx
-    3e42:	89 08                	mov    %ecx,(%eax)
-    3e44:	eb b1                	jmp    3df7 <malloc+0xb7>
+    3e50:	8b 0a                	mov    (%edx),%ecx
+    3e52:	89 08                	mov    %ecx,(%eax)
+    3e54:	eb b1                	jmp    3e07 <malloc+0xb7>
Binary files xv6-public-original/usertests.o and xv6-public/usertests.o differ
diff -ruN xv6-public-original/usertests.sym xv6-public/usertests.sym
--- xv6-public-original/usertests.sym	2022-08-13 16:28:55.499964000 +0530
+++ xv6-public/usertests.sym	2022-09-05 20:56:51.082960000 +0530
@@ -1,8 +1,8 @@
 00000000 .text
-00003e48 .rodata
-000055fc .eh_frame
-00005edc .data
-00005f00 .bss
+00003e58 .rodata
+0000560c .eh_frame
+00005eec .data
+00005f20 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -12,18 +12,19 @@
 00000000 .debug_loc
 00000000 .debug_ranges
 00000000 usertests.c
-00005f00 args.1449
+00005f20 args.1458
 00000000 ulib.c
 00000000 printf.c
-00003a30 printint
-000055e8 digits.1085
+00003a40 printint
+000055f8 digits.1094
 00000000 umalloc.c
-00005f80 freep
-00005f84 base
+00005fa0 freep
+00005fa4 base
 00003720 strcpy
 00000d60 exitwait
-00003ae0 printf
-00005ee0 stdout
+00003af0 printf
+00005ef0 stdout
+00003a33 thread_exit
 00003330 bigargtest
 00003950 memmove
 00000310 openiputtest
@@ -32,7 +33,7 @@
 00003a03 getpid
 00000a60 pipe1
 00002c00 iref
-00003d40 malloc
+00003d50 malloc
 00003a13 sleep
 00000210 exitiputtest
 00003430 fsfull
@@ -41,13 +42,13 @@
 00000690 writetest1
 00002490 bigwrite
 00000eb0 sharedfd
-00005edc randstate
+00005eec randstate
 00003993 pipe
-00005fa0 uninit
+00005fc0 uninit
 00002a00 dirfile
 000039a3 write
 000032c0 bsstest
-00005ee4 echoargv
+00005ef4 echoargv
 000039db fstat
 000039b3 kill
 00003200 validatetest
@@ -65,7 +66,7 @@
 0000397b fork
 00003a0b sbrk
 00003a1b uptime
-00005ef8 __bss_start
+00005f08 __bss_start
 000037e0 memset
 00000860 createtest
 00000000 main
@@ -78,26 +79,28 @@
 00001da0 subdir
 00003610 uio
 00001630 linktest
-000086c0 buf
+000086e0 buf
 00000920 dirtest
 00000120 iputtest
 000038c0 stat
 00002570 bigfile
-00005ef8 _edata
-0000a6c4 _end
+00005f08 _edata
+0000a6e4 _end
 000014a0 unlinkread
 000039e3 link
 00003983 exit
 00003910 atoi
 00001b50 linkunlink
-0000a6c0 name
+0000a6e0 name
 000037a0 strlen
 000039c3 open
 00003800 strchr
+00003a23 thread_create
 00001850 concreate
 00002740 fourteen
 000031f0 validateint
 00001070 fourfiles
 000039eb mkdir
 000039ab close
-00003cb0 free
+00003a2b thread_join
+00003cc0 free
Binary files xv6-public-original/usys.o and xv6-public/usys.o differ
diff -ruN xv6-public-original/usys.S xv6-public/usys.S
--- xv6-public-original/usys.S	2022-08-13 16:28:24.240585000 +0530
+++ xv6-public/usys.S	2022-08-29 21:02:46.000000000 +0530
@@ -29,3 +29,6 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(thread_create)
+SYSCALL(thread_join)
+SYSCALL(thread_exit)
Binary files xv6-public-original/vectors.o and xv6-public/vectors.o differ
Binary files xv6-public-original/vm.o and xv6-public/vm.o differ
Binary files xv6-public-original/_wc and xv6-public/_wc differ
diff -ruN xv6-public-original/wc.asm xv6-public/wc.asm
--- xv6-public-original/wc.asm	2022-08-13 16:28:55.547949000 +0530
+++ xv6-public/wc.asm	2022-09-05 20:56:51.162960000 +0530
@@ -72,15 +72,15 @@
       printf(1, "wc: cannot open %s\n", argv[i]);
   6b:	50                   	push   %eax
   6c:	ff 33                	pushl  (%ebx)
-  6e:	68 db 08 00 00       	push   $0x8db
+  6e:	68 eb 08 00 00       	push   $0x8eb
   73:	6a 01                	push   $0x1
-  75:	e8 d6 04 00 00       	call   550 <printf>
+  75:	e8 e6 04 00 00       	call   560 <printf>
       exit();
   7a:	e8 74 03 00 00       	call   3f3 <exit>
     wc(0, "");
   7f:	52                   	push   %edx
   80:	52                   	push   %edx
-  81:	68 cd 08 00 00       	push   $0x8cd
+  81:	68 dd 08 00 00       	push   $0x8dd
   86:	6a 00                	push   $0x0
   88:	e8 13 00 00 00       	call   a0 <wc>
     exit();
@@ -114,7 +114,7 @@
   while((n = read(fd, buf, sizeof(buf))) > 0){
   c8:	83 ec 04             	sub    $0x4,%esp
   cb:	68 00 02 00 00       	push   $0x200
-  d0:	68 00 0c 00 00       	push   $0xc00
+  d0:	68 20 0c 00 00       	push   $0xc20
   d5:	ff 75 08             	pushl  0x8(%ebp)
   d8:	e8 2e 03 00 00       	call   40b <read>
   dd:	83 c4 10             	add    $0x10,%esp
@@ -132,7 +132,7 @@
   fa:	39 fe                	cmp    %edi,%esi
   fc:	74 42                	je     140 <wc+0xa0>
       if(buf[i] == '\n')
-  fe:	0f be 87 00 0c 00 00 	movsbl 0xc00(%edi),%eax
+  fe:	0f be 87 20 0c 00 00 	movsbl 0xc20(%edi),%eax
         l++;
  105:	31 c9                	xor    %ecx,%ecx
  107:	3c 0a                	cmp    $0xa,%al
@@ -143,7 +143,7 @@
         l++;
  110:	01 cb                	add    %ecx,%ebx
       if(strchr(" \r\t\n\v", buf[i]))
- 112:	68 b8 08 00 00       	push   $0x8b8
+ 112:	68 c8 08 00 00       	push   $0x8c8
  117:	e8 54 01 00 00       	call   270 <strchr>
  11c:	83 c4 10             	add    $0x10,%esp
  11f:	85 c0                	test   %eax,%eax
@@ -173,9 +173,9 @@
  150:	ff 75 dc             	pushl  -0x24(%ebp)
  153:	ff 75 e0             	pushl  -0x20(%ebp)
  156:	53                   	push   %ebx
- 157:	68 ce 08 00 00       	push   $0x8ce
+ 157:	68 de 08 00 00       	push   $0x8de
  15c:	6a 01                	push   $0x1
- 15e:	e8 ed 03 00 00       	call   550 <printf>
+ 15e:	e8 fd 03 00 00       	call   560 <printf>
 }
  163:	83 c4 20             	add    $0x20,%esp
  166:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -187,9 +187,9 @@
     printf(1, "wc: read error\n");
  16e:	50                   	push   %eax
  16f:	50                   	push   %eax
- 170:	68 be 08 00 00       	push   $0x8be
+ 170:	68 ce 08 00 00       	push   $0x8ce
  175:	6a 01                	push   $0x1
- 177:	e8 d4 03 00 00       	call   550 <printf>
+ 177:	e8 e4 03 00 00       	call   560 <printf>
     exit();
  17c:	e8 72 02 00 00       	call   3f3 <exit>
  181:	66 90                	xchg   %ax,%ax
@@ -727,609 +727,623 @@
  48b:	b8 0e 00 00 00       	mov    $0xe,%eax
  490:	cd 40                	int    $0x40
  492:	c3                   	ret    
- 493:	66 90                	xchg   %ax,%ax
- 495:	66 90                	xchg   %ax,%ax
- 497:	66 90                	xchg   %ax,%ax
- 499:	66 90                	xchg   %ax,%ax
- 49b:	66 90                	xchg   %ax,%ax
- 49d:	66 90                	xchg   %ax,%ax
- 49f:	90                   	nop
 
-000004a0 <printint>:
+00000493 <thread_create>:
+SYSCALL(thread_create)
+ 493:	b8 16 00 00 00       	mov    $0x16,%eax
+ 498:	cd 40                	int    $0x40
+ 49a:	c3                   	ret    
+
+0000049b <thread_join>:
+SYSCALL(thread_join)
+ 49b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 4a0:	cd 40                	int    $0x40
+ 4a2:	c3                   	ret    
+
+000004a3 <thread_exit>:
+SYSCALL(thread_exit)
+ 4a3:	b8 18 00 00 00       	mov    $0x18,%eax
+ 4a8:	cd 40                	int    $0x40
+ 4aa:	c3                   	ret    
+ 4ab:	66 90                	xchg   %ax,%ax
+ 4ad:	66 90                	xchg   %ax,%ax
+ 4af:	90                   	nop
+
+000004b0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 4a0:	55                   	push   %ebp
- 4a1:	89 e5                	mov    %esp,%ebp
- 4a3:	57                   	push   %edi
- 4a4:	56                   	push   %esi
- 4a5:	53                   	push   %ebx
- 4a6:	83 ec 3c             	sub    $0x3c,%esp
- 4a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 4b0:	55                   	push   %ebp
+ 4b1:	89 e5                	mov    %esp,%ebp
+ 4b3:	57                   	push   %edi
+ 4b4:	56                   	push   %esi
+ 4b5:	53                   	push   %ebx
+ 4b6:	83 ec 3c             	sub    $0x3c,%esp
+ 4b9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 4ac:	89 d1                	mov    %edx,%ecx
+ 4bc:	89 d1                	mov    %edx,%ecx
 {
- 4ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 4be:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 4b1:	85 d2                	test   %edx,%edx
- 4b3:	0f 89 7f 00 00 00    	jns    538 <printint+0x98>
- 4b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 4bd:	74 79                	je     538 <printint+0x98>
+ 4c1:	85 d2                	test   %edx,%edx
+ 4c3:	0f 89 7f 00 00 00    	jns    548 <printint+0x98>
+ 4c9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 4cd:	74 79                	je     548 <printint+0x98>
     neg = 1;
- 4bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 4cf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 4c6:	f7 d9                	neg    %ecx
+ 4d6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 4c8:	31 db                	xor    %ebx,%ebx
- 4ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 4cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 4d8:	31 db                	xor    %ebx,%ebx
+ 4da:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 4dd:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 4d0:	89 c8                	mov    %ecx,%eax
- 4d2:	31 d2                	xor    %edx,%edx
- 4d4:	89 cf                	mov    %ecx,%edi
- 4d6:	f7 75 c4             	divl   -0x3c(%ebp)
- 4d9:	0f b6 92 f8 08 00 00 	movzbl 0x8f8(%edx),%edx
- 4e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 4e3:	89 d8                	mov    %ebx,%eax
- 4e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 4e0:	89 c8                	mov    %ecx,%eax
+ 4e2:	31 d2                	xor    %edx,%edx
+ 4e4:	89 cf                	mov    %ecx,%edi
+ 4e6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 4e9:	0f b6 92 08 09 00 00 	movzbl 0x908(%edx),%edx
+ 4f0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 4f3:	89 d8                	mov    %ebx,%eax
+ 4f5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 4e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 4f8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 4eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 4fb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 4ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 4f1:	76 dd                	jbe    4d0 <printint+0x30>
+ 4fe:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 501:	76 dd                	jbe    4e0 <printint+0x30>
   if(neg)
- 4f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 4f6:	85 c9                	test   %ecx,%ecx
- 4f8:	74 0c                	je     506 <printint+0x66>
+ 503:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 506:	85 c9                	test   %ecx,%ecx
+ 508:	74 0c                	je     516 <printint+0x66>
     buf[i++] = '-';
- 4fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 50a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 4ff:	89 d8                	mov    %ebx,%eax
+ 50f:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 501:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 511:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 506:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 509:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 50d:	eb 07                	jmp    516 <printint+0x76>
- 50f:	90                   	nop
- 510:	0f b6 13             	movzbl (%ebx),%edx
- 513:	83 eb 01             	sub    $0x1,%ebx
+ 516:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 519:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 51d:	eb 07                	jmp    526 <printint+0x76>
+ 51f:	90                   	nop
+ 520:	0f b6 13             	movzbl (%ebx),%edx
+ 523:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 516:	83 ec 04             	sub    $0x4,%esp
- 519:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 51c:	6a 01                	push   $0x1
- 51e:	56                   	push   %esi
- 51f:	57                   	push   %edi
- 520:	e8 ee fe ff ff       	call   413 <write>
+ 526:	83 ec 04             	sub    $0x4,%esp
+ 529:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 52c:	6a 01                	push   $0x1
+ 52e:	56                   	push   %esi
+ 52f:	57                   	push   %edi
+ 530:	e8 de fe ff ff       	call   413 <write>
   while(--i >= 0)
- 525:	83 c4 10             	add    $0x10,%esp
- 528:	39 de                	cmp    %ebx,%esi
- 52a:	75 e4                	jne    510 <printint+0x70>
+ 535:	83 c4 10             	add    $0x10,%esp
+ 538:	39 de                	cmp    %ebx,%esi
+ 53a:	75 e4                	jne    520 <printint+0x70>
     putc(fd, buf[i]);
 }
- 52c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 52f:	5b                   	pop    %ebx
- 530:	5e                   	pop    %esi
- 531:	5f                   	pop    %edi
- 532:	5d                   	pop    %ebp
- 533:	c3                   	ret    
- 534:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 53c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 53f:	5b                   	pop    %ebx
+ 540:	5e                   	pop    %esi
+ 541:	5f                   	pop    %edi
+ 542:	5d                   	pop    %ebp
+ 543:	c3                   	ret    
+ 544:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 538:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 53f:	eb 87                	jmp    4c8 <printint+0x28>
- 541:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 548:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 54f:	90                   	nop
+ 548:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 54f:	eb 87                	jmp    4d8 <printint+0x28>
+ 551:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 558:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 55f:	90                   	nop
 
-00000550 <printf>:
+00000560 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 550:	f3 0f 1e fb          	endbr32 
- 554:	55                   	push   %ebp
- 555:	89 e5                	mov    %esp,%ebp
- 557:	57                   	push   %edi
- 558:	56                   	push   %esi
- 559:	53                   	push   %ebx
- 55a:	83 ec 2c             	sub    $0x2c,%esp
+ 560:	f3 0f 1e fb          	endbr32 
+ 564:	55                   	push   %ebp
+ 565:	89 e5                	mov    %esp,%ebp
+ 567:	57                   	push   %edi
+ 568:	56                   	push   %esi
+ 569:	53                   	push   %ebx
+ 56a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 55d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 560:	0f b6 1e             	movzbl (%esi),%ebx
- 563:	84 db                	test   %bl,%bl
- 565:	0f 84 b4 00 00 00    	je     61f <printf+0xcf>
+ 56d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 570:	0f b6 1e             	movzbl (%esi),%ebx
+ 573:	84 db                	test   %bl,%bl
+ 575:	0f 84 b4 00 00 00    	je     62f <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 56b:	8d 45 10             	lea    0x10(%ebp),%eax
- 56e:	83 c6 01             	add    $0x1,%esi
+ 57b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 57e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 571:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 581:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 574:	31 d2                	xor    %edx,%edx
+ 584:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 576:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 579:	eb 33                	jmp    5ae <printf+0x5e>
- 57b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 57f:	90                   	nop
- 580:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 586:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 589:	eb 33                	jmp    5be <printf+0x5e>
+ 58b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 58f:	90                   	nop
+ 590:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 583:	ba 25 00 00 00       	mov    $0x25,%edx
+ 593:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 588:	83 f8 25             	cmp    $0x25,%eax
- 58b:	74 17                	je     5a4 <printf+0x54>
+ 598:	83 f8 25             	cmp    $0x25,%eax
+ 59b:	74 17                	je     5b4 <printf+0x54>
   write(fd, &c, 1);
- 58d:	83 ec 04             	sub    $0x4,%esp
- 590:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 593:	6a 01                	push   $0x1
- 595:	57                   	push   %edi
- 596:	ff 75 08             	pushl  0x8(%ebp)
- 599:	e8 75 fe ff ff       	call   413 <write>
- 59e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 59d:	83 ec 04             	sub    $0x4,%esp
+ 5a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 5a3:	6a 01                	push   $0x1
+ 5a5:	57                   	push   %edi
+ 5a6:	ff 75 08             	pushl  0x8(%ebp)
+ 5a9:	e8 65 fe ff ff       	call   413 <write>
+ 5ae:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 5a1:	83 c4 10             	add    $0x10,%esp
+ 5b1:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 5a4:	0f b6 1e             	movzbl (%esi),%ebx
- 5a7:	83 c6 01             	add    $0x1,%esi
- 5aa:	84 db                	test   %bl,%bl
- 5ac:	74 71                	je     61f <printf+0xcf>
+ 5b4:	0f b6 1e             	movzbl (%esi),%ebx
+ 5b7:	83 c6 01             	add    $0x1,%esi
+ 5ba:	84 db                	test   %bl,%bl
+ 5bc:	74 71                	je     62f <printf+0xcf>
     c = fmt[i] & 0xff;
- 5ae:	0f be cb             	movsbl %bl,%ecx
- 5b1:	0f b6 c3             	movzbl %bl,%eax
+ 5be:	0f be cb             	movsbl %bl,%ecx
+ 5c1:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 5b4:	85 d2                	test   %edx,%edx
- 5b6:	74 c8                	je     580 <printf+0x30>
+ 5c4:	85 d2                	test   %edx,%edx
+ 5c6:	74 c8                	je     590 <printf+0x30>
       }
     } else if(state == '%'){
- 5b8:	83 fa 25             	cmp    $0x25,%edx
- 5bb:	75 e7                	jne    5a4 <printf+0x54>
+ 5c8:	83 fa 25             	cmp    $0x25,%edx
+ 5cb:	75 e7                	jne    5b4 <printf+0x54>
       if(c == 'd'){
- 5bd:	83 f8 64             	cmp    $0x64,%eax
- 5c0:	0f 84 9a 00 00 00    	je     660 <printf+0x110>
+ 5cd:	83 f8 64             	cmp    $0x64,%eax
+ 5d0:	0f 84 9a 00 00 00    	je     670 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 5c6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 5cc:	83 f9 70             	cmp    $0x70,%ecx
- 5cf:	74 5f                	je     630 <printf+0xe0>
+ 5d6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 5dc:	83 f9 70             	cmp    $0x70,%ecx
+ 5df:	74 5f                	je     640 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 5d1:	83 f8 73             	cmp    $0x73,%eax
- 5d4:	0f 84 d6 00 00 00    	je     6b0 <printf+0x160>
+ 5e1:	83 f8 73             	cmp    $0x73,%eax
+ 5e4:	0f 84 d6 00 00 00    	je     6c0 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 5da:	83 f8 63             	cmp    $0x63,%eax
- 5dd:	0f 84 8d 00 00 00    	je     670 <printf+0x120>
+ 5ea:	83 f8 63             	cmp    $0x63,%eax
+ 5ed:	0f 84 8d 00 00 00    	je     680 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 5e3:	83 f8 25             	cmp    $0x25,%eax
- 5e6:	0f 84 b4 00 00 00    	je     6a0 <printf+0x150>
+ 5f3:	83 f8 25             	cmp    $0x25,%eax
+ 5f6:	0f 84 b4 00 00 00    	je     6b0 <printf+0x150>
   write(fd, &c, 1);
- 5ec:	83 ec 04             	sub    $0x4,%esp
- 5ef:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 5f3:	6a 01                	push   $0x1
- 5f5:	57                   	push   %edi
- 5f6:	ff 75 08             	pushl  0x8(%ebp)
- 5f9:	e8 15 fe ff ff       	call   413 <write>
+ 5fc:	83 ec 04             	sub    $0x4,%esp
+ 5ff:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 603:	6a 01                	push   $0x1
+ 605:	57                   	push   %edi
+ 606:	ff 75 08             	pushl  0x8(%ebp)
+ 609:	e8 05 fe ff ff       	call   413 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 5fe:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 60e:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 601:	83 c4 0c             	add    $0xc,%esp
- 604:	6a 01                	push   $0x1
- 606:	83 c6 01             	add    $0x1,%esi
- 609:	57                   	push   %edi
- 60a:	ff 75 08             	pushl  0x8(%ebp)
- 60d:	e8 01 fe ff ff       	call   413 <write>
+ 611:	83 c4 0c             	add    $0xc,%esp
+ 614:	6a 01                	push   $0x1
+ 616:	83 c6 01             	add    $0x1,%esi
+ 619:	57                   	push   %edi
+ 61a:	ff 75 08             	pushl  0x8(%ebp)
+ 61d:	e8 f1 fd ff ff       	call   413 <write>
   for(i = 0; fmt[i]; i++){
- 612:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 622:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 616:	83 c4 10             	add    $0x10,%esp
+ 626:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 619:	31 d2                	xor    %edx,%edx
+ 629:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 61b:	84 db                	test   %bl,%bl
- 61d:	75 8f                	jne    5ae <printf+0x5e>
+ 62b:	84 db                	test   %bl,%bl
+ 62d:	75 8f                	jne    5be <printf+0x5e>
     }
   }
 }
- 61f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 622:	5b                   	pop    %ebx
- 623:	5e                   	pop    %esi
- 624:	5f                   	pop    %edi
- 625:	5d                   	pop    %ebp
- 626:	c3                   	ret    
- 627:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 62e:	66 90                	xchg   %ax,%ax
+ 62f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 632:	5b                   	pop    %ebx
+ 633:	5e                   	pop    %esi
+ 634:	5f                   	pop    %edi
+ 635:	5d                   	pop    %ebp
+ 636:	c3                   	ret    
+ 637:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 63e:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 630:	83 ec 0c             	sub    $0xc,%esp
- 633:	b9 10 00 00 00       	mov    $0x10,%ecx
- 638:	6a 00                	push   $0x0
- 63a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 63d:	8b 45 08             	mov    0x8(%ebp),%eax
- 640:	8b 13                	mov    (%ebx),%edx
- 642:	e8 59 fe ff ff       	call   4a0 <printint>
+ 640:	83 ec 0c             	sub    $0xc,%esp
+ 643:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 648:	6a 00                	push   $0x0
+ 64a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 64d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 650:	8b 13                	mov    (%ebx),%edx
+ 652:	e8 59 fe ff ff       	call   4b0 <printint>
         ap++;
- 647:	89 d8                	mov    %ebx,%eax
- 649:	83 c4 10             	add    $0x10,%esp
+ 657:	89 d8                	mov    %ebx,%eax
+ 659:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 64c:	31 d2                	xor    %edx,%edx
+ 65c:	31 d2                	xor    %edx,%edx
         ap++;
- 64e:	83 c0 04             	add    $0x4,%eax
- 651:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 654:	e9 4b ff ff ff       	jmp    5a4 <printf+0x54>
- 659:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 65e:	83 c0 04             	add    $0x4,%eax
+ 661:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 664:	e9 4b ff ff ff       	jmp    5b4 <printf+0x54>
+ 669:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 660:	83 ec 0c             	sub    $0xc,%esp
- 663:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 668:	6a 01                	push   $0x1
- 66a:	eb ce                	jmp    63a <printf+0xea>
- 66c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 670:	83 ec 0c             	sub    $0xc,%esp
+ 673:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 678:	6a 01                	push   $0x1
+ 67a:	eb ce                	jmp    64a <printf+0xea>
+ 67c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 670:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 680:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 673:	83 ec 04             	sub    $0x4,%esp
+ 683:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 676:	8b 03                	mov    (%ebx),%eax
+ 686:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 678:	6a 01                	push   $0x1
+ 688:	6a 01                	push   $0x1
         ap++;
- 67a:	83 c3 04             	add    $0x4,%ebx
+ 68a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 67d:	57                   	push   %edi
- 67e:	ff 75 08             	pushl  0x8(%ebp)
+ 68d:	57                   	push   %edi
+ 68e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 681:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 691:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 684:	e8 8a fd ff ff       	call   413 <write>
+ 694:	e8 7a fd ff ff       	call   413 <write>
         ap++;
- 689:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 68c:	83 c4 10             	add    $0x10,%esp
+ 699:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 69c:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 68f:	31 d2                	xor    %edx,%edx
- 691:	e9 0e ff ff ff       	jmp    5a4 <printf+0x54>
- 696:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 69d:	8d 76 00             	lea    0x0(%esi),%esi
+ 69f:	31 d2                	xor    %edx,%edx
+ 6a1:	e9 0e ff ff ff       	jmp    5b4 <printf+0x54>
+ 6a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6ad:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 6a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 6b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 6a3:	83 ec 04             	sub    $0x4,%esp
- 6a6:	e9 59 ff ff ff       	jmp    604 <printf+0xb4>
- 6ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 6af:	90                   	nop
+ 6b3:	83 ec 04             	sub    $0x4,%esp
+ 6b6:	e9 59 ff ff ff       	jmp    614 <printf+0xb4>
+ 6bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6bf:	90                   	nop
         s = (char*)*ap;
- 6b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 6b3:	8b 18                	mov    (%eax),%ebx
+ 6c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 6c3:	8b 18                	mov    (%eax),%ebx
         ap++;
- 6b5:	83 c0 04             	add    $0x4,%eax
- 6b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 6c5:	83 c0 04             	add    $0x4,%eax
+ 6c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 6bb:	85 db                	test   %ebx,%ebx
- 6bd:	74 17                	je     6d6 <printf+0x186>
+ 6cb:	85 db                	test   %ebx,%ebx
+ 6cd:	74 17                	je     6e6 <printf+0x186>
         while(*s != 0){
- 6bf:	0f b6 03             	movzbl (%ebx),%eax
+ 6cf:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 6c2:	31 d2                	xor    %edx,%edx
+ 6d2:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 6c4:	84 c0                	test   %al,%al
- 6c6:	0f 84 d8 fe ff ff    	je     5a4 <printf+0x54>
- 6cc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 6cf:	89 de                	mov    %ebx,%esi
- 6d1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 6d4:	eb 1a                	jmp    6f0 <printf+0x1a0>
+ 6d4:	84 c0                	test   %al,%al
+ 6d6:	0f 84 d8 fe ff ff    	je     5b4 <printf+0x54>
+ 6dc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 6df:	89 de                	mov    %ebx,%esi
+ 6e1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6e4:	eb 1a                	jmp    700 <printf+0x1a0>
           s = "(null)";
- 6d6:	bb ef 08 00 00       	mov    $0x8ef,%ebx
+ 6e6:	bb ff 08 00 00       	mov    $0x8ff,%ebx
         while(*s != 0){
- 6db:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 6de:	b8 28 00 00 00       	mov    $0x28,%eax
- 6e3:	89 de                	mov    %ebx,%esi
- 6e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 6e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 6ef:	90                   	nop
+ 6eb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 6ee:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6f3:	89 de                	mov    %ebx,%esi
+ 6f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6ff:	90                   	nop
   write(fd, &c, 1);
- 6f0:	83 ec 04             	sub    $0x4,%esp
+ 700:	83 ec 04             	sub    $0x4,%esp
           s++;
- 6f3:	83 c6 01             	add    $0x1,%esi
- 6f6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 703:	83 c6 01             	add    $0x1,%esi
+ 706:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 6f9:	6a 01                	push   $0x1
- 6fb:	57                   	push   %edi
- 6fc:	53                   	push   %ebx
- 6fd:	e8 11 fd ff ff       	call   413 <write>
+ 709:	6a 01                	push   $0x1
+ 70b:	57                   	push   %edi
+ 70c:	53                   	push   %ebx
+ 70d:	e8 01 fd ff ff       	call   413 <write>
         while(*s != 0){
- 702:	0f b6 06             	movzbl (%esi),%eax
- 705:	83 c4 10             	add    $0x10,%esp
- 708:	84 c0                	test   %al,%al
- 70a:	75 e4                	jne    6f0 <printf+0x1a0>
- 70c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 712:	0f b6 06             	movzbl (%esi),%eax
+ 715:	83 c4 10             	add    $0x10,%esp
+ 718:	84 c0                	test   %al,%al
+ 71a:	75 e4                	jne    700 <printf+0x1a0>
+ 71c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 70f:	31 d2                	xor    %edx,%edx
- 711:	e9 8e fe ff ff       	jmp    5a4 <printf+0x54>
- 716:	66 90                	xchg   %ax,%ax
- 718:	66 90                	xchg   %ax,%ax
- 71a:	66 90                	xchg   %ax,%ax
- 71c:	66 90                	xchg   %ax,%ax
- 71e:	66 90                	xchg   %ax,%ax
+ 71f:	31 d2                	xor    %edx,%edx
+ 721:	e9 8e fe ff ff       	jmp    5b4 <printf+0x54>
+ 726:	66 90                	xchg   %ax,%ax
+ 728:	66 90                	xchg   %ax,%ax
+ 72a:	66 90                	xchg   %ax,%ax
+ 72c:	66 90                	xchg   %ax,%ax
+ 72e:	66 90                	xchg   %ax,%ax
 
-00000720 <free>:
+00000730 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 720:	f3 0f 1e fb          	endbr32 
- 724:	55                   	push   %ebp
+ 730:	f3 0f 1e fb          	endbr32 
+ 734:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 725:	a1 e0 0b 00 00       	mov    0xbe0,%eax
+ 735:	a1 00 0c 00 00       	mov    0xc00,%eax
 {
- 72a:	89 e5                	mov    %esp,%ebp
- 72c:	57                   	push   %edi
- 72d:	56                   	push   %esi
- 72e:	53                   	push   %ebx
- 72f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 732:	8b 10                	mov    (%eax),%edx
+ 73a:	89 e5                	mov    %esp,%ebp
+ 73c:	57                   	push   %edi
+ 73d:	56                   	push   %esi
+ 73e:	53                   	push   %ebx
+ 73f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 742:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 734:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 744:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 737:	39 c8                	cmp    %ecx,%eax
- 739:	73 15                	jae    750 <free+0x30>
- 73b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 73f:	90                   	nop
- 740:	39 d1                	cmp    %edx,%ecx
- 742:	72 14                	jb     758 <free+0x38>
+ 747:	39 c8                	cmp    %ecx,%eax
+ 749:	73 15                	jae    760 <free+0x30>
+ 74b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 74f:	90                   	nop
+ 750:	39 d1                	cmp    %edx,%ecx
+ 752:	72 14                	jb     768 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 744:	39 d0                	cmp    %edx,%eax
- 746:	73 10                	jae    758 <free+0x38>
+ 754:	39 d0                	cmp    %edx,%eax
+ 756:	73 10                	jae    768 <free+0x38>
 {
- 748:	89 d0                	mov    %edx,%eax
+ 758:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 74a:	8b 10                	mov    (%eax),%edx
- 74c:	39 c8                	cmp    %ecx,%eax
- 74e:	72 f0                	jb     740 <free+0x20>
+ 75a:	8b 10                	mov    (%eax),%edx
+ 75c:	39 c8                	cmp    %ecx,%eax
+ 75e:	72 f0                	jb     750 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 750:	39 d0                	cmp    %edx,%eax
- 752:	72 f4                	jb     748 <free+0x28>
- 754:	39 d1                	cmp    %edx,%ecx
- 756:	73 f0                	jae    748 <free+0x28>
+ 760:	39 d0                	cmp    %edx,%eax
+ 762:	72 f4                	jb     758 <free+0x28>
+ 764:	39 d1                	cmp    %edx,%ecx
+ 766:	73 f0                	jae    758 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 758:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 75b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 75e:	39 fa                	cmp    %edi,%edx
- 760:	74 1e                	je     780 <free+0x60>
+ 768:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 76b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 76e:	39 fa                	cmp    %edi,%edx
+ 770:	74 1e                	je     790 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 762:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 772:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 765:	8b 50 04             	mov    0x4(%eax),%edx
- 768:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 76b:	39 f1                	cmp    %esi,%ecx
- 76d:	74 28                	je     797 <free+0x77>
+ 775:	8b 50 04             	mov    0x4(%eax),%edx
+ 778:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 77b:	39 f1                	cmp    %esi,%ecx
+ 77d:	74 28                	je     7a7 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 76f:	89 08                	mov    %ecx,(%eax)
+ 77f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 771:	5b                   	pop    %ebx
+ 781:	5b                   	pop    %ebx
   freep = p;
- 772:	a3 e0 0b 00 00       	mov    %eax,0xbe0
+ 782:	a3 00 0c 00 00       	mov    %eax,0xc00
 }
- 777:	5e                   	pop    %esi
- 778:	5f                   	pop    %edi
- 779:	5d                   	pop    %ebp
- 77a:	c3                   	ret    
- 77b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 77f:	90                   	nop
+ 787:	5e                   	pop    %esi
+ 788:	5f                   	pop    %edi
+ 789:	5d                   	pop    %ebp
+ 78a:	c3                   	ret    
+ 78b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 78f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 780:	03 72 04             	add    0x4(%edx),%esi
- 783:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 790:	03 72 04             	add    0x4(%edx),%esi
+ 793:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 786:	8b 10                	mov    (%eax),%edx
- 788:	8b 12                	mov    (%edx),%edx
- 78a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 796:	8b 10                	mov    (%eax),%edx
+ 798:	8b 12                	mov    (%edx),%edx
+ 79a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 78d:	8b 50 04             	mov    0x4(%eax),%edx
- 790:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 793:	39 f1                	cmp    %esi,%ecx
- 795:	75 d8                	jne    76f <free+0x4f>
+ 79d:	8b 50 04             	mov    0x4(%eax),%edx
+ 7a0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 7a3:	39 f1                	cmp    %esi,%ecx
+ 7a5:	75 d8                	jne    77f <free+0x4f>
     p->s.size += bp->s.size;
- 797:	03 53 fc             	add    -0x4(%ebx),%edx
+ 7a7:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 79a:	a3 e0 0b 00 00       	mov    %eax,0xbe0
+ 7aa:	a3 00 0c 00 00       	mov    %eax,0xc00
     p->s.size += bp->s.size;
- 79f:	89 50 04             	mov    %edx,0x4(%eax)
+ 7af:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 7a2:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 7a5:	89 10                	mov    %edx,(%eax)
+ 7b2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 7b5:	89 10                	mov    %edx,(%eax)
 }
- 7a7:	5b                   	pop    %ebx
- 7a8:	5e                   	pop    %esi
- 7a9:	5f                   	pop    %edi
- 7aa:	5d                   	pop    %ebp
- 7ab:	c3                   	ret    
- 7ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7b7:	5b                   	pop    %ebx
+ 7b8:	5e                   	pop    %esi
+ 7b9:	5f                   	pop    %edi
+ 7ba:	5d                   	pop    %ebp
+ 7bb:	c3                   	ret    
+ 7bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-000007b0 <malloc>:
+000007c0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 7b0:	f3 0f 1e fb          	endbr32 
- 7b4:	55                   	push   %ebp
- 7b5:	89 e5                	mov    %esp,%ebp
- 7b7:	57                   	push   %edi
- 7b8:	56                   	push   %esi
- 7b9:	53                   	push   %ebx
- 7ba:	83 ec 1c             	sub    $0x1c,%esp
+ 7c0:	f3 0f 1e fb          	endbr32 
+ 7c4:	55                   	push   %ebp
+ 7c5:	89 e5                	mov    %esp,%ebp
+ 7c7:	57                   	push   %edi
+ 7c8:	56                   	push   %esi
+ 7c9:	53                   	push   %ebx
+ 7ca:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 7bd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 7cd:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 7c0:	8b 3d e0 0b 00 00    	mov    0xbe0,%edi
+ 7d0:	8b 3d 00 0c 00 00    	mov    0xc00,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 7c6:	8d 70 07             	lea    0x7(%eax),%esi
- 7c9:	c1 ee 03             	shr    $0x3,%esi
- 7cc:	83 c6 01             	add    $0x1,%esi
+ 7d6:	8d 70 07             	lea    0x7(%eax),%esi
+ 7d9:	c1 ee 03             	shr    $0x3,%esi
+ 7dc:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 7cf:	85 ff                	test   %edi,%edi
- 7d1:	0f 84 a9 00 00 00    	je     880 <malloc+0xd0>
+ 7df:	85 ff                	test   %edi,%edi
+ 7e1:	0f 84 a9 00 00 00    	je     890 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7d7:	8b 07                	mov    (%edi),%eax
+ 7e7:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 7d9:	8b 48 04             	mov    0x4(%eax),%ecx
- 7dc:	39 f1                	cmp    %esi,%ecx
- 7de:	73 6d                	jae    84d <malloc+0x9d>
- 7e0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 7e6:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 7eb:	0f 43 de             	cmovae %esi,%ebx
+ 7e9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7ec:	39 f1                	cmp    %esi,%ecx
+ 7ee:	73 6d                	jae    85d <malloc+0x9d>
+ 7f0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 7f6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 7fb:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 7ee:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 7f5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 7f8:	eb 17                	jmp    811 <malloc+0x61>
- 7fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7fe:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 805:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 808:	eb 17                	jmp    821 <malloc+0x61>
+ 80a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 800:	8b 10                	mov    (%eax),%edx
+ 810:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 802:	8b 4a 04             	mov    0x4(%edx),%ecx
- 805:	39 f1                	cmp    %esi,%ecx
- 807:	73 4f                	jae    858 <malloc+0xa8>
- 809:	8b 3d e0 0b 00 00    	mov    0xbe0,%edi
- 80f:	89 d0                	mov    %edx,%eax
+ 812:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 815:	39 f1                	cmp    %esi,%ecx
+ 817:	73 4f                	jae    868 <malloc+0xa8>
+ 819:	8b 3d 00 0c 00 00    	mov    0xc00,%edi
+ 81f:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 811:	39 c7                	cmp    %eax,%edi
- 813:	75 eb                	jne    800 <malloc+0x50>
+ 821:	39 c7                	cmp    %eax,%edi
+ 823:	75 eb                	jne    810 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 815:	83 ec 0c             	sub    $0xc,%esp
- 818:	ff 75 e4             	pushl  -0x1c(%ebp)
- 81b:	e8 5b fc ff ff       	call   47b <sbrk>
+ 825:	83 ec 0c             	sub    $0xc,%esp
+ 828:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 82b:	e8 4b fc ff ff       	call   47b <sbrk>
   if(p == (char*)-1)
- 820:	83 c4 10             	add    $0x10,%esp
- 823:	83 f8 ff             	cmp    $0xffffffff,%eax
- 826:	74 1b                	je     843 <malloc+0x93>
+ 830:	83 c4 10             	add    $0x10,%esp
+ 833:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 836:	74 1b                	je     853 <malloc+0x93>
   hp->s.size = nu;
- 828:	89 58 04             	mov    %ebx,0x4(%eax)
+ 838:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 82b:	83 ec 0c             	sub    $0xc,%esp
- 82e:	83 c0 08             	add    $0x8,%eax
- 831:	50                   	push   %eax
- 832:	e8 e9 fe ff ff       	call   720 <free>
+ 83b:	83 ec 0c             	sub    $0xc,%esp
+ 83e:	83 c0 08             	add    $0x8,%eax
+ 841:	50                   	push   %eax
+ 842:	e8 e9 fe ff ff       	call   730 <free>
   return freep;
- 837:	a1 e0 0b 00 00       	mov    0xbe0,%eax
+ 847:	a1 00 0c 00 00       	mov    0xc00,%eax
       if((p = morecore(nunits)) == 0)
- 83c:	83 c4 10             	add    $0x10,%esp
- 83f:	85 c0                	test   %eax,%eax
- 841:	75 bd                	jne    800 <malloc+0x50>
+ 84c:	83 c4 10             	add    $0x10,%esp
+ 84f:	85 c0                	test   %eax,%eax
+ 851:	75 bd                	jne    810 <malloc+0x50>
         return 0;
   }
 }
- 843:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 853:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 846:	31 c0                	xor    %eax,%eax
+ 856:	31 c0                	xor    %eax,%eax
 }
- 848:	5b                   	pop    %ebx
- 849:	5e                   	pop    %esi
- 84a:	5f                   	pop    %edi
- 84b:	5d                   	pop    %ebp
- 84c:	c3                   	ret    
+ 858:	5b                   	pop    %ebx
+ 859:	5e                   	pop    %esi
+ 85a:	5f                   	pop    %edi
+ 85b:	5d                   	pop    %ebp
+ 85c:	c3                   	ret    
     if(p->s.size >= nunits){
- 84d:	89 c2                	mov    %eax,%edx
- 84f:	89 f8                	mov    %edi,%eax
- 851:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 85d:	89 c2                	mov    %eax,%edx
+ 85f:	89 f8                	mov    %edi,%eax
+ 861:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 858:	39 ce                	cmp    %ecx,%esi
- 85a:	74 54                	je     8b0 <malloc+0x100>
+ 868:	39 ce                	cmp    %ecx,%esi
+ 86a:	74 54                	je     8c0 <malloc+0x100>
         p->s.size -= nunits;
- 85c:	29 f1                	sub    %esi,%ecx
- 85e:	89 4a 04             	mov    %ecx,0x4(%edx)
+ 86c:	29 f1                	sub    %esi,%ecx
+ 86e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- 861:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ 871:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- 864:	89 72 04             	mov    %esi,0x4(%edx)
+ 874:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 867:	a3 e0 0b 00 00       	mov    %eax,0xbe0
+ 877:	a3 00 0c 00 00       	mov    %eax,0xc00
 }
- 86c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 87c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 86f:	8d 42 08             	lea    0x8(%edx),%eax
+ 87f:	8d 42 08             	lea    0x8(%edx),%eax
 }
- 872:	5b                   	pop    %ebx
- 873:	5e                   	pop    %esi
- 874:	5f                   	pop    %edi
- 875:	5d                   	pop    %ebp
- 876:	c3                   	ret    
- 877:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 87e:	66 90                	xchg   %ax,%ax
+ 882:	5b                   	pop    %ebx
+ 883:	5e                   	pop    %esi
+ 884:	5f                   	pop    %edi
+ 885:	5d                   	pop    %ebp
+ 886:	c3                   	ret    
+ 887:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 88e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 880:	c7 05 e0 0b 00 00 e4 	movl   $0xbe4,0xbe0
- 887:	0b 00 00 
+ 890:	c7 05 00 0c 00 00 04 	movl   $0xc04,0xc00
+ 897:	0c 00 00 
     base.s.size = 0;
- 88a:	bf e4 0b 00 00       	mov    $0xbe4,%edi
+ 89a:	bf 04 0c 00 00       	mov    $0xc04,%edi
     base.s.ptr = freep = prevp = &base;
- 88f:	c7 05 e4 0b 00 00 e4 	movl   $0xbe4,0xbe4
- 896:	0b 00 00 
+ 89f:	c7 05 04 0c 00 00 04 	movl   $0xc04,0xc04
+ 8a6:	0c 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 899:	89 f8                	mov    %edi,%eax
+ 8a9:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 89b:	c7 05 e8 0b 00 00 00 	movl   $0x0,0xbe8
- 8a2:	00 00 00 
+ 8ab:	c7 05 08 0c 00 00 00 	movl   $0x0,0xc08
+ 8b2:	00 00 00 
     if(p->s.size >= nunits){
- 8a5:	e9 36 ff ff ff       	jmp    7e0 <malloc+0x30>
- 8aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 8b5:	e9 36 ff ff ff       	jmp    7f0 <malloc+0x30>
+ 8ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 8b0:	8b 0a                	mov    (%edx),%ecx
- 8b2:	89 08                	mov    %ecx,(%eax)
- 8b4:	eb b1                	jmp    867 <malloc+0xb7>
+ 8c0:	8b 0a                	mov    (%edx),%ecx
+ 8c2:	89 08                	mov    %ecx,(%eax)
+ 8c4:	eb b1                	jmp    877 <malloc+0xb7>
Binary files xv6-public-original/wc.o and xv6-public/wc.o differ
diff -ruN xv6-public-original/wc.sym xv6-public/wc.sym
--- xv6-public-original/wc.sym	2022-08-13 16:28:55.551948000 +0530
+++ xv6-public/wc.sym	2022-09-05 20:56:51.174960000 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-000008b8 .rodata
-0000090c .eh_frame
-00000be0 .bss
+000008c8 .rodata
+0000091c .eh_frame
+00000c00 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,18 +13,19 @@
 00000000 wc.c
 00000000 ulib.c
 00000000 printf.c
-000004a0 printint
-000008f8 digits.1085
+000004b0 printint
+00000908 digits.1094
 00000000 umalloc.c
-00000be0 freep
-00000be4 base
+00000c00 freep
+00000c04 base
 00000190 strcpy
-00000550 printf
+00000560 printf
+000004a3 thread_exit
 000003c0 memmove
 0000043b mknod
 000002b0 gets
 00000473 getpid
-000007b0 malloc
+000007c0 malloc
 00000483 sleep
 00000403 pipe
 00000413 write
@@ -39,21 +40,23 @@
 000003eb fork
 0000047b sbrk
 0000048b uptime
-00000be0 __bss_start
+00000bf0 __bss_start
 00000250 memset
 00000000 main
 000001c0 strcmp
 0000046b dup
-00000c00 buf
+00000c20 buf
 00000330 stat
-00000be0 _edata
-00000e00 _end
+00000bf0 _edata
+00000e20 _end
 00000453 link
 000003f3 exit
 00000380 atoi
 00000210 strlen
 00000433 open
 00000270 strchr
+00000493 thread_create
 0000045b mkdir
 0000041b close
-00000720 free
+0000049b thread_join
+00000730 free
Binary files xv6-public-original/xv6.img and xv6-public/xv6.img differ
Binary files xv6-public-original/_zombie and xv6-public/_zombie differ
diff -ruN xv6-public-original/zombie.asm xv6-public/zombie.asm
--- xv6-public-original/zombie.asm	2022-08-13 16:28:55.603931000 +0530
+++ xv6-public/zombie.asm	2022-09-05 20:56:51.250960000 +0530
@@ -557,609 +557,623 @@
  32b:	b8 0e 00 00 00       	mov    $0xe,%eax
  330:	cd 40                	int    $0x40
  332:	c3                   	ret    
- 333:	66 90                	xchg   %ax,%ax
- 335:	66 90                	xchg   %ax,%ax
- 337:	66 90                	xchg   %ax,%ax
- 339:	66 90                	xchg   %ax,%ax
- 33b:	66 90                	xchg   %ax,%ax
- 33d:	66 90                	xchg   %ax,%ax
- 33f:	90                   	nop
 
-00000340 <printint>:
+00000333 <thread_create>:
+SYSCALL(thread_create)
+ 333:	b8 16 00 00 00       	mov    $0x16,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <thread_join>:
+SYSCALL(thread_join)
+ 33b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <thread_exit>:
+SYSCALL(thread_exit)
+ 343:	b8 18 00 00 00       	mov    $0x18,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+ 34b:	66 90                	xchg   %ax,%ax
+ 34d:	66 90                	xchg   %ax,%ax
+ 34f:	90                   	nop
+
+00000350 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 340:	55                   	push   %ebp
- 341:	89 e5                	mov    %esp,%ebp
- 343:	57                   	push   %edi
- 344:	56                   	push   %esi
- 345:	53                   	push   %ebx
- 346:	83 ec 3c             	sub    $0x3c,%esp
- 349:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 350:	55                   	push   %ebp
+ 351:	89 e5                	mov    %esp,%ebp
+ 353:	57                   	push   %edi
+ 354:	56                   	push   %esi
+ 355:	53                   	push   %ebx
+ 356:	83 ec 3c             	sub    $0x3c,%esp
+ 359:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 34c:	89 d1                	mov    %edx,%ecx
+ 35c:	89 d1                	mov    %edx,%ecx
 {
- 34e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 35e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 351:	85 d2                	test   %edx,%edx
- 353:	0f 89 7f 00 00 00    	jns    3d8 <printint+0x98>
- 359:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 35d:	74 79                	je     3d8 <printint+0x98>
+ 361:	85 d2                	test   %edx,%edx
+ 363:	0f 89 7f 00 00 00    	jns    3e8 <printint+0x98>
+ 369:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 36d:	74 79                	je     3e8 <printint+0x98>
     neg = 1;
- 35f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 36f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 366:	f7 d9                	neg    %ecx
+ 376:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 368:	31 db                	xor    %ebx,%ebx
- 36a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 36d:	8d 76 00             	lea    0x0(%esi),%esi
+ 378:	31 db                	xor    %ebx,%ebx
+ 37a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 37d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 370:	89 c8                	mov    %ecx,%eax
- 372:	31 d2                	xor    %edx,%edx
- 374:	89 cf                	mov    %ecx,%edi
- 376:	f7 75 c4             	divl   -0x3c(%ebp)
- 379:	0f b6 92 60 07 00 00 	movzbl 0x760(%edx),%edx
- 380:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 383:	89 d8                	mov    %ebx,%eax
- 385:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 380:	89 c8                	mov    %ecx,%eax
+ 382:	31 d2                	xor    %edx,%edx
+ 384:	89 cf                	mov    %ecx,%edi
+ 386:	f7 75 c4             	divl   -0x3c(%ebp)
+ 389:	0f b6 92 70 07 00 00 	movzbl 0x770(%edx),%edx
+ 390:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 393:	89 d8                	mov    %ebx,%eax
+ 395:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 388:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 398:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 38b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 39b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 38e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 391:	76 dd                	jbe    370 <printint+0x30>
+ 39e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3a1:	76 dd                	jbe    380 <printint+0x30>
   if(neg)
- 393:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 396:	85 c9                	test   %ecx,%ecx
- 398:	74 0c                	je     3a6 <printint+0x66>
+ 3a3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3a6:	85 c9                	test   %ecx,%ecx
+ 3a8:	74 0c                	je     3b6 <printint+0x66>
     buf[i++] = '-';
- 39a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 3aa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 39f:	89 d8                	mov    %ebx,%eax
+ 3af:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 3a1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 3b1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 3a6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3a9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3ad:	eb 07                	jmp    3b6 <printint+0x76>
- 3af:	90                   	nop
- 3b0:	0f b6 13             	movzbl (%ebx),%edx
- 3b3:	83 eb 01             	sub    $0x1,%ebx
-  write(fd, &c, 1);
- 3b6:	83 ec 04             	sub    $0x4,%esp
- 3b9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 3bc:	6a 01                	push   $0x1
- 3be:	56                   	push   %esi
- 3bf:	57                   	push   %edi
- 3c0:	e8 ee fe ff ff       	call   2b3 <write>
+ 3b6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3b9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3bd:	eb 07                	jmp    3c6 <printint+0x76>
+ 3bf:	90                   	nop
+ 3c0:	0f b6 13             	movzbl (%ebx),%edx
+ 3c3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3c6:	83 ec 04             	sub    $0x4,%esp
+ 3c9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3cc:	6a 01                	push   $0x1
+ 3ce:	56                   	push   %esi
+ 3cf:	57                   	push   %edi
+ 3d0:	e8 de fe ff ff       	call   2b3 <write>
   while(--i >= 0)
- 3c5:	83 c4 10             	add    $0x10,%esp
- 3c8:	39 de                	cmp    %ebx,%esi
- 3ca:	75 e4                	jne    3b0 <printint+0x70>
+ 3d5:	83 c4 10             	add    $0x10,%esp
+ 3d8:	39 de                	cmp    %ebx,%esi
+ 3da:	75 e4                	jne    3c0 <printint+0x70>
     putc(fd, buf[i]);
 }
- 3cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 3cf:	5b                   	pop    %ebx
- 3d0:	5e                   	pop    %esi
- 3d1:	5f                   	pop    %edi
- 3d2:	5d                   	pop    %ebp
- 3d3:	c3                   	ret    
- 3d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3df:	5b                   	pop    %ebx
+ 3e0:	5e                   	pop    %esi
+ 3e1:	5f                   	pop    %edi
+ 3e2:	5d                   	pop    %ebp
+ 3e3:	c3                   	ret    
+ 3e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 3d8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 3df:	eb 87                	jmp    368 <printint+0x28>
- 3e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 3e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 3ef:	90                   	nop
+ 3e8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 3ef:	eb 87                	jmp    378 <printint+0x28>
+ 3f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ff:	90                   	nop
 
-000003f0 <printf>:
+00000400 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 3f0:	f3 0f 1e fb          	endbr32 
- 3f4:	55                   	push   %ebp
- 3f5:	89 e5                	mov    %esp,%ebp
- 3f7:	57                   	push   %edi
- 3f8:	56                   	push   %esi
- 3f9:	53                   	push   %ebx
- 3fa:	83 ec 2c             	sub    $0x2c,%esp
+ 400:	f3 0f 1e fb          	endbr32 
+ 404:	55                   	push   %ebp
+ 405:	89 e5                	mov    %esp,%ebp
+ 407:	57                   	push   %edi
+ 408:	56                   	push   %esi
+ 409:	53                   	push   %ebx
+ 40a:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 3fd:	8b 75 0c             	mov    0xc(%ebp),%esi
- 400:	0f b6 1e             	movzbl (%esi),%ebx
- 403:	84 db                	test   %bl,%bl
- 405:	0f 84 b4 00 00 00    	je     4bf <printf+0xcf>
+ 40d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 410:	0f b6 1e             	movzbl (%esi),%ebx
+ 413:	84 db                	test   %bl,%bl
+ 415:	0f 84 b4 00 00 00    	je     4cf <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
- 40b:	8d 45 10             	lea    0x10(%ebp),%eax
- 40e:	83 c6 01             	add    $0x1,%esi
+ 41b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 41e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
- 411:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 421:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 414:	31 d2                	xor    %edx,%edx
+ 424:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
- 416:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 419:	eb 33                	jmp    44e <printf+0x5e>
- 41b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 41f:	90                   	nop
- 420:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 426:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 429:	eb 33                	jmp    45e <printf+0x5e>
+ 42b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 42f:	90                   	nop
+ 430:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 423:	ba 25 00 00 00       	mov    $0x25,%edx
+ 433:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
- 428:	83 f8 25             	cmp    $0x25,%eax
- 42b:	74 17                	je     444 <printf+0x54>
+ 438:	83 f8 25             	cmp    $0x25,%eax
+ 43b:	74 17                	je     454 <printf+0x54>
   write(fd, &c, 1);
- 42d:	83 ec 04             	sub    $0x4,%esp
- 430:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 433:	6a 01                	push   $0x1
- 435:	57                   	push   %edi
- 436:	ff 75 08             	pushl  0x8(%ebp)
- 439:	e8 75 fe ff ff       	call   2b3 <write>
- 43e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 43d:	83 ec 04             	sub    $0x4,%esp
+ 440:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 443:	6a 01                	push   $0x1
+ 445:	57                   	push   %edi
+ 446:	ff 75 08             	pushl  0x8(%ebp)
+ 449:	e8 65 fe ff ff       	call   2b3 <write>
+ 44e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
- 441:	83 c4 10             	add    $0x10,%esp
+ 451:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 444:	0f b6 1e             	movzbl (%esi),%ebx
- 447:	83 c6 01             	add    $0x1,%esi
- 44a:	84 db                	test   %bl,%bl
- 44c:	74 71                	je     4bf <printf+0xcf>
+ 454:	0f b6 1e             	movzbl (%esi),%ebx
+ 457:	83 c6 01             	add    $0x1,%esi
+ 45a:	84 db                	test   %bl,%bl
+ 45c:	74 71                	je     4cf <printf+0xcf>
     c = fmt[i] & 0xff;
- 44e:	0f be cb             	movsbl %bl,%ecx
- 451:	0f b6 c3             	movzbl %bl,%eax
+ 45e:	0f be cb             	movsbl %bl,%ecx
+ 461:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
- 454:	85 d2                	test   %edx,%edx
- 456:	74 c8                	je     420 <printf+0x30>
+ 464:	85 d2                	test   %edx,%edx
+ 466:	74 c8                	je     430 <printf+0x30>
       }
     } else if(state == '%'){
- 458:	83 fa 25             	cmp    $0x25,%edx
- 45b:	75 e7                	jne    444 <printf+0x54>
+ 468:	83 fa 25             	cmp    $0x25,%edx
+ 46b:	75 e7                	jne    454 <printf+0x54>
       if(c == 'd'){
- 45d:	83 f8 64             	cmp    $0x64,%eax
- 460:	0f 84 9a 00 00 00    	je     500 <printf+0x110>
+ 46d:	83 f8 64             	cmp    $0x64,%eax
+ 470:	0f 84 9a 00 00 00    	je     510 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
- 466:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 46c:	83 f9 70             	cmp    $0x70,%ecx
- 46f:	74 5f                	je     4d0 <printf+0xe0>
+ 476:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 47c:	83 f9 70             	cmp    $0x70,%ecx
+ 47f:	74 5f                	je     4e0 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
- 471:	83 f8 73             	cmp    $0x73,%eax
- 474:	0f 84 d6 00 00 00    	je     550 <printf+0x160>
+ 481:	83 f8 73             	cmp    $0x73,%eax
+ 484:	0f 84 d6 00 00 00    	je     560 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
- 47a:	83 f8 63             	cmp    $0x63,%eax
- 47d:	0f 84 8d 00 00 00    	je     510 <printf+0x120>
+ 48a:	83 f8 63             	cmp    $0x63,%eax
+ 48d:	0f 84 8d 00 00 00    	je     520 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
- 483:	83 f8 25             	cmp    $0x25,%eax
- 486:	0f 84 b4 00 00 00    	je     540 <printf+0x150>
+ 493:	83 f8 25             	cmp    $0x25,%eax
+ 496:	0f 84 b4 00 00 00    	je     550 <printf+0x150>
   write(fd, &c, 1);
- 48c:	83 ec 04             	sub    $0x4,%esp
- 48f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 493:	6a 01                	push   $0x1
- 495:	57                   	push   %edi
- 496:	ff 75 08             	pushl  0x8(%ebp)
- 499:	e8 15 fe ff ff       	call   2b3 <write>
+ 49c:	83 ec 04             	sub    $0x4,%esp
+ 49f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4a3:	6a 01                	push   $0x1
+ 4a5:	57                   	push   %edi
+ 4a6:	ff 75 08             	pushl  0x8(%ebp)
+ 4a9:	e8 05 fe ff ff       	call   2b3 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
- 49e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4ae:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 4a1:	83 c4 0c             	add    $0xc,%esp
- 4a4:	6a 01                	push   $0x1
- 4a6:	83 c6 01             	add    $0x1,%esi
- 4a9:	57                   	push   %edi
- 4aa:	ff 75 08             	pushl  0x8(%ebp)
- 4ad:	e8 01 fe ff ff       	call   2b3 <write>
+ 4b1:	83 c4 0c             	add    $0xc,%esp
+ 4b4:	6a 01                	push   $0x1
+ 4b6:	83 c6 01             	add    $0x1,%esi
+ 4b9:	57                   	push   %edi
+ 4ba:	ff 75 08             	pushl  0x8(%ebp)
+ 4bd:	e8 f1 fd ff ff       	call   2b3 <write>
   for(i = 0; fmt[i]; i++){
- 4b2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 4c2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
- 4b6:	83 c4 10             	add    $0x10,%esp
+ 4c6:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
- 4b9:	31 d2                	xor    %edx,%edx
+ 4c9:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
- 4bb:	84 db                	test   %bl,%bl
- 4bd:	75 8f                	jne    44e <printf+0x5e>
+ 4cb:	84 db                	test   %bl,%bl
+ 4cd:	75 8f                	jne    45e <printf+0x5e>
     }
   }
 }
- 4bf:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4c2:	5b                   	pop    %ebx
- 4c3:	5e                   	pop    %esi
- 4c4:	5f                   	pop    %edi
- 4c5:	5d                   	pop    %ebp
- 4c6:	c3                   	ret    
- 4c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4ce:	66 90                	xchg   %ax,%ax
+ 4cf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4d2:	5b                   	pop    %ebx
+ 4d3:	5e                   	pop    %esi
+ 4d4:	5f                   	pop    %edi
+ 4d5:	5d                   	pop    %ebp
+ 4d6:	c3                   	ret    
+ 4d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4de:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
- 4d0:	83 ec 0c             	sub    $0xc,%esp
- 4d3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 4d8:	6a 00                	push   $0x0
- 4da:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 4dd:	8b 45 08             	mov    0x8(%ebp),%eax
- 4e0:	8b 13                	mov    (%ebx),%edx
- 4e2:	e8 59 fe ff ff       	call   340 <printint>
+ 4e0:	83 ec 0c             	sub    $0xc,%esp
+ 4e3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4e8:	6a 00                	push   $0x0
+ 4ea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 4ed:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4f0:	8b 13                	mov    (%ebx),%edx
+ 4f2:	e8 59 fe ff ff       	call   350 <printint>
         ap++;
- 4e7:	89 d8                	mov    %ebx,%eax
- 4e9:	83 c4 10             	add    $0x10,%esp
+ 4f7:	89 d8                	mov    %ebx,%eax
+ 4f9:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 4ec:	31 d2                	xor    %edx,%edx
+ 4fc:	31 d2                	xor    %edx,%edx
         ap++;
- 4ee:	83 c0 04             	add    $0x4,%eax
- 4f1:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 4f4:	e9 4b ff ff ff       	jmp    444 <printf+0x54>
- 4f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4fe:	83 c0 04             	add    $0x4,%eax
+ 501:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 504:	e9 4b ff ff ff       	jmp    454 <printf+0x54>
+ 509:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
- 500:	83 ec 0c             	sub    $0xc,%esp
- 503:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 508:	6a 01                	push   $0x1
- 50a:	eb ce                	jmp    4da <printf+0xea>
- 50c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 510:	83 ec 0c             	sub    $0xc,%esp
+ 513:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 518:	6a 01                	push   $0x1
+ 51a:	eb ce                	jmp    4ea <printf+0xea>
+ 51c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
- 510:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 520:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
- 513:	83 ec 04             	sub    $0x4,%esp
+ 523:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 516:	8b 03                	mov    (%ebx),%eax
+ 526:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
- 518:	6a 01                	push   $0x1
+ 528:	6a 01                	push   $0x1
         ap++;
- 51a:	83 c3 04             	add    $0x4,%ebx
+ 52a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
- 51d:	57                   	push   %edi
- 51e:	ff 75 08             	pushl  0x8(%ebp)
+ 52d:	57                   	push   %edi
+ 52e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
- 521:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 531:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 524:	e8 8a fd ff ff       	call   2b3 <write>
+ 534:	e8 7a fd ff ff       	call   2b3 <write>
         ap++;
- 529:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 52c:	83 c4 10             	add    $0x10,%esp
+ 539:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 53c:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 52f:	31 d2                	xor    %edx,%edx
- 531:	e9 0e ff ff ff       	jmp    444 <printf+0x54>
- 536:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 53d:	8d 76 00             	lea    0x0(%esi),%esi
+ 53f:	31 d2                	xor    %edx,%edx
+ 541:	e9 0e ff ff ff       	jmp    454 <printf+0x54>
+ 546:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54d:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
- 540:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 550:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
- 543:	83 ec 04             	sub    $0x4,%esp
- 546:	e9 59 ff ff ff       	jmp    4a4 <printf+0xb4>
- 54b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 54f:	90                   	nop
+ 553:	83 ec 04             	sub    $0x4,%esp
+ 556:	e9 59 ff ff ff       	jmp    4b4 <printf+0xb4>
+ 55b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 55f:	90                   	nop
         s = (char*)*ap;
- 550:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 553:	8b 18                	mov    (%eax),%ebx
+ 560:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 563:	8b 18                	mov    (%eax),%ebx
         ap++;
- 555:	83 c0 04             	add    $0x4,%eax
- 558:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 565:	83 c0 04             	add    $0x4,%eax
+ 568:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 55b:	85 db                	test   %ebx,%ebx
- 55d:	74 17                	je     576 <printf+0x186>
+ 56b:	85 db                	test   %ebx,%ebx
+ 56d:	74 17                	je     586 <printf+0x186>
         while(*s != 0){
- 55f:	0f b6 03             	movzbl (%ebx),%eax
+ 56f:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
- 562:	31 d2                	xor    %edx,%edx
+ 572:	31 d2                	xor    %edx,%edx
         while(*s != 0){
- 564:	84 c0                	test   %al,%al
- 566:	0f 84 d8 fe ff ff    	je     444 <printf+0x54>
- 56c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 56f:	89 de                	mov    %ebx,%esi
- 571:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 574:	eb 1a                	jmp    590 <printf+0x1a0>
+ 574:	84 c0                	test   %al,%al
+ 576:	0f 84 d8 fe ff ff    	je     454 <printf+0x54>
+ 57c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 57f:	89 de                	mov    %ebx,%esi
+ 581:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 584:	eb 1a                	jmp    5a0 <printf+0x1a0>
           s = "(null)";
- 576:	bb 58 07 00 00       	mov    $0x758,%ebx
+ 586:	bb 68 07 00 00       	mov    $0x768,%ebx
         while(*s != 0){
- 57b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 57e:	b8 28 00 00 00       	mov    $0x28,%eax
- 583:	89 de                	mov    %ebx,%esi
- 585:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 588:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 58f:	90                   	nop
+ 58b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 58e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 593:	89 de                	mov    %ebx,%esi
+ 595:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 598:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 59f:	90                   	nop
   write(fd, &c, 1);
- 590:	83 ec 04             	sub    $0x4,%esp
+ 5a0:	83 ec 04             	sub    $0x4,%esp
           s++;
- 593:	83 c6 01             	add    $0x1,%esi
- 596:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 5a3:	83 c6 01             	add    $0x1,%esi
+ 5a6:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 599:	6a 01                	push   $0x1
- 59b:	57                   	push   %edi
- 59c:	53                   	push   %ebx
- 59d:	e8 11 fd ff ff       	call   2b3 <write>
+ 5a9:	6a 01                	push   $0x1
+ 5ab:	57                   	push   %edi
+ 5ac:	53                   	push   %ebx
+ 5ad:	e8 01 fd ff ff       	call   2b3 <write>
         while(*s != 0){
- 5a2:	0f b6 06             	movzbl (%esi),%eax
- 5a5:	83 c4 10             	add    $0x10,%esp
- 5a8:	84 c0                	test   %al,%al
- 5aa:	75 e4                	jne    590 <printf+0x1a0>
- 5ac:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 5b2:	0f b6 06             	movzbl (%esi),%eax
+ 5b5:	83 c4 10             	add    $0x10,%esp
+ 5b8:	84 c0                	test   %al,%al
+ 5ba:	75 e4                	jne    5a0 <printf+0x1a0>
+ 5bc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
- 5af:	31 d2                	xor    %edx,%edx
- 5b1:	e9 8e fe ff ff       	jmp    444 <printf+0x54>
- 5b6:	66 90                	xchg   %ax,%ax
- 5b8:	66 90                	xchg   %ax,%ax
- 5ba:	66 90                	xchg   %ax,%ax
- 5bc:	66 90                	xchg   %ax,%ax
- 5be:	66 90                	xchg   %ax,%ax
+ 5bf:	31 d2                	xor    %edx,%edx
+ 5c1:	e9 8e fe ff ff       	jmp    454 <printf+0x54>
+ 5c6:	66 90                	xchg   %ax,%ax
+ 5c8:	66 90                	xchg   %ax,%ax
+ 5ca:	66 90                	xchg   %ax,%ax
+ 5cc:	66 90                	xchg   %ax,%ax
+ 5ce:	66 90                	xchg   %ax,%ax
 
-000005c0 <free>:
+000005d0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5c0:	f3 0f 1e fb          	endbr32 
- 5c4:	55                   	push   %ebp
+ 5d0:	f3 0f 1e fb          	endbr32 
+ 5d4:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5c5:	a1 08 0a 00 00       	mov    0xa08,%eax
+ 5d5:	a1 18 0a 00 00       	mov    0xa18,%eax
 {
- 5ca:	89 e5                	mov    %esp,%ebp
- 5cc:	57                   	push   %edi
- 5cd:	56                   	push   %esi
- 5ce:	53                   	push   %ebx
- 5cf:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5d2:	8b 10                	mov    (%eax),%edx
+ 5da:	89 e5                	mov    %esp,%ebp
+ 5dc:	57                   	push   %edi
+ 5dd:	56                   	push   %esi
+ 5de:	53                   	push   %ebx
+ 5df:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e2:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
- 5d4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 5e4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5d7:	39 c8                	cmp    %ecx,%eax
- 5d9:	73 15                	jae    5f0 <free+0x30>
- 5db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 5df:	90                   	nop
- 5e0:	39 d1                	cmp    %edx,%ecx
- 5e2:	72 14                	jb     5f8 <free+0x38>
+ 5e7:	39 c8                	cmp    %ecx,%eax
+ 5e9:	73 15                	jae    600 <free+0x30>
+ 5eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5ef:	90                   	nop
+ 5f0:	39 d1                	cmp    %edx,%ecx
+ 5f2:	72 14                	jb     608 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5e4:	39 d0                	cmp    %edx,%eax
- 5e6:	73 10                	jae    5f8 <free+0x38>
+ 5f4:	39 d0                	cmp    %edx,%eax
+ 5f6:	73 10                	jae    608 <free+0x38>
 {
- 5e8:	89 d0                	mov    %edx,%eax
+ 5f8:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5ea:	8b 10                	mov    (%eax),%edx
- 5ec:	39 c8                	cmp    %ecx,%eax
- 5ee:	72 f0                	jb     5e0 <free+0x20>
+ 5fa:	8b 10                	mov    (%eax),%edx
+ 5fc:	39 c8                	cmp    %ecx,%eax
+ 5fe:	72 f0                	jb     5f0 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5f0:	39 d0                	cmp    %edx,%eax
- 5f2:	72 f4                	jb     5e8 <free+0x28>
- 5f4:	39 d1                	cmp    %edx,%ecx
- 5f6:	73 f0                	jae    5e8 <free+0x28>
+ 600:	39 d0                	cmp    %edx,%eax
+ 602:	72 f4                	jb     5f8 <free+0x28>
+ 604:	39 d1                	cmp    %edx,%ecx
+ 606:	73 f0                	jae    5f8 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 5f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 5fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 5fe:	39 fa                	cmp    %edi,%edx
- 600:	74 1e                	je     620 <free+0x60>
+ 608:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 60b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 60e:	39 fa                	cmp    %edi,%edx
+ 610:	74 1e                	je     630 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
- 602:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 612:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 605:	8b 50 04             	mov    0x4(%eax),%edx
- 608:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 60b:	39 f1                	cmp    %esi,%ecx
- 60d:	74 28                	je     637 <free+0x77>
+ 615:	8b 50 04             	mov    0x4(%eax),%edx
+ 618:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 61b:	39 f1                	cmp    %esi,%ecx
+ 61d:	74 28                	je     647 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
- 60f:	89 08                	mov    %ecx,(%eax)
+ 61f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
- 611:	5b                   	pop    %ebx
+ 621:	5b                   	pop    %ebx
   freep = p;
- 612:	a3 08 0a 00 00       	mov    %eax,0xa08
+ 622:	a3 18 0a 00 00       	mov    %eax,0xa18
 }
- 617:	5e                   	pop    %esi
- 618:	5f                   	pop    %edi
- 619:	5d                   	pop    %ebp
- 61a:	c3                   	ret    
- 61b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 61f:	90                   	nop
+ 627:	5e                   	pop    %esi
+ 628:	5f                   	pop    %edi
+ 629:	5d                   	pop    %ebp
+ 62a:	c3                   	ret    
+ 62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 62f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
- 620:	03 72 04             	add    0x4(%edx),%esi
- 623:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 630:	03 72 04             	add    0x4(%edx),%esi
+ 633:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 626:	8b 10                	mov    (%eax),%edx
- 628:	8b 12                	mov    (%edx),%edx
- 62a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 636:	8b 10                	mov    (%eax),%edx
+ 638:	8b 12                	mov    (%edx),%edx
+ 63a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
- 62d:	8b 50 04             	mov    0x4(%eax),%edx
- 630:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 633:	39 f1                	cmp    %esi,%ecx
- 635:	75 d8                	jne    60f <free+0x4f>
+ 63d:	8b 50 04             	mov    0x4(%eax),%edx
+ 640:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 643:	39 f1                	cmp    %esi,%ecx
+ 645:	75 d8                	jne    61f <free+0x4f>
     p->s.size += bp->s.size;
- 637:	03 53 fc             	add    -0x4(%ebx),%edx
+ 647:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 63a:	a3 08 0a 00 00       	mov    %eax,0xa08
+ 64a:	a3 18 0a 00 00       	mov    %eax,0xa18
     p->s.size += bp->s.size;
- 63f:	89 50 04             	mov    %edx,0x4(%eax)
+ 64f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
- 642:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 645:	89 10                	mov    %edx,(%eax)
+ 652:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 655:	89 10                	mov    %edx,(%eax)
 }
- 647:	5b                   	pop    %ebx
- 648:	5e                   	pop    %esi
- 649:	5f                   	pop    %edi
- 64a:	5d                   	pop    %ebp
- 64b:	c3                   	ret    
- 64c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 657:	5b                   	pop    %ebx
+ 658:	5e                   	pop    %esi
+ 659:	5f                   	pop    %edi
+ 65a:	5d                   	pop    %ebp
+ 65b:	c3                   	ret    
+ 65c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000650 <malloc>:
+00000660 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 650:	f3 0f 1e fb          	endbr32 
- 654:	55                   	push   %ebp
- 655:	89 e5                	mov    %esp,%ebp
- 657:	57                   	push   %edi
- 658:	56                   	push   %esi
- 659:	53                   	push   %ebx
- 65a:	83 ec 1c             	sub    $0x1c,%esp
+ 660:	f3 0f 1e fb          	endbr32 
+ 664:	55                   	push   %ebp
+ 665:	89 e5                	mov    %esp,%ebp
+ 667:	57                   	push   %edi
+ 668:	56                   	push   %esi
+ 669:	53                   	push   %ebx
+ 66a:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 65d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 66d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 660:	8b 3d 08 0a 00 00    	mov    0xa08,%edi
+ 670:	8b 3d 18 0a 00 00    	mov    0xa18,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 666:	8d 70 07             	lea    0x7(%eax),%esi
- 669:	c1 ee 03             	shr    $0x3,%esi
- 66c:	83 c6 01             	add    $0x1,%esi
+ 676:	8d 70 07             	lea    0x7(%eax),%esi
+ 679:	c1 ee 03             	shr    $0x3,%esi
+ 67c:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 66f:	85 ff                	test   %edi,%edi
- 671:	0f 84 a9 00 00 00    	je     720 <malloc+0xd0>
+ 67f:	85 ff                	test   %edi,%edi
+ 681:	0f 84 a9 00 00 00    	je     730 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 677:	8b 07                	mov    (%edi),%eax
+ 687:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
- 679:	8b 48 04             	mov    0x4(%eax),%ecx
- 67c:	39 f1                	cmp    %esi,%ecx
- 67e:	73 6d                	jae    6ed <malloc+0x9d>
- 680:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 686:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 68b:	0f 43 de             	cmovae %esi,%ebx
+ 689:	8b 48 04             	mov    0x4(%eax),%ecx
+ 68c:	39 f1                	cmp    %esi,%ecx
+ 68e:	73 6d                	jae    6fd <malloc+0x9d>
+ 690:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 696:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 69b:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 68e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 695:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 698:	eb 17                	jmp    6b1 <malloc+0x61>
- 69a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 69e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6a5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6a8:	eb 17                	jmp    6c1 <malloc+0x61>
+ 6aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6a0:	8b 10                	mov    (%eax),%edx
+ 6b0:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
- 6a2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 6a5:	39 f1                	cmp    %esi,%ecx
- 6a7:	73 4f                	jae    6f8 <malloc+0xa8>
- 6a9:	8b 3d 08 0a 00 00    	mov    0xa08,%edi
- 6af:	89 d0                	mov    %edx,%eax
+ 6b2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6b5:	39 f1                	cmp    %esi,%ecx
+ 6b7:	73 4f                	jae    708 <malloc+0xa8>
+ 6b9:	8b 3d 18 0a 00 00    	mov    0xa18,%edi
+ 6bf:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6b1:	39 c7                	cmp    %eax,%edi
- 6b3:	75 eb                	jne    6a0 <malloc+0x50>
+ 6c1:	39 c7                	cmp    %eax,%edi
+ 6c3:	75 eb                	jne    6b0 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
- 6b5:	83 ec 0c             	sub    $0xc,%esp
- 6b8:	ff 75 e4             	pushl  -0x1c(%ebp)
- 6bb:	e8 5b fc ff ff       	call   31b <sbrk>
+ 6c5:	83 ec 0c             	sub    $0xc,%esp
+ 6c8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 6cb:	e8 4b fc ff ff       	call   31b <sbrk>
   if(p == (char*)-1)
- 6c0:	83 c4 10             	add    $0x10,%esp
- 6c3:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6c6:	74 1b                	je     6e3 <malloc+0x93>
+ 6d0:	83 c4 10             	add    $0x10,%esp
+ 6d3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6d6:	74 1b                	je     6f3 <malloc+0x93>
   hp->s.size = nu;
- 6c8:	89 58 04             	mov    %ebx,0x4(%eax)
+ 6d8:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 6cb:	83 ec 0c             	sub    $0xc,%esp
- 6ce:	83 c0 08             	add    $0x8,%eax
- 6d1:	50                   	push   %eax
- 6d2:	e8 e9 fe ff ff       	call   5c0 <free>
+ 6db:	83 ec 0c             	sub    $0xc,%esp
+ 6de:	83 c0 08             	add    $0x8,%eax
+ 6e1:	50                   	push   %eax
+ 6e2:	e8 e9 fe ff ff       	call   5d0 <free>
   return freep;
- 6d7:	a1 08 0a 00 00       	mov    0xa08,%eax
+ 6e7:	a1 18 0a 00 00       	mov    0xa18,%eax
       if((p = morecore(nunits)) == 0)
- 6dc:	83 c4 10             	add    $0x10,%esp
- 6df:	85 c0                	test   %eax,%eax
- 6e1:	75 bd                	jne    6a0 <malloc+0x50>
+ 6ec:	83 c4 10             	add    $0x10,%esp
+ 6ef:	85 c0                	test   %eax,%eax
+ 6f1:	75 bd                	jne    6b0 <malloc+0x50>
         return 0;
   }
 }
- 6e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 6e6:	31 c0                	xor    %eax,%eax
+ 6f6:	31 c0                	xor    %eax,%eax
 }
- 6e8:	5b                   	pop    %ebx
- 6e9:	5e                   	pop    %esi
- 6ea:	5f                   	pop    %edi
- 6eb:	5d                   	pop    %ebp
- 6ec:	c3                   	ret    
+ 6f8:	5b                   	pop    %ebx
+ 6f9:	5e                   	pop    %esi
+ 6fa:	5f                   	pop    %edi
+ 6fb:	5d                   	pop    %ebp
+ 6fc:	c3                   	ret    
     if(p->s.size >= nunits){
- 6ed:	89 c2                	mov    %eax,%edx
- 6ef:	89 f8                	mov    %edi,%eax
- 6f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6fd:	89 c2                	mov    %eax,%edx
+ 6ff:	89 f8                	mov    %edi,%eax
+ 701:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
- 6f8:	39 ce                	cmp    %ecx,%esi
- 6fa:	74 54                	je     750 <malloc+0x100>
+ 708:	39 ce                	cmp    %ecx,%esi
+ 70a:	74 54                	je     760 <malloc+0x100>
         p->s.size -= nunits;
- 6fc:	29 f1                	sub    %esi,%ecx
- 6fe:	89 4a 04             	mov    %ecx,0x4(%edx)
+ 70c:	29 f1                	sub    %esi,%ecx
+ 70e:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
- 701:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ 711:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
- 704:	89 72 04             	mov    %esi,0x4(%edx)
+ 714:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 707:	a3 08 0a 00 00       	mov    %eax,0xa08
+ 717:	a3 18 0a 00 00       	mov    %eax,0xa18
 }
- 70c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 71c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 70f:	8d 42 08             	lea    0x8(%edx),%eax
+ 71f:	8d 42 08             	lea    0x8(%edx),%eax
 }
- 712:	5b                   	pop    %ebx
- 713:	5e                   	pop    %esi
- 714:	5f                   	pop    %edi
- 715:	5d                   	pop    %ebp
- 716:	c3                   	ret    
- 717:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 71e:	66 90                	xchg   %ax,%ax
+ 722:	5b                   	pop    %ebx
+ 723:	5e                   	pop    %esi
+ 724:	5f                   	pop    %edi
+ 725:	5d                   	pop    %ebp
+ 726:	c3                   	ret    
+ 727:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 72e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 720:	c7 05 08 0a 00 00 0c 	movl   $0xa0c,0xa08
- 727:	0a 00 00 
+ 730:	c7 05 18 0a 00 00 1c 	movl   $0xa1c,0xa18
+ 737:	0a 00 00 
     base.s.size = 0;
- 72a:	bf 0c 0a 00 00       	mov    $0xa0c,%edi
+ 73a:	bf 1c 0a 00 00       	mov    $0xa1c,%edi
     base.s.ptr = freep = prevp = &base;
- 72f:	c7 05 0c 0a 00 00 0c 	movl   $0xa0c,0xa0c
- 736:	0a 00 00 
+ 73f:	c7 05 1c 0a 00 00 1c 	movl   $0xa1c,0xa1c
+ 746:	0a 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 739:	89 f8                	mov    %edi,%eax
+ 749:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 73b:	c7 05 10 0a 00 00 00 	movl   $0x0,0xa10
- 742:	00 00 00 
+ 74b:	c7 05 20 0a 00 00 00 	movl   $0x0,0xa20
+ 752:	00 00 00 
     if(p->s.size >= nunits){
- 745:	e9 36 ff ff ff       	jmp    680 <malloc+0x30>
- 74a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 755:	e9 36 ff ff ff       	jmp    690 <malloc+0x30>
+ 75a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 750:	8b 0a                	mov    (%edx),%ecx
- 752:	89 08                	mov    %ecx,(%eax)
- 754:	eb b1                	jmp    707 <malloc+0xb7>
+ 760:	8b 0a                	mov    (%edx),%ecx
+ 762:	89 08                	mov    %ecx,(%eax)
+ 764:	eb b1                	jmp    717 <malloc+0xb7>
Binary files xv6-public-original/zombie.o and xv6-public/zombie.o differ
diff -ruN xv6-public-original/zombie.sym xv6-public/zombie.sym
--- xv6-public-original/zombie.sym	2022-08-13 16:28:55.615927000 +0530
+++ xv6-public/zombie.sym	2022-09-05 20:56:51.262960000 +0530
@@ -1,7 +1,7 @@
 00000000 .text
-00000758 .rodata
-00000774 .eh_frame
-00000a08 .bss
+00000768 .rodata
+00000784 .eh_frame
+00000a18 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -13,18 +13,19 @@
 00000000 zombie.c
 00000000 ulib.c
 00000000 printf.c
-00000340 printint
-00000760 digits.1085
+00000350 printint
+00000770 digits.1094
 00000000 umalloc.c
-00000a08 freep
-00000a0c base
+00000a18 freep
+00000a1c base
 00000030 strcpy
-000003f0 printf
+00000400 printf
+00000343 thread_exit
 00000260 memmove
 000002db mknod
 00000150 gets
 00000313 getpid
-00000650 malloc
+00000660 malloc
 00000323 sleep
 000002a3 pipe
 000002b3 write
@@ -38,20 +39,22 @@
 0000028b fork
 0000031b sbrk
 0000032b uptime
-00000a08 __bss_start
+00000a18 __bss_start
 000000f0 memset
 00000000 main
 00000060 strcmp
 0000030b dup
 000001d0 stat
-00000a08 _edata
-00000a14 _end
+00000a18 _edata
+00000a24 _end
 000002f3 link
 00000293 exit
 00000220 atoi
 000000b0 strlen
 000002d3 open
 00000110 strchr
+00000333 thread_create
 000002fb mkdir
 000002bb close
-000005c0 free
+0000033b thread_join
+000005d0 free

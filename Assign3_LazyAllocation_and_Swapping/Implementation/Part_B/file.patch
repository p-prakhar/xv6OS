Binary files xv6-public/bio.o and xv6-public-partb/bio.o differ
Binary files xv6-public/_cat and xv6-public-partb/_cat differ
diff -ruN xv6-public/cat.asm xv6-public-partb/cat.asm
--- xv6-public/cat.asm	2022-08-13 16:28:53.924465000 +0530
+++ xv6-public-partb/cat.asm	2022-10-31 11:08:57.432013179 +0530
@@ -71,7 +71,7 @@
       printf(1, "cat: cannot open %s\n", argv[i]);
   69:	50                   	push   %eax
   6a:	ff 33                	pushl  (%ebx)
-  6c:	68 5b 08 00 00       	push   $0x85b
+  6c:	68 93 0a 00 00       	push   $0xa93
   71:	6a 01                	push   $0x1
   73:	e8 58 04 00 00       	call   4d0 <printf>
       exit();
@@ -99,7 +99,7 @@
     if (write(1, buf, n) != n) {
   a0:	83 ec 04             	sub    $0x4,%esp
   a3:	53                   	push   %ebx
-  a4:	68 80 0b 00 00       	push   $0xb80
+  a4:	68 20 18 00 00       	push   $0x1820
   a9:	6a 01                	push   $0x1
   ab:	e8 e3 02 00 00       	call   393 <write>
   b0:	83 c4 10             	add    $0x10,%esp
@@ -108,7 +108,7 @@
   while((n = read(fd, buf, sizeof(buf))) > 0) {
   b7:	83 ec 04             	sub    $0x4,%esp
   ba:	68 00 02 00 00       	push   $0x200
-  bf:	68 80 0b 00 00       	push   $0xb80
+  bf:	68 20 18 00 00       	push   $0x1820
   c4:	56                   	push   %esi
   c5:	e8 c1 02 00 00       	call   38b <read>
   ca:	83 c4 10             	add    $0x10,%esp
@@ -125,7 +125,7 @@
   db:	c3                   	ret    
       printf(1, "cat: write error\n");
   dc:	83 ec 08             	sub    $0x8,%esp
-  df:	68 38 08 00 00       	push   $0x838
+  df:	68 70 0a 00 00       	push   $0xa70
   e4:	6a 01                	push   $0x1
   e6:	e8 e5 03 00 00       	call   4d0 <printf>
       exit();
@@ -133,7 +133,7 @@
     printf(1, "cat: read error\n");
   f0:	50                   	push   %eax
   f1:	50                   	push   %eax
-  f2:	68 4a 08 00 00       	push   $0x84a
+  f2:	68 82 0a 00 00       	push   $0xa82
   f7:	6a 01                	push   $0x1
   f9:	e8 d2 03 00 00       	call   4d0 <printf>
     exit();
@@ -284,6 +284,7 @@
  1e1:	89 d7                	mov    %edx,%edi
  1e3:	fc                   	cld    
  1e4:	f3 aa                	rep stos %al,%es:(%edi)
+
   stosb(dst, c, n);
   return dst;
 }
@@ -535,7 +536,6 @@
  361:	39 f8                	cmp    %edi,%eax
  363:	75 fb                	jne    360 <memmove+0x20>
   return vdst;
-}
  365:	5e                   	pop    %esi
  366:	89 d0                	mov    %edx,%eax
  368:	5f                   	pop    %edi
@@ -543,132 +543,106 @@
  36a:	c3                   	ret    
 
 0000036b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  36b:	b8 01 00 00 00       	mov    $0x1,%eax
  370:	cd 40                	int    $0x40
  372:	c3                   	ret    
 
 00000373 <exit>:
-SYSCALL(exit)
  373:	b8 02 00 00 00       	mov    $0x2,%eax
  378:	cd 40                	int    $0x40
  37a:	c3                   	ret    
 
 0000037b <wait>:
-SYSCALL(wait)
  37b:	b8 03 00 00 00       	mov    $0x3,%eax
  380:	cd 40                	int    $0x40
  382:	c3                   	ret    
 
 00000383 <pipe>:
-SYSCALL(pipe)
  383:	b8 04 00 00 00       	mov    $0x4,%eax
  388:	cd 40                	int    $0x40
  38a:	c3                   	ret    
 
 0000038b <read>:
-SYSCALL(read)
  38b:	b8 05 00 00 00       	mov    $0x5,%eax
  390:	cd 40                	int    $0x40
  392:	c3                   	ret    
 
 00000393 <write>:
-SYSCALL(write)
  393:	b8 10 00 00 00       	mov    $0x10,%eax
  398:	cd 40                	int    $0x40
  39a:	c3                   	ret    
 
 0000039b <close>:
-SYSCALL(close)
  39b:	b8 15 00 00 00       	mov    $0x15,%eax
  3a0:	cd 40                	int    $0x40
  3a2:	c3                   	ret    
 
 000003a3 <kill>:
-SYSCALL(kill)
  3a3:	b8 06 00 00 00       	mov    $0x6,%eax
  3a8:	cd 40                	int    $0x40
  3aa:	c3                   	ret    
 
 000003ab <exec>:
-SYSCALL(exec)
  3ab:	b8 07 00 00 00       	mov    $0x7,%eax
  3b0:	cd 40                	int    $0x40
  3b2:	c3                   	ret    
 
 000003b3 <open>:
-SYSCALL(open)
  3b3:	b8 0f 00 00 00       	mov    $0xf,%eax
  3b8:	cd 40                	int    $0x40
  3ba:	c3                   	ret    
 
 000003bb <mknod>:
-SYSCALL(mknod)
  3bb:	b8 11 00 00 00       	mov    $0x11,%eax
  3c0:	cd 40                	int    $0x40
  3c2:	c3                   	ret    
 
 000003c3 <unlink>:
-SYSCALL(unlink)
  3c3:	b8 12 00 00 00       	mov    $0x12,%eax
  3c8:	cd 40                	int    $0x40
  3ca:	c3                   	ret    
 
 000003cb <fstat>:
-SYSCALL(fstat)
  3cb:	b8 08 00 00 00       	mov    $0x8,%eax
  3d0:	cd 40                	int    $0x40
  3d2:	c3                   	ret    
 
 000003d3 <link>:
-SYSCALL(link)
  3d3:	b8 13 00 00 00       	mov    $0x13,%eax
  3d8:	cd 40                	int    $0x40
  3da:	c3                   	ret    
 
 000003db <mkdir>:
-SYSCALL(mkdir)
  3db:	b8 14 00 00 00       	mov    $0x14,%eax
  3e0:	cd 40                	int    $0x40
  3e2:	c3                   	ret    
 
 000003e3 <chdir>:
-SYSCALL(chdir)
  3e3:	b8 09 00 00 00       	mov    $0x9,%eax
  3e8:	cd 40                	int    $0x40
  3ea:	c3                   	ret    
 
 000003eb <dup>:
-SYSCALL(dup)
  3eb:	b8 0a 00 00 00       	mov    $0xa,%eax
  3f0:	cd 40                	int    $0x40
  3f2:	c3                   	ret    
 
 000003f3 <getpid>:
-SYSCALL(getpid)
  3f3:	b8 0b 00 00 00       	mov    $0xb,%eax
  3f8:	cd 40                	int    $0x40
  3fa:	c3                   	ret    
 
 000003fb <sbrk>:
-SYSCALL(sbrk)
  3fb:	b8 0c 00 00 00       	mov    $0xc,%eax
  400:	cd 40                	int    $0x40
  402:	c3                   	ret    
 
 00000403 <sleep>:
-SYSCALL(sleep)
  403:	b8 0d 00 00 00       	mov    $0xd,%eax
  408:	cd 40                	int    $0x40
  40a:	c3                   	ret    
 
 0000040b <uptime>:
-SYSCALL(uptime)
  40b:	b8 0e 00 00 00       	mov    $0xe,%eax
  410:	cd 40                	int    $0x40
  412:	c3                   	ret    
@@ -726,7 +700,7 @@
  452:	31 d2                	xor    %edx,%edx
  454:	89 cf                	mov    %ecx,%edi
  456:	f7 75 c4             	divl   -0x3c(%ebp)
- 459:	0f b6 92 78 08 00 00 	movzbl 0x878(%edx),%edx
+ 459:	0f b6 92 b0 0a 00 00 	movzbl 0xab0(%edx),%edx
  460:	89 45 c0             	mov    %eax,-0x40(%ebp)
  463:	89 d8                	mov    %ebx,%eax
  465:	8d 5b 01             	lea    0x1(%ebx),%ebx
@@ -997,7 +971,7 @@
  651:	8b 5d 08             	mov    0x8(%ebp),%ebx
  654:	eb 1a                	jmp    670 <printf+0x1a0>
           s = "(null)";
- 656:	bb 70 08 00 00       	mov    $0x870,%ebx
+ 656:	bb a8 0a 00 00       	mov    $0xaa8,%ebx
         while(*s != 0){
  65b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  65e:	b8 28 00 00 00       	mov    $0x28,%eax
@@ -1043,7 +1017,7 @@
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6a5:	a1 60 0b 00 00       	mov    0xb60,%eax
+ 6a5:	a1 40 0e 00 00       	mov    0xe40,%eax
 {
  6aa:	89 e5                	mov    %esp,%ebp
  6ac:	57                   	push   %edi
@@ -1099,7 +1073,7 @@
 }
  6f1:	5b                   	pop    %ebx
   freep = p;
- 6f2:	a3 60 0b 00 00       	mov    %eax,0xb60
+ 6f2:	a3 40 0e 00 00       	mov    %eax,0xe40
 }
  6f7:	5e                   	pop    %esi
  6f8:	5f                   	pop    %edi
@@ -1122,7 +1096,7 @@
     p->s.size += bp->s.size;
  717:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 71a:	a3 60 0b 00 00       	mov    %eax,0xb60
+ 71a:	a3 40 0e 00 00       	mov    %eax,0xe40
     p->s.size += bp->s.size;
  71f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
@@ -1156,7 +1130,7 @@
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  73d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 740:	8b 3d 60 0b 00 00    	mov    0xb60,%edi
+ 740:	8b 3d 40 0e 00 00    	mov    0xe40,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  746:	8d 70 07             	lea    0x7(%eax),%esi
  749:	c1 ee 03             	shr    $0x3,%esi
@@ -1187,7 +1161,7 @@
  782:	8b 4a 04             	mov    0x4(%edx),%ecx
  785:	39 f1                	cmp    %esi,%ecx
  787:	73 4f                	jae    7d8 <malloc+0xa8>
- 789:	8b 3d 60 0b 00 00    	mov    0xb60,%edi
+ 789:	8b 3d 40 0e 00 00    	mov    0xe40,%edi
  78f:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
@@ -1213,7 +1187,7 @@
  7b1:	50                   	push   %eax
  7b2:	e8 e9 fe ff ff       	call   6a0 <free>
   return freep;
- 7b7:	a1 60 0b 00 00       	mov    0xb60,%eax
+ 7b7:	a1 40 0e 00 00       	mov    0xe40,%eax
       if((p = morecore(nunits)) == 0)
  7bc:	83 c4 10             	add    $0x10,%esp
  7bf:	85 c0                	test   %eax,%eax
@@ -1245,7 +1219,7 @@
         p->s.size = nunits;
  7e4:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 7e7:	a3 60 0b 00 00       	mov    %eax,0xb60
+ 7e7:	a3 40 0e 00 00       	mov    %eax,0xe40
 }
  7ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
@@ -1259,17 +1233,17 @@
  7f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  7fe:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 800:	c7 05 60 0b 00 00 64 	movl   $0xb64,0xb60
- 807:	0b 00 00 
+ 800:	c7 05 40 0e 00 00 44 	movl   $0xe44,0xe40
+ 807:	0e 00 00 
     base.s.size = 0;
- 80a:	bf 64 0b 00 00       	mov    $0xb64,%edi
+ 80a:	bf 44 0e 00 00       	mov    $0xe44,%edi
     base.s.ptr = freep = prevp = &base;
- 80f:	c7 05 64 0b 00 00 64 	movl   $0xb64,0xb64
- 816:	0b 00 00 
+ 80f:	c7 05 44 0e 00 00 44 	movl   $0xe44,0xe44
+ 816:	0e 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
  819:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 81b:	c7 05 68 0b 00 00 00 	movl   $0x0,0xb68
+ 81b:	c7 05 48 0e 00 00 00 	movl   $0x0,0xe48
  822:	00 00 00 
     if(p->s.size >= nunits){
  825:	e9 36 ff ff ff       	jmp    760 <malloc+0x30>
@@ -1278,3 +1252,279 @@
  830:	8b 0a                	mov    (%edx),%ecx
  832:	89 08                	mov    %ecx,(%eax)
  834:	eb b1                	jmp    7e7 <malloc+0xb7>
+ 836:	66 90                	xchg   %ax,%ax
+ 838:	66 90                	xchg   %ax,%ax
+ 83a:	66 90                	xchg   %ax,%ax
+ 83c:	66 90                	xchg   %ax,%ax
+ 83e:	66 90                	xchg   %ax,%ax
+
+00000840 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 840:	f3 0f 1e fb          	endbr32 
+ 844:	55                   	push   %ebp
+ 845:	b8 64 0e 00 00       	mov    $0xe64,%eax
+ 84a:	89 e5                	mov    %esp,%ebp
+ 84c:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 84f:	89 15 60 0e 00 00    	mov    %edx,0xe60
+    for (mti=1; mti<N; mti++)
+ 855:	eb 0c                	jmp    863 <sgenrand+0x23>
+ 857:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 85e:	66 90                	xchg   %ax,%ax
+ 860:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 863:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 869:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 86b:	3d 1c 18 00 00       	cmp    $0x181c,%eax
+ 870:	75 ee                	jne    860 <sgenrand+0x20>
+ 872:	c7 05 24 0e 00 00 70 	movl   $0x270,0xe24
+ 879:	02 00 00 
+}
+ 87c:	5d                   	pop    %ebp
+ 87d:	c3                   	ret    
+ 87e:	66 90                	xchg   %ax,%ax
+
+00000880 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 880:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 884:	a1 24 0e 00 00       	mov    0xe24,%eax
+ 889:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 88e:	7f 3c                	jg     8cc <genrand+0x4c>
+ 890:	8d 50 01             	lea    0x1(%eax),%edx
+ 893:	8b 04 85 60 0e 00 00 	mov    0xe60(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 89a:	89 15 24 0e 00 00    	mov    %edx,0xe24
+    y ^= TEMPERING_SHIFT_U(y);
+ 8a0:	89 c2                	mov    %eax,%edx
+ 8a2:	c1 ea 0b             	shr    $0xb,%edx
+ 8a5:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 8a7:	89 d0                	mov    %edx,%eax
+ 8a9:	c1 e0 07             	shl    $0x7,%eax
+ 8ac:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 8b1:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 8b3:	89 d0                	mov    %edx,%eax
+ 8b5:	c1 e0 0f             	shl    $0xf,%eax
+ 8b8:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 8bd:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 8bf:	89 c2                	mov    %eax,%edx
+ 8c1:	c1 ea 12             	shr    $0x12,%edx
+ 8c4:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 8c6:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 8cb:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 8cc:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 8d1:	0f 84 d2 00 00 00    	je     9a9 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 8d7:	31 c0                	xor    %eax,%eax
+ 8d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 8e0:	8b 0c 85 60 0e 00 00 	mov    0xe60(,%eax,4),%ecx
+ 8e7:	83 c0 01             	add    $0x1,%eax
+ 8ea:	8b 14 85 60 0e 00 00 	mov    0xe60(,%eax,4),%edx
+ 8f1:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8f7:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8fd:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8ff:	89 d1                	mov    %edx,%ecx
+ 901:	83 e2 01             	and    $0x1,%edx
+ 904:	d1 e9                	shr    %ecx
+ 906:	33 0c 85 90 14 00 00 	xor    0x1490(,%eax,4),%ecx
+ 90d:	33 0c 95 c4 0a 00 00 	xor    0xac4(,%edx,4),%ecx
+ 914:	89 0c 85 5c 0e 00 00 	mov    %ecx,0xe5c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 91b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 920:	75 be                	jne    8e0 <genrand+0x60>
+ 922:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 928:	8b 0c 85 60 0e 00 00 	mov    0xe60(,%eax,4),%ecx
+ 92f:	83 c0 01             	add    $0x1,%eax
+ 932:	8b 14 85 60 0e 00 00 	mov    0xe60(,%eax,4),%edx
+ 939:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 93f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 945:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 947:	89 d1                	mov    %edx,%ecx
+ 949:	83 e2 01             	and    $0x1,%edx
+ 94c:	d1 e9                	shr    %ecx
+ 94e:	33 0c 85 d0 0a 00 00 	xor    0xad0(,%eax,4),%ecx
+ 955:	33 0c 95 c4 0a 00 00 	xor    0xac4(,%edx,4),%ecx
+ 95c:	89 0c 85 5c 0e 00 00 	mov    %ecx,0xe5c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 963:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 968:	75 be                	jne    928 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 96a:	a1 60 0e 00 00       	mov    0xe60,%eax
+ 96f:	8b 0d 1c 18 00 00    	mov    0x181c,%ecx
+ 975:	89 c2                	mov    %eax,%edx
+ 977:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 97d:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 983:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 985:	89 ca                	mov    %ecx,%edx
+ 987:	83 e1 01             	and    $0x1,%ecx
+ 98a:	d1 ea                	shr    %edx
+ 98c:	33 15 90 14 00 00    	xor    0x1490,%edx
+ 992:	33 14 8d c4 0a 00 00 	xor    0xac4(,%ecx,4),%edx
+ 999:	89 15 1c 18 00 00    	mov    %edx,0x181c
+ 99f:	ba 01 00 00 00       	mov    $0x1,%edx
+ 9a4:	e9 f1 fe ff ff       	jmp    89a <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ 9a9:	b8 64 0e 00 00       	mov    $0xe64,%eax
+ 9ae:	b9 1c 18 00 00       	mov    $0x181c,%ecx
+ 9b3:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 9b8:	c7 05 60 0e 00 00 05 	movl   $0x1105,0xe60
+ 9bf:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 9c2:	eb 07                	jmp    9cb <genrand+0x14b>
+ 9c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 9c8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 9cb:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 9d1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 9d3:	39 c1                	cmp    %eax,%ecx
+ 9d5:	75 f1                	jne    9c8 <genrand+0x148>
+ 9d7:	e9 fb fe ff ff       	jmp    8d7 <genrand+0x57>
+ 9dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000009e0 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 9e0:	f3 0f 1e fb          	endbr32 
+ 9e4:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 9e5:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 9e7:	89 e5                	mov    %esp,%ebp
+ 9e9:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 9ea:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 9ed:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 9ee:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 9f3:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 9f6:	89 d8                	mov    %ebx,%eax
+ 9f8:	f7 f1                	div    %ecx
+ 9fa:	89 c6                	mov    %eax,%esi
+ 9fc:	29 d3                	sub    %edx,%ebx
+ 9fe:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ a00:	e8 7b fe ff ff       	call   880 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ a05:	39 d8                	cmp    %ebx,%eax
+ a07:	73 f7                	jae    a00 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ a09:	31 d2                	xor    %edx,%edx
+}
+ a0b:	5b                   	pop    %ebx
+  return x/bin_size;
+ a0c:	f7 f6                	div    %esi
+}
+ a0e:	5e                   	pop    %esi
+ a0f:	5d                   	pop    %ebp
+ a10:	c3                   	ret    
+ a11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a18:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a1f:	90                   	nop
+
+00000a20 <randomrange>:
+
+int randomrange(int low, int high){
+ a20:	f3 0f 1e fb          	endbr32 
+ a24:	55                   	push   %ebp
+ a25:	89 e5                	mov    %esp,%ebp
+ a27:	57                   	push   %edi
+ a28:	56                   	push   %esi
+ a29:	53                   	push   %ebx
+ a2a:	83 ec 0c             	sub    $0xc,%esp
+ a2d:	8b 75 08             	mov    0x8(%ebp),%esi
+ a30:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ a33:	39 f0                	cmp    %esi,%eax
+ a35:	7d 06                	jge    a3d <randomrange+0x1d>
+ a37:	89 f2                	mov    %esi,%edx
+ a39:	89 c6                	mov    %eax,%esi
+ a3b:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ a3d:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ a3f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ a44:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ a46:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ a49:	89 d8                	mov    %ebx,%eax
+ a4b:	f7 f1                	div    %ecx
+ a4d:	89 c7                	mov    %eax,%edi
+ a4f:	29 d3                	sub    %edx,%ebx
+ a51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ a58:	e8 23 fe ff ff       	call   880 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ a5d:	39 d8                	cmp    %ebx,%eax
+ a5f:	73 f7                	jae    a58 <randomrange+0x38>
+  return x/bin_size;
+ a61:	31 d2                	xor    %edx,%edx
+  return val;
+ a63:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ a66:	f7 f7                	div    %edi
+ a68:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ a69:	01 f0                	add    %esi,%eax
+ a6b:	5e                   	pop    %esi
+ a6c:	5f                   	pop    %edi
+ a6d:	5d                   	pop    %ebp
+ a6e:	c3                   	ret    
Binary files xv6-public/cat.o and xv6-public-partb/cat.o differ
diff -ruN xv6-public/cat.sym xv6-public-partb/cat.sym
--- xv6-public/cat.sym	2022-08-13 16:28:53.924465000 +0530
+++ xv6-public-partb/cat.sym	2022-10-31 11:08:57.476035180 +0530
@@ -1,7 +1,8 @@
 00000000 .text
-00000838 .rodata
-0000088c .eh_frame
-00000b60 .bss
+00000a70 .rodata
+00000acc .eh_frame
+00000e24 .data
+00000e40 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -14,11 +15,16 @@
 00000000 ulib.c
 00000000 printf.c
 00000420 printint
-00000878 digits.1085
+00000ab0 digits.1088
 00000000 umalloc.c
-00000b60 freep
-00000b64 base
+00000e40 freep
+00000e44 base
+00000000 random.c
+00000e60 mt
+00000e24 mti
+00000ac4 mag01.989
 00000110 strcpy
+00000840 sgenrand
 000004d0 printf
 00000340 memmove
 000003bb mknod
@@ -27,6 +33,7 @@
 00000090 cat
 00000730 malloc
 00000403 sleep
+000009e0 random_at_most
 00000383 pipe
 00000393 write
 000003cb fstat
@@ -39,21 +46,23 @@
 0000036b fork
 000003fb sbrk
 0000040b uptime
-00000b5c __bss_start
+00000e28 __bss_start
 000001d0 memset
 00000000 main
 00000140 strcmp
 000003eb dup
-00000b80 buf
+00001820 buf
+00000880 genrand
 000002b0 stat
-00000b5c _edata
-00000d80 _end
+00000e28 _edata
+00001a20 _end
 000003d3 link
 00000373 exit
 00000300 atoi
 00000190 strlen
 000003b3 open
 000001f0 strchr
+00000a20 randomrange
 000003db mkdir
 0000039b close
 000006a0 free
Binary files xv6-public/console.o and xv6-public-partb/console.o differ
diff -ruN xv6-public/defs.h xv6-public-partb/defs.h
--- xv6-public/defs.h	2022-08-11 13:14:39.064069000 +0530
+++ xv6-public-partb/defs.h	2022-10-31 11:02:46.758769027 +0530
@@ -9,6 +9,7 @@
 struct sleeplock;
 struct stat;
 struct superblock;
+struct rq;
 
 // bio.c
 void            binit(void);
@@ -120,6 +121,17 @@
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+void 			create_kernel_process(const char *name, void (*entrypoint)());
+void 			swap_out_process_function();
+void 			swap_in_process_function();
+extern int swap_out_process_exists;
+extern int swap_in_process_exists;
+extern struct rq rqueue;
+extern struct rq rqueue2;
+int rpush(struct proc *p);
+struct proc* rpop();
+struct proc* rpop2();
+int rpush2(struct proc* p);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
@@ -164,6 +176,7 @@
 extern uint     ticks;
 void            tvinit(void);
 extern struct spinlock tickslock;
+extern struct spinlock swap_in_lock;
 
 // uart.c
 void            uartinit(void);
@@ -185,6 +198,9 @@
 void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
+extern 			char * sleeping_channel;
+extern struct spinlock sleeping_channel_lock;
+extern 			int sleeping_channel_count;
 
 // number of elements in fixed-size array
-#define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+#define NELEM(x) (sizeof(x)/sizeof((x)[0]))
\ No newline at end of file
Binary files xv6-public/_echo and xv6-public-partb/_echo differ
diff -ruN xv6-public/echo.asm xv6-public-partb/echo.asm
--- xv6-public/echo.asm	2022-08-13 16:28:54.000441000 +0530
+++ xv6-public-partb/echo.asm	2022-10-31 11:08:57.628111180 +0530
@@ -36,10 +36,10 @@
   2d:	39 f3                	cmp    %esi,%ebx
   2f:	74 26                	je     57 <main+0x57>
   31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  38:	68 a8 07 00 00       	push   $0x7a8
+  38:	68 e0 09 00 00       	push   $0x9e0
   3d:	83 c3 04             	add    $0x4,%ebx
   40:	50                   	push   %eax
-  41:	68 aa 07 00 00       	push   $0x7aa
+  41:	68 e2 09 00 00       	push   $0x9e2
   46:	6a 01                	push   $0x1
   48:	e8 f3 03 00 00       	call   440 <printf>
   for(i = 1; i < argc; i++)
@@ -48,9 +48,9 @@
   50:	83 c4 10             	add    $0x10,%esp
   53:	39 f3                	cmp    %esi,%ebx
   55:	75 e1                	jne    38 <main+0x38>
-  57:	68 af 07 00 00       	push   $0x7af
+  57:	68 e7 09 00 00       	push   $0x9e7
   5c:	50                   	push   %eax
-  5d:	68 aa 07 00 00       	push   $0x7aa
+  5d:	68 e2 09 00 00       	push   $0x9e2
   62:	6a 01                	push   $0x1
   64:	e8 d7 03 00 00       	call   440 <printf>
   69:	83 c4 10             	add    $0x10,%esp
@@ -203,6 +203,7 @@
  151:	89 d7                	mov    %edx,%edi
  153:	fc                   	cld    
  154:	f3 aa                	rep stos %al,%es:(%edi)
+
   stosb(dst, c, n);
   return dst;
 }
@@ -454,7 +455,6 @@
  2d1:	39 f8                	cmp    %edi,%eax
  2d3:	75 fb                	jne    2d0 <memmove+0x20>
   return vdst;
-}
  2d5:	5e                   	pop    %esi
  2d6:	89 d0                	mov    %edx,%eax
  2d8:	5f                   	pop    %edi
@@ -462,132 +462,106 @@
  2da:	c3                   	ret    
 
 000002db <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  2db:	b8 01 00 00 00       	mov    $0x1,%eax
  2e0:	cd 40                	int    $0x40
  2e2:	c3                   	ret    
 
 000002e3 <exit>:
-SYSCALL(exit)
  2e3:	b8 02 00 00 00       	mov    $0x2,%eax
  2e8:	cd 40                	int    $0x40
  2ea:	c3                   	ret    
 
 000002eb <wait>:
-SYSCALL(wait)
  2eb:	b8 03 00 00 00       	mov    $0x3,%eax
  2f0:	cd 40                	int    $0x40
  2f2:	c3                   	ret    
 
 000002f3 <pipe>:
-SYSCALL(pipe)
  2f3:	b8 04 00 00 00       	mov    $0x4,%eax
  2f8:	cd 40                	int    $0x40
  2fa:	c3                   	ret    
 
 000002fb <read>:
-SYSCALL(read)
  2fb:	b8 05 00 00 00       	mov    $0x5,%eax
  300:	cd 40                	int    $0x40
  302:	c3                   	ret    
 
 00000303 <write>:
-SYSCALL(write)
  303:	b8 10 00 00 00       	mov    $0x10,%eax
  308:	cd 40                	int    $0x40
  30a:	c3                   	ret    
 
 0000030b <close>:
-SYSCALL(close)
  30b:	b8 15 00 00 00       	mov    $0x15,%eax
  310:	cd 40                	int    $0x40
  312:	c3                   	ret    
 
 00000313 <kill>:
-SYSCALL(kill)
  313:	b8 06 00 00 00       	mov    $0x6,%eax
  318:	cd 40                	int    $0x40
  31a:	c3                   	ret    
 
 0000031b <exec>:
-SYSCALL(exec)
  31b:	b8 07 00 00 00       	mov    $0x7,%eax
  320:	cd 40                	int    $0x40
  322:	c3                   	ret    
 
 00000323 <open>:
-SYSCALL(open)
  323:	b8 0f 00 00 00       	mov    $0xf,%eax
  328:	cd 40                	int    $0x40
  32a:	c3                   	ret    
 
 0000032b <mknod>:
-SYSCALL(mknod)
  32b:	b8 11 00 00 00       	mov    $0x11,%eax
  330:	cd 40                	int    $0x40
  332:	c3                   	ret    
 
 00000333 <unlink>:
-SYSCALL(unlink)
  333:	b8 12 00 00 00       	mov    $0x12,%eax
  338:	cd 40                	int    $0x40
  33a:	c3                   	ret    
 
 0000033b <fstat>:
-SYSCALL(fstat)
  33b:	b8 08 00 00 00       	mov    $0x8,%eax
  340:	cd 40                	int    $0x40
  342:	c3                   	ret    
 
 00000343 <link>:
-SYSCALL(link)
  343:	b8 13 00 00 00       	mov    $0x13,%eax
  348:	cd 40                	int    $0x40
  34a:	c3                   	ret    
 
 0000034b <mkdir>:
-SYSCALL(mkdir)
  34b:	b8 14 00 00 00       	mov    $0x14,%eax
  350:	cd 40                	int    $0x40
  352:	c3                   	ret    
 
 00000353 <chdir>:
-SYSCALL(chdir)
  353:	b8 09 00 00 00       	mov    $0x9,%eax
  358:	cd 40                	int    $0x40
  35a:	c3                   	ret    
 
 0000035b <dup>:
-SYSCALL(dup)
  35b:	b8 0a 00 00 00       	mov    $0xa,%eax
  360:	cd 40                	int    $0x40
  362:	c3                   	ret    
 
 00000363 <getpid>:
-SYSCALL(getpid)
  363:	b8 0b 00 00 00       	mov    $0xb,%eax
  368:	cd 40                	int    $0x40
  36a:	c3                   	ret    
 
 0000036b <sbrk>:
-SYSCALL(sbrk)
  36b:	b8 0c 00 00 00       	mov    $0xc,%eax
  370:	cd 40                	int    $0x40
  372:	c3                   	ret    
 
 00000373 <sleep>:
-SYSCALL(sleep)
  373:	b8 0d 00 00 00       	mov    $0xd,%eax
  378:	cd 40                	int    $0x40
  37a:	c3                   	ret    
 
 0000037b <uptime>:
-SYSCALL(uptime)
  37b:	b8 0e 00 00 00       	mov    $0xe,%eax
  380:	cd 40                	int    $0x40
  382:	c3                   	ret    
@@ -645,7 +619,7 @@
  3c2:	31 d2                	xor    %edx,%edx
  3c4:	89 cf                	mov    %ecx,%edi
  3c6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3c9:	0f b6 92 b8 07 00 00 	movzbl 0x7b8(%edx),%edx
+ 3c9:	0f b6 92 f0 09 00 00 	movzbl 0x9f0(%edx),%edx
  3d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
  3d3:	89 d8                	mov    %ebx,%eax
  3d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
@@ -916,7 +890,7 @@
  5c1:	8b 5d 08             	mov    0x8(%ebp),%ebx
  5c4:	eb 1a                	jmp    5e0 <printf+0x1a0>
           s = "(null)";
- 5c6:	bb b1 07 00 00       	mov    $0x7b1,%ebx
+ 5c6:	bb e9 09 00 00       	mov    $0x9e9,%ebx
         while(*s != 0){
  5cb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  5ce:	b8 28 00 00 00       	mov    $0x28,%eax
@@ -962,7 +936,7 @@
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 615:	a1 68 0a 00 00       	mov    0xa68,%eax
+ 615:	a1 40 0d 00 00       	mov    0xd40,%eax
 {
  61a:	89 e5                	mov    %esp,%ebp
  61c:	57                   	push   %edi
@@ -1018,7 +992,7 @@
 }
  661:	5b                   	pop    %ebx
   freep = p;
- 662:	a3 68 0a 00 00       	mov    %eax,0xa68
+ 662:	a3 40 0d 00 00       	mov    %eax,0xd40
 }
  667:	5e                   	pop    %esi
  668:	5f                   	pop    %edi
@@ -1041,7 +1015,7 @@
     p->s.size += bp->s.size;
  687:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 68a:	a3 68 0a 00 00       	mov    %eax,0xa68
+ 68a:	a3 40 0d 00 00       	mov    %eax,0xd40
     p->s.size += bp->s.size;
  68f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
@@ -1075,7 +1049,7 @@
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  6ad:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 6b0:	8b 3d 68 0a 00 00    	mov    0xa68,%edi
+ 6b0:	8b 3d 40 0d 00 00    	mov    0xd40,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  6b6:	8d 70 07             	lea    0x7(%eax),%esi
  6b9:	c1 ee 03             	shr    $0x3,%esi
@@ -1106,7 +1080,7 @@
  6f2:	8b 4a 04             	mov    0x4(%edx),%ecx
  6f5:	39 f1                	cmp    %esi,%ecx
  6f7:	73 4f                	jae    748 <malloc+0xa8>
- 6f9:	8b 3d 68 0a 00 00    	mov    0xa68,%edi
+ 6f9:	8b 3d 40 0d 00 00    	mov    0xd40,%edi
  6ff:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
@@ -1132,7 +1106,7 @@
  721:	50                   	push   %eax
  722:	e8 e9 fe ff ff       	call   610 <free>
   return freep;
- 727:	a1 68 0a 00 00       	mov    0xa68,%eax
+ 727:	a1 40 0d 00 00       	mov    0xd40,%eax
       if((p = morecore(nunits)) == 0)
  72c:	83 c4 10             	add    $0x10,%esp
  72f:	85 c0                	test   %eax,%eax
@@ -1164,7 +1138,7 @@
         p->s.size = nunits;
  754:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 757:	a3 68 0a 00 00       	mov    %eax,0xa68
+ 757:	a3 40 0d 00 00       	mov    %eax,0xd40
 }
  75c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
@@ -1178,17 +1152,17 @@
  767:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  76e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 770:	c7 05 68 0a 00 00 6c 	movl   $0xa6c,0xa68
- 777:	0a 00 00 
+ 770:	c7 05 40 0d 00 00 44 	movl   $0xd44,0xd40
+ 777:	0d 00 00 
     base.s.size = 0;
- 77a:	bf 6c 0a 00 00       	mov    $0xa6c,%edi
+ 77a:	bf 44 0d 00 00       	mov    $0xd44,%edi
     base.s.ptr = freep = prevp = &base;
- 77f:	c7 05 6c 0a 00 00 6c 	movl   $0xa6c,0xa6c
- 786:	0a 00 00 
+ 77f:	c7 05 44 0d 00 00 44 	movl   $0xd44,0xd44
+ 786:	0d 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
  789:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 78b:	c7 05 70 0a 00 00 00 	movl   $0x0,0xa70
+ 78b:	c7 05 48 0d 00 00 00 	movl   $0x0,0xd48
  792:	00 00 00 
     if(p->s.size >= nunits){
  795:	e9 36 ff ff ff       	jmp    6d0 <malloc+0x30>
@@ -1197,3 +1171,279 @@
  7a0:	8b 0a                	mov    (%edx),%ecx
  7a2:	89 08                	mov    %ecx,(%eax)
  7a4:	eb b1                	jmp    757 <malloc+0xb7>
+ 7a6:	66 90                	xchg   %ax,%ax
+ 7a8:	66 90                	xchg   %ax,%ax
+ 7aa:	66 90                	xchg   %ax,%ax
+ 7ac:	66 90                	xchg   %ax,%ax
+ 7ae:	66 90                	xchg   %ax,%ax
+
+000007b0 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 7b0:	f3 0f 1e fb          	endbr32 
+ 7b4:	55                   	push   %ebp
+ 7b5:	b8 64 0d 00 00       	mov    $0xd64,%eax
+ 7ba:	89 e5                	mov    %esp,%ebp
+ 7bc:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 7bf:	89 15 60 0d 00 00    	mov    %edx,0xd60
+    for (mti=1; mti<N; mti++)
+ 7c5:	eb 0c                	jmp    7d3 <sgenrand+0x23>
+ 7c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7ce:	66 90                	xchg   %ax,%ax
+ 7d0:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 7d3:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 7d9:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 7db:	3d 1c 17 00 00       	cmp    $0x171c,%eax
+ 7e0:	75 ee                	jne    7d0 <sgenrand+0x20>
+ 7e2:	c7 05 30 0d 00 00 70 	movl   $0x270,0xd30
+ 7e9:	02 00 00 
+}
+ 7ec:	5d                   	pop    %ebp
+ 7ed:	c3                   	ret    
+ 7ee:	66 90                	xchg   %ax,%ax
+
+000007f0 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 7f0:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 7f4:	a1 30 0d 00 00       	mov    0xd30,%eax
+ 7f9:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 7fe:	7f 3c                	jg     83c <genrand+0x4c>
+ 800:	8d 50 01             	lea    0x1(%eax),%edx
+ 803:	8b 04 85 60 0d 00 00 	mov    0xd60(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 80a:	89 15 30 0d 00 00    	mov    %edx,0xd30
+    y ^= TEMPERING_SHIFT_U(y);
+ 810:	89 c2                	mov    %eax,%edx
+ 812:	c1 ea 0b             	shr    $0xb,%edx
+ 815:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 817:	89 d0                	mov    %edx,%eax
+ 819:	c1 e0 07             	shl    $0x7,%eax
+ 81c:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 821:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 823:	89 d0                	mov    %edx,%eax
+ 825:	c1 e0 0f             	shl    $0xf,%eax
+ 828:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 82d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 82f:	89 c2                	mov    %eax,%edx
+ 831:	c1 ea 12             	shr    $0x12,%edx
+ 834:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 836:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 83b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 83c:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 841:	0f 84 d2 00 00 00    	je     919 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 847:	31 c0                	xor    %eax,%eax
+ 849:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 850:	8b 0c 85 60 0d 00 00 	mov    0xd60(,%eax,4),%ecx
+ 857:	83 c0 01             	add    $0x1,%eax
+ 85a:	8b 14 85 60 0d 00 00 	mov    0xd60(,%eax,4),%edx
+ 861:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 867:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 86d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 86f:	89 d1                	mov    %edx,%ecx
+ 871:	83 e2 01             	and    $0x1,%edx
+ 874:	d1 e9                	shr    %ecx
+ 876:	33 0c 85 90 13 00 00 	xor    0x1390(,%eax,4),%ecx
+ 87d:	33 0c 95 04 0a 00 00 	xor    0xa04(,%edx,4),%ecx
+ 884:	89 0c 85 5c 0d 00 00 	mov    %ecx,0xd5c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 88b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 890:	75 be                	jne    850 <genrand+0x60>
+ 892:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 898:	8b 0c 85 60 0d 00 00 	mov    0xd60(,%eax,4),%ecx
+ 89f:	83 c0 01             	add    $0x1,%eax
+ 8a2:	8b 14 85 60 0d 00 00 	mov    0xd60(,%eax,4),%edx
+ 8a9:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8af:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8b5:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8b7:	89 d1                	mov    %edx,%ecx
+ 8b9:	83 e2 01             	and    $0x1,%edx
+ 8bc:	d1 e9                	shr    %ecx
+ 8be:	33 0c 85 d0 09 00 00 	xor    0x9d0(,%eax,4),%ecx
+ 8c5:	33 0c 95 04 0a 00 00 	xor    0xa04(,%edx,4),%ecx
+ 8cc:	89 0c 85 5c 0d 00 00 	mov    %ecx,0xd5c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 8d3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8d8:	75 be                	jne    898 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 8da:	a1 60 0d 00 00       	mov    0xd60,%eax
+ 8df:	8b 0d 1c 17 00 00    	mov    0x171c,%ecx
+ 8e5:	89 c2                	mov    %eax,%edx
+ 8e7:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8ed:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8f3:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8f5:	89 ca                	mov    %ecx,%edx
+ 8f7:	83 e1 01             	and    $0x1,%ecx
+ 8fa:	d1 ea                	shr    %edx
+ 8fc:	33 15 90 13 00 00    	xor    0x1390,%edx
+ 902:	33 14 8d 04 0a 00 00 	xor    0xa04(,%ecx,4),%edx
+ 909:	89 15 1c 17 00 00    	mov    %edx,0x171c
+ 90f:	ba 01 00 00 00       	mov    $0x1,%edx
+ 914:	e9 f1 fe ff ff       	jmp    80a <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ 919:	b8 64 0d 00 00       	mov    $0xd64,%eax
+ 91e:	b9 1c 17 00 00       	mov    $0x171c,%ecx
+ 923:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 928:	c7 05 60 0d 00 00 05 	movl   $0x1105,0xd60
+ 92f:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 932:	eb 07                	jmp    93b <genrand+0x14b>
+ 934:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 938:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 93b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 941:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 943:	39 c1                	cmp    %eax,%ecx
+ 945:	75 f1                	jne    938 <genrand+0x148>
+ 947:	e9 fb fe ff ff       	jmp    847 <genrand+0x57>
+ 94c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000950 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 950:	f3 0f 1e fb          	endbr32 
+ 954:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 955:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 957:	89 e5                	mov    %esp,%ebp
+ 959:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 95a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 95d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 95e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 963:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 966:	89 d8                	mov    %ebx,%eax
+ 968:	f7 f1                	div    %ecx
+ 96a:	89 c6                	mov    %eax,%esi
+ 96c:	29 d3                	sub    %edx,%ebx
+ 96e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ 970:	e8 7b fe ff ff       	call   7f0 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 975:	39 d8                	cmp    %ebx,%eax
+ 977:	73 f7                	jae    970 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 979:	31 d2                	xor    %edx,%edx
+}
+ 97b:	5b                   	pop    %ebx
+  return x/bin_size;
+ 97c:	f7 f6                	div    %esi
+}
+ 97e:	5e                   	pop    %esi
+ 97f:	5d                   	pop    %ebp
+ 980:	c3                   	ret    
+ 981:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 988:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 98f:	90                   	nop
+
+00000990 <randomrange>:
+
+int randomrange(int low, int high){
+ 990:	f3 0f 1e fb          	endbr32 
+ 994:	55                   	push   %ebp
+ 995:	89 e5                	mov    %esp,%ebp
+ 997:	57                   	push   %edi
+ 998:	56                   	push   %esi
+ 999:	53                   	push   %ebx
+ 99a:	83 ec 0c             	sub    $0xc,%esp
+ 99d:	8b 75 08             	mov    0x8(%ebp),%esi
+ 9a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 9a3:	39 f0                	cmp    %esi,%eax
+ 9a5:	7d 06                	jge    9ad <randomrange+0x1d>
+ 9a7:	89 f2                	mov    %esi,%edx
+ 9a9:	89 c6                	mov    %eax,%esi
+ 9ab:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 9ad:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 9af:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 9b4:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 9b6:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 9b9:	89 d8                	mov    %ebx,%eax
+ 9bb:	f7 f1                	div    %ecx
+ 9bd:	89 c7                	mov    %eax,%edi
+ 9bf:	29 d3                	sub    %edx,%ebx
+ 9c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ 9c8:	e8 23 fe ff ff       	call   7f0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 9cd:	39 d8                	cmp    %ebx,%eax
+ 9cf:	73 f7                	jae    9c8 <randomrange+0x38>
+  return x/bin_size;
+ 9d1:	31 d2                	xor    %edx,%edx
+  return val;
+ 9d3:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ 9d6:	f7 f7                	div    %edi
+ 9d8:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ 9d9:	01 f0                	add    %esi,%eax
+ 9db:	5e                   	pop    %esi
+ 9dc:	5f                   	pop    %edi
+ 9dd:	5d                   	pop    %ebp
+ 9de:	c3                   	ret    
Binary files xv6-public/echo.o and xv6-public-partb/echo.o differ
diff -ruN xv6-public/echo.sym xv6-public-partb/echo.sym
--- xv6-public/echo.sym	2022-08-13 16:28:54.016436000 +0530
+++ xv6-public-partb/echo.sym	2022-10-31 11:08:57.632113180 +0530
@@ -1,7 +1,8 @@
 00000000 .text
-000007a8 .rodata
-000007cc .eh_frame
-00000a68 .bss
+000009e0 .rodata
+00000a0c .eh_frame
+00000d30 .data
+00000d40 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -14,11 +15,16 @@
 00000000 ulib.c
 00000000 printf.c
 00000390 printint
-000007b8 digits.1085
+000009f0 digits.1088
 00000000 umalloc.c
-00000a68 freep
-00000a6c base
+00000d40 freep
+00000d44 base
+00000000 random.c
+00000d60 mt
+00000d30 mti
+00000a04 mag01.989
 00000080 strcpy
+000007b0 sgenrand
 00000440 printf
 000002b0 memmove
 0000032b mknod
@@ -26,6 +32,7 @@
 00000363 getpid
 000006a0 malloc
 00000373 sleep
+00000950 random_at_most
 000002f3 pipe
 00000303 write
 0000033b fstat
@@ -38,20 +45,22 @@
 000002db fork
 0000036b sbrk
 0000037b uptime
-00000a68 __bss_start
+00000d34 __bss_start
 00000140 memset
 00000000 main
 000000b0 strcmp
 0000035b dup
+000007f0 genrand
 00000220 stat
-00000a68 _edata
-00000a74 _end
+00000d34 _edata
+00001720 _end
 00000343 link
 000002e3 exit
 00000270 atoi
 00000100 strlen
 00000323 open
 00000160 strchr
+00000990 randomrange
 0000034b mkdir
 0000030b close
 00000610 free
diff -ruN xv6-public/exec.c xv6-public-partb/exec.c
--- xv6-public/exec.c	2022-08-11 13:14:39.064069000 +0530
+++ xv6-public-partb/exec.c	2022-10-31 11:04:18.536635042 +0530
@@ -6,6 +6,7 @@
 #include "defs.h"
 #include "x86.h"
 #include "elf.h"
+#include "fcntl.h"
 
 int
 exec(char *path, char **argv)
@@ -111,4 +112,4 @@
     end_op();
   }
   return -1;
-}
+}
\ No newline at end of file
diff -ruN xv6-public/exec.d xv6-public-partb/exec.d
--- xv6-public/exec.d	2022-08-13 16:28:43.167730000 +0530
+++ xv6-public-partb/exec.d	2022-10-31 11:09:02.802697184 +0530
@@ -1,2 +1,2 @@
 exec.o: exec.c /usr/include/stdc-predef.h types.h param.h memlayout.h \
- mmu.h proc.h defs.h x86.h elf.h
+ mmu.h proc.h defs.h x86.h elf.h fcntl.h
Binary files xv6-public/exec.o and xv6-public-partb/exec.o differ
Binary files xv6-public/file.o and xv6-public-partb/file.o differ
Binary files xv6-public/_forktest and xv6-public-partb/_forktest differ
diff -ruN xv6-public/forktest.asm xv6-public-partb/forktest.asm
--- xv6-public/forktest.asm	2022-08-13 16:28:54.096410000 +0530
+++ xv6-public-partb/forktest.asm	2022-10-31 11:08:57.784189181 +0530
@@ -289,6 +289,7 @@
  221:	89 d7                	mov    %edx,%edi
  223:	fc                   	cld    
  224:	f3 aa                	rep stos %al,%es:(%edi)
+
   stosb(dst, c, n);
   return dst;
 }
@@ -540,7 +541,6 @@
  3a1:	39 f8                	cmp    %edi,%eax
  3a3:	75 fb                	jne    3a0 <memmove+0x20>
   return vdst;
-}
  3a5:	5e                   	pop    %esi
  3a6:	89 d0                	mov    %edx,%eax
  3a8:	5f                   	pop    %edi
@@ -548,132 +548,106 @@
  3aa:	c3                   	ret    
 
 000003ab <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  3ab:	b8 01 00 00 00       	mov    $0x1,%eax
  3b0:	cd 40                	int    $0x40
  3b2:	c3                   	ret    
 
 000003b3 <exit>:
-SYSCALL(exit)
  3b3:	b8 02 00 00 00       	mov    $0x2,%eax
  3b8:	cd 40                	int    $0x40
  3ba:	c3                   	ret    
 
 000003bb <wait>:
-SYSCALL(wait)
  3bb:	b8 03 00 00 00       	mov    $0x3,%eax
  3c0:	cd 40                	int    $0x40
  3c2:	c3                   	ret    
 
 000003c3 <pipe>:
-SYSCALL(pipe)
  3c3:	b8 04 00 00 00       	mov    $0x4,%eax
  3c8:	cd 40                	int    $0x40
  3ca:	c3                   	ret    
 
 000003cb <read>:
-SYSCALL(read)
  3cb:	b8 05 00 00 00       	mov    $0x5,%eax
  3d0:	cd 40                	int    $0x40
  3d2:	c3                   	ret    
 
 000003d3 <write>:
-SYSCALL(write)
  3d3:	b8 10 00 00 00       	mov    $0x10,%eax
  3d8:	cd 40                	int    $0x40
  3da:	c3                   	ret    
 
 000003db <close>:
-SYSCALL(close)
  3db:	b8 15 00 00 00       	mov    $0x15,%eax
  3e0:	cd 40                	int    $0x40
  3e2:	c3                   	ret    
 
 000003e3 <kill>:
-SYSCALL(kill)
  3e3:	b8 06 00 00 00       	mov    $0x6,%eax
  3e8:	cd 40                	int    $0x40
  3ea:	c3                   	ret    
 
 000003eb <exec>:
-SYSCALL(exec)
  3eb:	b8 07 00 00 00       	mov    $0x7,%eax
  3f0:	cd 40                	int    $0x40
  3f2:	c3                   	ret    
 
 000003f3 <open>:
-SYSCALL(open)
  3f3:	b8 0f 00 00 00       	mov    $0xf,%eax
  3f8:	cd 40                	int    $0x40
  3fa:	c3                   	ret    
 
 000003fb <mknod>:
-SYSCALL(mknod)
  3fb:	b8 11 00 00 00       	mov    $0x11,%eax
  400:	cd 40                	int    $0x40
  402:	c3                   	ret    
 
 00000403 <unlink>:
-SYSCALL(unlink)
  403:	b8 12 00 00 00       	mov    $0x12,%eax
  408:	cd 40                	int    $0x40
  40a:	c3                   	ret    
 
 0000040b <fstat>:
-SYSCALL(fstat)
  40b:	b8 08 00 00 00       	mov    $0x8,%eax
  410:	cd 40                	int    $0x40
  412:	c3                   	ret    
 
 00000413 <link>:
-SYSCALL(link)
  413:	b8 13 00 00 00       	mov    $0x13,%eax
  418:	cd 40                	int    $0x40
  41a:	c3                   	ret    
 
 0000041b <mkdir>:
-SYSCALL(mkdir)
  41b:	b8 14 00 00 00       	mov    $0x14,%eax
  420:	cd 40                	int    $0x40
  422:	c3                   	ret    
 
 00000423 <chdir>:
-SYSCALL(chdir)
  423:	b8 09 00 00 00       	mov    $0x9,%eax
  428:	cd 40                	int    $0x40
  42a:	c3                   	ret    
 
 0000042b <dup>:
-SYSCALL(dup)
  42b:	b8 0a 00 00 00       	mov    $0xa,%eax
  430:	cd 40                	int    $0x40
  432:	c3                   	ret    
 
 00000433 <getpid>:
-SYSCALL(getpid)
  433:	b8 0b 00 00 00       	mov    $0xb,%eax
  438:	cd 40                	int    $0x40
  43a:	c3                   	ret    
 
 0000043b <sbrk>:
-SYSCALL(sbrk)
  43b:	b8 0c 00 00 00       	mov    $0xc,%eax
  440:	cd 40                	int    $0x40
  442:	c3                   	ret    
 
 00000443 <sleep>:
-SYSCALL(sleep)
  443:	b8 0d 00 00 00       	mov    $0xd,%eax
  448:	cd 40                	int    $0x40
  44a:	c3                   	ret    
 
 0000044b <uptime>:
-SYSCALL(uptime)
  44b:	b8 0e 00 00 00       	mov    $0xe,%eax
  450:	cd 40                	int    $0x40
  452:	c3                   	ret    
Binary files xv6-public/forktest.o and xv6-public-partb/forktest.o differ
diff -ruN xv6-public/fs.c xv6-public-partb/fs.c
--- xv6-public/fs.c	2022-08-11 13:14:39.064069000 +0530
+++ xv6-public-partb/fs.c	2022-10-31 11:04:31.795261042 +0530
@@ -331,7 +331,9 @@
 void
 iput(struct inode *ip)
 {
+
   acquiresleep(&ip->lock);
+
   if(ip->valid && ip->nlink == 0){
     acquire(&icache.lock);
     int r = ip->ref;
@@ -667,4 +669,4 @@
 nameiparent(char *path, char *name)
 {
   return namex(path, 1, name);
-}
+}
\ No newline at end of file
Binary files xv6-public/fs.img and xv6-public-partb/fs.img differ
Binary files xv6-public/fs.o and xv6-public-partb/fs.o differ
Binary files xv6-public/_grep and xv6-public-partb/_grep differ
diff -ruN xv6-public/grep.asm xv6-public-partb/grep.asm
--- xv6-public/grep.asm	2022-08-13 16:28:54.216372000 +0530
+++ xv6-public-partb/grep.asm	2022-10-31 11:08:57.852223180 +0530
@@ -85,7 +85,7 @@
       printf(1, "grep: cannot open %s\n", argv[i]);
   77:	50                   	push   %eax
   78:	ff 33                	pushl  (%ebx)
-  7a:	68 88 0a 00 00       	push   $0xa88
+  7a:	68 c0 0c 00 00       	push   $0xcc0
   7f:	6a 01                	push   $0x1
   81:	e8 7a 06 00 00       	call   700 <printf>
       exit();
@@ -96,7 +96,7 @@
     printf(2, "usage: grep pattern [file ...]\n");
   90:	51                   	push   %ecx
   91:	51                   	push   %ecx
-  92:	68 68 0a 00 00       	push   $0xa68
+  92:	68 a0 0c 00 00       	push   $0xca0
   97:	6a 02                	push   $0x2
   99:	e8 62 06 00 00       	call   700 <printf>
     exit();
@@ -332,7 +332,7 @@
  258:	83 ec 04             	sub    $0x4,%esp
  25b:	29 c8                	sub    %ecx,%eax
  25d:	50                   	push   %eax
- 25e:	8d 81 80 0e 00 00    	lea    0xe80(%ecx),%eax
+ 25e:	8d 81 00 1b 00 00    	lea    0x1b00(%ecx),%eax
  264:	50                   	push   %eax
  265:	ff 75 0c             	pushl  0xc(%ebp)
  268:	e8 4e 03 00 00       	call   5bb <read>
@@ -343,9 +343,9 @@
  278:	01 45 e4             	add    %eax,-0x1c(%ebp)
  27b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
     p = buf;
- 27e:	bb 80 0e 00 00       	mov    $0xe80,%ebx
+ 27e:	bb 00 1b 00 00       	mov    $0x1b00,%ebx
     buf[m] = '\0';
- 283:	c6 81 80 0e 00 00 00 	movb   $0x0,0xe80(%ecx)
+ 283:	c6 81 00 1b 00 00 00 	movb   $0x0,0x1b00(%ecx)
     while((q = strchr(p, '\n')) != 0){
  28a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
  290:	83 ec 08             	sub    $0x8,%esp
@@ -390,7 +390,7 @@
  2dc:	89 d3                	mov    %edx,%ebx
  2de:	eb b0                	jmp    290 <grep+0x60>
     if(p == buf)
- 2e0:	81 fb 80 0e 00 00    	cmp    $0xe80,%ebx
+ 2e0:	81 fb 00 1b 00 00    	cmp    $0x1b00,%ebx
  2e6:	74 38                	je     320 <grep+0xf0>
     if(m > 0){
  2e8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
@@ -401,12 +401,12 @@
       memmove(buf, p, m);
  2f5:	83 ec 04             	sub    $0x4,%esp
       m -= p - buf;
- 2f8:	2d 80 0e 00 00       	sub    $0xe80,%eax
+ 2f8:	2d 00 1b 00 00       	sub    $0x1b00,%eax
  2fd:	29 c1                	sub    %eax,%ecx
       memmove(buf, p, m);
  2ff:	51                   	push   %ecx
  300:	53                   	push   %ebx
- 301:	68 80 0e 00 00       	push   $0xe80
+ 301:	68 00 1b 00 00       	push   $0x1b00
       m -= p - buf;
  306:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
       memmove(buf, p, m);
@@ -569,6 +569,7 @@
  411:	89 d7                	mov    %edx,%edi
  413:	fc                   	cld    
  414:	f3 aa                	rep stos %al,%es:(%edi)
+
   stosb(dst, c, n);
   return dst;
 }
@@ -820,7 +821,6 @@
  591:	39 f8                	cmp    %edi,%eax
  593:	75 fb                	jne    590 <memmove+0x20>
   return vdst;
-}
  595:	5e                   	pop    %esi
  596:	89 d0                	mov    %edx,%eax
  598:	5f                   	pop    %edi
@@ -828,132 +828,106 @@
  59a:	c3                   	ret    
 
 0000059b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  59b:	b8 01 00 00 00       	mov    $0x1,%eax
  5a0:	cd 40                	int    $0x40
  5a2:	c3                   	ret    
 
 000005a3 <exit>:
-SYSCALL(exit)
  5a3:	b8 02 00 00 00       	mov    $0x2,%eax
  5a8:	cd 40                	int    $0x40
  5aa:	c3                   	ret    
 
 000005ab <wait>:
-SYSCALL(wait)
  5ab:	b8 03 00 00 00       	mov    $0x3,%eax
  5b0:	cd 40                	int    $0x40
  5b2:	c3                   	ret    
 
 000005b3 <pipe>:
-SYSCALL(pipe)
  5b3:	b8 04 00 00 00       	mov    $0x4,%eax
  5b8:	cd 40                	int    $0x40
  5ba:	c3                   	ret    
 
 000005bb <read>:
-SYSCALL(read)
  5bb:	b8 05 00 00 00       	mov    $0x5,%eax
  5c0:	cd 40                	int    $0x40
  5c2:	c3                   	ret    
 
 000005c3 <write>:
-SYSCALL(write)
  5c3:	b8 10 00 00 00       	mov    $0x10,%eax
  5c8:	cd 40                	int    $0x40
  5ca:	c3                   	ret    
 
 000005cb <close>:
-SYSCALL(close)
  5cb:	b8 15 00 00 00       	mov    $0x15,%eax
  5d0:	cd 40                	int    $0x40
  5d2:	c3                   	ret    
 
 000005d3 <kill>:
-SYSCALL(kill)
  5d3:	b8 06 00 00 00       	mov    $0x6,%eax
  5d8:	cd 40                	int    $0x40
  5da:	c3                   	ret    
 
 000005db <exec>:
-SYSCALL(exec)
  5db:	b8 07 00 00 00       	mov    $0x7,%eax
  5e0:	cd 40                	int    $0x40
  5e2:	c3                   	ret    
 
 000005e3 <open>:
-SYSCALL(open)
  5e3:	b8 0f 00 00 00       	mov    $0xf,%eax
  5e8:	cd 40                	int    $0x40
  5ea:	c3                   	ret    
 
 000005eb <mknod>:
-SYSCALL(mknod)
  5eb:	b8 11 00 00 00       	mov    $0x11,%eax
  5f0:	cd 40                	int    $0x40
  5f2:	c3                   	ret    
 
 000005f3 <unlink>:
-SYSCALL(unlink)
  5f3:	b8 12 00 00 00       	mov    $0x12,%eax
  5f8:	cd 40                	int    $0x40
  5fa:	c3                   	ret    
 
 000005fb <fstat>:
-SYSCALL(fstat)
  5fb:	b8 08 00 00 00       	mov    $0x8,%eax
  600:	cd 40                	int    $0x40
  602:	c3                   	ret    
 
 00000603 <link>:
-SYSCALL(link)
  603:	b8 13 00 00 00       	mov    $0x13,%eax
  608:	cd 40                	int    $0x40
  60a:	c3                   	ret    
 
 0000060b <mkdir>:
-SYSCALL(mkdir)
  60b:	b8 14 00 00 00       	mov    $0x14,%eax
  610:	cd 40                	int    $0x40
  612:	c3                   	ret    
 
 00000613 <chdir>:
-SYSCALL(chdir)
  613:	b8 09 00 00 00       	mov    $0x9,%eax
  618:	cd 40                	int    $0x40
  61a:	c3                   	ret    
 
 0000061b <dup>:
-SYSCALL(dup)
  61b:	b8 0a 00 00 00       	mov    $0xa,%eax
  620:	cd 40                	int    $0x40
  622:	c3                   	ret    
 
 00000623 <getpid>:
-SYSCALL(getpid)
  623:	b8 0b 00 00 00       	mov    $0xb,%eax
  628:	cd 40                	int    $0x40
  62a:	c3                   	ret    
 
 0000062b <sbrk>:
-SYSCALL(sbrk)
  62b:	b8 0c 00 00 00       	mov    $0xc,%eax
  630:	cd 40                	int    $0x40
  632:	c3                   	ret    
 
 00000633 <sleep>:
-SYSCALL(sleep)
  633:	b8 0d 00 00 00       	mov    $0xd,%eax
  638:	cd 40                	int    $0x40
  63a:	c3                   	ret    
 
 0000063b <uptime>:
-SYSCALL(uptime)
  63b:	b8 0e 00 00 00       	mov    $0xe,%eax
  640:	cd 40                	int    $0x40
  642:	c3                   	ret    
@@ -1011,7 +985,7 @@
  682:	31 d2                	xor    %edx,%edx
  684:	89 cf                	mov    %ecx,%edi
  686:	f7 75 c4             	divl   -0x3c(%ebp)
- 689:	0f b6 92 a8 0a 00 00 	movzbl 0xaa8(%edx),%edx
+ 689:	0f b6 92 e0 0c 00 00 	movzbl 0xce0(%edx),%edx
  690:	89 45 c0             	mov    %eax,-0x40(%ebp)
  693:	89 d8                	mov    %ebx,%eax
  695:	8d 5b 01             	lea    0x1(%ebx),%ebx
@@ -1282,7 +1256,7 @@
  881:	8b 5d 08             	mov    0x8(%ebp),%ebx
  884:	eb 1a                	jmp    8a0 <printf+0x1a0>
           s = "(null)";
- 886:	bb 9e 0a 00 00       	mov    $0xa9e,%ebx
+ 886:	bb d6 0c 00 00       	mov    $0xcd6,%ebx
         while(*s != 0){
  88b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  88e:	b8 28 00 00 00       	mov    $0x28,%eax
@@ -1328,7 +1302,7 @@
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8d5:	a1 60 0e 00 00       	mov    0xe60,%eax
+ 8d5:	a1 20 11 00 00       	mov    0x1120,%eax
 {
  8da:	89 e5                	mov    %esp,%ebp
  8dc:	57                   	push   %edi
@@ -1384,7 +1358,7 @@
 }
  921:	5b                   	pop    %ebx
   freep = p;
- 922:	a3 60 0e 00 00       	mov    %eax,0xe60
+ 922:	a3 20 11 00 00       	mov    %eax,0x1120
 }
  927:	5e                   	pop    %esi
  928:	5f                   	pop    %edi
@@ -1407,7 +1381,7 @@
     p->s.size += bp->s.size;
  947:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 94a:	a3 60 0e 00 00       	mov    %eax,0xe60
+ 94a:	a3 20 11 00 00       	mov    %eax,0x1120
     p->s.size += bp->s.size;
  94f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
@@ -1441,7 +1415,7 @@
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  96d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 970:	8b 3d 60 0e 00 00    	mov    0xe60,%edi
+ 970:	8b 3d 20 11 00 00    	mov    0x1120,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  976:	8d 70 07             	lea    0x7(%eax),%esi
  979:	c1 ee 03             	shr    $0x3,%esi
@@ -1472,7 +1446,7 @@
  9b2:	8b 4a 04             	mov    0x4(%edx),%ecx
  9b5:	39 f1                	cmp    %esi,%ecx
  9b7:	73 4f                	jae    a08 <malloc+0xa8>
- 9b9:	8b 3d 60 0e 00 00    	mov    0xe60,%edi
+ 9b9:	8b 3d 20 11 00 00    	mov    0x1120,%edi
  9bf:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
@@ -1498,7 +1472,7 @@
  9e1:	50                   	push   %eax
  9e2:	e8 e9 fe ff ff       	call   8d0 <free>
   return freep;
- 9e7:	a1 60 0e 00 00       	mov    0xe60,%eax
+ 9e7:	a1 20 11 00 00       	mov    0x1120,%eax
       if((p = morecore(nunits)) == 0)
  9ec:	83 c4 10             	add    $0x10,%esp
  9ef:	85 c0                	test   %eax,%eax
@@ -1530,7 +1504,7 @@
         p->s.size = nunits;
  a14:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- a17:	a3 60 0e 00 00       	mov    %eax,0xe60
+ a17:	a3 20 11 00 00       	mov    %eax,0x1120
 }
  a1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
@@ -1544,17 +1518,17 @@
  a27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  a2e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- a30:	c7 05 60 0e 00 00 64 	movl   $0xe64,0xe60
- a37:	0e 00 00 
+ a30:	c7 05 20 11 00 00 24 	movl   $0x1124,0x1120
+ a37:	11 00 00 
     base.s.size = 0;
- a3a:	bf 64 0e 00 00       	mov    $0xe64,%edi
+ a3a:	bf 24 11 00 00       	mov    $0x1124,%edi
     base.s.ptr = freep = prevp = &base;
- a3f:	c7 05 64 0e 00 00 64 	movl   $0xe64,0xe64
- a46:	0e 00 00 
+ a3f:	c7 05 24 11 00 00 24 	movl   $0x1124,0x1124
+ a46:	11 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
  a49:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- a4b:	c7 05 68 0e 00 00 00 	movl   $0x0,0xe68
+ a4b:	c7 05 28 11 00 00 00 	movl   $0x0,0x1128
  a52:	00 00 00 
     if(p->s.size >= nunits){
  a55:	e9 36 ff ff ff       	jmp    990 <malloc+0x30>
@@ -1563,3 +1537,279 @@
  a60:	8b 0a                	mov    (%edx),%ecx
  a62:	89 08                	mov    %ecx,(%eax)
  a64:	eb b1                	jmp    a17 <malloc+0xb7>
+ a66:	66 90                	xchg   %ax,%ax
+ a68:	66 90                	xchg   %ax,%ax
+ a6a:	66 90                	xchg   %ax,%ax
+ a6c:	66 90                	xchg   %ax,%ax
+ a6e:	66 90                	xchg   %ax,%ax
+
+00000a70 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ a70:	f3 0f 1e fb          	endbr32 
+ a74:	55                   	push   %ebp
+ a75:	b8 44 11 00 00       	mov    $0x1144,%eax
+ a7a:	89 e5                	mov    %esp,%ebp
+ a7c:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ a7f:	89 15 40 11 00 00    	mov    %edx,0x1140
+    for (mti=1; mti<N; mti++)
+ a85:	eb 0c                	jmp    a93 <sgenrand+0x23>
+ a87:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a8e:	66 90                	xchg   %ax,%ax
+ a90:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ a93:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ a99:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ a9b:	3d fc 1a 00 00       	cmp    $0x1afc,%eax
+ aa0:	75 ee                	jne    a90 <sgenrand+0x20>
+ aa2:	c7 05 0c 11 00 00 70 	movl   $0x270,0x110c
+ aa9:	02 00 00 
+}
+ aac:	5d                   	pop    %ebp
+ aad:	c3                   	ret    
+ aae:	66 90                	xchg   %ax,%ax
+
+00000ab0 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ ab0:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ ab4:	a1 0c 11 00 00       	mov    0x110c,%eax
+ ab9:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ abe:	7f 3c                	jg     afc <genrand+0x4c>
+ ac0:	8d 50 01             	lea    0x1(%eax),%edx
+ ac3:	8b 04 85 40 11 00 00 	mov    0x1140(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ aca:	89 15 0c 11 00 00    	mov    %edx,0x110c
+    y ^= TEMPERING_SHIFT_U(y);
+ ad0:	89 c2                	mov    %eax,%edx
+ ad2:	c1 ea 0b             	shr    $0xb,%edx
+ ad5:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ ad7:	89 d0                	mov    %edx,%eax
+ ad9:	c1 e0 07             	shl    $0x7,%eax
+ adc:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ ae1:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ ae3:	89 d0                	mov    %edx,%eax
+ ae5:	c1 e0 0f             	shl    $0xf,%eax
+ ae8:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ aed:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ aef:	89 c2                	mov    %eax,%edx
+ af1:	c1 ea 12             	shr    $0x12,%edx
+ af4:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ af6:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ afb:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ afc:	3d 71 02 00 00       	cmp    $0x271,%eax
+ b01:	0f 84 d2 00 00 00    	je     bd9 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ b07:	31 c0                	xor    %eax,%eax
+ b09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ b10:	8b 0c 85 40 11 00 00 	mov    0x1140(,%eax,4),%ecx
+ b17:	83 c0 01             	add    $0x1,%eax
+ b1a:	8b 14 85 40 11 00 00 	mov    0x1140(,%eax,4),%edx
+ b21:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ b27:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ b2d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ b2f:	89 d1                	mov    %edx,%ecx
+ b31:	83 e2 01             	and    $0x1,%edx
+ b34:	d1 e9                	shr    %ecx
+ b36:	33 0c 85 70 17 00 00 	xor    0x1770(,%eax,4),%ecx
+ b3d:	33 0c 95 f4 0c 00 00 	xor    0xcf4(,%edx,4),%ecx
+ b44:	89 0c 85 3c 11 00 00 	mov    %ecx,0x113c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ b4b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ b50:	75 be                	jne    b10 <genrand+0x60>
+ b52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ b58:	8b 0c 85 40 11 00 00 	mov    0x1140(,%eax,4),%ecx
+ b5f:	83 c0 01             	add    $0x1,%eax
+ b62:	8b 14 85 40 11 00 00 	mov    0x1140(,%eax,4),%edx
+ b69:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ b6f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ b75:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ b77:	89 d1                	mov    %edx,%ecx
+ b79:	83 e2 01             	and    $0x1,%edx
+ b7c:	d1 e9                	shr    %ecx
+ b7e:	33 0c 85 b0 0d 00 00 	xor    0xdb0(,%eax,4),%ecx
+ b85:	33 0c 95 f4 0c 00 00 	xor    0xcf4(,%edx,4),%ecx
+ b8c:	89 0c 85 3c 11 00 00 	mov    %ecx,0x113c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ b93:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ b98:	75 be                	jne    b58 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ b9a:	a1 40 11 00 00       	mov    0x1140,%eax
+ b9f:	8b 0d fc 1a 00 00    	mov    0x1afc,%ecx
+ ba5:	89 c2                	mov    %eax,%edx
+ ba7:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ bad:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ bb3:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ bb5:	89 ca                	mov    %ecx,%edx
+ bb7:	83 e1 01             	and    $0x1,%ecx
+ bba:	d1 ea                	shr    %edx
+ bbc:	33 15 70 17 00 00    	xor    0x1770,%edx
+ bc2:	33 14 8d f4 0c 00 00 	xor    0xcf4(,%ecx,4),%edx
+ bc9:	89 15 fc 1a 00 00    	mov    %edx,0x1afc
+ bcf:	ba 01 00 00 00       	mov    $0x1,%edx
+ bd4:	e9 f1 fe ff ff       	jmp    aca <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ bd9:	b8 44 11 00 00       	mov    $0x1144,%eax
+ bde:	b9 fc 1a 00 00       	mov    $0x1afc,%ecx
+ be3:	ba 05 11 00 00       	mov    $0x1105,%edx
+ be8:	c7 05 40 11 00 00 05 	movl   $0x1105,0x1140
+ bef:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ bf2:	eb 07                	jmp    bfb <genrand+0x14b>
+ bf4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ bf8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ bfb:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ c01:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ c03:	39 c1                	cmp    %eax,%ecx
+ c05:	75 f1                	jne    bf8 <genrand+0x148>
+ c07:	e9 fb fe ff ff       	jmp    b07 <genrand+0x57>
+ c0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000c10 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ c10:	f3 0f 1e fb          	endbr32 
+ c14:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ c15:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ c17:	89 e5                	mov    %esp,%ebp
+ c19:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ c1a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ c1d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ c1e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ c23:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ c26:	89 d8                	mov    %ebx,%eax
+ c28:	f7 f1                	div    %ecx
+ c2a:	89 c6                	mov    %eax,%esi
+ c2c:	29 d3                	sub    %edx,%ebx
+ c2e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ c30:	e8 7b fe ff ff       	call   ab0 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ c35:	39 d8                	cmp    %ebx,%eax
+ c37:	73 f7                	jae    c30 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ c39:	31 d2                	xor    %edx,%edx
+}
+ c3b:	5b                   	pop    %ebx
+  return x/bin_size;
+ c3c:	f7 f6                	div    %esi
+}
+ c3e:	5e                   	pop    %esi
+ c3f:	5d                   	pop    %ebp
+ c40:	c3                   	ret    
+ c41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ c48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ c4f:	90                   	nop
+
+00000c50 <randomrange>:
+
+int randomrange(int low, int high){
+ c50:	f3 0f 1e fb          	endbr32 
+ c54:	55                   	push   %ebp
+ c55:	89 e5                	mov    %esp,%ebp
+ c57:	57                   	push   %edi
+ c58:	56                   	push   %esi
+ c59:	53                   	push   %ebx
+ c5a:	83 ec 0c             	sub    $0xc,%esp
+ c5d:	8b 75 08             	mov    0x8(%ebp),%esi
+ c60:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ c63:	39 f0                	cmp    %esi,%eax
+ c65:	7d 06                	jge    c6d <randomrange+0x1d>
+ c67:	89 f2                	mov    %esi,%edx
+ c69:	89 c6                	mov    %eax,%esi
+ c6b:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ c6d:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ c6f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ c74:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ c76:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ c79:	89 d8                	mov    %ebx,%eax
+ c7b:	f7 f1                	div    %ecx
+ c7d:	89 c7                	mov    %eax,%edi
+ c7f:	29 d3                	sub    %edx,%ebx
+ c81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ c88:	e8 23 fe ff ff       	call   ab0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ c8d:	39 d8                	cmp    %ebx,%eax
+ c8f:	73 f7                	jae    c88 <randomrange+0x38>
+  return x/bin_size;
+ c91:	31 d2                	xor    %edx,%edx
+  return val;
+ c93:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ c96:	f7 f7                	div    %edi
+ c98:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ c99:	01 f0                	add    %esi,%eax
+ c9b:	5e                   	pop    %esi
+ c9c:	5f                   	pop    %edi
+ c9d:	5d                   	pop    %ebp
+ c9e:	c3                   	ret    
Binary files xv6-public/grep.o and xv6-public-partb/grep.o differ
diff -ruN xv6-public/grep.sym xv6-public-partb/grep.sym
--- xv6-public/grep.sym	2022-08-13 16:28:54.220371000 +0530
+++ xv6-public-partb/grep.sym	2022-10-31 11:08:57.852223180 +0530
@@ -1,7 +1,8 @@
 00000000 .text
-00000a68 .rodata
-00000abc .eh_frame
-00000e60 .bss
+00000ca0 .rodata
+00000cfc .eh_frame
+0000110c .data
+00001120 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -14,11 +15,16 @@
 00000000 ulib.c
 00000000 printf.c
 00000650 printint
-00000aa8 digits.1085
+00000ce0 digits.1088
 00000000 umalloc.c
-00000e60 freep
-00000e64 base
+00001120 freep
+00001124 base
+00000000 random.c
+00001140 mt
+0000110c mti
+00000cf4 mag01.989
 00000340 strcpy
+00000a70 sgenrand
 00000700 printf
 00000570 memmove
 00000120 matchhere
@@ -28,6 +34,7 @@
 00000230 grep
 00000960 malloc
 00000633 sleep
+00000c10 random_at_most
 000005b3 pipe
 000005c3 write
 000005fb fstat
@@ -40,16 +47,17 @@
 0000059b fork
 0000062b sbrk
 0000063b uptime
-00000e44 __bss_start
+00001110 __bss_start
 00000400 memset
 00000000 main
 000000c0 matchstar
 00000370 strcmp
 0000061b dup
-00000e80 buf
+00001b00 buf
+00000ab0 genrand
 000004e0 stat
-00000e44 _edata
-00001280 _end
+00001110 _edata
+00001f00 _end
 000001c0 match
 00000603 link
 000005a3 exit
@@ -57,6 +65,7 @@
 000003c0 strlen
 000005e3 open
 00000420 strchr
+00000c50 randomrange
 0000060b mkdir
 000005cb close
 000008d0 free
Binary files xv6-public/ide.o and xv6-public-partb/ide.o differ
Binary files xv6-public/_init and xv6-public-partb/_init differ
diff -ruN xv6-public/init.asm xv6-public-partb/init.asm
--- xv6-public/init.asm	2022-08-13 16:28:54.264357000 +0530
+++ xv6-public-partb/init.asm	2022-10-31 11:08:58.124359180 +0530
@@ -24,7 +24,7 @@
   if(open("console", O_RDWR) < 0){
   13:	83 ec 08             	sub    $0x8,%esp
   16:	6a 02                	push   $0x2
-  18:	68 18 08 00 00       	push   $0x818
+  18:	68 50 0a 00 00       	push   $0xa50
   1d:	e8 71 03 00 00       	call   393 <open>
   22:	83 c4 10             	add    $0x10,%esp
   25:	85 c0                	test   %eax,%eax
@@ -46,7 +46,7 @@
   for(;;){
     printf(1, "init: starting sh\n");
   50:	83 ec 08             	sub    $0x8,%esp
-  53:	68 20 08 00 00       	push   $0x820
+  53:	68 58 0a 00 00       	push   $0xa58
   58:	6a 01                	push   $0x1
   5a:	e8 51 04 00 00       	call   4b0 <printf>
     pid = fork();
@@ -76,7 +76,7 @@
   7b:	74 d3                	je     50 <main+0x50>
       printf(1, "zombie!\n");
   7d:	83 ec 08             	sub    $0x8,%esp
-  80:	68 5f 08 00 00       	push   $0x85f
+  80:	68 97 0a 00 00       	push   $0xa97
   85:	6a 01                	push   $0x1
   87:	e8 24 04 00 00       	call   4b0 <printf>
   8c:	83 c4 10             	add    $0x10,%esp
@@ -84,7 +84,7 @@
       printf(1, "init: fork failed\n");
   91:	53                   	push   %ebx
   92:	53                   	push   %ebx
-  93:	68 33 08 00 00       	push   $0x833
+  93:	68 6b 0a 00 00       	push   $0xa6b
   98:	6a 01                	push   $0x1
   9a:	e8 11 04 00 00       	call   4b0 <printf>
       exit();
@@ -92,13 +92,13 @@
       exec("sh", argv);
   a4:	50                   	push   %eax
   a5:	50                   	push   %eax
-  a6:	68 1c 0b 00 00       	push   $0xb1c
-  ab:	68 46 08 00 00       	push   $0x846
+  a6:	68 e4 0d 00 00       	push   $0xde4
+  ab:	68 7e 0a 00 00       	push   $0xa7e
   b0:	e8 d6 02 00 00       	call   38b <exec>
       printf(1, "init: exec sh failed\n");
   b5:	5a                   	pop    %edx
   b6:	59                   	pop    %ecx
-  b7:	68 49 08 00 00       	push   $0x849
+  b7:	68 81 0a 00 00       	push   $0xa81
   bc:	6a 01                	push   $0x1
   be:	e8 ed 03 00 00       	call   4b0 <printf>
       exit();
@@ -107,13 +107,13 @@
   c8:	50                   	push   %eax
   c9:	6a 01                	push   $0x1
   cb:	6a 01                	push   $0x1
-  cd:	68 18 08 00 00       	push   $0x818
+  cd:	68 50 0a 00 00       	push   $0xa50
   d2:	e8 c4 02 00 00       	call   39b <mknod>
     open("console", O_RDWR);
   d7:	58                   	pop    %eax
   d8:	5a                   	pop    %edx
   d9:	6a 02                	push   $0x2
-  db:	68 18 08 00 00       	push   $0x818
+  db:	68 50 0a 00 00       	push   $0xa50
   e0:	e8 ae 02 00 00       	call   393 <open>
   e5:	83 c4 10             	add    $0x10,%esp
   e8:	e9 40 ff ff ff       	jmp    2d <main+0x2d>
@@ -258,6 +258,7 @@
  1c1:	89 d7                	mov    %edx,%edi
  1c3:	fc                   	cld    
  1c4:	f3 aa                	rep stos %al,%es:(%edi)
+
   stosb(dst, c, n);
   return dst;
 }
@@ -509,7 +510,6 @@
  341:	39 f8                	cmp    %edi,%eax
  343:	75 fb                	jne    340 <memmove+0x20>
   return vdst;
-}
  345:	5e                   	pop    %esi
  346:	89 d0                	mov    %edx,%eax
  348:	5f                   	pop    %edi
@@ -517,132 +517,106 @@
  34a:	c3                   	ret    
 
 0000034b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  34b:	b8 01 00 00 00       	mov    $0x1,%eax
  350:	cd 40                	int    $0x40
  352:	c3                   	ret    
 
 00000353 <exit>:
-SYSCALL(exit)
  353:	b8 02 00 00 00       	mov    $0x2,%eax
  358:	cd 40                	int    $0x40
  35a:	c3                   	ret    
 
 0000035b <wait>:
-SYSCALL(wait)
  35b:	b8 03 00 00 00       	mov    $0x3,%eax
  360:	cd 40                	int    $0x40
  362:	c3                   	ret    
 
 00000363 <pipe>:
-SYSCALL(pipe)
  363:	b8 04 00 00 00       	mov    $0x4,%eax
  368:	cd 40                	int    $0x40
  36a:	c3                   	ret    
 
 0000036b <read>:
-SYSCALL(read)
  36b:	b8 05 00 00 00       	mov    $0x5,%eax
  370:	cd 40                	int    $0x40
  372:	c3                   	ret    
 
 00000373 <write>:
-SYSCALL(write)
  373:	b8 10 00 00 00       	mov    $0x10,%eax
  378:	cd 40                	int    $0x40
  37a:	c3                   	ret    
 
 0000037b <close>:
-SYSCALL(close)
  37b:	b8 15 00 00 00       	mov    $0x15,%eax
  380:	cd 40                	int    $0x40
  382:	c3                   	ret    
 
 00000383 <kill>:
-SYSCALL(kill)
  383:	b8 06 00 00 00       	mov    $0x6,%eax
  388:	cd 40                	int    $0x40
  38a:	c3                   	ret    
 
 0000038b <exec>:
-SYSCALL(exec)
  38b:	b8 07 00 00 00       	mov    $0x7,%eax
  390:	cd 40                	int    $0x40
  392:	c3                   	ret    
 
 00000393 <open>:
-SYSCALL(open)
  393:	b8 0f 00 00 00       	mov    $0xf,%eax
  398:	cd 40                	int    $0x40
  39a:	c3                   	ret    
 
 0000039b <mknod>:
-SYSCALL(mknod)
  39b:	b8 11 00 00 00       	mov    $0x11,%eax
  3a0:	cd 40                	int    $0x40
  3a2:	c3                   	ret    
 
 000003a3 <unlink>:
-SYSCALL(unlink)
  3a3:	b8 12 00 00 00       	mov    $0x12,%eax
  3a8:	cd 40                	int    $0x40
  3aa:	c3                   	ret    
 
 000003ab <fstat>:
-SYSCALL(fstat)
  3ab:	b8 08 00 00 00       	mov    $0x8,%eax
  3b0:	cd 40                	int    $0x40
  3b2:	c3                   	ret    
 
 000003b3 <link>:
-SYSCALL(link)
  3b3:	b8 13 00 00 00       	mov    $0x13,%eax
  3b8:	cd 40                	int    $0x40
  3ba:	c3                   	ret    
 
 000003bb <mkdir>:
-SYSCALL(mkdir)
  3bb:	b8 14 00 00 00       	mov    $0x14,%eax
  3c0:	cd 40                	int    $0x40
  3c2:	c3                   	ret    
 
 000003c3 <chdir>:
-SYSCALL(chdir)
  3c3:	b8 09 00 00 00       	mov    $0x9,%eax
  3c8:	cd 40                	int    $0x40
  3ca:	c3                   	ret    
 
 000003cb <dup>:
-SYSCALL(dup)
  3cb:	b8 0a 00 00 00       	mov    $0xa,%eax
  3d0:	cd 40                	int    $0x40
  3d2:	c3                   	ret    
 
 000003d3 <getpid>:
-SYSCALL(getpid)
  3d3:	b8 0b 00 00 00       	mov    $0xb,%eax
  3d8:	cd 40                	int    $0x40
  3da:	c3                   	ret    
 
 000003db <sbrk>:
-SYSCALL(sbrk)
  3db:	b8 0c 00 00 00       	mov    $0xc,%eax
  3e0:	cd 40                	int    $0x40
  3e2:	c3                   	ret    
 
 000003e3 <sleep>:
-SYSCALL(sleep)
  3e3:	b8 0d 00 00 00       	mov    $0xd,%eax
  3e8:	cd 40                	int    $0x40
  3ea:	c3                   	ret    
 
 000003eb <uptime>:
-SYSCALL(uptime)
  3eb:	b8 0e 00 00 00       	mov    $0xe,%eax
  3f0:	cd 40                	int    $0x40
  3f2:	c3                   	ret    
@@ -700,7 +674,7 @@
  432:	31 d2                	xor    %edx,%edx
  434:	89 cf                	mov    %ecx,%edi
  436:	f7 75 c4             	divl   -0x3c(%ebp)
- 439:	0f b6 92 70 08 00 00 	movzbl 0x870(%edx),%edx
+ 439:	0f b6 92 a8 0a 00 00 	movzbl 0xaa8(%edx),%edx
  440:	89 45 c0             	mov    %eax,-0x40(%ebp)
  443:	89 d8                	mov    %ebx,%eax
  445:	8d 5b 01             	lea    0x1(%ebx),%ebx
@@ -971,7 +945,7 @@
  631:	8b 5d 08             	mov    0x8(%ebp),%ebx
  634:	eb 1a                	jmp    650 <printf+0x1a0>
           s = "(null)";
- 636:	bb 68 08 00 00       	mov    $0x868,%ebx
+ 636:	bb a0 0a 00 00       	mov    $0xaa0,%ebx
         while(*s != 0){
  63b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  63e:	b8 28 00 00 00       	mov    $0x28,%eax
@@ -1017,7 +991,7 @@
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 685:	a1 24 0b 00 00       	mov    0xb24,%eax
+ 685:	a1 00 0e 00 00       	mov    0xe00,%eax
 {
  68a:	89 e5                	mov    %esp,%ebp
  68c:	57                   	push   %edi
@@ -1073,7 +1047,7 @@
 }
  6d1:	5b                   	pop    %ebx
   freep = p;
- 6d2:	a3 24 0b 00 00       	mov    %eax,0xb24
+ 6d2:	a3 00 0e 00 00       	mov    %eax,0xe00
 }
  6d7:	5e                   	pop    %esi
  6d8:	5f                   	pop    %edi
@@ -1096,7 +1070,7 @@
     p->s.size += bp->s.size;
  6f7:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 6fa:	a3 24 0b 00 00       	mov    %eax,0xb24
+ 6fa:	a3 00 0e 00 00       	mov    %eax,0xe00
     p->s.size += bp->s.size;
  6ff:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
@@ -1130,7 +1104,7 @@
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  71d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 720:	8b 3d 24 0b 00 00    	mov    0xb24,%edi
+ 720:	8b 3d 00 0e 00 00    	mov    0xe00,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  726:	8d 70 07             	lea    0x7(%eax),%esi
  729:	c1 ee 03             	shr    $0x3,%esi
@@ -1161,7 +1135,7 @@
  762:	8b 4a 04             	mov    0x4(%edx),%ecx
  765:	39 f1                	cmp    %esi,%ecx
  767:	73 4f                	jae    7b8 <malloc+0xa8>
- 769:	8b 3d 24 0b 00 00    	mov    0xb24,%edi
+ 769:	8b 3d 00 0e 00 00    	mov    0xe00,%edi
  76f:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
@@ -1187,7 +1161,7 @@
  791:	50                   	push   %eax
  792:	e8 e9 fe ff ff       	call   680 <free>
   return freep;
- 797:	a1 24 0b 00 00       	mov    0xb24,%eax
+ 797:	a1 00 0e 00 00       	mov    0xe00,%eax
       if((p = morecore(nunits)) == 0)
  79c:	83 c4 10             	add    $0x10,%esp
  79f:	85 c0                	test   %eax,%eax
@@ -1219,7 +1193,7 @@
         p->s.size = nunits;
  7c4:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 7c7:	a3 24 0b 00 00       	mov    %eax,0xb24
+ 7c7:	a3 00 0e 00 00       	mov    %eax,0xe00
 }
  7cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
@@ -1233,17 +1207,17 @@
  7d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  7de:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 7e0:	c7 05 24 0b 00 00 28 	movl   $0xb28,0xb24
- 7e7:	0b 00 00 
+ 7e0:	c7 05 00 0e 00 00 04 	movl   $0xe04,0xe00
+ 7e7:	0e 00 00 
     base.s.size = 0;
- 7ea:	bf 28 0b 00 00       	mov    $0xb28,%edi
+ 7ea:	bf 04 0e 00 00       	mov    $0xe04,%edi
     base.s.ptr = freep = prevp = &base;
- 7ef:	c7 05 28 0b 00 00 28 	movl   $0xb28,0xb28
- 7f6:	0b 00 00 
+ 7ef:	c7 05 04 0e 00 00 04 	movl   $0xe04,0xe04
+ 7f6:	0e 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
  7f9:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 7fb:	c7 05 2c 0b 00 00 00 	movl   $0x0,0xb2c
+ 7fb:	c7 05 08 0e 00 00 00 	movl   $0x0,0xe08
  802:	00 00 00 
     if(p->s.size >= nunits){
  805:	e9 36 ff ff ff       	jmp    740 <malloc+0x30>
@@ -1252,3 +1226,279 @@
  810:	8b 0a                	mov    (%edx),%ecx
  812:	89 08                	mov    %ecx,(%eax)
  814:	eb b1                	jmp    7c7 <malloc+0xb7>
+ 816:	66 90                	xchg   %ax,%ax
+ 818:	66 90                	xchg   %ax,%ax
+ 81a:	66 90                	xchg   %ax,%ax
+ 81c:	66 90                	xchg   %ax,%ax
+ 81e:	66 90                	xchg   %ax,%ax
+
+00000820 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 820:	f3 0f 1e fb          	endbr32 
+ 824:	55                   	push   %ebp
+ 825:	b8 24 0e 00 00       	mov    $0xe24,%eax
+ 82a:	89 e5                	mov    %esp,%ebp
+ 82c:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 82f:	89 15 20 0e 00 00    	mov    %edx,0xe20
+    for (mti=1; mti<N; mti++)
+ 835:	eb 0c                	jmp    843 <sgenrand+0x23>
+ 837:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 83e:	66 90                	xchg   %ax,%ax
+ 840:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 843:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 849:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 84b:	3d dc 17 00 00       	cmp    $0x17dc,%eax
+ 850:	75 ee                	jne    840 <sgenrand+0x20>
+ 852:	c7 05 ec 0d 00 00 70 	movl   $0x270,0xdec
+ 859:	02 00 00 
+}
+ 85c:	5d                   	pop    %ebp
+ 85d:	c3                   	ret    
+ 85e:	66 90                	xchg   %ax,%ax
+
+00000860 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 860:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 864:	a1 ec 0d 00 00       	mov    0xdec,%eax
+ 869:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 86e:	7f 3c                	jg     8ac <genrand+0x4c>
+ 870:	8d 50 01             	lea    0x1(%eax),%edx
+ 873:	8b 04 85 20 0e 00 00 	mov    0xe20(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 87a:	89 15 ec 0d 00 00    	mov    %edx,0xdec
+    y ^= TEMPERING_SHIFT_U(y);
+ 880:	89 c2                	mov    %eax,%edx
+ 882:	c1 ea 0b             	shr    $0xb,%edx
+ 885:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 887:	89 d0                	mov    %edx,%eax
+ 889:	c1 e0 07             	shl    $0x7,%eax
+ 88c:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 891:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 893:	89 d0                	mov    %edx,%eax
+ 895:	c1 e0 0f             	shl    $0xf,%eax
+ 898:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 89d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 89f:	89 c2                	mov    %eax,%edx
+ 8a1:	c1 ea 12             	shr    $0x12,%edx
+ 8a4:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 8a6:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 8ab:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 8ac:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 8b1:	0f 84 d2 00 00 00    	je     989 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 8b7:	31 c0                	xor    %eax,%eax
+ 8b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 8c0:	8b 0c 85 20 0e 00 00 	mov    0xe20(,%eax,4),%ecx
+ 8c7:	83 c0 01             	add    $0x1,%eax
+ 8ca:	8b 14 85 20 0e 00 00 	mov    0xe20(,%eax,4),%edx
+ 8d1:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8d7:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8dd:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8df:	89 d1                	mov    %edx,%ecx
+ 8e1:	83 e2 01             	and    $0x1,%edx
+ 8e4:	d1 e9                	shr    %ecx
+ 8e6:	33 0c 85 50 14 00 00 	xor    0x1450(,%eax,4),%ecx
+ 8ed:	33 0c 95 bc 0a 00 00 	xor    0xabc(,%edx,4),%ecx
+ 8f4:	89 0c 85 1c 0e 00 00 	mov    %ecx,0xe1c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 8fb:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 900:	75 be                	jne    8c0 <genrand+0x60>
+ 902:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 908:	8b 0c 85 20 0e 00 00 	mov    0xe20(,%eax,4),%ecx
+ 90f:	83 c0 01             	add    $0x1,%eax
+ 912:	8b 14 85 20 0e 00 00 	mov    0xe20(,%eax,4),%edx
+ 919:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 91f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 925:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 927:	89 d1                	mov    %edx,%ecx
+ 929:	83 e2 01             	and    $0x1,%edx
+ 92c:	d1 e9                	shr    %ecx
+ 92e:	33 0c 85 90 0a 00 00 	xor    0xa90(,%eax,4),%ecx
+ 935:	33 0c 95 bc 0a 00 00 	xor    0xabc(,%edx,4),%ecx
+ 93c:	89 0c 85 1c 0e 00 00 	mov    %ecx,0xe1c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 943:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 948:	75 be                	jne    908 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 94a:	a1 20 0e 00 00       	mov    0xe20,%eax
+ 94f:	8b 0d dc 17 00 00    	mov    0x17dc,%ecx
+ 955:	89 c2                	mov    %eax,%edx
+ 957:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 95d:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 963:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 965:	89 ca                	mov    %ecx,%edx
+ 967:	83 e1 01             	and    $0x1,%ecx
+ 96a:	d1 ea                	shr    %edx
+ 96c:	33 15 50 14 00 00    	xor    0x1450,%edx
+ 972:	33 14 8d bc 0a 00 00 	xor    0xabc(,%ecx,4),%edx
+ 979:	89 15 dc 17 00 00    	mov    %edx,0x17dc
+ 97f:	ba 01 00 00 00       	mov    $0x1,%edx
+ 984:	e9 f1 fe ff ff       	jmp    87a <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ 989:	b8 24 0e 00 00       	mov    $0xe24,%eax
+ 98e:	b9 dc 17 00 00       	mov    $0x17dc,%ecx
+ 993:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 998:	c7 05 20 0e 00 00 05 	movl   $0x1105,0xe20
+ 99f:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 9a2:	eb 07                	jmp    9ab <genrand+0x14b>
+ 9a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 9a8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 9ab:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 9b1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 9b3:	39 c1                	cmp    %eax,%ecx
+ 9b5:	75 f1                	jne    9a8 <genrand+0x148>
+ 9b7:	e9 fb fe ff ff       	jmp    8b7 <genrand+0x57>
+ 9bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000009c0 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 9c0:	f3 0f 1e fb          	endbr32 
+ 9c4:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 9c5:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 9c7:	89 e5                	mov    %esp,%ebp
+ 9c9:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 9ca:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 9cd:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 9ce:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 9d3:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 9d6:	89 d8                	mov    %ebx,%eax
+ 9d8:	f7 f1                	div    %ecx
+ 9da:	89 c6                	mov    %eax,%esi
+ 9dc:	29 d3                	sub    %edx,%ebx
+ 9de:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ 9e0:	e8 7b fe ff ff       	call   860 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 9e5:	39 d8                	cmp    %ebx,%eax
+ 9e7:	73 f7                	jae    9e0 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 9e9:	31 d2                	xor    %edx,%edx
+}
+ 9eb:	5b                   	pop    %ebx
+  return x/bin_size;
+ 9ec:	f7 f6                	div    %esi
+}
+ 9ee:	5e                   	pop    %esi
+ 9ef:	5d                   	pop    %ebp
+ 9f0:	c3                   	ret    
+ 9f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 9f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 9ff:	90                   	nop
+
+00000a00 <randomrange>:
+
+int randomrange(int low, int high){
+ a00:	f3 0f 1e fb          	endbr32 
+ a04:	55                   	push   %ebp
+ a05:	89 e5                	mov    %esp,%ebp
+ a07:	57                   	push   %edi
+ a08:	56                   	push   %esi
+ a09:	53                   	push   %ebx
+ a0a:	83 ec 0c             	sub    $0xc,%esp
+ a0d:	8b 75 08             	mov    0x8(%ebp),%esi
+ a10:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ a13:	39 f0                	cmp    %esi,%eax
+ a15:	7d 06                	jge    a1d <randomrange+0x1d>
+ a17:	89 f2                	mov    %esi,%edx
+ a19:	89 c6                	mov    %eax,%esi
+ a1b:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ a1d:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ a1f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ a24:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ a26:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ a29:	89 d8                	mov    %ebx,%eax
+ a2b:	f7 f1                	div    %ecx
+ a2d:	89 c7                	mov    %eax,%edi
+ a2f:	29 d3                	sub    %edx,%ebx
+ a31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ a38:	e8 23 fe ff ff       	call   860 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ a3d:	39 d8                	cmp    %ebx,%eax
+ a3f:	73 f7                	jae    a38 <randomrange+0x38>
+  return x/bin_size;
+ a41:	31 d2                	xor    %edx,%edx
+  return val;
+ a43:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ a46:	f7 f7                	div    %edi
+ a48:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ a49:	01 f0                	add    %esi,%eax
+ a4b:	5e                   	pop    %esi
+ a4c:	5f                   	pop    %edi
+ a4d:	5d                   	pop    %ebp
+ a4e:	c3                   	ret    
Binary files xv6-public/init.o and xv6-public-partb/init.o differ
diff -ruN xv6-public/init.sym xv6-public-partb/init.sym
--- xv6-public/init.sym	2022-08-13 16:28:54.268356000 +0530
+++ xv6-public-partb/init.sym	2022-10-31 11:08:58.148371180 +0530
@@ -1,8 +1,8 @@
 00000000 .text
-00000818 .rodata
-00000884 .eh_frame
-00000b1c .data
-00000b24 .bss
+00000a50 .rodata
+00000ac4 .eh_frame
+00000de4 .data
+00000e00 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -15,19 +15,25 @@
 00000000 ulib.c
 00000000 printf.c
 00000400 printint
-00000870 digits.1085
+00000aa8 digits.1088
 00000000 umalloc.c
-00000b24 freep
-00000b28 base
+00000e00 freep
+00000e04 base
+00000000 random.c
+00000e20 mt
+00000dec mti
+00000abc mag01.989
 000000f0 strcpy
+00000820 sgenrand
 000004b0 printf
-00000b1c argv
+00000de4 argv
 00000320 memmove
 0000039b mknod
 00000210 gets
 000003d3 getpid
 00000710 malloc
 000003e3 sleep
+000009c0 random_at_most
 00000363 pipe
 00000373 write
 000003ab fstat
@@ -40,20 +46,22 @@
 0000034b fork
 000003db sbrk
 000003eb uptime
-00000b24 __bss_start
+00000df0 __bss_start
 000001b0 memset
 00000000 main
 00000120 strcmp
 000003cb dup
+00000860 genrand
 00000290 stat
-00000b24 _edata
-00000b30 _end
+00000df0 _edata
+000017e0 _end
 000003b3 link
 00000353 exit
 000002e0 atoi
 00000170 strlen
 00000393 open
 000001d0 strchr
+00000a00 randomrange
 000003bb mkdir
 0000037b close
 00000680 free
Binary files xv6-public/ioapic.o and xv6-public-partb/ioapic.o differ
diff -ruN xv6-public/kalloc.c xv6-public-partb/kalloc.c
--- xv6-public/kalloc.c	2022-08-11 13:14:39.064069000 +0530
+++ xv6-public-partb/kalloc.c	2022-10-31 11:04:48.019369047 +0530
@@ -8,19 +8,20 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "spinlock.h"
+#include "proc.h"
 
 void freerange(void *vstart, void *vend);
 extern char end[]; // first address after kernel loaded from ELF file
                    // defined by the kernel linker script in kernel.ld
 
-struct run {
+struct run {          
   struct run *next;
 };
 
-struct {
+struct {            
   struct spinlock lock;
   int use_lock;
-  struct run *freelist;
+  struct run *freelist; 
 } kmem;
 
 // Initialization happens in two phases.
@@ -59,13 +60,19 @@
 void
 kfree(char *v)
 {
+
   struct run *r;
+  // struct proc *p=myproc();
 
-  if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
+  if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP){
     panic("kfree");
+  }
 
   // Fill with junk to catch dangling refs.
-  memset(v, 1, PGSIZE);
+  // memset(v, 1, PGSIZE);
+  for(int i=0;i<PGSIZE;i++){
+    v[i]=1;
+  }
 
   if(kmem.use_lock)
     acquire(&kmem.lock);
@@ -74,6 +81,17 @@
   kmem.freelist = r;
   if(kmem.use_lock)
     release(&kmem.lock);
+
+  //Wake up processes sleeping on sleeping channel.
+  if(kmem.use_lock)
+    acquire(&sleeping_channel_lock);
+  if(sleeping_channel_count){
+    wakeup(sleeping_channel);
+    sleeping_channel_count=0;
+  }
+  if(kmem.use_lock)
+    release(&sleeping_channel_lock);
+
 }
 
 // Allocate one 4096-byte page of physical memory.
@@ -93,4 +111,3 @@
     release(&kmem.lock);
   return (char*)r;
 }
-
diff -ruN xv6-public/kalloc.d xv6-public-partb/kalloc.d
--- xv6-public/kalloc.d	2022-08-13 16:28:43.651590000 +0530
+++ xv6-public-partb/kalloc.d	2022-10-31 11:09:03.931261186 +0530
@@ -1,2 +1,2 @@
 kalloc.o: kalloc.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h spinlock.h
+ memlayout.h mmu.h spinlock.h proc.h
Binary files xv6-public/kalloc.o and xv6-public-partb/kalloc.o differ
Binary files xv6-public/kbd.o and xv6-public-partb/kbd.o differ
Binary files xv6-public/kernel and xv6-public-partb/kernel differ
diff -ruN xv6-public/kernel.asm xv6-public-partb/kernel.asm
--- xv6-public/kernel.asm	2022-08-13 16:28:45.563028000 +0530
+++ xv6-public-partb/kernel.asm	2022-10-31 11:09:07.573081183 +0530
@@ -11,41 +11,16 @@
 8010000b:	e4                   	.byte 0xe4
 
 8010000c <entry>:
-
-# Entering xv6 on boot processor, with paging off.
-.globl entry
-entry:
-  # Turn on page size extension for 4Mbyte pages
-  movl    %cr4, %eax
 8010000c:	0f 20 e0             	mov    %cr4,%eax
-  orl     $(CR4_PSE), %eax
 8010000f:	83 c8 10             	or     $0x10,%eax
-  movl    %eax, %cr4
 80100012:	0f 22 e0             	mov    %eax,%cr4
-  # Set page directory
-  movl    $(V2P_WO(entrypgdir)), %eax
-80100015:	b8 00 90 10 00       	mov    $0x109000,%eax
-  movl    %eax, %cr3
+80100015:	b8 00 a0 10 00       	mov    $0x10a000,%eax
 8010001a:	0f 22 d8             	mov    %eax,%cr3
-  # Turn on paging.
-  movl    %cr0, %eax
 8010001d:	0f 20 c0             	mov    %cr0,%eax
-  orl     $(CR0_PG|CR0_WP), %eax
 80100020:	0d 00 00 01 80       	or     $0x80010000,%eax
-  movl    %eax, %cr0
 80100025:	0f 22 c0             	mov    %eax,%cr0
-
-  # Set up the stack pointer.
-  movl $(stack + KSTACKSIZE), %esp
-80100028:	bc c0 b5 10 80       	mov    $0x8010b5c0,%esp
-
-  # Jump to main(), and switch to executing at
-  # high addresses. The indirect call is needed because
-  # the assembler produces a PC-relative instruction
-  # for a direct jump.
-  mov $main, %eax
-8010002d:	b8 40 30 10 80       	mov    $0x80103040,%eax
-  jmp *%eax
+80100028:	bc d0 c5 10 80       	mov    $0x8010c5d0,%esp
+8010002d:	b8 b0 30 10 80       	mov    $0x801030b0,%eax
 80100032:	ff e0                	jmp    *%eax
 80100034:	66 90                	xchg   %ax,%ax
 80100036:	66 90                	xchg   %ax,%ax
@@ -71,22 +46,22 @@
   bcache.head.prev = &bcache.head;
   bcache.head.next = &bcache.head;
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-80100048:	bb f4 b5 10 80       	mov    $0x8010b5f4,%ebx
+80100048:	bb 14 c6 10 80       	mov    $0x8010c614,%ebx
 {
 8010004d:	83 ec 0c             	sub    $0xc,%esp
   initlock(&bcache.lock, "bcache");
-80100050:	68 e0 70 10 80       	push   $0x801070e0
-80100055:	68 c0 b5 10 80       	push   $0x8010b5c0
-8010005a:	e8 81 43 00 00       	call   801043e0 <initlock>
+80100050:	68 60 7e 10 80       	push   $0x80107e60
+80100055:	68 e0 c5 10 80       	push   $0x8010c5e0
+8010005a:	e8 d1 4f 00 00       	call   80105030 <initlock>
   bcache.head.next = &bcache.head;
 8010005f:	83 c4 10             	add    $0x10,%esp
-80100062:	b8 bc fc 10 80       	mov    $0x8010fcbc,%eax
+80100062:	b8 dc 0c 11 80       	mov    $0x80110cdc,%eax
   bcache.head.prev = &bcache.head;
-80100067:	c7 05 0c fd 10 80 bc 	movl   $0x8010fcbc,0x8010fd0c
-8010006e:	fc 10 80 
+80100067:	c7 05 2c 0d 11 80 dc 	movl   $0x80110cdc,0x80110d2c
+8010006e:	0c 11 80 
   bcache.head.next = &bcache.head;
-80100071:	c7 05 10 fd 10 80 bc 	movl   $0x8010fcbc,0x8010fd10
-80100078:	fc 10 80 
+80100071:	c7 05 30 0d 11 80 dc 	movl   $0x80110cdc,0x80110d30
+80100078:	0c 11 80 
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
 8010007b:	eb 05                	jmp    80100082 <binit+0x42>
 8010007d:	8d 76 00             	lea    0x0(%esi),%esi
@@ -98,13 +73,13 @@
 80100085:	83 ec 08             	sub    $0x8,%esp
 80100088:	8d 43 0c             	lea    0xc(%ebx),%eax
     b->prev = &bcache.head;
-8010008b:	c7 43 50 bc fc 10 80 	movl   $0x8010fcbc,0x50(%ebx)
+8010008b:	c7 43 50 dc 0c 11 80 	movl   $0x80110cdc,0x50(%ebx)
     initsleeplock(&b->lock, "buffer");
-80100092:	68 e7 70 10 80       	push   $0x801070e7
+80100092:	68 67 7e 10 80       	push   $0x80107e67
 80100097:	50                   	push   %eax
-80100098:	e8 03 42 00 00       	call   801042a0 <initsleeplock>
+80100098:	e8 53 4e 00 00       	call   80104ef0 <initsleeplock>
     bcache.head.next->prev = b;
-8010009d:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
+8010009d:	a1 30 0d 11 80       	mov    0x80110d30,%eax
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
 801000a2:	8d 93 5c 02 00 00    	lea    0x25c(%ebx),%edx
 801000a8:	83 c4 10             	add    $0x10,%esp
@@ -112,9 +87,9 @@
 801000ab:	89 58 50             	mov    %ebx,0x50(%eax)
     bcache.head.next = b;
 801000ae:	89 d8                	mov    %ebx,%eax
-801000b0:	89 1d 10 fd 10 80    	mov    %ebx,0x8010fd10
+801000b0:	89 1d 30 0d 11 80    	mov    %ebx,0x80110d30
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-801000b6:	81 fb 60 fa 10 80    	cmp    $0x8010fa60,%ebx
+801000b6:	81 fb 80 0a 11 80    	cmp    $0x80110a80,%ebx
 801000bc:	75 c2                	jne    80100080 <binit+0x40>
   }
 }
@@ -141,16 +116,16 @@
 801000dd:	8b 7d 08             	mov    0x8(%ebp),%edi
 801000e0:	8b 75 0c             	mov    0xc(%ebp),%esi
   acquire(&bcache.lock);
-801000e3:	68 c0 b5 10 80       	push   $0x8010b5c0
-801000e8:	e8 73 44 00 00       	call   80104560 <acquire>
+801000e3:	68 e0 c5 10 80       	push   $0x8010c5e0
+801000e8:	e8 c3 50 00 00       	call   801051b0 <acquire>
   for(b = bcache.head.next; b != &bcache.head; b = b->next){
-801000ed:	8b 1d 10 fd 10 80    	mov    0x8010fd10,%ebx
+801000ed:	8b 1d 30 0d 11 80    	mov    0x80110d30,%ebx
 801000f3:	83 c4 10             	add    $0x10,%esp
-801000f6:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+801000f6:	81 fb dc 0c 11 80    	cmp    $0x80110cdc,%ebx
 801000fc:	75 0d                	jne    8010010b <bread+0x3b>
 801000fe:	eb 20                	jmp    80100120 <bread+0x50>
 80100100:	8b 5b 54             	mov    0x54(%ebx),%ebx
-80100103:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+80100103:	81 fb dc 0c 11 80    	cmp    $0x80110cdc,%ebx
 80100109:	74 15                	je     80100120 <bread+0x50>
     if(b->dev == dev && b->blockno == blockno){
 8010010b:	3b 7b 04             	cmp    0x4(%ebx),%edi
@@ -164,12 +139,12 @@
 8010011b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8010011f:	90                   	nop
   for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
-80100120:	8b 1d 0c fd 10 80    	mov    0x8010fd0c,%ebx
-80100126:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+80100120:	8b 1d 2c 0d 11 80    	mov    0x80110d2c,%ebx
+80100126:	81 fb dc 0c 11 80    	cmp    $0x80110cdc,%ebx
 8010012c:	75 0d                	jne    8010013b <bread+0x6b>
 8010012e:	eb 70                	jmp    801001a0 <bread+0xd0>
 80100130:	8b 5b 50             	mov    0x50(%ebx),%ebx
-80100133:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+80100133:	81 fb dc 0c 11 80    	cmp    $0x80110cdc,%ebx
 80100139:	74 65                	je     801001a0 <bread+0xd0>
     if(b->refcnt == 0 && (b->flags & B_DIRTY) == 0) {
 8010013b:	8b 43 4c             	mov    0x4c(%ebx),%eax
@@ -187,12 +162,12 @@
 80100153:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
       release(&bcache.lock);
 8010015a:	83 ec 0c             	sub    $0xc,%esp
-8010015d:	68 c0 b5 10 80       	push   $0x8010b5c0
-80100162:	e8 b9 44 00 00       	call   80104620 <release>
+8010015d:	68 e0 c5 10 80       	push   $0x8010c5e0
+80100162:	e8 09 51 00 00       	call   80105270 <release>
       acquiresleep(&b->lock);
 80100167:	8d 43 0c             	lea    0xc(%ebx),%eax
 8010016a:	89 04 24             	mov    %eax,(%esp)
-8010016d:	e8 6e 41 00 00       	call   801042e0 <acquiresleep>
+8010016d:	e8 be 4d 00 00       	call   80104f30 <acquiresleep>
       return b;
 80100172:	83 c4 10             	add    $0x10,%esp
   struct buf *b;
@@ -229,7 +204,7 @@
 8010019e:	66 90                	xchg   %ax,%ax
   panic("bget: no buffers");
 801001a0:	83 ec 0c             	sub    $0xc,%esp
-801001a3:	68 ee 70 10 80       	push   $0x801070ee
+801001a3:	68 6e 7e 10 80       	push   $0x80107e6e
 801001a8:	e8 e3 01 00 00       	call   80100390 <panic>
 801001ad:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -248,7 +223,7 @@
   if(!holdingsleep(&b->lock))
 801001be:	8d 43 0c             	lea    0xc(%ebx),%eax
 801001c1:	50                   	push   %eax
-801001c2:	e8 b9 41 00 00       	call   80104380 <holdingsleep>
+801001c2:	e8 09 4e 00 00       	call   80104fd0 <holdingsleep>
 801001c7:	83 c4 10             	add    $0x10,%esp
 801001ca:	85 c0                	test   %eax,%eax
 801001cc:	74 0f                	je     801001dd <bwrite+0x2d>
@@ -264,7 +239,7 @@
 801001d8:	e9 a3 20 00 00       	jmp    80102280 <iderw>
     panic("bwrite");
 801001dd:	83 ec 0c             	sub    $0xc,%esp
-801001e0:	68 ff 70 10 80       	push   $0x801070ff
+801001e0:	68 7f 7e 10 80       	push   $0x80107e7f
 801001e5:	e8 a6 01 00 00       	call   80100390 <panic>
 801001ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
@@ -285,7 +260,7 @@
 801001fc:	8d 73 0c             	lea    0xc(%ebx),%esi
 801001ff:	83 ec 0c             	sub    $0xc,%esp
 80100202:	56                   	push   %esi
-80100203:	e8 78 41 00 00       	call   80104380 <holdingsleep>
+80100203:	e8 c8 4d 00 00       	call   80104fd0 <holdingsleep>
 80100208:	83 c4 10             	add    $0x10,%esp
 8010020b:	85 c0                	test   %eax,%eax
 8010020d:	74 66                	je     80100275 <brelse+0x85>
@@ -294,11 +269,11 @@
   releasesleep(&b->lock);
 8010020f:	83 ec 0c             	sub    $0xc,%esp
 80100212:	56                   	push   %esi
-80100213:	e8 28 41 00 00       	call   80104340 <releasesleep>
+80100213:	e8 78 4d 00 00       	call   80104f90 <releasesleep>
 
   acquire(&bcache.lock);
-80100218:	c7 04 24 c0 b5 10 80 	movl   $0x8010b5c0,(%esp)
-8010021f:	e8 3c 43 00 00       	call   80104560 <acquire>
+80100218:	c7 04 24 e0 c5 10 80 	movl   $0x8010c5e0,(%esp)
+8010021f:	e8 8c 4f 00 00       	call   801051b0 <acquire>
   b->refcnt--;
 80100224:	8b 43 4c             	mov    0x4c(%ebx),%eax
   if (b->refcnt == 0) {
@@ -319,30 +294,30 @@
 80100240:	8b 53 54             	mov    0x54(%ebx),%edx
 80100243:	89 50 54             	mov    %edx,0x54(%eax)
     b->next = bcache.head.next;
-80100246:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
+80100246:	a1 30 0d 11 80       	mov    0x80110d30,%eax
     b->prev = &bcache.head;
-8010024b:	c7 43 50 bc fc 10 80 	movl   $0x8010fcbc,0x50(%ebx)
+8010024b:	c7 43 50 dc 0c 11 80 	movl   $0x80110cdc,0x50(%ebx)
     b->next = bcache.head.next;
 80100252:	89 43 54             	mov    %eax,0x54(%ebx)
     bcache.head.next->prev = b;
-80100255:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
+80100255:	a1 30 0d 11 80       	mov    0x80110d30,%eax
 8010025a:	89 58 50             	mov    %ebx,0x50(%eax)
     bcache.head.next = b;
-8010025d:	89 1d 10 fd 10 80    	mov    %ebx,0x8010fd10
+8010025d:	89 1d 30 0d 11 80    	mov    %ebx,0x80110d30
   }
   
   release(&bcache.lock);
-80100263:	c7 45 08 c0 b5 10 80 	movl   $0x8010b5c0,0x8(%ebp)
+80100263:	c7 45 08 e0 c5 10 80 	movl   $0x8010c5e0,0x8(%ebp)
 }
 8010026a:	8d 65 f8             	lea    -0x8(%ebp),%esp
 8010026d:	5b                   	pop    %ebx
 8010026e:	5e                   	pop    %esi
 8010026f:	5d                   	pop    %ebp
   release(&bcache.lock);
-80100270:	e9 ab 43 00 00       	jmp    80104620 <release>
+80100270:	e9 fb 4f 00 00       	jmp    80105270 <release>
     panic("brelse");
 80100275:	83 ec 0c             	sub    $0xc,%esp
-80100278:	68 06 71 10 80       	push   $0x80107106
+80100278:	68 86 7e 10 80       	push   $0x80107e86
 8010027d:	e8 0e 01 00 00       	call   80100390 <panic>
 80100282:	66 90                	xchg   %ax,%ax
 80100284:	66 90                	xchg   %ax,%ax
@@ -378,8 +353,8 @@
   iunlock(ip);
 801002a5:	e8 96 15 00 00       	call   80101840 <iunlock>
   acquire(&cons.lock);
-801002aa:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-801002b1:	e8 aa 42 00 00       	call   80104560 <acquire>
+801002aa:	c7 04 24 20 b5 10 80 	movl   $0x8010b520,(%esp)
+801002b1:	e8 fa 4e 00 00       	call   801051b0 <acquire>
         // caller gets a 0-byte result.
         input.r--;
       }
@@ -395,30 +370,30 @@
 801002be:	85 db                	test   %ebx,%ebx
 801002c0:	0f 8e 97 00 00 00    	jle    8010035d <consoleread+0xcd>
     while(input.r == input.w){
-801002c6:	a1 a0 ff 10 80       	mov    0x8010ffa0,%eax
-801002cb:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+801002c6:	a1 c0 0f 11 80       	mov    0x80110fc0,%eax
+801002cb:	3b 05 c4 0f 11 80    	cmp    0x80110fc4,%eax
 801002d1:	74 27                	je     801002fa <consoleread+0x6a>
 801002d3:	eb 5b                	jmp    80100330 <consoleread+0xa0>
 801002d5:	8d 76 00             	lea    0x0(%esi),%esi
       sleep(&input.r, &cons.lock);
 801002d8:	83 ec 08             	sub    $0x8,%esp
-801002db:	68 20 a5 10 80       	push   $0x8010a520
-801002e0:	68 a0 ff 10 80       	push   $0x8010ffa0
-801002e5:	e8 36 3c 00 00       	call   80103f20 <sleep>
+801002db:	68 20 b5 10 80       	push   $0x8010b520
+801002e0:	68 c0 0f 11 80       	push   $0x80110fc0
+801002e5:	e8 a6 46 00 00       	call   80104990 <sleep>
     while(input.r == input.w){
-801002ea:	a1 a0 ff 10 80       	mov    0x8010ffa0,%eax
+801002ea:	a1 c0 0f 11 80       	mov    0x80110fc0,%eax
 801002ef:	83 c4 10             	add    $0x10,%esp
-801002f2:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+801002f2:	3b 05 c4 0f 11 80    	cmp    0x80110fc4,%eax
 801002f8:	75 36                	jne    80100330 <consoleread+0xa0>
       if(myproc()->killed){
-801002fa:	e8 61 36 00 00       	call   80103960 <myproc>
+801002fa:	e8 f1 3c 00 00       	call   80103ff0 <myproc>
 801002ff:	8b 48 24             	mov    0x24(%eax),%ecx
 80100302:	85 c9                	test   %ecx,%ecx
 80100304:	74 d2                	je     801002d8 <consoleread+0x48>
         release(&cons.lock);
 80100306:	83 ec 0c             	sub    $0xc,%esp
-80100309:	68 20 a5 10 80       	push   $0x8010a520
-8010030e:	e8 0d 43 00 00       	call   80104620 <release>
+80100309:	68 20 b5 10 80       	push   $0x8010b520
+8010030e:	e8 5d 4f 00 00       	call   80105270 <release>
         ilock(ip);
 80100313:	5a                   	pop    %edx
 80100314:	ff 75 08             	pushl  0x8(%ebp)
@@ -443,10 +418,10 @@
 8010032c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     c = input.buf[input.r++ % INPUT_BUF];
 80100330:	8d 50 01             	lea    0x1(%eax),%edx
-80100333:	89 15 a0 ff 10 80    	mov    %edx,0x8010ffa0
+80100333:	89 15 c0 0f 11 80    	mov    %edx,0x80110fc0
 80100339:	89 c2                	mov    %eax,%edx
 8010033b:	83 e2 7f             	and    $0x7f,%edx
-8010033e:	0f be 8a 20 ff 10 80 	movsbl -0x7fef00e0(%edx),%ecx
+8010033e:	0f be 8a 40 0f 11 80 	movsbl -0x7feef0c0(%edx),%ecx
     if(c == C('D')){  // EOF
 80100345:	80 f9 04             	cmp    $0x4,%cl
 80100348:	74 38                	je     80100382 <consoleread+0xf2>
@@ -462,8 +437,8 @@
 80100357:	0f 85 61 ff ff ff    	jne    801002be <consoleread+0x2e>
   release(&cons.lock);
 8010035d:	83 ec 0c             	sub    $0xc,%esp
-80100360:	68 20 a5 10 80       	push   $0x8010a520
-80100365:	e8 b6 42 00 00       	call   80104620 <release>
+80100360:	68 20 b5 10 80       	push   $0x8010b520
+80100365:	e8 06 4f 00 00       	call   80105270 <release>
   ilock(ip);
 8010036a:	58                   	pop    %eax
 8010036b:	ff 75 08             	pushl  0x8(%ebp)
@@ -485,7 +460,7 @@
 80100382:	39 f3                	cmp    %esi,%ebx
 80100384:	73 d7                	jae    8010035d <consoleread+0xcd>
         input.r--;
-80100386:	a3 a0 ff 10 80       	mov    %eax,0x8010ffa0
+80100386:	a3 c0 0f 11 80       	mov    %eax,0x80110fc0
 8010038b:	eb d0                	jmp    8010035d <consoleread+0xcd>
 8010038d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -505,23 +480,23 @@
   asm volatile("cli");
 8010039c:	fa                   	cli    
   cons.locking = 0;
-8010039d:	c7 05 54 a5 10 80 00 	movl   $0x0,0x8010a554
+8010039d:	c7 05 54 b5 10 80 00 	movl   $0x0,0x8010b554
 801003a4:	00 00 00 
   getcallerpcs(&s, pcs);
 801003a7:	8d 5d d0             	lea    -0x30(%ebp),%ebx
 801003aa:	8d 75 f8             	lea    -0x8(%ebp),%esi
   cprintf("lapicid %d: panic: ", lapicid());
-801003ad:	e8 ee 24 00 00       	call   801028a0 <lapicid>
+801003ad:	e8 5e 25 00 00       	call   80102910 <lapicid>
 801003b2:	83 ec 08             	sub    $0x8,%esp
 801003b5:	50                   	push   %eax
-801003b6:	68 0d 71 10 80       	push   $0x8010710d
+801003b6:	68 8d 7e 10 80       	push   $0x80107e8d
 801003bb:	e8 f0 02 00 00       	call   801006b0 <cprintf>
   cprintf(s);
 801003c0:	58                   	pop    %eax
 801003c1:	ff 75 08             	pushl  0x8(%ebp)
 801003c4:	e8 e7 02 00 00       	call   801006b0 <cprintf>
   cprintf("\n");
-801003c9:	c7 04 24 37 7a 10 80 	movl   $0x80107a37,(%esp)
+801003c9:	c7 04 24 e7 88 10 80 	movl   $0x801088e7,(%esp)
 801003d0:	e8 db 02 00 00       	call   801006b0 <cprintf>
   getcallerpcs(&s, pcs);
 801003d5:	8d 45 08             	lea    0x8(%ebp),%eax
@@ -529,21 +504,21 @@
 801003d9:	59                   	pop    %ecx
 801003da:	53                   	push   %ebx
 801003db:	50                   	push   %eax
-801003dc:	e8 1f 40 00 00       	call   80104400 <getcallerpcs>
+801003dc:	e8 6f 4c 00 00       	call   80105050 <getcallerpcs>
   for(i=0; i<10; i++)
 801003e1:	83 c4 10             	add    $0x10,%esp
     cprintf(" %p", pcs[i]);
 801003e4:	83 ec 08             	sub    $0x8,%esp
 801003e7:	ff 33                	pushl  (%ebx)
 801003e9:	83 c3 04             	add    $0x4,%ebx
-801003ec:	68 21 71 10 80       	push   $0x80107121
+801003ec:	68 a1 7e 10 80       	push   $0x80107ea1
 801003f1:	e8 ba 02 00 00       	call   801006b0 <cprintf>
   for(i=0; i<10; i++)
 801003f6:	83 c4 10             	add    $0x10,%esp
 801003f9:	39 f3                	cmp    %esi,%ebx
 801003fb:	75 e7                	jne    801003e4 <panic+0x54>
   panicked = 1; // freeze other CPU
-801003fd:	c7 05 58 a5 10 80 01 	movl   $0x1,0x8010a558
+801003fd:	c7 05 58 b5 10 80 01 	movl   $0x1,0x8010b558
 80100404:	00 00 00 
   for(;;)
 80100407:	eb fe                	jmp    80100407 <panic+0x77>
@@ -564,7 +539,7 @@
     uartputc(c);
 80100426:	83 ec 0c             	sub    $0xc,%esp
 80100429:	50                   	push   %eax
-8010042a:	e8 b1 58 00 00       	call   80105ce0 <uartputc>
+8010042a:	e8 a1 65 00 00       	call   801069d0 <uartputc>
 8010042f:	83 c4 10             	add    $0x10,%esp
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
 80100432:	bf d4 03 00 00       	mov    $0x3d4,%edi
@@ -657,11 +632,11 @@
     uartputc('\b'); uartputc(' '); uartputc('\b');
 80100510:	83 ec 0c             	sub    $0xc,%esp
 80100513:	6a 08                	push   $0x8
-80100515:	e8 c6 57 00 00       	call   80105ce0 <uartputc>
+80100515:	e8 b6 64 00 00       	call   801069d0 <uartputc>
 8010051a:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
-80100521:	e8 ba 57 00 00       	call   80105ce0 <uartputc>
+80100521:	e8 aa 64 00 00       	call   801069d0 <uartputc>
 80100526:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-8010052d:	e8 ae 57 00 00       	call   80105ce0 <uartputc>
+8010052d:	e8 9e 64 00 00       	call   801069d0 <uartputc>
 80100532:	83 c4 10             	add    $0x10,%esp
 80100535:	e9 f8 fe ff ff       	jmp    80100432 <consputc.part.0+0x22>
 8010053a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -676,7 +651,7 @@
 80100552:	68 60 0e 00 00       	push   $0xe60
 80100557:	68 a0 80 0b 80       	push   $0x800b80a0
 8010055c:	68 00 80 0b 80       	push   $0x800b8000
-80100561:	e8 aa 41 00 00       	call   80104710 <memmove>
+80100561:	e8 fa 4d 00 00       	call   80105360 <memmove>
     memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
 80100566:	b8 80 07 00 00       	mov    $0x780,%eax
 8010056b:	83 c4 0c             	add    $0xc,%esp
@@ -685,13 +660,13 @@
 80100572:	50                   	push   %eax
 80100573:	6a 00                	push   $0x0
 80100575:	56                   	push   %esi
-80100576:	e8 f5 40 00 00       	call   80104670 <memset>
+80100576:	e8 45 4d 00 00       	call   801052c0 <memset>
 8010057b:	88 5d e7             	mov    %bl,-0x19(%ebp)
 8010057e:	83 c4 10             	add    $0x10,%esp
 80100581:	e9 22 ff ff ff       	jmp    801004a8 <consputc.part.0+0x98>
     panic("pos under/overflow");
 80100586:	83 ec 0c             	sub    $0xc,%esp
-80100589:	68 25 71 10 80       	push   $0x80107125
+80100589:	68 a5 7e 10 80       	push   $0x80107ea5
 8010058e:	e8 fd fd ff ff       	call   80100390 <panic>
 80100593:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010059a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -722,7 +697,7 @@
 801005c2:	31 d2                	xor    %edx,%edx
 801005c4:	89 ce                	mov    %ecx,%esi
 801005c6:	f7 75 d4             	divl   -0x2c(%ebp)
-801005c9:	0f b6 92 50 71 10 80 	movzbl -0x7fef8eb0(%edx),%edx
+801005c9:	0f b6 92 d0 7e 10 80 	movzbl -0x7fef8130(%edx),%edx
 801005d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
 801005d3:	89 d8                	mov    %ebx,%eax
 801005d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
@@ -749,7 +724,7 @@
 801005fc:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
 80100600:	0f be c2             	movsbl %dl,%eax
   if(panicked){
-80100603:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+80100603:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
 80100609:	85 d2                	test   %edx,%edx
 8010060b:	74 03                	je     80100610 <printint+0x70>
   asm volatile("cli");
@@ -800,8 +775,8 @@
   iunlock(ip);
 80100653:	e8 e8 11 00 00       	call   80101840 <iunlock>
   acquire(&cons.lock);
-80100658:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-8010065f:	e8 fc 3e 00 00       	call   80104560 <acquire>
+80100658:	c7 04 24 20 b5 10 80 	movl   $0x8010b520,(%esp)
+8010065f:	e8 4c 4b 00 00       	call   801051b0 <acquire>
   for(i = 0; i < n; i++)
 80100664:	83 c4 10             	add    $0x10,%esp
 80100667:	85 db                	test   %ebx,%ebx
@@ -809,7 +784,7 @@
 8010066b:	8b 7d 0c             	mov    0xc(%ebp),%edi
 8010066e:	8d 34 1f             	lea    (%edi,%ebx,1),%esi
   if(panicked){
-80100671:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+80100671:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
 80100677:	85 d2                	test   %edx,%edx
 80100679:	74 05                	je     80100680 <consolewrite+0x40>
 8010067b:	fa                   	cli    
@@ -825,8 +800,8 @@
 8010068d:	75 e2                	jne    80100671 <consolewrite+0x31>
   release(&cons.lock);
 8010068f:	83 ec 0c             	sub    $0xc,%esp
-80100692:	68 20 a5 10 80       	push   $0x8010a520
-80100697:	e8 84 3f 00 00       	call   80104620 <release>
+80100692:	68 20 b5 10 80       	push   $0x8010b520
+80100697:	e8 d4 4b 00 00       	call   80105270 <release>
   ilock(ip);
 8010069c:	58                   	pop    %eax
 8010069d:	ff 75 08             	pushl  0x8(%ebp)
@@ -853,7 +828,7 @@
 801006b9:	53                   	push   %ebx
 801006ba:	83 ec 1c             	sub    $0x1c,%esp
   locking = cons.locking;
-801006bd:	a1 54 a5 10 80       	mov    0x8010a554,%eax
+801006bd:	a1 54 b5 10 80       	mov    0x8010b554,%eax
 801006c2:	89 45 e0             	mov    %eax,-0x20(%ebp)
   if(locking)
 801006c5:	85 c0                	test   %eax,%eax
@@ -875,7 +850,7 @@
 801006e7:	83 f8 25             	cmp    $0x25,%eax
 801006ea:	74 44                	je     80100730 <cprintf+0x80>
   if(panicked){
-801006ec:	8b 0d 58 a5 10 80    	mov    0x8010a558,%ecx
+801006ec:	8b 0d 58 b5 10 80    	mov    0x8010b558,%ecx
 801006f2:	85 c9                	test   %ecx,%ecx
 801006f4:	74 0f                	je     80100705 <cprintf+0x55>
 801006f6:	fa                   	cli    
@@ -936,11 +911,11 @@
 80100779:	85 db                	test   %ebx,%ebx
 8010077b:	75 55                	jne    801007d2 <cprintf+0x122>
         s = "(null)";
-8010077d:	bb 38 71 10 80       	mov    $0x80107138,%ebx
+8010077d:	bb b8 7e 10 80       	mov    $0x80107eb8,%ebx
       for(; *s; s++)
 80100782:	b8 28 00 00 00       	mov    $0x28,%eax
   if(panicked){
-80100787:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+80100787:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
 8010078d:	85 d2                	test   %edx,%edx
 8010078f:	74 39                	je     801007ca <cprintf+0x11a>
 80100791:	fa                   	cli    
@@ -961,8 +936,8 @@
 801007b0:	e9 55 ff ff ff       	jmp    8010070a <cprintf+0x5a>
     acquire(&cons.lock);
 801007b5:	83 ec 0c             	sub    $0xc,%esp
-801007b8:	68 20 a5 10 80       	push   $0x8010a520
-801007bd:	e8 9e 3d 00 00       	call   80104560 <acquire>
+801007b8:	68 20 b5 10 80       	push   $0x8010b520
+801007bd:	e8 ee 49 00 00       	call   801051b0 <acquire>
 801007c2:	83 c4 10             	add    $0x10,%esp
 801007c5:	e9 03 ff ff ff       	jmp    801006cd <cprintf+0x1d>
 801007ca:	e8 41 fc ff ff       	call   80100410 <consputc.part.0>
@@ -975,7 +950,7 @@
 801007d9:	89 fb                	mov    %edi,%ebx
 801007db:	e9 2a ff ff ff       	jmp    8010070a <cprintf+0x5a>
   if(panicked){
-801007e0:	8b 3d 58 a5 10 80    	mov    0x8010a558,%edi
+801007e0:	8b 3d 58 b5 10 80    	mov    0x8010b558,%edi
 801007e6:	85 ff                	test   %edi,%edi
 801007e8:	0f 84 12 ff ff ff    	je     80100700 <cprintf+0x50>
 801007ee:	fa                   	cli    
@@ -983,7 +958,7 @@
 801007ef:	eb fe                	jmp    801007ef <cprintf+0x13f>
 801007f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   if(panicked){
-801007f8:	8b 0d 58 a5 10 80    	mov    0x8010a558,%ecx
+801007f8:	8b 0d 58 b5 10 80    	mov    0x8010b558,%ecx
 801007fe:	85 c9                	test   %ecx,%ecx
 80100800:	74 06                	je     80100808 <cprintf+0x158>
 80100802:	fa                   	cli    
@@ -993,7 +968,7 @@
 80100808:	b8 25 00 00 00       	mov    $0x25,%eax
 8010080d:	e8 fe fb ff ff       	call   80100410 <consputc.part.0>
   if(panicked){
-80100812:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+80100812:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
 80100818:	85 d2                	test   %edx,%edx
 8010081a:	74 2c                	je     80100848 <cprintf+0x198>
 8010081c:	fa                   	cli    
@@ -1002,14 +977,14 @@
 8010081f:	90                   	nop
     release(&cons.lock);
 80100820:	83 ec 0c             	sub    $0xc,%esp
-80100823:	68 20 a5 10 80       	push   $0x8010a520
-80100828:	e8 f3 3d 00 00       	call   80104620 <release>
+80100823:	68 20 b5 10 80       	push   $0x8010b520
+80100828:	e8 43 4a 00 00       	call   80105270 <release>
 8010082d:	83 c4 10             	add    $0x10,%esp
 }
 80100830:	e9 ee fe ff ff       	jmp    80100723 <cprintf+0x73>
     panic("null fmt");
 80100835:	83 ec 0c             	sub    $0xc,%esp
-80100838:	68 3f 71 10 80       	push   $0x8010713f
+80100838:	68 bf 7e 10 80       	push   $0x80107ebf
 8010083d:	e8 4e fb ff ff       	call   80100390 <panic>
 80100842:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80100848:	89 f8                	mov    %edi,%eax
@@ -1033,8 +1008,8 @@
 8010086c:	83 ec 18             	sub    $0x18,%esp
 8010086f:	8b 7d 08             	mov    0x8(%ebp),%edi
   acquire(&cons.lock);
-80100872:	68 20 a5 10 80       	push   $0x8010a520
-80100877:	e8 e4 3c 00 00       	call   80104560 <acquire>
+80100872:	68 20 b5 10 80       	push   $0x8010b520
+80100877:	e8 34 49 00 00       	call   801051b0 <acquire>
   while((c = getc()) >= 0){
 8010087c:	83 c4 10             	add    $0x10,%esp
 8010087f:	eb 17                	jmp    80100898 <consoleintr+0x38>
@@ -1056,22 +1031,22 @@
 801008ab:	83 fb 7f             	cmp    $0x7f,%ebx
 801008ae:	0f 84 cc 00 00 00    	je     80100980 <consoleintr+0x120>
       if(c != 0 && input.e-input.r < INPUT_BUF){
-801008b4:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+801008b4:	a1 c8 0f 11 80       	mov    0x80110fc8,%eax
 801008b9:	89 c2                	mov    %eax,%edx
-801008bb:	2b 15 a0 ff 10 80    	sub    0x8010ffa0,%edx
+801008bb:	2b 15 c0 0f 11 80    	sub    0x80110fc0,%edx
 801008c1:	83 fa 7f             	cmp    $0x7f,%edx
 801008c4:	77 d2                	ja     80100898 <consoleintr+0x38>
         c = (c == '\r') ? '\n' : c;
 801008c6:	8d 48 01             	lea    0x1(%eax),%ecx
-801008c9:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+801008c9:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
 801008cf:	83 e0 7f             	and    $0x7f,%eax
         input.buf[input.e++ % INPUT_BUF] = c;
-801008d2:	89 0d a8 ff 10 80    	mov    %ecx,0x8010ffa8
+801008d2:	89 0d c8 0f 11 80    	mov    %ecx,0x80110fc8
         c = (c == '\r') ? '\n' : c;
 801008d8:	83 fb 0d             	cmp    $0xd,%ebx
 801008db:	0f 84 02 01 00 00    	je     801009e3 <consoleintr+0x183>
         input.buf[input.e++ % INPUT_BUF] = c;
-801008e1:	88 98 20 ff 10 80    	mov    %bl,-0x7fef00e0(%eax)
+801008e1:	88 98 40 0f 11 80    	mov    %bl,-0x7feef0c0(%eax)
   if(panicked){
 801008e7:	85 d2                	test   %edx,%edx
 801008e9:	0f 85 ff 00 00 00    	jne    801009ee <consoleintr+0x18e>
@@ -1082,27 +1057,27 @@
 801008f9:	0f 84 0f 01 00 00    	je     80100a0e <consoleintr+0x1ae>
 801008ff:	83 fb 04             	cmp    $0x4,%ebx
 80100902:	0f 84 06 01 00 00    	je     80100a0e <consoleintr+0x1ae>
-80100908:	a1 a0 ff 10 80       	mov    0x8010ffa0,%eax
+80100908:	a1 c0 0f 11 80       	mov    0x80110fc0,%eax
 8010090d:	83 e8 80             	sub    $0xffffff80,%eax
-80100910:	39 05 a8 ff 10 80    	cmp    %eax,0x8010ffa8
+80100910:	39 05 c8 0f 11 80    	cmp    %eax,0x80110fc8
 80100916:	75 80                	jne    80100898 <consoleintr+0x38>
 80100918:	e9 f6 00 00 00       	jmp    80100a13 <consoleintr+0x1b3>
 8010091d:	8d 76 00             	lea    0x0(%esi),%esi
       while(input.e != input.w &&
-80100920:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
-80100925:	39 05 a4 ff 10 80    	cmp    %eax,0x8010ffa4
+80100920:	a1 c8 0f 11 80       	mov    0x80110fc8,%eax
+80100925:	39 05 c4 0f 11 80    	cmp    %eax,0x80110fc4
 8010092b:	0f 84 67 ff ff ff    	je     80100898 <consoleintr+0x38>
             input.buf[(input.e-1) % INPUT_BUF] != '\n'){
 80100931:	83 e8 01             	sub    $0x1,%eax
 80100934:	89 c2                	mov    %eax,%edx
 80100936:	83 e2 7f             	and    $0x7f,%edx
       while(input.e != input.w &&
-80100939:	80 ba 20 ff 10 80 0a 	cmpb   $0xa,-0x7fef00e0(%edx)
+80100939:	80 ba 40 0f 11 80 0a 	cmpb   $0xa,-0x7feef0c0(%edx)
 80100940:	0f 84 52 ff ff ff    	je     80100898 <consoleintr+0x38>
   if(panicked){
-80100946:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+80100946:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
         input.e--;
-8010094c:	a3 a8 ff 10 80       	mov    %eax,0x8010ffa8
+8010094c:	a3 c8 0f 11 80       	mov    %eax,0x80110fc8
   if(panicked){
 80100951:	85 d2                	test   %edx,%edx
 80100953:	74 0b                	je     80100960 <consoleintr+0x100>
@@ -1114,20 +1089,20 @@
 80100960:	b8 00 01 00 00       	mov    $0x100,%eax
 80100965:	e8 a6 fa ff ff       	call   80100410 <consputc.part.0>
       while(input.e != input.w &&
-8010096a:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
-8010096f:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+8010096a:	a1 c8 0f 11 80       	mov    0x80110fc8,%eax
+8010096f:	3b 05 c4 0f 11 80    	cmp    0x80110fc4,%eax
 80100975:	75 ba                	jne    80100931 <consoleintr+0xd1>
 80100977:	e9 1c ff ff ff       	jmp    80100898 <consoleintr+0x38>
 8010097c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       if(input.e != input.w){
-80100980:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
-80100985:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+80100980:	a1 c8 0f 11 80       	mov    0x80110fc8,%eax
+80100985:	3b 05 c4 0f 11 80    	cmp    0x80110fc4,%eax
 8010098b:	0f 84 07 ff ff ff    	je     80100898 <consoleintr+0x38>
         input.e--;
 80100991:	83 e8 01             	sub    $0x1,%eax
-80100994:	a3 a8 ff 10 80       	mov    %eax,0x8010ffa8
+80100994:	a3 c8 0f 11 80       	mov    %eax,0x80110fc8
   if(panicked){
-80100999:	a1 58 a5 10 80       	mov    0x8010a558,%eax
+80100999:	a1 58 b5 10 80       	mov    0x8010b558,%eax
 8010099e:	85 c0                	test   %eax,%eax
 801009a0:	74 16                	je     801009b8 <consoleintr+0x158>
 801009a2:	fa                   	cli    
@@ -1144,8 +1119,8 @@
 801009c2:	e9 d1 fe ff ff       	jmp    80100898 <consoleintr+0x38>
   release(&cons.lock);
 801009c7:	83 ec 0c             	sub    $0xc,%esp
-801009ca:	68 20 a5 10 80       	push   $0x8010a520
-801009cf:	e8 4c 3c 00 00       	call   80104620 <release>
+801009ca:	68 20 b5 10 80       	push   $0x8010b520
+801009cf:	e8 9c 48 00 00       	call   80105270 <release>
   if(doprocdump) {
 801009d4:	83 c4 10             	add    $0x10,%esp
 801009d7:	85 f6                	test   %esi,%esi
@@ -1158,7 +1133,7 @@
 801009e1:	5d                   	pop    %ebp
 801009e2:	c3                   	ret    
         input.buf[input.e++ % INPUT_BUF] = c;
-801009e3:	c6 80 20 ff 10 80 0a 	movb   $0xa,-0x7fef00e0(%eax)
+801009e3:	c6 80 40 0f 11 80 0a 	movb   $0xa,-0x7feef0c0(%eax)
   if(panicked){
 801009ea:	85 d2                	test   %edx,%edx
 801009ec:	74 16                	je     80100a04 <consoleintr+0x1a4>
@@ -1173,18 +1148,18 @@
 801009fd:	5f                   	pop    %edi
 801009fe:	5d                   	pop    %ebp
     procdump();  // now call procdump() wo. cons.lock held
-801009ff:	e9 cc 37 00 00       	jmp    801041d0 <procdump>
+801009ff:	e9 1c 44 00 00       	jmp    80104e20 <procdump>
 80100a04:	b8 0a 00 00 00       	mov    $0xa,%eax
 80100a09:	e8 02 fa ff ff       	call   80100410 <consputc.part.0>
         if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
-80100a0e:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+80100a0e:	a1 c8 0f 11 80       	mov    0x80110fc8,%eax
           wakeup(&input.r);
 80100a13:	83 ec 0c             	sub    $0xc,%esp
           input.w = input.e;
-80100a16:	a3 a4 ff 10 80       	mov    %eax,0x8010ffa4
+80100a16:	a3 c4 0f 11 80       	mov    %eax,0x80110fc4
           wakeup(&input.r);
-80100a1b:	68 a0 ff 10 80       	push   $0x8010ffa0
-80100a20:	e8 bb 36 00 00       	call   801040e0 <wakeup>
+80100a1b:	68 c0 0f 11 80       	push   $0x80110fc0
+80100a20:	e8 2b 41 00 00       	call   80104b50 <wakeup>
 80100a25:	83 c4 10             	add    $0x10,%esp
 80100a28:	e9 6b fe ff ff       	jmp    80100898 <consoleintr+0x38>
 80100a2d:	8d 76 00             	lea    0x0(%esi),%esi
@@ -1199,9 +1174,9 @@
 80100a35:	89 e5                	mov    %esp,%ebp
 80100a37:	83 ec 10             	sub    $0x10,%esp
   initlock(&cons.lock, "console");
-80100a3a:	68 48 71 10 80       	push   $0x80107148
-80100a3f:	68 20 a5 10 80       	push   $0x8010a520
-80100a44:	e8 97 39 00 00       	call   801043e0 <initlock>
+80100a3a:	68 c8 7e 10 80       	push   $0x80107ec8
+80100a3f:	68 20 b5 10 80       	push   $0x8010b520
+80100a44:	e8 e7 45 00 00       	call   80105030 <initlock>
 
   devsw[CONSOLE].write = consolewrite;
   devsw[CONSOLE].read = consoleread;
@@ -1213,13 +1188,13 @@
 80100a4b:	6a 00                	push   $0x0
 80100a4d:	6a 01                	push   $0x1
   devsw[CONSOLE].write = consolewrite;
-80100a4f:	c7 05 6c 09 11 80 40 	movl   $0x80100640,0x8011096c
+80100a4f:	c7 05 8c 19 11 80 40 	movl   $0x80100640,0x8011198c
 80100a56:	06 10 80 
   devsw[CONSOLE].read = consoleread;
-80100a59:	c7 05 68 09 11 80 90 	movl   $0x80100290,0x80110968
+80100a59:	c7 05 88 19 11 80 90 	movl   $0x80100290,0x80111988
 80100a60:	02 10 80 
   cons.locking = 1;
-80100a63:	c7 05 54 a5 10 80 01 	movl   $0x1,0x8010a554
+80100a63:	c7 05 54 b5 10 80 01 	movl   $0x1,0x8010b554
 80100a6a:	00 00 00 
   ioapicenable(IRQ_KBD, 0);
 80100a6d:	e8 be 19 00 00       	call   80102430 <ioapicenable>
@@ -1234,8 +1209,8 @@
 80100a7f:	90                   	nop
 
 80100a80 <exec>:
-#include "x86.h"
 #include "elf.h"
+#include "fcntl.h"
 
 int
 exec(char *path, char **argv)
@@ -1253,11 +1228,11 @@
   struct proghdr ph;
   pde_t *pgdir, *oldpgdir;
   struct proc *curproc = myproc();
-80100a90:	e8 cb 2e 00 00       	call   80103960 <myproc>
+80100a90:	e8 5b 35 00 00       	call   80103ff0 <myproc>
 80100a95:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
 
   begin_op();
-80100a9b:	e8 90 22 00 00       	call   80102d30 <begin_op>
+80100a9b:	e8 00 23 00 00       	call   80102da0 <begin_op>
 
   if((ip = namei(path)) == 0){
 80100aa0:	83 ec 0c             	sub    $0xc,%esp
@@ -1298,12 +1273,11 @@
 80100add:	53                   	push   %ebx
 80100ade:	e8 1d 0f 00 00       	call   80101a00 <iunlockput>
     end_op();
-80100ae3:	e8 b8 22 00 00       	call   80102da0 <end_op>
+80100ae3:	e8 28 23 00 00       	call   80102e10 <end_op>
 80100ae8:	83 c4 10             	add    $0x10,%esp
   }
   return -1;
 80100aeb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
 80100af0:	8d 65 f4             	lea    -0xc(%ebp),%esp
 80100af3:	5b                   	pop    %ebx
 80100af4:	5e                   	pop    %esi
@@ -1317,7 +1291,7 @@
 80100b07:	45 4c 46 
 80100b0a:	75 ce                	jne    80100ada <exec+0x5a>
   if((pgdir = setupkvm()) == 0)
-80100b0c:	e8 3f 63 00 00       	call   80106e50 <setupkvm>
+80100b0c:	e8 9f 70 00 00       	call   80107bb0 <setupkvm>
 80100b11:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
 80100b17:	85 c0                	test   %eax,%eax
 80100b19:	74 bf                	je     80100ada <exec+0x5a>
@@ -1347,7 +1321,7 @@
 80100b66:	50                   	push   %eax
 80100b67:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
 80100b6d:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100b73:	e8 f8 60 00 00       	call   80106c70 <allocuvm>
+80100b73:	e8 e8 6d 00 00       	call   80107960 <allocuvm>
 80100b78:	83 c4 10             	add    $0x10,%esp
 80100b7b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
 80100b81:	85 c0                	test   %eax,%eax
@@ -1363,7 +1337,7 @@
 80100ba1:	53                   	push   %ebx
 80100ba2:	50                   	push   %eax
 80100ba3:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100ba9:	e8 f2 5f 00 00       	call   80106ba0 <loaduvm>
+80100ba9:	e8 e2 6c 00 00       	call   80107890 <loaduvm>
 80100bae:	83 c4 20             	add    $0x20,%esp
 80100bb1:	85 c0                	test   %eax,%eax
 80100bb3:	78 2d                	js     80100be2 <exec+0x162>
@@ -1386,7 +1360,7 @@
     freevm(pgdir);
 80100be2:	83 ec 0c             	sub    $0xc,%esp
 80100be5:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100beb:	e8 e0 61 00 00       	call   80106dd0 <freevm>
+80100beb:	e8 40 6f 00 00       	call   80107b30 <freevm>
   if(ip){
 80100bf0:	83 c4 10             	add    $0x10,%esp
 80100bf3:	e9 e2 fe ff ff       	jmp    80100ada <exec+0x5a>
@@ -1401,14 +1375,14 @@
 80100c1b:	53                   	push   %ebx
 80100c1c:	e8 df 0d 00 00       	call   80101a00 <iunlockput>
   end_op();
-80100c21:	e8 7a 21 00 00       	call   80102da0 <end_op>
+80100c21:	e8 ea 21 00 00       	call   80102e10 <end_op>
   if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
 80100c26:	83 c4 0c             	add    $0xc,%esp
 80100c29:	56                   	push   %esi
 80100c2a:	57                   	push   %edi
 80100c2b:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
 80100c31:	57                   	push   %edi
-80100c32:	e8 39 60 00 00       	call   80106c70 <allocuvm>
+80100c32:	e8 29 6d 00 00       	call   80107960 <allocuvm>
 80100c37:	83 c4 10             	add    $0x10,%esp
 80100c3a:	89 c6                	mov    %eax,%esi
 80100c3c:	85 c0                	test   %eax,%eax
@@ -1424,7 +1398,7 @@
   for(argc = 0; argv[argc]; argc++) {
 80100c51:	31 ff                	xor    %edi,%edi
   clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
-80100c53:	e8 98 62 00 00       	call   80106ef0 <clearpteu>
+80100c53:	e8 f8 6f 00 00       	call   80107c50 <clearpteu>
   for(argc = 0; argv[argc]; argc++) {
 80100c58:	8b 45 0c             	mov    0xc(%ebp),%eax
 80100c5b:	83 c4 10             	add    $0x10,%esp
@@ -1453,7 +1427,7 @@
     sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
 80100c9f:	83 ec 0c             	sub    $0xc,%esp
 80100ca2:	50                   	push   %eax
-80100ca3:	e8 c8 3b 00 00       	call   80104870 <strlen>
+80100ca3:	e8 18 48 00 00       	call   801054c0 <strlen>
 80100ca8:	f7 d0                	not    %eax
 80100caa:	01 c3                	add    %eax,%ebx
     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
@@ -1463,14 +1437,14 @@
 80100cb0:	83 e3 fc             	and    $0xfffffffc,%ebx
     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
 80100cb3:	ff 34 b8             	pushl  (%eax,%edi,4)
-80100cb6:	e8 b5 3b 00 00       	call   80104870 <strlen>
+80100cb6:	e8 05 48 00 00       	call   801054c0 <strlen>
 80100cbb:	83 c0 01             	add    $0x1,%eax
 80100cbe:	50                   	push   %eax
 80100cbf:	8b 45 0c             	mov    0xc(%ebp),%eax
 80100cc2:	ff 34 b8             	pushl  (%eax,%edi,4)
 80100cc5:	53                   	push   %ebx
 80100cc6:	56                   	push   %esi
-80100cc7:	e8 84 63 00 00       	call   80107050 <copyout>
+80100cc7:	e8 f4 70 00 00       	call   80107dc0 <copyout>
 80100ccc:	83 c4 20             	add    $0x20,%esp
 80100ccf:	85 c0                	test   %eax,%eax
 80100cd1:	79 ad                	jns    80100c80 <exec+0x200>
@@ -1479,7 +1453,7 @@
     freevm(pgdir);
 80100cd8:	83 ec 0c             	sub    $0xc,%esp
 80100cdb:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100ce1:	e8 ea 60 00 00       	call   80106dd0 <freevm>
+80100ce1:	e8 4a 6e 00 00       	call   80107b30 <freevm>
 80100ce6:	83 c4 10             	add    $0x10,%esp
   return -1;
 80100ce9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
@@ -1510,7 +1484,7 @@
   ustack[2] = sp - (argc+1)*4;  // argv pointer
 80100d2d:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
   if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
-80100d33:	e8 18 63 00 00       	call   80107050 <copyout>
+80100d33:	e8 88 70 00 00       	call   80107dc0 <copyout>
 80100d38:	83 c4 10             	add    $0x10,%esp
 80100d3b:	85 c0                	test   %eax,%eax
 80100d3d:	78 99                	js     80100cd8 <exec+0x258>
@@ -1540,7 +1514,7 @@
 80100d6c:	52                   	push   %edx
 80100d6d:	83 c0 6c             	add    $0x6c,%eax
 80100d70:	50                   	push   %eax
-80100d71:	e8 ba 3a 00 00       	call   80104830 <safestrcpy>
+80100d71:	e8 0a 47 00 00       	call   80105480 <safestrcpy>
   curproc->pgdir = pgdir;
 80100d76:	8b 8d f4 fe ff ff    	mov    -0x10c(%ebp),%ecx
   oldpgdir = curproc->pgdir;
@@ -1560,19 +1534,19 @@
 80100d97:	89 58 44             	mov    %ebx,0x44(%eax)
   switchuvm(curproc);
 80100d9a:	89 0c 24             	mov    %ecx,(%esp)
-80100d9d:	e8 6e 5c 00 00       	call   80106a10 <switchuvm>
+80100d9d:	e8 5e 69 00 00       	call   80107700 <switchuvm>
   freevm(oldpgdir);
 80100da2:	89 3c 24             	mov    %edi,(%esp)
-80100da5:	e8 26 60 00 00       	call   80106dd0 <freevm>
+80100da5:	e8 86 6d 00 00       	call   80107b30 <freevm>
   return 0;
 80100daa:	83 c4 10             	add    $0x10,%esp
 80100dad:	31 c0                	xor    %eax,%eax
 80100daf:	e9 3c fd ff ff       	jmp    80100af0 <exec+0x70>
     end_op();
-80100db4:	e8 e7 1f 00 00       	call   80102da0 <end_op>
+80100db4:	e8 57 20 00 00       	call   80102e10 <end_op>
     cprintf("exec: fail\n");
 80100db9:	83 ec 0c             	sub    $0xc,%esp
-80100dbc:	68 61 71 10 80       	push   $0x80107161
+80100dbc:	68 e1 7e 10 80       	push   $0x80107ee1
 80100dc1:	e8 ea f8 ff ff       	call   801006b0 <cprintf>
     return -1;
 80100dc6:	83 c4 10             	add    $0x10,%esp
@@ -1596,9 +1570,9 @@
 80100de5:	89 e5                	mov    %esp,%ebp
 80100de7:	83 ec 10             	sub    $0x10,%esp
   initlock(&ftable.lock, "ftable");
-80100dea:	68 6d 71 10 80       	push   $0x8010716d
-80100def:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100df4:	e8 e7 35 00 00       	call   801043e0 <initlock>
+80100dea:	68 ed 7e 10 80       	push   $0x80107eed
+80100def:	68 e0 0f 11 80       	push   $0x80110fe0
+80100df4:	e8 37 42 00 00       	call   80105030 <initlock>
 }
 80100df9:	83 c4 10             	add    $0x10,%esp
 80100dfc:	c9                   	leave  
@@ -1619,18 +1593,18 @@
 
   acquire(&ftable.lock);
   for(f = ftable.file; f < ftable.file + NFILE; f++){
-80100e08:	bb f4 ff 10 80       	mov    $0x8010fff4,%ebx
+80100e08:	bb 14 10 11 80       	mov    $0x80111014,%ebx
 {
 80100e0d:	83 ec 10             	sub    $0x10,%esp
   acquire(&ftable.lock);
-80100e10:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e15:	e8 46 37 00 00       	call   80104560 <acquire>
+80100e10:	68 e0 0f 11 80       	push   $0x80110fe0
+80100e15:	e8 96 43 00 00       	call   801051b0 <acquire>
 80100e1a:	83 c4 10             	add    $0x10,%esp
 80100e1d:	eb 0c                	jmp    80100e2b <filealloc+0x2b>
 80100e1f:	90                   	nop
   for(f = ftable.file; f < ftable.file + NFILE; f++){
 80100e20:	83 c3 18             	add    $0x18,%ebx
-80100e23:	81 fb 54 09 11 80    	cmp    $0x80110954,%ebx
+80100e23:	81 fb 74 19 11 80    	cmp    $0x80111974,%ebx
 80100e29:	74 25                	je     80100e50 <filealloc+0x50>
     if(f->ref == 0){
 80100e2b:	8b 43 04             	mov    0x4(%ebx),%eax
@@ -1642,8 +1616,8 @@
       f->ref = 1;
 80100e35:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
       release(&ftable.lock);
-80100e3c:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e41:	e8 da 37 00 00       	call   80104620 <release>
+80100e3c:	68 e0 0f 11 80       	push   $0x80110fe0
+80100e41:	e8 2a 44 00 00       	call   80105270 <release>
       return f;
     }
   }
@@ -1662,8 +1636,8 @@
   return 0;
 80100e53:	31 db                	xor    %ebx,%ebx
   release(&ftable.lock);
-80100e55:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e5a:	e8 c1 37 00 00       	call   80104620 <release>
+80100e55:	68 e0 0f 11 80       	push   $0x80110fe0
+80100e5a:	e8 11 44 00 00       	call   80105270 <release>
 }
 80100e5f:	89 d8                	mov    %ebx,%eax
   return 0;
@@ -1687,8 +1661,8 @@
 80100e78:	83 ec 10             	sub    $0x10,%esp
 80100e7b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ftable.lock);
-80100e7e:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e83:	e8 d8 36 00 00       	call   80104560 <acquire>
+80100e7e:	68 e0 0f 11 80       	push   $0x80110fe0
+80100e83:	e8 28 43 00 00       	call   801051b0 <acquire>
   if(f->ref < 1)
 80100e88:	8b 43 04             	mov    0x4(%ebx),%eax
 80100e8b:	83 c4 10             	add    $0x10,%esp
@@ -1702,8 +1676,8 @@
   f->ref++;
 80100e98:	89 43 04             	mov    %eax,0x4(%ebx)
   release(&ftable.lock);
-80100e9b:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100ea0:	e8 7b 37 00 00       	call   80104620 <release>
+80100e9b:	68 e0 0f 11 80       	push   $0x80110fe0
+80100ea0:	e8 cb 43 00 00       	call   80105270 <release>
   return f;
 }
 80100ea5:	89 d8                	mov    %ebx,%eax
@@ -1712,7 +1686,7 @@
 80100eab:	c3                   	ret    
     panic("filedup");
 80100eac:	83 ec 0c             	sub    $0xc,%esp
-80100eaf:	68 74 71 10 80       	push   $0x80107174
+80100eaf:	68 f4 7e 10 80       	push   $0x80107ef4
 80100eb4:	e8 d7 f4 ff ff       	call   80100390 <panic>
 80100eb9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
@@ -1733,8 +1707,8 @@
   struct file ff;
 
   acquire(&ftable.lock);
-80100ed0:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100ed5:	e8 86 36 00 00       	call   80104560 <acquire>
+80100ed0:	68 e0 0f 11 80       	push   $0x80110fe0
+80100ed5:	e8 d6 42 00 00       	call   801051b0 <acquire>
   if(f->ref < 1)
 80100eda:	8b 53 04             	mov    0x4(%ebx),%edx
 80100edd:	83 c4 10             	add    $0x10,%esp
@@ -1763,11 +1737,11 @@
 80100f02:	88 45 e7             	mov    %al,-0x19(%ebp)
 80100f05:	8b 43 10             	mov    0x10(%ebx),%eax
   release(&ftable.lock);
-80100f08:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100f08:	68 e0 0f 11 80       	push   $0x80110fe0
   ff = *f;
 80100f0d:	89 45 e0             	mov    %eax,-0x20(%ebp)
   release(&ftable.lock);
-80100f10:	e8 0b 37 00 00       	call   80104620 <release>
+80100f10:	e8 5b 43 00 00       	call   80105270 <release>
 
   if(ff.type == FD_PIPE)
 80100f15:	83 c4 10             	add    $0x10,%esp
@@ -1790,7 +1764,7 @@
 80100f29:	c3                   	ret    
 80100f2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     release(&ftable.lock);
-80100f30:	c7 45 08 c0 ff 10 80 	movl   $0x8010ffc0,0x8(%ebp)
+80100f30:	c7 45 08 e0 0f 11 80 	movl   $0x80110fe0,0x8(%ebp)
 }
 80100f37:	8d 65 f4             	lea    -0xc(%ebp),%esp
 80100f3a:	5b                   	pop    %ebx
@@ -1798,11 +1772,11 @@
 80100f3c:	5f                   	pop    %edi
 80100f3d:	5d                   	pop    %ebp
     release(&ftable.lock);
-80100f3e:	e9 dd 36 00 00       	jmp    80104620 <release>
+80100f3e:	e9 2d 43 00 00       	jmp    80105270 <release>
 80100f43:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80100f47:	90                   	nop
     begin_op();
-80100f48:	e8 e3 1d 00 00       	call   80102d30 <begin_op>
+80100f48:	e8 53 1e 00 00       	call   80102da0 <begin_op>
     iput(ff.ip);
 80100f4d:	83 ec 0c             	sub    $0xc,%esp
 80100f50:	ff 75 e0             	pushl  -0x20(%ebp)
@@ -1816,7 +1790,7 @@
 80100f60:	5f                   	pop    %edi
 80100f61:	5d                   	pop    %ebp
     end_op();
-80100f62:	e9 39 1e 00 00       	jmp    80102da0 <end_op>
+80100f62:	e9 a9 1e 00 00       	jmp    80102e10 <end_op>
 80100f67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80100f6e:	66 90                	xchg   %ax,%ax
     pipeclose(ff.pipe, ff.writable);
@@ -1824,7 +1798,7 @@
 80100f74:	83 ec 08             	sub    $0x8,%esp
 80100f77:	53                   	push   %ebx
 80100f78:	56                   	push   %esi
-80100f79:	e8 82 25 00 00       	call   80103500 <pipeclose>
+80100f79:	e8 f2 25 00 00       	call   80103570 <pipeclose>
 80100f7e:	83 c4 10             	add    $0x10,%esp
 }
 80100f81:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -1835,7 +1809,7 @@
 80100f88:	c3                   	ret    
     panic("fileclose");
 80100f89:	83 ec 0c             	sub    $0xc,%esp
-80100f8c:	68 7c 71 10 80       	push   $0x8010717c
+80100f8c:	68 fc 7e 10 80       	push   $0x80107efc
 80100f91:	e8 fa f3 ff ff       	call   80100390 <panic>
 80100f96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80100f9d:	8d 76 00             	lea    0x0(%esi),%esi
@@ -1962,14 +1936,14 @@
 80101063:	5f                   	pop    %edi
 80101064:	5d                   	pop    %ebp
     return piperead(f->pipe, addr, n);
-80101065:	e9 36 26 00 00       	jmp    801036a0 <piperead>
+80101065:	e9 a6 26 00 00       	jmp    80103710 <piperead>
 8010106a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     return -1;
 80101070:	be ff ff ff ff       	mov    $0xffffffff,%esi
 80101075:	eb d3                	jmp    8010104a <fileread+0x5a>
   panic("fileread");
 80101077:	83 ec 0c             	sub    $0xc,%esp
-8010107a:	68 86 71 10 80       	push   $0x80107186
+8010107a:	68 06 7f 10 80       	push   $0x80107f06
 8010107f:	e8 0c f3 ff ff       	call   80100390 <panic>
 80101084:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010108b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2040,7 +2014,7 @@
       iunlock(f->ip);
 801010ec:	e8 4f 07 00 00       	call   80101840 <iunlock>
       end_op();
-801010f1:	e8 aa 1c 00 00       	call   80102da0 <end_op>
+801010f1:	e8 1a 1d 00 00       	call   80102e10 <end_op>
 
       if(r < 0)
         break;
@@ -2063,7 +2037,7 @@
 80101111:	81 fb 00 06 00 00    	cmp    $0x600,%ebx
 80101117:	0f 4f d8             	cmovg  %eax,%ebx
       begin_op();
-8010111a:	e8 11 1c 00 00       	call   80102d30 <begin_op>
+8010111a:	e8 81 1c 00 00       	call   80102da0 <begin_op>
       ilock(f->ip);
 8010111f:	83 ec 0c             	sub    $0xc,%esp
 80101122:	ff 76 10             	pushl  0x10(%esi)
@@ -2085,7 +2059,7 @@
 80101149:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 8010114c:	e8 ef 06 00 00       	call   80101840 <iunlock>
       end_op();
-80101151:	e8 4a 1c 00 00       	call   80102da0 <end_op>
+80101151:	e8 ba 1c 00 00       	call   80102e10 <end_op>
       if(r < 0)
 80101156:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80101159:	83 c4 10             	add    $0x10,%esp
@@ -2093,7 +2067,7 @@
 8010115e:	75 17                	jne    80101177 <filewrite+0xe7>
         panic("short filewrite");
 80101160:	83 ec 0c             	sub    $0xc,%esp
-80101163:	68 8f 71 10 80       	push   $0x8010718f
+80101163:	68 0f 7f 10 80       	push   $0x80107f0f
 80101168:	e8 23 f2 ff ff       	call   80100390 <panic>
 8010116d:	8d 76 00             	lea    0x0(%esi),%esi
     }
@@ -2121,10 +2095,10 @@
 8010118f:	5f                   	pop    %edi
 80101190:	5d                   	pop    %ebp
     return pipewrite(f->pipe, addr, n);
-80101191:	e9 0a 24 00 00       	jmp    801035a0 <pipewrite>
+80101191:	e9 7a 24 00 00       	jmp    80103610 <pipewrite>
   panic("filewrite");
 80101196:	83 ec 0c             	sub    $0xc,%esp
-80101199:	68 95 71 10 80       	push   $0x80107195
+80101199:	68 15 7f 10 80       	push   $0x80107f15
 8010119e:	e8 ed f1 ff ff       	call   80100390 <panic>
 801011a3:	66 90                	xchg   %ax,%ax
 801011a5:	66 90                	xchg   %ax,%ax
@@ -2149,7 +2123,7 @@
   bp = bread(dev, BBLOCK(b, sb));
 801011b3:	89 d0                	mov    %edx,%eax
 801011b5:	c1 e8 0c             	shr    $0xc,%eax
-801011b8:	03 05 d8 09 11 80    	add    0x801109d8,%eax
+801011b8:	03 05 f8 19 11 80    	add    0x801119f8,%eax
 {
 801011be:	89 e5                	mov    %esp,%ebp
 801011c0:	56                   	push   %esi
@@ -2188,7 +2162,7 @@
 801011f8:	88 54 18 5c          	mov    %dl,0x5c(%eax,%ebx,1)
   log_write(bp);
 801011fc:	50                   	push   %eax
-801011fd:	e8 0e 1d 00 00       	call   80102f10 <log_write>
+801011fd:	e8 7e 1d 00 00       	call   80102f80 <log_write>
   brelse(bp);
 80101202:	89 34 24             	mov    %esi,(%esp)
 80101205:	e8 e6 ef ff ff       	call   801001f0 <brelse>
@@ -2201,7 +2175,7 @@
 80101213:	c3                   	ret    
     panic("freeing free block");
 80101214:	83 ec 0c             	sub    $0xc,%esp
-80101217:	68 9f 71 10 80       	push   $0x8010719f
+80101217:	68 1f 7f 10 80       	push   $0x80107f1f
 8010121c:	e8 6f f1 ff ff       	call   80100390 <panic>
 80101221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80101228:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -2216,7 +2190,7 @@
 80101235:	53                   	push   %ebx
 80101236:	83 ec 1c             	sub    $0x1c,%esp
   for(b = 0; b < sb.size; b += BPB){
-80101239:	8b 0d c0 09 11 80    	mov    0x801109c0,%ecx
+80101239:	8b 0d e0 19 11 80    	mov    0x801119e0,%ecx
 {
 8010123f:	89 45 d8             	mov    %eax,-0x28(%ebp)
   for(b = 0; b < sb.size; b += BPB){
@@ -2228,14 +2202,14 @@
 80101254:	83 ec 08             	sub    $0x8,%esp
 80101257:	89 f0                	mov    %esi,%eax
 80101259:	c1 f8 0c             	sar    $0xc,%eax
-8010125c:	03 05 d8 09 11 80    	add    0x801109d8,%eax
+8010125c:	03 05 f8 19 11 80    	add    0x801119f8,%eax
 80101262:	50                   	push   %eax
 80101263:	ff 75 d8             	pushl  -0x28(%ebp)
 80101266:	e8 65 ee ff ff       	call   801000d0 <bread>
 8010126b:	83 c4 10             	add    $0x10,%esp
 8010126e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
-80101271:	a1 c0 09 11 80       	mov    0x801109c0,%eax
+80101271:	a1 e0 19 11 80       	mov    0x801119e0,%eax
 80101276:	89 45 e0             	mov    %eax,-0x20(%ebp)
 80101279:	31 c0                	xor    %eax,%eax
 8010127b:	eb 2f                	jmp    801012ac <balloc+0x7c>
@@ -2270,11 +2244,11 @@
 801012bc:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
 801012c3:	83 c4 10             	add    $0x10,%esp
 801012c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
-801012c9:	39 05 c0 09 11 80    	cmp    %eax,0x801109c0
+801012c9:	39 05 e0 19 11 80    	cmp    %eax,0x801119e0
 801012cf:	77 80                	ja     80101251 <balloc+0x21>
   panic("balloc: out of blocks");
 801012d1:	83 ec 0c             	sub    $0xc,%esp
-801012d4:	68 b2 71 10 80       	push   $0x801071b2
+801012d4:	68 32 7f 10 80       	push   $0x80107f32
 801012d9:	e8 b2 f0 ff ff       	call   80100390 <panic>
 801012de:	66 90                	xchg   %ax,%ax
         bp->data[bi/8] |= m;  // Mark block in use.
@@ -2286,7 +2260,7 @@
 801012e8:	88 54 0f 5c          	mov    %dl,0x5c(%edi,%ecx,1)
         log_write(bp);
 801012ec:	57                   	push   %edi
-801012ed:	e8 1e 1c 00 00       	call   80102f10 <log_write>
+801012ed:	e8 8e 1c 00 00       	call   80102f80 <log_write>
         brelse(bp);
 801012f2:	89 3c 24             	mov    %edi,(%esp)
 801012f5:	e8 f6 ee ff ff       	call   801001f0 <brelse>
@@ -2305,10 +2279,10 @@
 8010130d:	68 00 02 00 00       	push   $0x200
 80101312:	6a 00                	push   $0x0
 80101314:	50                   	push   %eax
-80101315:	e8 56 33 00 00       	call   80104670 <memset>
+80101315:	e8 a6 3f 00 00       	call   801052c0 <memset>
   log_write(bp);
 8010131a:	89 1c 24             	mov    %ebx,(%esp)
-8010131d:	e8 ee 1b 00 00       	call   80102f10 <log_write>
+8010131d:	e8 5e 1c 00 00       	call   80102f80 <log_write>
   brelse(bp);
 80101322:	89 1c 24             	mov    %ebx,(%esp)
 80101325:	e8 c6 ee ff ff       	call   801001f0 <brelse>
@@ -2346,13 +2320,13 @@
 {
 80101349:	53                   	push   %ebx
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-8010134a:	bb 14 0a 11 80       	mov    $0x80110a14,%ebx
+8010134a:	bb 34 1a 11 80       	mov    $0x80111a34,%ebx
 {
 8010134f:	83 ec 28             	sub    $0x28,%esp
 80101352:	89 55 e4             	mov    %edx,-0x1c(%ebp)
   acquire(&icache.lock);
-80101355:	68 e0 09 11 80       	push   $0x801109e0
-8010135a:	e8 01 32 00 00       	call   80104560 <acquire>
+80101355:	68 00 1a 11 80       	push   $0x80111a00
+8010135a:	e8 51 3e 00 00       	call   801051b0 <acquire>
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
 8010135f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   acquire(&icache.lock);
@@ -2365,7 +2339,7 @@
 80101372:	74 6c                	je     801013e0 <iget+0xa0>
 80101374:	81 c3 90 00 00 00    	add    $0x90,%ebx
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-8010137a:	81 fb 34 26 11 80    	cmp    $0x80112634,%ebx
+8010137a:	81 fb 54 36 11 80    	cmp    $0x80113654,%ebx
 80101380:	73 26                	jae    801013a8 <iget+0x68>
     if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
 80101382:	8b 4b 08             	mov    0x8(%ebx),%ecx
@@ -2384,7 +2358,7 @@
 80101397:	75 6e                	jne    80101407 <iget+0xc7>
 80101399:	89 c6                	mov    %eax,%esi
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-8010139b:	81 fb 34 26 11 80    	cmp    $0x80112634,%ebx
+8010139b:	81 fb 54 36 11 80    	cmp    $0x80113654,%ebx
 801013a1:	72 df                	jb     80101382 <iget+0x42>
 801013a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 801013a7:	90                   	nop
@@ -2411,8 +2385,8 @@
   ip->valid = 0;
 801013bb:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
   release(&icache.lock);
-801013c2:	68 e0 09 11 80       	push   $0x801109e0
-801013c7:	e8 54 32 00 00       	call   80104620 <release>
+801013c2:	68 00 1a 11 80       	push   $0x80111a00
+801013c7:	e8 a4 3e 00 00       	call   80105270 <release>
 
   return ip;
 801013cc:	83 c4 10             	add    $0x10,%esp
@@ -2435,11 +2409,11 @@
       return ip;
 801013eb:	89 de                	mov    %ebx,%esi
       release(&icache.lock);
-801013ed:	68 e0 09 11 80       	push   $0x801109e0
+801013ed:	68 00 1a 11 80       	push   $0x80111a00
       ip->ref++;
 801013f2:	89 4b 08             	mov    %ecx,0x8(%ebx)
       release(&icache.lock);
-801013f5:	e8 26 32 00 00       	call   80104620 <release>
+801013f5:	e8 76 3e 00 00       	call   80105270 <release>
       return ip;
 801013fa:	83 c4 10             	add    $0x10,%esp
 }
@@ -2451,7 +2425,7 @@
 80101405:	5d                   	pop    %ebp
 80101406:	c3                   	ret    
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-80101407:	81 fb 34 26 11 80    	cmp    $0x80112634,%ebx
+80101407:	81 fb 54 36 11 80    	cmp    $0x80113654,%ebx
 8010140d:	73 10                	jae    8010141f <iget+0xdf>
     if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
 8010140f:	8b 4b 08             	mov    0x8(%ebx),%ecx
@@ -2460,7 +2434,7 @@
 8010141a:	e9 6e ff ff ff       	jmp    8010138d <iget+0x4d>
     panic("iget: no inodes");
 8010141f:	83 ec 0c             	sub    $0xc,%esp
-80101422:	68 c8 71 10 80       	push   $0x801071c8
+80101422:	68 48 7f 10 80       	push   $0x80107f48
 80101427:	e8 64 ef ff ff       	call   80100390 <panic>
 8010142c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
@@ -2550,7 +2524,7 @@
 801014a2:	89 02                	mov    %eax,(%edx)
       log_write(bp);
 801014a4:	57                   	push   %edi
-801014a5:	e8 66 1a 00 00       	call   80102f10 <log_write>
+801014a5:	e8 d6 1a 00 00       	call   80102f80 <log_write>
 801014aa:	83 c4 10             	add    $0x10,%esp
 801014ad:	eb c6                	jmp    80101475 <bmap+0x45>
 801014af:	90                   	nop
@@ -2581,7 +2555,7 @@
 801014e7:	c3                   	ret    
   panic("bmap: out of range");
 801014e8:	83 ec 0c             	sub    $0xc,%esp
-801014eb:	68 d8 71 10 80       	push   $0x801071d8
+801014eb:	68 58 7f 10 80       	push   $0x80107f58
 801014f0:	e8 9b ee ff ff       	call   80100390 <panic>
 801014f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 801014fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2608,7 +2582,7 @@
 80101521:	6a 1c                	push   $0x1c
 80101523:	50                   	push   %eax
 80101524:	56                   	push   %esi
-80101525:	e8 e6 31 00 00       	call   80104710 <memmove>
+80101525:	e8 36 3e 00 00       	call   80105360 <memmove>
   brelse(bp);
 8010152a:	89 5d 08             	mov    %ebx,0x8(%ebp)
 8010152d:	83 c4 10             	add    $0x10,%esp
@@ -2628,39 +2602,39 @@
 80101544:	55                   	push   %ebp
 80101545:	89 e5                	mov    %esp,%ebp
 80101547:	53                   	push   %ebx
-80101548:	bb 20 0a 11 80       	mov    $0x80110a20,%ebx
+80101548:	bb 40 1a 11 80       	mov    $0x80111a40,%ebx
 8010154d:	83 ec 0c             	sub    $0xc,%esp
   initlock(&icache.lock, "icache");
-80101550:	68 eb 71 10 80       	push   $0x801071eb
-80101555:	68 e0 09 11 80       	push   $0x801109e0
-8010155a:	e8 81 2e 00 00       	call   801043e0 <initlock>
+80101550:	68 6b 7f 10 80       	push   $0x80107f6b
+80101555:	68 00 1a 11 80       	push   $0x80111a00
+8010155a:	e8 d1 3a 00 00       	call   80105030 <initlock>
   for(i = 0; i < NINODE; i++) {
 8010155f:	83 c4 10             	add    $0x10,%esp
 80101562:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     initsleeplock(&icache.inode[i].lock, "inode");
 80101568:	83 ec 08             	sub    $0x8,%esp
-8010156b:	68 f2 71 10 80       	push   $0x801071f2
+8010156b:	68 72 7f 10 80       	push   $0x80107f72
 80101570:	53                   	push   %ebx
 80101571:	81 c3 90 00 00 00    	add    $0x90,%ebx
-80101577:	e8 24 2d 00 00       	call   801042a0 <initsleeplock>
+80101577:	e8 74 39 00 00       	call   80104ef0 <initsleeplock>
   for(i = 0; i < NINODE; i++) {
 8010157c:	83 c4 10             	add    $0x10,%esp
-8010157f:	81 fb 40 26 11 80    	cmp    $0x80112640,%ebx
+8010157f:	81 fb 60 36 11 80    	cmp    $0x80113660,%ebx
 80101585:	75 e1                	jne    80101568 <iinit+0x28>
   readsb(dev, &sb);
 80101587:	83 ec 08             	sub    $0x8,%esp
-8010158a:	68 c0 09 11 80       	push   $0x801109c0
+8010158a:	68 e0 19 11 80       	push   $0x801119e0
 8010158f:	ff 75 08             	pushl  0x8(%ebp)
 80101592:	e8 69 ff ff ff       	call   80101500 <readsb>
   cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
-80101597:	ff 35 d8 09 11 80    	pushl  0x801109d8
-8010159d:	ff 35 d4 09 11 80    	pushl  0x801109d4
-801015a3:	ff 35 d0 09 11 80    	pushl  0x801109d0
-801015a9:	ff 35 cc 09 11 80    	pushl  0x801109cc
-801015af:	ff 35 c8 09 11 80    	pushl  0x801109c8
-801015b5:	ff 35 c4 09 11 80    	pushl  0x801109c4
-801015bb:	ff 35 c0 09 11 80    	pushl  0x801109c0
-801015c1:	68 58 72 10 80       	push   $0x80107258
+80101597:	ff 35 f8 19 11 80    	pushl  0x801119f8
+8010159d:	ff 35 f4 19 11 80    	pushl  0x801119f4
+801015a3:	ff 35 f0 19 11 80    	pushl  0x801119f0
+801015a9:	ff 35 ec 19 11 80    	pushl  0x801119ec
+801015af:	ff 35 e8 19 11 80    	pushl  0x801119e8
+801015b5:	ff 35 e4 19 11 80    	pushl  0x801119e4
+801015bb:	ff 35 e0 19 11 80    	pushl  0x801119e0
+801015c1:	68 d8 7f 10 80       	push   $0x80107fd8
 801015c6:	e8 e5 f0 ff ff       	call   801006b0 <cprintf>
 }
 801015cb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
@@ -2681,7 +2655,7 @@
 801015ea:	83 ec 1c             	sub    $0x1c,%esp
 801015ed:	8b 45 0c             	mov    0xc(%ebp),%eax
   for(inum = 1; inum < sb.ninodes; inum++){
-801015f0:	83 3d c8 09 11 80 01 	cmpl   $0x1,0x801109c8
+801015f0:	83 3d e8 19 11 80 01 	cmpl   $0x1,0x801119e8
 {
 801015f7:	8b 75 08             	mov    0x8(%ebp),%esi
 801015fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
@@ -2699,13 +2673,13 @@
 80101617:	e8 d4 eb ff ff       	call   801001f0 <brelse>
   for(inum = 1; inum < sb.ninodes; inum++){
 8010161c:	83 c4 10             	add    $0x10,%esp
-8010161f:	3b 3d c8 09 11 80    	cmp    0x801109c8,%edi
+8010161f:	3b 3d e8 19 11 80    	cmp    0x801119e8,%edi
 80101625:	73 69                	jae    80101690 <ialloc+0xb0>
     bp = bread(dev, IBLOCK(inum, sb));
 80101627:	89 f8                	mov    %edi,%eax
 80101629:	83 ec 08             	sub    $0x8,%esp
 8010162c:	c1 e8 03             	shr    $0x3,%eax
-8010162f:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+8010162f:	03 05 f4 19 11 80    	add    0x801119f4,%eax
 80101635:	50                   	push   %eax
 80101636:	56                   	push   %esi
 80101637:	e8 94 ea ff ff       	call   801000d0 <bread>
@@ -2727,14 +2701,14 @@
 80101659:	6a 40                	push   $0x40
 8010165b:	6a 00                	push   $0x0
 8010165d:	51                   	push   %ecx
-8010165e:	e8 0d 30 00 00       	call   80104670 <memset>
+8010165e:	e8 5d 3c 00 00       	call   801052c0 <memset>
       dip->type = type;
 80101663:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
 80101667:	8b 4d e0             	mov    -0x20(%ebp),%ecx
 8010166a:	66 89 01             	mov    %ax,(%ecx)
       log_write(bp);   // mark it allocated on the disk
 8010166d:	89 1c 24             	mov    %ebx,(%esp)
-80101670:	e8 9b 18 00 00       	call   80102f10 <log_write>
+80101670:	e8 0b 19 00 00       	call   80102f80 <log_write>
       brelse(bp);
 80101675:	89 1c 24             	mov    %ebx,(%esp)
 80101678:	e8 73 eb ff ff       	call   801001f0 <brelse>
@@ -2756,7 +2730,7 @@
 8010168b:	e9 b0 fc ff ff       	jmp    80101340 <iget>
   panic("ialloc: no inodes");
 80101690:	83 ec 0c             	sub    $0xc,%esp
-80101693:	68 f8 71 10 80       	push   $0x801071f8
+80101693:	68 78 7f 10 80       	push   $0x80107f78
 80101698:	e8 f3 ec ff ff       	call   80100390 <panic>
 8010169d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -2775,7 +2749,7 @@
   bp = bread(ip->dev, IBLOCK(ip->inum, sb));
 801016b2:	83 ec 08             	sub    $0x8,%esp
 801016b5:	c1 e8 03             	shr    $0x3,%eax
-801016b8:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+801016b8:	03 05 f4 19 11 80    	add    0x801119f4,%eax
 801016be:	50                   	push   %eax
 801016bf:	ff 73 a4             	pushl  -0x5c(%ebx)
 801016c2:	e8 09 ea ff ff       	call   801000d0 <bread>
@@ -2811,10 +2785,10 @@
 80101701:	6a 34                	push   $0x34
 80101703:	53                   	push   %ebx
 80101704:	50                   	push   %eax
-80101705:	e8 06 30 00 00       	call   80104710 <memmove>
+80101705:	e8 56 3c 00 00       	call   80105360 <memmove>
   log_write(bp);
 8010170a:	89 34 24             	mov    %esi,(%esp)
-8010170d:	e8 fe 17 00 00       	call   80102f10 <log_write>
+8010170d:	e8 6e 18 00 00       	call   80102f80 <log_write>
   brelse(bp);
 80101712:	89 75 08             	mov    %esi,0x8(%ebp)
 80101715:	83 c4 10             	add    $0x10,%esp
@@ -2837,13 +2811,13 @@
 80101738:	83 ec 10             	sub    $0x10,%esp
 8010173b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&icache.lock);
-8010173e:	68 e0 09 11 80       	push   $0x801109e0
-80101743:	e8 18 2e 00 00       	call   80104560 <acquire>
+8010173e:	68 00 1a 11 80       	push   $0x80111a00
+80101743:	e8 68 3a 00 00       	call   801051b0 <acquire>
   ip->ref++;
 80101748:	83 43 08 01          	addl   $0x1,0x8(%ebx)
   release(&icache.lock);
-8010174c:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101753:	e8 c8 2e 00 00       	call   80104620 <release>
+8010174c:	c7 04 24 00 1a 11 80 	movl   $0x80111a00,(%esp)
+80101753:	e8 18 3b 00 00       	call   80105270 <release>
 }
 80101758:	89 d8                	mov    %ebx,%eax
 8010175a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
@@ -2869,7 +2843,7 @@
 8010177f:	83 ec 0c             	sub    $0xc,%esp
 80101782:	8d 43 0c             	lea    0xc(%ebx),%eax
 80101785:	50                   	push   %eax
-80101786:	e8 55 2b 00 00       	call   801042e0 <acquiresleep>
+80101786:	e8 a5 37 00 00       	call   80104f30 <acquiresleep>
   if(ip->valid == 0){
 8010178b:	8b 43 4c             	mov    0x4c(%ebx),%eax
 8010178e:	83 c4 10             	add    $0x10,%esp
@@ -2886,7 +2860,7 @@
 801017a0:	8b 43 04             	mov    0x4(%ebx),%eax
 801017a3:	83 ec 08             	sub    $0x8,%esp
 801017a6:	c1 e8 03             	shr    $0x3,%eax
-801017a9:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+801017a9:	03 05 f4 19 11 80    	add    0x801119f4,%eax
 801017af:	50                   	push   %eax
 801017b0:	ff 33                	pushl  (%ebx)
 801017b2:	e8 19 e9 ff ff       	call   801000d0 <bread>
@@ -2922,7 +2896,7 @@
 801017f3:	50                   	push   %eax
 801017f4:	8d 43 5c             	lea    0x5c(%ebx),%eax
 801017f7:	50                   	push   %eax
-801017f8:	e8 13 2f 00 00       	call   80104710 <memmove>
+801017f8:	e8 63 3b 00 00       	call   80105360 <memmove>
     brelse(bp);
 801017fd:	89 34 24             	mov    %esi,(%esp)
 80101800:	e8 eb e9 ff ff       	call   801001f0 <brelse>
@@ -2935,11 +2909,11 @@
 80101814:	0f 85 7b ff ff ff    	jne    80101795 <ilock+0x35>
       panic("ilock: no type");
 8010181a:	83 ec 0c             	sub    $0xc,%esp
-8010181d:	68 10 72 10 80       	push   $0x80107210
+8010181d:	68 90 7f 10 80       	push   $0x80107f90
 80101822:	e8 69 eb ff ff       	call   80100390 <panic>
     panic("ilock");
 80101827:	83 ec 0c             	sub    $0xc,%esp
-8010182a:	68 0a 72 10 80       	push   $0x8010720a
+8010182a:	68 8a 7f 10 80       	push   $0x80107f8a
 8010182f:	e8 5c eb ff ff       	call   80100390 <panic>
 80101834:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010183b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2959,7 +2933,7 @@
 80101850:	83 ec 0c             	sub    $0xc,%esp
 80101853:	8d 73 0c             	lea    0xc(%ebx),%esi
 80101856:	56                   	push   %esi
-80101857:	e8 24 2b 00 00       	call   80104380 <holdingsleep>
+80101857:	e8 74 37 00 00       	call   80104fd0 <holdingsleep>
 8010185c:	83 c4 10             	add    $0x10,%esp
 8010185f:	85 c0                	test   %eax,%eax
 80101861:	74 15                	je     80101878 <iunlock+0x38>
@@ -2974,10 +2948,10 @@
 80101871:	5e                   	pop    %esi
 80101872:	5d                   	pop    %ebp
   releasesleep(&ip->lock);
-80101873:	e9 c8 2a 00 00       	jmp    80104340 <releasesleep>
+80101873:	e9 18 37 00 00       	jmp    80104f90 <releasesleep>
     panic("iunlock");
 80101878:	83 ec 0c             	sub    $0xc,%esp
-8010187b:	68 1f 72 10 80       	push   $0x8010721f
+8010187b:	68 9f 7f 10 80       	push   $0x80107f9f
 80101880:	e8 0b eb ff ff       	call   80100390 <panic>
 80101885:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010188c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2995,7 +2969,7 @@
   acquiresleep(&ip->lock);
 801018a0:	8d 7b 0c             	lea    0xc(%ebx),%edi
 801018a3:	57                   	push   %edi
-801018a4:	e8 37 2a 00 00       	call   801042e0 <acquiresleep>
+801018a4:	e8 87 36 00 00       	call   80104f30 <acquiresleep>
   if(ip->valid && ip->nlink == 0){
 801018a9:	8b 53 4c             	mov    0x4c(%ebx),%edx
 801018ac:	83 c4 10             	add    $0x10,%esp
@@ -3006,15 +2980,15 @@
   releasesleep(&ip->lock);
 801018ba:	83 ec 0c             	sub    $0xc,%esp
 801018bd:	57                   	push   %edi
-801018be:	e8 7d 2a 00 00       	call   80104340 <releasesleep>
+801018be:	e8 cd 36 00 00       	call   80104f90 <releasesleep>
   acquire(&icache.lock);
-801018c3:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-801018ca:	e8 91 2c 00 00       	call   80104560 <acquire>
+801018c3:	c7 04 24 00 1a 11 80 	movl   $0x80111a00,(%esp)
+801018ca:	e8 e1 38 00 00       	call   801051b0 <acquire>
   ip->ref--;
 801018cf:	83 6b 08 01          	subl   $0x1,0x8(%ebx)
   release(&icache.lock);
 801018d3:	83 c4 10             	add    $0x10,%esp
-801018d6:	c7 45 08 e0 09 11 80 	movl   $0x801109e0,0x8(%ebp)
+801018d6:	c7 45 08 00 1a 11 80 	movl   $0x80111a00,0x8(%ebp)
 }
 801018dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
 801018e0:	5b                   	pop    %ebx
@@ -3022,17 +2996,17 @@
 801018e2:	5f                   	pop    %edi
 801018e3:	5d                   	pop    %ebp
   release(&icache.lock);
-801018e4:	e9 37 2d 00 00       	jmp    80104620 <release>
+801018e4:	e9 87 39 00 00       	jmp    80105270 <release>
 801018e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     acquire(&icache.lock);
 801018f0:	83 ec 0c             	sub    $0xc,%esp
-801018f3:	68 e0 09 11 80       	push   $0x801109e0
-801018f8:	e8 63 2c 00 00       	call   80104560 <acquire>
+801018f3:	68 00 1a 11 80       	push   $0x80111a00
+801018f8:	e8 b3 38 00 00       	call   801051b0 <acquire>
     int r = ip->ref;
 801018fd:	8b 73 08             	mov    0x8(%ebx),%esi
     release(&icache.lock);
-80101900:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101907:	e8 14 2d 00 00       	call   80104620 <release>
+80101900:	c7 04 24 00 1a 11 80 	movl   $0x80111a00,(%esp)
+80101907:	e8 64 39 00 00       	call   80105270 <release>
     if(r == 1){
 8010190c:	83 c4 10             	add    $0x10,%esp
 8010190f:	83 fe 01             	cmp    $0x1,%esi
@@ -3287,7 +3261,7 @@
     memmove(dst, bp->data + off%BSIZE, m);
 80101b03:	50                   	push   %eax
 80101b04:	ff 75 e0             	pushl  -0x20(%ebp)
-80101b07:	e8 04 2c 00 00       	call   80104710 <memmove>
+80101b07:	e8 54 38 00 00       	call   80105360 <memmove>
     brelse(bp);
 80101b0c:	8b 55 dc             	mov    -0x24(%ebp),%edx
 80101b0f:	89 14 24             	mov    %edx,(%esp)
@@ -3312,7 +3286,7 @@
 80101b30:	0f bf 40 52          	movswl 0x52(%eax),%eax
 80101b34:	66 83 f8 09          	cmp    $0x9,%ax
 80101b38:	77 17                	ja     80101b51 <readi+0xf1>
-80101b3a:	8b 04 c5 60 09 11 80 	mov    -0x7feef6a0(,%eax,8),%eax
+80101b3a:	8b 04 c5 80 19 11 80 	mov    -0x7feee680(,%eax,8),%eax
 80101b41:	85 c0                	test   %eax,%eax
 80101b43:	74 0c                	je     80101b51 <readi+0xf1>
     return devsw[ip->major].read(ip, dst, n);
@@ -3417,10 +3391,10 @@
     memmove(bp->data + off%BSIZE, src, m);
 80101bff:	ff 75 dc             	pushl  -0x24(%ebp)
 80101c02:	50                   	push   %eax
-80101c03:	e8 08 2b 00 00       	call   80104710 <memmove>
+80101c03:	e8 58 37 00 00       	call   80105360 <memmove>
     log_write(bp);
 80101c08:	89 3c 24             	mov    %edi,(%esp)
-80101c0b:	e8 00 13 00 00       	call   80102f10 <log_write>
+80101c0b:	e8 70 13 00 00       	call   80102f80 <log_write>
     brelse(bp);
 80101c10:	89 3c 24             	mov    %edi,(%esp)
 80101c13:	e8 d8 e5 ff ff       	call   801001f0 <brelse>
@@ -3454,7 +3428,7 @@
 80101c40:	0f bf 40 52          	movswl 0x52(%eax),%eax
 80101c44:	66 83 f8 09          	cmp    $0x9,%ax
 80101c48:	77 32                	ja     80101c7c <writei+0x11c>
-80101c4a:	8b 04 c5 64 09 11 80 	mov    -0x7feef69c(,%eax,8),%eax
+80101c4a:	8b 04 c5 84 19 11 80 	mov    -0x7feee67c(,%eax,8),%eax
 80101c51:	85 c0                	test   %eax,%eax
 80101c53:	74 27                	je     80101c7c <writei+0x11c>
     return devsw[ip->major].write(ip, src, n);
@@ -3500,7 +3474,7 @@
 80101c9a:	6a 0e                	push   $0xe
 80101c9c:	ff 75 0c             	pushl  0xc(%ebp)
 80101c9f:	ff 75 08             	pushl  0x8(%ebp)
-80101ca2:	e8 d9 2a 00 00       	call   80104780 <strncmp>
+80101ca2:	e8 29 37 00 00       	call   801053d0 <strncmp>
 }
 80101ca7:	c9                   	leave  
 80101ca8:	c3                   	ret    
@@ -3556,7 +3530,7 @@
 80101cff:	6a 0e                	push   $0xe
 80101d01:	50                   	push   %eax
 80101d02:	ff 75 0c             	pushl  0xc(%ebp)
-80101d05:	e8 76 2a 00 00       	call   80104780 <strncmp>
+80101d05:	e8 c6 36 00 00       	call   801053d0 <strncmp>
       continue;
     if(namecmp(name, de.name) == 0){
 80101d0a:	83 c4 10             	add    $0x10,%esp
@@ -3604,11 +3578,11 @@
 80101d46:	c3                   	ret    
       panic("dirlookup read");
 80101d47:	83 ec 0c             	sub    $0xc,%esp
-80101d4a:	68 39 72 10 80       	push   $0x80107239
+80101d4a:	68 b9 7f 10 80       	push   $0x80107fb9
 80101d4f:	e8 3c e6 ff ff       	call   80100390 <panic>
     panic("dirlookup not DIR");
 80101d54:	83 ec 0c             	sub    $0xc,%esp
-80101d57:	68 27 72 10 80       	push   $0x80107227
+80101d57:	68 a7 7f 10 80       	push   $0x80107fa7
 80101d5c:	e8 2f e6 ff ff       	call   80100390 <panic>
 80101d61:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80101d68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -3640,20 +3614,20 @@
     ip = iget(ROOTDEV, ROOTINO);
   else
     ip = idup(myproc()->cwd);
-80101d8a:	e8 d1 1b 00 00       	call   80103960 <myproc>
+80101d8a:	e8 61 22 00 00       	call   80103ff0 <myproc>
   acquire(&icache.lock);
 80101d8f:	83 ec 0c             	sub    $0xc,%esp
 80101d92:	89 df                	mov    %ebx,%edi
     ip = idup(myproc()->cwd);
 80101d94:	8b 70 68             	mov    0x68(%eax),%esi
   acquire(&icache.lock);
-80101d97:	68 e0 09 11 80       	push   $0x801109e0
-80101d9c:	e8 bf 27 00 00       	call   80104560 <acquire>
+80101d97:	68 00 1a 11 80       	push   $0x80111a00
+80101d9c:	e8 0f 34 00 00       	call   801051b0 <acquire>
   ip->ref++;
 80101da1:	83 46 08 01          	addl   $0x1,0x8(%esi)
   release(&icache.lock);
-80101da5:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101dac:	e8 6f 28 00 00       	call   80104620 <release>
+80101da5:	c7 04 24 00 1a 11 80 	movl   $0x80111a00,(%esp)
+80101dac:	e8 bf 34 00 00       	call   80105270 <release>
 80101db1:	83 c4 10             	add    $0x10,%esp
 80101db4:	eb 0d                	jmp    80101dc3 <namex+0x53>
 80101db6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -3698,7 +3672,7 @@
 80101e12:	89 df                	mov    %ebx,%edi
     memmove(name, s, DIRSIZ);
 80101e14:	ff 75 e4             	pushl  -0x1c(%ebp)
-80101e17:	e8 f4 28 00 00       	call   80104710 <memmove>
+80101e17:	e8 44 35 00 00       	call   80105360 <memmove>
 80101e1c:	83 c4 10             	add    $0x10,%esp
   while(*path == '/')
 80101e1f:	80 3b 2f             	cmpb   $0x2f,(%ebx)
@@ -3764,7 +3738,7 @@
 80101e9e:	89 df                	mov    %ebx,%edi
     memmove(name, s, len);
 80101ea0:	ff 75 e4             	pushl  -0x1c(%ebp)
-80101ea3:	e8 68 28 00 00       	call   80104710 <memmove>
+80101ea3:	e8 b8 34 00 00       	call   80105360 <memmove>
     name[len] = 0;
 80101ea8:	8b 45 dc             	mov    -0x24(%ebp),%eax
 80101eab:	83 c4 10             	add    $0x10,%esp
@@ -3910,7 +3884,7 @@
 80101fcf:	6a 0e                	push   $0xe
 80101fd1:	ff 75 0c             	pushl  0xc(%ebp)
 80101fd4:	50                   	push   %eax
-80101fd5:	e8 f6 27 00 00       	call   801047d0 <strncpy>
+80101fd5:	e8 46 34 00 00       	call   80105420 <strncpy>
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
 80101fda:	6a 10                	push   $0x10
   de.inum = inum;
@@ -3945,11 +3919,11 @@
 8010200e:	eb e5                	jmp    80101ff5 <dirlink+0x85>
       panic("dirlink read");
 80102010:	83 ec 0c             	sub    $0xc,%esp
-80102013:	68 48 72 10 80       	push   $0x80107248
+80102013:	68 c8 7f 10 80       	push   $0x80107fc8
 80102018:	e8 73 e3 ff ff       	call   80100390 <panic>
     panic("dirlink");
 8010201d:	83 ec 0c             	sub    $0xc,%esp
-80102020:	68 1e 78 10 80       	push   $0x8010781e
+80102020:	68 ee 83 10 80       	push   $0x801083ee
 80102025:	e8 66 e3 ff ff       	call   80100390 <panic>
 8010202a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
@@ -3989,7 +3963,6 @@
   return namex(path, 1, name);
 8010205c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
 8010205f:	8b 45 08             	mov    0x8(%ebp),%eax
-}
 80102062:	5d                   	pop    %ebp
   return namex(path, 1, name);
 80102063:	e9 08 fd ff ff       	jmp    80101d70 <namex>
@@ -4100,11 +4073,11 @@
 80102127:	c3                   	ret    
     panic("incorrect blockno");
 80102128:	83 ec 0c             	sub    $0xc,%esp
-8010212b:	68 b4 72 10 80       	push   $0x801072b4
+8010212b:	68 34 80 10 80       	push   $0x80108034
 80102130:	e8 5b e2 ff ff       	call   80100390 <panic>
     panic("idestart");
 80102135:	83 ec 0c             	sub    $0xc,%esp
-80102138:	68 ab 72 10 80       	push   $0x801072ab
+80102138:	68 2b 80 10 80       	push   $0x8010802b
 8010213d:	e8 4e e2 ff ff       	call   80100390 <panic>
 80102142:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80102149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -4116,12 +4089,12 @@
 80102155:	89 e5                	mov    %esp,%ebp
 80102157:	83 ec 10             	sub    $0x10,%esp
   initlock(&idelock, "ide");
-8010215a:	68 c6 72 10 80       	push   $0x801072c6
-8010215f:	68 80 a5 10 80       	push   $0x8010a580
-80102164:	e8 77 22 00 00       	call   801043e0 <initlock>
+8010215a:	68 46 80 10 80       	push   $0x80108046
+8010215f:	68 80 b5 10 80       	push   $0x8010b580
+80102164:	e8 c7 2e 00 00       	call   80105030 <initlock>
   ioapicenable(IRQ_IDE, ncpu - 1);
 80102169:	58                   	pop    %eax
-8010216a:	a1 00 2d 11 80       	mov    0x80112d00,%eax
+8010216a:	a1 50 38 11 80       	mov    0x80113850,%eax
 8010216f:	5a                   	pop    %edx
 80102170:	83 e8 01             	sub    $0x1,%eax
 80102173:	50                   	push   %eax
@@ -4155,7 +4128,7 @@
 801021b6:	84 c0                	test   %al,%al
 801021b8:	74 f6                	je     801021b0 <ideinit+0x60>
       havedisk1 = 1;
-801021ba:	c7 05 60 a5 10 80 01 	movl   $0x1,0x8010a560
+801021ba:	c7 05 60 b5 10 80 01 	movl   $0x1,0x8010b560
 801021c1:	00 00 00 
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
 801021c4:	b8 e0 ff ff ff       	mov    $0xffffffe0,%eax
@@ -4185,11 +4158,11 @@
 
   // First queued buffer is the active request.
   acquire(&idelock);
-801021ed:	68 80 a5 10 80       	push   $0x8010a580
-801021f2:	e8 69 23 00 00       	call   80104560 <acquire>
+801021ed:	68 80 b5 10 80       	push   $0x8010b580
+801021f2:	e8 b9 2f 00 00       	call   801051b0 <acquire>
 
   if((b = idequeue) == 0){
-801021f7:	8b 1d 64 a5 10 80    	mov    0x8010a564,%ebx
+801021f7:	8b 1d 64 b5 10 80    	mov    0x8010b564,%ebx
 801021fd:	83 c4 10             	add    $0x10,%esp
 80102200:	85 db                	test   %ebx,%ebx
 80102202:	74 5f                	je     80102263 <ideintr+0x83>
@@ -4198,7 +4171,7 @@
   }
   idequeue = b->qnext;
 80102204:	8b 43 58             	mov    0x58(%ebx),%eax
-80102207:	a3 64 a5 10 80       	mov    %eax,0x8010a564
+80102207:	a3 64 b5 10 80       	mov    %eax,0x8010b564
 
   // Read data if needed.
   if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
@@ -4238,11 +4211,11 @@
 8010224a:	89 33                	mov    %esi,(%ebx)
   wakeup(b);
 8010224c:	53                   	push   %ebx
-8010224d:	e8 8e 1e 00 00       	call   801040e0 <wakeup>
+8010224d:	e8 fe 28 00 00       	call   80104b50 <wakeup>
 
   // Start disk on next buf in queue.
   if(idequeue != 0)
-80102252:	a1 64 a5 10 80       	mov    0x8010a564,%eax
+80102252:	a1 64 b5 10 80       	mov    0x8010b564,%eax
 80102257:	83 c4 10             	add    $0x10,%esp
 8010225a:	85 c0                	test   %eax,%eax
 8010225c:	74 05                	je     80102263 <ideintr+0x83>
@@ -4250,8 +4223,8 @@
 8010225e:	e8 0d fe ff ff       	call   80102070 <idestart>
     release(&idelock);
 80102263:	83 ec 0c             	sub    $0xc,%esp
-80102266:	68 80 a5 10 80       	push   $0x8010a580
-8010226b:	e8 b0 23 00 00       	call   80104620 <release>
+80102266:	68 80 b5 10 80       	push   $0x8010b580
+8010226b:	e8 00 30 00 00       	call   80105270 <release>
 
   release(&idelock);
 }
@@ -4282,7 +4255,7 @@
   if(!holdingsleep(&b->lock))
 8010228e:	8d 43 0c             	lea    0xc(%ebx),%eax
 80102291:	50                   	push   %eax
-80102292:	e8 e9 20 00 00       	call   80104380 <holdingsleep>
+80102292:	e8 39 2d 00 00       	call   80104fd0 <holdingsleep>
 80102297:	83 c4 10             	add    $0x10,%esp
 8010229a:	85 c0                	test   %eax,%eax
 8010229c:	0f 84 cf 00 00 00    	je     80102371 <iderw+0xf1>
@@ -4297,20 +4270,20 @@
 801022b0:	8b 53 04             	mov    0x4(%ebx),%edx
 801022b3:	85 d2                	test   %edx,%edx
 801022b5:	74 0d                	je     801022c4 <iderw+0x44>
-801022b7:	a1 60 a5 10 80       	mov    0x8010a560,%eax
+801022b7:	a1 60 b5 10 80       	mov    0x8010b560,%eax
 801022bc:	85 c0                	test   %eax,%eax
 801022be:	0f 84 93 00 00 00    	je     80102357 <iderw+0xd7>
     panic("iderw: ide disk 1 not present");
 
   acquire(&idelock);  //DOC:acquire-lock
 801022c4:	83 ec 0c             	sub    $0xc,%esp
-801022c7:	68 80 a5 10 80       	push   $0x8010a580
-801022cc:	e8 8f 22 00 00       	call   80104560 <acquire>
+801022c7:	68 80 b5 10 80       	push   $0x8010b580
+801022cc:	e8 df 2e 00 00       	call   801051b0 <acquire>
 
   // Append b to idequeue.
   b->qnext = 0;
   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-801022d1:	a1 64 a5 10 80       	mov    0x8010a564,%eax
+801022d1:	a1 64 b5 10 80       	mov    0x8010b564,%eax
   b->qnext = 0;
 801022d6:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
@@ -4329,7 +4302,7 @@
 
   // Start disk if necessary.
   if(idequeue == b)
-801022f6:	39 1d 64 a5 10 80    	cmp    %ebx,0x8010a564
+801022f6:	39 1d 64 b5 10 80    	cmp    %ebx,0x8010b564
 801022fc:	74 42                	je     80102340 <iderw+0xc0>
     idestart(b);
 
@@ -4343,9 +4316,9 @@
 8010230f:	90                   	nop
     sleep(b, &idelock);
 80102310:	83 ec 08             	sub    $0x8,%esp
-80102313:	68 80 a5 10 80       	push   $0x8010a580
+80102313:	68 80 b5 10 80       	push   $0x8010b580
 80102318:	53                   	push   %ebx
-80102319:	e8 02 1c 00 00       	call   80103f20 <sleep>
+80102319:	e8 72 26 00 00       	call   80104990 <sleep>
   while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
 8010231e:	8b 03                	mov    (%ebx),%eax
 80102320:	83 c4 10             	add    $0x10,%esp
@@ -4356,12 +4329,12 @@
 
 
   release(&idelock);
-8010232b:	c7 45 08 80 a5 10 80 	movl   $0x8010a580,0x8(%ebp)
+8010232b:	c7 45 08 80 b5 10 80 	movl   $0x8010b580,0x8(%ebp)
 }
 80102332:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 80102335:	c9                   	leave  
   release(&idelock);
-80102336:	e9 e5 22 00 00       	jmp    80104620 <release>
+80102336:	e9 35 2f 00 00       	jmp    80105270 <release>
 8010233b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8010233f:	90                   	nop
     idestart(b);
@@ -4370,19 +4343,19 @@
 80102347:	eb b5                	jmp    801022fe <iderw+0x7e>
 80102349:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-80102350:	ba 64 a5 10 80       	mov    $0x8010a564,%edx
+80102350:	ba 64 b5 10 80       	mov    $0x8010b564,%edx
 80102355:	eb 9d                	jmp    801022f4 <iderw+0x74>
     panic("iderw: ide disk 1 not present");
 80102357:	83 ec 0c             	sub    $0xc,%esp
-8010235a:	68 f5 72 10 80       	push   $0x801072f5
+8010235a:	68 75 80 10 80       	push   $0x80108075
 8010235f:	e8 2c e0 ff ff       	call   80100390 <panic>
     panic("iderw: nothing to do");
 80102364:	83 ec 0c             	sub    $0xc,%esp
-80102367:	68 e0 72 10 80       	push   $0x801072e0
+80102367:	68 60 80 10 80       	push   $0x80108060
 8010236c:	e8 1f e0 ff ff       	call   80100390 <panic>
     panic("iderw: buf not locked");
 80102371:	83 ec 0c             	sub    $0xc,%esp
-80102374:	68 ca 72 10 80       	push   $0x801072ca
+80102374:	68 4a 80 10 80       	push   $0x8010804a
 80102379:	e8 12 e0 ff ff       	call   80100390 <panic>
 8010237e:	66 90                	xchg   %ax,%ax
 
@@ -4398,7 +4371,7 @@
   int i, id, maxintr;
 
   ioapic = (volatile struct ioapic*)IOAPIC;
-80102385:	c7 05 34 26 11 80 00 	movl   $0xfec00000,0x80112634
+80102385:	c7 05 54 36 11 80 00 	movl   $0xfec00000,0x80113654
 8010238c:	00 c0 fe 
 {
 8010238f:	89 e5                	mov    %esp,%ebp
@@ -4408,16 +4381,16 @@
 80102393:	c7 05 00 00 c0 fe 01 	movl   $0x1,0xfec00000
 8010239a:	00 00 00 
   return ioapic->data;
-8010239d:	8b 15 34 26 11 80    	mov    0x80112634,%edx
+8010239d:	8b 15 54 36 11 80    	mov    0x80113654,%edx
 801023a3:	8b 72 10             	mov    0x10(%edx),%esi
   ioapic->reg = reg;
 801023a6:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
   return ioapic->data;
-801023ac:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+801023ac:	8b 0d 54 36 11 80    	mov    0x80113654,%ecx
   maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
   id = ioapicread(REG_ID) >> 24;
   if(id != ioapicid)
-801023b2:	0f b6 15 60 27 11 80 	movzbl 0x80112760,%edx
+801023b2:	0f b6 15 80 37 11 80 	movzbl 0x80113780,%edx
   maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
 801023b9:	c1 ee 10             	shr    $0x10,%esi
 801023bc:	89 f0                	mov    %esi,%eax
@@ -4431,9 +4404,9 @@
 801023c9:	74 16                	je     801023e1 <ioapicinit+0x61>
     cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
 801023cb:	83 ec 0c             	sub    $0xc,%esp
-801023ce:	68 14 73 10 80       	push   $0x80107314
+801023ce:	68 94 80 10 80       	push   $0x80108094
 801023d3:	e8 d8 e2 ff ff       	call   801006b0 <cprintf>
-801023d8:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+801023d8:	8b 0d 54 36 11 80    	mov    0x80113654,%ecx
 801023de:	83 c4 10             	add    $0x10,%esp
 801023e1:	83 c6 21             	add    $0x21,%esi
 {
@@ -4449,7 +4422,7 @@
     ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
 801023f2:	89 c3                	mov    %eax,%ebx
   ioapic->data = data;
-801023f4:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+801023f4:	8b 0d 54 36 11 80    	mov    0x80113654,%ecx
 801023fa:	83 c0 01             	add    $0x1,%eax
     ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
 801023fd:	81 cb 00 00 01 00    	or     $0x10000,%ebx
@@ -4460,7 +4433,7 @@
 80102409:	83 c2 02             	add    $0x2,%edx
 8010240c:	89 19                	mov    %ebx,(%ecx)
   ioapic->data = data;
-8010240e:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+8010240e:	8b 0d 54 36 11 80    	mov    0x80113654,%ecx
 80102414:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%ecx)
   for(i = 0; i <= maxintr; i++){
 8010241b:	39 f0                	cmp    %esi,%eax
@@ -4484,7 +4457,7 @@
 80102430:	f3 0f 1e fb          	endbr32 
 80102434:	55                   	push   %ebp
   ioapic->reg = reg;
-80102435:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+80102435:	8b 0d 54 36 11 80    	mov    0x80113654,%ecx
 {
 8010243b:	89 e5                	mov    %esp,%ebp
 8010243d:	8b 45 08             	mov    0x8(%ebp),%eax
@@ -4497,7 +4470,7 @@
   ioapic->reg = reg;
 80102447:	89 01                	mov    %eax,(%ecx)
   ioapic->data = data;
-80102449:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+80102449:	8b 0d 54 36 11 80    	mov    0x80113654,%ecx
   ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
 8010244f:	83 c0 01             	add    $0x1,%eax
   ioapic->data = data;
@@ -4507,7 +4480,7 @@
   ioapic->reg = reg;
 80102458:	89 01                	mov    %eax,(%ecx)
   ioapic->data = data;
-8010245a:	a1 34 26 11 80       	mov    0x80112634,%eax
+8010245a:	a1 54 36 11 80       	mov    0x80113654,%eax
   ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
 8010245f:	c1 e2 18             	shl    $0x18,%edx
   ioapic->data = data;
@@ -4534,139 +4507,137 @@
 80102477:	53                   	push   %ebx
 80102478:	83 ec 04             	sub    $0x4,%esp
 8010247b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+
   struct run *r;
+  // struct proc *p=myproc();
 
-  if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
+  if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP){
 8010247e:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
-80102484:	75 7a                	jne    80102500 <kfree+0x90>
-80102486:	81 fb a8 54 11 80    	cmp    $0x801154a8,%ebx
-8010248c:	72 72                	jb     80102500 <kfree+0x90>
-8010248e:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80102494:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
-80102499:	77 65                	ja     80102500 <kfree+0x90>
-    panic("kfree");
+80102484:	0f 85 df 00 00 00    	jne    80102569 <kfree+0xf9>
+8010248a:	81 fb fc 63 11 80    	cmp    $0x801163fc,%ebx
+80102490:	0f 82 d3 00 00 00    	jb     80102569 <kfree+0xf9>
+80102496:	8d 93 00 00 00 80    	lea    -0x80000000(%ebx),%edx
+8010249c:	81 fa ff ff ff 0d    	cmp    $0xdffffff,%edx
+801024a2:	0f 87 c1 00 00 00    	ja     80102569 <kfree+0xf9>
+801024a8:	89 d8                	mov    %ebx,%eax
+801024aa:	8d 93 00 10 00 00    	lea    0x1000(%ebx),%edx
+  }
 
   // Fill with junk to catch dangling refs.
-  memset(v, 1, PGSIZE);
-8010249b:	83 ec 04             	sub    $0x4,%esp
-8010249e:	68 00 10 00 00       	push   $0x1000
-801024a3:	6a 01                	push   $0x1
-801024a5:	53                   	push   %ebx
-801024a6:	e8 c5 21 00 00       	call   80104670 <memset>
+  // memset(v, 1, PGSIZE);
+  for(int i=0;i<PGSIZE;i++){
+    v[i]=1;
+801024b0:	c6 00 01             	movb   $0x1,(%eax)
+  for(int i=0;i<PGSIZE;i++){
+801024b3:	83 c0 01             	add    $0x1,%eax
+801024b6:	39 d0                	cmp    %edx,%eax
+801024b8:	75 f6                	jne    801024b0 <kfree+0x40>
+  }
 
   if(kmem.use_lock)
-801024ab:	8b 15 74 26 11 80    	mov    0x80112674,%edx
-801024b1:	83 c4 10             	add    $0x10,%esp
-801024b4:	85 d2                	test   %edx,%edx
-801024b6:	75 20                	jne    801024d8 <kfree+0x68>
+801024ba:	a1 94 36 11 80       	mov    0x80113694,%eax
+801024bf:	85 c0                	test   %eax,%eax
+801024c1:	0f 85 8d 00 00 00    	jne    80102554 <kfree+0xe4>
     acquire(&kmem.lock);
   r = (struct run*)v;
   r->next = kmem.freelist;
-801024b8:	a1 78 26 11 80       	mov    0x80112678,%eax
-801024bd:	89 03                	mov    %eax,(%ebx)
+801024c7:	a1 98 36 11 80       	mov    0x80113698,%eax
+801024cc:	89 03                	mov    %eax,(%ebx)
   kmem.freelist = r;
   if(kmem.use_lock)
-801024bf:	a1 74 26 11 80       	mov    0x80112674,%eax
+801024ce:	a1 94 36 11 80       	mov    0x80113694,%eax
   kmem.freelist = r;
-801024c4:	89 1d 78 26 11 80    	mov    %ebx,0x80112678
+801024d3:	89 1d 98 36 11 80    	mov    %ebx,0x80113698
   if(kmem.use_lock)
-801024ca:	85 c0                	test   %eax,%eax
-801024cc:	75 22                	jne    801024f0 <kfree+0x80>
-    release(&kmem.lock);
-}
-801024ce:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801024d1:	c9                   	leave  
-801024d2:	c3                   	ret    
-801024d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801024d7:	90                   	nop
-    acquire(&kmem.lock);
-801024d8:	83 ec 0c             	sub    $0xc,%esp
-801024db:	68 40 26 11 80       	push   $0x80112640
-801024e0:	e8 7b 20 00 00       	call   80104560 <acquire>
-801024e5:	83 c4 10             	add    $0x10,%esp
-801024e8:	eb ce                	jmp    801024b8 <kfree+0x48>
-801024ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801024d9:	85 c0                	test   %eax,%eax
+801024db:	75 0e                	jne    801024eb <kfree+0x7b>
     release(&kmem.lock);
-801024f0:	c7 45 08 40 26 11 80 	movl   $0x80112640,0x8(%ebp)
+
+  //Wake up processes sleeping on sleeping channel.
+  if(kmem.use_lock)
+    acquire(&sleeping_channel_lock);
+  if(sleeping_channel_count){
+801024dd:	a1 c8 b5 10 80       	mov    0x8010b5c8,%eax
+801024e2:	85 c0                	test   %eax,%eax
+801024e4:	75 39                	jne    8010251f <kfree+0xaf>
+    sleeping_channel_count=0;
+  }
+  if(kmem.use_lock)
+    release(&sleeping_channel_lock);
+
 }
-801024f7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801024fa:	c9                   	leave  
+801024e6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801024e9:	c9                   	leave  
+801024ea:	c3                   	ret    
     release(&kmem.lock);
-801024fb:	e9 20 21 00 00       	jmp    80104620 <release>
+801024eb:	83 ec 0c             	sub    $0xc,%esp
+801024ee:	68 60 36 11 80       	push   $0x80113660
+801024f3:	e8 78 2d 00 00       	call   80105270 <release>
+  if(kmem.use_lock)
+801024f8:	8b 1d 94 36 11 80    	mov    0x80113694,%ebx
+801024fe:	83 c4 10             	add    $0x10,%esp
+80102501:	85 db                	test   %ebx,%ebx
+80102503:	74 d8                	je     801024dd <kfree+0x6d>
+    acquire(&sleeping_channel_lock);
+80102505:	83 ec 0c             	sub    $0xc,%esp
+80102508:	68 c0 63 11 80       	push   $0x801163c0
+8010250d:	e8 9e 2c 00 00       	call   801051b0 <acquire>
+  if(sleeping_channel_count){
+80102512:	8b 0d c8 b5 10 80    	mov    0x8010b5c8,%ecx
+80102518:	83 c4 10             	add    $0x10,%esp
+8010251b:	85 c9                	test   %ecx,%ecx
+8010251d:	74 1b                	je     8010253a <kfree+0xca>
+    wakeup(sleeping_channel);
+8010251f:	83 ec 0c             	sub    $0xc,%esp
+80102522:	ff 35 f8 63 11 80    	pushl  0x801163f8
+80102528:	e8 23 26 00 00       	call   80104b50 <wakeup>
+    sleeping_channel_count=0;
+8010252d:	83 c4 10             	add    $0x10,%esp
+80102530:	c7 05 c8 b5 10 80 00 	movl   $0x0,0x8010b5c8
+80102537:	00 00 00 
+  if(kmem.use_lock)
+8010253a:	8b 15 94 36 11 80    	mov    0x80113694,%edx
+80102540:	85 d2                	test   %edx,%edx
+80102542:	74 a2                	je     801024e6 <kfree+0x76>
+    release(&sleeping_channel_lock);
+80102544:	c7 45 08 c0 63 11 80 	movl   $0x801163c0,0x8(%ebp)
+}
+8010254b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010254e:	c9                   	leave  
+    release(&sleeping_channel_lock);
+8010254f:	e9 1c 2d 00 00       	jmp    80105270 <release>
+    acquire(&kmem.lock);
+80102554:	83 ec 0c             	sub    $0xc,%esp
+80102557:	68 60 36 11 80       	push   $0x80113660
+8010255c:	e8 4f 2c 00 00       	call   801051b0 <acquire>
+80102561:	83 c4 10             	add    $0x10,%esp
+80102564:	e9 5e ff ff ff       	jmp    801024c7 <kfree+0x57>
     panic("kfree");
-80102500:	83 ec 0c             	sub    $0xc,%esp
-80102503:	68 46 73 10 80       	push   $0x80107346
-80102508:	e8 83 de ff ff       	call   80100390 <panic>
-8010250d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80102510 <freerange>:
-{
-80102510:	f3 0f 1e fb          	endbr32 
-80102514:	55                   	push   %ebp
-80102515:	89 e5                	mov    %esp,%ebp
-80102517:	56                   	push   %esi
+80102569:	83 ec 0c             	sub    $0xc,%esp
+8010256c:	68 c6 80 10 80       	push   $0x801080c6
+80102571:	e8 1a de ff ff       	call   80100390 <panic>
+80102576:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010257d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80102580 <freerange>:
+{
+80102580:	f3 0f 1e fb          	endbr32 
+80102584:	55                   	push   %ebp
+80102585:	89 e5                	mov    %esp,%ebp
+80102587:	56                   	push   %esi
   p = (char*)PGROUNDUP((uint)vstart);
-80102518:	8b 45 08             	mov    0x8(%ebp),%eax
+80102588:	8b 45 08             	mov    0x8(%ebp),%eax
 {
-8010251b:	8b 75 0c             	mov    0xc(%ebp),%esi
-8010251e:	53                   	push   %ebx
+8010258b:	8b 75 0c             	mov    0xc(%ebp),%esi
+8010258e:	53                   	push   %ebx
   p = (char*)PGROUNDUP((uint)vstart);
-8010251f:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
-80102525:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-8010252b:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80102531:	39 de                	cmp    %ebx,%esi
-80102533:	72 1f                	jb     80102554 <freerange+0x44>
-80102535:	8d 76 00             	lea    0x0(%esi),%esi
-    kfree(p);
-80102538:	83 ec 0c             	sub    $0xc,%esp
-8010253b:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+8010258f:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102595:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-80102541:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-    kfree(p);
-80102547:	50                   	push   %eax
-80102548:	e8 23 ff ff ff       	call   80102470 <kfree>
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-8010254d:	83 c4 10             	add    $0x10,%esp
-80102550:	39 f3                	cmp    %esi,%ebx
-80102552:	76 e4                	jbe    80102538 <freerange+0x28>
-}
-80102554:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80102557:	5b                   	pop    %ebx
-80102558:	5e                   	pop    %esi
-80102559:	5d                   	pop    %ebp
-8010255a:	c3                   	ret    
-8010255b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010255f:	90                   	nop
-
-80102560 <kinit1>:
-{
-80102560:	f3 0f 1e fb          	endbr32 
-80102564:	55                   	push   %ebp
-80102565:	89 e5                	mov    %esp,%ebp
-80102567:	56                   	push   %esi
-80102568:	53                   	push   %ebx
-80102569:	8b 75 0c             	mov    0xc(%ebp),%esi
-  initlock(&kmem.lock, "kmem");
-8010256c:	83 ec 08             	sub    $0x8,%esp
-8010256f:	68 4c 73 10 80       	push   $0x8010734c
-80102574:	68 40 26 11 80       	push   $0x80112640
-80102579:	e8 62 1e 00 00       	call   801043e0 <initlock>
-  p = (char*)PGROUNDUP((uint)vstart);
-8010257e:	8b 45 08             	mov    0x8(%ebp),%eax
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-80102581:	83 c4 10             	add    $0x10,%esp
-  kmem.use_lock = 0;
-80102584:	c7 05 74 26 11 80 00 	movl   $0x0,0x80112674
-8010258b:	00 00 00 
-  p = (char*)PGROUNDUP((uint)vstart);
-8010258e:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
-80102594:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-8010259a:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-801025a0:	39 de                	cmp    %ebx,%esi
-801025a2:	72 20                	jb     801025c4 <kinit1+0x64>
-801025a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010259b:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801025a1:	39 de                	cmp    %ebx,%esi
+801025a3:	72 1f                	jb     801025c4 <freerange+0x44>
+801025a5:	8d 76 00             	lea    0x0(%esi),%esi
     kfree(p);
 801025a8:	83 ec 0c             	sub    $0xc,%esp
 801025ab:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
@@ -4677,8 +4648,8 @@
 801025b8:	e8 b3 fe ff ff       	call   80102470 <kfree>
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
 801025bd:	83 c4 10             	add    $0x10,%esp
-801025c0:	39 de                	cmp    %ebx,%esi
-801025c2:	73 e4                	jae    801025a8 <kinit1+0x48>
+801025c0:	39 f3                	cmp    %esi,%ebx
+801025c2:	76 e4                	jbe    801025a8 <freerange+0x28>
 }
 801025c4:	8d 65 f8             	lea    -0x8(%ebp),%esp
 801025c7:	5b                   	pop    %ebx
@@ -4688,10898 +4659,10863 @@
 801025cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 801025cf:	90                   	nop
 
-801025d0 <kinit2>:
+801025d0 <kinit1>:
 {
 801025d0:	f3 0f 1e fb          	endbr32 
 801025d4:	55                   	push   %ebp
 801025d5:	89 e5                	mov    %esp,%ebp
 801025d7:	56                   	push   %esi
+801025d8:	53                   	push   %ebx
+801025d9:	8b 75 0c             	mov    0xc(%ebp),%esi
+  initlock(&kmem.lock, "kmem");
+801025dc:	83 ec 08             	sub    $0x8,%esp
+801025df:	68 cc 80 10 80       	push   $0x801080cc
+801025e4:	68 60 36 11 80       	push   $0x80113660
+801025e9:	e8 42 2a 00 00       	call   80105030 <initlock>
   p = (char*)PGROUNDUP((uint)vstart);
-801025d8:	8b 45 08             	mov    0x8(%ebp),%eax
+801025ee:	8b 45 08             	mov    0x8(%ebp),%eax
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+801025f1:	83 c4 10             	add    $0x10,%esp
+  kmem.use_lock = 0;
+801025f4:	c7 05 94 36 11 80 00 	movl   $0x0,0x80113694
+801025fb:	00 00 00 
+  p = (char*)PGROUNDUP((uint)vstart);
+801025fe:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102604:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+8010260a:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80102610:	39 de                	cmp    %ebx,%esi
+80102612:	72 20                	jb     80102634 <kinit1+0x64>
+80102614:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    kfree(p);
+80102618:	83 ec 0c             	sub    $0xc,%esp
+8010261b:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102621:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    kfree(p);
+80102627:	50                   	push   %eax
+80102628:	e8 43 fe ff ff       	call   80102470 <kfree>
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+8010262d:	83 c4 10             	add    $0x10,%esp
+80102630:	39 de                	cmp    %ebx,%esi
+80102632:	73 e4                	jae    80102618 <kinit1+0x48>
+}
+80102634:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102637:	5b                   	pop    %ebx
+80102638:	5e                   	pop    %esi
+80102639:	5d                   	pop    %ebp
+8010263a:	c3                   	ret    
+8010263b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010263f:	90                   	nop
+
+80102640 <kinit2>:
+{
+80102640:	f3 0f 1e fb          	endbr32 
+80102644:	55                   	push   %ebp
+80102645:	89 e5                	mov    %esp,%ebp
+80102647:	56                   	push   %esi
+  p = (char*)PGROUNDUP((uint)vstart);
+80102648:	8b 45 08             	mov    0x8(%ebp),%eax
 {
-801025db:	8b 75 0c             	mov    0xc(%ebp),%esi
-801025de:	53                   	push   %ebx
+8010264b:	8b 75 0c             	mov    0xc(%ebp),%esi
+8010264e:	53                   	push   %ebx
   p = (char*)PGROUNDUP((uint)vstart);
-801025df:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
-801025e5:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+8010264f:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102655:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-801025eb:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-801025f1:	39 de                	cmp    %ebx,%esi
-801025f3:	72 1f                	jb     80102614 <kinit2+0x44>
-801025f5:	8d 76 00             	lea    0x0(%esi),%esi
+8010265b:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80102661:	39 de                	cmp    %ebx,%esi
+80102663:	72 1f                	jb     80102684 <kinit2+0x44>
+80102665:	8d 76 00             	lea    0x0(%esi),%esi
     kfree(p);
-801025f8:	83 ec 0c             	sub    $0xc,%esp
-801025fb:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+80102668:	83 ec 0c             	sub    $0xc,%esp
+8010266b:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-80102601:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80102671:	81 c3 00 10 00 00    	add    $0x1000,%ebx
     kfree(p);
-80102607:	50                   	push   %eax
-80102608:	e8 63 fe ff ff       	call   80102470 <kfree>
+80102677:	50                   	push   %eax
+80102678:	e8 f3 fd ff ff       	call   80102470 <kfree>
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-8010260d:	83 c4 10             	add    $0x10,%esp
-80102610:	39 de                	cmp    %ebx,%esi
-80102612:	73 e4                	jae    801025f8 <kinit2+0x28>
+8010267d:	83 c4 10             	add    $0x10,%esp
+80102680:	39 de                	cmp    %ebx,%esi
+80102682:	73 e4                	jae    80102668 <kinit2+0x28>
   kmem.use_lock = 1;
-80102614:	c7 05 74 26 11 80 01 	movl   $0x1,0x80112674
-8010261b:	00 00 00 
+80102684:	c7 05 94 36 11 80 01 	movl   $0x1,0x80113694
+8010268b:	00 00 00 
 }
-8010261e:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80102621:	5b                   	pop    %ebx
-80102622:	5e                   	pop    %esi
-80102623:	5d                   	pop    %ebp
-80102624:	c3                   	ret    
-80102625:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010262c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010268e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102691:	5b                   	pop    %ebx
+80102692:	5e                   	pop    %esi
+80102693:	5d                   	pop    %ebp
+80102694:	c3                   	ret    
+80102695:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010269c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80102630 <kalloc>:
+801026a0 <kalloc>:
 // Allocate one 4096-byte page of physical memory.
 // Returns a pointer that the kernel can use.
 // Returns 0 if the memory cannot be allocated.
 char*
 kalloc(void)
 {
-80102630:	f3 0f 1e fb          	endbr32 
+801026a0:	f3 0f 1e fb          	endbr32 
   struct run *r;
 
   if(kmem.use_lock)
-80102634:	a1 74 26 11 80       	mov    0x80112674,%eax
-80102639:	85 c0                	test   %eax,%eax
-8010263b:	75 1b                	jne    80102658 <kalloc+0x28>
+801026a4:	a1 94 36 11 80       	mov    0x80113694,%eax
+801026a9:	85 c0                	test   %eax,%eax
+801026ab:	75 1b                	jne    801026c8 <kalloc+0x28>
     acquire(&kmem.lock);
   r = kmem.freelist;
-8010263d:	a1 78 26 11 80       	mov    0x80112678,%eax
+801026ad:	a1 98 36 11 80       	mov    0x80113698,%eax
   if(r)
-80102642:	85 c0                	test   %eax,%eax
-80102644:	74 0a                	je     80102650 <kalloc+0x20>
+801026b2:	85 c0                	test   %eax,%eax
+801026b4:	74 0a                	je     801026c0 <kalloc+0x20>
     kmem.freelist = r->next;
-80102646:	8b 10                	mov    (%eax),%edx
-80102648:	89 15 78 26 11 80    	mov    %edx,0x80112678
+801026b6:	8b 10                	mov    (%eax),%edx
+801026b8:	89 15 98 36 11 80    	mov    %edx,0x80113698
   if(kmem.use_lock)
-8010264e:	c3                   	ret    
-8010264f:	90                   	nop
+801026be:	c3                   	ret    
+801026bf:	90                   	nop
     release(&kmem.lock);
   return (char*)r;
 }
-80102650:	c3                   	ret    
-80102651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801026c0:	c3                   	ret    
+801026c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 {
-80102658:	55                   	push   %ebp
-80102659:	89 e5                	mov    %esp,%ebp
-8010265b:	83 ec 24             	sub    $0x24,%esp
+801026c8:	55                   	push   %ebp
+801026c9:	89 e5                	mov    %esp,%ebp
+801026cb:	83 ec 24             	sub    $0x24,%esp
     acquire(&kmem.lock);
-8010265e:	68 40 26 11 80       	push   $0x80112640
-80102663:	e8 f8 1e 00 00       	call   80104560 <acquire>
+801026ce:	68 60 36 11 80       	push   $0x80113660
+801026d3:	e8 d8 2a 00 00       	call   801051b0 <acquire>
   r = kmem.freelist;
-80102668:	a1 78 26 11 80       	mov    0x80112678,%eax
+801026d8:	a1 98 36 11 80       	mov    0x80113698,%eax
   if(r)
-8010266d:	8b 15 74 26 11 80    	mov    0x80112674,%edx
-80102673:	83 c4 10             	add    $0x10,%esp
-80102676:	85 c0                	test   %eax,%eax
-80102678:	74 08                	je     80102682 <kalloc+0x52>
+801026dd:	8b 15 94 36 11 80    	mov    0x80113694,%edx
+801026e3:	83 c4 10             	add    $0x10,%esp
+801026e6:	85 c0                	test   %eax,%eax
+801026e8:	74 08                	je     801026f2 <kalloc+0x52>
     kmem.freelist = r->next;
-8010267a:	8b 08                	mov    (%eax),%ecx
-8010267c:	89 0d 78 26 11 80    	mov    %ecx,0x80112678
+801026ea:	8b 08                	mov    (%eax),%ecx
+801026ec:	89 0d 98 36 11 80    	mov    %ecx,0x80113698
   if(kmem.use_lock)
-80102682:	85 d2                	test   %edx,%edx
-80102684:	74 16                	je     8010269c <kalloc+0x6c>
+801026f2:	85 d2                	test   %edx,%edx
+801026f4:	74 16                	je     8010270c <kalloc+0x6c>
     release(&kmem.lock);
-80102686:	83 ec 0c             	sub    $0xc,%esp
-80102689:	89 45 f4             	mov    %eax,-0xc(%ebp)
-8010268c:	68 40 26 11 80       	push   $0x80112640
-80102691:	e8 8a 1f 00 00       	call   80104620 <release>
+801026f6:	83 ec 0c             	sub    $0xc,%esp
+801026f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
+801026fc:	68 60 36 11 80       	push   $0x80113660
+80102701:	e8 6a 2b 00 00       	call   80105270 <release>
   return (char*)r;
-80102696:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80102706:	8b 45 f4             	mov    -0xc(%ebp),%eax
     release(&kmem.lock);
-80102699:	83 c4 10             	add    $0x10,%esp
+80102709:	83 c4 10             	add    $0x10,%esp
 }
-8010269c:	c9                   	leave  
-8010269d:	c3                   	ret    
-8010269e:	66 90                	xchg   %ax,%ax
+8010270c:	c9                   	leave  
+8010270d:	c3                   	ret    
+8010270e:	66 90                	xchg   %ax,%ax
 
-801026a0 <kbdgetc>:
+80102710 <kbdgetc>:
 #include "defs.h"
 #include "kbd.h"
 
 int
 kbdgetc(void)
 {
-801026a0:	f3 0f 1e fb          	endbr32 
+80102710:	f3 0f 1e fb          	endbr32 
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801026a4:	ba 64 00 00 00       	mov    $0x64,%edx
-801026a9:	ec                   	in     (%dx),%al
+80102714:	ba 64 00 00 00       	mov    $0x64,%edx
+80102719:	ec                   	in     (%dx),%al
     normalmap, shiftmap, ctlmap, ctlmap
   };
   uint st, data, c;
 
   st = inb(KBSTATP);
   if((st & KBS_DIB) == 0)
-801026aa:	a8 01                	test   $0x1,%al
-801026ac:	0f 84 be 00 00 00    	je     80102770 <kbdgetc+0xd0>
+8010271a:	a8 01                	test   $0x1,%al
+8010271c:	0f 84 be 00 00 00    	je     801027e0 <kbdgetc+0xd0>
 {
-801026b2:	55                   	push   %ebp
-801026b3:	ba 60 00 00 00       	mov    $0x60,%edx
-801026b8:	89 e5                	mov    %esp,%ebp
-801026ba:	53                   	push   %ebx
-801026bb:	ec                   	in     (%dx),%al
+80102722:	55                   	push   %ebp
+80102723:	ba 60 00 00 00       	mov    $0x60,%edx
+80102728:	89 e5                	mov    %esp,%ebp
+8010272a:	53                   	push   %ebx
+8010272b:	ec                   	in     (%dx),%al
   return data;
-801026bc:	8b 1d b4 a5 10 80    	mov    0x8010a5b4,%ebx
+8010272c:	8b 1d b4 b5 10 80    	mov    0x8010b5b4,%ebx
     return -1;
   data = inb(KBDATAP);
-801026c2:	0f b6 d0             	movzbl %al,%edx
+80102732:	0f b6 d0             	movzbl %al,%edx
 
   if(data == 0xE0){
-801026c5:	3c e0                	cmp    $0xe0,%al
-801026c7:	74 57                	je     80102720 <kbdgetc+0x80>
+80102735:	3c e0                	cmp    $0xe0,%al
+80102737:	74 57                	je     80102790 <kbdgetc+0x80>
     shift |= E0ESC;
     return 0;
   } else if(data & 0x80){
-801026c9:	89 d9                	mov    %ebx,%ecx
-801026cb:	83 e1 40             	and    $0x40,%ecx
-801026ce:	84 c0                	test   %al,%al
-801026d0:	78 5e                	js     80102730 <kbdgetc+0x90>
+80102739:	89 d9                	mov    %ebx,%ecx
+8010273b:	83 e1 40             	and    $0x40,%ecx
+8010273e:	84 c0                	test   %al,%al
+80102740:	78 5e                	js     801027a0 <kbdgetc+0x90>
     // Key released
     data = (shift & E0ESC ? data : data & 0x7F);
     shift &= ~(shiftcode[data] | E0ESC);
     return 0;
   } else if(shift & E0ESC){
-801026d2:	85 c9                	test   %ecx,%ecx
-801026d4:	74 09                	je     801026df <kbdgetc+0x3f>
+80102742:	85 c9                	test   %ecx,%ecx
+80102744:	74 09                	je     8010274f <kbdgetc+0x3f>
     // Last character was an E0 escape; or with 0x80
     data |= 0x80;
-801026d6:	83 c8 80             	or     $0xffffff80,%eax
+80102746:	83 c8 80             	or     $0xffffff80,%eax
     shift &= ~E0ESC;
-801026d9:	83 e3 bf             	and    $0xffffffbf,%ebx
+80102749:	83 e3 bf             	and    $0xffffffbf,%ebx
     data |= 0x80;
-801026dc:	0f b6 d0             	movzbl %al,%edx
+8010274c:	0f b6 d0             	movzbl %al,%edx
   }
 
   shift |= shiftcode[data];
-801026df:	0f b6 8a 80 74 10 80 	movzbl -0x7fef8b80(%edx),%ecx
+8010274f:	0f b6 8a 00 82 10 80 	movzbl -0x7fef7e00(%edx),%ecx
   shift ^= togglecode[data];
-801026e6:	0f b6 82 80 73 10 80 	movzbl -0x7fef8c80(%edx),%eax
+80102756:	0f b6 82 00 81 10 80 	movzbl -0x7fef7f00(%edx),%eax
   shift |= shiftcode[data];
-801026ed:	09 d9                	or     %ebx,%ecx
+8010275d:	09 d9                	or     %ebx,%ecx
   shift ^= togglecode[data];
-801026ef:	31 c1                	xor    %eax,%ecx
+8010275f:	31 c1                	xor    %eax,%ecx
   c = charcode[shift & (CTL | SHIFT)][data];
-801026f1:	89 c8                	mov    %ecx,%eax
+80102761:	89 c8                	mov    %ecx,%eax
   shift ^= togglecode[data];
-801026f3:	89 0d b4 a5 10 80    	mov    %ecx,0x8010a5b4
+80102763:	89 0d b4 b5 10 80    	mov    %ecx,0x8010b5b4
   c = charcode[shift & (CTL | SHIFT)][data];
-801026f9:	83 e0 03             	and    $0x3,%eax
+80102769:	83 e0 03             	and    $0x3,%eax
   if(shift & CAPSLOCK){
-801026fc:	83 e1 08             	and    $0x8,%ecx
+8010276c:	83 e1 08             	and    $0x8,%ecx
   c = charcode[shift & (CTL | SHIFT)][data];
-801026ff:	8b 04 85 60 73 10 80 	mov    -0x7fef8ca0(,%eax,4),%eax
-80102706:	0f b6 04 10          	movzbl (%eax,%edx,1),%eax
+8010276f:	8b 04 85 e0 80 10 80 	mov    -0x7fef7f20(,%eax,4),%eax
+80102776:	0f b6 04 10          	movzbl (%eax,%edx,1),%eax
   if(shift & CAPSLOCK){
-8010270a:	74 0b                	je     80102717 <kbdgetc+0x77>
+8010277a:	74 0b                	je     80102787 <kbdgetc+0x77>
     if('a' <= c && c <= 'z')
-8010270c:	8d 50 9f             	lea    -0x61(%eax),%edx
-8010270f:	83 fa 19             	cmp    $0x19,%edx
-80102712:	77 44                	ja     80102758 <kbdgetc+0xb8>
+8010277c:	8d 50 9f             	lea    -0x61(%eax),%edx
+8010277f:	83 fa 19             	cmp    $0x19,%edx
+80102782:	77 44                	ja     801027c8 <kbdgetc+0xb8>
       c += 'A' - 'a';
-80102714:	83 e8 20             	sub    $0x20,%eax
+80102784:	83 e8 20             	sub    $0x20,%eax
     else if('A' <= c && c <= 'Z')
       c += 'a' - 'A';
   }
   return c;
 }
-80102717:	5b                   	pop    %ebx
-80102718:	5d                   	pop    %ebp
-80102719:	c3                   	ret    
-8010271a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80102787:	5b                   	pop    %ebx
+80102788:	5d                   	pop    %ebp
+80102789:	c3                   	ret    
+8010278a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     shift |= E0ESC;
-80102720:	83 cb 40             	or     $0x40,%ebx
+80102790:	83 cb 40             	or     $0x40,%ebx
     return 0;
-80102723:	31 c0                	xor    %eax,%eax
+80102793:	31 c0                	xor    %eax,%eax
     shift |= E0ESC;
-80102725:	89 1d b4 a5 10 80    	mov    %ebx,0x8010a5b4
+80102795:	89 1d b4 b5 10 80    	mov    %ebx,0x8010b5b4
 }
-8010272b:	5b                   	pop    %ebx
-8010272c:	5d                   	pop    %ebp
-8010272d:	c3                   	ret    
-8010272e:	66 90                	xchg   %ax,%ax
+8010279b:	5b                   	pop    %ebx
+8010279c:	5d                   	pop    %ebp
+8010279d:	c3                   	ret    
+8010279e:	66 90                	xchg   %ax,%ax
     data = (shift & E0ESC ? data : data & 0x7F);
-80102730:	83 e0 7f             	and    $0x7f,%eax
-80102733:	85 c9                	test   %ecx,%ecx
-80102735:	0f 44 d0             	cmove  %eax,%edx
+801027a0:	83 e0 7f             	and    $0x7f,%eax
+801027a3:	85 c9                	test   %ecx,%ecx
+801027a5:	0f 44 d0             	cmove  %eax,%edx
     return 0;
-80102738:	31 c0                	xor    %eax,%eax
+801027a8:	31 c0                	xor    %eax,%eax
     shift &= ~(shiftcode[data] | E0ESC);
-8010273a:	0f b6 8a 80 74 10 80 	movzbl -0x7fef8b80(%edx),%ecx
-80102741:	83 c9 40             	or     $0x40,%ecx
-80102744:	0f b6 c9             	movzbl %cl,%ecx
-80102747:	f7 d1                	not    %ecx
-80102749:	21 d9                	and    %ebx,%ecx
+801027aa:	0f b6 8a 00 82 10 80 	movzbl -0x7fef7e00(%edx),%ecx
+801027b1:	83 c9 40             	or     $0x40,%ecx
+801027b4:	0f b6 c9             	movzbl %cl,%ecx
+801027b7:	f7 d1                	not    %ecx
+801027b9:	21 d9                	and    %ebx,%ecx
 }
-8010274b:	5b                   	pop    %ebx
-8010274c:	5d                   	pop    %ebp
+801027bb:	5b                   	pop    %ebx
+801027bc:	5d                   	pop    %ebp
     shift &= ~(shiftcode[data] | E0ESC);
-8010274d:	89 0d b4 a5 10 80    	mov    %ecx,0x8010a5b4
+801027bd:	89 0d b4 b5 10 80    	mov    %ecx,0x8010b5b4
 }
-80102753:	c3                   	ret    
-80102754:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801027c3:	c3                   	ret    
+801027c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     else if('A' <= c && c <= 'Z')
-80102758:	8d 48 bf             	lea    -0x41(%eax),%ecx
+801027c8:	8d 48 bf             	lea    -0x41(%eax),%ecx
       c += 'a' - 'A';
-8010275b:	8d 50 20             	lea    0x20(%eax),%edx
+801027cb:	8d 50 20             	lea    0x20(%eax),%edx
 }
-8010275e:	5b                   	pop    %ebx
-8010275f:	5d                   	pop    %ebp
+801027ce:	5b                   	pop    %ebx
+801027cf:	5d                   	pop    %ebp
       c += 'a' - 'A';
-80102760:	83 f9 1a             	cmp    $0x1a,%ecx
-80102763:	0f 42 c2             	cmovb  %edx,%eax
+801027d0:	83 f9 1a             	cmp    $0x1a,%ecx
+801027d3:	0f 42 c2             	cmovb  %edx,%eax
 }
-80102766:	c3                   	ret    
-80102767:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010276e:	66 90                	xchg   %ax,%ax
+801027d6:	c3                   	ret    
+801027d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801027de:	66 90                	xchg   %ax,%ax
     return -1;
-80102770:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801027e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80102775:	c3                   	ret    
-80102776:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010277d:	8d 76 00             	lea    0x0(%esi),%esi
+801027e5:	c3                   	ret    
+801027e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801027ed:	8d 76 00             	lea    0x0(%esi),%esi
 
-80102780 <kbdintr>:
+801027f0 <kbdintr>:
 
 void
 kbdintr(void)
 {
-80102780:	f3 0f 1e fb          	endbr32 
-80102784:	55                   	push   %ebp
-80102785:	89 e5                	mov    %esp,%ebp
-80102787:	83 ec 14             	sub    $0x14,%esp
+801027f0:	f3 0f 1e fb          	endbr32 
+801027f4:	55                   	push   %ebp
+801027f5:	89 e5                	mov    %esp,%ebp
+801027f7:	83 ec 14             	sub    $0x14,%esp
   consoleintr(kbdgetc);
-8010278a:	68 a0 26 10 80       	push   $0x801026a0
-8010278f:	e8 cc e0 ff ff       	call   80100860 <consoleintr>
+801027fa:	68 10 27 10 80       	push   $0x80102710
+801027ff:	e8 5c e0 ff ff       	call   80100860 <consoleintr>
 }
-80102794:	83 c4 10             	add    $0x10,%esp
-80102797:	c9                   	leave  
-80102798:	c3                   	ret    
-80102799:	66 90                	xchg   %ax,%ax
-8010279b:	66 90                	xchg   %ax,%ax
-8010279d:	66 90                	xchg   %ax,%ax
-8010279f:	90                   	nop
+80102804:	83 c4 10             	add    $0x10,%esp
+80102807:	c9                   	leave  
+80102808:	c3                   	ret    
+80102809:	66 90                	xchg   %ax,%ax
+8010280b:	66 90                	xchg   %ax,%ax
+8010280d:	66 90                	xchg   %ax,%ax
+8010280f:	90                   	nop
 
-801027a0 <lapicinit>:
+80102810 <lapicinit>:
   lapic[ID];  // wait for write to finish, by reading
 }
 
 void
 lapicinit(void)
 {
-801027a0:	f3 0f 1e fb          	endbr32 
+80102810:	f3 0f 1e fb          	endbr32 
   if(!lapic)
-801027a4:	a1 7c 26 11 80       	mov    0x8011267c,%eax
-801027a9:	85 c0                	test   %eax,%eax
-801027ab:	0f 84 c7 00 00 00    	je     80102878 <lapicinit+0xd8>
+80102814:	a1 9c 36 11 80       	mov    0x8011369c,%eax
+80102819:	85 c0                	test   %eax,%eax
+8010281b:	0f 84 c7 00 00 00    	je     801028e8 <lapicinit+0xd8>
   lapic[index] = value;
-801027b1:	c7 80 f0 00 00 00 3f 	movl   $0x13f,0xf0(%eax)
-801027b8:	01 00 00 
+80102821:	c7 80 f0 00 00 00 3f 	movl   $0x13f,0xf0(%eax)
+80102828:	01 00 00 
   lapic[ID];  // wait for write to finish, by reading
-801027bb:	8b 50 20             	mov    0x20(%eax),%edx
+8010282b:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-801027be:	c7 80 e0 03 00 00 0b 	movl   $0xb,0x3e0(%eax)
-801027c5:	00 00 00 
+8010282e:	c7 80 e0 03 00 00 0b 	movl   $0xb,0x3e0(%eax)
+80102835:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-801027c8:	8b 50 20             	mov    0x20(%eax),%edx
+80102838:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-801027cb:	c7 80 20 03 00 00 20 	movl   $0x20020,0x320(%eax)
-801027d2:	00 02 00 
+8010283b:	c7 80 20 03 00 00 20 	movl   $0x20020,0x320(%eax)
+80102842:	00 02 00 
   lapic[ID];  // wait for write to finish, by reading
-801027d5:	8b 50 20             	mov    0x20(%eax),%edx
+80102845:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-801027d8:	c7 80 80 03 00 00 80 	movl   $0x989680,0x380(%eax)
-801027df:	96 98 00 
+80102848:	c7 80 80 03 00 00 80 	movl   $0x989680,0x380(%eax)
+8010284f:	96 98 00 
   lapic[ID];  // wait for write to finish, by reading
-801027e2:	8b 50 20             	mov    0x20(%eax),%edx
+80102852:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-801027e5:	c7 80 50 03 00 00 00 	movl   $0x10000,0x350(%eax)
-801027ec:	00 01 00 
+80102855:	c7 80 50 03 00 00 00 	movl   $0x10000,0x350(%eax)
+8010285c:	00 01 00 
   lapic[ID];  // wait for write to finish, by reading
-801027ef:	8b 50 20             	mov    0x20(%eax),%edx
+8010285f:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-801027f2:	c7 80 60 03 00 00 00 	movl   $0x10000,0x360(%eax)
-801027f9:	00 01 00 
+80102862:	c7 80 60 03 00 00 00 	movl   $0x10000,0x360(%eax)
+80102869:	00 01 00 
   lapic[ID];  // wait for write to finish, by reading
-801027fc:	8b 50 20             	mov    0x20(%eax),%edx
+8010286c:	8b 50 20             	mov    0x20(%eax),%edx
   lapicw(LINT0, MASKED);
   lapicw(LINT1, MASKED);
 
   // Disable performance counter overflow interrupts
   // on machines that provide that interrupt entry.
   if(((lapic[VER]>>16) & 0xFF) >= 4)
-801027ff:	8b 50 30             	mov    0x30(%eax),%edx
-80102802:	c1 ea 10             	shr    $0x10,%edx
-80102805:	81 e2 fc 00 00 00    	and    $0xfc,%edx
-8010280b:	75 73                	jne    80102880 <lapicinit+0xe0>
+8010286f:	8b 50 30             	mov    0x30(%eax),%edx
+80102872:	c1 ea 10             	shr    $0x10,%edx
+80102875:	81 e2 fc 00 00 00    	and    $0xfc,%edx
+8010287b:	75 73                	jne    801028f0 <lapicinit+0xe0>
   lapic[index] = value;
-8010280d:	c7 80 70 03 00 00 33 	movl   $0x33,0x370(%eax)
-80102814:	00 00 00 
+8010287d:	c7 80 70 03 00 00 33 	movl   $0x33,0x370(%eax)
+80102884:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-80102817:	8b 50 20             	mov    0x20(%eax),%edx
+80102887:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-8010281a:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
-80102821:	00 00 00 
+8010288a:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
+80102891:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-80102824:	8b 50 20             	mov    0x20(%eax),%edx
+80102894:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-80102827:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
-8010282e:	00 00 00 
+80102897:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
+8010289e:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-80102831:	8b 50 20             	mov    0x20(%eax),%edx
+801028a1:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-80102834:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
-8010283b:	00 00 00 
+801028a4:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
+801028ab:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-8010283e:	8b 50 20             	mov    0x20(%eax),%edx
+801028ae:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-80102841:	c7 80 10 03 00 00 00 	movl   $0x0,0x310(%eax)
-80102848:	00 00 00 
+801028b1:	c7 80 10 03 00 00 00 	movl   $0x0,0x310(%eax)
+801028b8:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-8010284b:	8b 50 20             	mov    0x20(%eax),%edx
+801028bb:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-8010284e:	c7 80 00 03 00 00 00 	movl   $0x88500,0x300(%eax)
-80102855:	85 08 00 
+801028be:	c7 80 00 03 00 00 00 	movl   $0x88500,0x300(%eax)
+801028c5:	85 08 00 
   lapic[ID];  // wait for write to finish, by reading
-80102858:	8b 50 20             	mov    0x20(%eax),%edx
-8010285b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010285f:	90                   	nop
+801028c8:	8b 50 20             	mov    0x20(%eax),%edx
+801028cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801028cf:	90                   	nop
   lapicw(EOI, 0);
 
   // Send an Init Level De-Assert to synchronise arbitration ID's.
   lapicw(ICRHI, 0);
   lapicw(ICRLO, BCAST | INIT | LEVEL);
   while(lapic[ICRLO] & DELIVS)
-80102860:	8b 90 00 03 00 00    	mov    0x300(%eax),%edx
-80102866:	80 e6 10             	and    $0x10,%dh
-80102869:	75 f5                	jne    80102860 <lapicinit+0xc0>
+801028d0:	8b 90 00 03 00 00    	mov    0x300(%eax),%edx
+801028d6:	80 e6 10             	and    $0x10,%dh
+801028d9:	75 f5                	jne    801028d0 <lapicinit+0xc0>
   lapic[index] = value;
-8010286b:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
-80102872:	00 00 00 
+801028db:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
+801028e2:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-80102875:	8b 40 20             	mov    0x20(%eax),%eax
+801028e5:	8b 40 20             	mov    0x20(%eax),%eax
     ;
 
   // Enable interrupts on the APIC (but not on the processor).
   lapicw(TPR, 0);
 }
-80102878:	c3                   	ret    
-80102879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801028e8:	c3                   	ret    
+801028e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   lapic[index] = value;
-80102880:	c7 80 40 03 00 00 00 	movl   $0x10000,0x340(%eax)
-80102887:	00 01 00 
+801028f0:	c7 80 40 03 00 00 00 	movl   $0x10000,0x340(%eax)
+801028f7:	00 01 00 
   lapic[ID];  // wait for write to finish, by reading
-8010288a:	8b 50 20             	mov    0x20(%eax),%edx
+801028fa:	8b 50 20             	mov    0x20(%eax),%edx
 }
-8010288d:	e9 7b ff ff ff       	jmp    8010280d <lapicinit+0x6d>
-80102892:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80102899:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801028fd:	e9 7b ff ff ff       	jmp    8010287d <lapicinit+0x6d>
+80102902:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102909:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801028a0 <lapicid>:
+80102910 <lapicid>:
 
 int
 lapicid(void)
 {
-801028a0:	f3 0f 1e fb          	endbr32 
+80102910:	f3 0f 1e fb          	endbr32 
   if (!lapic)
-801028a4:	a1 7c 26 11 80       	mov    0x8011267c,%eax
-801028a9:	85 c0                	test   %eax,%eax
-801028ab:	74 0b                	je     801028b8 <lapicid+0x18>
+80102914:	a1 9c 36 11 80       	mov    0x8011369c,%eax
+80102919:	85 c0                	test   %eax,%eax
+8010291b:	74 0b                	je     80102928 <lapicid+0x18>
     return 0;
   return lapic[ID] >> 24;
-801028ad:	8b 40 20             	mov    0x20(%eax),%eax
-801028b0:	c1 e8 18             	shr    $0x18,%eax
-801028b3:	c3                   	ret    
-801028b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010291d:	8b 40 20             	mov    0x20(%eax),%eax
+80102920:	c1 e8 18             	shr    $0x18,%eax
+80102923:	c3                   	ret    
+80102924:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return 0;
-801028b8:	31 c0                	xor    %eax,%eax
+80102928:	31 c0                	xor    %eax,%eax
 }
-801028ba:	c3                   	ret    
-801028bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801028bf:	90                   	nop
+8010292a:	c3                   	ret    
+8010292b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010292f:	90                   	nop
 
-801028c0 <lapiceoi>:
+80102930 <lapiceoi>:
 
 // Acknowledge interrupt.
 void
 lapiceoi(void)
 {
-801028c0:	f3 0f 1e fb          	endbr32 
+80102930:	f3 0f 1e fb          	endbr32 
   if(lapic)
-801028c4:	a1 7c 26 11 80       	mov    0x8011267c,%eax
-801028c9:	85 c0                	test   %eax,%eax
-801028cb:	74 0d                	je     801028da <lapiceoi+0x1a>
+80102934:	a1 9c 36 11 80       	mov    0x8011369c,%eax
+80102939:	85 c0                	test   %eax,%eax
+8010293b:	74 0d                	je     8010294a <lapiceoi+0x1a>
   lapic[index] = value;
-801028cd:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
-801028d4:	00 00 00 
+8010293d:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
+80102944:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-801028d7:	8b 40 20             	mov    0x20(%eax),%eax
+80102947:	8b 40 20             	mov    0x20(%eax),%eax
     lapicw(EOI, 0);
 }
-801028da:	c3                   	ret    
-801028db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801028df:	90                   	nop
+8010294a:	c3                   	ret    
+8010294b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010294f:	90                   	nop
 
-801028e0 <microdelay>:
+80102950 <microdelay>:
 
 // Spin for a given number of microseconds.
 // On real hardware would want to tune this dynamically.
 void
 microdelay(int us)
 {
-801028e0:	f3 0f 1e fb          	endbr32 
+80102950:	f3 0f 1e fb          	endbr32 
 }
-801028e4:	c3                   	ret    
-801028e5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801028ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102954:	c3                   	ret    
+80102955:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010295c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801028f0 <lapicstartap>:
+80102960 <lapicstartap>:
 
 // Start additional processor running entry code at addr.
 // See Appendix B of MultiProcessor Specification.
 void
 lapicstartap(uchar apicid, uint addr)
 {
-801028f0:	f3 0f 1e fb          	endbr32 
-801028f4:	55                   	push   %ebp
+80102960:	f3 0f 1e fb          	endbr32 
+80102964:	55                   	push   %ebp
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801028f5:	b8 0f 00 00 00       	mov    $0xf,%eax
-801028fa:	ba 70 00 00 00       	mov    $0x70,%edx
-801028ff:	89 e5                	mov    %esp,%ebp
-80102901:	53                   	push   %ebx
-80102902:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80102905:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80102908:	ee                   	out    %al,(%dx)
-80102909:	b8 0a 00 00 00       	mov    $0xa,%eax
-8010290e:	ba 71 00 00 00       	mov    $0x71,%edx
-80102913:	ee                   	out    %al,(%dx)
+80102965:	b8 0f 00 00 00       	mov    $0xf,%eax
+8010296a:	ba 70 00 00 00       	mov    $0x70,%edx
+8010296f:	89 e5                	mov    %esp,%ebp
+80102971:	53                   	push   %ebx
+80102972:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80102975:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80102978:	ee                   	out    %al,(%dx)
+80102979:	b8 0a 00 00 00       	mov    $0xa,%eax
+8010297e:	ba 71 00 00 00       	mov    $0x71,%edx
+80102983:	ee                   	out    %al,(%dx)
   // and the warm reset vector (DWORD based at 40:67) to point at
   // the AP startup code prior to the [universal startup algorithm]."
   outb(CMOS_PORT, 0xF);  // offset 0xF is shutdown code
   outb(CMOS_PORT+1, 0x0A);
   wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vector
   wrv[0] = 0;
-80102914:	31 c0                	xor    %eax,%eax
+80102984:	31 c0                	xor    %eax,%eax
   wrv[1] = addr >> 4;
 
   // "Universal startup algorithm."
   // Send INIT (level-triggered) interrupt to reset other CPU.
   lapicw(ICRHI, apicid<<24);
-80102916:	c1 e3 18             	shl    $0x18,%ebx
+80102986:	c1 e3 18             	shl    $0x18,%ebx
   wrv[0] = 0;
-80102919:	66 a3 67 04 00 80    	mov    %ax,0x80000467
+80102989:	66 a3 67 04 00 80    	mov    %ax,0x80000467
   wrv[1] = addr >> 4;
-8010291f:	89 c8                	mov    %ecx,%eax
+8010298f:	89 c8                	mov    %ecx,%eax
   // when it is in the halted state due to an INIT.  So the second
   // should be ignored, but it is part of the official Intel algorithm.
   // Bochs complains about the second one.  Too bad for Bochs.
   for(i = 0; i < 2; i++){
     lapicw(ICRHI, apicid<<24);
     lapicw(ICRLO, STARTUP | (addr>>12));
-80102921:	c1 e9 0c             	shr    $0xc,%ecx
+80102991:	c1 e9 0c             	shr    $0xc,%ecx
   lapicw(ICRHI, apicid<<24);
-80102924:	89 da                	mov    %ebx,%edx
+80102994:	89 da                	mov    %ebx,%edx
   wrv[1] = addr >> 4;
-80102926:	c1 e8 04             	shr    $0x4,%eax
+80102996:	c1 e8 04             	shr    $0x4,%eax
     lapicw(ICRLO, STARTUP | (addr>>12));
-80102929:	80 cd 06             	or     $0x6,%ch
+80102999:	80 cd 06             	or     $0x6,%ch
   wrv[1] = addr >> 4;
-8010292c:	66 a3 69 04 00 80    	mov    %ax,0x80000469
+8010299c:	66 a3 69 04 00 80    	mov    %ax,0x80000469
   lapic[index] = value;
-80102932:	a1 7c 26 11 80       	mov    0x8011267c,%eax
-80102937:	89 98 10 03 00 00    	mov    %ebx,0x310(%eax)
+801029a2:	a1 9c 36 11 80       	mov    0x8011369c,%eax
+801029a7:	89 98 10 03 00 00    	mov    %ebx,0x310(%eax)
   lapic[ID];  // wait for write to finish, by reading
-8010293d:	8b 58 20             	mov    0x20(%eax),%ebx
+801029ad:	8b 58 20             	mov    0x20(%eax),%ebx
   lapic[index] = value;
-80102940:	c7 80 00 03 00 00 00 	movl   $0xc500,0x300(%eax)
-80102947:	c5 00 00 
+801029b0:	c7 80 00 03 00 00 00 	movl   $0xc500,0x300(%eax)
+801029b7:	c5 00 00 
   lapic[ID];  // wait for write to finish, by reading
-8010294a:	8b 58 20             	mov    0x20(%eax),%ebx
+801029ba:	8b 58 20             	mov    0x20(%eax),%ebx
   lapic[index] = value;
-8010294d:	c7 80 00 03 00 00 00 	movl   $0x8500,0x300(%eax)
-80102954:	85 00 00 
+801029bd:	c7 80 00 03 00 00 00 	movl   $0x8500,0x300(%eax)
+801029c4:	85 00 00 
   lapic[ID];  // wait for write to finish, by reading
-80102957:	8b 58 20             	mov    0x20(%eax),%ebx
+801029c7:	8b 58 20             	mov    0x20(%eax),%ebx
   lapic[index] = value;
-8010295a:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
+801029ca:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
   lapic[ID];  // wait for write to finish, by reading
-80102960:	8b 58 20             	mov    0x20(%eax),%ebx
+801029d0:	8b 58 20             	mov    0x20(%eax),%ebx
   lapic[index] = value;
-80102963:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
+801029d3:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
   lapic[ID];  // wait for write to finish, by reading
-80102969:	8b 58 20             	mov    0x20(%eax),%ebx
+801029d9:	8b 58 20             	mov    0x20(%eax),%ebx
   lapic[index] = value;
-8010296c:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
+801029dc:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
   lapic[ID];  // wait for write to finish, by reading
-80102972:	8b 50 20             	mov    0x20(%eax),%edx
+801029e2:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-80102975:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
+801029e5:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
     microdelay(200);
   }
 }
-8010297b:	5b                   	pop    %ebx
+801029eb:	5b                   	pop    %ebx
   lapic[ID];  // wait for write to finish, by reading
-8010297c:	8b 40 20             	mov    0x20(%eax),%eax
+801029ec:	8b 40 20             	mov    0x20(%eax),%eax
 }
-8010297f:	5d                   	pop    %ebp
-80102980:	c3                   	ret    
-80102981:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80102988:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010298f:	90                   	nop
+801029ef:	5d                   	pop    %ebp
+801029f0:	c3                   	ret    
+801029f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801029f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801029ff:	90                   	nop
 
-80102990 <cmostime>:
+80102a00 <cmostime>:
 }
 
 // qemu seems to use 24-hour GWT and the values are BCD encoded
 void
 cmostime(struct rtcdate *r)
 {
-80102990:	f3 0f 1e fb          	endbr32 
-80102994:	55                   	push   %ebp
-80102995:	b8 0b 00 00 00       	mov    $0xb,%eax
-8010299a:	ba 70 00 00 00       	mov    $0x70,%edx
-8010299f:	89 e5                	mov    %esp,%ebp
-801029a1:	57                   	push   %edi
-801029a2:	56                   	push   %esi
-801029a3:	53                   	push   %ebx
-801029a4:	83 ec 4c             	sub    $0x4c,%esp
-801029a7:	ee                   	out    %al,(%dx)
+80102a00:	f3 0f 1e fb          	endbr32 
+80102a04:	55                   	push   %ebp
+80102a05:	b8 0b 00 00 00       	mov    $0xb,%eax
+80102a0a:	ba 70 00 00 00       	mov    $0x70,%edx
+80102a0f:	89 e5                	mov    %esp,%ebp
+80102a11:	57                   	push   %edi
+80102a12:	56                   	push   %esi
+80102a13:	53                   	push   %ebx
+80102a14:	83 ec 4c             	sub    $0x4c,%esp
+80102a17:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801029a8:	ba 71 00 00 00       	mov    $0x71,%edx
-801029ad:	ec                   	in     (%dx),%al
+80102a18:	ba 71 00 00 00       	mov    $0x71,%edx
+80102a1d:	ec                   	in     (%dx),%al
   struct rtcdate t1, t2;
   int sb, bcd;
 
   sb = cmos_read(CMOS_STATB);
 
   bcd = (sb & (1 << 2)) == 0;
-801029ae:	83 e0 04             	and    $0x4,%eax
+80102a1e:	83 e0 04             	and    $0x4,%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801029b1:	bb 70 00 00 00       	mov    $0x70,%ebx
-801029b6:	88 45 b3             	mov    %al,-0x4d(%ebp)
-801029b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801029c0:	31 c0                	xor    %eax,%eax
-801029c2:	89 da                	mov    %ebx,%edx
-801029c4:	ee                   	out    %al,(%dx)
+80102a21:	bb 70 00 00 00       	mov    $0x70,%ebx
+80102a26:	88 45 b3             	mov    %al,-0x4d(%ebp)
+80102a29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102a30:	31 c0                	xor    %eax,%eax
+80102a32:	89 da                	mov    %ebx,%edx
+80102a34:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801029c5:	b9 71 00 00 00       	mov    $0x71,%ecx
-801029ca:	89 ca                	mov    %ecx,%edx
-801029cc:	ec                   	in     (%dx),%al
-801029cd:	88 45 b7             	mov    %al,-0x49(%ebp)
+80102a35:	b9 71 00 00 00       	mov    $0x71,%ecx
+80102a3a:	89 ca                	mov    %ecx,%edx
+80102a3c:	ec                   	in     (%dx),%al
+80102a3d:	88 45 b7             	mov    %al,-0x49(%ebp)
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801029d0:	89 da                	mov    %ebx,%edx
-801029d2:	b8 02 00 00 00       	mov    $0x2,%eax
-801029d7:	ee                   	out    %al,(%dx)
+80102a40:	89 da                	mov    %ebx,%edx
+80102a42:	b8 02 00 00 00       	mov    $0x2,%eax
+80102a47:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801029d8:	89 ca                	mov    %ecx,%edx
-801029da:	ec                   	in     (%dx),%al
-801029db:	88 45 b6             	mov    %al,-0x4a(%ebp)
+80102a48:	89 ca                	mov    %ecx,%edx
+80102a4a:	ec                   	in     (%dx),%al
+80102a4b:	88 45 b6             	mov    %al,-0x4a(%ebp)
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801029de:	89 da                	mov    %ebx,%edx
-801029e0:	b8 04 00 00 00       	mov    $0x4,%eax
-801029e5:	ee                   	out    %al,(%dx)
+80102a4e:	89 da                	mov    %ebx,%edx
+80102a50:	b8 04 00 00 00       	mov    $0x4,%eax
+80102a55:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801029e6:	89 ca                	mov    %ecx,%edx
-801029e8:	ec                   	in     (%dx),%al
-801029e9:	88 45 b5             	mov    %al,-0x4b(%ebp)
+80102a56:	89 ca                	mov    %ecx,%edx
+80102a58:	ec                   	in     (%dx),%al
+80102a59:	88 45 b5             	mov    %al,-0x4b(%ebp)
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801029ec:	89 da                	mov    %ebx,%edx
-801029ee:	b8 07 00 00 00       	mov    $0x7,%eax
-801029f3:	ee                   	out    %al,(%dx)
+80102a5c:	89 da                	mov    %ebx,%edx
+80102a5e:	b8 07 00 00 00       	mov    $0x7,%eax
+80102a63:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801029f4:	89 ca                	mov    %ecx,%edx
-801029f6:	ec                   	in     (%dx),%al
-801029f7:	88 45 b4             	mov    %al,-0x4c(%ebp)
+80102a64:	89 ca                	mov    %ecx,%edx
+80102a66:	ec                   	in     (%dx),%al
+80102a67:	88 45 b4             	mov    %al,-0x4c(%ebp)
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801029fa:	89 da                	mov    %ebx,%edx
-801029fc:	b8 08 00 00 00       	mov    $0x8,%eax
-80102a01:	ee                   	out    %al,(%dx)
+80102a6a:	89 da                	mov    %ebx,%edx
+80102a6c:	b8 08 00 00 00       	mov    $0x8,%eax
+80102a71:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102a02:	89 ca                	mov    %ecx,%edx
-80102a04:	ec                   	in     (%dx),%al
-80102a05:	89 c7                	mov    %eax,%edi
+80102a72:	89 ca                	mov    %ecx,%edx
+80102a74:	ec                   	in     (%dx),%al
+80102a75:	89 c7                	mov    %eax,%edi
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102a07:	89 da                	mov    %ebx,%edx
-80102a09:	b8 09 00 00 00       	mov    $0x9,%eax
-80102a0e:	ee                   	out    %al,(%dx)
+80102a77:	89 da                	mov    %ebx,%edx
+80102a79:	b8 09 00 00 00       	mov    $0x9,%eax
+80102a7e:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102a0f:	89 ca                	mov    %ecx,%edx
-80102a11:	ec                   	in     (%dx),%al
-80102a12:	89 c6                	mov    %eax,%esi
+80102a7f:	89 ca                	mov    %ecx,%edx
+80102a81:	ec                   	in     (%dx),%al
+80102a82:	89 c6                	mov    %eax,%esi
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102a14:	89 da                	mov    %ebx,%edx
-80102a16:	b8 0a 00 00 00       	mov    $0xa,%eax
-80102a1b:	ee                   	out    %al,(%dx)
+80102a84:	89 da                	mov    %ebx,%edx
+80102a86:	b8 0a 00 00 00       	mov    $0xa,%eax
+80102a8b:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102a1c:	89 ca                	mov    %ecx,%edx
-80102a1e:	ec                   	in     (%dx),%al
+80102a8c:	89 ca                	mov    %ecx,%edx
+80102a8e:	ec                   	in     (%dx),%al
 
   // make sure CMOS doesn't modify time while we read it
   for(;;) {
     fill_rtcdate(&t1);
     if(cmos_read(CMOS_STATA) & CMOS_UIP)
-80102a1f:	84 c0                	test   %al,%al
-80102a21:	78 9d                	js     801029c0 <cmostime+0x30>
+80102a8f:	84 c0                	test   %al,%al
+80102a91:	78 9d                	js     80102a30 <cmostime+0x30>
   return inb(CMOS_RETURN);
-80102a23:	0f b6 45 b7          	movzbl -0x49(%ebp),%eax
-80102a27:	89 fa                	mov    %edi,%edx
-80102a29:	0f b6 fa             	movzbl %dl,%edi
-80102a2c:	89 f2                	mov    %esi,%edx
-80102a2e:	89 45 b8             	mov    %eax,-0x48(%ebp)
-80102a31:	0f b6 45 b6          	movzbl -0x4a(%ebp),%eax
-80102a35:	0f b6 f2             	movzbl %dl,%esi
+80102a93:	0f b6 45 b7          	movzbl -0x49(%ebp),%eax
+80102a97:	89 fa                	mov    %edi,%edx
+80102a99:	0f b6 fa             	movzbl %dl,%edi
+80102a9c:	89 f2                	mov    %esi,%edx
+80102a9e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+80102aa1:	0f b6 45 b6          	movzbl -0x4a(%ebp),%eax
+80102aa5:	0f b6 f2             	movzbl %dl,%esi
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102a38:	89 da                	mov    %ebx,%edx
-80102a3a:	89 7d c8             	mov    %edi,-0x38(%ebp)
-80102a3d:	89 45 bc             	mov    %eax,-0x44(%ebp)
-80102a40:	0f b6 45 b5          	movzbl -0x4b(%ebp),%eax
-80102a44:	89 75 cc             	mov    %esi,-0x34(%ebp)
-80102a47:	89 45 c0             	mov    %eax,-0x40(%ebp)
-80102a4a:	0f b6 45 b4          	movzbl -0x4c(%ebp),%eax
-80102a4e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
-80102a51:	31 c0                	xor    %eax,%eax
-80102a53:	ee                   	out    %al,(%dx)
+80102aa8:	89 da                	mov    %ebx,%edx
+80102aaa:	89 7d c8             	mov    %edi,-0x38(%ebp)
+80102aad:	89 45 bc             	mov    %eax,-0x44(%ebp)
+80102ab0:	0f b6 45 b5          	movzbl -0x4b(%ebp),%eax
+80102ab4:	89 75 cc             	mov    %esi,-0x34(%ebp)
+80102ab7:	89 45 c0             	mov    %eax,-0x40(%ebp)
+80102aba:	0f b6 45 b4          	movzbl -0x4c(%ebp),%eax
+80102abe:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+80102ac1:	31 c0                	xor    %eax,%eax
+80102ac3:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102a54:	89 ca                	mov    %ecx,%edx
-80102a56:	ec                   	in     (%dx),%al
-80102a57:	0f b6 c0             	movzbl %al,%eax
+80102ac4:	89 ca                	mov    %ecx,%edx
+80102ac6:	ec                   	in     (%dx),%al
+80102ac7:	0f b6 c0             	movzbl %al,%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102a5a:	89 da                	mov    %ebx,%edx
-80102a5c:	89 45 d0             	mov    %eax,-0x30(%ebp)
-80102a5f:	b8 02 00 00 00       	mov    $0x2,%eax
-80102a64:	ee                   	out    %al,(%dx)
+80102aca:	89 da                	mov    %ebx,%edx
+80102acc:	89 45 d0             	mov    %eax,-0x30(%ebp)
+80102acf:	b8 02 00 00 00       	mov    $0x2,%eax
+80102ad4:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102a65:	89 ca                	mov    %ecx,%edx
-80102a67:	ec                   	in     (%dx),%al
-80102a68:	0f b6 c0             	movzbl %al,%eax
+80102ad5:	89 ca                	mov    %ecx,%edx
+80102ad7:	ec                   	in     (%dx),%al
+80102ad8:	0f b6 c0             	movzbl %al,%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102a6b:	89 da                	mov    %ebx,%edx
-80102a6d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-80102a70:	b8 04 00 00 00       	mov    $0x4,%eax
-80102a75:	ee                   	out    %al,(%dx)
+80102adb:	89 da                	mov    %ebx,%edx
+80102add:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+80102ae0:	b8 04 00 00 00       	mov    $0x4,%eax
+80102ae5:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102a76:	89 ca                	mov    %ecx,%edx
-80102a78:	ec                   	in     (%dx),%al
-80102a79:	0f b6 c0             	movzbl %al,%eax
+80102ae6:	89 ca                	mov    %ecx,%edx
+80102ae8:	ec                   	in     (%dx),%al
+80102ae9:	0f b6 c0             	movzbl %al,%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102a7c:	89 da                	mov    %ebx,%edx
-80102a7e:	89 45 d8             	mov    %eax,-0x28(%ebp)
-80102a81:	b8 07 00 00 00       	mov    $0x7,%eax
-80102a86:	ee                   	out    %al,(%dx)
+80102aec:	89 da                	mov    %ebx,%edx
+80102aee:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80102af1:	b8 07 00 00 00       	mov    $0x7,%eax
+80102af6:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102a87:	89 ca                	mov    %ecx,%edx
-80102a89:	ec                   	in     (%dx),%al
-80102a8a:	0f b6 c0             	movzbl %al,%eax
+80102af7:	89 ca                	mov    %ecx,%edx
+80102af9:	ec                   	in     (%dx),%al
+80102afa:	0f b6 c0             	movzbl %al,%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102a8d:	89 da                	mov    %ebx,%edx
-80102a8f:	89 45 dc             	mov    %eax,-0x24(%ebp)
-80102a92:	b8 08 00 00 00       	mov    $0x8,%eax
-80102a97:	ee                   	out    %al,(%dx)
+80102afd:	89 da                	mov    %ebx,%edx
+80102aff:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80102b02:	b8 08 00 00 00       	mov    $0x8,%eax
+80102b07:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102a98:	89 ca                	mov    %ecx,%edx
-80102a9a:	ec                   	in     (%dx),%al
-80102a9b:	0f b6 c0             	movzbl %al,%eax
+80102b08:	89 ca                	mov    %ecx,%edx
+80102b0a:	ec                   	in     (%dx),%al
+80102b0b:	0f b6 c0             	movzbl %al,%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102a9e:	89 da                	mov    %ebx,%edx
-80102aa0:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80102aa3:	b8 09 00 00 00       	mov    $0x9,%eax
-80102aa8:	ee                   	out    %al,(%dx)
+80102b0e:	89 da                	mov    %ebx,%edx
+80102b10:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80102b13:	b8 09 00 00 00       	mov    $0x9,%eax
+80102b18:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102aa9:	89 ca                	mov    %ecx,%edx
-80102aab:	ec                   	in     (%dx),%al
-80102aac:	0f b6 c0             	movzbl %al,%eax
+80102b19:	89 ca                	mov    %ecx,%edx
+80102b1b:	ec                   	in     (%dx),%al
+80102b1c:	0f b6 c0             	movzbl %al,%eax
         continue;
     fill_rtcdate(&t2);
     if(memcmp(&t1, &t2, sizeof(t1)) == 0)
-80102aaf:	83 ec 04             	sub    $0x4,%esp
+80102b1f:	83 ec 04             	sub    $0x4,%esp
   return inb(CMOS_RETURN);
-80102ab2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80102b22:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if(memcmp(&t1, &t2, sizeof(t1)) == 0)
-80102ab5:	8d 45 d0             	lea    -0x30(%ebp),%eax
-80102ab8:	6a 18                	push   $0x18
-80102aba:	50                   	push   %eax
-80102abb:	8d 45 b8             	lea    -0x48(%ebp),%eax
-80102abe:	50                   	push   %eax
-80102abf:	e8 fc 1b 00 00       	call   801046c0 <memcmp>
-80102ac4:	83 c4 10             	add    $0x10,%esp
-80102ac7:	85 c0                	test   %eax,%eax
-80102ac9:	0f 85 f1 fe ff ff    	jne    801029c0 <cmostime+0x30>
+80102b25:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80102b28:	6a 18                	push   $0x18
+80102b2a:	50                   	push   %eax
+80102b2b:	8d 45 b8             	lea    -0x48(%ebp),%eax
+80102b2e:	50                   	push   %eax
+80102b2f:	e8 dc 27 00 00       	call   80105310 <memcmp>
+80102b34:	83 c4 10             	add    $0x10,%esp
+80102b37:	85 c0                	test   %eax,%eax
+80102b39:	0f 85 f1 fe ff ff    	jne    80102a30 <cmostime+0x30>
       break;
   }
 
   // convert
   if(bcd) {
-80102acf:	80 7d b3 00          	cmpb   $0x0,-0x4d(%ebp)
-80102ad3:	75 78                	jne    80102b4d <cmostime+0x1bd>
+80102b3f:	80 7d b3 00          	cmpb   $0x0,-0x4d(%ebp)
+80102b43:	75 78                	jne    80102bbd <cmostime+0x1bd>
 #define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
     CONV(second);
-80102ad5:	8b 45 b8             	mov    -0x48(%ebp),%eax
-80102ad8:	89 c2                	mov    %eax,%edx
-80102ada:	83 e0 0f             	and    $0xf,%eax
-80102add:	c1 ea 04             	shr    $0x4,%edx
-80102ae0:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80102ae3:	8d 04 50             	lea    (%eax,%edx,2),%eax
-80102ae6:	89 45 b8             	mov    %eax,-0x48(%ebp)
+80102b45:	8b 45 b8             	mov    -0x48(%ebp),%eax
+80102b48:	89 c2                	mov    %eax,%edx
+80102b4a:	83 e0 0f             	and    $0xf,%eax
+80102b4d:	c1 ea 04             	shr    $0x4,%edx
+80102b50:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102b53:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102b56:	89 45 b8             	mov    %eax,-0x48(%ebp)
     CONV(minute);
-80102ae9:	8b 45 bc             	mov    -0x44(%ebp),%eax
-80102aec:	89 c2                	mov    %eax,%edx
-80102aee:	83 e0 0f             	and    $0xf,%eax
-80102af1:	c1 ea 04             	shr    $0x4,%edx
-80102af4:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80102af7:	8d 04 50             	lea    (%eax,%edx,2),%eax
-80102afa:	89 45 bc             	mov    %eax,-0x44(%ebp)
+80102b59:	8b 45 bc             	mov    -0x44(%ebp),%eax
+80102b5c:	89 c2                	mov    %eax,%edx
+80102b5e:	83 e0 0f             	and    $0xf,%eax
+80102b61:	c1 ea 04             	shr    $0x4,%edx
+80102b64:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102b67:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102b6a:	89 45 bc             	mov    %eax,-0x44(%ebp)
     CONV(hour  );
-80102afd:	8b 45 c0             	mov    -0x40(%ebp),%eax
-80102b00:	89 c2                	mov    %eax,%edx
-80102b02:	83 e0 0f             	and    $0xf,%eax
-80102b05:	c1 ea 04             	shr    $0x4,%edx
-80102b08:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80102b0b:	8d 04 50             	lea    (%eax,%edx,2),%eax
-80102b0e:	89 45 c0             	mov    %eax,-0x40(%ebp)
+80102b6d:	8b 45 c0             	mov    -0x40(%ebp),%eax
+80102b70:	89 c2                	mov    %eax,%edx
+80102b72:	83 e0 0f             	and    $0xf,%eax
+80102b75:	c1 ea 04             	shr    $0x4,%edx
+80102b78:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102b7b:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102b7e:	89 45 c0             	mov    %eax,-0x40(%ebp)
     CONV(day   );
-80102b11:	8b 45 c4             	mov    -0x3c(%ebp),%eax
-80102b14:	89 c2                	mov    %eax,%edx
-80102b16:	83 e0 0f             	and    $0xf,%eax
-80102b19:	c1 ea 04             	shr    $0x4,%edx
-80102b1c:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80102b1f:	8d 04 50             	lea    (%eax,%edx,2),%eax
-80102b22:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+80102b81:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+80102b84:	89 c2                	mov    %eax,%edx
+80102b86:	83 e0 0f             	and    $0xf,%eax
+80102b89:	c1 ea 04             	shr    $0x4,%edx
+80102b8c:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102b8f:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102b92:	89 45 c4             	mov    %eax,-0x3c(%ebp)
     CONV(month );
-80102b25:	8b 45 c8             	mov    -0x38(%ebp),%eax
-80102b28:	89 c2                	mov    %eax,%edx
-80102b2a:	83 e0 0f             	and    $0xf,%eax
-80102b2d:	c1 ea 04             	shr    $0x4,%edx
-80102b30:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80102b33:	8d 04 50             	lea    (%eax,%edx,2),%eax
-80102b36:	89 45 c8             	mov    %eax,-0x38(%ebp)
+80102b95:	8b 45 c8             	mov    -0x38(%ebp),%eax
+80102b98:	89 c2                	mov    %eax,%edx
+80102b9a:	83 e0 0f             	and    $0xf,%eax
+80102b9d:	c1 ea 04             	shr    $0x4,%edx
+80102ba0:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102ba3:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102ba6:	89 45 c8             	mov    %eax,-0x38(%ebp)
     CONV(year  );
-80102b39:	8b 45 cc             	mov    -0x34(%ebp),%eax
-80102b3c:	89 c2                	mov    %eax,%edx
-80102b3e:	83 e0 0f             	and    $0xf,%eax
-80102b41:	c1 ea 04             	shr    $0x4,%edx
-80102b44:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80102b47:	8d 04 50             	lea    (%eax,%edx,2),%eax
-80102b4a:	89 45 cc             	mov    %eax,-0x34(%ebp)
+80102ba9:	8b 45 cc             	mov    -0x34(%ebp),%eax
+80102bac:	89 c2                	mov    %eax,%edx
+80102bae:	83 e0 0f             	and    $0xf,%eax
+80102bb1:	c1 ea 04             	shr    $0x4,%edx
+80102bb4:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102bb7:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102bba:	89 45 cc             	mov    %eax,-0x34(%ebp)
 #undef     CONV
   }
 
   *r = t1;
-80102b4d:	8b 75 08             	mov    0x8(%ebp),%esi
-80102b50:	8b 45 b8             	mov    -0x48(%ebp),%eax
-80102b53:	89 06                	mov    %eax,(%esi)
-80102b55:	8b 45 bc             	mov    -0x44(%ebp),%eax
-80102b58:	89 46 04             	mov    %eax,0x4(%esi)
-80102b5b:	8b 45 c0             	mov    -0x40(%ebp),%eax
-80102b5e:	89 46 08             	mov    %eax,0x8(%esi)
-80102b61:	8b 45 c4             	mov    -0x3c(%ebp),%eax
-80102b64:	89 46 0c             	mov    %eax,0xc(%esi)
-80102b67:	8b 45 c8             	mov    -0x38(%ebp),%eax
-80102b6a:	89 46 10             	mov    %eax,0x10(%esi)
-80102b6d:	8b 45 cc             	mov    -0x34(%ebp),%eax
-80102b70:	89 46 14             	mov    %eax,0x14(%esi)
+80102bbd:	8b 75 08             	mov    0x8(%ebp),%esi
+80102bc0:	8b 45 b8             	mov    -0x48(%ebp),%eax
+80102bc3:	89 06                	mov    %eax,(%esi)
+80102bc5:	8b 45 bc             	mov    -0x44(%ebp),%eax
+80102bc8:	89 46 04             	mov    %eax,0x4(%esi)
+80102bcb:	8b 45 c0             	mov    -0x40(%ebp),%eax
+80102bce:	89 46 08             	mov    %eax,0x8(%esi)
+80102bd1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+80102bd4:	89 46 0c             	mov    %eax,0xc(%esi)
+80102bd7:	8b 45 c8             	mov    -0x38(%ebp),%eax
+80102bda:	89 46 10             	mov    %eax,0x10(%esi)
+80102bdd:	8b 45 cc             	mov    -0x34(%ebp),%eax
+80102be0:	89 46 14             	mov    %eax,0x14(%esi)
   r->year += 2000;
-80102b73:	81 46 14 d0 07 00 00 	addl   $0x7d0,0x14(%esi)
+80102be3:	81 46 14 d0 07 00 00 	addl   $0x7d0,0x14(%esi)
 }
-80102b7a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102b7d:	5b                   	pop    %ebx
-80102b7e:	5e                   	pop    %esi
-80102b7f:	5f                   	pop    %edi
-80102b80:	5d                   	pop    %ebp
-80102b81:	c3                   	ret    
-80102b82:	66 90                	xchg   %ax,%ax
-80102b84:	66 90                	xchg   %ax,%ax
-80102b86:	66 90                	xchg   %ax,%ax
-80102b88:	66 90                	xchg   %ax,%ax
-80102b8a:	66 90                	xchg   %ax,%ax
-80102b8c:	66 90                	xchg   %ax,%ax
-80102b8e:	66 90                	xchg   %ax,%ax
+80102bea:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102bed:	5b                   	pop    %ebx
+80102bee:	5e                   	pop    %esi
+80102bef:	5f                   	pop    %edi
+80102bf0:	5d                   	pop    %ebp
+80102bf1:	c3                   	ret    
+80102bf2:	66 90                	xchg   %ax,%ax
+80102bf4:	66 90                	xchg   %ax,%ax
+80102bf6:	66 90                	xchg   %ax,%ax
+80102bf8:	66 90                	xchg   %ax,%ax
+80102bfa:	66 90                	xchg   %ax,%ax
+80102bfc:	66 90                	xchg   %ax,%ax
+80102bfe:	66 90                	xchg   %ax,%ax
 
-80102b90 <install_trans>:
+80102c00 <install_trans>:
 static void
 install_trans(void)
 {
   int tail;
 
   for (tail = 0; tail < log.lh.n; tail++) {
-80102b90:	8b 0d c8 26 11 80    	mov    0x801126c8,%ecx
-80102b96:	85 c9                	test   %ecx,%ecx
-80102b98:	0f 8e 8a 00 00 00    	jle    80102c28 <install_trans+0x98>
-{
-80102b9e:	55                   	push   %ebp
-80102b9f:	89 e5                	mov    %esp,%ebp
-80102ba1:	57                   	push   %edi
+80102c00:	8b 0d e8 36 11 80    	mov    0x801136e8,%ecx
+80102c06:	85 c9                	test   %ecx,%ecx
+80102c08:	0f 8e 8a 00 00 00    	jle    80102c98 <install_trans+0x98>
+{
+80102c0e:	55                   	push   %ebp
+80102c0f:	89 e5                	mov    %esp,%ebp
+80102c11:	57                   	push   %edi
   for (tail = 0; tail < log.lh.n; tail++) {
-80102ba2:	31 ff                	xor    %edi,%edi
+80102c12:	31 ff                	xor    %edi,%edi
 {
-80102ba4:	56                   	push   %esi
-80102ba5:	53                   	push   %ebx
-80102ba6:	83 ec 0c             	sub    $0xc,%esp
-80102ba9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102c14:	56                   	push   %esi
+80102c15:	53                   	push   %ebx
+80102c16:	83 ec 0c             	sub    $0xc,%esp
+80102c19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
-80102bb0:	a1 b4 26 11 80       	mov    0x801126b4,%eax
-80102bb5:	83 ec 08             	sub    $0x8,%esp
-80102bb8:	01 f8                	add    %edi,%eax
-80102bba:	83 c0 01             	add    $0x1,%eax
-80102bbd:	50                   	push   %eax
-80102bbe:	ff 35 c4 26 11 80    	pushl  0x801126c4
-80102bc4:	e8 07 d5 ff ff       	call   801000d0 <bread>
-80102bc9:	89 c6                	mov    %eax,%esi
+80102c20:	a1 d4 36 11 80       	mov    0x801136d4,%eax
+80102c25:	83 ec 08             	sub    $0x8,%esp
+80102c28:	01 f8                	add    %edi,%eax
+80102c2a:	83 c0 01             	add    $0x1,%eax
+80102c2d:	50                   	push   %eax
+80102c2e:	ff 35 e4 36 11 80    	pushl  0x801136e4
+80102c34:	e8 97 d4 ff ff       	call   801000d0 <bread>
+80102c39:	89 c6                	mov    %eax,%esi
     struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
-80102bcb:	58                   	pop    %eax
-80102bcc:	5a                   	pop    %edx
-80102bcd:	ff 34 bd cc 26 11 80 	pushl  -0x7feed934(,%edi,4)
-80102bd4:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102c3b:	58                   	pop    %eax
+80102c3c:	5a                   	pop    %edx
+80102c3d:	ff 34 bd ec 36 11 80 	pushl  -0x7feec914(,%edi,4)
+80102c44:	ff 35 e4 36 11 80    	pushl  0x801136e4
   for (tail = 0; tail < log.lh.n; tail++) {
-80102bda:	83 c7 01             	add    $0x1,%edi
+80102c4a:	83 c7 01             	add    $0x1,%edi
     struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
-80102bdd:	e8 ee d4 ff ff       	call   801000d0 <bread>
+80102c4d:	e8 7e d4 ff ff       	call   801000d0 <bread>
     memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
-80102be2:	83 c4 0c             	add    $0xc,%esp
+80102c52:	83 c4 0c             	add    $0xc,%esp
     struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
-80102be5:	89 c3                	mov    %eax,%ebx
+80102c55:	89 c3                	mov    %eax,%ebx
     memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
-80102be7:	8d 46 5c             	lea    0x5c(%esi),%eax
-80102bea:	68 00 02 00 00       	push   $0x200
-80102bef:	50                   	push   %eax
-80102bf0:	8d 43 5c             	lea    0x5c(%ebx),%eax
-80102bf3:	50                   	push   %eax
-80102bf4:	e8 17 1b 00 00       	call   80104710 <memmove>
+80102c57:	8d 46 5c             	lea    0x5c(%esi),%eax
+80102c5a:	68 00 02 00 00       	push   $0x200
+80102c5f:	50                   	push   %eax
+80102c60:	8d 43 5c             	lea    0x5c(%ebx),%eax
+80102c63:	50                   	push   %eax
+80102c64:	e8 f7 26 00 00       	call   80105360 <memmove>
     bwrite(dbuf);  // write dst to disk
-80102bf9:	89 1c 24             	mov    %ebx,(%esp)
-80102bfc:	e8 af d5 ff ff       	call   801001b0 <bwrite>
+80102c69:	89 1c 24             	mov    %ebx,(%esp)
+80102c6c:	e8 3f d5 ff ff       	call   801001b0 <bwrite>
     brelse(lbuf);
-80102c01:	89 34 24             	mov    %esi,(%esp)
-80102c04:	e8 e7 d5 ff ff       	call   801001f0 <brelse>
+80102c71:	89 34 24             	mov    %esi,(%esp)
+80102c74:	e8 77 d5 ff ff       	call   801001f0 <brelse>
     brelse(dbuf);
-80102c09:	89 1c 24             	mov    %ebx,(%esp)
-80102c0c:	e8 df d5 ff ff       	call   801001f0 <brelse>
+80102c79:	89 1c 24             	mov    %ebx,(%esp)
+80102c7c:	e8 6f d5 ff ff       	call   801001f0 <brelse>
   for (tail = 0; tail < log.lh.n; tail++) {
-80102c11:	83 c4 10             	add    $0x10,%esp
-80102c14:	39 3d c8 26 11 80    	cmp    %edi,0x801126c8
-80102c1a:	7f 94                	jg     80102bb0 <install_trans+0x20>
-  }
-}
-80102c1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102c1f:	5b                   	pop    %ebx
-80102c20:	5e                   	pop    %esi
-80102c21:	5f                   	pop    %edi
-80102c22:	5d                   	pop    %ebp
-80102c23:	c3                   	ret    
-80102c24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80102c28:	c3                   	ret    
-80102c29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102c81:	83 c4 10             	add    $0x10,%esp
+80102c84:	39 3d e8 36 11 80    	cmp    %edi,0x801136e8
+80102c8a:	7f 94                	jg     80102c20 <install_trans+0x20>
+  }
+}
+80102c8c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102c8f:	5b                   	pop    %ebx
+80102c90:	5e                   	pop    %esi
+80102c91:	5f                   	pop    %edi
+80102c92:	5d                   	pop    %ebp
+80102c93:	c3                   	ret    
+80102c94:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102c98:	c3                   	ret    
+80102c99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80102c30 <write_head>:
+80102ca0 <write_head>:
 // Write in-memory log header to disk.
 // This is the true point at which the
 // current transaction commits.
 static void
 write_head(void)
 {
-80102c30:	55                   	push   %ebp
-80102c31:	89 e5                	mov    %esp,%ebp
-80102c33:	53                   	push   %ebx
-80102c34:	83 ec 0c             	sub    $0xc,%esp
+80102ca0:	55                   	push   %ebp
+80102ca1:	89 e5                	mov    %esp,%ebp
+80102ca3:	53                   	push   %ebx
+80102ca4:	83 ec 0c             	sub    $0xc,%esp
   struct buf *buf = bread(log.dev, log.start);
-80102c37:	ff 35 b4 26 11 80    	pushl  0x801126b4
-80102c3d:	ff 35 c4 26 11 80    	pushl  0x801126c4
-80102c43:	e8 88 d4 ff ff       	call   801000d0 <bread>
+80102ca7:	ff 35 d4 36 11 80    	pushl  0x801136d4
+80102cad:	ff 35 e4 36 11 80    	pushl  0x801136e4
+80102cb3:	e8 18 d4 ff ff       	call   801000d0 <bread>
   struct logheader *hb = (struct logheader *) (buf->data);
   int i;
   hb->n = log.lh.n;
   for (i = 0; i < log.lh.n; i++) {
-80102c48:	83 c4 10             	add    $0x10,%esp
+80102cb8:	83 c4 10             	add    $0x10,%esp
   struct buf *buf = bread(log.dev, log.start);
-80102c4b:	89 c3                	mov    %eax,%ebx
+80102cbb:	89 c3                	mov    %eax,%ebx
   hb->n = log.lh.n;
-80102c4d:	a1 c8 26 11 80       	mov    0x801126c8,%eax
-80102c52:	89 43 5c             	mov    %eax,0x5c(%ebx)
+80102cbd:	a1 e8 36 11 80       	mov    0x801136e8,%eax
+80102cc2:	89 43 5c             	mov    %eax,0x5c(%ebx)
   for (i = 0; i < log.lh.n; i++) {
-80102c55:	85 c0                	test   %eax,%eax
-80102c57:	7e 19                	jle    80102c72 <write_head+0x42>
-80102c59:	31 d2                	xor    %edx,%edx
-80102c5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80102c5f:	90                   	nop
+80102cc5:	85 c0                	test   %eax,%eax
+80102cc7:	7e 19                	jle    80102ce2 <write_head+0x42>
+80102cc9:	31 d2                	xor    %edx,%edx
+80102ccb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102ccf:	90                   	nop
     hb->block[i] = log.lh.block[i];
-80102c60:	8b 0c 95 cc 26 11 80 	mov    -0x7feed934(,%edx,4),%ecx
-80102c67:	89 4c 93 60          	mov    %ecx,0x60(%ebx,%edx,4)
+80102cd0:	8b 0c 95 ec 36 11 80 	mov    -0x7feec914(,%edx,4),%ecx
+80102cd7:	89 4c 93 60          	mov    %ecx,0x60(%ebx,%edx,4)
   for (i = 0; i < log.lh.n; i++) {
-80102c6b:	83 c2 01             	add    $0x1,%edx
-80102c6e:	39 d0                	cmp    %edx,%eax
-80102c70:	75 ee                	jne    80102c60 <write_head+0x30>
+80102cdb:	83 c2 01             	add    $0x1,%edx
+80102cde:	39 d0                	cmp    %edx,%eax
+80102ce0:	75 ee                	jne    80102cd0 <write_head+0x30>
   }
   bwrite(buf);
-80102c72:	83 ec 0c             	sub    $0xc,%esp
-80102c75:	53                   	push   %ebx
-80102c76:	e8 35 d5 ff ff       	call   801001b0 <bwrite>
+80102ce2:	83 ec 0c             	sub    $0xc,%esp
+80102ce5:	53                   	push   %ebx
+80102ce6:	e8 c5 d4 ff ff       	call   801001b0 <bwrite>
   brelse(buf);
-80102c7b:	89 1c 24             	mov    %ebx,(%esp)
-80102c7e:	e8 6d d5 ff ff       	call   801001f0 <brelse>
+80102ceb:	89 1c 24             	mov    %ebx,(%esp)
+80102cee:	e8 fd d4 ff ff       	call   801001f0 <brelse>
 }
-80102c83:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80102c86:	83 c4 10             	add    $0x10,%esp
-80102c89:	c9                   	leave  
-80102c8a:	c3                   	ret    
-80102c8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80102c8f:	90                   	nop
-
-80102c90 <initlog>:
-{
-80102c90:	f3 0f 1e fb          	endbr32 
-80102c94:	55                   	push   %ebp
-80102c95:	89 e5                	mov    %esp,%ebp
-80102c97:	53                   	push   %ebx
-80102c98:	83 ec 2c             	sub    $0x2c,%esp
-80102c9b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80102cf3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102cf6:	83 c4 10             	add    $0x10,%esp
+80102cf9:	c9                   	leave  
+80102cfa:	c3                   	ret    
+80102cfb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102cff:	90                   	nop
+
+80102d00 <initlog>:
+{
+80102d00:	f3 0f 1e fb          	endbr32 
+80102d04:	55                   	push   %ebp
+80102d05:	89 e5                	mov    %esp,%ebp
+80102d07:	53                   	push   %ebx
+80102d08:	83 ec 2c             	sub    $0x2c,%esp
+80102d0b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&log.lock, "log");
-80102c9e:	68 80 75 10 80       	push   $0x80107580
-80102ca3:	68 80 26 11 80       	push   $0x80112680
-80102ca8:	e8 33 17 00 00       	call   801043e0 <initlock>
+80102d0e:	68 00 83 10 80       	push   $0x80108300
+80102d13:	68 a0 36 11 80       	push   $0x801136a0
+80102d18:	e8 13 23 00 00       	call   80105030 <initlock>
   readsb(dev, &sb);
-80102cad:	58                   	pop    %eax
-80102cae:	8d 45 dc             	lea    -0x24(%ebp),%eax
-80102cb1:	5a                   	pop    %edx
-80102cb2:	50                   	push   %eax
-80102cb3:	53                   	push   %ebx
-80102cb4:	e8 47 e8 ff ff       	call   80101500 <readsb>
+80102d1d:	58                   	pop    %eax
+80102d1e:	8d 45 dc             	lea    -0x24(%ebp),%eax
+80102d21:	5a                   	pop    %edx
+80102d22:	50                   	push   %eax
+80102d23:	53                   	push   %ebx
+80102d24:	e8 d7 e7 ff ff       	call   80101500 <readsb>
   log.start = sb.logstart;
-80102cb9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80102d29:	8b 45 ec             	mov    -0x14(%ebp),%eax
   struct buf *buf = bread(log.dev, log.start);
-80102cbc:	59                   	pop    %ecx
+80102d2c:	59                   	pop    %ecx
   log.dev = dev;
-80102cbd:	89 1d c4 26 11 80    	mov    %ebx,0x801126c4
+80102d2d:	89 1d e4 36 11 80    	mov    %ebx,0x801136e4
   log.size = sb.nlog;
-80102cc3:	8b 55 e8             	mov    -0x18(%ebp),%edx
+80102d33:	8b 55 e8             	mov    -0x18(%ebp),%edx
   log.start = sb.logstart;
-80102cc6:	a3 b4 26 11 80       	mov    %eax,0x801126b4
+80102d36:	a3 d4 36 11 80       	mov    %eax,0x801136d4
   log.size = sb.nlog;
-80102ccb:	89 15 b8 26 11 80    	mov    %edx,0x801126b8
+80102d3b:	89 15 d8 36 11 80    	mov    %edx,0x801136d8
   struct buf *buf = bread(log.dev, log.start);
-80102cd1:	5a                   	pop    %edx
-80102cd2:	50                   	push   %eax
-80102cd3:	53                   	push   %ebx
-80102cd4:	e8 f7 d3 ff ff       	call   801000d0 <bread>
+80102d41:	5a                   	pop    %edx
+80102d42:	50                   	push   %eax
+80102d43:	53                   	push   %ebx
+80102d44:	e8 87 d3 ff ff       	call   801000d0 <bread>
   for (i = 0; i < log.lh.n; i++) {
-80102cd9:	83 c4 10             	add    $0x10,%esp
+80102d49:	83 c4 10             	add    $0x10,%esp
   log.lh.n = lh->n;
-80102cdc:	8b 48 5c             	mov    0x5c(%eax),%ecx
-80102cdf:	89 0d c8 26 11 80    	mov    %ecx,0x801126c8
+80102d4c:	8b 48 5c             	mov    0x5c(%eax),%ecx
+80102d4f:	89 0d e8 36 11 80    	mov    %ecx,0x801136e8
   for (i = 0; i < log.lh.n; i++) {
-80102ce5:	85 c9                	test   %ecx,%ecx
-80102ce7:	7e 19                	jle    80102d02 <initlog+0x72>
-80102ce9:	31 d2                	xor    %edx,%edx
-80102ceb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80102cef:	90                   	nop
+80102d55:	85 c9                	test   %ecx,%ecx
+80102d57:	7e 19                	jle    80102d72 <initlog+0x72>
+80102d59:	31 d2                	xor    %edx,%edx
+80102d5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102d5f:	90                   	nop
     log.lh.block[i] = lh->block[i];
-80102cf0:	8b 5c 90 60          	mov    0x60(%eax,%edx,4),%ebx
-80102cf4:	89 1c 95 cc 26 11 80 	mov    %ebx,-0x7feed934(,%edx,4)
+80102d60:	8b 5c 90 60          	mov    0x60(%eax,%edx,4),%ebx
+80102d64:	89 1c 95 ec 36 11 80 	mov    %ebx,-0x7feec914(,%edx,4)
   for (i = 0; i < log.lh.n; i++) {
-80102cfb:	83 c2 01             	add    $0x1,%edx
-80102cfe:	39 d1                	cmp    %edx,%ecx
-80102d00:	75 ee                	jne    80102cf0 <initlog+0x60>
+80102d6b:	83 c2 01             	add    $0x1,%edx
+80102d6e:	39 d1                	cmp    %edx,%ecx
+80102d70:	75 ee                	jne    80102d60 <initlog+0x60>
   brelse(buf);
-80102d02:	83 ec 0c             	sub    $0xc,%esp
-80102d05:	50                   	push   %eax
-80102d06:	e8 e5 d4 ff ff       	call   801001f0 <brelse>
+80102d72:	83 ec 0c             	sub    $0xc,%esp
+80102d75:	50                   	push   %eax
+80102d76:	e8 75 d4 ff ff       	call   801001f0 <brelse>
 
 static void
 recover_from_log(void)
 {
   read_head();
   install_trans(); // if committed, copy from log to disk
-80102d0b:	e8 80 fe ff ff       	call   80102b90 <install_trans>
+80102d7b:	e8 80 fe ff ff       	call   80102c00 <install_trans>
   log.lh.n = 0;
-80102d10:	c7 05 c8 26 11 80 00 	movl   $0x0,0x801126c8
-80102d17:	00 00 00 
+80102d80:	c7 05 e8 36 11 80 00 	movl   $0x0,0x801136e8
+80102d87:	00 00 00 
   write_head(); // clear the log
-80102d1a:	e8 11 ff ff ff       	call   80102c30 <write_head>
+80102d8a:	e8 11 ff ff ff       	call   80102ca0 <write_head>
 }
-80102d1f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80102d22:	83 c4 10             	add    $0x10,%esp
-80102d25:	c9                   	leave  
-80102d26:	c3                   	ret    
-80102d27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80102d2e:	66 90                	xchg   %ax,%ax
+80102d8f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102d92:	83 c4 10             	add    $0x10,%esp
+80102d95:	c9                   	leave  
+80102d96:	c3                   	ret    
+80102d97:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102d9e:	66 90                	xchg   %ax,%ax
 
-80102d30 <begin_op>:
+80102da0 <begin_op>:
 }
 
 // called at the start of each FS system call.
 void
 begin_op(void)
 {
-80102d30:	f3 0f 1e fb          	endbr32 
-80102d34:	55                   	push   %ebp
-80102d35:	89 e5                	mov    %esp,%ebp
-80102d37:	83 ec 14             	sub    $0x14,%esp
+80102da0:	f3 0f 1e fb          	endbr32 
+80102da4:	55                   	push   %ebp
+80102da5:	89 e5                	mov    %esp,%ebp
+80102da7:	83 ec 14             	sub    $0x14,%esp
   acquire(&log.lock);
-80102d3a:	68 80 26 11 80       	push   $0x80112680
-80102d3f:	e8 1c 18 00 00       	call   80104560 <acquire>
-80102d44:	83 c4 10             	add    $0x10,%esp
-80102d47:	eb 1c                	jmp    80102d65 <begin_op+0x35>
-80102d49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102daa:	68 a0 36 11 80       	push   $0x801136a0
+80102daf:	e8 fc 23 00 00       	call   801051b0 <acquire>
+80102db4:	83 c4 10             	add    $0x10,%esp
+80102db7:	eb 1c                	jmp    80102dd5 <begin_op+0x35>
+80102db9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   while(1){
     if(log.committing){
       sleep(&log, &log.lock);
-80102d50:	83 ec 08             	sub    $0x8,%esp
-80102d53:	68 80 26 11 80       	push   $0x80112680
-80102d58:	68 80 26 11 80       	push   $0x80112680
-80102d5d:	e8 be 11 00 00       	call   80103f20 <sleep>
-80102d62:	83 c4 10             	add    $0x10,%esp
+80102dc0:	83 ec 08             	sub    $0x8,%esp
+80102dc3:	68 a0 36 11 80       	push   $0x801136a0
+80102dc8:	68 a0 36 11 80       	push   $0x801136a0
+80102dcd:	e8 be 1b 00 00       	call   80104990 <sleep>
+80102dd2:	83 c4 10             	add    $0x10,%esp
     if(log.committing){
-80102d65:	a1 c0 26 11 80       	mov    0x801126c0,%eax
-80102d6a:	85 c0                	test   %eax,%eax
-80102d6c:	75 e2                	jne    80102d50 <begin_op+0x20>
+80102dd5:	a1 e0 36 11 80       	mov    0x801136e0,%eax
+80102dda:	85 c0                	test   %eax,%eax
+80102ddc:	75 e2                	jne    80102dc0 <begin_op+0x20>
     } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
-80102d6e:	a1 bc 26 11 80       	mov    0x801126bc,%eax
-80102d73:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
-80102d79:	83 c0 01             	add    $0x1,%eax
-80102d7c:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
-80102d7f:	8d 14 4a             	lea    (%edx,%ecx,2),%edx
-80102d82:	83 fa 1e             	cmp    $0x1e,%edx
-80102d85:	7f c9                	jg     80102d50 <begin_op+0x20>
+80102dde:	a1 dc 36 11 80       	mov    0x801136dc,%eax
+80102de3:	8b 15 e8 36 11 80    	mov    0x801136e8,%edx
+80102de9:	83 c0 01             	add    $0x1,%eax
+80102dec:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
+80102def:	8d 14 4a             	lea    (%edx,%ecx,2),%edx
+80102df2:	83 fa 1e             	cmp    $0x1e,%edx
+80102df5:	7f c9                	jg     80102dc0 <begin_op+0x20>
       // this op might exhaust log space; wait for commit.
       sleep(&log, &log.lock);
     } else {
       log.outstanding += 1;
       release(&log.lock);
-80102d87:	83 ec 0c             	sub    $0xc,%esp
+80102df7:	83 ec 0c             	sub    $0xc,%esp
       log.outstanding += 1;
-80102d8a:	a3 bc 26 11 80       	mov    %eax,0x801126bc
+80102dfa:	a3 dc 36 11 80       	mov    %eax,0x801136dc
       release(&log.lock);
-80102d8f:	68 80 26 11 80       	push   $0x80112680
-80102d94:	e8 87 18 00 00       	call   80104620 <release>
+80102dff:	68 a0 36 11 80       	push   $0x801136a0
+80102e04:	e8 67 24 00 00       	call   80105270 <release>
       break;
     }
   }
 }
-80102d99:	83 c4 10             	add    $0x10,%esp
-80102d9c:	c9                   	leave  
-80102d9d:	c3                   	ret    
-80102d9e:	66 90                	xchg   %ax,%ax
+80102e09:	83 c4 10             	add    $0x10,%esp
+80102e0c:	c9                   	leave  
+80102e0d:	c3                   	ret    
+80102e0e:	66 90                	xchg   %ax,%ax
 
-80102da0 <end_op>:
+80102e10 <end_op>:
 
 // called at the end of each FS system call.
 // commits if this was the last outstanding operation.
 void
 end_op(void)
 {
-80102da0:	f3 0f 1e fb          	endbr32 
-80102da4:	55                   	push   %ebp
-80102da5:	89 e5                	mov    %esp,%ebp
-80102da7:	57                   	push   %edi
-80102da8:	56                   	push   %esi
-80102da9:	53                   	push   %ebx
-80102daa:	83 ec 18             	sub    $0x18,%esp
+80102e10:	f3 0f 1e fb          	endbr32 
+80102e14:	55                   	push   %ebp
+80102e15:	89 e5                	mov    %esp,%ebp
+80102e17:	57                   	push   %edi
+80102e18:	56                   	push   %esi
+80102e19:	53                   	push   %ebx
+80102e1a:	83 ec 18             	sub    $0x18,%esp
   int do_commit = 0;
 
   acquire(&log.lock);
-80102dad:	68 80 26 11 80       	push   $0x80112680
-80102db2:	e8 a9 17 00 00       	call   80104560 <acquire>
+80102e1d:	68 a0 36 11 80       	push   $0x801136a0
+80102e22:	e8 89 23 00 00       	call   801051b0 <acquire>
   log.outstanding -= 1;
-80102db7:	a1 bc 26 11 80       	mov    0x801126bc,%eax
+80102e27:	a1 dc 36 11 80       	mov    0x801136dc,%eax
   if(log.committing)
-80102dbc:	8b 35 c0 26 11 80    	mov    0x801126c0,%esi
-80102dc2:	83 c4 10             	add    $0x10,%esp
+80102e2c:	8b 35 e0 36 11 80    	mov    0x801136e0,%esi
+80102e32:	83 c4 10             	add    $0x10,%esp
   log.outstanding -= 1;
-80102dc5:	8d 58 ff             	lea    -0x1(%eax),%ebx
-80102dc8:	89 1d bc 26 11 80    	mov    %ebx,0x801126bc
+80102e35:	8d 58 ff             	lea    -0x1(%eax),%ebx
+80102e38:	89 1d dc 36 11 80    	mov    %ebx,0x801136dc
   if(log.committing)
-80102dce:	85 f6                	test   %esi,%esi
-80102dd0:	0f 85 1e 01 00 00    	jne    80102ef4 <end_op+0x154>
+80102e3e:	85 f6                	test   %esi,%esi
+80102e40:	0f 85 1e 01 00 00    	jne    80102f64 <end_op+0x154>
     panic("log.committing");
   if(log.outstanding == 0){
-80102dd6:	85 db                	test   %ebx,%ebx
-80102dd8:	0f 85 f2 00 00 00    	jne    80102ed0 <end_op+0x130>
+80102e46:	85 db                	test   %ebx,%ebx
+80102e48:	0f 85 f2 00 00 00    	jne    80102f40 <end_op+0x130>
     do_commit = 1;
     log.committing = 1;
-80102dde:	c7 05 c0 26 11 80 01 	movl   $0x1,0x801126c0
-80102de5:	00 00 00 
+80102e4e:	c7 05 e0 36 11 80 01 	movl   $0x1,0x801136e0
+80102e55:	00 00 00 
     // begin_op() may be waiting for log space,
     // and decrementing log.outstanding has decreased
     // the amount of reserved space.
     wakeup(&log);
   }
   release(&log.lock);
-80102de8:	83 ec 0c             	sub    $0xc,%esp
-80102deb:	68 80 26 11 80       	push   $0x80112680
-80102df0:	e8 2b 18 00 00       	call   80104620 <release>
+80102e58:	83 ec 0c             	sub    $0xc,%esp
+80102e5b:	68 a0 36 11 80       	push   $0x801136a0
+80102e60:	e8 0b 24 00 00       	call   80105270 <release>
 }
 
 static void
 commit()
 {
   if (log.lh.n > 0) {
-80102df5:	8b 0d c8 26 11 80    	mov    0x801126c8,%ecx
-80102dfb:	83 c4 10             	add    $0x10,%esp
-80102dfe:	85 c9                	test   %ecx,%ecx
-80102e00:	7f 3e                	jg     80102e40 <end_op+0xa0>
+80102e65:	8b 0d e8 36 11 80    	mov    0x801136e8,%ecx
+80102e6b:	83 c4 10             	add    $0x10,%esp
+80102e6e:	85 c9                	test   %ecx,%ecx
+80102e70:	7f 3e                	jg     80102eb0 <end_op+0xa0>
     acquire(&log.lock);
-80102e02:	83 ec 0c             	sub    $0xc,%esp
-80102e05:	68 80 26 11 80       	push   $0x80112680
-80102e0a:	e8 51 17 00 00       	call   80104560 <acquire>
+80102e72:	83 ec 0c             	sub    $0xc,%esp
+80102e75:	68 a0 36 11 80       	push   $0x801136a0
+80102e7a:	e8 31 23 00 00       	call   801051b0 <acquire>
     wakeup(&log);
-80102e0f:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
+80102e7f:	c7 04 24 a0 36 11 80 	movl   $0x801136a0,(%esp)
     log.committing = 0;
-80102e16:	c7 05 c0 26 11 80 00 	movl   $0x0,0x801126c0
-80102e1d:	00 00 00 
+80102e86:	c7 05 e0 36 11 80 00 	movl   $0x0,0x801136e0
+80102e8d:	00 00 00 
     wakeup(&log);
-80102e20:	e8 bb 12 00 00       	call   801040e0 <wakeup>
+80102e90:	e8 bb 1c 00 00       	call   80104b50 <wakeup>
     release(&log.lock);
-80102e25:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
-80102e2c:	e8 ef 17 00 00       	call   80104620 <release>
-80102e31:	83 c4 10             	add    $0x10,%esp
-}
-80102e34:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102e37:	5b                   	pop    %ebx
-80102e38:	5e                   	pop    %esi
-80102e39:	5f                   	pop    %edi
-80102e3a:	5d                   	pop    %ebp
-80102e3b:	c3                   	ret    
-80102e3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102e95:	c7 04 24 a0 36 11 80 	movl   $0x801136a0,(%esp)
+80102e9c:	e8 cf 23 00 00       	call   80105270 <release>
+80102ea1:	83 c4 10             	add    $0x10,%esp
+}
+80102ea4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102ea7:	5b                   	pop    %ebx
+80102ea8:	5e                   	pop    %esi
+80102ea9:	5f                   	pop    %edi
+80102eaa:	5d                   	pop    %ebp
+80102eab:	c3                   	ret    
+80102eac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     struct buf *to = bread(log.dev, log.start+tail+1); // log block
-80102e40:	a1 b4 26 11 80       	mov    0x801126b4,%eax
-80102e45:	83 ec 08             	sub    $0x8,%esp
-80102e48:	01 d8                	add    %ebx,%eax
-80102e4a:	83 c0 01             	add    $0x1,%eax
-80102e4d:	50                   	push   %eax
-80102e4e:	ff 35 c4 26 11 80    	pushl  0x801126c4
-80102e54:	e8 77 d2 ff ff       	call   801000d0 <bread>
-80102e59:	89 c6                	mov    %eax,%esi
+80102eb0:	a1 d4 36 11 80       	mov    0x801136d4,%eax
+80102eb5:	83 ec 08             	sub    $0x8,%esp
+80102eb8:	01 d8                	add    %ebx,%eax
+80102eba:	83 c0 01             	add    $0x1,%eax
+80102ebd:	50                   	push   %eax
+80102ebe:	ff 35 e4 36 11 80    	pushl  0x801136e4
+80102ec4:	e8 07 d2 ff ff       	call   801000d0 <bread>
+80102ec9:	89 c6                	mov    %eax,%esi
     struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
-80102e5b:	58                   	pop    %eax
-80102e5c:	5a                   	pop    %edx
-80102e5d:	ff 34 9d cc 26 11 80 	pushl  -0x7feed934(,%ebx,4)
-80102e64:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102ecb:	58                   	pop    %eax
+80102ecc:	5a                   	pop    %edx
+80102ecd:	ff 34 9d ec 36 11 80 	pushl  -0x7feec914(,%ebx,4)
+80102ed4:	ff 35 e4 36 11 80    	pushl  0x801136e4
   for (tail = 0; tail < log.lh.n; tail++) {
-80102e6a:	83 c3 01             	add    $0x1,%ebx
+80102eda:	83 c3 01             	add    $0x1,%ebx
     struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
-80102e6d:	e8 5e d2 ff ff       	call   801000d0 <bread>
+80102edd:	e8 ee d1 ff ff       	call   801000d0 <bread>
     memmove(to->data, from->data, BSIZE);
-80102e72:	83 c4 0c             	add    $0xc,%esp
+80102ee2:	83 c4 0c             	add    $0xc,%esp
     struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
-80102e75:	89 c7                	mov    %eax,%edi
+80102ee5:	89 c7                	mov    %eax,%edi
     memmove(to->data, from->data, BSIZE);
-80102e77:	8d 40 5c             	lea    0x5c(%eax),%eax
-80102e7a:	68 00 02 00 00       	push   $0x200
-80102e7f:	50                   	push   %eax
-80102e80:	8d 46 5c             	lea    0x5c(%esi),%eax
-80102e83:	50                   	push   %eax
-80102e84:	e8 87 18 00 00       	call   80104710 <memmove>
+80102ee7:	8d 40 5c             	lea    0x5c(%eax),%eax
+80102eea:	68 00 02 00 00       	push   $0x200
+80102eef:	50                   	push   %eax
+80102ef0:	8d 46 5c             	lea    0x5c(%esi),%eax
+80102ef3:	50                   	push   %eax
+80102ef4:	e8 67 24 00 00       	call   80105360 <memmove>
     bwrite(to);  // write the log
-80102e89:	89 34 24             	mov    %esi,(%esp)
-80102e8c:	e8 1f d3 ff ff       	call   801001b0 <bwrite>
+80102ef9:	89 34 24             	mov    %esi,(%esp)
+80102efc:	e8 af d2 ff ff       	call   801001b0 <bwrite>
     brelse(from);
-80102e91:	89 3c 24             	mov    %edi,(%esp)
-80102e94:	e8 57 d3 ff ff       	call   801001f0 <brelse>
+80102f01:	89 3c 24             	mov    %edi,(%esp)
+80102f04:	e8 e7 d2 ff ff       	call   801001f0 <brelse>
     brelse(to);
-80102e99:	89 34 24             	mov    %esi,(%esp)
-80102e9c:	e8 4f d3 ff ff       	call   801001f0 <brelse>
+80102f09:	89 34 24             	mov    %esi,(%esp)
+80102f0c:	e8 df d2 ff ff       	call   801001f0 <brelse>
   for (tail = 0; tail < log.lh.n; tail++) {
-80102ea1:	83 c4 10             	add    $0x10,%esp
-80102ea4:	3b 1d c8 26 11 80    	cmp    0x801126c8,%ebx
-80102eaa:	7c 94                	jl     80102e40 <end_op+0xa0>
+80102f11:	83 c4 10             	add    $0x10,%esp
+80102f14:	3b 1d e8 36 11 80    	cmp    0x801136e8,%ebx
+80102f1a:	7c 94                	jl     80102eb0 <end_op+0xa0>
     write_log();     // Write modified blocks from cache to log
     write_head();    // Write header to disk -- the real commit
-80102eac:	e8 7f fd ff ff       	call   80102c30 <write_head>
+80102f1c:	e8 7f fd ff ff       	call   80102ca0 <write_head>
     install_trans(); // Now install writes to home locations
-80102eb1:	e8 da fc ff ff       	call   80102b90 <install_trans>
+80102f21:	e8 da fc ff ff       	call   80102c00 <install_trans>
     log.lh.n = 0;
-80102eb6:	c7 05 c8 26 11 80 00 	movl   $0x0,0x801126c8
-80102ebd:	00 00 00 
+80102f26:	c7 05 e8 36 11 80 00 	movl   $0x0,0x801136e8
+80102f2d:	00 00 00 
     write_head();    // Erase the transaction from the log
-80102ec0:	e8 6b fd ff ff       	call   80102c30 <write_head>
-80102ec5:	e9 38 ff ff ff       	jmp    80102e02 <end_op+0x62>
-80102eca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80102f30:	e8 6b fd ff ff       	call   80102ca0 <write_head>
+80102f35:	e9 38 ff ff ff       	jmp    80102e72 <end_op+0x62>
+80102f3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     wakeup(&log);
-80102ed0:	83 ec 0c             	sub    $0xc,%esp
-80102ed3:	68 80 26 11 80       	push   $0x80112680
-80102ed8:	e8 03 12 00 00       	call   801040e0 <wakeup>
+80102f40:	83 ec 0c             	sub    $0xc,%esp
+80102f43:	68 a0 36 11 80       	push   $0x801136a0
+80102f48:	e8 03 1c 00 00       	call   80104b50 <wakeup>
   release(&log.lock);
-80102edd:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
-80102ee4:	e8 37 17 00 00       	call   80104620 <release>
-80102ee9:	83 c4 10             	add    $0x10,%esp
-}
-80102eec:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102eef:	5b                   	pop    %ebx
-80102ef0:	5e                   	pop    %esi
-80102ef1:	5f                   	pop    %edi
-80102ef2:	5d                   	pop    %ebp
-80102ef3:	c3                   	ret    
+80102f4d:	c7 04 24 a0 36 11 80 	movl   $0x801136a0,(%esp)
+80102f54:	e8 17 23 00 00       	call   80105270 <release>
+80102f59:	83 c4 10             	add    $0x10,%esp
+}
+80102f5c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102f5f:	5b                   	pop    %ebx
+80102f60:	5e                   	pop    %esi
+80102f61:	5f                   	pop    %edi
+80102f62:	5d                   	pop    %ebp
+80102f63:	c3                   	ret    
     panic("log.committing");
-80102ef4:	83 ec 0c             	sub    $0xc,%esp
-80102ef7:	68 84 75 10 80       	push   $0x80107584
-80102efc:	e8 8f d4 ff ff       	call   80100390 <panic>
-80102f01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80102f08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80102f0f:	90                   	nop
+80102f64:	83 ec 0c             	sub    $0xc,%esp
+80102f67:	68 04 83 10 80       	push   $0x80108304
+80102f6c:	e8 1f d4 ff ff       	call   80100390 <panic>
+80102f71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102f78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102f7f:	90                   	nop
 
-80102f10 <log_write>:
+80102f80 <log_write>:
 //   modify bp->data[]
 //   log_write(bp)
 //   brelse(bp)
 void
 log_write(struct buf *b)
 {
-80102f10:	f3 0f 1e fb          	endbr32 
-80102f14:	55                   	push   %ebp
-80102f15:	89 e5                	mov    %esp,%ebp
-80102f17:	53                   	push   %ebx
-80102f18:	83 ec 04             	sub    $0x4,%esp
+80102f80:	f3 0f 1e fb          	endbr32 
+80102f84:	55                   	push   %ebp
+80102f85:	89 e5                	mov    %esp,%ebp
+80102f87:	53                   	push   %ebx
+80102f88:	83 ec 04             	sub    $0x4,%esp
   int i;
 
   if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
-80102f1b:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
+80102f8b:	8b 15 e8 36 11 80    	mov    0x801136e8,%edx
 {
-80102f21:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80102f91:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
-80102f24:	83 fa 1d             	cmp    $0x1d,%edx
-80102f27:	0f 8f 91 00 00 00    	jg     80102fbe <log_write+0xae>
-80102f2d:	a1 b8 26 11 80       	mov    0x801126b8,%eax
-80102f32:	83 e8 01             	sub    $0x1,%eax
-80102f35:	39 c2                	cmp    %eax,%edx
-80102f37:	0f 8d 81 00 00 00    	jge    80102fbe <log_write+0xae>
+80102f94:	83 fa 1d             	cmp    $0x1d,%edx
+80102f97:	0f 8f 91 00 00 00    	jg     8010302e <log_write+0xae>
+80102f9d:	a1 d8 36 11 80       	mov    0x801136d8,%eax
+80102fa2:	83 e8 01             	sub    $0x1,%eax
+80102fa5:	39 c2                	cmp    %eax,%edx
+80102fa7:	0f 8d 81 00 00 00    	jge    8010302e <log_write+0xae>
     panic("too big a transaction");
   if (log.outstanding < 1)
-80102f3d:	a1 bc 26 11 80       	mov    0x801126bc,%eax
-80102f42:	85 c0                	test   %eax,%eax
-80102f44:	0f 8e 81 00 00 00    	jle    80102fcb <log_write+0xbb>
+80102fad:	a1 dc 36 11 80       	mov    0x801136dc,%eax
+80102fb2:	85 c0                	test   %eax,%eax
+80102fb4:	0f 8e 81 00 00 00    	jle    8010303b <log_write+0xbb>
     panic("log_write outside of trans");
 
   acquire(&log.lock);
-80102f4a:	83 ec 0c             	sub    $0xc,%esp
-80102f4d:	68 80 26 11 80       	push   $0x80112680
-80102f52:	e8 09 16 00 00       	call   80104560 <acquire>
+80102fba:	83 ec 0c             	sub    $0xc,%esp
+80102fbd:	68 a0 36 11 80       	push   $0x801136a0
+80102fc2:	e8 e9 21 00 00       	call   801051b0 <acquire>
   for (i = 0; i < log.lh.n; i++) {
-80102f57:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
-80102f5d:	83 c4 10             	add    $0x10,%esp
-80102f60:	85 d2                	test   %edx,%edx
-80102f62:	7e 4e                	jle    80102fb2 <log_write+0xa2>
+80102fc7:	8b 15 e8 36 11 80    	mov    0x801136e8,%edx
+80102fcd:	83 c4 10             	add    $0x10,%esp
+80102fd0:	85 d2                	test   %edx,%edx
+80102fd2:	7e 4e                	jle    80103022 <log_write+0xa2>
     if (log.lh.block[i] == b->blockno)   // log absorbtion
-80102f64:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80102fd4:	8b 4b 08             	mov    0x8(%ebx),%ecx
   for (i = 0; i < log.lh.n; i++) {
-80102f67:	31 c0                	xor    %eax,%eax
-80102f69:	eb 0c                	jmp    80102f77 <log_write+0x67>
-80102f6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80102f6f:	90                   	nop
-80102f70:	83 c0 01             	add    $0x1,%eax
-80102f73:	39 c2                	cmp    %eax,%edx
-80102f75:	74 29                	je     80102fa0 <log_write+0x90>
+80102fd7:	31 c0                	xor    %eax,%eax
+80102fd9:	eb 0c                	jmp    80102fe7 <log_write+0x67>
+80102fdb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102fdf:	90                   	nop
+80102fe0:	83 c0 01             	add    $0x1,%eax
+80102fe3:	39 c2                	cmp    %eax,%edx
+80102fe5:	74 29                	je     80103010 <log_write+0x90>
     if (log.lh.block[i] == b->blockno)   // log absorbtion
-80102f77:	39 0c 85 cc 26 11 80 	cmp    %ecx,-0x7feed934(,%eax,4)
-80102f7e:	75 f0                	jne    80102f70 <log_write+0x60>
+80102fe7:	39 0c 85 ec 36 11 80 	cmp    %ecx,-0x7feec914(,%eax,4)
+80102fee:	75 f0                	jne    80102fe0 <log_write+0x60>
       break;
   }
   log.lh.block[i] = b->blockno;
-80102f80:	89 0c 85 cc 26 11 80 	mov    %ecx,-0x7feed934(,%eax,4)
+80102ff0:	89 0c 85 ec 36 11 80 	mov    %ecx,-0x7feec914(,%eax,4)
   if (i == log.lh.n)
     log.lh.n++;
   b->flags |= B_DIRTY; // prevent eviction
-80102f87:	83 0b 04             	orl    $0x4,(%ebx)
+80102ff7:	83 0b 04             	orl    $0x4,(%ebx)
   release(&log.lock);
 }
-80102f8a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102ffa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   release(&log.lock);
-80102f8d:	c7 45 08 80 26 11 80 	movl   $0x80112680,0x8(%ebp)
+80102ffd:	c7 45 08 a0 36 11 80 	movl   $0x801136a0,0x8(%ebp)
 }
-80102f94:	c9                   	leave  
+80103004:	c9                   	leave  
   release(&log.lock);
-80102f95:	e9 86 16 00 00       	jmp    80104620 <release>
-80102f9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103005:	e9 66 22 00 00       	jmp    80105270 <release>
+8010300a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   log.lh.block[i] = b->blockno;
-80102fa0:	89 0c 95 cc 26 11 80 	mov    %ecx,-0x7feed934(,%edx,4)
+80103010:	89 0c 95 ec 36 11 80 	mov    %ecx,-0x7feec914(,%edx,4)
     log.lh.n++;
-80102fa7:	83 c2 01             	add    $0x1,%edx
-80102faa:	89 15 c8 26 11 80    	mov    %edx,0x801126c8
-80102fb0:	eb d5                	jmp    80102f87 <log_write+0x77>
+80103017:	83 c2 01             	add    $0x1,%edx
+8010301a:	89 15 e8 36 11 80    	mov    %edx,0x801136e8
+80103020:	eb d5                	jmp    80102ff7 <log_write+0x77>
   log.lh.block[i] = b->blockno;
-80102fb2:	8b 43 08             	mov    0x8(%ebx),%eax
-80102fb5:	a3 cc 26 11 80       	mov    %eax,0x801126cc
+80103022:	8b 43 08             	mov    0x8(%ebx),%eax
+80103025:	a3 ec 36 11 80       	mov    %eax,0x801136ec
   if (i == log.lh.n)
-80102fba:	75 cb                	jne    80102f87 <log_write+0x77>
-80102fbc:	eb e9                	jmp    80102fa7 <log_write+0x97>
+8010302a:	75 cb                	jne    80102ff7 <log_write+0x77>
+8010302c:	eb e9                	jmp    80103017 <log_write+0x97>
     panic("too big a transaction");
-80102fbe:	83 ec 0c             	sub    $0xc,%esp
-80102fc1:	68 93 75 10 80       	push   $0x80107593
-80102fc6:	e8 c5 d3 ff ff       	call   80100390 <panic>
+8010302e:	83 ec 0c             	sub    $0xc,%esp
+80103031:	68 13 83 10 80       	push   $0x80108313
+80103036:	e8 55 d3 ff ff       	call   80100390 <panic>
     panic("log_write outside of trans");
-80102fcb:	83 ec 0c             	sub    $0xc,%esp
-80102fce:	68 a9 75 10 80       	push   $0x801075a9
-80102fd3:	e8 b8 d3 ff ff       	call   80100390 <panic>
-80102fd8:	66 90                	xchg   %ax,%ax
-80102fda:	66 90                	xchg   %ax,%ax
-80102fdc:	66 90                	xchg   %ax,%ax
-80102fde:	66 90                	xchg   %ax,%ax
+8010303b:	83 ec 0c             	sub    $0xc,%esp
+8010303e:	68 29 83 10 80       	push   $0x80108329
+80103043:	e8 48 d3 ff ff       	call   80100390 <panic>
+80103048:	66 90                	xchg   %ax,%ax
+8010304a:	66 90                	xchg   %ax,%ax
+8010304c:	66 90                	xchg   %ax,%ax
+8010304e:	66 90                	xchg   %ax,%ax
 
-80102fe0 <mpmain>:
+80103050 <mpmain>:
 }
 
 // Common CPU setup code.
 static void
 mpmain(void)
 {
-80102fe0:	55                   	push   %ebp
-80102fe1:	89 e5                	mov    %esp,%ebp
-80102fe3:	53                   	push   %ebx
-80102fe4:	83 ec 04             	sub    $0x4,%esp
+80103050:	55                   	push   %ebp
+80103051:	89 e5                	mov    %esp,%ebp
+80103053:	53                   	push   %ebx
+80103054:	83 ec 04             	sub    $0x4,%esp
   cprintf("cpu%d: starting %d\n", cpuid(), cpuid());
-80102fe7:	e8 54 09 00 00       	call   80103940 <cpuid>
-80102fec:	89 c3                	mov    %eax,%ebx
-80102fee:	e8 4d 09 00 00       	call   80103940 <cpuid>
-80102ff3:	83 ec 04             	sub    $0x4,%esp
-80102ff6:	53                   	push   %ebx
-80102ff7:	50                   	push   %eax
-80102ff8:	68 c4 75 10 80       	push   $0x801075c4
-80102ffd:	e8 ae d6 ff ff       	call   801006b0 <cprintf>
+80103057:	e8 34 0c 00 00       	call   80103c90 <cpuid>
+8010305c:	89 c3                	mov    %eax,%ebx
+8010305e:	e8 2d 0c 00 00       	call   80103c90 <cpuid>
+80103063:	83 ec 04             	sub    $0x4,%esp
+80103066:	53                   	push   %ebx
+80103067:	50                   	push   %eax
+80103068:	68 44 83 10 80       	push   $0x80108344
+8010306d:	e8 3e d6 ff ff       	call   801006b0 <cprintf>
   idtinit();       // load idt register
-80103002:	e8 19 29 00 00       	call   80105920 <idtinit>
+80103072:	e8 a9 35 00 00       	call   80106620 <idtinit>
   xchg(&(mycpu()->started), 1); // tell startothers() we're up
-80103007:	e8 c4 08 00 00       	call   801038d0 <mycpu>
-8010300c:	89 c2                	mov    %eax,%edx
+80103077:	e8 b4 0b 00 00       	call   80103c30 <mycpu>
+8010307c:	89 c2                	mov    %eax,%edx
 xchg(volatile uint *addr, uint newval)
 {
   uint result;
 
   // The + in "+m" denotes a read-modify-write operand.
   asm volatile("lock; xchgl %0, %1" :
-8010300e:	b8 01 00 00 00       	mov    $0x1,%eax
-80103013:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
+8010307e:	b8 01 00 00 00       	mov    $0x1,%eax
+80103083:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
   scheduler();     // start running processes
-8010301a:	e8 11 0c 00 00       	call   80103c30 <scheduler>
-8010301f:	90                   	nop
+8010308a:	e8 11 13 00 00       	call   801043a0 <scheduler>
+8010308f:	90                   	nop
 
-80103020 <mpenter>:
+80103090 <mpenter>:
 {
-80103020:	f3 0f 1e fb          	endbr32 
-80103024:	55                   	push   %ebp
-80103025:	89 e5                	mov    %esp,%ebp
-80103027:	83 ec 08             	sub    $0x8,%esp
+80103090:	f3 0f 1e fb          	endbr32 
+80103094:	55                   	push   %ebp
+80103095:	89 e5                	mov    %esp,%ebp
+80103097:	83 ec 08             	sub    $0x8,%esp
   switchkvm();
-8010302a:	e8 c1 39 00 00       	call   801069f0 <switchkvm>
+8010309a:	e8 41 46 00 00       	call   801076e0 <switchkvm>
   seginit();
-8010302f:	e8 2c 39 00 00       	call   80106960 <seginit>
+8010309f:	e8 1c 45 00 00       	call   801075c0 <seginit>
   lapicinit();
-80103034:	e8 67 f7 ff ff       	call   801027a0 <lapicinit>
+801030a4:	e8 67 f7 ff ff       	call   80102810 <lapicinit>
   mpmain();
-80103039:	e8 a2 ff ff ff       	call   80102fe0 <mpmain>
-8010303e:	66 90                	xchg   %ax,%ax
+801030a9:	e8 a2 ff ff ff       	call   80103050 <mpmain>
+801030ae:	66 90                	xchg   %ax,%ax
 
-80103040 <main>:
+801030b0 <main>:
 {
-80103040:	f3 0f 1e fb          	endbr32 
-80103044:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-80103048:	83 e4 f0             	and    $0xfffffff0,%esp
-8010304b:	ff 71 fc             	pushl  -0x4(%ecx)
-8010304e:	55                   	push   %ebp
-8010304f:	89 e5                	mov    %esp,%ebp
-80103051:	53                   	push   %ebx
-80103052:	51                   	push   %ecx
+801030b0:	f3 0f 1e fb          	endbr32 
+801030b4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+801030b8:	83 e4 f0             	and    $0xfffffff0,%esp
+801030bb:	ff 71 fc             	pushl  -0x4(%ecx)
+801030be:	55                   	push   %ebp
+801030bf:	89 e5                	mov    %esp,%ebp
+801030c1:	53                   	push   %ebx
+801030c2:	51                   	push   %ecx
   kinit1(end, P2V(4*1024*1024)); // phys page allocator
-80103053:	83 ec 08             	sub    $0x8,%esp
-80103056:	68 00 00 40 80       	push   $0x80400000
-8010305b:	68 a8 54 11 80       	push   $0x801154a8
-80103060:	e8 fb f4 ff ff       	call   80102560 <kinit1>
+801030c3:	83 ec 08             	sub    $0x8,%esp
+801030c6:	68 00 00 40 80       	push   $0x80400000
+801030cb:	68 fc 63 11 80       	push   $0x801163fc
+801030d0:	e8 fb f4 ff ff       	call   801025d0 <kinit1>
   kvmalloc();      // kernel page table
-80103065:	e8 66 3e 00 00       	call   80106ed0 <kvmalloc>
+801030d5:	e8 56 4b 00 00       	call   80107c30 <kvmalloc>
   mpinit();        // detect other processors
-8010306a:	e8 81 01 00 00       	call   801031f0 <mpinit>
+801030da:	e8 81 01 00 00       	call   80103260 <mpinit>
   lapicinit();     // interrupt controller
-8010306f:	e8 2c f7 ff ff       	call   801027a0 <lapicinit>
+801030df:	e8 2c f7 ff ff       	call   80102810 <lapicinit>
   seginit();       // segment descriptors
-80103074:	e8 e7 38 00 00       	call   80106960 <seginit>
+801030e4:	e8 d7 44 00 00       	call   801075c0 <seginit>
   picinit();       // disable pic
-80103079:	e8 52 03 00 00       	call   801033d0 <picinit>
+801030e9:	e8 52 03 00 00       	call   80103440 <picinit>
   ioapicinit();    // another interrupt controller
-8010307e:	e8 fd f2 ff ff       	call   80102380 <ioapicinit>
+801030ee:	e8 8d f2 ff ff       	call   80102380 <ioapicinit>
   consoleinit();   // console hardware
-80103083:	e8 a8 d9 ff ff       	call   80100a30 <consoleinit>
+801030f3:	e8 38 d9 ff ff       	call   80100a30 <consoleinit>
   uartinit();      // serial port
-80103088:	e8 93 2b 00 00       	call   80105c20 <uartinit>
+801030f8:	e8 13 38 00 00       	call   80106910 <uartinit>
   pinit();         // process table
-8010308d:	e8 1e 08 00 00       	call   801038b0 <pinit>
+801030fd:	e8 ce 0a 00 00       	call   80103bd0 <pinit>
   tvinit();        // trap vectors
-80103092:	e8 09 28 00 00       	call   801058a0 <tvinit>
+80103102:	e8 99 34 00 00       	call   801065a0 <tvinit>
   binit();         // buffer cache
-80103097:	e8 a4 cf ff ff       	call   80100040 <binit>
+80103107:	e8 34 cf ff ff       	call   80100040 <binit>
   fileinit();      // file table
-8010309c:	e8 3f dd ff ff       	call   80100de0 <fileinit>
-  ideinit();       // disk 
-801030a1:	e8 aa f0 ff ff       	call   80102150 <ideinit>
+8010310c:	e8 cf dc ff ff       	call   80100de0 <fileinit>
+  ideinit();       // disk
+80103111:	e8 3a f0 ff ff       	call   80102150 <ideinit>
 
   // Write entry code to unused memory at 0x7000.
   // The linker has placed the image of entryother.S in
   // _binary_entryother_start.
   code = P2V(0x7000);
   memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
-801030a6:	83 c4 0c             	add    $0xc,%esp
-801030a9:	68 8a 00 00 00       	push   $0x8a
-801030ae:	68 8c a4 10 80       	push   $0x8010a48c
-801030b3:	68 00 70 00 80       	push   $0x80007000
-801030b8:	e8 53 16 00 00       	call   80104710 <memmove>
+80103116:	83 c4 0c             	add    $0xc,%esp
+80103119:	68 8a 00 00 00       	push   $0x8a
+8010311e:	68 8c b4 10 80       	push   $0x8010b48c
+80103123:	68 00 70 00 80       	push   $0x80007000
+80103128:	e8 33 22 00 00       	call   80105360 <memmove>
 
   for(c = cpus; c < cpus+ncpu; c++){
-801030bd:	83 c4 10             	add    $0x10,%esp
-801030c0:	69 05 00 2d 11 80 b0 	imul   $0xb0,0x80112d00,%eax
-801030c7:	00 00 00 
-801030ca:	05 80 27 11 80       	add    $0x80112780,%eax
-801030cf:	3d 80 27 11 80       	cmp    $0x80112780,%eax
-801030d4:	76 7a                	jbe    80103150 <main+0x110>
-801030d6:	bb 80 27 11 80       	mov    $0x80112780,%ebx
-801030db:	eb 1c                	jmp    801030f9 <main+0xb9>
-801030dd:	8d 76 00             	lea    0x0(%esi),%esi
-801030e0:	69 05 00 2d 11 80 b0 	imul   $0xb0,0x80112d00,%eax
-801030e7:	00 00 00 
-801030ea:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
-801030f0:	05 80 27 11 80       	add    $0x80112780,%eax
-801030f5:	39 c3                	cmp    %eax,%ebx
-801030f7:	73 57                	jae    80103150 <main+0x110>
+8010312d:	83 c4 10             	add    $0x10,%esp
+80103130:	69 05 50 38 11 80 b0 	imul   $0xb0,0x80113850,%eax
+80103137:	00 00 00 
+8010313a:	05 a0 37 11 80       	add    $0x801137a0,%eax
+8010313f:	3d a0 37 11 80       	cmp    $0x801137a0,%eax
+80103144:	76 7a                	jbe    801031c0 <main+0x110>
+80103146:	bb a0 37 11 80       	mov    $0x801137a0,%ebx
+8010314b:	eb 1c                	jmp    80103169 <main+0xb9>
+8010314d:	8d 76 00             	lea    0x0(%esi),%esi
+80103150:	69 05 50 38 11 80 b0 	imul   $0xb0,0x80113850,%eax
+80103157:	00 00 00 
+8010315a:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
+80103160:	05 a0 37 11 80       	add    $0x801137a0,%eax
+80103165:	39 c3                	cmp    %eax,%ebx
+80103167:	73 57                	jae    801031c0 <main+0x110>
     if(c == mycpu())  // We've started already.
-801030f9:	e8 d2 07 00 00       	call   801038d0 <mycpu>
-801030fe:	39 c3                	cmp    %eax,%ebx
-80103100:	74 de                	je     801030e0 <main+0xa0>
+80103169:	e8 c2 0a 00 00       	call   80103c30 <mycpu>
+8010316e:	39 c3                	cmp    %eax,%ebx
+80103170:	74 de                	je     80103150 <main+0xa0>
       continue;
 
     // Tell entryother.S what stack to use, where to enter, and what
     // pgdir to use. We cannot use kpgdir yet, because the AP processor
     // is running in low  memory, so we use entrypgdir for the APs too.
     stack = kalloc();
-80103102:	e8 29 f5 ff ff       	call   80102630 <kalloc>
+80103172:	e8 29 f5 ff ff       	call   801026a0 <kalloc>
     *(void**)(code-4) = stack + KSTACKSIZE;
     *(void(**)(void))(code-8) = mpenter;
     *(int**)(code-12) = (void *) V2P(entrypgdir);
 
     lapicstartap(c->apicid, V2P(code));
-80103107:	83 ec 08             	sub    $0x8,%esp
+80103177:	83 ec 08             	sub    $0x8,%esp
     *(void(**)(void))(code-8) = mpenter;
-8010310a:	c7 05 f8 6f 00 80 20 	movl   $0x80103020,0x80006ff8
-80103111:	30 10 80 
+8010317a:	c7 05 f8 6f 00 80 90 	movl   $0x80103090,0x80006ff8
+80103181:	30 10 80 
     *(int**)(code-12) = (void *) V2P(entrypgdir);
-80103114:	c7 05 f4 6f 00 80 00 	movl   $0x109000,0x80006ff4
-8010311b:	90 10 00 
+80103184:	c7 05 f4 6f 00 80 00 	movl   $0x10a000,0x80006ff4
+8010318b:	a0 10 00 
     *(void**)(code-4) = stack + KSTACKSIZE;
-8010311e:	05 00 10 00 00       	add    $0x1000,%eax
-80103123:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
+8010318e:	05 00 10 00 00       	add    $0x1000,%eax
+80103193:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
     lapicstartap(c->apicid, V2P(code));
-80103128:	0f b6 03             	movzbl (%ebx),%eax
-8010312b:	68 00 70 00 00       	push   $0x7000
-80103130:	50                   	push   %eax
-80103131:	e8 ba f7 ff ff       	call   801028f0 <lapicstartap>
+80103198:	0f b6 03             	movzbl (%ebx),%eax
+8010319b:	68 00 70 00 00       	push   $0x7000
+801031a0:	50                   	push   %eax
+801031a1:	e8 ba f7 ff ff       	call   80102960 <lapicstartap>
 
     // wait for cpu to finish mpmain()
     while(c->started == 0)
-80103136:	83 c4 10             	add    $0x10,%esp
-80103139:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103140:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
-80103146:	85 c0                	test   %eax,%eax
-80103148:	74 f6                	je     80103140 <main+0x100>
-8010314a:	eb 94                	jmp    801030e0 <main+0xa0>
-8010314c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801031a6:	83 c4 10             	add    $0x10,%esp
+801031a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801031b0:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
+801031b6:	85 c0                	test   %eax,%eax
+801031b8:	74 f6                	je     801031b0 <main+0x100>
+801031ba:	eb 94                	jmp    80103150 <main+0xa0>
+801031bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
-80103150:	83 ec 08             	sub    $0x8,%esp
-80103153:	68 00 00 00 8e       	push   $0x8e000000
-80103158:	68 00 00 40 80       	push   $0x80400000
-8010315d:	e8 6e f4 ff ff       	call   801025d0 <kinit2>
+801031c0:	83 ec 08             	sub    $0x8,%esp
+801031c3:	68 00 00 00 8e       	push   $0x8e000000
+801031c8:	68 00 00 40 80       	push   $0x80400000
+801031cd:	e8 6e f4 ff ff       	call   80102640 <kinit2>
   userinit();      // first user process
-80103162:	e8 29 08 00 00       	call   80103990 <userinit>
+801031d2:	e8 d9 0e 00 00       	call   801040b0 <userinit>
   mpmain();        // finish this processor's setup
-80103167:	e8 74 fe ff ff       	call   80102fe0 <mpmain>
-8010316c:	66 90                	xchg   %ax,%ax
-8010316e:	66 90                	xchg   %ax,%ax
+801031d7:	e8 74 fe ff ff       	call   80103050 <mpmain>
+801031dc:	66 90                	xchg   %ax,%ax
+801031de:	66 90                	xchg   %ax,%ax
 
-80103170 <mpsearch1>:
+801031e0 <mpsearch1>:
 }
 
 // Look for an MP structure in the len bytes at addr.
 static struct mp*
 mpsearch1(uint a, int len)
 {
-80103170:	55                   	push   %ebp
-80103171:	89 e5                	mov    %esp,%ebp
-80103173:	57                   	push   %edi
-80103174:	56                   	push   %esi
+801031e0:	55                   	push   %ebp
+801031e1:	89 e5                	mov    %esp,%ebp
+801031e3:	57                   	push   %edi
+801031e4:	56                   	push   %esi
   uchar *e, *p, *addr;
 
   addr = P2V(a);
-80103175:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
+801031e5:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
 {
-8010317b:	53                   	push   %ebx
+801031eb:	53                   	push   %ebx
   e = addr+len;
-8010317c:	8d 1c 16             	lea    (%esi,%edx,1),%ebx
+801031ec:	8d 1c 16             	lea    (%esi,%edx,1),%ebx
 {
-8010317f:	83 ec 0c             	sub    $0xc,%esp
+801031ef:	83 ec 0c             	sub    $0xc,%esp
   for(p = addr; p < e; p += sizeof(struct mp))
-80103182:	39 de                	cmp    %ebx,%esi
-80103184:	72 10                	jb     80103196 <mpsearch1+0x26>
-80103186:	eb 50                	jmp    801031d8 <mpsearch1+0x68>
-80103188:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010318f:	90                   	nop
-80103190:	89 fe                	mov    %edi,%esi
-80103192:	39 fb                	cmp    %edi,%ebx
-80103194:	76 42                	jbe    801031d8 <mpsearch1+0x68>
+801031f2:	39 de                	cmp    %ebx,%esi
+801031f4:	72 10                	jb     80103206 <mpsearch1+0x26>
+801031f6:	eb 50                	jmp    80103248 <mpsearch1+0x68>
+801031f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801031ff:	90                   	nop
+80103200:	89 fe                	mov    %edi,%esi
+80103202:	39 fb                	cmp    %edi,%ebx
+80103204:	76 42                	jbe    80103248 <mpsearch1+0x68>
     if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
-80103196:	83 ec 04             	sub    $0x4,%esp
-80103199:	8d 7e 10             	lea    0x10(%esi),%edi
-8010319c:	6a 04                	push   $0x4
-8010319e:	68 d8 75 10 80       	push   $0x801075d8
-801031a3:	56                   	push   %esi
-801031a4:	e8 17 15 00 00       	call   801046c0 <memcmp>
-801031a9:	83 c4 10             	add    $0x10,%esp
-801031ac:	85 c0                	test   %eax,%eax
-801031ae:	75 e0                	jne    80103190 <mpsearch1+0x20>
-801031b0:	89 f2                	mov    %esi,%edx
-801031b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103206:	83 ec 04             	sub    $0x4,%esp
+80103209:	8d 7e 10             	lea    0x10(%esi),%edi
+8010320c:	6a 04                	push   $0x4
+8010320e:	68 58 83 10 80       	push   $0x80108358
+80103213:	56                   	push   %esi
+80103214:	e8 f7 20 00 00       	call   80105310 <memcmp>
+80103219:	83 c4 10             	add    $0x10,%esp
+8010321c:	85 c0                	test   %eax,%eax
+8010321e:	75 e0                	jne    80103200 <mpsearch1+0x20>
+80103220:	89 f2                	mov    %esi,%edx
+80103222:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     sum += addr[i];
-801031b8:	0f b6 0a             	movzbl (%edx),%ecx
-801031bb:	83 c2 01             	add    $0x1,%edx
-801031be:	01 c8                	add    %ecx,%eax
+80103228:	0f b6 0a             	movzbl (%edx),%ecx
+8010322b:	83 c2 01             	add    $0x1,%edx
+8010322e:	01 c8                	add    %ecx,%eax
   for(i=0; i<len; i++)
-801031c0:	39 fa                	cmp    %edi,%edx
-801031c2:	75 f4                	jne    801031b8 <mpsearch1+0x48>
+80103230:	39 fa                	cmp    %edi,%edx
+80103232:	75 f4                	jne    80103228 <mpsearch1+0x48>
     if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
-801031c4:	84 c0                	test   %al,%al
-801031c6:	75 c8                	jne    80103190 <mpsearch1+0x20>
+80103234:	84 c0                	test   %al,%al
+80103236:	75 c8                	jne    80103200 <mpsearch1+0x20>
       return (struct mp*)p;
   return 0;
 }
-801031c8:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801031cb:	89 f0                	mov    %esi,%eax
-801031cd:	5b                   	pop    %ebx
-801031ce:	5e                   	pop    %esi
-801031cf:	5f                   	pop    %edi
-801031d0:	5d                   	pop    %ebp
-801031d1:	c3                   	ret    
-801031d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-801031d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103238:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010323b:	89 f0                	mov    %esi,%eax
+8010323d:	5b                   	pop    %ebx
+8010323e:	5e                   	pop    %esi
+8010323f:	5f                   	pop    %edi
+80103240:	5d                   	pop    %ebp
+80103241:	c3                   	ret    
+80103242:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103248:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-801031db:	31 f6                	xor    %esi,%esi
+8010324b:	31 f6                	xor    %esi,%esi
 }
-801031dd:	5b                   	pop    %ebx
-801031de:	89 f0                	mov    %esi,%eax
-801031e0:	5e                   	pop    %esi
-801031e1:	5f                   	pop    %edi
-801031e2:	5d                   	pop    %ebp
-801031e3:	c3                   	ret    
-801031e4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801031eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801031ef:	90                   	nop
+8010324d:	5b                   	pop    %ebx
+8010324e:	89 f0                	mov    %esi,%eax
+80103250:	5e                   	pop    %esi
+80103251:	5f                   	pop    %edi
+80103252:	5d                   	pop    %ebp
+80103253:	c3                   	ret    
+80103254:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010325b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010325f:	90                   	nop
 
-801031f0 <mpinit>:
+80103260 <mpinit>:
   return conf;
 }
 
 void
 mpinit(void)
 {
-801031f0:	f3 0f 1e fb          	endbr32 
-801031f4:	55                   	push   %ebp
-801031f5:	89 e5                	mov    %esp,%ebp
-801031f7:	57                   	push   %edi
-801031f8:	56                   	push   %esi
-801031f9:	53                   	push   %ebx
-801031fa:	83 ec 1c             	sub    $0x1c,%esp
+80103260:	f3 0f 1e fb          	endbr32 
+80103264:	55                   	push   %ebp
+80103265:	89 e5                	mov    %esp,%ebp
+80103267:	57                   	push   %edi
+80103268:	56                   	push   %esi
+80103269:	53                   	push   %ebx
+8010326a:	83 ec 1c             	sub    $0x1c,%esp
   if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
-801031fd:	0f b6 05 0f 04 00 80 	movzbl 0x8000040f,%eax
-80103204:	0f b6 15 0e 04 00 80 	movzbl 0x8000040e,%edx
-8010320b:	c1 e0 08             	shl    $0x8,%eax
-8010320e:	09 d0                	or     %edx,%eax
-80103210:	c1 e0 04             	shl    $0x4,%eax
-80103213:	75 1b                	jne    80103230 <mpinit+0x40>
+8010326d:	0f b6 05 0f 04 00 80 	movzbl 0x8000040f,%eax
+80103274:	0f b6 15 0e 04 00 80 	movzbl 0x8000040e,%edx
+8010327b:	c1 e0 08             	shl    $0x8,%eax
+8010327e:	09 d0                	or     %edx,%eax
+80103280:	c1 e0 04             	shl    $0x4,%eax
+80103283:	75 1b                	jne    801032a0 <mpinit+0x40>
     p = ((bda[0x14]<<8)|bda[0x13])*1024;
-80103215:	0f b6 05 14 04 00 80 	movzbl 0x80000414,%eax
-8010321c:	0f b6 15 13 04 00 80 	movzbl 0x80000413,%edx
-80103223:	c1 e0 08             	shl    $0x8,%eax
-80103226:	09 d0                	or     %edx,%eax
-80103228:	c1 e0 0a             	shl    $0xa,%eax
+80103285:	0f b6 05 14 04 00 80 	movzbl 0x80000414,%eax
+8010328c:	0f b6 15 13 04 00 80 	movzbl 0x80000413,%edx
+80103293:	c1 e0 08             	shl    $0x8,%eax
+80103296:	09 d0                	or     %edx,%eax
+80103298:	c1 e0 0a             	shl    $0xa,%eax
     if((mp = mpsearch1(p-1024, 1024)))
-8010322b:	2d 00 04 00 00       	sub    $0x400,%eax
+8010329b:	2d 00 04 00 00       	sub    $0x400,%eax
     if((mp = mpsearch1(p, 1024)))
-80103230:	ba 00 04 00 00       	mov    $0x400,%edx
-80103235:	e8 36 ff ff ff       	call   80103170 <mpsearch1>
-8010323a:	89 c6                	mov    %eax,%esi
-8010323c:	85 c0                	test   %eax,%eax
-8010323e:	0f 84 4c 01 00 00    	je     80103390 <mpinit+0x1a0>
+801032a0:	ba 00 04 00 00       	mov    $0x400,%edx
+801032a5:	e8 36 ff ff ff       	call   801031e0 <mpsearch1>
+801032aa:	89 c6                	mov    %eax,%esi
+801032ac:	85 c0                	test   %eax,%eax
+801032ae:	0f 84 4c 01 00 00    	je     80103400 <mpinit+0x1a0>
   if((mp = mpsearch()) == 0 || mp->physaddr == 0)
-80103244:	8b 5e 04             	mov    0x4(%esi),%ebx
-80103247:	85 db                	test   %ebx,%ebx
-80103249:	0f 84 61 01 00 00    	je     801033b0 <mpinit+0x1c0>
+801032b4:	8b 5e 04             	mov    0x4(%esi),%ebx
+801032b7:	85 db                	test   %ebx,%ebx
+801032b9:	0f 84 61 01 00 00    	je     80103420 <mpinit+0x1c0>
   if(memcmp(conf, "PCMP", 4) != 0)
-8010324f:	83 ec 04             	sub    $0x4,%esp
+801032bf:	83 ec 04             	sub    $0x4,%esp
   conf = (struct mpconf*) P2V((uint) mp->physaddr);
-80103252:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+801032c2:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
   if(memcmp(conf, "PCMP", 4) != 0)
-80103258:	6a 04                	push   $0x4
-8010325a:	68 dd 75 10 80       	push   $0x801075dd
-8010325f:	50                   	push   %eax
+801032c8:	6a 04                	push   $0x4
+801032ca:	68 5d 83 10 80       	push   $0x8010835d
+801032cf:	50                   	push   %eax
   conf = (struct mpconf*) P2V((uint) mp->physaddr);
-80103260:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801032d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(memcmp(conf, "PCMP", 4) != 0)
-80103263:	e8 58 14 00 00       	call   801046c0 <memcmp>
-80103268:	83 c4 10             	add    $0x10,%esp
-8010326b:	85 c0                	test   %eax,%eax
-8010326d:	0f 85 3d 01 00 00    	jne    801033b0 <mpinit+0x1c0>
+801032d3:	e8 38 20 00 00       	call   80105310 <memcmp>
+801032d8:	83 c4 10             	add    $0x10,%esp
+801032db:	85 c0                	test   %eax,%eax
+801032dd:	0f 85 3d 01 00 00    	jne    80103420 <mpinit+0x1c0>
   if(conf->version != 1 && conf->version != 4)
-80103273:	0f b6 83 06 00 00 80 	movzbl -0x7ffffffa(%ebx),%eax
-8010327a:	3c 01                	cmp    $0x1,%al
-8010327c:	74 08                	je     80103286 <mpinit+0x96>
-8010327e:	3c 04                	cmp    $0x4,%al
-80103280:	0f 85 2a 01 00 00    	jne    801033b0 <mpinit+0x1c0>
+801032e3:	0f b6 83 06 00 00 80 	movzbl -0x7ffffffa(%ebx),%eax
+801032ea:	3c 01                	cmp    $0x1,%al
+801032ec:	74 08                	je     801032f6 <mpinit+0x96>
+801032ee:	3c 04                	cmp    $0x4,%al
+801032f0:	0f 85 2a 01 00 00    	jne    80103420 <mpinit+0x1c0>
   if(sum((uchar*)conf, conf->length) != 0)
-80103286:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
+801032f6:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
   for(i=0; i<len; i++)
-8010328d:	66 85 d2             	test   %dx,%dx
-80103290:	74 26                	je     801032b8 <mpinit+0xc8>
-80103292:	8d 3c 1a             	lea    (%edx,%ebx,1),%edi
-80103295:	89 d8                	mov    %ebx,%eax
+801032fd:	66 85 d2             	test   %dx,%dx
+80103300:	74 26                	je     80103328 <mpinit+0xc8>
+80103302:	8d 3c 1a             	lea    (%edx,%ebx,1),%edi
+80103305:	89 d8                	mov    %ebx,%eax
   sum = 0;
-80103297:	31 d2                	xor    %edx,%edx
-80103299:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103307:	31 d2                	xor    %edx,%edx
+80103309:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     sum += addr[i];
-801032a0:	0f b6 88 00 00 00 80 	movzbl -0x80000000(%eax),%ecx
-801032a7:	83 c0 01             	add    $0x1,%eax
-801032aa:	01 ca                	add    %ecx,%edx
+80103310:	0f b6 88 00 00 00 80 	movzbl -0x80000000(%eax),%ecx
+80103317:	83 c0 01             	add    $0x1,%eax
+8010331a:	01 ca                	add    %ecx,%edx
   for(i=0; i<len; i++)
-801032ac:	39 f8                	cmp    %edi,%eax
-801032ae:	75 f0                	jne    801032a0 <mpinit+0xb0>
+8010331c:	39 f8                	cmp    %edi,%eax
+8010331e:	75 f0                	jne    80103310 <mpinit+0xb0>
   if(sum((uchar*)conf, conf->length) != 0)
-801032b0:	84 d2                	test   %dl,%dl
-801032b2:	0f 85 f8 00 00 00    	jne    801033b0 <mpinit+0x1c0>
+80103320:	84 d2                	test   %dl,%dl
+80103322:	0f 85 f8 00 00 00    	jne    80103420 <mpinit+0x1c0>
   struct mpioapic *ioapic;
 
   if((conf = mpconfig(&mp)) == 0)
     panic("Expect to run on an SMP");
   ismp = 1;
   lapic = (uint*)conf->lapicaddr;
-801032b8:	8b 83 24 00 00 80    	mov    -0x7fffffdc(%ebx),%eax
-801032be:	a3 7c 26 11 80       	mov    %eax,0x8011267c
+80103328:	8b 83 24 00 00 80    	mov    -0x7fffffdc(%ebx),%eax
+8010332e:	a3 9c 36 11 80       	mov    %eax,0x8011369c
   for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
-801032c3:	8d 83 2c 00 00 80    	lea    -0x7fffffd4(%ebx),%eax
-801032c9:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
+80103333:	8d 83 2c 00 00 80    	lea    -0x7fffffd4(%ebx),%eax
+80103339:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
   ismp = 1;
-801032d0:	bb 01 00 00 00       	mov    $0x1,%ebx
+80103340:	bb 01 00 00 00       	mov    $0x1,%ebx
   for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
-801032d5:	03 55 e4             	add    -0x1c(%ebp),%edx
-801032d8:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
-801032db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801032df:	90                   	nop
-801032e0:	39 c2                	cmp    %eax,%edx
-801032e2:	76 15                	jbe    801032f9 <mpinit+0x109>
+80103345:	03 55 e4             	add    -0x1c(%ebp),%edx
+80103348:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
+8010334b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010334f:	90                   	nop
+80103350:	39 c2                	cmp    %eax,%edx
+80103352:	76 15                	jbe    80103369 <mpinit+0x109>
     switch(*p){
-801032e4:	0f b6 08             	movzbl (%eax),%ecx
-801032e7:	80 f9 02             	cmp    $0x2,%cl
-801032ea:	74 5c                	je     80103348 <mpinit+0x158>
-801032ec:	77 42                	ja     80103330 <mpinit+0x140>
-801032ee:	84 c9                	test   %cl,%cl
-801032f0:	74 6e                	je     80103360 <mpinit+0x170>
+80103354:	0f b6 08             	movzbl (%eax),%ecx
+80103357:	80 f9 02             	cmp    $0x2,%cl
+8010335a:	74 5c                	je     801033b8 <mpinit+0x158>
+8010335c:	77 42                	ja     801033a0 <mpinit+0x140>
+8010335e:	84 c9                	test   %cl,%cl
+80103360:	74 6e                	je     801033d0 <mpinit+0x170>
       p += sizeof(struct mpioapic);
       continue;
     case MPBUS:
     case MPIOINTR:
     case MPLINTR:
       p += 8;
-801032f2:	83 c0 08             	add    $0x8,%eax
+80103362:	83 c0 08             	add    $0x8,%eax
   for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
-801032f5:	39 c2                	cmp    %eax,%edx
-801032f7:	77 eb                	ja     801032e4 <mpinit+0xf4>
-801032f9:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80103365:	39 c2                	cmp    %eax,%edx
+80103367:	77 eb                	ja     80103354 <mpinit+0xf4>
+80103369:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
     default:
       ismp = 0;
       break;
     }
   }
   if(!ismp)
-801032fc:	85 db                	test   %ebx,%ebx
-801032fe:	0f 84 b9 00 00 00    	je     801033bd <mpinit+0x1cd>
+8010336c:	85 db                	test   %ebx,%ebx
+8010336e:	0f 84 b9 00 00 00    	je     8010342d <mpinit+0x1cd>
     panic("Didn't find a suitable machine");
 
   if(mp->imcrp){
-80103304:	80 7e 0c 00          	cmpb   $0x0,0xc(%esi)
-80103308:	74 15                	je     8010331f <mpinit+0x12f>
+80103374:	80 7e 0c 00          	cmpb   $0x0,0xc(%esi)
+80103378:	74 15                	je     8010338f <mpinit+0x12f>
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-8010330a:	b8 70 00 00 00       	mov    $0x70,%eax
-8010330f:	ba 22 00 00 00       	mov    $0x22,%edx
-80103314:	ee                   	out    %al,(%dx)
+8010337a:	b8 70 00 00 00       	mov    $0x70,%eax
+8010337f:	ba 22 00 00 00       	mov    $0x22,%edx
+80103384:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80103315:	ba 23 00 00 00       	mov    $0x23,%edx
-8010331a:	ec                   	in     (%dx),%al
+80103385:	ba 23 00 00 00       	mov    $0x23,%edx
+8010338a:	ec                   	in     (%dx),%al
     // Bochs doesn't support IMCR, so this doesn't run on Bochs.
     // But it would on real hardware.
     outb(0x22, 0x70);   // Select IMCR
     outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
-8010331b:	83 c8 01             	or     $0x1,%eax
+8010338b:	83 c8 01             	or     $0x1,%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-8010331e:	ee                   	out    %al,(%dx)
+8010338e:	ee                   	out    %al,(%dx)
   }
 }
-8010331f:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103322:	5b                   	pop    %ebx
-80103323:	5e                   	pop    %esi
-80103324:	5f                   	pop    %edi
-80103325:	5d                   	pop    %ebp
-80103326:	c3                   	ret    
-80103327:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010332e:	66 90                	xchg   %ax,%ax
+8010338f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103392:	5b                   	pop    %ebx
+80103393:	5e                   	pop    %esi
+80103394:	5f                   	pop    %edi
+80103395:	5d                   	pop    %ebp
+80103396:	c3                   	ret    
+80103397:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010339e:	66 90                	xchg   %ax,%ax
     switch(*p){
-80103330:	83 e9 03             	sub    $0x3,%ecx
-80103333:	80 f9 01             	cmp    $0x1,%cl
-80103336:	76 ba                	jbe    801032f2 <mpinit+0x102>
-80103338:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-8010333f:	eb 9f                	jmp    801032e0 <mpinit+0xf0>
-80103341:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801033a0:	83 e9 03             	sub    $0x3,%ecx
+801033a3:	80 f9 01             	cmp    $0x1,%cl
+801033a6:	76 ba                	jbe    80103362 <mpinit+0x102>
+801033a8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+801033af:	eb 9f                	jmp    80103350 <mpinit+0xf0>
+801033b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       ioapicid = ioapic->apicno;
-80103348:	0f b6 48 01          	movzbl 0x1(%eax),%ecx
+801033b8:	0f b6 48 01          	movzbl 0x1(%eax),%ecx
       p += sizeof(struct mpioapic);
-8010334c:	83 c0 08             	add    $0x8,%eax
+801033bc:	83 c0 08             	add    $0x8,%eax
       ioapicid = ioapic->apicno;
-8010334f:	88 0d 60 27 11 80    	mov    %cl,0x80112760
+801033bf:	88 0d 80 37 11 80    	mov    %cl,0x80113780
       continue;
-80103355:	eb 89                	jmp    801032e0 <mpinit+0xf0>
-80103357:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010335e:	66 90                	xchg   %ax,%ax
+801033c5:	eb 89                	jmp    80103350 <mpinit+0xf0>
+801033c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801033ce:	66 90                	xchg   %ax,%ax
       if(ncpu < NCPU) {
-80103360:	8b 0d 00 2d 11 80    	mov    0x80112d00,%ecx
-80103366:	83 f9 07             	cmp    $0x7,%ecx
-80103369:	7f 19                	jg     80103384 <mpinit+0x194>
+801033d0:	8b 0d 50 38 11 80    	mov    0x80113850,%ecx
+801033d6:	85 c9                	test   %ecx,%ecx
+801033d8:	7f 19                	jg     801033f3 <mpinit+0x193>
         cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
-8010336b:	69 f9 b0 00 00 00    	imul   $0xb0,%ecx,%edi
-80103371:	0f b6 58 01          	movzbl 0x1(%eax),%ebx
+801033da:	69 f9 b0 00 00 00    	imul   $0xb0,%ecx,%edi
+801033e0:	0f b6 58 01          	movzbl 0x1(%eax),%ebx
         ncpu++;
-80103375:	83 c1 01             	add    $0x1,%ecx
-80103378:	89 0d 00 2d 11 80    	mov    %ecx,0x80112d00
+801033e4:	83 c1 01             	add    $0x1,%ecx
+801033e7:	89 0d 50 38 11 80    	mov    %ecx,0x80113850
         cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
-8010337e:	88 9f 80 27 11 80    	mov    %bl,-0x7feed880(%edi)
+801033ed:	88 9f a0 37 11 80    	mov    %bl,-0x7feec860(%edi)
       p += sizeof(struct mpproc);
-80103384:	83 c0 14             	add    $0x14,%eax
+801033f3:	83 c0 14             	add    $0x14,%eax
       continue;
-80103387:	e9 54 ff ff ff       	jmp    801032e0 <mpinit+0xf0>
-8010338c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801033f6:	e9 55 ff ff ff       	jmp    80103350 <mpinit+0xf0>
+801033fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801033ff:	90                   	nop
   return mpsearch1(0xF0000, 0x10000);
-80103390:	ba 00 00 01 00       	mov    $0x10000,%edx
-80103395:	b8 00 00 0f 00       	mov    $0xf0000,%eax
-8010339a:	e8 d1 fd ff ff       	call   80103170 <mpsearch1>
-8010339f:	89 c6                	mov    %eax,%esi
+80103400:	ba 00 00 01 00       	mov    $0x10000,%edx
+80103405:	b8 00 00 0f 00       	mov    $0xf0000,%eax
+8010340a:	e8 d1 fd ff ff       	call   801031e0 <mpsearch1>
+8010340f:	89 c6                	mov    %eax,%esi
   if((mp = mpsearch()) == 0 || mp->physaddr == 0)
-801033a1:	85 c0                	test   %eax,%eax
-801033a3:	0f 85 9b fe ff ff    	jne    80103244 <mpinit+0x54>
-801033a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103411:	85 c0                	test   %eax,%eax
+80103413:	0f 85 9b fe ff ff    	jne    801032b4 <mpinit+0x54>
+80103419:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     panic("Expect to run on an SMP");
-801033b0:	83 ec 0c             	sub    $0xc,%esp
-801033b3:	68 e2 75 10 80       	push   $0x801075e2
-801033b8:	e8 d3 cf ff ff       	call   80100390 <panic>
+80103420:	83 ec 0c             	sub    $0xc,%esp
+80103423:	68 62 83 10 80       	push   $0x80108362
+80103428:	e8 63 cf ff ff       	call   80100390 <panic>
     panic("Didn't find a suitable machine");
-801033bd:	83 ec 0c             	sub    $0xc,%esp
-801033c0:	68 fc 75 10 80       	push   $0x801075fc
-801033c5:	e8 c6 cf ff ff       	call   80100390 <panic>
-801033ca:	66 90                	xchg   %ax,%ax
-801033cc:	66 90                	xchg   %ax,%ax
-801033ce:	66 90                	xchg   %ax,%ax
+8010342d:	83 ec 0c             	sub    $0xc,%esp
+80103430:	68 7c 83 10 80       	push   $0x8010837c
+80103435:	e8 56 cf ff ff       	call   80100390 <panic>
+8010343a:	66 90                	xchg   %ax,%ax
+8010343c:	66 90                	xchg   %ax,%ax
+8010343e:	66 90                	xchg   %ax,%ax
+
+80103440 <picinit>:
+80103440:	f3 0f 1e fb          	endbr32 
+80103444:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103449:	ba 21 00 00 00       	mov    $0x21,%edx
+8010344e:	ee                   	out    %al,(%dx)
+8010344f:	ba a1 00 00 00       	mov    $0xa1,%edx
+80103454:	ee                   	out    %al,(%dx)
+80103455:	c3                   	ret    
+80103456:	66 90                	xchg   %ax,%ax
+80103458:	66 90                	xchg   %ax,%ax
+8010345a:	66 90                	xchg   %ax,%ax
+8010345c:	66 90                	xchg   %ax,%ax
+8010345e:	66 90                	xchg   %ax,%ax
 
-801033d0 <picinit>:
-#define IO_PIC2         0xA0    // Slave (IRQs 8-15)
-
-// Don't use the 8259A interrupt controllers.  Xv6 assumes SMP hardware.
-void
-picinit(void)
-{
-801033d0:	f3 0f 1e fb          	endbr32 
-801033d4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801033d9:	ba 21 00 00 00       	mov    $0x21,%edx
-801033de:	ee                   	out    %al,(%dx)
-801033df:	ba a1 00 00 00       	mov    $0xa1,%edx
-801033e4:	ee                   	out    %al,(%dx)
-  // mask all interrupts
-  outb(IO_PIC1+1, 0xFF);
-  outb(IO_PIC2+1, 0xFF);
-}
-801033e5:	c3                   	ret    
-801033e6:	66 90                	xchg   %ax,%ax
-801033e8:	66 90                	xchg   %ax,%ax
-801033ea:	66 90                	xchg   %ax,%ax
-801033ec:	66 90                	xchg   %ax,%ax
-801033ee:	66 90                	xchg   %ax,%ax
-
-801033f0 <pipealloc>:
+80103460 <pipealloc>:
   int writeopen;  // write fd is still open
 };
 
 int
 pipealloc(struct file **f0, struct file **f1)
 {
-801033f0:	f3 0f 1e fb          	endbr32 
-801033f4:	55                   	push   %ebp
-801033f5:	89 e5                	mov    %esp,%ebp
-801033f7:	57                   	push   %edi
-801033f8:	56                   	push   %esi
-801033f9:	53                   	push   %ebx
-801033fa:	83 ec 0c             	sub    $0xc,%esp
-801033fd:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80103400:	8b 75 0c             	mov    0xc(%ebp),%esi
+80103460:	f3 0f 1e fb          	endbr32 
+80103464:	55                   	push   %ebp
+80103465:	89 e5                	mov    %esp,%ebp
+80103467:	57                   	push   %edi
+80103468:	56                   	push   %esi
+80103469:	53                   	push   %ebx
+8010346a:	83 ec 0c             	sub    $0xc,%esp
+8010346d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80103470:	8b 75 0c             	mov    0xc(%ebp),%esi
   struct pipe *p;
 
   p = 0;
   *f0 = *f1 = 0;
-80103403:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
-80103409:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80103473:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+80103479:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
-8010340f:	e8 ec d9 ff ff       	call   80100e00 <filealloc>
-80103414:	89 03                	mov    %eax,(%ebx)
-80103416:	85 c0                	test   %eax,%eax
-80103418:	0f 84 ac 00 00 00    	je     801034ca <pipealloc+0xda>
-8010341e:	e8 dd d9 ff ff       	call   80100e00 <filealloc>
-80103423:	89 06                	mov    %eax,(%esi)
-80103425:	85 c0                	test   %eax,%eax
-80103427:	0f 84 8b 00 00 00    	je     801034b8 <pipealloc+0xc8>
+8010347f:	e8 7c d9 ff ff       	call   80100e00 <filealloc>
+80103484:	89 03                	mov    %eax,(%ebx)
+80103486:	85 c0                	test   %eax,%eax
+80103488:	0f 84 ac 00 00 00    	je     8010353a <pipealloc+0xda>
+8010348e:	e8 6d d9 ff ff       	call   80100e00 <filealloc>
+80103493:	89 06                	mov    %eax,(%esi)
+80103495:	85 c0                	test   %eax,%eax
+80103497:	0f 84 8b 00 00 00    	je     80103528 <pipealloc+0xc8>
     goto bad;
   if((p = (struct pipe*)kalloc()) == 0)
-8010342d:	e8 fe f1 ff ff       	call   80102630 <kalloc>
-80103432:	89 c7                	mov    %eax,%edi
-80103434:	85 c0                	test   %eax,%eax
-80103436:	0f 84 b4 00 00 00    	je     801034f0 <pipealloc+0x100>
+8010349d:	e8 fe f1 ff ff       	call   801026a0 <kalloc>
+801034a2:	89 c7                	mov    %eax,%edi
+801034a4:	85 c0                	test   %eax,%eax
+801034a6:	0f 84 b4 00 00 00    	je     80103560 <pipealloc+0x100>
     goto bad;
   p->readopen = 1;
-8010343c:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
-80103443:	00 00 00 
+801034ac:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
+801034b3:	00 00 00 
   p->writeopen = 1;
   p->nwrite = 0;
   p->nread = 0;
   initlock(&p->lock, "pipe");
-80103446:	83 ec 08             	sub    $0x8,%esp
+801034b6:	83 ec 08             	sub    $0x8,%esp
   p->writeopen = 1;
-80103449:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
-80103450:	00 00 00 
+801034b9:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
+801034c0:	00 00 00 
   p->nwrite = 0;
-80103453:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
-8010345a:	00 00 00 
+801034c3:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
+801034ca:	00 00 00 
   p->nread = 0;
-8010345d:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
-80103464:	00 00 00 
+801034cd:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
+801034d4:	00 00 00 
   initlock(&p->lock, "pipe");
-80103467:	68 1b 76 10 80       	push   $0x8010761b
-8010346c:	50                   	push   %eax
-8010346d:	e8 6e 0f 00 00       	call   801043e0 <initlock>
+801034d7:	68 9b 83 10 80       	push   $0x8010839b
+801034dc:	50                   	push   %eax
+801034dd:	e8 4e 1b 00 00       	call   80105030 <initlock>
   (*f0)->type = FD_PIPE;
-80103472:	8b 03                	mov    (%ebx),%eax
+801034e2:	8b 03                	mov    (%ebx),%eax
   (*f0)->pipe = p;
   (*f1)->type = FD_PIPE;
   (*f1)->readable = 0;
   (*f1)->writable = 1;
   (*f1)->pipe = p;
   return 0;
-80103474:	83 c4 10             	add    $0x10,%esp
+801034e4:	83 c4 10             	add    $0x10,%esp
   (*f0)->type = FD_PIPE;
-80103477:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+801034e7:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
   (*f0)->readable = 1;
-8010347d:	8b 03                	mov    (%ebx),%eax
-8010347f:	c6 40 08 01          	movb   $0x1,0x8(%eax)
+801034ed:	8b 03                	mov    (%ebx),%eax
+801034ef:	c6 40 08 01          	movb   $0x1,0x8(%eax)
   (*f0)->writable = 0;
-80103483:	8b 03                	mov    (%ebx),%eax
-80103485:	c6 40 09 00          	movb   $0x0,0x9(%eax)
+801034f3:	8b 03                	mov    (%ebx),%eax
+801034f5:	c6 40 09 00          	movb   $0x0,0x9(%eax)
   (*f0)->pipe = p;
-80103489:	8b 03                	mov    (%ebx),%eax
-8010348b:	89 78 0c             	mov    %edi,0xc(%eax)
+801034f9:	8b 03                	mov    (%ebx),%eax
+801034fb:	89 78 0c             	mov    %edi,0xc(%eax)
   (*f1)->type = FD_PIPE;
-8010348e:	8b 06                	mov    (%esi),%eax
-80103490:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+801034fe:	8b 06                	mov    (%esi),%eax
+80103500:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
   (*f1)->readable = 0;
-80103496:	8b 06                	mov    (%esi),%eax
-80103498:	c6 40 08 00          	movb   $0x0,0x8(%eax)
+80103506:	8b 06                	mov    (%esi),%eax
+80103508:	c6 40 08 00          	movb   $0x0,0x8(%eax)
   (*f1)->writable = 1;
-8010349c:	8b 06                	mov    (%esi),%eax
-8010349e:	c6 40 09 01          	movb   $0x1,0x9(%eax)
+8010350c:	8b 06                	mov    (%esi),%eax
+8010350e:	c6 40 09 01          	movb   $0x1,0x9(%eax)
   (*f1)->pipe = p;
-801034a2:	8b 06                	mov    (%esi),%eax
-801034a4:	89 78 0c             	mov    %edi,0xc(%eax)
+80103512:	8b 06                	mov    (%esi),%eax
+80103514:	89 78 0c             	mov    %edi,0xc(%eax)
   if(*f0)
     fileclose(*f0);
   if(*f1)
     fileclose(*f1);
   return -1;
 }
-801034a7:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103517:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-801034aa:	31 c0                	xor    %eax,%eax
+8010351a:	31 c0                	xor    %eax,%eax
 }
-801034ac:	5b                   	pop    %ebx
-801034ad:	5e                   	pop    %esi
-801034ae:	5f                   	pop    %edi
-801034af:	5d                   	pop    %ebp
-801034b0:	c3                   	ret    
-801034b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010351c:	5b                   	pop    %ebx
+8010351d:	5e                   	pop    %esi
+8010351e:	5f                   	pop    %edi
+8010351f:	5d                   	pop    %ebp
+80103520:	c3                   	ret    
+80103521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   if(*f0)
-801034b8:	8b 03                	mov    (%ebx),%eax
-801034ba:	85 c0                	test   %eax,%eax
-801034bc:	74 1e                	je     801034dc <pipealloc+0xec>
+80103528:	8b 03                	mov    (%ebx),%eax
+8010352a:	85 c0                	test   %eax,%eax
+8010352c:	74 1e                	je     8010354c <pipealloc+0xec>
     fileclose(*f0);
-801034be:	83 ec 0c             	sub    $0xc,%esp
-801034c1:	50                   	push   %eax
-801034c2:	e8 f9 d9 ff ff       	call   80100ec0 <fileclose>
-801034c7:	83 c4 10             	add    $0x10,%esp
+8010352e:	83 ec 0c             	sub    $0xc,%esp
+80103531:	50                   	push   %eax
+80103532:	e8 89 d9 ff ff       	call   80100ec0 <fileclose>
+80103537:	83 c4 10             	add    $0x10,%esp
   if(*f1)
-801034ca:	8b 06                	mov    (%esi),%eax
-801034cc:	85 c0                	test   %eax,%eax
-801034ce:	74 0c                	je     801034dc <pipealloc+0xec>
+8010353a:	8b 06                	mov    (%esi),%eax
+8010353c:	85 c0                	test   %eax,%eax
+8010353e:	74 0c                	je     8010354c <pipealloc+0xec>
     fileclose(*f1);
-801034d0:	83 ec 0c             	sub    $0xc,%esp
-801034d3:	50                   	push   %eax
-801034d4:	e8 e7 d9 ff ff       	call   80100ec0 <fileclose>
-801034d9:	83 c4 10             	add    $0x10,%esp
+80103540:	83 ec 0c             	sub    $0xc,%esp
+80103543:	50                   	push   %eax
+80103544:	e8 77 d9 ff ff       	call   80100ec0 <fileclose>
+80103549:	83 c4 10             	add    $0x10,%esp
 }
-801034dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010354c:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return -1;
-801034df:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010354f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801034e4:	5b                   	pop    %ebx
-801034e5:	5e                   	pop    %esi
-801034e6:	5f                   	pop    %edi
-801034e7:	5d                   	pop    %ebp
-801034e8:	c3                   	ret    
-801034e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103554:	5b                   	pop    %ebx
+80103555:	5e                   	pop    %esi
+80103556:	5f                   	pop    %edi
+80103557:	5d                   	pop    %ebp
+80103558:	c3                   	ret    
+80103559:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   if(*f0)
-801034f0:	8b 03                	mov    (%ebx),%eax
-801034f2:	85 c0                	test   %eax,%eax
-801034f4:	75 c8                	jne    801034be <pipealloc+0xce>
-801034f6:	eb d2                	jmp    801034ca <pipealloc+0xda>
-801034f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801034ff:	90                   	nop
+80103560:	8b 03                	mov    (%ebx),%eax
+80103562:	85 c0                	test   %eax,%eax
+80103564:	75 c8                	jne    8010352e <pipealloc+0xce>
+80103566:	eb d2                	jmp    8010353a <pipealloc+0xda>
+80103568:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010356f:	90                   	nop
 
-80103500 <pipeclose>:
+80103570 <pipeclose>:
 
 void
 pipeclose(struct pipe *p, int writable)
 {
-80103500:	f3 0f 1e fb          	endbr32 
-80103504:	55                   	push   %ebp
-80103505:	89 e5                	mov    %esp,%ebp
-80103507:	56                   	push   %esi
-80103508:	53                   	push   %ebx
-80103509:	8b 5d 08             	mov    0x8(%ebp),%ebx
-8010350c:	8b 75 0c             	mov    0xc(%ebp),%esi
+80103570:	f3 0f 1e fb          	endbr32 
+80103574:	55                   	push   %ebp
+80103575:	89 e5                	mov    %esp,%ebp
+80103577:	56                   	push   %esi
+80103578:	53                   	push   %ebx
+80103579:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010357c:	8b 75 0c             	mov    0xc(%ebp),%esi
   acquire(&p->lock);
-8010350f:	83 ec 0c             	sub    $0xc,%esp
-80103512:	53                   	push   %ebx
-80103513:	e8 48 10 00 00       	call   80104560 <acquire>
+8010357f:	83 ec 0c             	sub    $0xc,%esp
+80103582:	53                   	push   %ebx
+80103583:	e8 28 1c 00 00       	call   801051b0 <acquire>
   if(writable){
-80103518:	83 c4 10             	add    $0x10,%esp
-8010351b:	85 f6                	test   %esi,%esi
-8010351d:	74 41                	je     80103560 <pipeclose+0x60>
+80103588:	83 c4 10             	add    $0x10,%esp
+8010358b:	85 f6                	test   %esi,%esi
+8010358d:	74 41                	je     801035d0 <pipeclose+0x60>
     p->writeopen = 0;
     wakeup(&p->nread);
-8010351f:	83 ec 0c             	sub    $0xc,%esp
-80103522:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
+8010358f:	83 ec 0c             	sub    $0xc,%esp
+80103592:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
     p->writeopen = 0;
-80103528:	c7 83 40 02 00 00 00 	movl   $0x0,0x240(%ebx)
-8010352f:	00 00 00 
+80103598:	c7 83 40 02 00 00 00 	movl   $0x0,0x240(%ebx)
+8010359f:	00 00 00 
     wakeup(&p->nread);
-80103532:	50                   	push   %eax
-80103533:	e8 a8 0b 00 00       	call   801040e0 <wakeup>
-80103538:	83 c4 10             	add    $0x10,%esp
+801035a2:	50                   	push   %eax
+801035a3:	e8 a8 15 00 00       	call   80104b50 <wakeup>
+801035a8:	83 c4 10             	add    $0x10,%esp
   } else {
     p->readopen = 0;
     wakeup(&p->nwrite);
   }
   if(p->readopen == 0 && p->writeopen == 0){
-8010353b:	8b 93 3c 02 00 00    	mov    0x23c(%ebx),%edx
-80103541:	85 d2                	test   %edx,%edx
-80103543:	75 0a                	jne    8010354f <pipeclose+0x4f>
-80103545:	8b 83 40 02 00 00    	mov    0x240(%ebx),%eax
-8010354b:	85 c0                	test   %eax,%eax
-8010354d:	74 31                	je     80103580 <pipeclose+0x80>
+801035ab:	8b 93 3c 02 00 00    	mov    0x23c(%ebx),%edx
+801035b1:	85 d2                	test   %edx,%edx
+801035b3:	75 0a                	jne    801035bf <pipeclose+0x4f>
+801035b5:	8b 83 40 02 00 00    	mov    0x240(%ebx),%eax
+801035bb:	85 c0                	test   %eax,%eax
+801035bd:	74 31                	je     801035f0 <pipeclose+0x80>
     release(&p->lock);
     kfree((char*)p);
   } else
     release(&p->lock);
-8010354f:	89 5d 08             	mov    %ebx,0x8(%ebp)
+801035bf:	89 5d 08             	mov    %ebx,0x8(%ebp)
 }
-80103552:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103555:	5b                   	pop    %ebx
-80103556:	5e                   	pop    %esi
-80103557:	5d                   	pop    %ebp
+801035c2:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801035c5:	5b                   	pop    %ebx
+801035c6:	5e                   	pop    %esi
+801035c7:	5d                   	pop    %ebp
     release(&p->lock);
-80103558:	e9 c3 10 00 00       	jmp    80104620 <release>
-8010355d:	8d 76 00             	lea    0x0(%esi),%esi
+801035c8:	e9 a3 1c 00 00       	jmp    80105270 <release>
+801035cd:	8d 76 00             	lea    0x0(%esi),%esi
     wakeup(&p->nwrite);
-80103560:	83 ec 0c             	sub    $0xc,%esp
-80103563:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
+801035d0:	83 ec 0c             	sub    $0xc,%esp
+801035d3:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
     p->readopen = 0;
-80103569:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%ebx)
-80103570:	00 00 00 
+801035d9:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%ebx)
+801035e0:	00 00 00 
     wakeup(&p->nwrite);
-80103573:	50                   	push   %eax
-80103574:	e8 67 0b 00 00       	call   801040e0 <wakeup>
-80103579:	83 c4 10             	add    $0x10,%esp
-8010357c:	eb bd                	jmp    8010353b <pipeclose+0x3b>
-8010357e:	66 90                	xchg   %ax,%ax
+801035e3:	50                   	push   %eax
+801035e4:	e8 67 15 00 00       	call   80104b50 <wakeup>
+801035e9:	83 c4 10             	add    $0x10,%esp
+801035ec:	eb bd                	jmp    801035ab <pipeclose+0x3b>
+801035ee:	66 90                	xchg   %ax,%ax
     release(&p->lock);
-80103580:	83 ec 0c             	sub    $0xc,%esp
-80103583:	53                   	push   %ebx
-80103584:	e8 97 10 00 00       	call   80104620 <release>
+801035f0:	83 ec 0c             	sub    $0xc,%esp
+801035f3:	53                   	push   %ebx
+801035f4:	e8 77 1c 00 00       	call   80105270 <release>
     kfree((char*)p);
-80103589:	89 5d 08             	mov    %ebx,0x8(%ebp)
-8010358c:	83 c4 10             	add    $0x10,%esp
+801035f9:	89 5d 08             	mov    %ebx,0x8(%ebp)
+801035fc:	83 c4 10             	add    $0x10,%esp
 }
-8010358f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103592:	5b                   	pop    %ebx
-80103593:	5e                   	pop    %esi
-80103594:	5d                   	pop    %ebp
+801035ff:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103602:	5b                   	pop    %ebx
+80103603:	5e                   	pop    %esi
+80103604:	5d                   	pop    %ebp
     kfree((char*)p);
-80103595:	e9 d6 ee ff ff       	jmp    80102470 <kfree>
-8010359a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103605:	e9 66 ee ff ff       	jmp    80102470 <kfree>
+8010360a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801035a0 <pipewrite>:
+80103610 <pipewrite>:
 
 //PAGEBREAK: 40
 int
 pipewrite(struct pipe *p, char *addr, int n)
 {
-801035a0:	f3 0f 1e fb          	endbr32 
-801035a4:	55                   	push   %ebp
-801035a5:	89 e5                	mov    %esp,%ebp
-801035a7:	57                   	push   %edi
-801035a8:	56                   	push   %esi
-801035a9:	53                   	push   %ebx
-801035aa:	83 ec 28             	sub    $0x28,%esp
-801035ad:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80103610:	f3 0f 1e fb          	endbr32 
+80103614:	55                   	push   %ebp
+80103615:	89 e5                	mov    %esp,%ebp
+80103617:	57                   	push   %edi
+80103618:	56                   	push   %esi
+80103619:	53                   	push   %ebx
+8010361a:	83 ec 28             	sub    $0x28,%esp
+8010361d:	8b 5d 08             	mov    0x8(%ebp),%ebx
   int i;
 
   acquire(&p->lock);
-801035b0:	53                   	push   %ebx
-801035b1:	e8 aa 0f 00 00       	call   80104560 <acquire>
+80103620:	53                   	push   %ebx
+80103621:	e8 8a 1b 00 00       	call   801051b0 <acquire>
   for(i = 0; i < n; i++){
-801035b6:	8b 45 10             	mov    0x10(%ebp),%eax
-801035b9:	83 c4 10             	add    $0x10,%esp
-801035bc:	85 c0                	test   %eax,%eax
-801035be:	0f 8e bc 00 00 00    	jle    80103680 <pipewrite+0xe0>
-801035c4:	8b 45 0c             	mov    0xc(%ebp),%eax
-801035c7:	8b 8b 38 02 00 00    	mov    0x238(%ebx),%ecx
+80103626:	8b 45 10             	mov    0x10(%ebp),%eax
+80103629:	83 c4 10             	add    $0x10,%esp
+8010362c:	85 c0                	test   %eax,%eax
+8010362e:	0f 8e bc 00 00 00    	jle    801036f0 <pipewrite+0xe0>
+80103634:	8b 45 0c             	mov    0xc(%ebp),%eax
+80103637:	8b 8b 38 02 00 00    	mov    0x238(%ebx),%ecx
     while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
       if(p->readopen == 0 || myproc()->killed){
         release(&p->lock);
         return -1;
       }
       wakeup(&p->nread);
-801035cd:	8d bb 34 02 00 00    	lea    0x234(%ebx),%edi
-801035d3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-801035d6:	03 45 10             	add    0x10(%ebp),%eax
-801035d9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+8010363d:	8d bb 34 02 00 00    	lea    0x234(%ebx),%edi
+80103643:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80103646:	03 45 10             	add    0x10(%ebp),%eax
+80103649:	89 45 e0             	mov    %eax,-0x20(%ebp)
     while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
-801035dc:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
+8010364c:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
       sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
-801035e2:	8d b3 38 02 00 00    	lea    0x238(%ebx),%esi
+80103652:	8d b3 38 02 00 00    	lea    0x238(%ebx),%esi
     while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
-801035e8:	89 ca                	mov    %ecx,%edx
-801035ea:	05 00 02 00 00       	add    $0x200,%eax
-801035ef:	39 c1                	cmp    %eax,%ecx
-801035f1:	74 3b                	je     8010362e <pipewrite+0x8e>
-801035f3:	eb 63                	jmp    80103658 <pipewrite+0xb8>
-801035f5:	8d 76 00             	lea    0x0(%esi),%esi
+80103658:	89 ca                	mov    %ecx,%edx
+8010365a:	05 00 02 00 00       	add    $0x200,%eax
+8010365f:	39 c1                	cmp    %eax,%ecx
+80103661:	74 3b                	je     8010369e <pipewrite+0x8e>
+80103663:	eb 63                	jmp    801036c8 <pipewrite+0xb8>
+80103665:	8d 76 00             	lea    0x0(%esi),%esi
       if(p->readopen == 0 || myproc()->killed){
-801035f8:	e8 63 03 00 00       	call   80103960 <myproc>
-801035fd:	8b 48 24             	mov    0x24(%eax),%ecx
-80103600:	85 c9                	test   %ecx,%ecx
-80103602:	75 34                	jne    80103638 <pipewrite+0x98>
+80103668:	e8 83 09 00 00       	call   80103ff0 <myproc>
+8010366d:	8b 48 24             	mov    0x24(%eax),%ecx
+80103670:	85 c9                	test   %ecx,%ecx
+80103672:	75 34                	jne    801036a8 <pipewrite+0x98>
       wakeup(&p->nread);
-80103604:	83 ec 0c             	sub    $0xc,%esp
-80103607:	57                   	push   %edi
-80103608:	e8 d3 0a 00 00       	call   801040e0 <wakeup>
+80103674:	83 ec 0c             	sub    $0xc,%esp
+80103677:	57                   	push   %edi
+80103678:	e8 d3 14 00 00       	call   80104b50 <wakeup>
       sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
-8010360d:	58                   	pop    %eax
-8010360e:	5a                   	pop    %edx
-8010360f:	53                   	push   %ebx
-80103610:	56                   	push   %esi
-80103611:	e8 0a 09 00 00       	call   80103f20 <sleep>
+8010367d:	58                   	pop    %eax
+8010367e:	5a                   	pop    %edx
+8010367f:	53                   	push   %ebx
+80103680:	56                   	push   %esi
+80103681:	e8 0a 13 00 00       	call   80104990 <sleep>
     while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
-80103616:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
-8010361c:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
-80103622:	83 c4 10             	add    $0x10,%esp
-80103625:	05 00 02 00 00       	add    $0x200,%eax
-8010362a:	39 c2                	cmp    %eax,%edx
-8010362c:	75 2a                	jne    80103658 <pipewrite+0xb8>
+80103686:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
+8010368c:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
+80103692:	83 c4 10             	add    $0x10,%esp
+80103695:	05 00 02 00 00       	add    $0x200,%eax
+8010369a:	39 c2                	cmp    %eax,%edx
+8010369c:	75 2a                	jne    801036c8 <pipewrite+0xb8>
       if(p->readopen == 0 || myproc()->killed){
-8010362e:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
-80103634:	85 c0                	test   %eax,%eax
-80103636:	75 c0                	jne    801035f8 <pipewrite+0x58>
+8010369e:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
+801036a4:	85 c0                	test   %eax,%eax
+801036a6:	75 c0                	jne    80103668 <pipewrite+0x58>
         release(&p->lock);
-80103638:	83 ec 0c             	sub    $0xc,%esp
-8010363b:	53                   	push   %ebx
-8010363c:	e8 df 0f 00 00       	call   80104620 <release>
+801036a8:	83 ec 0c             	sub    $0xc,%esp
+801036ab:	53                   	push   %ebx
+801036ac:	e8 bf 1b 00 00       	call   80105270 <release>
         return -1;
-80103641:	83 c4 10             	add    $0x10,%esp
-80103644:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801036b1:	83 c4 10             	add    $0x10,%esp
+801036b4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
     p->data[p->nwrite++ % PIPESIZE] = addr[i];
   }
   wakeup(&p->nread);  //DOC: pipewrite-wakeup1
   release(&p->lock);
   return n;
 }
-80103649:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010364c:	5b                   	pop    %ebx
-8010364d:	5e                   	pop    %esi
-8010364e:	5f                   	pop    %edi
-8010364f:	5d                   	pop    %ebp
-80103650:	c3                   	ret    
-80103651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801036b9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801036bc:	5b                   	pop    %ebx
+801036bd:	5e                   	pop    %esi
+801036be:	5f                   	pop    %edi
+801036bf:	5d                   	pop    %ebp
+801036c0:	c3                   	ret    
+801036c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     p->data[p->nwrite++ % PIPESIZE] = addr[i];
-80103658:	8b 75 e4             	mov    -0x1c(%ebp),%esi
-8010365b:	8d 4a 01             	lea    0x1(%edx),%ecx
-8010365e:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
-80103664:	89 8b 38 02 00 00    	mov    %ecx,0x238(%ebx)
-8010366a:	0f b6 06             	movzbl (%esi),%eax
-8010366d:	83 c6 01             	add    $0x1,%esi
-80103670:	89 75 e4             	mov    %esi,-0x1c(%ebp)
-80103673:	88 44 13 34          	mov    %al,0x34(%ebx,%edx,1)
+801036c8:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+801036cb:	8d 4a 01             	lea    0x1(%edx),%ecx
+801036ce:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
+801036d4:	89 8b 38 02 00 00    	mov    %ecx,0x238(%ebx)
+801036da:	0f b6 06             	movzbl (%esi),%eax
+801036dd:	83 c6 01             	add    $0x1,%esi
+801036e0:	89 75 e4             	mov    %esi,-0x1c(%ebp)
+801036e3:	88 44 13 34          	mov    %al,0x34(%ebx,%edx,1)
   for(i = 0; i < n; i++){
-80103677:	3b 75 e0             	cmp    -0x20(%ebp),%esi
-8010367a:	0f 85 5c ff ff ff    	jne    801035dc <pipewrite+0x3c>
+801036e7:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+801036ea:	0f 85 5c ff ff ff    	jne    8010364c <pipewrite+0x3c>
   wakeup(&p->nread);  //DOC: pipewrite-wakeup1
-80103680:	83 ec 0c             	sub    $0xc,%esp
-80103683:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
-80103689:	50                   	push   %eax
-8010368a:	e8 51 0a 00 00       	call   801040e0 <wakeup>
+801036f0:	83 ec 0c             	sub    $0xc,%esp
+801036f3:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
+801036f9:	50                   	push   %eax
+801036fa:	e8 51 14 00 00       	call   80104b50 <wakeup>
   release(&p->lock);
-8010368f:	89 1c 24             	mov    %ebx,(%esp)
-80103692:	e8 89 0f 00 00       	call   80104620 <release>
+801036ff:	89 1c 24             	mov    %ebx,(%esp)
+80103702:	e8 69 1b 00 00       	call   80105270 <release>
   return n;
-80103697:	8b 45 10             	mov    0x10(%ebp),%eax
-8010369a:	83 c4 10             	add    $0x10,%esp
-8010369d:	eb aa                	jmp    80103649 <pipewrite+0xa9>
-8010369f:	90                   	nop
+80103707:	8b 45 10             	mov    0x10(%ebp),%eax
+8010370a:	83 c4 10             	add    $0x10,%esp
+8010370d:	eb aa                	jmp    801036b9 <pipewrite+0xa9>
+8010370f:	90                   	nop
 
-801036a0 <piperead>:
+80103710 <piperead>:
 
 int
 piperead(struct pipe *p, char *addr, int n)
 {
-801036a0:	f3 0f 1e fb          	endbr32 
-801036a4:	55                   	push   %ebp
-801036a5:	89 e5                	mov    %esp,%ebp
-801036a7:	57                   	push   %edi
-801036a8:	56                   	push   %esi
-801036a9:	53                   	push   %ebx
-801036aa:	83 ec 18             	sub    $0x18,%esp
-801036ad:	8b 75 08             	mov    0x8(%ebp),%esi
-801036b0:	8b 7d 0c             	mov    0xc(%ebp),%edi
+80103710:	f3 0f 1e fb          	endbr32 
+80103714:	55                   	push   %ebp
+80103715:	89 e5                	mov    %esp,%ebp
+80103717:	57                   	push   %edi
+80103718:	56                   	push   %esi
+80103719:	53                   	push   %ebx
+8010371a:	83 ec 18             	sub    $0x18,%esp
+8010371d:	8b 75 08             	mov    0x8(%ebp),%esi
+80103720:	8b 7d 0c             	mov    0xc(%ebp),%edi
   int i;
 
   acquire(&p->lock);
-801036b3:	56                   	push   %esi
-801036b4:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
-801036ba:	e8 a1 0e 00 00       	call   80104560 <acquire>
+80103723:	56                   	push   %esi
+80103724:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
+8010372a:	e8 81 1a 00 00       	call   801051b0 <acquire>
   while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
-801036bf:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
-801036c5:	83 c4 10             	add    $0x10,%esp
-801036c8:	39 86 38 02 00 00    	cmp    %eax,0x238(%esi)
-801036ce:	74 33                	je     80103703 <piperead+0x63>
-801036d0:	eb 3b                	jmp    8010370d <piperead+0x6d>
-801036d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010372f:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
+80103735:	83 c4 10             	add    $0x10,%esp
+80103738:	39 86 38 02 00 00    	cmp    %eax,0x238(%esi)
+8010373e:	74 33                	je     80103773 <piperead+0x63>
+80103740:	eb 3b                	jmp    8010377d <piperead+0x6d>
+80103742:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(myproc()->killed){
-801036d8:	e8 83 02 00 00       	call   80103960 <myproc>
-801036dd:	8b 48 24             	mov    0x24(%eax),%ecx
-801036e0:	85 c9                	test   %ecx,%ecx
-801036e2:	0f 85 88 00 00 00    	jne    80103770 <piperead+0xd0>
+80103748:	e8 a3 08 00 00       	call   80103ff0 <myproc>
+8010374d:	8b 48 24             	mov    0x24(%eax),%ecx
+80103750:	85 c9                	test   %ecx,%ecx
+80103752:	0f 85 88 00 00 00    	jne    801037e0 <piperead+0xd0>
       release(&p->lock);
       return -1;
     }
     sleep(&p->nread, &p->lock); //DOC: piperead-sleep
-801036e8:	83 ec 08             	sub    $0x8,%esp
-801036eb:	56                   	push   %esi
-801036ec:	53                   	push   %ebx
-801036ed:	e8 2e 08 00 00       	call   80103f20 <sleep>
+80103758:	83 ec 08             	sub    $0x8,%esp
+8010375b:	56                   	push   %esi
+8010375c:	53                   	push   %ebx
+8010375d:	e8 2e 12 00 00       	call   80104990 <sleep>
   while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
-801036f2:	8b 86 38 02 00 00    	mov    0x238(%esi),%eax
-801036f8:	83 c4 10             	add    $0x10,%esp
-801036fb:	39 86 34 02 00 00    	cmp    %eax,0x234(%esi)
-80103701:	75 0a                	jne    8010370d <piperead+0x6d>
-80103703:	8b 86 40 02 00 00    	mov    0x240(%esi),%eax
-80103709:	85 c0                	test   %eax,%eax
-8010370b:	75 cb                	jne    801036d8 <piperead+0x38>
+80103762:	8b 86 38 02 00 00    	mov    0x238(%esi),%eax
+80103768:	83 c4 10             	add    $0x10,%esp
+8010376b:	39 86 34 02 00 00    	cmp    %eax,0x234(%esi)
+80103771:	75 0a                	jne    8010377d <piperead+0x6d>
+80103773:	8b 86 40 02 00 00    	mov    0x240(%esi),%eax
+80103779:	85 c0                	test   %eax,%eax
+8010377b:	75 cb                	jne    80103748 <piperead+0x38>
   }
   for(i = 0; i < n; i++){  //DOC: piperead-copy
-8010370d:	8b 55 10             	mov    0x10(%ebp),%edx
-80103710:	31 db                	xor    %ebx,%ebx
-80103712:	85 d2                	test   %edx,%edx
-80103714:	7f 28                	jg     8010373e <piperead+0x9e>
-80103716:	eb 34                	jmp    8010374c <piperead+0xac>
-80103718:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010371f:	90                   	nop
+8010377d:	8b 55 10             	mov    0x10(%ebp),%edx
+80103780:	31 db                	xor    %ebx,%ebx
+80103782:	85 d2                	test   %edx,%edx
+80103784:	7f 28                	jg     801037ae <piperead+0x9e>
+80103786:	eb 34                	jmp    801037bc <piperead+0xac>
+80103788:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010378f:	90                   	nop
     if(p->nread == p->nwrite)
       break;
     addr[i] = p->data[p->nread++ % PIPESIZE];
-80103720:	8d 48 01             	lea    0x1(%eax),%ecx
-80103723:	25 ff 01 00 00       	and    $0x1ff,%eax
-80103728:	89 8e 34 02 00 00    	mov    %ecx,0x234(%esi)
-8010372e:	0f b6 44 06 34       	movzbl 0x34(%esi,%eax,1),%eax
-80103733:	88 04 1f             	mov    %al,(%edi,%ebx,1)
+80103790:	8d 48 01             	lea    0x1(%eax),%ecx
+80103793:	25 ff 01 00 00       	and    $0x1ff,%eax
+80103798:	89 8e 34 02 00 00    	mov    %ecx,0x234(%esi)
+8010379e:	0f b6 44 06 34       	movzbl 0x34(%esi,%eax,1),%eax
+801037a3:	88 04 1f             	mov    %al,(%edi,%ebx,1)
   for(i = 0; i < n; i++){  //DOC: piperead-copy
-80103736:	83 c3 01             	add    $0x1,%ebx
-80103739:	39 5d 10             	cmp    %ebx,0x10(%ebp)
-8010373c:	74 0e                	je     8010374c <piperead+0xac>
+801037a6:	83 c3 01             	add    $0x1,%ebx
+801037a9:	39 5d 10             	cmp    %ebx,0x10(%ebp)
+801037ac:	74 0e                	je     801037bc <piperead+0xac>
     if(p->nread == p->nwrite)
-8010373e:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
-80103744:	3b 86 38 02 00 00    	cmp    0x238(%esi),%eax
-8010374a:	75 d4                	jne    80103720 <piperead+0x80>
+801037ae:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
+801037b4:	3b 86 38 02 00 00    	cmp    0x238(%esi),%eax
+801037ba:	75 d4                	jne    80103790 <piperead+0x80>
   }
   wakeup(&p->nwrite);  //DOC: piperead-wakeup
-8010374c:	83 ec 0c             	sub    $0xc,%esp
-8010374f:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
-80103755:	50                   	push   %eax
-80103756:	e8 85 09 00 00       	call   801040e0 <wakeup>
+801037bc:	83 ec 0c             	sub    $0xc,%esp
+801037bf:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
+801037c5:	50                   	push   %eax
+801037c6:	e8 85 13 00 00       	call   80104b50 <wakeup>
   release(&p->lock);
-8010375b:	89 34 24             	mov    %esi,(%esp)
-8010375e:	e8 bd 0e 00 00       	call   80104620 <release>
+801037cb:	89 34 24             	mov    %esi,(%esp)
+801037ce:	e8 9d 1a 00 00       	call   80105270 <release>
   return i;
-80103763:	83 c4 10             	add    $0x10,%esp
+801037d3:	83 c4 10             	add    $0x10,%esp
 }
-80103766:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103769:	89 d8                	mov    %ebx,%eax
-8010376b:	5b                   	pop    %ebx
-8010376c:	5e                   	pop    %esi
-8010376d:	5f                   	pop    %edi
-8010376e:	5d                   	pop    %ebp
-8010376f:	c3                   	ret    
+801037d6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801037d9:	89 d8                	mov    %ebx,%eax
+801037db:	5b                   	pop    %ebx
+801037dc:	5e                   	pop    %esi
+801037dd:	5f                   	pop    %edi
+801037de:	5d                   	pop    %ebp
+801037df:	c3                   	ret    
       release(&p->lock);
-80103770:	83 ec 0c             	sub    $0xc,%esp
+801037e0:	83 ec 0c             	sub    $0xc,%esp
       return -1;
-80103773:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+801037e3:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
       release(&p->lock);
-80103778:	56                   	push   %esi
-80103779:	e8 a2 0e 00 00       	call   80104620 <release>
+801037e8:	56                   	push   %esi
+801037e9:	e8 82 1a 00 00       	call   80105270 <release>
       return -1;
-8010377e:	83 c4 10             	add    $0x10,%esp
+801037ee:	83 c4 10             	add    $0x10,%esp
 }
-80103781:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103784:	89 d8                	mov    %ebx,%eax
-80103786:	5b                   	pop    %ebx
-80103787:	5e                   	pop    %esi
-80103788:	5f                   	pop    %edi
-80103789:	5d                   	pop    %ebp
-8010378a:	c3                   	ret    
-8010378b:	66 90                	xchg   %ax,%ax
-8010378d:	66 90                	xchg   %ax,%ax
-8010378f:	90                   	nop
+801037f1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801037f4:	89 d8                	mov    %ebx,%eax
+801037f6:	5b                   	pop    %ebx
+801037f7:	5e                   	pop    %esi
+801037f8:	5f                   	pop    %edi
+801037f9:	5d                   	pop    %ebp
+801037fa:	c3                   	ret    
+801037fb:	66 90                	xchg   %ax,%ax
+801037fd:	66 90                	xchg   %ax,%ax
+801037ff:	90                   	nop
 
-80103790 <allocproc>:
+80103800 <allocproc>:
 // If found, change state to EMBRYO and initialize
 // state required to run in the kernel.
 // Otherwise return 0.
 static struct proc*
 allocproc(void)
 {
-80103790:	55                   	push   %ebp
-80103791:	89 e5                	mov    %esp,%ebp
-80103793:	53                   	push   %ebx
+80103800:	55                   	push   %ebp
+80103801:	89 e5                	mov    %esp,%ebp
+80103803:	53                   	push   %ebx
   struct proc *p;
   char *sp;
 
   acquire(&ptable.lock);
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103794:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+80103804:	bb 14 3b 11 80       	mov    $0x80113b14,%ebx
 {
-80103799:	83 ec 10             	sub    $0x10,%esp
+80103809:	83 ec 10             	sub    $0x10,%esp
   acquire(&ptable.lock);
-8010379c:	68 20 2d 11 80       	push   $0x80112d20
-801037a1:	e8 ba 0d 00 00       	call   80104560 <acquire>
-801037a6:	83 c4 10             	add    $0x10,%esp
-801037a9:	eb 10                	jmp    801037bb <allocproc+0x2b>
-801037ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801037af:	90                   	nop
+8010380c:	68 e0 3a 11 80       	push   $0x80113ae0
+80103811:	e8 9a 19 00 00       	call   801051b0 <acquire>
+80103816:	83 c4 10             	add    $0x10,%esp
+80103819:	eb 10                	jmp    8010382b <allocproc+0x2b>
+8010381b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010381f:	90                   	nop
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801037b0:	83 c3 7c             	add    $0x7c,%ebx
-801037b3:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
-801037b9:	74 75                	je     80103830 <allocproc+0xa0>
+80103820:	83 eb 80             	sub    $0xffffff80,%ebx
+80103823:	81 fb 14 5b 11 80    	cmp    $0x80115b14,%ebx
+80103829:	74 75                	je     801038a0 <allocproc+0xa0>
     if(p->state == UNUSED)
-801037bb:	8b 43 0c             	mov    0xc(%ebx),%eax
-801037be:	85 c0                	test   %eax,%eax
-801037c0:	75 ee                	jne    801037b0 <allocproc+0x20>
+8010382b:	8b 43 0c             	mov    0xc(%ebx),%eax
+8010382e:	85 c0                	test   %eax,%eax
+80103830:	75 ee                	jne    80103820 <allocproc+0x20>
   release(&ptable.lock);
   return 0;
 
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-801037c2:	a1 04 a0 10 80       	mov    0x8010a004,%eax
+80103832:	a1 04 b0 10 80       	mov    0x8010b004,%eax
 
   release(&ptable.lock);
-801037c7:	83 ec 0c             	sub    $0xc,%esp
+80103837:	83 ec 0c             	sub    $0xc,%esp
   p->state = EMBRYO;
-801037ca:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
+8010383a:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
   p->pid = nextpid++;
-801037d1:	89 43 10             	mov    %eax,0x10(%ebx)
-801037d4:	8d 50 01             	lea    0x1(%eax),%edx
+80103841:	89 43 10             	mov    %eax,0x10(%ebx)
+80103844:	8d 50 01             	lea    0x1(%eax),%edx
   release(&ptable.lock);
-801037d7:	68 20 2d 11 80       	push   $0x80112d20
+80103847:	68 e0 3a 11 80       	push   $0x80113ae0
   p->pid = nextpid++;
-801037dc:	89 15 04 a0 10 80    	mov    %edx,0x8010a004
+8010384c:	89 15 04 b0 10 80    	mov    %edx,0x8010b004
   release(&ptable.lock);
-801037e2:	e8 39 0e 00 00       	call   80104620 <release>
+80103852:	e8 19 1a 00 00       	call   80105270 <release>
 
   // Allocate kernel stack.
   if((p->kstack = kalloc()) == 0){
-801037e7:	e8 44 ee ff ff       	call   80102630 <kalloc>
-801037ec:	83 c4 10             	add    $0x10,%esp
-801037ef:	89 43 08             	mov    %eax,0x8(%ebx)
-801037f2:	85 c0                	test   %eax,%eax
-801037f4:	74 53                	je     80103849 <allocproc+0xb9>
+80103857:	e8 44 ee ff ff       	call   801026a0 <kalloc>
+8010385c:	83 c4 10             	add    $0x10,%esp
+8010385f:	89 43 08             	mov    %eax,0x8(%ebx)
+80103862:	85 c0                	test   %eax,%eax
+80103864:	74 53                	je     801038b9 <allocproc+0xb9>
     return 0;
   }
   sp = p->kstack + KSTACKSIZE;
 
   // Leave room for trap frame.
   sp -= sizeof *p->tf;
-801037f6:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
+80103866:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
   sp -= 4;
   *(uint*)sp = (uint)trapret;
 
   sp -= sizeof *p->context;
   p->context = (struct context*)sp;
   memset(p->context, 0, sizeof *p->context);
-801037fc:	83 ec 04             	sub    $0x4,%esp
+8010386c:	83 ec 04             	sub    $0x4,%esp
   sp -= sizeof *p->context;
-801037ff:	05 9c 0f 00 00       	add    $0xf9c,%eax
+8010386f:	05 9c 0f 00 00       	add    $0xf9c,%eax
   sp -= sizeof *p->tf;
-80103804:	89 53 18             	mov    %edx,0x18(%ebx)
+80103874:	89 53 18             	mov    %edx,0x18(%ebx)
   *(uint*)sp = (uint)trapret;
-80103807:	c7 40 14 86 58 10 80 	movl   $0x80105886,0x14(%eax)
+80103877:	c7 40 14 d6 64 10 80 	movl   $0x801064d6,0x14(%eax)
   p->context = (struct context*)sp;
-8010380e:	89 43 1c             	mov    %eax,0x1c(%ebx)
+8010387e:	89 43 1c             	mov    %eax,0x1c(%ebx)
   memset(p->context, 0, sizeof *p->context);
-80103811:	6a 14                	push   $0x14
-80103813:	6a 00                	push   $0x0
-80103815:	50                   	push   %eax
-80103816:	e8 55 0e 00 00       	call   80104670 <memset>
+80103881:	6a 14                	push   $0x14
+80103883:	6a 00                	push   $0x0
+80103885:	50                   	push   %eax
+80103886:	e8 35 1a 00 00       	call   801052c0 <memset>
   p->context->eip = (uint)forkret;
-8010381b:	8b 43 1c             	mov    0x1c(%ebx),%eax
+8010388b:	8b 43 1c             	mov    0x1c(%ebx),%eax
 
   return p;
-8010381e:	83 c4 10             	add    $0x10,%esp
+8010388e:	83 c4 10             	add    $0x10,%esp
   p->context->eip = (uint)forkret;
-80103821:	c7 40 10 60 38 10 80 	movl   $0x80103860,0x10(%eax)
+80103891:	c7 40 10 d0 38 10 80 	movl   $0x801038d0,0x10(%eax)
 }
-80103828:	89 d8                	mov    %ebx,%eax
-8010382a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010382d:	c9                   	leave  
-8010382e:	c3                   	ret    
-8010382f:	90                   	nop
+80103898:	89 d8                	mov    %ebx,%eax
+8010389a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010389d:	c9                   	leave  
+8010389e:	c3                   	ret    
+8010389f:	90                   	nop
   release(&ptable.lock);
-80103830:	83 ec 0c             	sub    $0xc,%esp
+801038a0:	83 ec 0c             	sub    $0xc,%esp
   return 0;
-80103833:	31 db                	xor    %ebx,%ebx
+801038a3:	31 db                	xor    %ebx,%ebx
   release(&ptable.lock);
-80103835:	68 20 2d 11 80       	push   $0x80112d20
-8010383a:	e8 e1 0d 00 00       	call   80104620 <release>
+801038a5:	68 e0 3a 11 80       	push   $0x80113ae0
+801038aa:	e8 c1 19 00 00       	call   80105270 <release>
 }
-8010383f:	89 d8                	mov    %ebx,%eax
+801038af:	89 d8                	mov    %ebx,%eax
   return 0;
-80103841:	83 c4 10             	add    $0x10,%esp
+801038b1:	83 c4 10             	add    $0x10,%esp
 }
-80103844:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103847:	c9                   	leave  
-80103848:	c3                   	ret    
+801038b4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801038b7:	c9                   	leave  
+801038b8:	c3                   	ret    
     p->state = UNUSED;
-80103849:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+801038b9:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
     return 0;
-80103850:	31 db                	xor    %ebx,%ebx
+801038c0:	31 db                	xor    %ebx,%ebx
 }
-80103852:	89 d8                	mov    %ebx,%eax
-80103854:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103857:	c9                   	leave  
-80103858:	c3                   	ret    
-80103859:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801038c2:	89 d8                	mov    %ebx,%eax
+801038c4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801038c7:	c9                   	leave  
+801038c8:	c3                   	ret    
+801038c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80103860 <forkret>:
+801038d0 <forkret>:
 
 // A fork child's very first scheduling by scheduler()
 // will swtch here.  "Return" to user space.
 void
 forkret(void)
 {
-80103860:	f3 0f 1e fb          	endbr32 
-80103864:	55                   	push   %ebp
-80103865:	89 e5                	mov    %esp,%ebp
-80103867:	83 ec 14             	sub    $0x14,%esp
+801038d0:	f3 0f 1e fb          	endbr32 
+801038d4:	55                   	push   %ebp
+801038d5:	89 e5                	mov    %esp,%ebp
+801038d7:	83 ec 14             	sub    $0x14,%esp
   static int first = 1;
   // Still holding ptable.lock from scheduler.
   release(&ptable.lock);
-8010386a:	68 20 2d 11 80       	push   $0x80112d20
-8010386f:	e8 ac 0d 00 00       	call   80104620 <release>
+801038da:	68 e0 3a 11 80       	push   $0x80113ae0
+801038df:	e8 8c 19 00 00       	call   80105270 <release>
 
   if (first) {
-80103874:	a1 00 a0 10 80       	mov    0x8010a000,%eax
-80103879:	83 c4 10             	add    $0x10,%esp
-8010387c:	85 c0                	test   %eax,%eax
-8010387e:	75 08                	jne    80103888 <forkret+0x28>
+801038e4:	a1 00 b0 10 80       	mov    0x8010b000,%eax
+801038e9:	83 c4 10             	add    $0x10,%esp
+801038ec:	85 c0                	test   %eax,%eax
+801038ee:	75 08                	jne    801038f8 <forkret+0x28>
     iinit(ROOTDEV);
     initlog(ROOTDEV);
   }
 
   // Return to "caller", actually trapret (see allocproc).
 }
-80103880:	c9                   	leave  
-80103881:	c3                   	ret    
-80103882:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801038f0:	c9                   	leave  
+801038f1:	c3                   	ret    
+801038f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     first = 0;
-80103888:	c7 05 00 a0 10 80 00 	movl   $0x0,0x8010a000
-8010388f:	00 00 00 
+801038f8:	c7 05 00 b0 10 80 00 	movl   $0x0,0x8010b000
+801038ff:	00 00 00 
     iinit(ROOTDEV);
-80103892:	83 ec 0c             	sub    $0xc,%esp
-80103895:	6a 01                	push   $0x1
-80103897:	e8 a4 dc ff ff       	call   80101540 <iinit>
+80103902:	83 ec 0c             	sub    $0xc,%esp
+80103905:	6a 01                	push   $0x1
+80103907:	e8 34 dc ff ff       	call   80101540 <iinit>
     initlog(ROOTDEV);
-8010389c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-801038a3:	e8 e8 f3 ff ff       	call   80102c90 <initlog>
+8010390c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+80103913:	e8 e8 f3 ff ff       	call   80102d00 <initlog>
+}
+80103918:	83 c4 10             	add    $0x10,%esp
+8010391b:	c9                   	leave  
+8010391c:	c3                   	ret    
+8010391d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80103920 <int_to_string.part.0>:
+void int_to_string(int x, char *c){
+80103920:	89 d1                	mov    %edx,%ecx
+  while(x>0){
+80103922:	85 c0                	test   %eax,%eax
+80103924:	7e 6a                	jle    80103990 <int_to_string.part.0+0x70>
+void int_to_string(int x, char *c){
+80103926:	55                   	push   %ebp
+80103927:	89 e5                	mov    %esp,%ebp
+80103929:	57                   	push   %edi
+8010392a:	56                   	push   %esi
+8010392b:	89 c6                	mov    %eax,%esi
+8010392d:	53                   	push   %ebx
+  int i=0;
+8010392e:	31 db                	xor    %ebx,%ebx
+    c[i]=x%10+'0';
+80103930:	b8 cd cc cc cc       	mov    $0xcccccccd,%eax
+80103935:	89 f7                	mov    %esi,%edi
+80103937:	f7 e6                	mul    %esi
+80103939:	c1 ea 03             	shr    $0x3,%edx
+8010393c:	8d 04 92             	lea    (%edx,%edx,4),%eax
+8010393f:	01 c0                	add    %eax,%eax
+80103941:	29 c7                	sub    %eax,%edi
+80103943:	89 f8                	mov    %edi,%eax
+80103945:	89 f7                	mov    %esi,%edi
+    x/=10;
+80103947:	89 d6                	mov    %edx,%esi
+    c[i]=x%10+'0';
+80103949:	83 c0 30             	add    $0x30,%eax
+8010394c:	88 04 19             	mov    %al,(%ecx,%ebx,1)
+    i++;
+8010394f:	89 d8                	mov    %ebx,%eax
+80103951:	83 c3 01             	add    $0x1,%ebx
+  while(x>0){
+80103954:	83 ff 09             	cmp    $0x9,%edi
+80103957:	7f d7                	jg     80103930 <int_to_string.part.0+0x10>
+  c[i]='\0';
+80103959:	c6 04 19 00          	movb   $0x0,(%ecx,%ebx,1)
+  for(int j=0;j<i/2;j++){
+8010395d:	d1 fb                	sar    %ebx
+8010395f:	74 25                	je     80103986 <int_to_string.part.0+0x66>
+80103961:	01 c8                	add    %ecx,%eax
+80103963:	8d 34 0b             	lea    (%ebx,%ecx,1),%esi
+80103966:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010396d:	8d 76 00             	lea    0x0(%esi),%esi
+    c[j]=c[i-j-1];
+80103970:	0f b6 18             	movzbl (%eax),%ebx
+    char a=c[j];
+80103973:	0f b6 11             	movzbl (%ecx),%edx
+    c[j]=c[i-j-1];
+80103976:	83 c1 01             	add    $0x1,%ecx
+80103979:	83 e8 01             	sub    $0x1,%eax
+8010397c:	88 59 ff             	mov    %bl,-0x1(%ecx)
+    c[i-j-1]=a;
+8010397f:	88 50 01             	mov    %dl,0x1(%eax)
+  for(int j=0;j<i/2;j++){
+80103982:	39 f1                	cmp    %esi,%ecx
+80103984:	75 ea                	jne    80103970 <int_to_string.part.0+0x50>
+}
+80103986:	5b                   	pop    %ebx
+80103987:	5e                   	pop    %esi
+80103988:	5f                   	pop    %edi
+80103989:	5d                   	pop    %ebp
+8010398a:	c3                   	ret    
+8010398b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010398f:	90                   	nop
+  c[i]='\0';
+80103990:	c6 02 00             	movb   $0x0,(%edx)
+  for(int j=0;j<i/2;j++){
+80103993:	c3                   	ret    
+80103994:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010399b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010399f:	90                   	nop
+
+801039a0 <int_to_string>:
+void int_to_string(int x, char *c){
+801039a0:	f3 0f 1e fb          	endbr32 
+801039a4:	55                   	push   %ebp
+801039a5:	89 e5                	mov    %esp,%ebp
+801039a7:	8b 45 08             	mov    0x8(%ebp),%eax
+801039aa:	8b 55 0c             	mov    0xc(%ebp),%edx
+  if(x==0)
+801039ad:	85 c0                	test   %eax,%eax
+801039af:	74 0f                	je     801039c0 <int_to_string+0x20>
+}
+801039b1:	5d                   	pop    %ebp
+801039b2:	e9 69 ff ff ff       	jmp    80103920 <int_to_string.part.0>
+801039b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801039be:	66 90                	xchg   %ax,%ax
+    c[0]='0';
+801039c0:	b8 30 00 00 00       	mov    $0x30,%eax
+801039c5:	66 89 02             	mov    %ax,(%edx)
+}
+801039c8:	5d                   	pop    %ebp
+801039c9:	c3                   	ret    
+801039ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801039d0 <rpop>:
+struct proc* rpop(){
+801039d0:	f3 0f 1e fb          	endbr32 
+801039d4:	55                   	push   %ebp
+801039d5:	89 e5                	mov    %esp,%ebp
+801039d7:	53                   	push   %ebx
+801039d8:	83 ec 10             	sub    $0x10,%esp
+  acquire(&rqueue.lock);
+801039db:	68 60 38 11 80       	push   $0x80113860
+801039e0:	e8 cb 17 00 00       	call   801051b0 <acquire>
+  if(rqueue.s==rqueue.e){
+801039e5:	a1 94 39 11 80       	mov    0x80113994,%eax
+801039ea:	83 c4 10             	add    $0x10,%esp
+801039ed:	3b 05 98 39 11 80    	cmp    0x80113998,%eax
+801039f3:	74 3b                	je     80103a30 <rpop+0x60>
+  struct proc *p=rqueue.queue[rqueue.s];
+801039f5:	8b 1c 85 94 38 11 80 	mov    -0x7feec76c(,%eax,4),%ebx
+  (rqueue.s)++;
+801039fc:	83 c0 01             	add    $0x1,%eax
+  release(&rqueue.lock);
+801039ff:	83 ec 0c             	sub    $0xc,%esp
+  (rqueue.s)%=NPROC;
+80103a02:	99                   	cltd   
+  release(&rqueue.lock);
+80103a03:	68 60 38 11 80       	push   $0x80113860
+  (rqueue.s)%=NPROC;
+80103a08:	c1 ea 1a             	shr    $0x1a,%edx
+80103a0b:	01 d0                	add    %edx,%eax
+80103a0d:	83 e0 3f             	and    $0x3f,%eax
+80103a10:	29 d0                	sub    %edx,%eax
+80103a12:	a3 94 39 11 80       	mov    %eax,0x80113994
+  release(&rqueue.lock);
+80103a17:	e8 54 18 00 00       	call   80105270 <release>
+  return p;
+80103a1c:	83 c4 10             	add    $0x10,%esp
+}
+80103a1f:	89 d8                	mov    %ebx,%eax
+80103a21:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103a24:	c9                   	leave  
+80103a25:	c3                   	ret    
+80103a26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103a2d:	8d 76 00             	lea    0x0(%esi),%esi
+  	release(&rqueue.lock);
+80103a30:	83 ec 0c             	sub    $0xc,%esp
+  	return 0;
+80103a33:	31 db                	xor    %ebx,%ebx
+  	release(&rqueue.lock);
+80103a35:	68 60 38 11 80       	push   $0x80113860
+80103a3a:	e8 31 18 00 00       	call   80105270 <release>
+  	return 0;
+80103a3f:	83 c4 10             	add    $0x10,%esp
+80103a42:	eb db                	jmp    80103a1f <rpop+0x4f>
+80103a44:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103a4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103a4f:	90                   	nop
+
+80103a50 <rpush>:
+int rpush(struct proc *p){
+80103a50:	f3 0f 1e fb          	endbr32 
+80103a54:	55                   	push   %ebp
+80103a55:	89 e5                	mov    %esp,%ebp
+80103a57:	83 ec 14             	sub    $0x14,%esp
+  acquire(&rqueue.lock);
+80103a5a:	68 60 38 11 80       	push   $0x80113860
+80103a5f:	e8 4c 17 00 00       	call   801051b0 <acquire>
+  if((rqueue.e+1)%NPROC==rqueue.s){
+80103a64:	8b 0d 98 39 11 80    	mov    0x80113998,%ecx
+80103a6a:	83 c4 10             	add    $0x10,%esp
+80103a6d:	8d 41 01             	lea    0x1(%ecx),%eax
+80103a70:	99                   	cltd   
+80103a71:	c1 ea 1a             	shr    $0x1a,%edx
+80103a74:	01 d0                	add    %edx,%eax
+80103a76:	83 e0 3f             	and    $0x3f,%eax
+80103a79:	29 d0                	sub    %edx,%eax
+80103a7b:	3b 05 94 39 11 80    	cmp    0x80113994,%eax
+80103a81:	74 2d                	je     80103ab0 <rpush+0x60>
+  release(&rqueue.lock);
+80103a83:	83 ec 0c             	sub    $0xc,%esp
+  rqueue.queue[rqueue.e]=p;
+80103a86:	8b 55 08             	mov    0x8(%ebp),%edx
+  (rqueue.e)%=NPROC;
+80103a89:	a3 98 39 11 80       	mov    %eax,0x80113998
+  release(&rqueue.lock);
+80103a8e:	68 60 38 11 80       	push   $0x80113860
+  rqueue.queue[rqueue.e]=p;
+80103a93:	89 14 8d 94 38 11 80 	mov    %edx,-0x7feec76c(,%ecx,4)
+  release(&rqueue.lock);
+80103a9a:	e8 d1 17 00 00       	call   80105270 <release>
+  return 1;
+80103a9f:	83 c4 10             	add    $0x10,%esp
+80103aa2:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+80103aa7:	c9                   	leave  
+80103aa8:	c3                   	ret    
+80103aa9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  	release(&rqueue.lock);
+80103ab0:	83 ec 0c             	sub    $0xc,%esp
+80103ab3:	68 60 38 11 80       	push   $0x80113860
+80103ab8:	e8 b3 17 00 00       	call   80105270 <release>
+    return 0;
+80103abd:	83 c4 10             	add    $0x10,%esp
+80103ac0:	31 c0                	xor    %eax,%eax
 }
-801038a8:	83 c4 10             	add    $0x10,%esp
-801038ab:	c9                   	leave  
-801038ac:	c3                   	ret    
-801038ad:	8d 76 00             	lea    0x0(%esi),%esi
-
-801038b0 <pinit>:
-{
-801038b0:	f3 0f 1e fb          	endbr32 
-801038b4:	55                   	push   %ebp
-801038b5:	89 e5                	mov    %esp,%ebp
-801038b7:	83 ec 10             	sub    $0x10,%esp
+80103ac2:	c9                   	leave  
+80103ac3:	c3                   	ret    
+80103ac4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103acb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103acf:	90                   	nop
+
+80103ad0 <rpop2>:
+struct proc* rpop2(){
+80103ad0:	f3 0f 1e fb          	endbr32 
+80103ad4:	55                   	push   %ebp
+80103ad5:	89 e5                	mov    %esp,%ebp
+80103ad7:	53                   	push   %ebx
+80103ad8:	83 ec 10             	sub    $0x10,%esp
+	acquire(&rqueue2.lock);
+80103adb:	68 a0 39 11 80       	push   $0x801139a0
+80103ae0:	e8 cb 16 00 00       	call   801051b0 <acquire>
+	if(rqueue2.s==rqueue2.e){
+80103ae5:	a1 d4 3a 11 80       	mov    0x80113ad4,%eax
+80103aea:	83 c4 10             	add    $0x10,%esp
+80103aed:	3b 05 d8 3a 11 80    	cmp    0x80113ad8,%eax
+80103af3:	74 3b                	je     80103b30 <rpop2+0x60>
+	struct proc* p=rqueue2.queue[rqueue2.s];
+80103af5:	8b 1c 85 d4 39 11 80 	mov    -0x7feec62c(,%eax,4),%ebx
+	(rqueue2.s)++;
+80103afc:	83 c0 01             	add    $0x1,%eax
+	release(&rqueue2.lock);
+80103aff:	83 ec 0c             	sub    $0xc,%esp
+	(rqueue2.s)%=NPROC;
+80103b02:	99                   	cltd   
+	release(&rqueue2.lock);
+80103b03:	68 a0 39 11 80       	push   $0x801139a0
+	(rqueue2.s)%=NPROC;
+80103b08:	c1 ea 1a             	shr    $0x1a,%edx
+80103b0b:	01 d0                	add    %edx,%eax
+80103b0d:	83 e0 3f             	and    $0x3f,%eax
+80103b10:	29 d0                	sub    %edx,%eax
+80103b12:	a3 d4 3a 11 80       	mov    %eax,0x80113ad4
+	release(&rqueue2.lock);
+80103b17:	e8 54 17 00 00       	call   80105270 <release>
+	return p;
+80103b1c:	83 c4 10             	add    $0x10,%esp
+}
+80103b1f:	89 d8                	mov    %ebx,%eax
+80103b21:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103b24:	c9                   	leave  
+80103b25:	c3                   	ret    
+80103b26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103b2d:	8d 76 00             	lea    0x0(%esi),%esi
+		release(&rqueue2.lock);
+80103b30:	83 ec 0c             	sub    $0xc,%esp
+		return 0;
+80103b33:	31 db                	xor    %ebx,%ebx
+		release(&rqueue2.lock);
+80103b35:	68 a0 39 11 80       	push   $0x801139a0
+80103b3a:	e8 31 17 00 00       	call   80105270 <release>
+		return 0;
+80103b3f:	83 c4 10             	add    $0x10,%esp
+80103b42:	eb db                	jmp    80103b1f <rpop2+0x4f>
+80103b44:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103b4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103b4f:	90                   	nop
+
+80103b50 <rpush2>:
+int rpush2(struct proc* p){
+80103b50:	f3 0f 1e fb          	endbr32 
+80103b54:	55                   	push   %ebp
+80103b55:	89 e5                	mov    %esp,%ebp
+80103b57:	83 ec 14             	sub    $0x14,%esp
+	acquire(&rqueue2.lock);
+80103b5a:	68 a0 39 11 80       	push   $0x801139a0
+80103b5f:	e8 4c 16 00 00       	call   801051b0 <acquire>
+	if((rqueue2.e+1)%NPROC==rqueue2.s){
+80103b64:	8b 0d d8 3a 11 80    	mov    0x80113ad8,%ecx
+80103b6a:	83 c4 10             	add    $0x10,%esp
+80103b6d:	8d 41 01             	lea    0x1(%ecx),%eax
+80103b70:	99                   	cltd   
+80103b71:	c1 ea 1a             	shr    $0x1a,%edx
+80103b74:	01 d0                	add    %edx,%eax
+80103b76:	83 e0 3f             	and    $0x3f,%eax
+80103b79:	29 d0                	sub    %edx,%eax
+80103b7b:	3b 05 d4 3a 11 80    	cmp    0x80113ad4,%eax
+80103b81:	74 2d                	je     80103bb0 <rpush2+0x60>
+	release(&rqueue2.lock);
+80103b83:	83 ec 0c             	sub    $0xc,%esp
+	rqueue2.queue[rqueue2.e]=p;
+80103b86:	8b 55 08             	mov    0x8(%ebp),%edx
+	(rqueue2.e)%=NPROC;
+80103b89:	a3 d8 3a 11 80       	mov    %eax,0x80113ad8
+	release(&rqueue2.lock);
+80103b8e:	68 a0 39 11 80       	push   $0x801139a0
+	rqueue2.queue[rqueue2.e]=p;
+80103b93:	89 14 8d d4 39 11 80 	mov    %edx,-0x7feec62c(,%ecx,4)
+	release(&rqueue2.lock);
+80103b9a:	e8 d1 16 00 00       	call   80105270 <release>
+	return 1;
+80103b9f:	83 c4 10             	add    $0x10,%esp
+80103ba2:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+80103ba7:	c9                   	leave  
+80103ba8:	c3                   	ret    
+80103ba9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+		release(&rqueue2.lock);
+80103bb0:	83 ec 0c             	sub    $0xc,%esp
+80103bb3:	68 a0 39 11 80       	push   $0x801139a0
+80103bb8:	e8 b3 16 00 00       	call   80105270 <release>
+		return 0;
+80103bbd:	83 c4 10             	add    $0x10,%esp
+80103bc0:	31 c0                	xor    %eax,%eax
+}
+80103bc2:	c9                   	leave  
+80103bc3:	c3                   	ret    
+80103bc4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103bcb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103bcf:	90                   	nop
+
+80103bd0 <pinit>:
+{
+80103bd0:	f3 0f 1e fb          	endbr32 
+80103bd4:	55                   	push   %ebp
+80103bd5:	89 e5                	mov    %esp,%ebp
+80103bd7:	83 ec 10             	sub    $0x10,%esp
   initlock(&ptable.lock, "ptable");
-801038ba:	68 20 76 10 80       	push   $0x80107620
-801038bf:	68 20 2d 11 80       	push   $0x80112d20
-801038c4:	e8 17 0b 00 00       	call   801043e0 <initlock>
-}
-801038c9:	83 c4 10             	add    $0x10,%esp
-801038cc:	c9                   	leave  
-801038cd:	c3                   	ret    
-801038ce:	66 90                	xchg   %ax,%ax
+80103bda:	68 a0 83 10 80       	push   $0x801083a0
+80103bdf:	68 e0 3a 11 80       	push   $0x80113ae0
+80103be4:	e8 47 14 00 00       	call   80105030 <initlock>
+  initlock(&rqueue.lock, "rqueue");
+80103be9:	58                   	pop    %eax
+80103bea:	5a                   	pop    %edx
+80103beb:	68 a7 83 10 80       	push   $0x801083a7
+80103bf0:	68 60 38 11 80       	push   $0x80113860
+80103bf5:	e8 36 14 00 00       	call   80105030 <initlock>
+  initlock(&sleeping_channel_lock, "sleeping_channel");
+80103bfa:	59                   	pop    %ecx
+80103bfb:	58                   	pop    %eax
+80103bfc:	68 ae 83 10 80       	push   $0x801083ae
+80103c01:	68 c0 63 11 80       	push   $0x801163c0
+80103c06:	e8 25 14 00 00       	call   80105030 <initlock>
+  initlock(&rqueue2.lock, "rqueue2");
+80103c0b:	58                   	pop    %eax
+80103c0c:	5a                   	pop    %edx
+80103c0d:	68 bf 83 10 80       	push   $0x801083bf
+80103c12:	68 a0 39 11 80       	push   $0x801139a0
+80103c17:	e8 14 14 00 00       	call   80105030 <initlock>
+}
+80103c1c:	83 c4 10             	add    $0x10,%esp
+80103c1f:	c9                   	leave  
+80103c20:	c3                   	ret    
+80103c21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103c28:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103c2f:	90                   	nop
 
-801038d0 <mycpu>:
+80103c30 <mycpu>:
 {
-801038d0:	f3 0f 1e fb          	endbr32 
-801038d4:	55                   	push   %ebp
-801038d5:	89 e5                	mov    %esp,%ebp
-801038d7:	56                   	push   %esi
-801038d8:	53                   	push   %ebx
+80103c30:	f3 0f 1e fb          	endbr32 
+80103c34:	55                   	push   %ebp
+80103c35:	89 e5                	mov    %esp,%ebp
+80103c37:	83 ec 08             	sub    $0x8,%esp
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-801038d9:	9c                   	pushf  
-801038da:	58                   	pop    %eax
+80103c3a:	9c                   	pushf  
+80103c3b:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-801038db:	f6 c4 02             	test   $0x2,%ah
-801038de:	75 4a                	jne    8010392a <mycpu+0x5a>
-  apicid = lapicid();
-801038e0:	e8 bb ef ff ff       	call   801028a0 <lapicid>
-  for (i = 0; i < ncpu; ++i) {
-801038e5:	8b 35 00 2d 11 80    	mov    0x80112d00,%esi
+80103c3c:	f6 c4 02             	test   $0x2,%ah
+80103c3f:	75 36                	jne    80103c77 <mycpu+0x47>
   apicid = lapicid();
-801038eb:	89 c3                	mov    %eax,%ebx
+80103c41:	e8 ca ec ff ff       	call   80102910 <lapicid>
   for (i = 0; i < ncpu; ++i) {
-801038ed:	85 f6                	test   %esi,%esi
-801038ef:	7e 2c                	jle    8010391d <mycpu+0x4d>
-801038f1:	31 d2                	xor    %edx,%edx
-801038f3:	eb 0a                	jmp    801038ff <mycpu+0x2f>
-801038f5:	8d 76 00             	lea    0x0(%esi),%esi
-801038f8:	83 c2 01             	add    $0x1,%edx
-801038fb:	39 f2                	cmp    %esi,%edx
-801038fd:	74 1e                	je     8010391d <mycpu+0x4d>
+80103c46:	8b 15 50 38 11 80    	mov    0x80113850,%edx
+80103c4c:	85 d2                	test   %edx,%edx
+80103c4e:	7e 0b                	jle    80103c5b <mycpu+0x2b>
     if (cpus[i].apicid == apicid)
-801038ff:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
-80103905:	0f b6 81 80 27 11 80 	movzbl -0x7feed880(%ecx),%eax
-8010390c:	39 d8                	cmp    %ebx,%eax
-8010390e:	75 e8                	jne    801038f8 <mycpu+0x28>
-}
-80103910:	8d 65 f8             	lea    -0x8(%ebp),%esp
-      return &cpus[i];
-80103913:	8d 81 80 27 11 80    	lea    -0x7feed880(%ecx),%eax
-}
-80103919:	5b                   	pop    %ebx
-8010391a:	5e                   	pop    %esi
-8010391b:	5d                   	pop    %ebp
-8010391c:	c3                   	ret    
+80103c50:	0f b6 15 a0 37 11 80 	movzbl 0x801137a0,%edx
+80103c57:	39 d0                	cmp    %edx,%eax
+80103c59:	74 15                	je     80103c70 <mycpu+0x40>
   panic("unknown apicid\n");
-8010391d:	83 ec 0c             	sub    $0xc,%esp
-80103920:	68 27 76 10 80       	push   $0x80107627
-80103925:	e8 66 ca ff ff       	call   80100390 <panic>
+80103c5b:	83 ec 0c             	sub    $0xc,%esp
+80103c5e:	68 c7 83 10 80       	push   $0x801083c7
+80103c63:	e8 28 c7 ff ff       	call   80100390 <panic>
+80103c68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103c6f:	90                   	nop
+}
+80103c70:	c9                   	leave  
+80103c71:	b8 a0 37 11 80       	mov    $0x801137a0,%eax
+80103c76:	c3                   	ret    
     panic("mycpu called with interrupts enabled\n");
-8010392a:	83 ec 0c             	sub    $0xc,%esp
-8010392d:	68 04 77 10 80       	push   $0x80107704
-80103932:	e8 59 ca ff ff       	call   80100390 <panic>
-80103937:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010393e:	66 90                	xchg   %ax,%ax
+80103c77:	83 ec 0c             	sub    $0xc,%esp
+80103c7a:	68 4c 85 10 80       	push   $0x8010854c
+80103c7f:	e8 0c c7 ff ff       	call   80100390 <panic>
+80103c84:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103c8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103c8f:	90                   	nop
 
-80103940 <cpuid>:
+80103c90 <cpuid>:
 cpuid() {
-80103940:	f3 0f 1e fb          	endbr32 
-80103944:	55                   	push   %ebp
-80103945:	89 e5                	mov    %esp,%ebp
-80103947:	83 ec 08             	sub    $0x8,%esp
+80103c90:	f3 0f 1e fb          	endbr32 
+80103c94:	55                   	push   %ebp
+80103c95:	89 e5                	mov    %esp,%ebp
+80103c97:	83 ec 08             	sub    $0x8,%esp
   return mycpu()-cpus;
-8010394a:	e8 81 ff ff ff       	call   801038d0 <mycpu>
+80103c9a:	e8 91 ff ff ff       	call   80103c30 <mycpu>
 }
-8010394f:	c9                   	leave  
+80103c9f:	c9                   	leave  
   return mycpu()-cpus;
-80103950:	2d 80 27 11 80       	sub    $0x80112780,%eax
-80103955:	c1 f8 04             	sar    $0x4,%eax
-80103958:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
+80103ca0:	2d a0 37 11 80       	sub    $0x801137a0,%eax
+80103ca5:	c1 f8 04             	sar    $0x4,%eax
+80103ca8:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
+}
+80103cae:	c3                   	ret    
+80103caf:	90                   	nop
+
+80103cb0 <proc_close>:
+{
+80103cb0:	f3 0f 1e fb          	endbr32 
+80103cb4:	55                   	push   %ebp
+80103cb5:	89 e5                	mov    %esp,%ebp
+80103cb7:	57                   	push   %edi
+80103cb8:	56                   	push   %esi
+80103cb9:	53                   	push   %ebx
+80103cba:	83 ec 0c             	sub    $0xc,%esp
+80103cbd:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+80103cc0:	83 fb 0f             	cmp    $0xf,%ebx
+80103cc3:	77 5b                	ja     80103d20 <proc_close+0x70>
+  pushcli();
+80103cc5:	e8 e6 13 00 00       	call   801050b0 <pushcli>
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+80103cca:	83 c3 08             	add    $0x8,%ebx
+  c = mycpu();
+80103ccd:	e8 5e ff ff ff       	call   80103c30 <mycpu>
+  p = c->proc;
+80103cd2:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+80103cd8:	e8 23 14 00 00       	call   80105100 <popcli>
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+80103cdd:	8b 74 9e 08          	mov    0x8(%esi,%ebx,4),%esi
+80103ce1:	85 f6                	test   %esi,%esi
+80103ce3:	74 3b                	je     80103d20 <proc_close+0x70>
+  pushcli();
+80103ce5:	e8 c6 13 00 00       	call   801050b0 <pushcli>
+  c = mycpu();
+80103cea:	e8 41 ff ff ff       	call   80103c30 <mycpu>
+  p = c->proc;
+80103cef:	8b b8 ac 00 00 00    	mov    0xac(%eax),%edi
+  popcli();
+80103cf5:	e8 06 14 00 00       	call   80105100 <popcli>
+  fileclose(f);
+80103cfa:	83 ec 0c             	sub    $0xc,%esp
+  myproc()->ofile[fd] = 0;
+80103cfd:	c7 44 9f 08 00 00 00 	movl   $0x0,0x8(%edi,%ebx,4)
+80103d04:	00 
+  fileclose(f);
+80103d05:	56                   	push   %esi
+80103d06:	e8 b5 d1 ff ff       	call   80100ec0 <fileclose>
+  return 0;
+80103d0b:	83 c4 10             	add    $0x10,%esp
+80103d0e:	31 c0                	xor    %eax,%eax
 }
-8010395e:	c3                   	ret    
-8010395f:	90                   	nop
+80103d10:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103d13:	5b                   	pop    %ebx
+80103d14:	5e                   	pop    %esi
+80103d15:	5f                   	pop    %edi
+80103d16:	5d                   	pop    %ebp
+80103d17:	c3                   	ret    
+80103d18:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103d1f:	90                   	nop
+    return -1;
+80103d20:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103d25:	eb e9                	jmp    80103d10 <proc_close+0x60>
+80103d27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103d2e:	66 90                	xchg   %ax,%ax
+
+80103d30 <proc_write>:
+{
+80103d30:	f3 0f 1e fb          	endbr32 
+80103d34:	55                   	push   %ebp
+80103d35:	89 e5                	mov    %esp,%ebp
+80103d37:	57                   	push   %edi
+80103d38:	56                   	push   %esi
+80103d39:	53                   	push   %ebx
+80103d3a:	83 ec 1c             	sub    $0x1c,%esp
+80103d3d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80103d40:	8b 75 0c             	mov    0xc(%ebp),%esi
+80103d43:	8b 7d 10             	mov    0x10(%ebp),%edi
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+80103d46:	83 fb 0f             	cmp    $0xf,%ebx
+80103d49:	77 3d                	ja     80103d88 <proc_write+0x58>
+  pushcli();
+80103d4b:	e8 60 13 00 00       	call   801050b0 <pushcli>
+  c = mycpu();
+80103d50:	e8 db fe ff ff       	call   80103c30 <mycpu>
+  p = c->proc;
+80103d55:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+80103d5b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  popcli();
+80103d5e:	e8 9d 13 00 00       	call   80105100 <popcli>
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+80103d63:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80103d66:	8b 44 98 28          	mov    0x28(%eax,%ebx,4),%eax
+80103d6a:	85 c0                	test   %eax,%eax
+80103d6c:	74 1a                	je     80103d88 <proc_write+0x58>
+  return filewrite(f, p, n);
+80103d6e:	89 7d 10             	mov    %edi,0x10(%ebp)
+80103d71:	89 75 0c             	mov    %esi,0xc(%ebp)
+80103d74:	89 45 08             	mov    %eax,0x8(%ebp)
+}
+80103d77:	83 c4 1c             	add    $0x1c,%esp
+80103d7a:	5b                   	pop    %ebx
+80103d7b:	5e                   	pop    %esi
+80103d7c:	5f                   	pop    %edi
+80103d7d:	5d                   	pop    %ebp
+  return filewrite(f, p, n);
+80103d7e:	e9 0d d3 ff ff       	jmp    80101090 <filewrite>
+80103d83:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103d87:	90                   	nop
+}
+80103d88:	83 c4 1c             	add    $0x1c,%esp
+80103d8b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103d90:	5b                   	pop    %ebx
+80103d91:	5e                   	pop    %esi
+80103d92:	5f                   	pop    %edi
+80103d93:	5d                   	pop    %ebp
+80103d94:	c3                   	ret    
+80103d95:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103d9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80103da0 <proc_open>:
+int proc_open(char *path, int omode){
+80103da0:	f3 0f 1e fb          	endbr32 
+80103da4:	55                   	push   %ebp
+80103da5:	89 e5                	mov    %esp,%ebp
+80103da7:	57                   	push   %edi
+80103da8:	56                   	push   %esi
+80103da9:	53                   	push   %ebx
+80103daa:	83 ec 2c             	sub    $0x2c,%esp
+80103dad:	8b 75 08             	mov    0x8(%ebp),%esi
+  begin_op();
+80103db0:	e8 eb ef ff ff       	call   80102da0 <begin_op>
+  if(omode & O_CREATE){
+80103db5:	f7 45 0c 00 02 00 00 	testl  $0x200,0xc(%ebp)
+80103dbc:	74 72                	je     80103e30 <proc_open+0x90>
+  if((dp = nameiparent(path, name)) == 0)
+80103dbe:	83 ec 08             	sub    $0x8,%esp
+80103dc1:	8d 5d da             	lea    -0x26(%ebp),%ebx
+80103dc4:	53                   	push   %ebx
+80103dc5:	56                   	push   %esi
+80103dc6:	e8 85 e2 ff ff       	call   80102050 <nameiparent>
+80103dcb:	83 c4 10             	add    $0x10,%esp
+80103dce:	89 c7                	mov    %eax,%edi
+80103dd0:	85 c0                	test   %eax,%eax
+80103dd2:	74 49                	je     80103e1d <proc_open+0x7d>
+  ilock(dp);
+80103dd4:	83 ec 0c             	sub    $0xc,%esp
+80103dd7:	50                   	push   %eax
+80103dd8:	e8 83 d9 ff ff       	call   80101760 <ilock>
+  if((ip = dirlookup(dp, name, 0)) != 0){
+80103ddd:	83 c4 0c             	add    $0xc,%esp
+80103de0:	6a 00                	push   $0x0
+80103de2:	53                   	push   %ebx
+80103de3:	57                   	push   %edi
+80103de4:	e8 c7 de ff ff       	call   80101cb0 <dirlookup>
+80103de9:	83 c4 10             	add    $0x10,%esp
+80103dec:	89 c6                	mov    %eax,%esi
+80103dee:	85 c0                	test   %eax,%eax
+80103df0:	0f 84 0a 01 00 00    	je     80103f00 <proc_open+0x160>
+    iunlockput(dp);
+80103df6:	83 ec 0c             	sub    $0xc,%esp
+80103df9:	57                   	push   %edi
+80103dfa:	e8 01 dc ff ff       	call   80101a00 <iunlockput>
+    ilock(ip);
+80103dff:	89 34 24             	mov    %esi,(%esp)
+80103e02:	e8 59 d9 ff ff       	call   80101760 <ilock>
+    if(type == T_FILE && ip->type == T_FILE)
+80103e07:	83 c4 10             	add    $0x10,%esp
+80103e0a:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
+80103e0f:	74 4b                	je     80103e5c <proc_open+0xbc>
+    iunlockput(ip);
+80103e11:	83 ec 0c             	sub    $0xc,%esp
+80103e14:	56                   	push   %esi
+80103e15:	e8 e6 db ff ff       	call   80101a00 <iunlockput>
+    if(ip == 0){
+80103e1a:	83 c4 10             	add    $0x10,%esp
+      end_op();
+80103e1d:	e8 ee ef ff ff       	call   80102e10 <end_op>
+      return -1;
+80103e22:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103e27:	e9 ca 00 00 00       	jmp    80103ef6 <proc_open+0x156>
+80103e2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if((ip = namei(path)) == 0){
+80103e30:	83 ec 0c             	sub    $0xc,%esp
+80103e33:	56                   	push   %esi
+80103e34:	e8 f7 e1 ff ff       	call   80102030 <namei>
+80103e39:	83 c4 10             	add    $0x10,%esp
+80103e3c:	89 c6                	mov    %eax,%esi
+80103e3e:	85 c0                	test   %eax,%eax
+80103e40:	74 db                	je     80103e1d <proc_open+0x7d>
+    ilock(ip);
+80103e42:	83 ec 0c             	sub    $0xc,%esp
+80103e45:	50                   	push   %eax
+80103e46:	e8 15 d9 ff ff       	call   80101760 <ilock>
+    if(ip->type == T_DIR && omode != O_RDONLY){
+80103e4b:	83 c4 10             	add    $0x10,%esp
+80103e4e:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+80103e53:	75 07                	jne    80103e5c <proc_open+0xbc>
+80103e55:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80103e58:	85 c9                	test   %ecx,%ecx
+80103e5a:	75 40                	jne    80103e9c <proc_open+0xfc>
+  if((f = filealloc()) == 0 || (fd = proc_fdalloc(f)) < 0){
+80103e5c:	e8 9f cf ff ff       	call   80100e00 <filealloc>
+80103e61:	89 c3                	mov    %eax,%ebx
+80103e63:	85 c0                	test   %eax,%eax
+80103e65:	74 35                	je     80103e9c <proc_open+0xfc>
+  pushcli();
+80103e67:	e8 44 12 00 00       	call   801050b0 <pushcli>
+  c = mycpu();
+80103e6c:	e8 bf fd ff ff       	call   80103c30 <mycpu>
+  p = c->proc;
+80103e71:	8b b8 ac 00 00 00    	mov    0xac(%eax),%edi
+  popcli();
+80103e77:	e8 84 12 00 00       	call   80105100 <popcli>
+  for(fd = 0; fd < NOFILE; fd++){
+80103e7c:	31 c0                	xor    %eax,%eax
+80103e7e:	66 90                	xchg   %ax,%ax
+    if(curproc->ofile[fd] == 0){
+80103e80:	8b 54 87 28          	mov    0x28(%edi,%eax,4),%edx
+80103e84:	85 d2                	test   %edx,%edx
+80103e86:	74 30                	je     80103eb8 <proc_open+0x118>
+  for(fd = 0; fd < NOFILE; fd++){
+80103e88:	83 c0 01             	add    $0x1,%eax
+80103e8b:	83 f8 10             	cmp    $0x10,%eax
+80103e8e:	75 f0                	jne    80103e80 <proc_open+0xe0>
+      fileclose(f);
+80103e90:	83 ec 0c             	sub    $0xc,%esp
+80103e93:	53                   	push   %ebx
+80103e94:	e8 27 d0 ff ff       	call   80100ec0 <fileclose>
+80103e99:	83 c4 10             	add    $0x10,%esp
+    iunlockput(ip);
+80103e9c:	83 ec 0c             	sub    $0xc,%esp
+80103e9f:	56                   	push   %esi
+80103ea0:	e8 5b db ff ff       	call   80101a00 <iunlockput>
+    end_op();
+80103ea5:	e8 66 ef ff ff       	call   80102e10 <end_op>
+    return -1;
+80103eaa:	83 c4 10             	add    $0x10,%esp
+80103ead:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103eb2:	eb 42                	jmp    80103ef6 <proc_open+0x156>
+80103eb4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  iunlock(ip);
+80103eb8:	83 ec 0c             	sub    $0xc,%esp
+      curproc->ofile[fd] = f;
+80103ebb:	89 5c 87 28          	mov    %ebx,0x28(%edi,%eax,4)
+  iunlock(ip);
+80103ebf:	56                   	push   %esi
+      curproc->ofile[fd] = f;
+80103ec0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  iunlock(ip);
+80103ec3:	e8 78 d9 ff ff       	call   80101840 <iunlock>
+  end_op();
+80103ec8:	e8 43 ef ff ff       	call   80102e10 <end_op>
+  f->readable = !(omode & O_WRONLY);
+80103ecd:	8b 55 0c             	mov    0xc(%ebp),%edx
+  f->ip = ip;
+80103ed0:	89 73 10             	mov    %esi,0x10(%ebx)
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+80103ed3:	83 c4 10             	add    $0x10,%esp
+  f->type = FD_INODE;
+80103ed6:	c7 03 02 00 00 00    	movl   $0x2,(%ebx)
+  return fd;
+80103edc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+  f->readable = !(omode & O_WRONLY);
+80103edf:	f7 d2                	not    %edx
+  f->off = 0;
+80103ee1:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+  f->readable = !(omode & O_WRONLY);
+80103ee8:	83 e2 01             	and    $0x1,%edx
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+80103eeb:	f6 45 0c 03          	testb  $0x3,0xc(%ebp)
+  f->readable = !(omode & O_WRONLY);
+80103eef:	88 53 08             	mov    %dl,0x8(%ebx)
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+80103ef2:	0f 95 43 09          	setne  0x9(%ebx)
+}
+80103ef6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103ef9:	5b                   	pop    %ebx
+80103efa:	5e                   	pop    %esi
+80103efb:	5f                   	pop    %edi
+80103efc:	5d                   	pop    %ebp
+80103efd:	c3                   	ret    
+80103efe:	66 90                	xchg   %ax,%ax
+  if((ip = ialloc(dp->dev, type)) == 0)
+80103f00:	83 ec 08             	sub    $0x8,%esp
+80103f03:	6a 02                	push   $0x2
+80103f05:	ff 37                	pushl  (%edi)
+80103f07:	e8 d4 d6 ff ff       	call   801015e0 <ialloc>
+80103f0c:	83 c4 10             	add    $0x10,%esp
+80103f0f:	89 c6                	mov    %eax,%esi
+80103f11:	85 c0                	test   %eax,%eax
+80103f13:	74 50                	je     80103f65 <proc_open+0x1c5>
+  ilock(ip);
+80103f15:	83 ec 0c             	sub    $0xc,%esp
+80103f18:	50                   	push   %eax
+80103f19:	e8 42 d8 ff ff       	call   80101760 <ilock>
+  ip->major = major;
+80103f1e:	31 c0                	xor    %eax,%eax
+  ip->minor = minor;
+80103f20:	c7 46 54 00 00 01 00 	movl   $0x10000,0x54(%esi)
+  ip->major = major;
+80103f27:	66 89 46 52          	mov    %ax,0x52(%esi)
+  iupdate(ip);
+80103f2b:	89 34 24             	mov    %esi,(%esp)
+80103f2e:	e8 6d d7 ff ff       	call   801016a0 <iupdate>
+  if(dirlink(dp, name, ip->inum) < 0)
+80103f33:	83 c4 0c             	add    $0xc,%esp
+80103f36:	ff 76 04             	pushl  0x4(%esi)
+80103f39:	53                   	push   %ebx
+80103f3a:	57                   	push   %edi
+80103f3b:	e8 30 e0 ff ff       	call   80101f70 <dirlink>
+80103f40:	83 c4 10             	add    $0x10,%esp
+80103f43:	85 c0                	test   %eax,%eax
+80103f45:	78 11                	js     80103f58 <proc_open+0x1b8>
+  iunlockput(dp);
+80103f47:	83 ec 0c             	sub    $0xc,%esp
+80103f4a:	57                   	push   %edi
+80103f4b:	e8 b0 da ff ff       	call   80101a00 <iunlockput>
+  return ip;
+80103f50:	83 c4 10             	add    $0x10,%esp
+80103f53:	e9 04 ff ff ff       	jmp    80103e5c <proc_open+0xbc>
+    panic("create: dirlink");
+80103f58:	83 ec 0c             	sub    $0xc,%esp
+80103f5b:	68 e6 83 10 80       	push   $0x801083e6
+80103f60:	e8 2b c4 ff ff       	call   80100390 <panic>
+    panic("create: ialloc");
+80103f65:	83 ec 0c             	sub    $0xc,%esp
+80103f68:	68 d7 83 10 80       	push   $0x801083d7
+80103f6d:	e8 1e c4 ff ff       	call   80100390 <panic>
+80103f72:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103f79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103f80 <proc_read>:
+{
+80103f80:	f3 0f 1e fb          	endbr32 
+80103f84:	55                   	push   %ebp
+80103f85:	89 e5                	mov    %esp,%ebp
+80103f87:	57                   	push   %edi
+80103f88:	56                   	push   %esi
+80103f89:	53                   	push   %ebx
+80103f8a:	83 ec 1c             	sub    $0x1c,%esp
+80103f8d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80103f90:	8b 7d 0c             	mov    0xc(%ebp),%edi
+80103f93:	8b 75 10             	mov    0x10(%ebp),%esi
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+80103f96:	83 fb 0f             	cmp    $0xf,%ebx
+80103f99:	77 3d                	ja     80103fd8 <proc_read+0x58>
+  pushcli();
+80103f9b:	e8 10 11 00 00       	call   801050b0 <pushcli>
+  c = mycpu();
+80103fa0:	e8 8b fc ff ff       	call   80103c30 <mycpu>
+  p = c->proc;
+80103fa5:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
+80103fab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  popcli();
+80103fae:	e8 4d 11 00 00       	call   80105100 <popcli>
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+80103fb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80103fb6:	8b 44 98 28          	mov    0x28(%eax,%ebx,4),%eax
+80103fba:	85 c0                	test   %eax,%eax
+80103fbc:	74 1a                	je     80103fd8 <proc_read+0x58>
+  return fileread(f, p, n);
+80103fbe:	89 7d 10             	mov    %edi,0x10(%ebp)
+80103fc1:	89 75 0c             	mov    %esi,0xc(%ebp)
+80103fc4:	89 45 08             	mov    %eax,0x8(%ebp)
+}
+80103fc7:	83 c4 1c             	add    $0x1c,%esp
+80103fca:	5b                   	pop    %ebx
+80103fcb:	5e                   	pop    %esi
+80103fcc:	5f                   	pop    %edi
+80103fcd:	5d                   	pop    %ebp
+  return fileread(f, p, n);
+80103fce:	e9 1d d0 ff ff       	jmp    80100ff0 <fileread>
+80103fd3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103fd7:	90                   	nop
+}
+80103fd8:	83 c4 1c             	add    $0x1c,%esp
+80103fdb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103fe0:	5b                   	pop    %ebx
+80103fe1:	5e                   	pop    %esi
+80103fe2:	5f                   	pop    %edi
+80103fe3:	5d                   	pop    %ebp
+80103fe4:	c3                   	ret    
+80103fe5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103fec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80103960 <myproc>:
+80103ff0 <myproc>:
 myproc(void) {
-80103960:	f3 0f 1e fb          	endbr32 
-80103964:	55                   	push   %ebp
-80103965:	89 e5                	mov    %esp,%ebp
-80103967:	53                   	push   %ebx
-80103968:	83 ec 04             	sub    $0x4,%esp
+80103ff0:	f3 0f 1e fb          	endbr32 
+80103ff4:	55                   	push   %ebp
+80103ff5:	89 e5                	mov    %esp,%ebp
+80103ff7:	53                   	push   %ebx
+80103ff8:	83 ec 04             	sub    $0x4,%esp
   pushcli();
-8010396b:	e8 f0 0a 00 00       	call   80104460 <pushcli>
+80103ffb:	e8 b0 10 00 00       	call   801050b0 <pushcli>
   c = mycpu();
-80103970:	e8 5b ff ff ff       	call   801038d0 <mycpu>
+80104000:	e8 2b fc ff ff       	call   80103c30 <mycpu>
   p = c->proc;
-80103975:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80104005:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-8010397b:	e8 30 0b 00 00       	call   801044b0 <popcli>
+8010400b:	e8 f0 10 00 00       	call   80105100 <popcli>
 }
-80103980:	83 c4 04             	add    $0x4,%esp
-80103983:	89 d8                	mov    %ebx,%eax
-80103985:	5b                   	pop    %ebx
-80103986:	5d                   	pop    %ebp
-80103987:	c3                   	ret    
-80103988:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010398f:	90                   	nop
-
-80103990 <userinit>:
-{
-80103990:	f3 0f 1e fb          	endbr32 
-80103994:	55                   	push   %ebp
-80103995:	89 e5                	mov    %esp,%ebp
-80103997:	53                   	push   %ebx
-80103998:	83 ec 04             	sub    $0x4,%esp
+80104010:	83 c4 04             	add    $0x4,%esp
+80104013:	89 d8                	mov    %ebx,%eax
+80104015:	5b                   	pop    %ebx
+80104016:	5d                   	pop    %ebp
+80104017:	c3                   	ret    
+80104018:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010401f:	90                   	nop
+
+80104020 <create_kernel_process>:
+void create_kernel_process(const char *name, void (*entrypoint)()){
+80104020:	f3 0f 1e fb          	endbr32 
+80104024:	55                   	push   %ebp
+80104025:	89 e5                	mov    %esp,%ebp
+80104027:	57                   	push   %edi
+80104028:	56                   	push   %esi
+80104029:	53                   	push   %ebx
+8010402a:	83 ec 0c             	sub    $0xc,%esp
+8010402d:	8b 75 08             	mov    0x8(%ebp),%esi
+80104030:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  struct proc *p = allocproc();
+80104033:	e8 c8 f7 ff ff       	call   80103800 <allocproc>
+  if(p == 0)
+80104038:	85 c0                	test   %eax,%eax
+8010403a:	74 4c                	je     80104088 <create_kernel_process+0x68>
+8010403c:	89 c3                	mov    %eax,%ebx
+  if((p->pgdir = setupkvm()) == 0)
+8010403e:	e8 6d 3b 00 00       	call   80107bb0 <setupkvm>
+80104043:	89 43 04             	mov    %eax,0x4(%ebx)
+80104046:	85 c0                	test   %eax,%eax
+80104048:	74 4b                	je     80104095 <create_kernel_process+0x75>
+  p->context->eip = (uint)entrypoint;
+8010404a:	8b 43 1c             	mov    0x1c(%ebx),%eax
+  safestrcpy(p->name, name, sizeof(p->name));
+8010404d:	83 ec 04             	sub    $0x4,%esp
+  p->context->eip = (uint)entrypoint;
+80104050:	89 78 10             	mov    %edi,0x10(%eax)
+  safestrcpy(p->name, name, sizeof(p->name));
+80104053:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80104056:	6a 10                	push   $0x10
+80104058:	56                   	push   %esi
+80104059:	50                   	push   %eax
+8010405a:	e8 21 14 00 00       	call   80105480 <safestrcpy>
+  acquire(&ptable.lock);
+8010405f:	c7 04 24 e0 3a 11 80 	movl   $0x80113ae0,(%esp)
+80104066:	e8 45 11 00 00       	call   801051b0 <acquire>
+  p->state = RUNNABLE;
+8010406b:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+  release(&ptable.lock);
+80104072:	83 c4 10             	add    $0x10,%esp
+80104075:	c7 45 08 e0 3a 11 80 	movl   $0x80113ae0,0x8(%ebp)
+}
+8010407c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010407f:	5b                   	pop    %ebx
+80104080:	5e                   	pop    %esi
+80104081:	5f                   	pop    %edi
+80104082:	5d                   	pop    %ebp
+  release(&ptable.lock);
+80104083:	e9 e8 11 00 00       	jmp    80105270 <release>
+    panic("create_kernel_process failed");
+80104088:	83 ec 0c             	sub    $0xc,%esp
+8010408b:	68 f6 83 10 80       	push   $0x801083f6
+80104090:	e8 fb c2 ff ff       	call   80100390 <panic>
+    panic("setupkvm failed");
+80104095:	83 ec 0c             	sub    $0xc,%esp
+80104098:	68 13 84 10 80       	push   $0x80108413
+8010409d:	e8 ee c2 ff ff       	call   80100390 <panic>
+801040a2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801040a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801040b0 <userinit>:
+{
+801040b0:	f3 0f 1e fb          	endbr32 
+801040b4:	55                   	push   %ebp
+801040b5:	89 e5                	mov    %esp,%ebp
+801040b7:	53                   	push   %ebx
+801040b8:	83 ec 10             	sub    $0x10,%esp
+  acquire(&rqueue.lock);
+801040bb:	68 60 38 11 80       	push   $0x80113860
+801040c0:	e8 eb 10 00 00       	call   801051b0 <acquire>
+  release(&rqueue.lock);
+801040c5:	c7 04 24 60 38 11 80 	movl   $0x80113860,(%esp)
+  rqueue.s=0;
+801040cc:	c7 05 94 39 11 80 00 	movl   $0x0,0x80113994
+801040d3:	00 00 00 
+  rqueue.e=0;
+801040d6:	c7 05 98 39 11 80 00 	movl   $0x0,0x80113998
+801040dd:	00 00 00 
+  release(&rqueue.lock);
+801040e0:	e8 8b 11 00 00       	call   80105270 <release>
+  acquire(&rqueue2.lock);
+801040e5:	c7 04 24 a0 39 11 80 	movl   $0x801139a0,(%esp)
+801040ec:	e8 bf 10 00 00       	call   801051b0 <acquire>
+  release(&rqueue2.lock);
+801040f1:	c7 04 24 a0 39 11 80 	movl   $0x801139a0,(%esp)
+  rqueue2.s=0;
+801040f8:	c7 05 d4 3a 11 80 00 	movl   $0x0,0x80113ad4
+801040ff:	00 00 00 
+  rqueue2.e=0;
+80104102:	c7 05 d8 3a 11 80 00 	movl   $0x0,0x80113ad8
+80104109:	00 00 00 
+  release(&rqueue2.lock);
+8010410c:	e8 5f 11 00 00       	call   80105270 <release>
   p = allocproc();
-8010399b:	e8 f0 fd ff ff       	call   80103790 <allocproc>
-801039a0:	89 c3                	mov    %eax,%ebx
+80104111:	e8 ea f6 ff ff       	call   80103800 <allocproc>
+80104116:	89 c3                	mov    %eax,%ebx
   initproc = p;
-801039a2:	a3 b8 a5 10 80       	mov    %eax,0x8010a5b8
+80104118:	a3 c0 b5 10 80       	mov    %eax,0x8010b5c0
   if((p->pgdir = setupkvm()) == 0)
-801039a7:	e8 a4 34 00 00       	call   80106e50 <setupkvm>
-801039ac:	89 43 04             	mov    %eax,0x4(%ebx)
-801039af:	85 c0                	test   %eax,%eax
-801039b1:	0f 84 bd 00 00 00    	je     80103a74 <userinit+0xe4>
+8010411d:	e8 8e 3a 00 00       	call   80107bb0 <setupkvm>
+80104122:	83 c4 10             	add    $0x10,%esp
+80104125:	89 43 04             	mov    %eax,0x4(%ebx)
+80104128:	85 c0                	test   %eax,%eax
+8010412a:	0f 84 bd 00 00 00    	je     801041ed <userinit+0x13d>
   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
-801039b7:	83 ec 04             	sub    $0x4,%esp
-801039ba:	68 2c 00 00 00       	push   $0x2c
-801039bf:	68 60 a4 10 80       	push   $0x8010a460
-801039c4:	50                   	push   %eax
-801039c5:	e8 56 31 00 00       	call   80106b20 <inituvm>
+80104130:	83 ec 04             	sub    $0x4,%esp
+80104133:	68 2c 00 00 00       	push   $0x2c
+80104138:	68 60 b4 10 80       	push   $0x8010b460
+8010413d:	50                   	push   %eax
+8010413e:	e8 cd 36 00 00       	call   80107810 <inituvm>
   memset(p->tf, 0, sizeof(*p->tf));
-801039ca:	83 c4 0c             	add    $0xc,%esp
+80104143:	83 c4 0c             	add    $0xc,%esp
   p->sz = PGSIZE;
-801039cd:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
+80104146:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
   memset(p->tf, 0, sizeof(*p->tf));
-801039d3:	6a 4c                	push   $0x4c
-801039d5:	6a 00                	push   $0x0
-801039d7:	ff 73 18             	pushl  0x18(%ebx)
-801039da:	e8 91 0c 00 00       	call   80104670 <memset>
+8010414c:	6a 4c                	push   $0x4c
+8010414e:	6a 00                	push   $0x0
+80104150:	ff 73 18             	pushl  0x18(%ebx)
+80104153:	e8 68 11 00 00       	call   801052c0 <memset>
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-801039df:	8b 43 18             	mov    0x18(%ebx),%eax
-801039e2:	ba 1b 00 00 00       	mov    $0x1b,%edx
+80104158:	8b 43 18             	mov    0x18(%ebx),%eax
+8010415b:	ba 1b 00 00 00       	mov    $0x1b,%edx
   safestrcpy(p->name, "initcode", sizeof(p->name));
-801039e7:	83 c4 0c             	add    $0xc,%esp
+80104160:	83 c4 0c             	add    $0xc,%esp
   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-801039ea:	b9 23 00 00 00       	mov    $0x23,%ecx
+80104163:	b9 23 00 00 00       	mov    $0x23,%ecx
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-801039ef:	66 89 50 3c          	mov    %dx,0x3c(%eax)
+80104168:	66 89 50 3c          	mov    %dx,0x3c(%eax)
   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-801039f3:	8b 43 18             	mov    0x18(%ebx),%eax
-801039f6:	66 89 48 2c          	mov    %cx,0x2c(%eax)
+8010416c:	8b 43 18             	mov    0x18(%ebx),%eax
+8010416f:	66 89 48 2c          	mov    %cx,0x2c(%eax)
   p->tf->es = p->tf->ds;
-801039fa:	8b 43 18             	mov    0x18(%ebx),%eax
-801039fd:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
-80103a01:	66 89 50 28          	mov    %dx,0x28(%eax)
+80104173:	8b 43 18             	mov    0x18(%ebx),%eax
+80104176:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+8010417a:	66 89 50 28          	mov    %dx,0x28(%eax)
   p->tf->ss = p->tf->ds;
-80103a05:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a08:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
-80103a0c:	66 89 50 48          	mov    %dx,0x48(%eax)
+8010417e:	8b 43 18             	mov    0x18(%ebx),%eax
+80104181:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80104185:	66 89 50 48          	mov    %dx,0x48(%eax)
   p->tf->eflags = FL_IF;
-80103a10:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a13:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
+80104189:	8b 43 18             	mov    0x18(%ebx),%eax
+8010418c:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
   p->tf->esp = PGSIZE;
-80103a1a:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a1d:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
+80104193:	8b 43 18             	mov    0x18(%ebx),%eax
+80104196:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
   p->tf->eip = 0;  // beginning of initcode.S
-80103a24:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a27:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
+8010419d:	8b 43 18             	mov    0x18(%ebx),%eax
+801041a0:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
   safestrcpy(p->name, "initcode", sizeof(p->name));
-80103a2e:	8d 43 6c             	lea    0x6c(%ebx),%eax
-80103a31:	6a 10                	push   $0x10
-80103a33:	68 50 76 10 80       	push   $0x80107650
-80103a38:	50                   	push   %eax
-80103a39:	e8 f2 0d 00 00       	call   80104830 <safestrcpy>
+801041a7:	8d 43 6c             	lea    0x6c(%ebx),%eax
+801041aa:	6a 10                	push   $0x10
+801041ac:	68 3c 84 10 80       	push   $0x8010843c
+801041b1:	50                   	push   %eax
+801041b2:	e8 c9 12 00 00       	call   80105480 <safestrcpy>
   p->cwd = namei("/");
-80103a3e:	c7 04 24 59 76 10 80 	movl   $0x80107659,(%esp)
-80103a45:	e8 e6 e5 ff ff       	call   80102030 <namei>
-80103a4a:	89 43 68             	mov    %eax,0x68(%ebx)
+801041b7:	c7 04 24 45 84 10 80 	movl   $0x80108445,(%esp)
+801041be:	e8 6d de ff ff       	call   80102030 <namei>
+801041c3:	89 43 68             	mov    %eax,0x68(%ebx)
   acquire(&ptable.lock);
-80103a4d:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103a54:	e8 07 0b 00 00       	call   80104560 <acquire>
+801041c6:	c7 04 24 e0 3a 11 80 	movl   $0x80113ae0,(%esp)
+801041cd:	e8 de 0f 00 00       	call   801051b0 <acquire>
   p->state = RUNNABLE;
-80103a59:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+801041d2:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
   release(&ptable.lock);
-80103a60:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103a67:	e8 b4 0b 00 00       	call   80104620 <release>
+801041d9:	c7 04 24 e0 3a 11 80 	movl   $0x80113ae0,(%esp)
+801041e0:	e8 8b 10 00 00       	call   80105270 <release>
 }
-80103a6c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103a6f:	83 c4 10             	add    $0x10,%esp
-80103a72:	c9                   	leave  
-80103a73:	c3                   	ret    
+801041e5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801041e8:	83 c4 10             	add    $0x10,%esp
+801041eb:	c9                   	leave  
+801041ec:	c3                   	ret    
     panic("userinit: out of memory?");
-80103a74:	83 ec 0c             	sub    $0xc,%esp
-80103a77:	68 37 76 10 80       	push   $0x80107637
-80103a7c:	e8 0f c9 ff ff       	call   80100390 <panic>
-80103a81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103a88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103a8f:	90                   	nop
-
-80103a90 <growproc>:
-{
-80103a90:	f3 0f 1e fb          	endbr32 
-80103a94:	55                   	push   %ebp
-80103a95:	89 e5                	mov    %esp,%ebp
-80103a97:	56                   	push   %esi
-80103a98:	53                   	push   %ebx
-80103a99:	8b 75 08             	mov    0x8(%ebp),%esi
+801041ed:	83 ec 0c             	sub    $0xc,%esp
+801041f0:	68 23 84 10 80       	push   $0x80108423
+801041f5:	e8 96 c1 ff ff       	call   80100390 <panic>
+801041fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104200 <growproc>:
+{
+80104200:	f3 0f 1e fb          	endbr32 
+80104204:	55                   	push   %ebp
+80104205:	89 e5                	mov    %esp,%ebp
+80104207:	56                   	push   %esi
+80104208:	53                   	push   %ebx
+80104209:	8b 75 08             	mov    0x8(%ebp),%esi
   pushcli();
-80103a9c:	e8 bf 09 00 00       	call   80104460 <pushcli>
+8010420c:	e8 9f 0e 00 00       	call   801050b0 <pushcli>
   c = mycpu();
-80103aa1:	e8 2a fe ff ff       	call   801038d0 <mycpu>
+80104211:	e8 1a fa ff ff       	call   80103c30 <mycpu>
   p = c->proc;
-80103aa6:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80104216:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103aac:	e8 ff 09 00 00       	call   801044b0 <popcli>
+8010421c:	e8 df 0e 00 00       	call   80105100 <popcli>
   sz = curproc->sz;
-80103ab1:	8b 03                	mov    (%ebx),%eax
+80104221:	8b 03                	mov    (%ebx),%eax
   if(n > 0){
-80103ab3:	85 f6                	test   %esi,%esi
-80103ab5:	7f 19                	jg     80103ad0 <growproc+0x40>
+80104223:	85 f6                	test   %esi,%esi
+80104225:	7f 19                	jg     80104240 <growproc+0x40>
   } else if(n < 0){
-80103ab7:	75 37                	jne    80103af0 <growproc+0x60>
+80104227:	75 37                	jne    80104260 <growproc+0x60>
   switchuvm(curproc);
-80103ab9:	83 ec 0c             	sub    $0xc,%esp
+80104229:	83 ec 0c             	sub    $0xc,%esp
   curproc->sz = sz;
-80103abc:	89 03                	mov    %eax,(%ebx)
+8010422c:	89 03                	mov    %eax,(%ebx)
   switchuvm(curproc);
-80103abe:	53                   	push   %ebx
-80103abf:	e8 4c 2f 00 00       	call   80106a10 <switchuvm>
+8010422e:	53                   	push   %ebx
+8010422f:	e8 cc 34 00 00       	call   80107700 <switchuvm>
   return 0;
-80103ac4:	83 c4 10             	add    $0x10,%esp
-80103ac7:	31 c0                	xor    %eax,%eax
+80104234:	83 c4 10             	add    $0x10,%esp
+80104237:	31 c0                	xor    %eax,%eax
 }
-80103ac9:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103acc:	5b                   	pop    %ebx
-80103acd:	5e                   	pop    %esi
-80103ace:	5d                   	pop    %ebp
-80103acf:	c3                   	ret    
+80104239:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010423c:	5b                   	pop    %ebx
+8010423d:	5e                   	pop    %esi
+8010423e:	5d                   	pop    %ebp
+8010423f:	c3                   	ret    
     if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
-80103ad0:	83 ec 04             	sub    $0x4,%esp
-80103ad3:	01 c6                	add    %eax,%esi
-80103ad5:	56                   	push   %esi
-80103ad6:	50                   	push   %eax
-80103ad7:	ff 73 04             	pushl  0x4(%ebx)
-80103ada:	e8 91 31 00 00       	call   80106c70 <allocuvm>
-80103adf:	83 c4 10             	add    $0x10,%esp
-80103ae2:	85 c0                	test   %eax,%eax
-80103ae4:	75 d3                	jne    80103ab9 <growproc+0x29>
+80104240:	83 ec 04             	sub    $0x4,%esp
+80104243:	01 c6                	add    %eax,%esi
+80104245:	56                   	push   %esi
+80104246:	50                   	push   %eax
+80104247:	ff 73 04             	pushl  0x4(%ebx)
+8010424a:	e8 11 37 00 00       	call   80107960 <allocuvm>
+8010424f:	83 c4 10             	add    $0x10,%esp
+80104252:	85 c0                	test   %eax,%eax
+80104254:	75 d3                	jne    80104229 <growproc+0x29>
       return -1;
-80103ae6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80103aeb:	eb dc                	jmp    80103ac9 <growproc+0x39>
-80103aed:	8d 76 00             	lea    0x0(%esi),%esi
+80104256:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010425b:	eb dc                	jmp    80104239 <growproc+0x39>
+8010425d:	8d 76 00             	lea    0x0(%esi),%esi
     if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
-80103af0:	83 ec 04             	sub    $0x4,%esp
-80103af3:	01 c6                	add    %eax,%esi
-80103af5:	56                   	push   %esi
-80103af6:	50                   	push   %eax
-80103af7:	ff 73 04             	pushl  0x4(%ebx)
-80103afa:	e8 a1 32 00 00       	call   80106da0 <deallocuvm>
-80103aff:	83 c4 10             	add    $0x10,%esp
-80103b02:	85 c0                	test   %eax,%eax
-80103b04:	75 b3                	jne    80103ab9 <growproc+0x29>
-80103b06:	eb de                	jmp    80103ae6 <growproc+0x56>
-80103b08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103b0f:	90                   	nop
-
-80103b10 <fork>:
-{
-80103b10:	f3 0f 1e fb          	endbr32 
-80103b14:	55                   	push   %ebp
-80103b15:	89 e5                	mov    %esp,%ebp
-80103b17:	57                   	push   %edi
-80103b18:	56                   	push   %esi
-80103b19:	53                   	push   %ebx
-80103b1a:	83 ec 1c             	sub    $0x1c,%esp
+80104260:	83 ec 04             	sub    $0x4,%esp
+80104263:	01 c6                	add    %eax,%esi
+80104265:	56                   	push   %esi
+80104266:	50                   	push   %eax
+80104267:	ff 73 04             	pushl  0x4(%ebx)
+8010426a:	e8 91 38 00 00       	call   80107b00 <deallocuvm>
+8010426f:	83 c4 10             	add    $0x10,%esp
+80104272:	85 c0                	test   %eax,%eax
+80104274:	75 b3                	jne    80104229 <growproc+0x29>
+80104276:	eb de                	jmp    80104256 <growproc+0x56>
+80104278:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010427f:	90                   	nop
+
+80104280 <fork>:
+{
+80104280:	f3 0f 1e fb          	endbr32 
+80104284:	55                   	push   %ebp
+80104285:	89 e5                	mov    %esp,%ebp
+80104287:	57                   	push   %edi
+80104288:	56                   	push   %esi
+80104289:	53                   	push   %ebx
+8010428a:	83 ec 1c             	sub    $0x1c,%esp
   pushcli();
-80103b1d:	e8 3e 09 00 00       	call   80104460 <pushcli>
+8010428d:	e8 1e 0e 00 00       	call   801050b0 <pushcli>
   c = mycpu();
-80103b22:	e8 a9 fd ff ff       	call   801038d0 <mycpu>
+80104292:	e8 99 f9 ff ff       	call   80103c30 <mycpu>
   p = c->proc;
-80103b27:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80104297:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103b2d:	e8 7e 09 00 00       	call   801044b0 <popcli>
+8010429d:	e8 5e 0e 00 00       	call   80105100 <popcli>
   if((np = allocproc()) == 0){
-80103b32:	e8 59 fc ff ff       	call   80103790 <allocproc>
-80103b37:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80103b3a:	85 c0                	test   %eax,%eax
-80103b3c:	0f 84 bb 00 00 00    	je     80103bfd <fork+0xed>
+801042a2:	e8 59 f5 ff ff       	call   80103800 <allocproc>
+801042a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801042aa:	85 c0                	test   %eax,%eax
+801042ac:	0f 84 bb 00 00 00    	je     8010436d <fork+0xed>
   if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
-80103b42:	83 ec 08             	sub    $0x8,%esp
-80103b45:	ff 33                	pushl  (%ebx)
-80103b47:	89 c7                	mov    %eax,%edi
-80103b49:	ff 73 04             	pushl  0x4(%ebx)
-80103b4c:	e8 cf 33 00 00       	call   80106f20 <copyuvm>
-80103b51:	83 c4 10             	add    $0x10,%esp
-80103b54:	89 47 04             	mov    %eax,0x4(%edi)
-80103b57:	85 c0                	test   %eax,%eax
-80103b59:	0f 84 a5 00 00 00    	je     80103c04 <fork+0xf4>
+801042b2:	83 ec 08             	sub    $0x8,%esp
+801042b5:	ff 33                	pushl  (%ebx)
+801042b7:	89 c7                	mov    %eax,%edi
+801042b9:	ff 73 04             	pushl  0x4(%ebx)
+801042bc:	e8 bf 39 00 00       	call   80107c80 <copyuvm>
+801042c1:	83 c4 10             	add    $0x10,%esp
+801042c4:	89 47 04             	mov    %eax,0x4(%edi)
+801042c7:	85 c0                	test   %eax,%eax
+801042c9:	0f 84 a5 00 00 00    	je     80104374 <fork+0xf4>
   np->sz = curproc->sz;
-80103b5f:	8b 03                	mov    (%ebx),%eax
-80103b61:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80103b64:	89 01                	mov    %eax,(%ecx)
+801042cf:	8b 03                	mov    (%ebx),%eax
+801042d1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+801042d4:	89 01                	mov    %eax,(%ecx)
   *np->tf = *curproc->tf;
-80103b66:	8b 79 18             	mov    0x18(%ecx),%edi
+801042d6:	8b 79 18             	mov    0x18(%ecx),%edi
   np->parent = curproc;
-80103b69:	89 c8                	mov    %ecx,%eax
-80103b6b:	89 59 14             	mov    %ebx,0x14(%ecx)
+801042d9:	89 c8                	mov    %ecx,%eax
+801042db:	89 59 14             	mov    %ebx,0x14(%ecx)
   *np->tf = *curproc->tf;
-80103b6e:	b9 13 00 00 00       	mov    $0x13,%ecx
-80103b73:	8b 73 18             	mov    0x18(%ebx),%esi
-80103b76:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+801042de:	b9 13 00 00 00       	mov    $0x13,%ecx
+801042e3:	8b 73 18             	mov    0x18(%ebx),%esi
+801042e6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   for(i = 0; i < NOFILE; i++)
-80103b78:	31 f6                	xor    %esi,%esi
+801042e8:	31 f6                	xor    %esi,%esi
   np->tf->eax = 0;
-80103b7a:	8b 40 18             	mov    0x18(%eax),%eax
-80103b7d:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+801042ea:	8b 40 18             	mov    0x18(%eax),%eax
+801042ed:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   for(i = 0; i < NOFILE; i++)
-80103b84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801042f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[i])
-80103b88:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
-80103b8c:	85 c0                	test   %eax,%eax
-80103b8e:	74 13                	je     80103ba3 <fork+0x93>
+801042f8:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
+801042fc:	85 c0                	test   %eax,%eax
+801042fe:	74 13                	je     80104313 <fork+0x93>
       np->ofile[i] = filedup(curproc->ofile[i]);
-80103b90:	83 ec 0c             	sub    $0xc,%esp
-80103b93:	50                   	push   %eax
-80103b94:	e8 d7 d2 ff ff       	call   80100e70 <filedup>
-80103b99:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80103b9c:	83 c4 10             	add    $0x10,%esp
-80103b9f:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
+80104300:	83 ec 0c             	sub    $0xc,%esp
+80104303:	50                   	push   %eax
+80104304:	e8 67 cb ff ff       	call   80100e70 <filedup>
+80104309:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+8010430c:	83 c4 10             	add    $0x10,%esp
+8010430f:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
   for(i = 0; i < NOFILE; i++)
-80103ba3:	83 c6 01             	add    $0x1,%esi
-80103ba6:	83 fe 10             	cmp    $0x10,%esi
-80103ba9:	75 dd                	jne    80103b88 <fork+0x78>
+80104313:	83 c6 01             	add    $0x1,%esi
+80104316:	83 fe 10             	cmp    $0x10,%esi
+80104319:	75 dd                	jne    801042f8 <fork+0x78>
   np->cwd = idup(curproc->cwd);
-80103bab:	83 ec 0c             	sub    $0xc,%esp
-80103bae:	ff 73 68             	pushl  0x68(%ebx)
+8010431b:	83 ec 0c             	sub    $0xc,%esp
+8010431e:	ff 73 68             	pushl  0x68(%ebx)
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103bb1:	83 c3 6c             	add    $0x6c,%ebx
+80104321:	83 c3 6c             	add    $0x6c,%ebx
   np->cwd = idup(curproc->cwd);
-80103bb4:	e8 77 db ff ff       	call   80101730 <idup>
-80103bb9:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80104324:	e8 07 d4 ff ff       	call   80101730 <idup>
+80104329:	8b 7d e4             	mov    -0x1c(%ebp),%edi
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103bbc:	83 c4 0c             	add    $0xc,%esp
+8010432c:	83 c4 0c             	add    $0xc,%esp
   np->cwd = idup(curproc->cwd);
-80103bbf:	89 47 68             	mov    %eax,0x68(%edi)
+8010432f:	89 47 68             	mov    %eax,0x68(%edi)
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103bc2:	8d 47 6c             	lea    0x6c(%edi),%eax
-80103bc5:	6a 10                	push   $0x10
-80103bc7:	53                   	push   %ebx
-80103bc8:	50                   	push   %eax
-80103bc9:	e8 62 0c 00 00       	call   80104830 <safestrcpy>
+80104332:	8d 47 6c             	lea    0x6c(%edi),%eax
+80104335:	6a 10                	push   $0x10
+80104337:	53                   	push   %ebx
+80104338:	50                   	push   %eax
+80104339:	e8 42 11 00 00       	call   80105480 <safestrcpy>
   pid = np->pid;
-80103bce:	8b 5f 10             	mov    0x10(%edi),%ebx
+8010433e:	8b 5f 10             	mov    0x10(%edi),%ebx
   acquire(&ptable.lock);
-80103bd1:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103bd8:	e8 83 09 00 00       	call   80104560 <acquire>
+80104341:	c7 04 24 e0 3a 11 80 	movl   $0x80113ae0,(%esp)
+80104348:	e8 63 0e 00 00       	call   801051b0 <acquire>
   np->state = RUNNABLE;
-80103bdd:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
+8010434d:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
   release(&ptable.lock);
-80103be4:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103beb:	e8 30 0a 00 00       	call   80104620 <release>
+80104354:	c7 04 24 e0 3a 11 80 	movl   $0x80113ae0,(%esp)
+8010435b:	e8 10 0f 00 00       	call   80105270 <release>
   return pid;
-80103bf0:	83 c4 10             	add    $0x10,%esp
+80104360:	83 c4 10             	add    $0x10,%esp
 }
-80103bf3:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103bf6:	89 d8                	mov    %ebx,%eax
-80103bf8:	5b                   	pop    %ebx
-80103bf9:	5e                   	pop    %esi
-80103bfa:	5f                   	pop    %edi
-80103bfb:	5d                   	pop    %ebp
-80103bfc:	c3                   	ret    
+80104363:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104366:	89 d8                	mov    %ebx,%eax
+80104368:	5b                   	pop    %ebx
+80104369:	5e                   	pop    %esi
+8010436a:	5f                   	pop    %edi
+8010436b:	5d                   	pop    %ebp
+8010436c:	c3                   	ret    
     return -1;
-80103bfd:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80103c02:	eb ef                	jmp    80103bf3 <fork+0xe3>
+8010436d:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80104372:	eb ef                	jmp    80104363 <fork+0xe3>
     kfree(np->kstack);
-80103c04:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-80103c07:	83 ec 0c             	sub    $0xc,%esp
-80103c0a:	ff 73 08             	pushl  0x8(%ebx)
-80103c0d:	e8 5e e8 ff ff       	call   80102470 <kfree>
+80104374:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80104377:	83 ec 0c             	sub    $0xc,%esp
+8010437a:	ff 73 08             	pushl  0x8(%ebx)
+8010437d:	e8 ee e0 ff ff       	call   80102470 <kfree>
     np->kstack = 0;
-80103c12:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+80104382:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
     return -1;
-80103c19:	83 c4 10             	add    $0x10,%esp
+80104389:	83 c4 10             	add    $0x10,%esp
     np->state = UNUSED;
-80103c1c:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+8010438c:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
     return -1;
-80103c23:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80103c28:	eb c9                	jmp    80103bf3 <fork+0xe3>
-80103c2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80103c30 <scheduler>:
-{
-80103c30:	f3 0f 1e fb          	endbr32 
-80103c34:	55                   	push   %ebp
-80103c35:	89 e5                	mov    %esp,%ebp
-80103c37:	57                   	push   %edi
-80103c38:	56                   	push   %esi
-80103c39:	53                   	push   %ebx
-80103c3a:	83 ec 0c             	sub    $0xc,%esp
+80104393:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80104398:	eb c9                	jmp    80104363 <fork+0xe3>
+8010439a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801043a0 <scheduler>:
+{
+801043a0:	f3 0f 1e fb          	endbr32 
+801043a4:	55                   	push   %ebp
+801043a5:	89 e5                	mov    %esp,%ebp
+801043a7:	57                   	push   %edi
+801043a8:	56                   	push   %esi
+801043a9:	53                   	push   %ebx
+801043aa:	83 ec 1c             	sub    $0x1c,%esp
   struct cpu *c = mycpu();
-80103c3d:	e8 8e fc ff ff       	call   801038d0 <mycpu>
+801043ad:	e8 7e f8 ff ff       	call   80103c30 <mycpu>
   c->proc = 0;
-80103c42:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
-80103c49:	00 00 00 
+801043b2:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
+801043b9:	00 00 00 
   struct cpu *c = mycpu();
-80103c4c:	89 c6                	mov    %eax,%esi
+801043bc:	89 c3                	mov    %eax,%ebx
   c->proc = 0;
-80103c4e:	8d 78 04             	lea    0x4(%eax),%edi
-80103c51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801043be:	8d 40 04             	lea    0x4(%eax),%eax
+801043c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   asm volatile("sti");
-80103c58:	fb                   	sti    
+801043c4:	fb                   	sti    
     acquire(&ptable.lock);
-80103c59:	83 ec 0c             	sub    $0xc,%esp
+801043c5:	83 ec 0c             	sub    $0xc,%esp
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103c5c:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+801043c8:	bf 14 3b 11 80       	mov    $0x80113b14,%edi
     acquire(&ptable.lock);
-80103c61:	68 20 2d 11 80       	push   $0x80112d20
-80103c66:	e8 f5 08 00 00       	call   80104560 <acquire>
-80103c6b:	83 c4 10             	add    $0x10,%esp
-80103c6e:	66 90                	xchg   %ax,%ax
+801043cd:	68 e0 3a 11 80       	push   $0x80113ae0
+801043d2:	e8 d9 0d 00 00       	call   801051b0 <acquire>
+801043d7:	83 c4 10             	add    $0x10,%esp
+801043da:	eb 19                	jmp    801043f5 <scheduler+0x55>
+      if(p->state==UNUSED && p->name[0]=='*'){
+801043dc:	80 7f 6c 2a          	cmpb   $0x2a,0x6c(%edi)
+801043e0:	0f 84 d1 00 00 00    	je     801044b7 <scheduler+0x117>
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+801043e6:	83 ef 80             	sub    $0xffffff80,%edi
+801043e9:	81 ff 14 5b 11 80    	cmp    $0x80115b14,%edi
+801043ef:	0f 84 ad 00 00 00    	je     801044a2 <scheduler+0x102>
+      if(p->state==UNUSED && p->name[0]=='*'){
+801043f5:	8b 47 0c             	mov    0xc(%edi),%eax
+801043f8:	85 c0                	test   %eax,%eax
+801043fa:	74 e0                	je     801043dc <scheduler+0x3c>
       if(p->state != RUNNABLE)
-80103c70:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
-80103c74:	75 33                	jne    80103ca9 <scheduler+0x79>
+801043fc:	83 f8 03             	cmp    $0x3,%eax
+801043ff:	75 e5                	jne    801043e6 <scheduler+0x46>
+80104401:	31 f6                	xor    %esi,%esi
+80104403:	eb 0e                	jmp    80104413 <scheduler+0x73>
+80104405:	8d 76 00             	lea    0x0(%esi),%esi
+      for(int i=0;i<NPDENTRIES;i++){
+80104408:	83 c6 04             	add    $0x4,%esi
+8010440b:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+80104411:	74 4b                	je     8010445e <scheduler+0xbe>
+        if(((p->pgdir)[i])&PTE_P && ((p->pgdir)[i])&PTE_A){
+80104413:	8b 47 04             	mov    0x4(%edi),%eax
+80104416:	8b 0c 30             	mov    (%eax,%esi,1),%ecx
+80104419:	89 c8                	mov    %ecx,%eax
+8010441b:	83 e0 21             	and    $0x21,%eax
+8010441e:	83 f8 21             	cmp    $0x21,%eax
+80104421:	75 e5                	jne    80104408 <scheduler+0x68>
+          pte_t* pgtab = (pte_t*)P2V(PTE_ADDR((p->pgdir)[i]));
+80104423:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
+80104429:	8d 81 00 00 00 80    	lea    -0x80000000(%ecx),%eax
+          for(int j=0;j<NPTENTRIES;j++){
+8010442f:	81 e9 00 f0 ff 7f    	sub    $0x7ffff000,%ecx
+80104435:	8d 76 00             	lea    0x0(%esi),%esi
+            if(pgtab[j]&PTE_A){
+80104438:	8b 10                	mov    (%eax),%edx
+8010443a:	f6 c2 20             	test   $0x20,%dl
+8010443d:	74 05                	je     80104444 <scheduler+0xa4>
+              pgtab[j]^=PTE_A;
+8010443f:	83 f2 20             	xor    $0x20,%edx
+80104442:	89 10                	mov    %edx,(%eax)
+          for(int j=0;j<NPTENTRIES;j++){
+80104444:	83 c0 04             	add    $0x4,%eax
+80104447:	39 c1                	cmp    %eax,%ecx
+80104449:	75 ed                	jne    80104438 <scheduler+0x98>
+          ((p->pgdir)[i])^=PTE_A;
+8010444b:	8b 47 04             	mov    0x4(%edi),%eax
+8010444e:	01 f0                	add    %esi,%eax
+80104450:	83 c6 04             	add    $0x4,%esi
+80104453:	83 30 20             	xorl   $0x20,(%eax)
+      for(int i=0;i<NPDENTRIES;i++){
+80104456:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+8010445c:	75 b5                	jne    80104413 <scheduler+0x73>
       switchuvm(p);
-80103c76:	83 ec 0c             	sub    $0xc,%esp
+8010445e:	83 ec 0c             	sub    $0xc,%esp
       c->proc = p;
-80103c79:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
+80104461:	89 bb ac 00 00 00    	mov    %edi,0xac(%ebx)
       switchuvm(p);
-80103c7f:	53                   	push   %ebx
-80103c80:	e8 8b 2d 00 00       	call   80106a10 <switchuvm>
+80104467:	57                   	push   %edi
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104468:	83 ef 80             	sub    $0xffffff80,%edi
+      switchuvm(p);
+8010446b:	e8 90 32 00 00       	call   80107700 <switchuvm>
       swtch(&(c->scheduler), p->context);
-80103c85:	58                   	pop    %eax
-80103c86:	5a                   	pop    %edx
-80103c87:	ff 73 1c             	pushl  0x1c(%ebx)
-80103c8a:	57                   	push   %edi
+80104470:	58                   	pop    %eax
+80104471:	5a                   	pop    %edx
+80104472:	ff 77 9c             	pushl  -0x64(%edi)
+80104475:	ff 75 e4             	pushl  -0x1c(%ebp)
       p->state = RUNNING;
-80103c8b:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
+80104478:	c7 47 8c 04 00 00 00 	movl   $0x4,-0x74(%edi)
       swtch(&(c->scheduler), p->context);
-80103c92:	e8 fc 0b 00 00       	call   80104893 <swtch>
+8010447f:	e8 5f 10 00 00       	call   801054e3 <swtch>
       switchkvm();
-80103c97:	e8 54 2d 00 00       	call   801069f0 <switchkvm>
+80104484:	e8 57 32 00 00       	call   801076e0 <switchkvm>
       c->proc = 0;
-80103c9c:	83 c4 10             	add    $0x10,%esp
-80103c9f:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
-80103ca6:	00 00 00 
+80104489:	83 c4 10             	add    $0x10,%esp
+8010448c:	c7 83 ac 00 00 00 00 	movl   $0x0,0xac(%ebx)
+80104493:	00 00 00 
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103ca9:	83 c3 7c             	add    $0x7c,%ebx
-80103cac:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
-80103cb2:	75 bc                	jne    80103c70 <scheduler+0x40>
+80104496:	81 ff 14 5b 11 80    	cmp    $0x80115b14,%edi
+8010449c:	0f 85 53 ff ff ff    	jne    801043f5 <scheduler+0x55>
     release(&ptable.lock);
-80103cb4:	83 ec 0c             	sub    $0xc,%esp
-80103cb7:	68 20 2d 11 80       	push   $0x80112d20
-80103cbc:	e8 5f 09 00 00       	call   80104620 <release>
+801044a2:	83 ec 0c             	sub    $0xc,%esp
+801044a5:	68 e0 3a 11 80       	push   $0x80113ae0
+801044aa:	e8 c1 0d 00 00       	call   80105270 <release>
     sti();
-80103cc1:	83 c4 10             	add    $0x10,%esp
-80103cc4:	eb 92                	jmp    80103c58 <scheduler+0x28>
-80103cc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103ccd:	8d 76 00             	lea    0x0(%esi),%esi
-
-80103cd0 <sched>:
-{
-80103cd0:	f3 0f 1e fb          	endbr32 
-80103cd4:	55                   	push   %ebp
-80103cd5:	89 e5                	mov    %esp,%ebp
-80103cd7:	56                   	push   %esi
-80103cd8:	53                   	push   %ebx
+801044af:	83 c4 10             	add    $0x10,%esp
+801044b2:	e9 0d ff ff ff       	jmp    801043c4 <scheduler+0x24>
+        kfree(p->kstack);
+801044b7:	83 ec 0c             	sub    $0xc,%esp
+801044ba:	ff 77 08             	pushl  0x8(%edi)
+801044bd:	e8 ae df ff ff       	call   80102470 <kfree>
+        p->name[0]=0;
+801044c2:	c6 47 6c 00          	movb   $0x0,0x6c(%edi)
+801044c6:	8b 47 0c             	mov    0xc(%edi),%eax
+801044c9:	83 c4 10             	add    $0x10,%esp
+        p->kstack=0;
+801044cc:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%edi)
+        p->pid=0;
+801044d3:	c7 47 10 00 00 00 00 	movl   $0x0,0x10(%edi)
+801044da:	e9 1d ff ff ff       	jmp    801043fc <scheduler+0x5c>
+801044df:	90                   	nop
+
+801044e0 <sched>:
+{
+801044e0:	f3 0f 1e fb          	endbr32 
+801044e4:	55                   	push   %ebp
+801044e5:	89 e5                	mov    %esp,%ebp
+801044e7:	56                   	push   %esi
+801044e8:	53                   	push   %ebx
   pushcli();
-80103cd9:	e8 82 07 00 00       	call   80104460 <pushcli>
+801044e9:	e8 c2 0b 00 00       	call   801050b0 <pushcli>
   c = mycpu();
-80103cde:	e8 ed fb ff ff       	call   801038d0 <mycpu>
+801044ee:	e8 3d f7 ff ff       	call   80103c30 <mycpu>
   p = c->proc;
-80103ce3:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+801044f3:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103ce9:	e8 c2 07 00 00       	call   801044b0 <popcli>
+801044f9:	e8 02 0c 00 00       	call   80105100 <popcli>
   if(!holding(&ptable.lock))
-80103cee:	83 ec 0c             	sub    $0xc,%esp
-80103cf1:	68 20 2d 11 80       	push   $0x80112d20
-80103cf6:	e8 15 08 00 00       	call   80104510 <holding>
-80103cfb:	83 c4 10             	add    $0x10,%esp
-80103cfe:	85 c0                	test   %eax,%eax
-80103d00:	74 4f                	je     80103d51 <sched+0x81>
+801044fe:	83 ec 0c             	sub    $0xc,%esp
+80104501:	68 e0 3a 11 80       	push   $0x80113ae0
+80104506:	e8 55 0c 00 00       	call   80105160 <holding>
+8010450b:	83 c4 10             	add    $0x10,%esp
+8010450e:	85 c0                	test   %eax,%eax
+80104510:	74 4f                	je     80104561 <sched+0x81>
   if(mycpu()->ncli != 1)
-80103d02:	e8 c9 fb ff ff       	call   801038d0 <mycpu>
-80103d07:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
-80103d0e:	75 68                	jne    80103d78 <sched+0xa8>
+80104512:	e8 19 f7 ff ff       	call   80103c30 <mycpu>
+80104517:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
+8010451e:	75 68                	jne    80104588 <sched+0xa8>
   if(p->state == RUNNING)
-80103d10:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
-80103d14:	74 55                	je     80103d6b <sched+0x9b>
+80104520:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
+80104524:	74 55                	je     8010457b <sched+0x9b>
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-80103d16:	9c                   	pushf  
-80103d17:	58                   	pop    %eax
+80104526:	9c                   	pushf  
+80104527:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-80103d18:	f6 c4 02             	test   $0x2,%ah
-80103d1b:	75 41                	jne    80103d5e <sched+0x8e>
+80104528:	f6 c4 02             	test   $0x2,%ah
+8010452b:	75 41                	jne    8010456e <sched+0x8e>
   intena = mycpu()->intena;
-80103d1d:	e8 ae fb ff ff       	call   801038d0 <mycpu>
+8010452d:	e8 fe f6 ff ff       	call   80103c30 <mycpu>
   swtch(&p->context, mycpu()->scheduler);
-80103d22:	83 c3 1c             	add    $0x1c,%ebx
+80104532:	83 c3 1c             	add    $0x1c,%ebx
   intena = mycpu()->intena;
-80103d25:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
+80104535:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
   swtch(&p->context, mycpu()->scheduler);
-80103d2b:	e8 a0 fb ff ff       	call   801038d0 <mycpu>
-80103d30:	83 ec 08             	sub    $0x8,%esp
-80103d33:	ff 70 04             	pushl  0x4(%eax)
-80103d36:	53                   	push   %ebx
-80103d37:	e8 57 0b 00 00       	call   80104893 <swtch>
+8010453b:	e8 f0 f6 ff ff       	call   80103c30 <mycpu>
+80104540:	83 ec 08             	sub    $0x8,%esp
+80104543:	ff 70 04             	pushl  0x4(%eax)
+80104546:	53                   	push   %ebx
+80104547:	e8 97 0f 00 00       	call   801054e3 <swtch>
   mycpu()->intena = intena;
-80103d3c:	e8 8f fb ff ff       	call   801038d0 <mycpu>
+8010454c:	e8 df f6 ff ff       	call   80103c30 <mycpu>
 }
-80103d41:	83 c4 10             	add    $0x10,%esp
+80104551:	83 c4 10             	add    $0x10,%esp
   mycpu()->intena = intena;
-80103d44:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
+80104554:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
 }
-80103d4a:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103d4d:	5b                   	pop    %ebx
-80103d4e:	5e                   	pop    %esi
-80103d4f:	5d                   	pop    %ebp
-80103d50:	c3                   	ret    
+8010455a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010455d:	5b                   	pop    %ebx
+8010455e:	5e                   	pop    %esi
+8010455f:	5d                   	pop    %ebp
+80104560:	c3                   	ret    
     panic("sched ptable.lock");
-80103d51:	83 ec 0c             	sub    $0xc,%esp
-80103d54:	68 5b 76 10 80       	push   $0x8010765b
-80103d59:	e8 32 c6 ff ff       	call   80100390 <panic>
+80104561:	83 ec 0c             	sub    $0xc,%esp
+80104564:	68 47 84 10 80       	push   $0x80108447
+80104569:	e8 22 be ff ff       	call   80100390 <panic>
     panic("sched interruptible");
-80103d5e:	83 ec 0c             	sub    $0xc,%esp
-80103d61:	68 87 76 10 80       	push   $0x80107687
-80103d66:	e8 25 c6 ff ff       	call   80100390 <panic>
+8010456e:	83 ec 0c             	sub    $0xc,%esp
+80104571:	68 73 84 10 80       	push   $0x80108473
+80104576:	e8 15 be ff ff       	call   80100390 <panic>
     panic("sched running");
-80103d6b:	83 ec 0c             	sub    $0xc,%esp
-80103d6e:	68 79 76 10 80       	push   $0x80107679
-80103d73:	e8 18 c6 ff ff       	call   80100390 <panic>
+8010457b:	83 ec 0c             	sub    $0xc,%esp
+8010457e:	68 65 84 10 80       	push   $0x80108465
+80104583:	e8 08 be ff ff       	call   80100390 <panic>
     panic("sched locks");
-80103d78:	83 ec 0c             	sub    $0xc,%esp
-80103d7b:	68 6d 76 10 80       	push   $0x8010766d
-80103d80:	e8 0b c6 ff ff       	call   80100390 <panic>
-80103d85:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103d8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80103d90 <exit>:
-{
-80103d90:	f3 0f 1e fb          	endbr32 
-80103d94:	55                   	push   %ebp
-80103d95:	89 e5                	mov    %esp,%ebp
-80103d97:	57                   	push   %edi
-80103d98:	56                   	push   %esi
-80103d99:	53                   	push   %ebx
-80103d9a:	83 ec 0c             	sub    $0xc,%esp
+80104588:	83 ec 0c             	sub    $0xc,%esp
+8010458b:	68 59 84 10 80       	push   $0x80108459
+80104590:	e8 fb bd ff ff       	call   80100390 <panic>
+80104595:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010459c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801045a0 <swap_out_process_function>:
+void swap_out_process_function(){
+801045a0:	f3 0f 1e fb          	endbr32 
+801045a4:	55                   	push   %ebp
+801045a5:	89 e5                	mov    %esp,%ebp
+801045a7:	57                   	push   %edi
+801045a8:	56                   	push   %esi
+801045a9:	53                   	push   %ebx
+801045aa:	83 ec 68             	sub    $0x68,%esp
+  acquire(&rqueue.lock);
+801045ad:	68 60 38 11 80       	push   $0x80113860
+801045b2:	e8 f9 0b 00 00       	call   801051b0 <acquire>
+  while(rqueue.s!=rqueue.e){
+801045b7:	a1 94 39 11 80       	mov    0x80113994,%eax
+801045bc:	83 c4 10             	add    $0x10,%esp
+801045bf:	39 05 98 39 11 80    	cmp    %eax,0x80113998
+801045c5:	0f 84 68 01 00 00    	je     80104733 <swap_out_process_function+0x193>
+801045cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801045cf:	90                   	nop
+    struct proc *p=rpop();
+801045d0:	e8 fb f3 ff ff       	call   801039d0 <rpop>
+    for(int i=0;i<NPDENTRIES;i++){
+801045d5:	31 f6                	xor    %esi,%esi
+    struct proc *p=rpop();
+801045d7:	89 45 9c             	mov    %eax,-0x64(%ebp)
+    pde_t* pd = p->pgdir;
+801045da:	8b 40 04             	mov    0x4(%eax),%eax
+801045dd:	89 45 a0             	mov    %eax,-0x60(%ebp)
+    for(int i=0;i<NPDENTRIES;i++){
+801045e0:	eb 15                	jmp    801045f7 <swap_out_process_function+0x57>
+801045e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801045e8:	83 c6 01             	add    $0x1,%esi
+801045eb:	81 fe 00 04 00 00    	cmp    $0x400,%esi
+801045f1:	0f 84 2b 01 00 00    	je     80104722 <swap_out_process_function+0x182>
+      if(pd[i]&PTE_A)
+801045f7:	8b 45 a0             	mov    -0x60(%ebp),%eax
+801045fa:	8b 1c b0             	mov    (%eax,%esi,4),%ebx
+801045fd:	f6 c3 20             	test   $0x20,%bl
+80104600:	75 e6                	jne    801045e8 <swap_out_process_function+0x48>
+      pte_t *pgtab = (pte_t*)P2V(PTE_ADDR(pd[i]));
+80104602:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+      for(int j=0;j<NPTENTRIES;j++){
+80104608:	31 d2                	xor    %edx,%edx
+        if((pgtab[j]&PTE_A) || !(pgtab[j]&PTE_P))
+8010460a:	8b 83 00 00 00 80    	mov    -0x80000000(%ebx),%eax
+      pte_t *pgtab = (pte_t*)P2V(PTE_ADDR(pd[i]));
+80104610:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
+        if((pgtab[j]&PTE_A) || !(pgtab[j]&PTE_P))
+80104616:	89 c1                	mov    %eax,%ecx
+80104618:	83 e1 21             	and    $0x21,%ecx
+8010461b:	83 f9 01             	cmp    $0x1,%ecx
+8010461e:	74 1a                	je     8010463a <swap_out_process_function+0x9a>
+      for(int j=0;j<NPTENTRIES;j++){
+80104620:	83 c2 01             	add    $0x1,%edx
+80104623:	83 c3 04             	add    $0x4,%ebx
+80104626:	81 fa 00 04 00 00    	cmp    $0x400,%edx
+8010462c:	74 ba                	je     801045e8 <swap_out_process_function+0x48>
+        if((pgtab[j]&PTE_A) || !(pgtab[j]&PTE_P))
+8010462e:	8b 03                	mov    (%ebx),%eax
+80104630:	89 c1                	mov    %eax,%ecx
+80104632:	83 e1 21             	and    $0x21,%ecx
+80104635:	83 f9 01             	cmp    $0x1,%ecx
+80104638:	75 e6                	jne    80104620 <swap_out_process_function+0x80>
+        pte_t *pte=(pte_t*)P2V(PTE_ADDR(pgtab[j]));
+8010463a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+        int virt = ((1<<22)*i)+((1<<12)*j);
+8010463f:	89 f7                	mov    %esi,%edi
+        pte_t *pte=(pte_t*)P2V(PTE_ADDR(pgtab[j]));
+80104641:	05 00 00 00 80       	add    $0x80000000,%eax
+        int virt = ((1<<22)*i)+((1<<12)*j);
+80104646:	c1 e7 0a             	shl    $0xa,%edi
+        pte_t *pte=(pte_t*)P2V(PTE_ADDR(pgtab[j]));
+80104649:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+        int pid=p->pid;
+8010464c:	8b 45 9c             	mov    -0x64(%ebp),%eax
+        int virt = ((1<<22)*i)+((1<<12)*j);
+8010464f:	01 d7                	add    %edx,%edi
+80104651:	c1 e7 0c             	shl    $0xc,%edi
+        int pid=p->pid;
+80104654:	8b 40 10             	mov    0x10(%eax),%eax
+  if(x==0)
+80104657:	85 c0                	test   %eax,%eax
+80104659:	0f 84 31 01 00 00    	je     80104790 <swap_out_process_function+0x1f0>
+8010465f:	8d 55 b6             	lea    -0x4a(%ebp),%edx
+80104662:	e8 b9 f2 ff ff       	call   80103920 <int_to_string.part.0>
+        int x=strlen(c);
+80104667:	83 ec 0c             	sub    $0xc,%esp
+8010466a:	8d 45 b6             	lea    -0x4a(%ebp),%eax
+8010466d:	50                   	push   %eax
+8010466e:	e8 4d 0e 00 00       	call   801054c0 <strlen>
+  if(x==0)
+80104673:	83 c4 10             	add    $0x10,%esp
+        c[x]='_';
+80104676:	c6 44 05 b6 5f       	movb   $0x5f,-0x4a(%ebp,%eax,1)
+        int_to_string(virt,c+x+1);
+8010467b:	8d 54 05 b7          	lea    -0x49(%ebp,%eax,1),%edx
+  if(x==0)
+8010467f:	85 ff                	test   %edi,%edi
+80104681:	0f 84 19 01 00 00    	je     801047a0 <swap_out_process_function+0x200>
+80104687:	89 f8                	mov    %edi,%eax
+80104689:	e8 92 f2 ff ff       	call   80103920 <int_to_string.part.0>
+        safestrcpy(c+strlen(c),".swp",5);
+8010468e:	83 ec 0c             	sub    $0xc,%esp
+80104691:	8d 45 b6             	lea    -0x4a(%ebp),%eax
+80104694:	50                   	push   %eax
+80104695:	e8 26 0e 00 00       	call   801054c0 <strlen>
+8010469a:	8d 4d b6             	lea    -0x4a(%ebp),%ecx
+8010469d:	83 c4 0c             	add    $0xc,%esp
+801046a0:	01 c8                	add    %ecx,%eax
+801046a2:	6a 05                	push   $0x5
+801046a4:	68 87 84 10 80       	push   $0x80108487
+801046a9:	50                   	push   %eax
+801046aa:	e8 d1 0d 00 00       	call   80105480 <safestrcpy>
+        int fd=proc_open(c, O_CREATE | O_RDWR);
+801046af:	8d 45 b6             	lea    -0x4a(%ebp),%eax
+801046b2:	5a                   	pop    %edx
+801046b3:	59                   	pop    %ecx
+801046b4:	68 02 02 00 00       	push   $0x202
+801046b9:	50                   	push   %eax
+801046ba:	e8 e1 f6 ff ff       	call   80103da0 <proc_open>
+        if(fd<0){
+801046bf:	83 c4 10             	add    $0x10,%esp
+        int fd=proc_open(c, O_CREATE | O_RDWR);
+801046c2:	89 c7                	mov    %eax,%edi
+        if(fd<0){
+801046c4:	85 c0                	test   %eax,%eax
+801046c6:	0f 88 e1 00 00 00    	js     801047ad <swap_out_process_function+0x20d>
+        if(proc_write(fd,(char *)pte, PGSIZE) != PGSIZE){
+801046cc:	83 ec 04             	sub    $0x4,%esp
+801046cf:	68 00 10 00 00       	push   $0x1000
+801046d4:	ff 75 a4             	pushl  -0x5c(%ebp)
+801046d7:	50                   	push   %eax
+801046d8:	e8 53 f6 ff ff       	call   80103d30 <proc_write>
+801046dd:	83 c4 10             	add    $0x10,%esp
+801046e0:	3d 00 10 00 00       	cmp    $0x1000,%eax
+801046e5:	0f 85 df 00 00 00    	jne    801047ca <swap_out_process_function+0x22a>
+        proc_close(fd);
+801046eb:	83 ec 0c             	sub    $0xc,%esp
+    for(int i=0;i<NPDENTRIES;i++){
+801046ee:	83 c6 01             	add    $0x1,%esi
+        proc_close(fd);
+801046f1:	57                   	push   %edi
+801046f2:	e8 b9 f5 ff ff       	call   80103cb0 <proc_close>
+        kfree((char*)pte);
+801046f7:	58                   	pop    %eax
+801046f8:	ff 75 a4             	pushl  -0x5c(%ebp)
+801046fb:	e8 70 dd ff ff       	call   80102470 <kfree>
+        memset(&pgtab[j],0,sizeof(pgtab[j]));
+80104700:	83 c4 0c             	add    $0xc,%esp
+80104703:	6a 04                	push   $0x4
+80104705:	6a 00                	push   $0x0
+80104707:	53                   	push   %ebx
+80104708:	e8 b3 0b 00 00       	call   801052c0 <memset>
+        pgtab[j]=((pgtab[j])^(0x080));
+8010470d:	81 33 80 00 00 00    	xorl   $0x80,(%ebx)
+        break;
+80104713:	83 c4 10             	add    $0x10,%esp
+    for(int i=0;i<NPDENTRIES;i++){
+80104716:	81 fe 00 04 00 00    	cmp    $0x400,%esi
+8010471c:	0f 85 d5 fe ff ff    	jne    801045f7 <swap_out_process_function+0x57>
+  while(rqueue.s!=rqueue.e){
+80104722:	a1 98 39 11 80       	mov    0x80113998,%eax
+80104727:	39 05 94 39 11 80    	cmp    %eax,0x80113994
+8010472d:	0f 85 9d fe ff ff    	jne    801045d0 <swap_out_process_function+0x30>
+  release(&rqueue.lock);
+80104733:	83 ec 0c             	sub    $0xc,%esp
+80104736:	68 60 38 11 80       	push   $0x80113860
+8010473b:	e8 30 0b 00 00       	call   80105270 <release>
+  pushcli();
+80104740:	e8 6b 09 00 00       	call   801050b0 <pushcli>
+  c = mycpu();
+80104745:	e8 e6 f4 ff ff       	call   80103c30 <mycpu>
+  p = c->proc;
+8010474a:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80104750:	e8 ab 09 00 00       	call   80105100 <popcli>
+  if((p=myproc())==0)
+80104755:	83 c4 10             	add    $0x10,%esp
+80104758:	85 db                	test   %ebx,%ebx
+8010475a:	0f 84 87 00 00 00    	je     801047e7 <swap_out_process_function+0x247>
+  p->parent = 0;
+80104760:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+  p->name[0] = '*';
+80104767:	c6 43 6c 2a          	movb   $0x2a,0x6c(%ebx)
+  p->killed = 0;
+8010476b:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+  p->state = UNUSED;
+80104772:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+  swap_out_process_exists=0;
+80104779:	c7 05 bc b5 10 80 00 	movl   $0x0,0x8010b5bc
+80104780:	00 00 00 
+  sched();
+80104783:	e8 58 fd ff ff       	call   801044e0 <sched>
+}
+80104788:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010478b:	5b                   	pop    %ebx
+8010478c:	5e                   	pop    %esi
+8010478d:	5f                   	pop    %edi
+8010478e:	5d                   	pop    %ebp
+8010478f:	c3                   	ret    
+    c[0]='0';
+80104790:	b8 30 00 00 00       	mov    $0x30,%eax
+80104795:	66 89 45 b6          	mov    %ax,-0x4a(%ebp)
+    return;
+80104799:	e9 c9 fe ff ff       	jmp    80104667 <swap_out_process_function+0xc7>
+8010479e:	66 90                	xchg   %ax,%ax
+    c[0]='0';
+801047a0:	bf 30 00 00 00       	mov    $0x30,%edi
+801047a5:	66 89 3a             	mov    %di,(%edx)
+    return;
+801047a8:	e9 e1 fe ff ff       	jmp    8010468e <swap_out_process_function+0xee>
+          cprintf("error creating or opening file: %s\n", c);
+801047ad:	83 ec 08             	sub    $0x8,%esp
+801047b0:	8d 45 b6             	lea    -0x4a(%ebp),%eax
+801047b3:	50                   	push   %eax
+801047b4:	68 74 85 10 80       	push   $0x80108574
+801047b9:	e8 f2 be ff ff       	call   801006b0 <cprintf>
+          panic("swap_out_process");
+801047be:	c7 04 24 8c 84 10 80 	movl   $0x8010848c,(%esp)
+801047c5:	e8 c6 bb ff ff       	call   80100390 <panic>
+          cprintf("error writing to file: %s\n", c);
+801047ca:	83 ec 08             	sub    $0x8,%esp
+801047cd:	8d 45 b6             	lea    -0x4a(%ebp),%eax
+801047d0:	50                   	push   %eax
+801047d1:	68 9d 84 10 80       	push   $0x8010849d
+801047d6:	e8 d5 be ff ff       	call   801006b0 <cprintf>
+          panic("swap_out_process");
+801047db:	c7 04 24 8c 84 10 80 	movl   $0x8010848c,(%esp)
+801047e2:	e8 a9 bb ff ff       	call   80100390 <panic>
+    panic("swap out process");
+801047e7:	83 ec 0c             	sub    $0xc,%esp
+801047ea:	68 b8 84 10 80       	push   $0x801084b8
+801047ef:	e8 9c bb ff ff       	call   80100390 <panic>
+801047f4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801047fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801047ff:	90                   	nop
+
+80104800 <exit>:
+{
+80104800:	f3 0f 1e fb          	endbr32 
+80104804:	55                   	push   %ebp
+80104805:	89 e5                	mov    %esp,%ebp
+80104807:	57                   	push   %edi
+80104808:	56                   	push   %esi
+80104809:	53                   	push   %ebx
+8010480a:	83 ec 0c             	sub    $0xc,%esp
   pushcli();
-80103d9d:	e8 be 06 00 00       	call   80104460 <pushcli>
+8010480d:	e8 9e 08 00 00       	call   801050b0 <pushcli>
   c = mycpu();
-80103da2:	e8 29 fb ff ff       	call   801038d0 <mycpu>
+80104812:	e8 19 f4 ff ff       	call   80103c30 <mycpu>
   p = c->proc;
-80103da7:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+80104817:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
   popcli();
-80103dad:	e8 fe 06 00 00       	call   801044b0 <popcli>
+8010481d:	e8 de 08 00 00       	call   80105100 <popcli>
   if(curproc == initproc)
-80103db2:	8d 5e 28             	lea    0x28(%esi),%ebx
-80103db5:	8d 7e 68             	lea    0x68(%esi),%edi
-80103db8:	39 35 b8 a5 10 80    	cmp    %esi,0x8010a5b8
-80103dbe:	0f 84 f3 00 00 00    	je     80103eb7 <exit+0x127>
-80103dc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104822:	8d 5e 28             	lea    0x28(%esi),%ebx
+80104825:	8d 7e 68             	lea    0x68(%esi),%edi
+80104828:	39 35 c0 b5 10 80    	cmp    %esi,0x8010b5c0
+8010482e:	0f 84 f3 00 00 00    	je     80104927 <exit+0x127>
+80104834:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[fd]){
-80103dc8:	8b 03                	mov    (%ebx),%eax
-80103dca:	85 c0                	test   %eax,%eax
-80103dcc:	74 12                	je     80103de0 <exit+0x50>
+80104838:	8b 03                	mov    (%ebx),%eax
+8010483a:	85 c0                	test   %eax,%eax
+8010483c:	74 12                	je     80104850 <exit+0x50>
       fileclose(curproc->ofile[fd]);
-80103dce:	83 ec 0c             	sub    $0xc,%esp
-80103dd1:	50                   	push   %eax
-80103dd2:	e8 e9 d0 ff ff       	call   80100ec0 <fileclose>
+8010483e:	83 ec 0c             	sub    $0xc,%esp
+80104841:	50                   	push   %eax
+80104842:	e8 79 c6 ff ff       	call   80100ec0 <fileclose>
       curproc->ofile[fd] = 0;
-80103dd7:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-80103ddd:	83 c4 10             	add    $0x10,%esp
+80104847:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+8010484d:	83 c4 10             	add    $0x10,%esp
   for(fd = 0; fd < NOFILE; fd++){
-80103de0:	83 c3 04             	add    $0x4,%ebx
-80103de3:	39 df                	cmp    %ebx,%edi
-80103de5:	75 e1                	jne    80103dc8 <exit+0x38>
+80104850:	83 c3 04             	add    $0x4,%ebx
+80104853:	39 df                	cmp    %ebx,%edi
+80104855:	75 e1                	jne    80104838 <exit+0x38>
   begin_op();
-80103de7:	e8 44 ef ff ff       	call   80102d30 <begin_op>
+80104857:	e8 44 e5 ff ff       	call   80102da0 <begin_op>
   iput(curproc->cwd);
-80103dec:	83 ec 0c             	sub    $0xc,%esp
-80103def:	ff 76 68             	pushl  0x68(%esi)
-80103df2:	e8 99 da ff ff       	call   80101890 <iput>
+8010485c:	83 ec 0c             	sub    $0xc,%esp
+8010485f:	ff 76 68             	pushl  0x68(%esi)
+80104862:	e8 29 d0 ff ff       	call   80101890 <iput>
   end_op();
-80103df7:	e8 a4 ef ff ff       	call   80102da0 <end_op>
+80104867:	e8 a4 e5 ff ff       	call   80102e10 <end_op>
   curproc->cwd = 0;
-80103dfc:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
+8010486c:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
   acquire(&ptable.lock);
-80103e03:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103e0a:	e8 51 07 00 00       	call   80104560 <acquire>
+80104873:	c7 04 24 e0 3a 11 80 	movl   $0x80113ae0,(%esp)
+8010487a:	e8 31 09 00 00       	call   801051b0 <acquire>
   wakeup1(curproc->parent);
-80103e0f:	8b 56 14             	mov    0x14(%esi),%edx
-80103e12:	83 c4 10             	add    $0x10,%esp
+8010487f:	8b 56 14             	mov    0x14(%esi),%edx
+80104882:	83 c4 10             	add    $0x10,%esp
 static void
 wakeup1(void *chan)
 {
   struct proc *p;
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e15:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80103e1a:	eb 0e                	jmp    80103e2a <exit+0x9a>
-80103e1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103e20:	83 c0 7c             	add    $0x7c,%eax
-80103e23:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-80103e28:	74 1c                	je     80103e46 <exit+0xb6>
+80104885:	b8 14 3b 11 80       	mov    $0x80113b14,%eax
+8010488a:	eb 0e                	jmp    8010489a <exit+0x9a>
+8010488c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104890:	83 e8 80             	sub    $0xffffff80,%eax
+80104893:	3d 14 5b 11 80       	cmp    $0x80115b14,%eax
+80104898:	74 1c                	je     801048b6 <exit+0xb6>
     if(p->state == SLEEPING && p->chan == chan)
-80103e2a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80103e2e:	75 f0                	jne    80103e20 <exit+0x90>
-80103e30:	3b 50 20             	cmp    0x20(%eax),%edx
-80103e33:	75 eb                	jne    80103e20 <exit+0x90>
+8010489a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+8010489e:	75 f0                	jne    80104890 <exit+0x90>
+801048a0:	3b 50 20             	cmp    0x20(%eax),%edx
+801048a3:	75 eb                	jne    80104890 <exit+0x90>
       p->state = RUNNABLE;
-80103e35:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+801048a5:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e3c:	83 c0 7c             	add    $0x7c,%eax
-80103e3f:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-80103e44:	75 e4                	jne    80103e2a <exit+0x9a>
+801048ac:	83 e8 80             	sub    $0xffffff80,%eax
+801048af:	3d 14 5b 11 80       	cmp    $0x80115b14,%eax
+801048b4:	75 e4                	jne    8010489a <exit+0x9a>
       p->parent = initproc;
-80103e46:	8b 0d b8 a5 10 80    	mov    0x8010a5b8,%ecx
+801048b6:	8b 0d c0 b5 10 80    	mov    0x8010b5c0,%ecx
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103e4c:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
-80103e51:	eb 10                	jmp    80103e63 <exit+0xd3>
-80103e53:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103e57:	90                   	nop
-80103e58:	83 c2 7c             	add    $0x7c,%edx
-80103e5b:	81 fa 54 4c 11 80    	cmp    $0x80114c54,%edx
-80103e61:	74 3b                	je     80103e9e <exit+0x10e>
+801048bc:	ba 14 3b 11 80       	mov    $0x80113b14,%edx
+801048c1:	eb 10                	jmp    801048d3 <exit+0xd3>
+801048c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801048c7:	90                   	nop
+801048c8:	83 ea 80             	sub    $0xffffff80,%edx
+801048cb:	81 fa 14 5b 11 80    	cmp    $0x80115b14,%edx
+801048d1:	74 3b                	je     8010490e <exit+0x10e>
     if(p->parent == curproc){
-80103e63:	39 72 14             	cmp    %esi,0x14(%edx)
-80103e66:	75 f0                	jne    80103e58 <exit+0xc8>
+801048d3:	39 72 14             	cmp    %esi,0x14(%edx)
+801048d6:	75 f0                	jne    801048c8 <exit+0xc8>
       if(p->state == ZOMBIE)
-80103e68:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
+801048d8:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
       p->parent = initproc;
-80103e6c:	89 4a 14             	mov    %ecx,0x14(%edx)
+801048dc:	89 4a 14             	mov    %ecx,0x14(%edx)
       if(p->state == ZOMBIE)
-80103e6f:	75 e7                	jne    80103e58 <exit+0xc8>
+801048df:	75 e7                	jne    801048c8 <exit+0xc8>
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e71:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80103e76:	eb 12                	jmp    80103e8a <exit+0xfa>
-80103e78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103e7f:	90                   	nop
-80103e80:	83 c0 7c             	add    $0x7c,%eax
-80103e83:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-80103e88:	74 ce                	je     80103e58 <exit+0xc8>
+801048e1:	b8 14 3b 11 80       	mov    $0x80113b14,%eax
+801048e6:	eb 12                	jmp    801048fa <exit+0xfa>
+801048e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801048ef:	90                   	nop
+801048f0:	83 e8 80             	sub    $0xffffff80,%eax
+801048f3:	3d 14 5b 11 80       	cmp    $0x80115b14,%eax
+801048f8:	74 ce                	je     801048c8 <exit+0xc8>
     if(p->state == SLEEPING && p->chan == chan)
-80103e8a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80103e8e:	75 f0                	jne    80103e80 <exit+0xf0>
-80103e90:	3b 48 20             	cmp    0x20(%eax),%ecx
-80103e93:	75 eb                	jne    80103e80 <exit+0xf0>
+801048fa:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+801048fe:	75 f0                	jne    801048f0 <exit+0xf0>
+80104900:	3b 48 20             	cmp    0x20(%eax),%ecx
+80104903:	75 eb                	jne    801048f0 <exit+0xf0>
       p->state = RUNNABLE;
-80103e95:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-80103e9c:	eb e2                	jmp    80103e80 <exit+0xf0>
+80104905:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+8010490c:	eb e2                	jmp    801048f0 <exit+0xf0>
   curproc->state = ZOMBIE;
-80103e9e:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
+8010490e:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
   sched();
-80103ea5:	e8 26 fe ff ff       	call   80103cd0 <sched>
+80104915:	e8 c6 fb ff ff       	call   801044e0 <sched>
   panic("zombie exit");
-80103eaa:	83 ec 0c             	sub    $0xc,%esp
-80103ead:	68 a8 76 10 80       	push   $0x801076a8
-80103eb2:	e8 d9 c4 ff ff       	call   80100390 <panic>
+8010491a:	83 ec 0c             	sub    $0xc,%esp
+8010491d:	68 d6 84 10 80       	push   $0x801084d6
+80104922:	e8 69 ba ff ff       	call   80100390 <panic>
     panic("init exiting");
-80103eb7:	83 ec 0c             	sub    $0xc,%esp
-80103eba:	68 9b 76 10 80       	push   $0x8010769b
-80103ebf:	e8 cc c4 ff ff       	call   80100390 <panic>
-80103ec4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103ecb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103ecf:	90                   	nop
-
-80103ed0 <yield>:
-{
-80103ed0:	f3 0f 1e fb          	endbr32 
-80103ed4:	55                   	push   %ebp
-80103ed5:	89 e5                	mov    %esp,%ebp
-80103ed7:	53                   	push   %ebx
-80103ed8:	83 ec 10             	sub    $0x10,%esp
+80104927:	83 ec 0c             	sub    $0xc,%esp
+8010492a:	68 c9 84 10 80       	push   $0x801084c9
+8010492f:	e8 5c ba ff ff       	call   80100390 <panic>
+80104934:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010493b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010493f:	90                   	nop
+
+80104940 <yield>:
+{
+80104940:	f3 0f 1e fb          	endbr32 
+80104944:	55                   	push   %ebp
+80104945:	89 e5                	mov    %esp,%ebp
+80104947:	53                   	push   %ebx
+80104948:	83 ec 10             	sub    $0x10,%esp
   acquire(&ptable.lock);  //DOC: yieldlock
-80103edb:	68 20 2d 11 80       	push   $0x80112d20
-80103ee0:	e8 7b 06 00 00       	call   80104560 <acquire>
+8010494b:	68 e0 3a 11 80       	push   $0x80113ae0
+80104950:	e8 5b 08 00 00       	call   801051b0 <acquire>
   pushcli();
-80103ee5:	e8 76 05 00 00       	call   80104460 <pushcli>
+80104955:	e8 56 07 00 00       	call   801050b0 <pushcli>
   c = mycpu();
-80103eea:	e8 e1 f9 ff ff       	call   801038d0 <mycpu>
+8010495a:	e8 d1 f2 ff ff       	call   80103c30 <mycpu>
   p = c->proc;
-80103eef:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+8010495f:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103ef5:	e8 b6 05 00 00       	call   801044b0 <popcli>
+80104965:	e8 96 07 00 00       	call   80105100 <popcli>
   myproc()->state = RUNNABLE;
-80103efa:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+8010496a:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
   sched();
-80103f01:	e8 ca fd ff ff       	call   80103cd0 <sched>
+80104971:	e8 6a fb ff ff       	call   801044e0 <sched>
   release(&ptable.lock);
-80103f06:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103f0d:	e8 0e 07 00 00       	call   80104620 <release>
+80104976:	c7 04 24 e0 3a 11 80 	movl   $0x80113ae0,(%esp)
+8010497d:	e8 ee 08 00 00       	call   80105270 <release>
 }
-80103f12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103f15:	83 c4 10             	add    $0x10,%esp
-80103f18:	c9                   	leave  
-80103f19:	c3                   	ret    
-80103f1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80103f20 <sleep>:
-{
-80103f20:	f3 0f 1e fb          	endbr32 
-80103f24:	55                   	push   %ebp
-80103f25:	89 e5                	mov    %esp,%ebp
-80103f27:	57                   	push   %edi
-80103f28:	56                   	push   %esi
-80103f29:	53                   	push   %ebx
-80103f2a:	83 ec 0c             	sub    $0xc,%esp
-80103f2d:	8b 7d 08             	mov    0x8(%ebp),%edi
-80103f30:	8b 75 0c             	mov    0xc(%ebp),%esi
+80104982:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104985:	83 c4 10             	add    $0x10,%esp
+80104988:	c9                   	leave  
+80104989:	c3                   	ret    
+8010498a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104990 <sleep>:
+{
+80104990:	f3 0f 1e fb          	endbr32 
+80104994:	55                   	push   %ebp
+80104995:	89 e5                	mov    %esp,%ebp
+80104997:	57                   	push   %edi
+80104998:	56                   	push   %esi
+80104999:	53                   	push   %ebx
+8010499a:	83 ec 0c             	sub    $0xc,%esp
+8010499d:	8b 7d 08             	mov    0x8(%ebp),%edi
+801049a0:	8b 75 0c             	mov    0xc(%ebp),%esi
   pushcli();
-80103f33:	e8 28 05 00 00       	call   80104460 <pushcli>
+801049a3:	e8 08 07 00 00       	call   801050b0 <pushcli>
   c = mycpu();
-80103f38:	e8 93 f9 ff ff       	call   801038d0 <mycpu>
+801049a8:	e8 83 f2 ff ff       	call   80103c30 <mycpu>
   p = c->proc;
-80103f3d:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+801049ad:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103f43:	e8 68 05 00 00       	call   801044b0 <popcli>
+801049b3:	e8 48 07 00 00       	call   80105100 <popcli>
   if(p == 0)
-80103f48:	85 db                	test   %ebx,%ebx
-80103f4a:	0f 84 83 00 00 00    	je     80103fd3 <sleep+0xb3>
+801049b8:	85 db                	test   %ebx,%ebx
+801049ba:	0f 84 83 00 00 00    	je     80104a43 <sleep+0xb3>
   if(lk == 0)
-80103f50:	85 f6                	test   %esi,%esi
-80103f52:	74 72                	je     80103fc6 <sleep+0xa6>
+801049c0:	85 f6                	test   %esi,%esi
+801049c2:	74 72                	je     80104a36 <sleep+0xa6>
   if(lk != &ptable.lock){  //DOC: sleeplock0
-80103f54:	81 fe 20 2d 11 80    	cmp    $0x80112d20,%esi
-80103f5a:	74 4c                	je     80103fa8 <sleep+0x88>
+801049c4:	81 fe e0 3a 11 80    	cmp    $0x80113ae0,%esi
+801049ca:	74 4c                	je     80104a18 <sleep+0x88>
     acquire(&ptable.lock);  //DOC: sleeplock1
-80103f5c:	83 ec 0c             	sub    $0xc,%esp
-80103f5f:	68 20 2d 11 80       	push   $0x80112d20
-80103f64:	e8 f7 05 00 00       	call   80104560 <acquire>
+801049cc:	83 ec 0c             	sub    $0xc,%esp
+801049cf:	68 e0 3a 11 80       	push   $0x80113ae0
+801049d4:	e8 d7 07 00 00       	call   801051b0 <acquire>
     release(lk);
-80103f69:	89 34 24             	mov    %esi,(%esp)
-80103f6c:	e8 af 06 00 00       	call   80104620 <release>
+801049d9:	89 34 24             	mov    %esi,(%esp)
+801049dc:	e8 8f 08 00 00       	call   80105270 <release>
   p->chan = chan;
-80103f71:	89 7b 20             	mov    %edi,0x20(%ebx)
+801049e1:	89 7b 20             	mov    %edi,0x20(%ebx)
   p->state = SLEEPING;
-80103f74:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+801049e4:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
   sched();
-80103f7b:	e8 50 fd ff ff       	call   80103cd0 <sched>
+801049eb:	e8 f0 fa ff ff       	call   801044e0 <sched>
   p->chan = 0;
-80103f80:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+801049f0:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
     release(&ptable.lock);
-80103f87:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103f8e:	e8 8d 06 00 00       	call   80104620 <release>
+801049f7:	c7 04 24 e0 3a 11 80 	movl   $0x80113ae0,(%esp)
+801049fe:	e8 6d 08 00 00       	call   80105270 <release>
     acquire(lk);
-80103f93:	89 75 08             	mov    %esi,0x8(%ebp)
-80103f96:	83 c4 10             	add    $0x10,%esp
+80104a03:	89 75 08             	mov    %esi,0x8(%ebp)
+80104a06:	83 c4 10             	add    $0x10,%esp
 }
-80103f99:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103f9c:	5b                   	pop    %ebx
-80103f9d:	5e                   	pop    %esi
-80103f9e:	5f                   	pop    %edi
-80103f9f:	5d                   	pop    %ebp
+80104a09:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104a0c:	5b                   	pop    %ebx
+80104a0d:	5e                   	pop    %esi
+80104a0e:	5f                   	pop    %edi
+80104a0f:	5d                   	pop    %ebp
     acquire(lk);
-80103fa0:	e9 bb 05 00 00       	jmp    80104560 <acquire>
-80103fa5:	8d 76 00             	lea    0x0(%esi),%esi
+80104a10:	e9 9b 07 00 00       	jmp    801051b0 <acquire>
+80104a15:	8d 76 00             	lea    0x0(%esi),%esi
   p->chan = chan;
-80103fa8:	89 7b 20             	mov    %edi,0x20(%ebx)
+80104a18:	89 7b 20             	mov    %edi,0x20(%ebx)
   p->state = SLEEPING;
-80103fab:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+80104a1b:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
   sched();
-80103fb2:	e8 19 fd ff ff       	call   80103cd0 <sched>
+80104a22:	e8 b9 fa ff ff       	call   801044e0 <sched>
   p->chan = 0;
-80103fb7:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+80104a27:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
 }
-80103fbe:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103fc1:	5b                   	pop    %ebx
-80103fc2:	5e                   	pop    %esi
-80103fc3:	5f                   	pop    %edi
-80103fc4:	5d                   	pop    %ebp
-80103fc5:	c3                   	ret    
+80104a2e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104a31:	5b                   	pop    %ebx
+80104a32:	5e                   	pop    %esi
+80104a33:	5f                   	pop    %edi
+80104a34:	5d                   	pop    %ebp
+80104a35:	c3                   	ret    
     panic("sleep without lk");
-80103fc6:	83 ec 0c             	sub    $0xc,%esp
-80103fc9:	68 ba 76 10 80       	push   $0x801076ba
-80103fce:	e8 bd c3 ff ff       	call   80100390 <panic>
+80104a36:	83 ec 0c             	sub    $0xc,%esp
+80104a39:	68 e8 84 10 80       	push   $0x801084e8
+80104a3e:	e8 4d b9 ff ff       	call   80100390 <panic>
     panic("sleep");
-80103fd3:	83 ec 0c             	sub    $0xc,%esp
-80103fd6:	68 b4 76 10 80       	push   $0x801076b4
-80103fdb:	e8 b0 c3 ff ff       	call   80100390 <panic>
-
-80103fe0 <wait>:
-{
-80103fe0:	f3 0f 1e fb          	endbr32 
-80103fe4:	55                   	push   %ebp
-80103fe5:	89 e5                	mov    %esp,%ebp
-80103fe7:	56                   	push   %esi
-80103fe8:	53                   	push   %ebx
+80104a43:	83 ec 0c             	sub    $0xc,%esp
+80104a46:	68 e2 84 10 80       	push   $0x801084e2
+80104a4b:	e8 40 b9 ff ff       	call   80100390 <panic>
+
+80104a50 <wait>:
+{
+80104a50:	f3 0f 1e fb          	endbr32 
+80104a54:	55                   	push   %ebp
+80104a55:	89 e5                	mov    %esp,%ebp
+80104a57:	56                   	push   %esi
+80104a58:	53                   	push   %ebx
   pushcli();
-80103fe9:	e8 72 04 00 00       	call   80104460 <pushcli>
+80104a59:	e8 52 06 00 00       	call   801050b0 <pushcli>
   c = mycpu();
-80103fee:	e8 dd f8 ff ff       	call   801038d0 <mycpu>
+80104a5e:	e8 cd f1 ff ff       	call   80103c30 <mycpu>
   p = c->proc;
-80103ff3:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+80104a63:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
   popcli();
-80103ff9:	e8 b2 04 00 00       	call   801044b0 <popcli>
+80104a69:	e8 92 06 00 00       	call   80105100 <popcli>
   acquire(&ptable.lock);
-80103ffe:	83 ec 0c             	sub    $0xc,%esp
-80104001:	68 20 2d 11 80       	push   $0x80112d20
-80104006:	e8 55 05 00 00       	call   80104560 <acquire>
-8010400b:	83 c4 10             	add    $0x10,%esp
+80104a6e:	83 ec 0c             	sub    $0xc,%esp
+80104a71:	68 e0 3a 11 80       	push   $0x80113ae0
+80104a76:	e8 35 07 00 00       	call   801051b0 <acquire>
+80104a7b:	83 c4 10             	add    $0x10,%esp
     havekids = 0;
-8010400e:	31 c0                	xor    %eax,%eax
+80104a7e:	31 c0                	xor    %eax,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104010:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
-80104015:	eb 14                	jmp    8010402b <wait+0x4b>
-80104017:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010401e:	66 90                	xchg   %ax,%ax
-80104020:	83 c3 7c             	add    $0x7c,%ebx
-80104023:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
-80104029:	74 1b                	je     80104046 <wait+0x66>
+80104a80:	bb 14 3b 11 80       	mov    $0x80113b14,%ebx
+80104a85:	eb 14                	jmp    80104a9b <wait+0x4b>
+80104a87:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104a8e:	66 90                	xchg   %ax,%ax
+80104a90:	83 eb 80             	sub    $0xffffff80,%ebx
+80104a93:	81 fb 14 5b 11 80    	cmp    $0x80115b14,%ebx
+80104a99:	74 1b                	je     80104ab6 <wait+0x66>
       if(p->parent != curproc)
-8010402b:	39 73 14             	cmp    %esi,0x14(%ebx)
-8010402e:	75 f0                	jne    80104020 <wait+0x40>
+80104a9b:	39 73 14             	cmp    %esi,0x14(%ebx)
+80104a9e:	75 f0                	jne    80104a90 <wait+0x40>
       if(p->state == ZOMBIE){
-80104030:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
-80104034:	74 32                	je     80104068 <wait+0x88>
+80104aa0:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
+80104aa4:	74 32                	je     80104ad8 <wait+0x88>
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104036:	83 c3 7c             	add    $0x7c,%ebx
+80104aa6:	83 eb 80             	sub    $0xffffff80,%ebx
       havekids = 1;
-80104039:	b8 01 00 00 00       	mov    $0x1,%eax
+80104aa9:	b8 01 00 00 00       	mov    $0x1,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-8010403e:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
-80104044:	75 e5                	jne    8010402b <wait+0x4b>
+80104aae:	81 fb 14 5b 11 80    	cmp    $0x80115b14,%ebx
+80104ab4:	75 e5                	jne    80104a9b <wait+0x4b>
     if(!havekids || curproc->killed){
-80104046:	85 c0                	test   %eax,%eax
-80104048:	74 74                	je     801040be <wait+0xde>
-8010404a:	8b 46 24             	mov    0x24(%esi),%eax
-8010404d:	85 c0                	test   %eax,%eax
-8010404f:	75 6d                	jne    801040be <wait+0xde>
+80104ab6:	85 c0                	test   %eax,%eax
+80104ab8:	74 74                	je     80104b2e <wait+0xde>
+80104aba:	8b 46 24             	mov    0x24(%esi),%eax
+80104abd:	85 c0                	test   %eax,%eax
+80104abf:	75 6d                	jne    80104b2e <wait+0xde>
     sleep(curproc, &ptable.lock);  //DOC: wait-sleep
-80104051:	83 ec 08             	sub    $0x8,%esp
-80104054:	68 20 2d 11 80       	push   $0x80112d20
-80104059:	56                   	push   %esi
-8010405a:	e8 c1 fe ff ff       	call   80103f20 <sleep>
+80104ac1:	83 ec 08             	sub    $0x8,%esp
+80104ac4:	68 e0 3a 11 80       	push   $0x80113ae0
+80104ac9:	56                   	push   %esi
+80104aca:	e8 c1 fe ff ff       	call   80104990 <sleep>
     havekids = 0;
-8010405f:	83 c4 10             	add    $0x10,%esp
-80104062:	eb aa                	jmp    8010400e <wait+0x2e>
-80104064:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104acf:	83 c4 10             	add    $0x10,%esp
+80104ad2:	eb aa                	jmp    80104a7e <wait+0x2e>
+80104ad4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         kfree(p->kstack);
-80104068:	83 ec 0c             	sub    $0xc,%esp
-8010406b:	ff 73 08             	pushl  0x8(%ebx)
+80104ad8:	83 ec 0c             	sub    $0xc,%esp
+80104adb:	ff 73 08             	pushl  0x8(%ebx)
         pid = p->pid;
-8010406e:	8b 73 10             	mov    0x10(%ebx),%esi
+80104ade:	8b 73 10             	mov    0x10(%ebx),%esi
         kfree(p->kstack);
-80104071:	e8 fa e3 ff ff       	call   80102470 <kfree>
+80104ae1:	e8 8a d9 ff ff       	call   80102470 <kfree>
         freevm(p->pgdir);
-80104076:	5a                   	pop    %edx
-80104077:	ff 73 04             	pushl  0x4(%ebx)
+80104ae6:	5a                   	pop    %edx
+80104ae7:	ff 73 04             	pushl  0x4(%ebx)
         p->kstack = 0;
-8010407a:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+80104aea:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
         freevm(p->pgdir);
-80104081:	e8 4a 2d 00 00       	call   80106dd0 <freevm>
+80104af1:	e8 3a 30 00 00       	call   80107b30 <freevm>
         release(&ptable.lock);
-80104086:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80104af6:	c7 04 24 e0 3a 11 80 	movl   $0x80113ae0,(%esp)
         p->pid = 0;
-8010408d:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
+80104afd:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
         p->parent = 0;
-80104094:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+80104b04:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
         p->name[0] = 0;
-8010409b:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
+80104b0b:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
         p->killed = 0;
-8010409f:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+80104b0f:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
         p->state = UNUSED;
-801040a6:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80104b16:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
         release(&ptable.lock);
-801040ad:	e8 6e 05 00 00       	call   80104620 <release>
+80104b1d:	e8 4e 07 00 00       	call   80105270 <release>
         return pid;
-801040b2:	83 c4 10             	add    $0x10,%esp
+80104b22:	83 c4 10             	add    $0x10,%esp
 }
-801040b5:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801040b8:	89 f0                	mov    %esi,%eax
-801040ba:	5b                   	pop    %ebx
-801040bb:	5e                   	pop    %esi
-801040bc:	5d                   	pop    %ebp
-801040bd:	c3                   	ret    
+80104b25:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104b28:	89 f0                	mov    %esi,%eax
+80104b2a:	5b                   	pop    %ebx
+80104b2b:	5e                   	pop    %esi
+80104b2c:	5d                   	pop    %ebp
+80104b2d:	c3                   	ret    
       release(&ptable.lock);
-801040be:	83 ec 0c             	sub    $0xc,%esp
+80104b2e:	83 ec 0c             	sub    $0xc,%esp
       return -1;
-801040c1:	be ff ff ff ff       	mov    $0xffffffff,%esi
+80104b31:	be ff ff ff ff       	mov    $0xffffffff,%esi
       release(&ptable.lock);
-801040c6:	68 20 2d 11 80       	push   $0x80112d20
-801040cb:	e8 50 05 00 00       	call   80104620 <release>
+80104b36:	68 e0 3a 11 80       	push   $0x80113ae0
+80104b3b:	e8 30 07 00 00       	call   80105270 <release>
       return -1;
-801040d0:	83 c4 10             	add    $0x10,%esp
-801040d3:	eb e0                	jmp    801040b5 <wait+0xd5>
-801040d5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801040dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104b40:	83 c4 10             	add    $0x10,%esp
+80104b43:	eb e0                	jmp    80104b25 <wait+0xd5>
+80104b45:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104b4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801040e0 <wakeup>:
+80104b50 <wakeup>:
 }
 
 // Wake up all processes sleeping on chan.
 void
 wakeup(void *chan)
 {
-801040e0:	f3 0f 1e fb          	endbr32 
-801040e4:	55                   	push   %ebp
-801040e5:	89 e5                	mov    %esp,%ebp
-801040e7:	53                   	push   %ebx
-801040e8:	83 ec 10             	sub    $0x10,%esp
-801040eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104b50:	f3 0f 1e fb          	endbr32 
+80104b54:	55                   	push   %ebp
+80104b55:	89 e5                	mov    %esp,%ebp
+80104b57:	53                   	push   %ebx
+80104b58:	83 ec 10             	sub    $0x10,%esp
+80104b5b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ptable.lock);
-801040ee:	68 20 2d 11 80       	push   $0x80112d20
-801040f3:	e8 68 04 00 00       	call   80104560 <acquire>
-801040f8:	83 c4 10             	add    $0x10,%esp
+80104b5e:	68 e0 3a 11 80       	push   $0x80113ae0
+80104b63:	e8 48 06 00 00       	call   801051b0 <acquire>
+80104b68:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801040fb:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80104100:	eb 10                	jmp    80104112 <wakeup+0x32>
-80104102:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104108:	83 c0 7c             	add    $0x7c,%eax
-8010410b:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-80104110:	74 1c                	je     8010412e <wakeup+0x4e>
+80104b6b:	b8 14 3b 11 80       	mov    $0x80113b14,%eax
+80104b70:	eb 10                	jmp    80104b82 <wakeup+0x32>
+80104b72:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104b78:	83 e8 80             	sub    $0xffffff80,%eax
+80104b7b:	3d 14 5b 11 80       	cmp    $0x80115b14,%eax
+80104b80:	74 1c                	je     80104b9e <wakeup+0x4e>
     if(p->state == SLEEPING && p->chan == chan)
-80104112:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80104116:	75 f0                	jne    80104108 <wakeup+0x28>
-80104118:	3b 58 20             	cmp    0x20(%eax),%ebx
-8010411b:	75 eb                	jne    80104108 <wakeup+0x28>
+80104b82:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80104b86:	75 f0                	jne    80104b78 <wakeup+0x28>
+80104b88:	3b 58 20             	cmp    0x20(%eax),%ebx
+80104b8b:	75 eb                	jne    80104b78 <wakeup+0x28>
       p->state = RUNNABLE;
-8010411d:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80104b8d:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80104124:	83 c0 7c             	add    $0x7c,%eax
-80104127:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-8010412c:	75 e4                	jne    80104112 <wakeup+0x32>
+80104b94:	83 e8 80             	sub    $0xffffff80,%eax
+80104b97:	3d 14 5b 11 80       	cmp    $0x80115b14,%eax
+80104b9c:	75 e4                	jne    80104b82 <wakeup+0x32>
   wakeup1(chan);
   release(&ptable.lock);
-8010412e:	c7 45 08 20 2d 11 80 	movl   $0x80112d20,0x8(%ebp)
+80104b9e:	c7 45 08 e0 3a 11 80 	movl   $0x80113ae0,0x8(%ebp)
 }
-80104135:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104138:	c9                   	leave  
+80104ba5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104ba8:	c9                   	leave  
   release(&ptable.lock);
-80104139:	e9 e2 04 00 00       	jmp    80104620 <release>
-8010413e:	66 90                	xchg   %ax,%ax
+80104ba9:	e9 c2 06 00 00       	jmp    80105270 <release>
+80104bae:	66 90                	xchg   %ax,%ax
+
+80104bb0 <swap_in_process_function>:
+void swap_in_process_function(){
+80104bb0:	f3 0f 1e fb          	endbr32 
+80104bb4:	55                   	push   %ebp
+80104bb5:	89 e5                	mov    %esp,%ebp
+80104bb7:	57                   	push   %edi
+80104bb8:	56                   	push   %esi
+80104bb9:	53                   	push   %ebx
+80104bba:	83 ec 68             	sub    $0x68,%esp
+	acquire(&rqueue2.lock);
+80104bbd:	68 a0 39 11 80       	push   $0x801139a0
+80104bc2:	e8 e9 05 00 00       	call   801051b0 <acquire>
+	while(rqueue2.s!=rqueue2.e){
+80104bc7:	a1 d4 3a 11 80       	mov    0x80113ad4,%eax
+80104bcc:	83 c4 10             	add    $0x10,%esp
+80104bcf:	39 05 d8 3a 11 80    	cmp    %eax,0x80113ad8
+80104bd5:	0f 84 05 01 00 00    	je     80104ce0 <swap_in_process_function+0x130>
+80104bdb:	8d 75 b6             	lea    -0x4a(%ebp),%esi
+80104bde:	e9 c0 00 00 00       	jmp    80104ca3 <swap_in_process_function+0xf3>
+80104be3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104be7:	90                   	nop
+80104be8:	89 f2                	mov    %esi,%edx
+80104bea:	e8 31 ed ff ff       	call   80103920 <int_to_string.part.0>
+	    int x=strlen(c);
+80104bef:	83 ec 0c             	sub    $0xc,%esp
+80104bf2:	56                   	push   %esi
+80104bf3:	e8 c8 08 00 00       	call   801054c0 <strlen>
+  if(x==0)
+80104bf8:	83 c4 10             	add    $0x10,%esp
+	    c[x]='_';
+80104bfb:	c6 44 05 b6 5f       	movb   $0x5f,-0x4a(%ebp,%eax,1)
+	    int_to_string(virt,c+x+1);
+80104c00:	8d 54 06 01          	lea    0x1(%esi,%eax,1),%edx
+  if(x==0)
+80104c04:	85 ff                	test   %edi,%edi
+80104c06:	0f 84 c4 00 00 00    	je     80104cd0 <swap_in_process_function+0x120>
+80104c0c:	89 f8                	mov    %edi,%eax
+80104c0e:	e8 0d ed ff ff       	call   80103920 <int_to_string.part.0>
+	    safestrcpy(c+strlen(c),".swp",5);
+80104c13:	83 ec 0c             	sub    $0xc,%esp
+80104c16:	56                   	push   %esi
+80104c17:	e8 a4 08 00 00       	call   801054c0 <strlen>
+80104c1c:	83 c4 0c             	add    $0xc,%esp
+80104c1f:	01 f0                	add    %esi,%eax
+80104c21:	6a 05                	push   $0x5
+80104c23:	68 87 84 10 80       	push   $0x80108487
+80104c28:	50                   	push   %eax
+80104c29:	e8 52 08 00 00       	call   80105480 <safestrcpy>
+	    int fd=proc_open(c,O_RDONLY);
+80104c2e:	59                   	pop    %ecx
+80104c2f:	58                   	pop    %eax
+80104c30:	6a 00                	push   $0x0
+80104c32:	56                   	push   %esi
+80104c33:	e8 68 f1 ff ff       	call   80103da0 <proc_open>
+	    if(fd<0){
+80104c38:	83 c4 10             	add    $0x10,%esp
+80104c3b:	85 c0                	test   %eax,%eax
+80104c3d:	0f 88 f6 00 00 00    	js     80104d39 <swap_in_process_function+0x189>
+80104c43:	89 45 a0             	mov    %eax,-0x60(%ebp)
+	    char *mem=kalloc();
+80104c46:	e8 55 da ff ff       	call   801026a0 <kalloc>
+	    proc_read(fd,PGSIZE,mem);
+80104c4b:	8b 4d a0             	mov    -0x60(%ebp),%ecx
+80104c4e:	83 ec 04             	sub    $0x4,%esp
+80104c51:	50                   	push   %eax
+80104c52:	68 00 10 00 00       	push   $0x1000
+80104c57:	51                   	push   %ecx
+80104c58:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+80104c5b:	e8 20 f3 ff ff       	call   80103f80 <proc_read>
+	    if(mappages(p->pgdir, (void *)virt, PGSIZE, V2P(mem), PTE_W|PTE_U)<0){
+80104c60:	8b 55 a4             	mov    -0x5c(%ebp),%edx
+80104c63:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
+80104c6a:	81 c2 00 00 00 80    	add    $0x80000000,%edx
+80104c70:	52                   	push   %edx
+80104c71:	68 00 10 00 00       	push   $0x1000
+80104c76:	57                   	push   %edi
+80104c77:	ff 73 04             	pushl  0x4(%ebx)
+80104c7a:	e8 d1 29 00 00       	call   80107650 <mappages>
+80104c7f:	83 c4 20             	add    $0x20,%esp
+80104c82:	85 c0                	test   %eax,%eax
+80104c84:	0f 88 d5 00 00 00    	js     80104d5f <swap_in_process_function+0x1af>
+	    wakeup(p);
+80104c8a:	83 ec 0c             	sub    $0xc,%esp
+80104c8d:	53                   	push   %ebx
+80104c8e:	e8 bd fe ff ff       	call   80104b50 <wakeup>
+	while(rqueue2.s!=rqueue2.e){
+80104c93:	a1 d8 3a 11 80       	mov    0x80113ad8,%eax
+80104c98:	83 c4 10             	add    $0x10,%esp
+80104c9b:	39 05 d4 3a 11 80    	cmp    %eax,0x80113ad4
+80104ca1:	74 3d                	je     80104ce0 <swap_in_process_function+0x130>
+		struct proc *p=rpop2();
+80104ca3:	e8 28 ee ff ff       	call   80103ad0 <rpop2>
+80104ca8:	89 c3                	mov    %eax,%ebx
+		int pid=p->pid;
+80104caa:	8b 40 10             	mov    0x10(%eax),%eax
+		int virt=PTE_ADDR(p->addr);
+80104cad:	8b 7b 7c             	mov    0x7c(%ebx),%edi
+80104cb0:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+  if(x==0)
+80104cb6:	85 c0                	test   %eax,%eax
+80104cb8:	0f 85 2a ff ff ff    	jne    80104be8 <swap_in_process_function+0x38>
+    c[0]='0';
+80104cbe:	b8 30 00 00 00       	mov    $0x30,%eax
+80104cc3:	66 89 45 b6          	mov    %ax,-0x4a(%ebp)
+    return;
+80104cc7:	e9 23 ff ff ff       	jmp    80104bef <swap_in_process_function+0x3f>
+80104ccc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c[0]='0';
+80104cd0:	b8 30 00 00 00       	mov    $0x30,%eax
+80104cd5:	66 89 02             	mov    %ax,(%edx)
+    return;
+80104cd8:	e9 36 ff ff ff       	jmp    80104c13 <swap_in_process_function+0x63>
+80104cdd:	8d 76 00             	lea    0x0(%esi),%esi
+    release(&rqueue2.lock);
+80104ce0:	83 ec 0c             	sub    $0xc,%esp
+80104ce3:	68 a0 39 11 80       	push   $0x801139a0
+80104ce8:	e8 83 05 00 00       	call   80105270 <release>
+  pushcli();
+80104ced:	e8 be 03 00 00       	call   801050b0 <pushcli>
+  c = mycpu();
+80104cf2:	e8 39 ef ff ff       	call   80103c30 <mycpu>
+  p = c->proc;
+80104cf7:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80104cfd:	e8 fe 03 00 00       	call   80105100 <popcli>
+	if((p=myproc())==0)
+80104d02:	83 c4 10             	add    $0x10,%esp
+80104d05:	85 db                	test   %ebx,%ebx
+80104d07:	74 6f                	je     80104d78 <swap_in_process_function+0x1c8>
+	p->parent = 0;
+80104d09:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+	p->name[0] = '*';
+80104d10:	c6 43 6c 2a          	movb   $0x2a,0x6c(%ebx)
+	p->killed = 0;
+80104d14:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+	p->state = UNUSED;
+80104d1b:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+	swap_in_process_exists=0;
+80104d22:	c7 05 b8 b5 10 80 00 	movl   $0x0,0x8010b5b8
+80104d29:	00 00 00 
+	sched();
+80104d2c:	e8 af f7 ff ff       	call   801044e0 <sched>
+}
+80104d31:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104d34:	5b                   	pop    %ebx
+80104d35:	5e                   	pop    %esi
+80104d36:	5f                   	pop    %edi
+80104d37:	5d                   	pop    %ebp
+80104d38:	c3                   	ret    
+	    	release(&rqueue2.lock);
+80104d39:	83 ec 0c             	sub    $0xc,%esp
+80104d3c:	68 a0 39 11 80       	push   $0x801139a0
+80104d41:	e8 2a 05 00 00       	call   80105270 <release>
+	    	cprintf("could not find page file in memory: %s\n", c);
+80104d46:	58                   	pop    %eax
+80104d47:	5a                   	pop    %edx
+80104d48:	56                   	push   %esi
+80104d49:	68 98 85 10 80       	push   $0x80108598
+80104d4e:	e8 5d b9 ff ff       	call   801006b0 <cprintf>
+	    	panic("swap_in_process");
+80104d53:	c7 04 24 f9 84 10 80 	movl   $0x801084f9,(%esp)
+80104d5a:	e8 31 b6 ff ff       	call   80100390 <panic>
+	    	release(&rqueue2.lock);
+80104d5f:	83 ec 0c             	sub    $0xc,%esp
+80104d62:	68 a0 39 11 80       	push   $0x801139a0
+80104d67:	e8 04 05 00 00       	call   80105270 <release>
+	    	panic("mappages");
+80104d6c:	c7 04 24 09 85 10 80 	movl   $0x80108509,(%esp)
+80104d73:	e8 18 b6 ff ff       	call   80100390 <panic>
+	  panic("swap_in_process");
+80104d78:	83 ec 0c             	sub    $0xc,%esp
+80104d7b:	68 f9 84 10 80       	push   $0x801084f9
+80104d80:	e8 0b b6 ff ff       	call   80100390 <panic>
+80104d85:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104d8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80104140 <kill>:
+80104d90 <kill>:
 // Kill the process with the given pid.
 // Process won't exit until it returns
 // to user space (see trap in trap.c).
 int
 kill(int pid)
 {
-80104140:	f3 0f 1e fb          	endbr32 
-80104144:	55                   	push   %ebp
-80104145:	89 e5                	mov    %esp,%ebp
-80104147:	53                   	push   %ebx
-80104148:	83 ec 10             	sub    $0x10,%esp
-8010414b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104d90:	f3 0f 1e fb          	endbr32 
+80104d94:	55                   	push   %ebp
+80104d95:	89 e5                	mov    %esp,%ebp
+80104d97:	53                   	push   %ebx
+80104d98:	83 ec 10             	sub    $0x10,%esp
+80104d9b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct proc *p;
 
   acquire(&ptable.lock);
-8010414e:	68 20 2d 11 80       	push   $0x80112d20
-80104153:	e8 08 04 00 00       	call   80104560 <acquire>
-80104158:	83 c4 10             	add    $0x10,%esp
+80104d9e:	68 e0 3a 11 80       	push   $0x80113ae0
+80104da3:	e8 08 04 00 00       	call   801051b0 <acquire>
+80104da8:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-8010415b:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80104160:	eb 10                	jmp    80104172 <kill+0x32>
-80104162:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104168:	83 c0 7c             	add    $0x7c,%eax
-8010416b:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
-80104170:	74 36                	je     801041a8 <kill+0x68>
+80104dab:	b8 14 3b 11 80       	mov    $0x80113b14,%eax
+80104db0:	eb 10                	jmp    80104dc2 <kill+0x32>
+80104db2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104db8:	83 e8 80             	sub    $0xffffff80,%eax
+80104dbb:	3d 14 5b 11 80       	cmp    $0x80115b14,%eax
+80104dc0:	74 36                	je     80104df8 <kill+0x68>
     if(p->pid == pid){
-80104172:	39 58 10             	cmp    %ebx,0x10(%eax)
-80104175:	75 f1                	jne    80104168 <kill+0x28>
+80104dc2:	39 58 10             	cmp    %ebx,0x10(%eax)
+80104dc5:	75 f1                	jne    80104db8 <kill+0x28>
       p->killed = 1;
       // Wake process from sleep if necessary.
       if(p->state == SLEEPING)
-80104177:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80104dc7:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
       p->killed = 1;
-8010417b:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+80104dcb:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
       if(p->state == SLEEPING)
-80104182:	75 07                	jne    8010418b <kill+0x4b>
+80104dd2:	75 07                	jne    80104ddb <kill+0x4b>
         p->state = RUNNABLE;
-80104184:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80104dd4:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
       release(&ptable.lock);
-8010418b:	83 ec 0c             	sub    $0xc,%esp
-8010418e:	68 20 2d 11 80       	push   $0x80112d20
-80104193:	e8 88 04 00 00       	call   80104620 <release>
+80104ddb:	83 ec 0c             	sub    $0xc,%esp
+80104dde:	68 e0 3a 11 80       	push   $0x80113ae0
+80104de3:	e8 88 04 00 00       	call   80105270 <release>
       return 0;
     }
   }
   release(&ptable.lock);
   return -1;
 }
-80104198:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104de8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
       return 0;
-8010419b:	83 c4 10             	add    $0x10,%esp
-8010419e:	31 c0                	xor    %eax,%eax
+80104deb:	83 c4 10             	add    $0x10,%esp
+80104dee:	31 c0                	xor    %eax,%eax
 }
-801041a0:	c9                   	leave  
-801041a1:	c3                   	ret    
-801041a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104df0:	c9                   	leave  
+80104df1:	c3                   	ret    
+80104df2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   release(&ptable.lock);
-801041a8:	83 ec 0c             	sub    $0xc,%esp
-801041ab:	68 20 2d 11 80       	push   $0x80112d20
-801041b0:	e8 6b 04 00 00       	call   80104620 <release>
+80104df8:	83 ec 0c             	sub    $0xc,%esp
+80104dfb:	68 e0 3a 11 80       	push   $0x80113ae0
+80104e00:	e8 6b 04 00 00       	call   80105270 <release>
 }
-801041b5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104e05:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   return -1;
-801041b8:	83 c4 10             	add    $0x10,%esp
-801041bb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104e08:	83 c4 10             	add    $0x10,%esp
+80104e0b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801041c0:	c9                   	leave  
-801041c1:	c3                   	ret    
-801041c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801041c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104e10:	c9                   	leave  
+80104e11:	c3                   	ret    
+80104e12:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104e19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801041d0 <procdump>:
+80104e20 <procdump>:
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
 void
 procdump(void)
 {
-801041d0:	f3 0f 1e fb          	endbr32 
-801041d4:	55                   	push   %ebp
-801041d5:	89 e5                	mov    %esp,%ebp
-801041d7:	57                   	push   %edi
-801041d8:	56                   	push   %esi
-801041d9:	8d 75 e8             	lea    -0x18(%ebp),%esi
-801041dc:	53                   	push   %ebx
-801041dd:	bb c0 2d 11 80       	mov    $0x80112dc0,%ebx
-801041e2:	83 ec 3c             	sub    $0x3c,%esp
-801041e5:	eb 28                	jmp    8010420f <procdump+0x3f>
-801041e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801041ee:	66 90                	xchg   %ax,%ax
+80104e20:	f3 0f 1e fb          	endbr32 
+80104e24:	55                   	push   %ebp
+80104e25:	89 e5                	mov    %esp,%ebp
+80104e27:	57                   	push   %edi
+80104e28:	56                   	push   %esi
+80104e29:	8d 75 e8             	lea    -0x18(%ebp),%esi
+80104e2c:	53                   	push   %ebx
+80104e2d:	bb 80 3b 11 80       	mov    $0x80113b80,%ebx
+80104e32:	83 ec 3c             	sub    $0x3c,%esp
+80104e35:	eb 28                	jmp    80104e5f <procdump+0x3f>
+80104e37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104e3e:	66 90                	xchg   %ax,%ax
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
         cprintf(" %p", pc[i]);
     }
     cprintf("\n");
-801041f0:	83 ec 0c             	sub    $0xc,%esp
-801041f3:	68 37 7a 10 80       	push   $0x80107a37
-801041f8:	e8 b3 c4 ff ff       	call   801006b0 <cprintf>
-801041fd:	83 c4 10             	add    $0x10,%esp
+80104e40:	83 ec 0c             	sub    $0xc,%esp
+80104e43:	68 e7 88 10 80       	push   $0x801088e7
+80104e48:	e8 63 b8 ff ff       	call   801006b0 <cprintf>
+80104e4d:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104200:	83 c3 7c             	add    $0x7c,%ebx
-80104203:	81 fb c0 4c 11 80    	cmp    $0x80114cc0,%ebx
-80104209:	0f 84 81 00 00 00    	je     80104290 <procdump+0xc0>
+80104e50:	83 eb 80             	sub    $0xffffff80,%ebx
+80104e53:	81 fb 80 5b 11 80    	cmp    $0x80115b80,%ebx
+80104e59:	0f 84 81 00 00 00    	je     80104ee0 <procdump+0xc0>
     if(p->state == UNUSED)
-8010420f:	8b 43 a0             	mov    -0x60(%ebx),%eax
-80104212:	85 c0                	test   %eax,%eax
-80104214:	74 ea                	je     80104200 <procdump+0x30>
+80104e5f:	8b 43 a0             	mov    -0x60(%ebx),%eax
+80104e62:	85 c0                	test   %eax,%eax
+80104e64:	74 ea                	je     80104e50 <procdump+0x30>
       state = "???";
-80104216:	ba cb 76 10 80       	mov    $0x801076cb,%edx
+80104e66:	ba 12 85 10 80       	mov    $0x80108512,%edx
     if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-8010421b:	83 f8 05             	cmp    $0x5,%eax
-8010421e:	77 11                	ja     80104231 <procdump+0x61>
-80104220:	8b 14 85 2c 77 10 80 	mov    -0x7fef88d4(,%eax,4),%edx
+80104e6b:	83 f8 05             	cmp    $0x5,%eax
+80104e6e:	77 11                	ja     80104e81 <procdump+0x61>
+80104e70:	8b 14 85 c0 85 10 80 	mov    -0x7fef7a40(,%eax,4),%edx
       state = "???";
-80104227:	b8 cb 76 10 80       	mov    $0x801076cb,%eax
-8010422c:	85 d2                	test   %edx,%edx
-8010422e:	0f 44 d0             	cmove  %eax,%edx
+80104e77:	b8 12 85 10 80       	mov    $0x80108512,%eax
+80104e7c:	85 d2                	test   %edx,%edx
+80104e7e:	0f 44 d0             	cmove  %eax,%edx
     cprintf("%d %s %s", p->pid, state, p->name);
-80104231:	53                   	push   %ebx
-80104232:	52                   	push   %edx
-80104233:	ff 73 a4             	pushl  -0x5c(%ebx)
-80104236:	68 cf 76 10 80       	push   $0x801076cf
-8010423b:	e8 70 c4 ff ff       	call   801006b0 <cprintf>
+80104e81:	53                   	push   %ebx
+80104e82:	52                   	push   %edx
+80104e83:	ff 73 a4             	pushl  -0x5c(%ebx)
+80104e86:	68 16 85 10 80       	push   $0x80108516
+80104e8b:	e8 20 b8 ff ff       	call   801006b0 <cprintf>
     if(p->state == SLEEPING){
-80104240:	83 c4 10             	add    $0x10,%esp
-80104243:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
-80104247:	75 a7                	jne    801041f0 <procdump+0x20>
+80104e90:	83 c4 10             	add    $0x10,%esp
+80104e93:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
+80104e97:	75 a7                	jne    80104e40 <procdump+0x20>
       getcallerpcs((uint*)p->context->ebp+2, pc);
-80104249:	83 ec 08             	sub    $0x8,%esp
-8010424c:	8d 45 c0             	lea    -0x40(%ebp),%eax
-8010424f:	8d 7d c0             	lea    -0x40(%ebp),%edi
-80104252:	50                   	push   %eax
-80104253:	8b 43 b0             	mov    -0x50(%ebx),%eax
-80104256:	8b 40 0c             	mov    0xc(%eax),%eax
-80104259:	83 c0 08             	add    $0x8,%eax
-8010425c:	50                   	push   %eax
-8010425d:	e8 9e 01 00 00       	call   80104400 <getcallerpcs>
+80104e99:	83 ec 08             	sub    $0x8,%esp
+80104e9c:	8d 45 c0             	lea    -0x40(%ebp),%eax
+80104e9f:	8d 7d c0             	lea    -0x40(%ebp),%edi
+80104ea2:	50                   	push   %eax
+80104ea3:	8b 43 b0             	mov    -0x50(%ebx),%eax
+80104ea6:	8b 40 0c             	mov    0xc(%eax),%eax
+80104ea9:	83 c0 08             	add    $0x8,%eax
+80104eac:	50                   	push   %eax
+80104ead:	e8 9e 01 00 00       	call   80105050 <getcallerpcs>
       for(i=0; i<10 && pc[i] != 0; i++)
-80104262:	83 c4 10             	add    $0x10,%esp
-80104265:	8d 76 00             	lea    0x0(%esi),%esi
-80104268:	8b 17                	mov    (%edi),%edx
-8010426a:	85 d2                	test   %edx,%edx
-8010426c:	74 82                	je     801041f0 <procdump+0x20>
+80104eb2:	83 c4 10             	add    $0x10,%esp
+80104eb5:	8d 76 00             	lea    0x0(%esi),%esi
+80104eb8:	8b 17                	mov    (%edi),%edx
+80104eba:	85 d2                	test   %edx,%edx
+80104ebc:	74 82                	je     80104e40 <procdump+0x20>
         cprintf(" %p", pc[i]);
-8010426e:	83 ec 08             	sub    $0x8,%esp
-80104271:	83 c7 04             	add    $0x4,%edi
-80104274:	52                   	push   %edx
-80104275:	68 21 71 10 80       	push   $0x80107121
-8010427a:	e8 31 c4 ff ff       	call   801006b0 <cprintf>
+80104ebe:	83 ec 08             	sub    $0x8,%esp
+80104ec1:	83 c7 04             	add    $0x4,%edi
+80104ec4:	52                   	push   %edx
+80104ec5:	68 a1 7e 10 80       	push   $0x80107ea1
+80104eca:	e8 e1 b7 ff ff       	call   801006b0 <cprintf>
       for(i=0; i<10 && pc[i] != 0; i++)
-8010427f:	83 c4 10             	add    $0x10,%esp
-80104282:	39 fe                	cmp    %edi,%esi
-80104284:	75 e2                	jne    80104268 <procdump+0x98>
-80104286:	e9 65 ff ff ff       	jmp    801041f0 <procdump+0x20>
-8010428b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010428f:	90                   	nop
-  }
-}
-80104290:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104293:	5b                   	pop    %ebx
-80104294:	5e                   	pop    %esi
-80104295:	5f                   	pop    %edi
-80104296:	5d                   	pop    %ebp
-80104297:	c3                   	ret    
-80104298:	66 90                	xchg   %ax,%ax
-8010429a:	66 90                	xchg   %ax,%ax
-8010429c:	66 90                	xchg   %ax,%ax
-8010429e:	66 90                	xchg   %ax,%ax
+80104ecf:	83 c4 10             	add    $0x10,%esp
+80104ed2:	39 fe                	cmp    %edi,%esi
+80104ed4:	75 e2                	jne    80104eb8 <procdump+0x98>
+80104ed6:	e9 65 ff ff ff       	jmp    80104e40 <procdump+0x20>
+80104edb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104edf:	90                   	nop
+  }
+80104ee0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104ee3:	5b                   	pop    %ebx
+80104ee4:	5e                   	pop    %esi
+80104ee5:	5f                   	pop    %edi
+80104ee6:	5d                   	pop    %ebp
+80104ee7:	c3                   	ret    
+80104ee8:	66 90                	xchg   %ax,%ax
+80104eea:	66 90                	xchg   %ax,%ax
+80104eec:	66 90                	xchg   %ax,%ax
+80104eee:	66 90                	xchg   %ax,%ax
 
-801042a0 <initsleeplock>:
+80104ef0 <initsleeplock>:
 #include "spinlock.h"
 #include "sleeplock.h"
 
 void
 initsleeplock(struct sleeplock *lk, char *name)
 {
-801042a0:	f3 0f 1e fb          	endbr32 
-801042a4:	55                   	push   %ebp
-801042a5:	89 e5                	mov    %esp,%ebp
-801042a7:	53                   	push   %ebx
-801042a8:	83 ec 0c             	sub    $0xc,%esp
-801042ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104ef0:	f3 0f 1e fb          	endbr32 
+80104ef4:	55                   	push   %ebp
+80104ef5:	89 e5                	mov    %esp,%ebp
+80104ef7:	53                   	push   %ebx
+80104ef8:	83 ec 0c             	sub    $0xc,%esp
+80104efb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&lk->lk, "sleep lock");
-801042ae:	68 44 77 10 80       	push   $0x80107744
-801042b3:	8d 43 04             	lea    0x4(%ebx),%eax
-801042b6:	50                   	push   %eax
-801042b7:	e8 24 01 00 00       	call   801043e0 <initlock>
+80104efe:	68 d8 85 10 80       	push   $0x801085d8
+80104f03:	8d 43 04             	lea    0x4(%ebx),%eax
+80104f06:	50                   	push   %eax
+80104f07:	e8 24 01 00 00       	call   80105030 <initlock>
   lk->name = name;
-801042bc:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104f0c:	8b 45 0c             	mov    0xc(%ebp),%eax
   lk->locked = 0;
-801042bf:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80104f0f:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   lk->pid = 0;
 }
-801042c5:	83 c4 10             	add    $0x10,%esp
+80104f15:	83 c4 10             	add    $0x10,%esp
   lk->pid = 0;
-801042c8:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+80104f18:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
   lk->name = name;
-801042cf:	89 43 38             	mov    %eax,0x38(%ebx)
+80104f1f:	89 43 38             	mov    %eax,0x38(%ebx)
 }
-801042d2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801042d5:	c9                   	leave  
-801042d6:	c3                   	ret    
-801042d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801042de:	66 90                	xchg   %ax,%ax
+80104f22:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104f25:	c9                   	leave  
+80104f26:	c3                   	ret    
+80104f27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104f2e:	66 90                	xchg   %ax,%ax
 
-801042e0 <acquiresleep>:
+80104f30 <acquiresleep>:
 
 void
 acquiresleep(struct sleeplock *lk)
 {
-801042e0:	f3 0f 1e fb          	endbr32 
-801042e4:	55                   	push   %ebp
-801042e5:	89 e5                	mov    %esp,%ebp
-801042e7:	56                   	push   %esi
-801042e8:	53                   	push   %ebx
-801042e9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104f30:	f3 0f 1e fb          	endbr32 
+80104f34:	55                   	push   %ebp
+80104f35:	89 e5                	mov    %esp,%ebp
+80104f37:	56                   	push   %esi
+80104f38:	53                   	push   %ebx
+80104f39:	8b 5d 08             	mov    0x8(%ebp),%ebx
+
   acquire(&lk->lk);
-801042ec:	8d 73 04             	lea    0x4(%ebx),%esi
-801042ef:	83 ec 0c             	sub    $0xc,%esp
-801042f2:	56                   	push   %esi
-801042f3:	e8 68 02 00 00       	call   80104560 <acquire>
+80104f3c:	8d 73 04             	lea    0x4(%ebx),%esi
+80104f3f:	83 ec 0c             	sub    $0xc,%esp
+80104f42:	56                   	push   %esi
+80104f43:	e8 68 02 00 00       	call   801051b0 <acquire>
+
   while (lk->locked) {
-801042f8:	8b 13                	mov    (%ebx),%edx
-801042fa:	83 c4 10             	add    $0x10,%esp
-801042fd:	85 d2                	test   %edx,%edx
-801042ff:	74 1a                	je     8010431b <acquiresleep+0x3b>
-80104301:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104f48:	8b 13                	mov    (%ebx),%edx
+80104f4a:	83 c4 10             	add    $0x10,%esp
+80104f4d:	85 d2                	test   %edx,%edx
+80104f4f:	74 1a                	je     80104f6b <acquiresleep+0x3b>
+80104f51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     sleep(lk, &lk->lk);
-80104308:	83 ec 08             	sub    $0x8,%esp
-8010430b:	56                   	push   %esi
-8010430c:	53                   	push   %ebx
-8010430d:	e8 0e fc ff ff       	call   80103f20 <sleep>
+80104f58:	83 ec 08             	sub    $0x8,%esp
+80104f5b:	56                   	push   %esi
+80104f5c:	53                   	push   %ebx
+80104f5d:	e8 2e fa ff ff       	call   80104990 <sleep>
   while (lk->locked) {
-80104312:	8b 03                	mov    (%ebx),%eax
-80104314:	83 c4 10             	add    $0x10,%esp
-80104317:	85 c0                	test   %eax,%eax
-80104319:	75 ed                	jne    80104308 <acquiresleep+0x28>
+80104f62:	8b 03                	mov    (%ebx),%eax
+80104f64:	83 c4 10             	add    $0x10,%esp
+80104f67:	85 c0                	test   %eax,%eax
+80104f69:	75 ed                	jne    80104f58 <acquiresleep+0x28>
   }
+
   lk->locked = 1;
-8010431b:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+80104f6b:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
   lk->pid = myproc()->pid;
-80104321:	e8 3a f6 ff ff       	call   80103960 <myproc>
-80104326:	8b 40 10             	mov    0x10(%eax),%eax
-80104329:	89 43 3c             	mov    %eax,0x3c(%ebx)
+80104f71:	e8 7a f0 ff ff       	call   80103ff0 <myproc>
+80104f76:	8b 40 10             	mov    0x10(%eax),%eax
+80104f79:	89 43 3c             	mov    %eax,0x3c(%ebx)
   release(&lk->lk);
-8010432c:	89 75 08             	mov    %esi,0x8(%ebp)
+80104f7c:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-8010432f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104332:	5b                   	pop    %ebx
-80104333:	5e                   	pop    %esi
-80104334:	5d                   	pop    %ebp
+80104f7f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104f82:	5b                   	pop    %ebx
+80104f83:	5e                   	pop    %esi
+80104f84:	5d                   	pop    %ebp
   release(&lk->lk);
-80104335:	e9 e6 02 00 00       	jmp    80104620 <release>
-8010433a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104f85:	e9 e6 02 00 00       	jmp    80105270 <release>
+80104f8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104340 <releasesleep>:
+80104f90 <releasesleep>:
 
 void
 releasesleep(struct sleeplock *lk)
 {
-80104340:	f3 0f 1e fb          	endbr32 
-80104344:	55                   	push   %ebp
-80104345:	89 e5                	mov    %esp,%ebp
-80104347:	56                   	push   %esi
-80104348:	53                   	push   %ebx
-80104349:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104f90:	f3 0f 1e fb          	endbr32 
+80104f94:	55                   	push   %ebp
+80104f95:	89 e5                	mov    %esp,%ebp
+80104f97:	56                   	push   %esi
+80104f98:	53                   	push   %ebx
+80104f99:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&lk->lk);
-8010434c:	8d 73 04             	lea    0x4(%ebx),%esi
-8010434f:	83 ec 0c             	sub    $0xc,%esp
-80104352:	56                   	push   %esi
-80104353:	e8 08 02 00 00       	call   80104560 <acquire>
+80104f9c:	8d 73 04             	lea    0x4(%ebx),%esi
+80104f9f:	83 ec 0c             	sub    $0xc,%esp
+80104fa2:	56                   	push   %esi
+80104fa3:	e8 08 02 00 00       	call   801051b0 <acquire>
   lk->locked = 0;
-80104358:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80104fa8:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   lk->pid = 0;
-8010435e:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+80104fae:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
   wakeup(lk);
-80104365:	89 1c 24             	mov    %ebx,(%esp)
-80104368:	e8 73 fd ff ff       	call   801040e0 <wakeup>
+80104fb5:	89 1c 24             	mov    %ebx,(%esp)
+80104fb8:	e8 93 fb ff ff       	call   80104b50 <wakeup>
   release(&lk->lk);
-8010436d:	89 75 08             	mov    %esi,0x8(%ebp)
-80104370:	83 c4 10             	add    $0x10,%esp
+80104fbd:	89 75 08             	mov    %esi,0x8(%ebp)
+80104fc0:	83 c4 10             	add    $0x10,%esp
 }
-80104373:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104376:	5b                   	pop    %ebx
-80104377:	5e                   	pop    %esi
-80104378:	5d                   	pop    %ebp
+80104fc3:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104fc6:	5b                   	pop    %ebx
+80104fc7:	5e                   	pop    %esi
+80104fc8:	5d                   	pop    %ebp
   release(&lk->lk);
-80104379:	e9 a2 02 00 00       	jmp    80104620 <release>
-8010437e:	66 90                	xchg   %ax,%ax
+80104fc9:	e9 a2 02 00 00       	jmp    80105270 <release>
+80104fce:	66 90                	xchg   %ax,%ax
 
-80104380 <holdingsleep>:
+80104fd0 <holdingsleep>:
 
 int
 holdingsleep(struct sleeplock *lk)
 {
-80104380:	f3 0f 1e fb          	endbr32 
-80104384:	55                   	push   %ebp
-80104385:	89 e5                	mov    %esp,%ebp
-80104387:	57                   	push   %edi
-80104388:	31 ff                	xor    %edi,%edi
-8010438a:	56                   	push   %esi
-8010438b:	53                   	push   %ebx
-8010438c:	83 ec 18             	sub    $0x18,%esp
-8010438f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104fd0:	f3 0f 1e fb          	endbr32 
+80104fd4:	55                   	push   %ebp
+80104fd5:	89 e5                	mov    %esp,%ebp
+80104fd7:	57                   	push   %edi
+80104fd8:	31 ff                	xor    %edi,%edi
+80104fda:	56                   	push   %esi
+80104fdb:	53                   	push   %ebx
+80104fdc:	83 ec 18             	sub    $0x18,%esp
+80104fdf:	8b 5d 08             	mov    0x8(%ebp),%ebx
   int r;
   
   acquire(&lk->lk);
-80104392:	8d 73 04             	lea    0x4(%ebx),%esi
-80104395:	56                   	push   %esi
-80104396:	e8 c5 01 00 00       	call   80104560 <acquire>
+80104fe2:	8d 73 04             	lea    0x4(%ebx),%esi
+80104fe5:	56                   	push   %esi
+80104fe6:	e8 c5 01 00 00       	call   801051b0 <acquire>
   r = lk->locked && (lk->pid == myproc()->pid);
-8010439b:	8b 03                	mov    (%ebx),%eax
-8010439d:	83 c4 10             	add    $0x10,%esp
-801043a0:	85 c0                	test   %eax,%eax
-801043a2:	75 1c                	jne    801043c0 <holdingsleep+0x40>
+80104feb:	8b 03                	mov    (%ebx),%eax
+80104fed:	83 c4 10             	add    $0x10,%esp
+80104ff0:	85 c0                	test   %eax,%eax
+80104ff2:	75 1c                	jne    80105010 <holdingsleep+0x40>
   release(&lk->lk);
-801043a4:	83 ec 0c             	sub    $0xc,%esp
-801043a7:	56                   	push   %esi
-801043a8:	e8 73 02 00 00       	call   80104620 <release>
+80104ff4:	83 ec 0c             	sub    $0xc,%esp
+80104ff7:	56                   	push   %esi
+80104ff8:	e8 73 02 00 00       	call   80105270 <release>
   return r;
 }
-801043ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801043b0:	89 f8                	mov    %edi,%eax
-801043b2:	5b                   	pop    %ebx
-801043b3:	5e                   	pop    %esi
-801043b4:	5f                   	pop    %edi
-801043b5:	5d                   	pop    %ebp
-801043b6:	c3                   	ret    
-801043b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801043be:	66 90                	xchg   %ax,%ax
+80104ffd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105000:	89 f8                	mov    %edi,%eax
+80105002:	5b                   	pop    %ebx
+80105003:	5e                   	pop    %esi
+80105004:	5f                   	pop    %edi
+80105005:	5d                   	pop    %ebp
+80105006:	c3                   	ret    
+80105007:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010500e:	66 90                	xchg   %ax,%ax
   r = lk->locked && (lk->pid == myproc()->pid);
-801043c0:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
-801043c3:	e8 98 f5 ff ff       	call   80103960 <myproc>
-801043c8:	39 58 10             	cmp    %ebx,0x10(%eax)
-801043cb:	0f 94 c0             	sete   %al
-801043ce:	0f b6 c0             	movzbl %al,%eax
-801043d1:	89 c7                	mov    %eax,%edi
-801043d3:	eb cf                	jmp    801043a4 <holdingsleep+0x24>
-801043d5:	66 90                	xchg   %ax,%ax
-801043d7:	66 90                	xchg   %ax,%ax
-801043d9:	66 90                	xchg   %ax,%ax
-801043db:	66 90                	xchg   %ax,%ax
-801043dd:	66 90                	xchg   %ax,%ax
-801043df:	90                   	nop
+80105010:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
+80105013:	e8 d8 ef ff ff       	call   80103ff0 <myproc>
+80105018:	39 58 10             	cmp    %ebx,0x10(%eax)
+8010501b:	0f 94 c0             	sete   %al
+8010501e:	0f b6 c0             	movzbl %al,%eax
+80105021:	89 c7                	mov    %eax,%edi
+80105023:	eb cf                	jmp    80104ff4 <holdingsleep+0x24>
+80105025:	66 90                	xchg   %ax,%ax
+80105027:	66 90                	xchg   %ax,%ax
+80105029:	66 90                	xchg   %ax,%ax
+8010502b:	66 90                	xchg   %ax,%ax
+8010502d:	66 90                	xchg   %ax,%ax
+8010502f:	90                   	nop
 
-801043e0 <initlock>:
+80105030 <initlock>:
 #include "proc.h"
 #include "spinlock.h"
 
 void
 initlock(struct spinlock *lk, char *name)
 {
-801043e0:	f3 0f 1e fb          	endbr32 
-801043e4:	55                   	push   %ebp
-801043e5:	89 e5                	mov    %esp,%ebp
-801043e7:	8b 45 08             	mov    0x8(%ebp),%eax
+80105030:	f3 0f 1e fb          	endbr32 
+80105034:	55                   	push   %ebp
+80105035:	89 e5                	mov    %esp,%ebp
+80105037:	8b 45 08             	mov    0x8(%ebp),%eax
   lk->name = name;
-801043ea:	8b 55 0c             	mov    0xc(%ebp),%edx
+8010503a:	8b 55 0c             	mov    0xc(%ebp),%edx
   lk->locked = 0;
-801043ed:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+8010503d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   lk->name = name;
-801043f3:	89 50 04             	mov    %edx,0x4(%eax)
+80105043:	89 50 04             	mov    %edx,0x4(%eax)
   lk->cpu = 0;
-801043f6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+80105046:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
 }
-801043fd:	5d                   	pop    %ebp
-801043fe:	c3                   	ret    
-801043ff:	90                   	nop
+8010504d:	5d                   	pop    %ebp
+8010504e:	c3                   	ret    
+8010504f:	90                   	nop
 
-80104400 <getcallerpcs>:
+80105050 <getcallerpcs>:
 }
 
 // Record the current call stack in pcs[] by following the %ebp chain.
 void
 getcallerpcs(void *v, uint pcs[])
 {
-80104400:	f3 0f 1e fb          	endbr32 
-80104404:	55                   	push   %ebp
+80105050:	f3 0f 1e fb          	endbr32 
+80105054:	55                   	push   %ebp
   uint *ebp;
   int i;
 
   ebp = (uint*)v - 2;
   for(i = 0; i < 10; i++){
-80104405:	31 d2                	xor    %edx,%edx
+80105055:	31 d2                	xor    %edx,%edx
 {
-80104407:	89 e5                	mov    %esp,%ebp
-80104409:	53                   	push   %ebx
+80105057:	89 e5                	mov    %esp,%ebp
+80105059:	53                   	push   %ebx
   ebp = (uint*)v - 2;
-8010440a:	8b 45 08             	mov    0x8(%ebp),%eax
+8010505a:	8b 45 08             	mov    0x8(%ebp),%eax
 {
-8010440d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+8010505d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   ebp = (uint*)v - 2;
-80104410:	83 e8 08             	sub    $0x8,%eax
+80105060:	83 e8 08             	sub    $0x8,%eax
   for(i = 0; i < 10; i++){
-80104413:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104417:	90                   	nop
+80105063:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105067:	90                   	nop
     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-80104418:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
-8010441e:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
-80104424:	77 1a                	ja     80104440 <getcallerpcs+0x40>
+80105068:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
+8010506e:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+80105074:	77 1a                	ja     80105090 <getcallerpcs+0x40>
       break;
     pcs[i] = ebp[1];     // saved %eip
-80104426:	8b 58 04             	mov    0x4(%eax),%ebx
-80104429:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
+80105076:	8b 58 04             	mov    0x4(%eax),%ebx
+80105079:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
   for(i = 0; i < 10; i++){
-8010442c:	83 c2 01             	add    $0x1,%edx
+8010507c:	83 c2 01             	add    $0x1,%edx
     ebp = (uint*)ebp[0]; // saved %ebp
-8010442f:	8b 00                	mov    (%eax),%eax
+8010507f:	8b 00                	mov    (%eax),%eax
   for(i = 0; i < 10; i++){
-80104431:	83 fa 0a             	cmp    $0xa,%edx
-80104434:	75 e2                	jne    80104418 <getcallerpcs+0x18>
+80105081:	83 fa 0a             	cmp    $0xa,%edx
+80105084:	75 e2                	jne    80105068 <getcallerpcs+0x18>
   }
   for(; i < 10; i++)
     pcs[i] = 0;
 }
-80104436:	5b                   	pop    %ebx
-80104437:	5d                   	pop    %ebp
-80104438:	c3                   	ret    
-80104439:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105086:	5b                   	pop    %ebx
+80105087:	5d                   	pop    %ebp
+80105088:	c3                   	ret    
+80105089:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(; i < 10; i++)
-80104440:	8d 04 91             	lea    (%ecx,%edx,4),%eax
-80104443:	8d 51 28             	lea    0x28(%ecx),%edx
-80104446:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010444d:	8d 76 00             	lea    0x0(%esi),%esi
+80105090:	8d 04 91             	lea    (%ecx,%edx,4),%eax
+80105093:	8d 51 28             	lea    0x28(%ecx),%edx
+80105096:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010509d:	8d 76 00             	lea    0x0(%esi),%esi
     pcs[i] = 0;
-80104450:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+801050a0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   for(; i < 10; i++)
-80104456:	83 c0 04             	add    $0x4,%eax
-80104459:	39 d0                	cmp    %edx,%eax
-8010445b:	75 f3                	jne    80104450 <getcallerpcs+0x50>
-}
-8010445d:	5b                   	pop    %ebx
-8010445e:	5d                   	pop    %ebp
-8010445f:	c3                   	ret    
+801050a6:	83 c0 04             	add    $0x4,%eax
+801050a9:	39 d0                	cmp    %edx,%eax
+801050ab:	75 f3                	jne    801050a0 <getcallerpcs+0x50>
+}
+801050ad:	5b                   	pop    %ebx
+801050ae:	5d                   	pop    %ebp
+801050af:	c3                   	ret    
 
-80104460 <pushcli>:
+801050b0 <pushcli>:
 // it takes two popcli to undo two pushcli.  Also, if interrupts
 // are off, then pushcli, popcli leaves them off.
 
 void
 pushcli(void)
 {
-80104460:	f3 0f 1e fb          	endbr32 
-80104464:	55                   	push   %ebp
-80104465:	89 e5                	mov    %esp,%ebp
-80104467:	53                   	push   %ebx
-80104468:	83 ec 04             	sub    $0x4,%esp
-8010446b:	9c                   	pushf  
-8010446c:	5b                   	pop    %ebx
+801050b0:	f3 0f 1e fb          	endbr32 
+801050b4:	55                   	push   %ebp
+801050b5:	89 e5                	mov    %esp,%ebp
+801050b7:	53                   	push   %ebx
+801050b8:	83 ec 04             	sub    $0x4,%esp
+801050bb:	9c                   	pushf  
+801050bc:	5b                   	pop    %ebx
   asm volatile("cli");
-8010446d:	fa                   	cli    
+801050bd:	fa                   	cli    
   int eflags;
 
   eflags = readeflags();
   cli();
   if(mycpu()->ncli == 0)
-8010446e:	e8 5d f4 ff ff       	call   801038d0 <mycpu>
-80104473:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
-80104479:	85 c0                	test   %eax,%eax
-8010447b:	74 13                	je     80104490 <pushcli+0x30>
+801050be:	e8 6d eb ff ff       	call   80103c30 <mycpu>
+801050c3:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+801050c9:	85 c0                	test   %eax,%eax
+801050cb:	74 13                	je     801050e0 <pushcli+0x30>
     mycpu()->intena = eflags & FL_IF;
   mycpu()->ncli += 1;
-8010447d:	e8 4e f4 ff ff       	call   801038d0 <mycpu>
-80104482:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
+801050cd:	e8 5e eb ff ff       	call   80103c30 <mycpu>
+801050d2:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
 }
-80104489:	83 c4 04             	add    $0x4,%esp
-8010448c:	5b                   	pop    %ebx
-8010448d:	5d                   	pop    %ebp
-8010448e:	c3                   	ret    
-8010448f:	90                   	nop
+801050d9:	83 c4 04             	add    $0x4,%esp
+801050dc:	5b                   	pop    %ebx
+801050dd:	5d                   	pop    %ebp
+801050de:	c3                   	ret    
+801050df:	90                   	nop
     mycpu()->intena = eflags & FL_IF;
-80104490:	e8 3b f4 ff ff       	call   801038d0 <mycpu>
-80104495:	81 e3 00 02 00 00    	and    $0x200,%ebx
-8010449b:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
-801044a1:	eb da                	jmp    8010447d <pushcli+0x1d>
-801044a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801044aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801050e0:	e8 4b eb ff ff       	call   80103c30 <mycpu>
+801050e5:	81 e3 00 02 00 00    	and    $0x200,%ebx
+801050eb:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
+801050f1:	eb da                	jmp    801050cd <pushcli+0x1d>
+801050f3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801050fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801044b0 <popcli>:
+80105100 <popcli>:
 
 void
 popcli(void)
 {
-801044b0:	f3 0f 1e fb          	endbr32 
-801044b4:	55                   	push   %ebp
-801044b5:	89 e5                	mov    %esp,%ebp
-801044b7:	83 ec 08             	sub    $0x8,%esp
+80105100:	f3 0f 1e fb          	endbr32 
+80105104:	55                   	push   %ebp
+80105105:	89 e5                	mov    %esp,%ebp
+80105107:	83 ec 08             	sub    $0x8,%esp
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-801044ba:	9c                   	pushf  
-801044bb:	58                   	pop    %eax
+8010510a:	9c                   	pushf  
+8010510b:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-801044bc:	f6 c4 02             	test   $0x2,%ah
-801044bf:	75 31                	jne    801044f2 <popcli+0x42>
+8010510c:	f6 c4 02             	test   $0x2,%ah
+8010510f:	75 31                	jne    80105142 <popcli+0x42>
     panic("popcli - interruptible");
   if(--mycpu()->ncli < 0)
-801044c1:	e8 0a f4 ff ff       	call   801038d0 <mycpu>
-801044c6:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
-801044cd:	78 30                	js     801044ff <popcli+0x4f>
+80105111:	e8 1a eb ff ff       	call   80103c30 <mycpu>
+80105116:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
+8010511d:	78 30                	js     8010514f <popcli+0x4f>
     panic("popcli");
   if(mycpu()->ncli == 0 && mycpu()->intena)
-801044cf:	e8 fc f3 ff ff       	call   801038d0 <mycpu>
-801044d4:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
-801044da:	85 d2                	test   %edx,%edx
-801044dc:	74 02                	je     801044e0 <popcli+0x30>
+8010511f:	e8 0c eb ff ff       	call   80103c30 <mycpu>
+80105124:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
+8010512a:	85 d2                	test   %edx,%edx
+8010512c:	74 02                	je     80105130 <popcli+0x30>
     sti();
 }
-801044de:	c9                   	leave  
-801044df:	c3                   	ret    
+8010512e:	c9                   	leave  
+8010512f:	c3                   	ret    
   if(mycpu()->ncli == 0 && mycpu()->intena)
-801044e0:	e8 eb f3 ff ff       	call   801038d0 <mycpu>
-801044e5:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
-801044eb:	85 c0                	test   %eax,%eax
-801044ed:	74 ef                	je     801044de <popcli+0x2e>
+80105130:	e8 fb ea ff ff       	call   80103c30 <mycpu>
+80105135:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
+8010513b:	85 c0                	test   %eax,%eax
+8010513d:	74 ef                	je     8010512e <popcli+0x2e>
   asm volatile("sti");
-801044ef:	fb                   	sti    
+8010513f:	fb                   	sti    
 }
-801044f0:	c9                   	leave  
-801044f1:	c3                   	ret    
+80105140:	c9                   	leave  
+80105141:	c3                   	ret    
     panic("popcli - interruptible");
-801044f2:	83 ec 0c             	sub    $0xc,%esp
-801044f5:	68 4f 77 10 80       	push   $0x8010774f
-801044fa:	e8 91 be ff ff       	call   80100390 <panic>
+80105142:	83 ec 0c             	sub    $0xc,%esp
+80105145:	68 e3 85 10 80       	push   $0x801085e3
+8010514a:	e8 41 b2 ff ff       	call   80100390 <panic>
     panic("popcli");
-801044ff:	83 ec 0c             	sub    $0xc,%esp
-80104502:	68 66 77 10 80       	push   $0x80107766
-80104507:	e8 84 be ff ff       	call   80100390 <panic>
-8010450c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80104510 <holding>:
-{
-80104510:	f3 0f 1e fb          	endbr32 
-80104514:	55                   	push   %ebp
-80104515:	89 e5                	mov    %esp,%ebp
-80104517:	56                   	push   %esi
-80104518:	53                   	push   %ebx
-80104519:	8b 75 08             	mov    0x8(%ebp),%esi
-8010451c:	31 db                	xor    %ebx,%ebx
+8010514f:	83 ec 0c             	sub    $0xc,%esp
+80105152:	68 fa 85 10 80       	push   $0x801085fa
+80105157:	e8 34 b2 ff ff       	call   80100390 <panic>
+8010515c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105160 <holding>:
+{
+80105160:	f3 0f 1e fb          	endbr32 
+80105164:	55                   	push   %ebp
+80105165:	89 e5                	mov    %esp,%ebp
+80105167:	56                   	push   %esi
+80105168:	53                   	push   %ebx
+80105169:	8b 75 08             	mov    0x8(%ebp),%esi
+8010516c:	31 db                	xor    %ebx,%ebx
   pushcli();
-8010451e:	e8 3d ff ff ff       	call   80104460 <pushcli>
+8010516e:	e8 3d ff ff ff       	call   801050b0 <pushcli>
   r = lock->locked && lock->cpu == mycpu();
-80104523:	8b 06                	mov    (%esi),%eax
-80104525:	85 c0                	test   %eax,%eax
-80104527:	75 0f                	jne    80104538 <holding+0x28>
+80105173:	8b 06                	mov    (%esi),%eax
+80105175:	85 c0                	test   %eax,%eax
+80105177:	75 0f                	jne    80105188 <holding+0x28>
   popcli();
-80104529:	e8 82 ff ff ff       	call   801044b0 <popcli>
+80105179:	e8 82 ff ff ff       	call   80105100 <popcli>
 }
-8010452e:	89 d8                	mov    %ebx,%eax
-80104530:	5b                   	pop    %ebx
-80104531:	5e                   	pop    %esi
-80104532:	5d                   	pop    %ebp
-80104533:	c3                   	ret    
-80104534:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010517e:	89 d8                	mov    %ebx,%eax
+80105180:	5b                   	pop    %ebx
+80105181:	5e                   	pop    %esi
+80105182:	5d                   	pop    %ebp
+80105183:	c3                   	ret    
+80105184:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   r = lock->locked && lock->cpu == mycpu();
-80104538:	8b 5e 08             	mov    0x8(%esi),%ebx
-8010453b:	e8 90 f3 ff ff       	call   801038d0 <mycpu>
-80104540:	39 c3                	cmp    %eax,%ebx
-80104542:	0f 94 c3             	sete   %bl
+80105188:	8b 5e 08             	mov    0x8(%esi),%ebx
+8010518b:	e8 a0 ea ff ff       	call   80103c30 <mycpu>
+80105190:	39 c3                	cmp    %eax,%ebx
+80105192:	0f 94 c3             	sete   %bl
   popcli();
-80104545:	e8 66 ff ff ff       	call   801044b0 <popcli>
+80105195:	e8 66 ff ff ff       	call   80105100 <popcli>
   r = lock->locked && lock->cpu == mycpu();
-8010454a:	0f b6 db             	movzbl %bl,%ebx
+8010519a:	0f b6 db             	movzbl %bl,%ebx
 }
-8010454d:	89 d8                	mov    %ebx,%eax
-8010454f:	5b                   	pop    %ebx
-80104550:	5e                   	pop    %esi
-80104551:	5d                   	pop    %ebp
-80104552:	c3                   	ret    
-80104553:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010455a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80104560 <acquire>:
-{
-80104560:	f3 0f 1e fb          	endbr32 
-80104564:	55                   	push   %ebp
-80104565:	89 e5                	mov    %esp,%ebp
-80104567:	56                   	push   %esi
-80104568:	53                   	push   %ebx
+8010519d:	89 d8                	mov    %ebx,%eax
+8010519f:	5b                   	pop    %ebx
+801051a0:	5e                   	pop    %esi
+801051a1:	5d                   	pop    %ebp
+801051a2:	c3                   	ret    
+801051a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801051aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801051b0 <acquire>:
+{
+801051b0:	f3 0f 1e fb          	endbr32 
+801051b4:	55                   	push   %ebp
+801051b5:	89 e5                	mov    %esp,%ebp
+801051b7:	56                   	push   %esi
+801051b8:	53                   	push   %ebx
   pushcli(); // disable interrupts to avoid deadlock.
-80104569:	e8 f2 fe ff ff       	call   80104460 <pushcli>
+801051b9:	e8 f2 fe ff ff       	call   801050b0 <pushcli>
   if(holding(lk))
-8010456e:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80104571:	83 ec 0c             	sub    $0xc,%esp
-80104574:	53                   	push   %ebx
-80104575:	e8 96 ff ff ff       	call   80104510 <holding>
-8010457a:	83 c4 10             	add    $0x10,%esp
-8010457d:	85 c0                	test   %eax,%eax
-8010457f:	0f 85 7f 00 00 00    	jne    80104604 <acquire+0xa4>
-80104585:	89 c6                	mov    %eax,%esi
+801051be:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801051c1:	83 ec 0c             	sub    $0xc,%esp
+801051c4:	53                   	push   %ebx
+801051c5:	e8 96 ff ff ff       	call   80105160 <holding>
+801051ca:	83 c4 10             	add    $0x10,%esp
+801051cd:	85 c0                	test   %eax,%eax
+801051cf:	0f 85 7f 00 00 00    	jne    80105254 <acquire+0xa4>
+801051d5:	89 c6                	mov    %eax,%esi
   asm volatile("lock; xchgl %0, %1" :
-80104587:	ba 01 00 00 00       	mov    $0x1,%edx
-8010458c:	eb 05                	jmp    80104593 <acquire+0x33>
-8010458e:	66 90                	xchg   %ax,%ax
-80104590:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80104593:	89 d0                	mov    %edx,%eax
-80104595:	f0 87 03             	lock xchg %eax,(%ebx)
+801051d7:	ba 01 00 00 00       	mov    $0x1,%edx
+801051dc:	eb 05                	jmp    801051e3 <acquire+0x33>
+801051de:	66 90                	xchg   %ax,%ax
+801051e0:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801051e3:	89 d0                	mov    %edx,%eax
+801051e5:	f0 87 03             	lock xchg %eax,(%ebx)
   while(xchg(&lk->locked, 1) != 0)
-80104598:	85 c0                	test   %eax,%eax
-8010459a:	75 f4                	jne    80104590 <acquire+0x30>
+801051e8:	85 c0                	test   %eax,%eax
+801051ea:	75 f4                	jne    801051e0 <acquire+0x30>
   __sync_synchronize();
-8010459c:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+801051ec:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
   lk->cpu = mycpu();
-801045a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
-801045a4:	e8 27 f3 ff ff       	call   801038d0 <mycpu>
-801045a9:	89 43 08             	mov    %eax,0x8(%ebx)
+801051f1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801051f4:	e8 37 ea ff ff       	call   80103c30 <mycpu>
+801051f9:	89 43 08             	mov    %eax,0x8(%ebx)
   ebp = (uint*)v - 2;
-801045ac:	89 e8                	mov    %ebp,%eax
-801045ae:	66 90                	xchg   %ax,%ax
+801051fc:	89 e8                	mov    %ebp,%eax
+801051fe:	66 90                	xchg   %ax,%ax
     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-801045b0:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
-801045b6:	81 fa fe ff ff 7f    	cmp    $0x7ffffffe,%edx
-801045bc:	77 22                	ja     801045e0 <acquire+0x80>
+80105200:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
+80105206:	81 fa fe ff ff 7f    	cmp    $0x7ffffffe,%edx
+8010520c:	77 22                	ja     80105230 <acquire+0x80>
     pcs[i] = ebp[1];     // saved %eip
-801045be:	8b 50 04             	mov    0x4(%eax),%edx
-801045c1:	89 54 b3 0c          	mov    %edx,0xc(%ebx,%esi,4)
+8010520e:	8b 50 04             	mov    0x4(%eax),%edx
+80105211:	89 54 b3 0c          	mov    %edx,0xc(%ebx,%esi,4)
   for(i = 0; i < 10; i++){
-801045c5:	83 c6 01             	add    $0x1,%esi
+80105215:	83 c6 01             	add    $0x1,%esi
     ebp = (uint*)ebp[0]; // saved %ebp
-801045c8:	8b 00                	mov    (%eax),%eax
+80105218:	8b 00                	mov    (%eax),%eax
   for(i = 0; i < 10; i++){
-801045ca:	83 fe 0a             	cmp    $0xa,%esi
-801045cd:	75 e1                	jne    801045b0 <acquire+0x50>
+8010521a:	83 fe 0a             	cmp    $0xa,%esi
+8010521d:	75 e1                	jne    80105200 <acquire+0x50>
 }
-801045cf:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801045d2:	5b                   	pop    %ebx
-801045d3:	5e                   	pop    %esi
-801045d4:	5d                   	pop    %ebp
-801045d5:	c3                   	ret    
-801045d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801045dd:	8d 76 00             	lea    0x0(%esi),%esi
+8010521f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105222:	5b                   	pop    %ebx
+80105223:	5e                   	pop    %esi
+80105224:	5d                   	pop    %ebp
+80105225:	c3                   	ret    
+80105226:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010522d:	8d 76 00             	lea    0x0(%esi),%esi
   for(; i < 10; i++)
-801045e0:	8d 44 b3 0c          	lea    0xc(%ebx,%esi,4),%eax
-801045e4:	83 c3 34             	add    $0x34,%ebx
-801045e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801045ee:	66 90                	xchg   %ax,%ax
+80105230:	8d 44 b3 0c          	lea    0xc(%ebx,%esi,4),%eax
+80105234:	83 c3 34             	add    $0x34,%ebx
+80105237:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010523e:	66 90                	xchg   %ax,%ax
     pcs[i] = 0;
-801045f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80105240:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   for(; i < 10; i++)
-801045f6:	83 c0 04             	add    $0x4,%eax
-801045f9:	39 d8                	cmp    %ebx,%eax
-801045fb:	75 f3                	jne    801045f0 <acquire+0x90>
-}
-801045fd:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104600:	5b                   	pop    %ebx
-80104601:	5e                   	pop    %esi
-80104602:	5d                   	pop    %ebp
-80104603:	c3                   	ret    
+80105246:	83 c0 04             	add    $0x4,%eax
+80105249:	39 d8                	cmp    %ebx,%eax
+8010524b:	75 f3                	jne    80105240 <acquire+0x90>
+}
+8010524d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105250:	5b                   	pop    %ebx
+80105251:	5e                   	pop    %esi
+80105252:	5d                   	pop    %ebp
+80105253:	c3                   	ret    
     panic("acquire");
-80104604:	83 ec 0c             	sub    $0xc,%esp
-80104607:	68 6d 77 10 80       	push   $0x8010776d
-8010460c:	e8 7f bd ff ff       	call   80100390 <panic>
-80104611:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104618:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010461f:	90                   	nop
-
-80104620 <release>:
-{
-80104620:	f3 0f 1e fb          	endbr32 
-80104624:	55                   	push   %ebp
-80104625:	89 e5                	mov    %esp,%ebp
-80104627:	53                   	push   %ebx
-80104628:	83 ec 10             	sub    $0x10,%esp
-8010462b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80105254:	83 ec 0c             	sub    $0xc,%esp
+80105257:	68 01 86 10 80       	push   $0x80108601
+8010525c:	e8 2f b1 ff ff       	call   80100390 <panic>
+80105261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105268:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010526f:	90                   	nop
+
+80105270 <release>:
+{
+80105270:	f3 0f 1e fb          	endbr32 
+80105274:	55                   	push   %ebp
+80105275:	89 e5                	mov    %esp,%ebp
+80105277:	53                   	push   %ebx
+80105278:	83 ec 10             	sub    $0x10,%esp
+8010527b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(!holding(lk))
-8010462e:	53                   	push   %ebx
-8010462f:	e8 dc fe ff ff       	call   80104510 <holding>
-80104634:	83 c4 10             	add    $0x10,%esp
-80104637:	85 c0                	test   %eax,%eax
-80104639:	74 22                	je     8010465d <release+0x3d>
+8010527e:	53                   	push   %ebx
+8010527f:	e8 dc fe ff ff       	call   80105160 <holding>
+80105284:	83 c4 10             	add    $0x10,%esp
+80105287:	85 c0                	test   %eax,%eax
+80105289:	74 22                	je     801052ad <release+0x3d>
   lk->pcs[0] = 0;
-8010463b:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+8010528b:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
   lk->cpu = 0;
-80104642:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+80105292:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
   __sync_synchronize();
-80104649:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+80105299:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
   asm volatile("movl $0, %0" : "+m" (lk->locked) : );
-8010464e:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+8010529e:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
 }
-80104654:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104657:	c9                   	leave  
+801052a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801052a7:	c9                   	leave  
   popcli();
-80104658:	e9 53 fe ff ff       	jmp    801044b0 <popcli>
+801052a8:	e9 53 fe ff ff       	jmp    80105100 <popcli>
     panic("release");
-8010465d:	83 ec 0c             	sub    $0xc,%esp
-80104660:	68 75 77 10 80       	push   $0x80107775
-80104665:	e8 26 bd ff ff       	call   80100390 <panic>
-8010466a:	66 90                	xchg   %ax,%ax
-8010466c:	66 90                	xchg   %ax,%ax
-8010466e:	66 90                	xchg   %ax,%ax
-
-80104670 <memset>:
-#include "types.h"
-#include "x86.h"
-
-void*
-memset(void *dst, int c, uint n)
-{
-80104670:	f3 0f 1e fb          	endbr32 
-80104674:	55                   	push   %ebp
-80104675:	89 e5                	mov    %esp,%ebp
-80104677:	57                   	push   %edi
-80104678:	8b 55 08             	mov    0x8(%ebp),%edx
-8010467b:	8b 4d 10             	mov    0x10(%ebp),%ecx
-8010467e:	53                   	push   %ebx
-8010467f:	8b 45 0c             	mov    0xc(%ebp),%eax
-  if ((int)dst%4 == 0 && n%4 == 0){
-80104682:	89 d7                	mov    %edx,%edi
-80104684:	09 cf                	or     %ecx,%edi
-80104686:	83 e7 03             	and    $0x3,%edi
-80104689:	75 25                	jne    801046b0 <memset+0x40>
-    c &= 0xFF;
-8010468b:	0f b6 f8             	movzbl %al,%edi
-    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
-8010468e:	c1 e0 18             	shl    $0x18,%eax
-80104691:	89 fb                	mov    %edi,%ebx
-80104693:	c1 e9 02             	shr    $0x2,%ecx
-80104696:	c1 e3 10             	shl    $0x10,%ebx
-80104699:	09 d8                	or     %ebx,%eax
-8010469b:	09 f8                	or     %edi,%eax
-8010469d:	c1 e7 08             	shl    $0x8,%edi
-801046a0:	09 f8                	or     %edi,%eax
-  asm volatile("cld; rep stosl" :
-801046a2:	89 d7                	mov    %edx,%edi
-801046a4:	fc                   	cld    
-801046a5:	f3 ab                	rep stos %eax,%es:(%edi)
-  } else
-    stosb(dst, c, n);
-  return dst;
-}
-801046a7:	5b                   	pop    %ebx
-801046a8:	89 d0                	mov    %edx,%eax
-801046aa:	5f                   	pop    %edi
-801046ab:	5d                   	pop    %ebp
-801046ac:	c3                   	ret    
-801046ad:	8d 76 00             	lea    0x0(%esi),%esi
-  asm volatile("cld; rep stosb" :
-801046b0:	89 d7                	mov    %edx,%edi
-801046b2:	fc                   	cld    
-801046b3:	f3 aa                	rep stos %al,%es:(%edi)
-801046b5:	5b                   	pop    %ebx
-801046b6:	89 d0                	mov    %edx,%eax
-801046b8:	5f                   	pop    %edi
-801046b9:	5d                   	pop    %ebp
-801046ba:	c3                   	ret    
-801046bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801046bf:	90                   	nop
+801052ad:	83 ec 0c             	sub    $0xc,%esp
+801052b0:	68 09 86 10 80       	push   $0x80108609
+801052b5:	e8 d6 b0 ff ff       	call   80100390 <panic>
+801052ba:	66 90                	xchg   %ax,%ax
+801052bc:	66 90                	xchg   %ax,%ax
+801052be:	66 90                	xchg   %ax,%ax
+
+801052c0 <memset>:
+801052c0:	f3 0f 1e fb          	endbr32 
+801052c4:	55                   	push   %ebp
+801052c5:	89 e5                	mov    %esp,%ebp
+801052c7:	57                   	push   %edi
+801052c8:	8b 55 08             	mov    0x8(%ebp),%edx
+801052cb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+801052ce:	53                   	push   %ebx
+801052cf:	8b 45 0c             	mov    0xc(%ebp),%eax
+801052d2:	89 d7                	mov    %edx,%edi
+801052d4:	09 cf                	or     %ecx,%edi
+801052d6:	83 e7 03             	and    $0x3,%edi
+801052d9:	75 25                	jne    80105300 <memset+0x40>
+801052db:	0f b6 f8             	movzbl %al,%edi
+801052de:	c1 e0 18             	shl    $0x18,%eax
+801052e1:	89 fb                	mov    %edi,%ebx
+801052e3:	c1 e9 02             	shr    $0x2,%ecx
+801052e6:	c1 e3 10             	shl    $0x10,%ebx
+801052e9:	09 d8                	or     %ebx,%eax
+801052eb:	09 f8                	or     %edi,%eax
+801052ed:	c1 e7 08             	shl    $0x8,%edi
+801052f0:	09 f8                	or     %edi,%eax
+801052f2:	89 d7                	mov    %edx,%edi
+801052f4:	fc                   	cld    
+801052f5:	f3 ab                	rep stos %eax,%es:(%edi)
+801052f7:	5b                   	pop    %ebx
+801052f8:	89 d0                	mov    %edx,%eax
+801052fa:	5f                   	pop    %edi
+801052fb:	5d                   	pop    %ebp
+801052fc:	c3                   	ret    
+801052fd:	8d 76 00             	lea    0x0(%esi),%esi
+80105300:	89 d7                	mov    %edx,%edi
+80105302:	fc                   	cld    
+80105303:	f3 aa                	rep stos %al,%es:(%edi)
+80105305:	5b                   	pop    %ebx
+80105306:	89 d0                	mov    %edx,%eax
+80105308:	5f                   	pop    %edi
+80105309:	5d                   	pop    %ebp
+8010530a:	c3                   	ret    
+8010530b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010530f:	90                   	nop
+
+80105310 <memcmp>:
+80105310:	f3 0f 1e fb          	endbr32 
+80105314:	55                   	push   %ebp
+80105315:	89 e5                	mov    %esp,%ebp
+80105317:	56                   	push   %esi
+80105318:	8b 75 10             	mov    0x10(%ebp),%esi
+8010531b:	8b 55 08             	mov    0x8(%ebp),%edx
+8010531e:	53                   	push   %ebx
+8010531f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105322:	85 f6                	test   %esi,%esi
+80105324:	74 2a                	je     80105350 <memcmp+0x40>
+80105326:	01 c6                	add    %eax,%esi
+80105328:	eb 10                	jmp    8010533a <memcmp+0x2a>
+8010532a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105330:	83 c0 01             	add    $0x1,%eax
+80105333:	83 c2 01             	add    $0x1,%edx
+80105336:	39 f0                	cmp    %esi,%eax
+80105338:	74 16                	je     80105350 <memcmp+0x40>
+8010533a:	0f b6 0a             	movzbl (%edx),%ecx
+8010533d:	0f b6 18             	movzbl (%eax),%ebx
+80105340:	38 d9                	cmp    %bl,%cl
+80105342:	74 ec                	je     80105330 <memcmp+0x20>
+80105344:	0f b6 c1             	movzbl %cl,%eax
+80105347:	29 d8                	sub    %ebx,%eax
+80105349:	5b                   	pop    %ebx
+8010534a:	5e                   	pop    %esi
+8010534b:	5d                   	pop    %ebp
+8010534c:	c3                   	ret    
+8010534d:	8d 76 00             	lea    0x0(%esi),%esi
+80105350:	5b                   	pop    %ebx
+80105351:	31 c0                	xor    %eax,%eax
+80105353:	5e                   	pop    %esi
+80105354:	5d                   	pop    %ebp
+80105355:	c3                   	ret    
+80105356:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010535d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80105360 <memmove>:
+80105360:	f3 0f 1e fb          	endbr32 
+80105364:	55                   	push   %ebp
+80105365:	89 e5                	mov    %esp,%ebp
+80105367:	57                   	push   %edi
+80105368:	8b 55 08             	mov    0x8(%ebp),%edx
+8010536b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+8010536e:	56                   	push   %esi
+8010536f:	8b 75 0c             	mov    0xc(%ebp),%esi
+80105372:	39 d6                	cmp    %edx,%esi
+80105374:	73 2a                	jae    801053a0 <memmove+0x40>
+80105376:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
+80105379:	39 fa                	cmp    %edi,%edx
+8010537b:	73 23                	jae    801053a0 <memmove+0x40>
+8010537d:	8d 41 ff             	lea    -0x1(%ecx),%eax
+80105380:	85 c9                	test   %ecx,%ecx
+80105382:	74 13                	je     80105397 <memmove+0x37>
+80105384:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105388:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+8010538c:	88 0c 02             	mov    %cl,(%edx,%eax,1)
+8010538f:	83 e8 01             	sub    $0x1,%eax
+80105392:	83 f8 ff             	cmp    $0xffffffff,%eax
+80105395:	75 f1                	jne    80105388 <memmove+0x28>
+80105397:	5e                   	pop    %esi
+80105398:	89 d0                	mov    %edx,%eax
+8010539a:	5f                   	pop    %edi
+8010539b:	5d                   	pop    %ebp
+8010539c:	c3                   	ret    
+8010539d:	8d 76 00             	lea    0x0(%esi),%esi
+801053a0:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
+801053a3:	89 d7                	mov    %edx,%edi
+801053a5:	85 c9                	test   %ecx,%ecx
+801053a7:	74 ee                	je     80105397 <memmove+0x37>
+801053a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801053b0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+801053b1:	39 f0                	cmp    %esi,%eax
+801053b3:	75 fb                	jne    801053b0 <memmove+0x50>
+801053b5:	5e                   	pop    %esi
+801053b6:	89 d0                	mov    %edx,%eax
+801053b8:	5f                   	pop    %edi
+801053b9:	5d                   	pop    %ebp
+801053ba:	c3                   	ret    
+801053bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801053bf:	90                   	nop
+
+801053c0 <memcpy>:
+801053c0:	f3 0f 1e fb          	endbr32 
+801053c4:	eb 9a                	jmp    80105360 <memmove>
+801053c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801053cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801053d0 <strncmp>:
+801053d0:	f3 0f 1e fb          	endbr32 
+801053d4:	55                   	push   %ebp
+801053d5:	89 e5                	mov    %esp,%ebp
+801053d7:	56                   	push   %esi
+801053d8:	8b 75 10             	mov    0x10(%ebp),%esi
+801053db:	8b 4d 08             	mov    0x8(%ebp),%ecx
+801053de:	53                   	push   %ebx
+801053df:	8b 45 0c             	mov    0xc(%ebp),%eax
+801053e2:	85 f6                	test   %esi,%esi
+801053e4:	74 32                	je     80105418 <strncmp+0x48>
+801053e6:	01 c6                	add    %eax,%esi
+801053e8:	eb 14                	jmp    801053fe <strncmp+0x2e>
+801053ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801053f0:	38 da                	cmp    %bl,%dl
+801053f2:	75 14                	jne    80105408 <strncmp+0x38>
+801053f4:	83 c0 01             	add    $0x1,%eax
+801053f7:	83 c1 01             	add    $0x1,%ecx
+801053fa:	39 f0                	cmp    %esi,%eax
+801053fc:	74 1a                	je     80105418 <strncmp+0x48>
+801053fe:	0f b6 11             	movzbl (%ecx),%edx
+80105401:	0f b6 18             	movzbl (%eax),%ebx
+80105404:	84 d2                	test   %dl,%dl
+80105406:	75 e8                	jne    801053f0 <strncmp+0x20>
+80105408:	0f b6 c2             	movzbl %dl,%eax
+8010540b:	29 d8                	sub    %ebx,%eax
+8010540d:	5b                   	pop    %ebx
+8010540e:	5e                   	pop    %esi
+8010540f:	5d                   	pop    %ebp
+80105410:	c3                   	ret    
+80105411:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105418:	5b                   	pop    %ebx
+80105419:	31 c0                	xor    %eax,%eax
+8010541b:	5e                   	pop    %esi
+8010541c:	5d                   	pop    %ebp
+8010541d:	c3                   	ret    
+8010541e:	66 90                	xchg   %ax,%ax
+
+80105420 <strncpy>:
+80105420:	f3 0f 1e fb          	endbr32 
+80105424:	55                   	push   %ebp
+80105425:	89 e5                	mov    %esp,%ebp
+80105427:	57                   	push   %edi
+80105428:	56                   	push   %esi
+80105429:	8b 75 08             	mov    0x8(%ebp),%esi
+8010542c:	53                   	push   %ebx
+8010542d:	8b 45 10             	mov    0x10(%ebp),%eax
+80105430:	89 f2                	mov    %esi,%edx
+80105432:	eb 1b                	jmp    8010544f <strncpy+0x2f>
+80105434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105438:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+8010543c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+8010543f:	83 c2 01             	add    $0x1,%edx
+80105442:	0f b6 7f ff          	movzbl -0x1(%edi),%edi
+80105446:	89 f9                	mov    %edi,%ecx
+80105448:	88 4a ff             	mov    %cl,-0x1(%edx)
+8010544b:	84 c9                	test   %cl,%cl
+8010544d:	74 09                	je     80105458 <strncpy+0x38>
+8010544f:	89 c3                	mov    %eax,%ebx
+80105451:	83 e8 01             	sub    $0x1,%eax
+80105454:	85 db                	test   %ebx,%ebx
+80105456:	7f e0                	jg     80105438 <strncpy+0x18>
+80105458:	89 d1                	mov    %edx,%ecx
+8010545a:	85 c0                	test   %eax,%eax
+8010545c:	7e 15                	jle    80105473 <strncpy+0x53>
+8010545e:	66 90                	xchg   %ax,%ax
+80105460:	83 c1 01             	add    $0x1,%ecx
+80105463:	c6 41 ff 00          	movb   $0x0,-0x1(%ecx)
+80105467:	89 c8                	mov    %ecx,%eax
+80105469:	f7 d0                	not    %eax
+8010546b:	01 d0                	add    %edx,%eax
+8010546d:	01 d8                	add    %ebx,%eax
+8010546f:	85 c0                	test   %eax,%eax
+80105471:	7f ed                	jg     80105460 <strncpy+0x40>
+80105473:	5b                   	pop    %ebx
+80105474:	89 f0                	mov    %esi,%eax
+80105476:	5e                   	pop    %esi
+80105477:	5f                   	pop    %edi
+80105478:	5d                   	pop    %ebp
+80105479:	c3                   	ret    
+8010547a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80105480 <safestrcpy>:
+80105480:	f3 0f 1e fb          	endbr32 
+80105484:	55                   	push   %ebp
+80105485:	89 e5                	mov    %esp,%ebp
+80105487:	56                   	push   %esi
+80105488:	8b 55 10             	mov    0x10(%ebp),%edx
+8010548b:	8b 75 08             	mov    0x8(%ebp),%esi
+8010548e:	53                   	push   %ebx
+8010548f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105492:	85 d2                	test   %edx,%edx
+80105494:	7e 21                	jle    801054b7 <safestrcpy+0x37>
+80105496:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
+8010549a:	89 f2                	mov    %esi,%edx
+8010549c:	eb 12                	jmp    801054b0 <safestrcpy+0x30>
+8010549e:	66 90                	xchg   %ax,%ax
+801054a0:	0f b6 08             	movzbl (%eax),%ecx
+801054a3:	83 c0 01             	add    $0x1,%eax
+801054a6:	83 c2 01             	add    $0x1,%edx
+801054a9:	88 4a ff             	mov    %cl,-0x1(%edx)
+801054ac:	84 c9                	test   %cl,%cl
+801054ae:	74 04                	je     801054b4 <safestrcpy+0x34>
+801054b0:	39 d8                	cmp    %ebx,%eax
+801054b2:	75 ec                	jne    801054a0 <safestrcpy+0x20>
+801054b4:	c6 02 00             	movb   $0x0,(%edx)
+801054b7:	89 f0                	mov    %esi,%eax
+801054b9:	5b                   	pop    %ebx
+801054ba:	5e                   	pop    %esi
+801054bb:	5d                   	pop    %ebp
+801054bc:	c3                   	ret    
+801054bd:	8d 76 00             	lea    0x0(%esi),%esi
 
-801046c0 <memcmp>:
-
-int
-memcmp(const void *v1, const void *v2, uint n)
-{
-801046c0:	f3 0f 1e fb          	endbr32 
-801046c4:	55                   	push   %ebp
-801046c5:	89 e5                	mov    %esp,%ebp
-801046c7:	56                   	push   %esi
-801046c8:	8b 75 10             	mov    0x10(%ebp),%esi
-801046cb:	8b 55 08             	mov    0x8(%ebp),%edx
-801046ce:	53                   	push   %ebx
-801046cf:	8b 45 0c             	mov    0xc(%ebp),%eax
-  const uchar *s1, *s2;
-
-  s1 = v1;
-  s2 = v2;
-  while(n-- > 0){
-801046d2:	85 f6                	test   %esi,%esi
-801046d4:	74 2a                	je     80104700 <memcmp+0x40>
-801046d6:	01 c6                	add    %eax,%esi
-801046d8:	eb 10                	jmp    801046ea <memcmp+0x2a>
-801046da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    if(*s1 != *s2)
-      return *s1 - *s2;
-    s1++, s2++;
-801046e0:	83 c0 01             	add    $0x1,%eax
-801046e3:	83 c2 01             	add    $0x1,%edx
-  while(n-- > 0){
-801046e6:	39 f0                	cmp    %esi,%eax
-801046e8:	74 16                	je     80104700 <memcmp+0x40>
-    if(*s1 != *s2)
-801046ea:	0f b6 0a             	movzbl (%edx),%ecx
-801046ed:	0f b6 18             	movzbl (%eax),%ebx
-801046f0:	38 d9                	cmp    %bl,%cl
-801046f2:	74 ec                	je     801046e0 <memcmp+0x20>
-      return *s1 - *s2;
-801046f4:	0f b6 c1             	movzbl %cl,%eax
-801046f7:	29 d8                	sub    %ebx,%eax
-  }
-
-  return 0;
-}
-801046f9:	5b                   	pop    %ebx
-801046fa:	5e                   	pop    %esi
-801046fb:	5d                   	pop    %ebp
-801046fc:	c3                   	ret    
-801046fd:	8d 76 00             	lea    0x0(%esi),%esi
-80104700:	5b                   	pop    %ebx
-  return 0;
-80104701:	31 c0                	xor    %eax,%eax
-}
-80104703:	5e                   	pop    %esi
-80104704:	5d                   	pop    %ebp
-80104705:	c3                   	ret    
-80104706:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010470d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80104710 <memmove>:
-
-void*
-memmove(void *dst, const void *src, uint n)
-{
-80104710:	f3 0f 1e fb          	endbr32 
-80104714:	55                   	push   %ebp
-80104715:	89 e5                	mov    %esp,%ebp
-80104717:	57                   	push   %edi
-80104718:	8b 55 08             	mov    0x8(%ebp),%edx
-8010471b:	8b 4d 10             	mov    0x10(%ebp),%ecx
-8010471e:	56                   	push   %esi
-8010471f:	8b 75 0c             	mov    0xc(%ebp),%esi
-  const char *s;
-  char *d;
-
-  s = src;
-  d = dst;
-  if(s < d && s + n > d){
-80104722:	39 d6                	cmp    %edx,%esi
-80104724:	73 2a                	jae    80104750 <memmove+0x40>
-80104726:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
-80104729:	39 fa                	cmp    %edi,%edx
-8010472b:	73 23                	jae    80104750 <memmove+0x40>
-8010472d:	8d 41 ff             	lea    -0x1(%ecx),%eax
-    s += n;
-    d += n;
-    while(n-- > 0)
-80104730:	85 c9                	test   %ecx,%ecx
-80104732:	74 13                	je     80104747 <memmove+0x37>
-80104734:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-      *--d = *--s;
-80104738:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
-8010473c:	88 0c 02             	mov    %cl,(%edx,%eax,1)
-    while(n-- > 0)
-8010473f:	83 e8 01             	sub    $0x1,%eax
-80104742:	83 f8 ff             	cmp    $0xffffffff,%eax
-80104745:	75 f1                	jne    80104738 <memmove+0x28>
-  } else
-    while(n-- > 0)
-      *d++ = *s++;
-
-  return dst;
-}
-80104747:	5e                   	pop    %esi
-80104748:	89 d0                	mov    %edx,%eax
-8010474a:	5f                   	pop    %edi
-8010474b:	5d                   	pop    %ebp
-8010474c:	c3                   	ret    
-8010474d:	8d 76 00             	lea    0x0(%esi),%esi
-    while(n-- > 0)
-80104750:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
-80104753:	89 d7                	mov    %edx,%edi
-80104755:	85 c9                	test   %ecx,%ecx
-80104757:	74 ee                	je     80104747 <memmove+0x37>
-80104759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      *d++ = *s++;
-80104760:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-    while(n-- > 0)
-80104761:	39 f0                	cmp    %esi,%eax
-80104763:	75 fb                	jne    80104760 <memmove+0x50>
-}
-80104765:	5e                   	pop    %esi
-80104766:	89 d0                	mov    %edx,%eax
-80104768:	5f                   	pop    %edi
-80104769:	5d                   	pop    %ebp
-8010476a:	c3                   	ret    
-8010476b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010476f:	90                   	nop
-
-80104770 <memcpy>:
-
-// memcpy exists to placate GCC.  Use memmove.
-void*
-memcpy(void *dst, const void *src, uint n)
-{
-80104770:	f3 0f 1e fb          	endbr32 
-  return memmove(dst, src, n);
-80104774:	eb 9a                	jmp    80104710 <memmove>
-80104776:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010477d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80104780 <strncmp>:
-}
-
-int
-strncmp(const char *p, const char *q, uint n)
-{
-80104780:	f3 0f 1e fb          	endbr32 
-80104784:	55                   	push   %ebp
-80104785:	89 e5                	mov    %esp,%ebp
-80104787:	56                   	push   %esi
-80104788:	8b 75 10             	mov    0x10(%ebp),%esi
-8010478b:	8b 4d 08             	mov    0x8(%ebp),%ecx
-8010478e:	53                   	push   %ebx
-8010478f:	8b 45 0c             	mov    0xc(%ebp),%eax
-  while(n > 0 && *p && *p == *q)
-80104792:	85 f6                	test   %esi,%esi
-80104794:	74 32                	je     801047c8 <strncmp+0x48>
-80104796:	01 c6                	add    %eax,%esi
-80104798:	eb 14                	jmp    801047ae <strncmp+0x2e>
-8010479a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-801047a0:	38 da                	cmp    %bl,%dl
-801047a2:	75 14                	jne    801047b8 <strncmp+0x38>
-    n--, p++, q++;
-801047a4:	83 c0 01             	add    $0x1,%eax
-801047a7:	83 c1 01             	add    $0x1,%ecx
-  while(n > 0 && *p && *p == *q)
-801047aa:	39 f0                	cmp    %esi,%eax
-801047ac:	74 1a                	je     801047c8 <strncmp+0x48>
-801047ae:	0f b6 11             	movzbl (%ecx),%edx
-801047b1:	0f b6 18             	movzbl (%eax),%ebx
-801047b4:	84 d2                	test   %dl,%dl
-801047b6:	75 e8                	jne    801047a0 <strncmp+0x20>
-  if(n == 0)
-    return 0;
-  return (uchar)*p - (uchar)*q;
-801047b8:	0f b6 c2             	movzbl %dl,%eax
-801047bb:	29 d8                	sub    %ebx,%eax
-}
-801047bd:	5b                   	pop    %ebx
-801047be:	5e                   	pop    %esi
-801047bf:	5d                   	pop    %ebp
-801047c0:	c3                   	ret    
-801047c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801047c8:	5b                   	pop    %ebx
-    return 0;
-801047c9:	31 c0                	xor    %eax,%eax
-}
-801047cb:	5e                   	pop    %esi
-801047cc:	5d                   	pop    %ebp
-801047cd:	c3                   	ret    
-801047ce:	66 90                	xchg   %ax,%ax
-
-801047d0 <strncpy>:
-
-char*
-strncpy(char *s, const char *t, int n)
-{
-801047d0:	f3 0f 1e fb          	endbr32 
-801047d4:	55                   	push   %ebp
-801047d5:	89 e5                	mov    %esp,%ebp
-801047d7:	57                   	push   %edi
-801047d8:	56                   	push   %esi
-801047d9:	8b 75 08             	mov    0x8(%ebp),%esi
-801047dc:	53                   	push   %ebx
-801047dd:	8b 45 10             	mov    0x10(%ebp),%eax
-  char *os;
-
-  os = s;
-  while(n-- > 0 && (*s++ = *t++) != 0)
-801047e0:	89 f2                	mov    %esi,%edx
-801047e2:	eb 1b                	jmp    801047ff <strncpy+0x2f>
-801047e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801047e8:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-801047ec:	8b 7d 0c             	mov    0xc(%ebp),%edi
-801047ef:	83 c2 01             	add    $0x1,%edx
-801047f2:	0f b6 7f ff          	movzbl -0x1(%edi),%edi
-801047f6:	89 f9                	mov    %edi,%ecx
-801047f8:	88 4a ff             	mov    %cl,-0x1(%edx)
-801047fb:	84 c9                	test   %cl,%cl
-801047fd:	74 09                	je     80104808 <strncpy+0x38>
-801047ff:	89 c3                	mov    %eax,%ebx
-80104801:	83 e8 01             	sub    $0x1,%eax
-80104804:	85 db                	test   %ebx,%ebx
-80104806:	7f e0                	jg     801047e8 <strncpy+0x18>
-    ;
-  while(n-- > 0)
-80104808:	89 d1                	mov    %edx,%ecx
-8010480a:	85 c0                	test   %eax,%eax
-8010480c:	7e 15                	jle    80104823 <strncpy+0x53>
-8010480e:	66 90                	xchg   %ax,%ax
-    *s++ = 0;
-80104810:	83 c1 01             	add    $0x1,%ecx
-80104813:	c6 41 ff 00          	movb   $0x0,-0x1(%ecx)
-  while(n-- > 0)
-80104817:	89 c8                	mov    %ecx,%eax
-80104819:	f7 d0                	not    %eax
-8010481b:	01 d0                	add    %edx,%eax
-8010481d:	01 d8                	add    %ebx,%eax
-8010481f:	85 c0                	test   %eax,%eax
-80104821:	7f ed                	jg     80104810 <strncpy+0x40>
-  return os;
-}
-80104823:	5b                   	pop    %ebx
-80104824:	89 f0                	mov    %esi,%eax
-80104826:	5e                   	pop    %esi
-80104827:	5f                   	pop    %edi
-80104828:	5d                   	pop    %ebp
-80104829:	c3                   	ret    
-8010482a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80104830 <safestrcpy>:
-
-// Like strncpy but guaranteed to NUL-terminate.
-char*
-safestrcpy(char *s, const char *t, int n)
-{
-80104830:	f3 0f 1e fb          	endbr32 
-80104834:	55                   	push   %ebp
-80104835:	89 e5                	mov    %esp,%ebp
-80104837:	56                   	push   %esi
-80104838:	8b 55 10             	mov    0x10(%ebp),%edx
-8010483b:	8b 75 08             	mov    0x8(%ebp),%esi
-8010483e:	53                   	push   %ebx
-8010483f:	8b 45 0c             	mov    0xc(%ebp),%eax
-  char *os;
-
-  os = s;
-  if(n <= 0)
-80104842:	85 d2                	test   %edx,%edx
-80104844:	7e 21                	jle    80104867 <safestrcpy+0x37>
-80104846:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
-8010484a:	89 f2                	mov    %esi,%edx
-8010484c:	eb 12                	jmp    80104860 <safestrcpy+0x30>
-8010484e:	66 90                	xchg   %ax,%ax
-    return os;
-  while(--n > 0 && (*s++ = *t++) != 0)
-80104850:	0f b6 08             	movzbl (%eax),%ecx
-80104853:	83 c0 01             	add    $0x1,%eax
-80104856:	83 c2 01             	add    $0x1,%edx
-80104859:	88 4a ff             	mov    %cl,-0x1(%edx)
-8010485c:	84 c9                	test   %cl,%cl
-8010485e:	74 04                	je     80104864 <safestrcpy+0x34>
-80104860:	39 d8                	cmp    %ebx,%eax
-80104862:	75 ec                	jne    80104850 <safestrcpy+0x20>
-    ;
-  *s = 0;
-80104864:	c6 02 00             	movb   $0x0,(%edx)
-  return os;
-}
-80104867:	89 f0                	mov    %esi,%eax
-80104869:	5b                   	pop    %ebx
-8010486a:	5e                   	pop    %esi
-8010486b:	5d                   	pop    %ebp
-8010486c:	c3                   	ret    
-8010486d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80104870 <strlen>:
-
-int
-strlen(const char *s)
-{
-80104870:	f3 0f 1e fb          	endbr32 
-80104874:	55                   	push   %ebp
-  int n;
-
-  for(n = 0; s[n]; n++)
-80104875:	31 c0                	xor    %eax,%eax
-{
-80104877:	89 e5                	mov    %esp,%ebp
-80104879:	8b 55 08             	mov    0x8(%ebp),%edx
-  for(n = 0; s[n]; n++)
-8010487c:	80 3a 00             	cmpb   $0x0,(%edx)
-8010487f:	74 10                	je     80104891 <strlen+0x21>
-80104881:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104888:	83 c0 01             	add    $0x1,%eax
-8010488b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
-8010488f:	75 f7                	jne    80104888 <strlen+0x18>
-    ;
-  return n;
-}
-80104891:	5d                   	pop    %ebp
-80104892:	c3                   	ret    
-
-80104893 <swtch>:
-# a struct context, and save its address in *old.
-# Switch stacks to new and pop previously-saved registers.
-
-.globl swtch
-swtch:
-  movl 4(%esp), %eax
-80104893:	8b 44 24 04          	mov    0x4(%esp),%eax
-  movl 8(%esp), %edx
-80104897:	8b 54 24 08          	mov    0x8(%esp),%edx
-
-  # Save old callee-saved registers
-  pushl %ebp
-8010489b:	55                   	push   %ebp
-  pushl %ebx
-8010489c:	53                   	push   %ebx
-  pushl %esi
-8010489d:	56                   	push   %esi
-  pushl %edi
-8010489e:	57                   	push   %edi
-
-  # Switch stacks
-  movl %esp, (%eax)
-8010489f:	89 20                	mov    %esp,(%eax)
-  movl %edx, %esp
-801048a1:	89 d4                	mov    %edx,%esp
-
-  # Load new callee-saved registers
-  popl %edi
-801048a3:	5f                   	pop    %edi
-  popl %esi
-801048a4:	5e                   	pop    %esi
-  popl %ebx
-801048a5:	5b                   	pop    %ebx
-  popl %ebp
-801048a6:	5d                   	pop    %ebp
-  ret
-801048a7:	c3                   	ret    
-801048a8:	66 90                	xchg   %ax,%ax
-801048aa:	66 90                	xchg   %ax,%ax
-801048ac:	66 90                	xchg   %ax,%ax
-801048ae:	66 90                	xchg   %ax,%ax
+801054c0 <strlen>:
+801054c0:	f3 0f 1e fb          	endbr32 
+801054c4:	55                   	push   %ebp
+801054c5:	31 c0                	xor    %eax,%eax
+801054c7:	89 e5                	mov    %esp,%ebp
+801054c9:	8b 55 08             	mov    0x8(%ebp),%edx
+801054cc:	80 3a 00             	cmpb   $0x0,(%edx)
+801054cf:	74 10                	je     801054e1 <strlen+0x21>
+801054d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801054d8:	83 c0 01             	add    $0x1,%eax
+801054db:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+801054df:	75 f7                	jne    801054d8 <strlen+0x18>
+801054e1:	5d                   	pop    %ebp
+801054e2:	c3                   	ret    
+
+801054e3 <swtch>:
+801054e3:	8b 44 24 04          	mov    0x4(%esp),%eax
+801054e7:	8b 54 24 08          	mov    0x8(%esp),%edx
+801054eb:	55                   	push   %ebp
+801054ec:	53                   	push   %ebx
+801054ed:	56                   	push   %esi
+801054ee:	57                   	push   %edi
+801054ef:	89 20                	mov    %esp,(%eax)
+801054f1:	89 d4                	mov    %edx,%esp
+801054f3:	5f                   	pop    %edi
+801054f4:	5e                   	pop    %esi
+801054f5:	5b                   	pop    %ebx
+801054f6:	5d                   	pop    %ebp
+801054f7:	c3                   	ret    
+801054f8:	66 90                	xchg   %ax,%ax
+801054fa:	66 90                	xchg   %ax,%ax
+801054fc:	66 90                	xchg   %ax,%ax
+801054fe:	66 90                	xchg   %ax,%ax
 
-801048b0 <fetchint>:
+80105500 <fetchint>:
 // to a saved program counter, and then the first argument.
 
 // Fetch the int at addr from the current process.
 int
 fetchint(uint addr, int *ip)
 {
-801048b0:	f3 0f 1e fb          	endbr32 
-801048b4:	55                   	push   %ebp
-801048b5:	89 e5                	mov    %esp,%ebp
-801048b7:	53                   	push   %ebx
-801048b8:	83 ec 04             	sub    $0x4,%esp
-801048bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80105500:	f3 0f 1e fb          	endbr32 
+80105504:	55                   	push   %ebp
+80105505:	89 e5                	mov    %esp,%ebp
+80105507:	53                   	push   %ebx
+80105508:	83 ec 04             	sub    $0x4,%esp
+8010550b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct proc *curproc = myproc();
-801048be:	e8 9d f0 ff ff       	call   80103960 <myproc>
+8010550e:	e8 dd ea ff ff       	call   80103ff0 <myproc>
 
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-801048c3:	8b 00                	mov    (%eax),%eax
-801048c5:	39 d8                	cmp    %ebx,%eax
-801048c7:	76 17                	jbe    801048e0 <fetchint+0x30>
-801048c9:	8d 53 04             	lea    0x4(%ebx),%edx
-801048cc:	39 d0                	cmp    %edx,%eax
-801048ce:	72 10                	jb     801048e0 <fetchint+0x30>
+80105513:	8b 00                	mov    (%eax),%eax
+80105515:	39 d8                	cmp    %ebx,%eax
+80105517:	76 17                	jbe    80105530 <fetchint+0x30>
+80105519:	8d 53 04             	lea    0x4(%ebx),%edx
+8010551c:	39 d0                	cmp    %edx,%eax
+8010551e:	72 10                	jb     80105530 <fetchint+0x30>
     return -1;
   *ip = *(int*)(addr);
-801048d0:	8b 45 0c             	mov    0xc(%ebp),%eax
-801048d3:	8b 13                	mov    (%ebx),%edx
-801048d5:	89 10                	mov    %edx,(%eax)
+80105520:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105523:	8b 13                	mov    (%ebx),%edx
+80105525:	89 10                	mov    %edx,(%eax)
   return 0;
-801048d7:	31 c0                	xor    %eax,%eax
+80105527:	31 c0                	xor    %eax,%eax
 }
-801048d9:	83 c4 04             	add    $0x4,%esp
-801048dc:	5b                   	pop    %ebx
-801048dd:	5d                   	pop    %ebp
-801048de:	c3                   	ret    
-801048df:	90                   	nop
-    return -1;
-801048e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801048e5:	eb f2                	jmp    801048d9 <fetchint+0x29>
-801048e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801048ee:	66 90                	xchg   %ax,%ax
+80105529:	83 c4 04             	add    $0x4,%esp
+8010552c:	5b                   	pop    %ebx
+8010552d:	5d                   	pop    %ebp
+8010552e:	c3                   	ret    
+8010552f:	90                   	nop
+    return -1;
+80105530:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105535:	eb f2                	jmp    80105529 <fetchint+0x29>
+80105537:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010553e:	66 90                	xchg   %ax,%ax
 
-801048f0 <fetchstr>:
+80105540 <fetchstr>:
 // Fetch the nul-terminated string at addr from the current process.
 // Doesn't actually copy the string - just sets *pp to point at it.
 // Returns length of string, not including nul.
 int
 fetchstr(uint addr, char **pp)
 {
-801048f0:	f3 0f 1e fb          	endbr32 
-801048f4:	55                   	push   %ebp
-801048f5:	89 e5                	mov    %esp,%ebp
-801048f7:	53                   	push   %ebx
-801048f8:	83 ec 04             	sub    $0x4,%esp
-801048fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80105540:	f3 0f 1e fb          	endbr32 
+80105544:	55                   	push   %ebp
+80105545:	89 e5                	mov    %esp,%ebp
+80105547:	53                   	push   %ebx
+80105548:	83 ec 04             	sub    $0x4,%esp
+8010554b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   char *s, *ep;
   struct proc *curproc = myproc();
-801048fe:	e8 5d f0 ff ff       	call   80103960 <myproc>
+8010554e:	e8 9d ea ff ff       	call   80103ff0 <myproc>
 
   if(addr >= curproc->sz)
-80104903:	39 18                	cmp    %ebx,(%eax)
-80104905:	76 31                	jbe    80104938 <fetchstr+0x48>
+80105553:	39 18                	cmp    %ebx,(%eax)
+80105555:	76 31                	jbe    80105588 <fetchstr+0x48>
     return -1;
   *pp = (char*)addr;
-80104907:	8b 55 0c             	mov    0xc(%ebp),%edx
-8010490a:	89 1a                	mov    %ebx,(%edx)
+80105557:	8b 55 0c             	mov    0xc(%ebp),%edx
+8010555a:	89 1a                	mov    %ebx,(%edx)
   ep = (char*)curproc->sz;
-8010490c:	8b 10                	mov    (%eax),%edx
+8010555c:	8b 10                	mov    (%eax),%edx
   for(s = *pp; s < ep; s++){
-8010490e:	39 d3                	cmp    %edx,%ebx
-80104910:	73 26                	jae    80104938 <fetchstr+0x48>
-80104912:	89 d8                	mov    %ebx,%eax
-80104914:	eb 11                	jmp    80104927 <fetchstr+0x37>
-80104916:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010491d:	8d 76 00             	lea    0x0(%esi),%esi
-80104920:	83 c0 01             	add    $0x1,%eax
-80104923:	39 c2                	cmp    %eax,%edx
-80104925:	76 11                	jbe    80104938 <fetchstr+0x48>
+8010555e:	39 d3                	cmp    %edx,%ebx
+80105560:	73 26                	jae    80105588 <fetchstr+0x48>
+80105562:	89 d8                	mov    %ebx,%eax
+80105564:	eb 11                	jmp    80105577 <fetchstr+0x37>
+80105566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010556d:	8d 76 00             	lea    0x0(%esi),%esi
+80105570:	83 c0 01             	add    $0x1,%eax
+80105573:	39 c2                	cmp    %eax,%edx
+80105575:	76 11                	jbe    80105588 <fetchstr+0x48>
     if(*s == 0)
-80104927:	80 38 00             	cmpb   $0x0,(%eax)
-8010492a:	75 f4                	jne    80104920 <fetchstr+0x30>
+80105577:	80 38 00             	cmpb   $0x0,(%eax)
+8010557a:	75 f4                	jne    80105570 <fetchstr+0x30>
       return s - *pp;
   }
   return -1;
 }
-8010492c:	83 c4 04             	add    $0x4,%esp
+8010557c:	83 c4 04             	add    $0x4,%esp
       return s - *pp;
-8010492f:	29 d8                	sub    %ebx,%eax
+8010557f:	29 d8                	sub    %ebx,%eax
 }
-80104931:	5b                   	pop    %ebx
-80104932:	5d                   	pop    %ebp
-80104933:	c3                   	ret    
-80104934:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104938:	83 c4 04             	add    $0x4,%esp
-    return -1;
-8010493b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104940:	5b                   	pop    %ebx
-80104941:	5d                   	pop    %ebp
-80104942:	c3                   	ret    
-80104943:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010494a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105581:	5b                   	pop    %ebx
+80105582:	5d                   	pop    %ebp
+80105583:	c3                   	ret    
+80105584:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105588:	83 c4 04             	add    $0x4,%esp
+    return -1;
+8010558b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105590:	5b                   	pop    %ebx
+80105591:	5d                   	pop    %ebp
+80105592:	c3                   	ret    
+80105593:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010559a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104950 <argint>:
+801055a0 <argint>:
 
 // Fetch the nth 32-bit system call argument.
 int
 argint(int n, int *ip)
 {
-80104950:	f3 0f 1e fb          	endbr32 
-80104954:	55                   	push   %ebp
-80104955:	89 e5                	mov    %esp,%ebp
-80104957:	56                   	push   %esi
-80104958:	53                   	push   %ebx
+801055a0:	f3 0f 1e fb          	endbr32 
+801055a4:	55                   	push   %ebp
+801055a5:	89 e5                	mov    %esp,%ebp
+801055a7:	56                   	push   %esi
+801055a8:	53                   	push   %ebx
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104959:	e8 02 f0 ff ff       	call   80103960 <myproc>
-8010495e:	8b 55 08             	mov    0x8(%ebp),%edx
-80104961:	8b 40 18             	mov    0x18(%eax),%eax
-80104964:	8b 40 44             	mov    0x44(%eax),%eax
-80104967:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+801055a9:	e8 42 ea ff ff       	call   80103ff0 <myproc>
+801055ae:	8b 55 08             	mov    0x8(%ebp),%edx
+801055b1:	8b 40 18             	mov    0x18(%eax),%eax
+801055b4:	8b 40 44             	mov    0x44(%eax),%eax
+801055b7:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
   struct proc *curproc = myproc();
-8010496a:	e8 f1 ef ff ff       	call   80103960 <myproc>
+801055ba:	e8 31 ea ff ff       	call   80103ff0 <myproc>
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-8010496f:	8d 73 04             	lea    0x4(%ebx),%esi
+801055bf:	8d 73 04             	lea    0x4(%ebx),%esi
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-80104972:	8b 00                	mov    (%eax),%eax
-80104974:	39 c6                	cmp    %eax,%esi
-80104976:	73 18                	jae    80104990 <argint+0x40>
-80104978:	8d 53 08             	lea    0x8(%ebx),%edx
-8010497b:	39 d0                	cmp    %edx,%eax
-8010497d:	72 11                	jb     80104990 <argint+0x40>
+801055c2:	8b 00                	mov    (%eax),%eax
+801055c4:	39 c6                	cmp    %eax,%esi
+801055c6:	73 18                	jae    801055e0 <argint+0x40>
+801055c8:	8d 53 08             	lea    0x8(%ebx),%edx
+801055cb:	39 d0                	cmp    %edx,%eax
+801055cd:	72 11                	jb     801055e0 <argint+0x40>
   *ip = *(int*)(addr);
-8010497f:	8b 45 0c             	mov    0xc(%ebp),%eax
-80104982:	8b 53 04             	mov    0x4(%ebx),%edx
-80104985:	89 10                	mov    %edx,(%eax)
+801055cf:	8b 45 0c             	mov    0xc(%ebp),%eax
+801055d2:	8b 53 04             	mov    0x4(%ebx),%edx
+801055d5:	89 10                	mov    %edx,(%eax)
   return 0;
-80104987:	31 c0                	xor    %eax,%eax
+801055d7:	31 c0                	xor    %eax,%eax
 }
-80104989:	5b                   	pop    %ebx
-8010498a:	5e                   	pop    %esi
-8010498b:	5d                   	pop    %ebp
-8010498c:	c3                   	ret    
-8010498d:	8d 76 00             	lea    0x0(%esi),%esi
+801055d9:	5b                   	pop    %ebx
+801055da:	5e                   	pop    %esi
+801055db:	5d                   	pop    %ebp
+801055dc:	c3                   	ret    
+801055dd:	8d 76 00             	lea    0x0(%esi),%esi
     return -1;
-80104990:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801055e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104995:	eb f2                	jmp    80104989 <argint+0x39>
-80104997:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010499e:	66 90                	xchg   %ax,%ax
+801055e5:	eb f2                	jmp    801055d9 <argint+0x39>
+801055e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801055ee:	66 90                	xchg   %ax,%ax
 
-801049a0 <argptr>:
+801055f0 <argptr>:
 // Fetch the nth word-sized system call argument as a pointer
 // to a block of memory of size bytes.  Check that the pointer
 // lies within the process address space.
 int
 argptr(int n, char **pp, int size)
 {
-801049a0:	f3 0f 1e fb          	endbr32 
-801049a4:	55                   	push   %ebp
-801049a5:	89 e5                	mov    %esp,%ebp
-801049a7:	56                   	push   %esi
-801049a8:	53                   	push   %ebx
-801049a9:	83 ec 10             	sub    $0x10,%esp
-801049ac:	8b 5d 10             	mov    0x10(%ebp),%ebx
+801055f0:	f3 0f 1e fb          	endbr32 
+801055f4:	55                   	push   %ebp
+801055f5:	89 e5                	mov    %esp,%ebp
+801055f7:	56                   	push   %esi
+801055f8:	53                   	push   %ebx
+801055f9:	83 ec 10             	sub    $0x10,%esp
+801055fc:	8b 5d 10             	mov    0x10(%ebp),%ebx
   int i;
   struct proc *curproc = myproc();
-801049af:	e8 ac ef ff ff       	call   80103960 <myproc>
+801055ff:	e8 ec e9 ff ff       	call   80103ff0 <myproc>
  
   if(argint(n, &i) < 0)
-801049b4:	83 ec 08             	sub    $0x8,%esp
+80105604:	83 ec 08             	sub    $0x8,%esp
   struct proc *curproc = myproc();
-801049b7:	89 c6                	mov    %eax,%esi
+80105607:	89 c6                	mov    %eax,%esi
   if(argint(n, &i) < 0)
-801049b9:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801049bc:	50                   	push   %eax
-801049bd:	ff 75 08             	pushl  0x8(%ebp)
-801049c0:	e8 8b ff ff ff       	call   80104950 <argint>
+80105609:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010560c:	50                   	push   %eax
+8010560d:	ff 75 08             	pushl  0x8(%ebp)
+80105610:	e8 8b ff ff ff       	call   801055a0 <argint>
     return -1;
   if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
-801049c5:	83 c4 10             	add    $0x10,%esp
-801049c8:	85 c0                	test   %eax,%eax
-801049ca:	78 24                	js     801049f0 <argptr+0x50>
-801049cc:	85 db                	test   %ebx,%ebx
-801049ce:	78 20                	js     801049f0 <argptr+0x50>
-801049d0:	8b 16                	mov    (%esi),%edx
-801049d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801049d5:	39 c2                	cmp    %eax,%edx
-801049d7:	76 17                	jbe    801049f0 <argptr+0x50>
-801049d9:	01 c3                	add    %eax,%ebx
-801049db:	39 da                	cmp    %ebx,%edx
-801049dd:	72 11                	jb     801049f0 <argptr+0x50>
+80105615:	83 c4 10             	add    $0x10,%esp
+80105618:	85 c0                	test   %eax,%eax
+8010561a:	78 24                	js     80105640 <argptr+0x50>
+8010561c:	85 db                	test   %ebx,%ebx
+8010561e:	78 20                	js     80105640 <argptr+0x50>
+80105620:	8b 16                	mov    (%esi),%edx
+80105622:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105625:	39 c2                	cmp    %eax,%edx
+80105627:	76 17                	jbe    80105640 <argptr+0x50>
+80105629:	01 c3                	add    %eax,%ebx
+8010562b:	39 da                	cmp    %ebx,%edx
+8010562d:	72 11                	jb     80105640 <argptr+0x50>
     return -1;
   *pp = (char*)i;
-801049df:	8b 55 0c             	mov    0xc(%ebp),%edx
-801049e2:	89 02                	mov    %eax,(%edx)
+8010562f:	8b 55 0c             	mov    0xc(%ebp),%edx
+80105632:	89 02                	mov    %eax,(%edx)
   return 0;
-801049e4:	31 c0                	xor    %eax,%eax
+80105634:	31 c0                	xor    %eax,%eax
 }
-801049e6:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801049e9:	5b                   	pop    %ebx
-801049ea:	5e                   	pop    %esi
-801049eb:	5d                   	pop    %ebp
-801049ec:	c3                   	ret    
-801049ed:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-801049f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801049f5:	eb ef                	jmp    801049e6 <argptr+0x46>
-801049f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801049fe:	66 90                	xchg   %ax,%ax
+80105636:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105639:	5b                   	pop    %ebx
+8010563a:	5e                   	pop    %esi
+8010563b:	5d                   	pop    %ebp
+8010563c:	c3                   	ret    
+8010563d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80105640:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105645:	eb ef                	jmp    80105636 <argptr+0x46>
+80105647:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010564e:	66 90                	xchg   %ax,%ax
 
-80104a00 <argstr>:
+80105650 <argstr>:
 // Check that the pointer is valid and the string is nul-terminated.
 // (There is no shared writable memory, so the string can't change
 // between this check and being used by the kernel.)
 int
 argstr(int n, char **pp)
 {
-80104a00:	f3 0f 1e fb          	endbr32 
-80104a04:	55                   	push   %ebp
-80104a05:	89 e5                	mov    %esp,%ebp
-80104a07:	83 ec 20             	sub    $0x20,%esp
+80105650:	f3 0f 1e fb          	endbr32 
+80105654:	55                   	push   %ebp
+80105655:	89 e5                	mov    %esp,%ebp
+80105657:	83 ec 20             	sub    $0x20,%esp
   int addr;
   if(argint(n, &addr) < 0)
-80104a0a:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104a0d:	50                   	push   %eax
-80104a0e:	ff 75 08             	pushl  0x8(%ebp)
-80104a11:	e8 3a ff ff ff       	call   80104950 <argint>
-80104a16:	83 c4 10             	add    $0x10,%esp
-80104a19:	85 c0                	test   %eax,%eax
-80104a1b:	78 13                	js     80104a30 <argstr+0x30>
+8010565a:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010565d:	50                   	push   %eax
+8010565e:	ff 75 08             	pushl  0x8(%ebp)
+80105661:	e8 3a ff ff ff       	call   801055a0 <argint>
+80105666:	83 c4 10             	add    $0x10,%esp
+80105669:	85 c0                	test   %eax,%eax
+8010566b:	78 13                	js     80105680 <argstr+0x30>
     return -1;
   return fetchstr(addr, pp);
-80104a1d:	83 ec 08             	sub    $0x8,%esp
-80104a20:	ff 75 0c             	pushl  0xc(%ebp)
-80104a23:	ff 75 f4             	pushl  -0xc(%ebp)
-80104a26:	e8 c5 fe ff ff       	call   801048f0 <fetchstr>
-80104a2b:	83 c4 10             	add    $0x10,%esp
-}
-80104a2e:	c9                   	leave  
-80104a2f:	c3                   	ret    
-80104a30:	c9                   	leave  
-    return -1;
-80104a31:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104a36:	c3                   	ret    
-80104a37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104a3e:	66 90                	xchg   %ax,%ax
+8010566d:	83 ec 08             	sub    $0x8,%esp
+80105670:	ff 75 0c             	pushl  0xc(%ebp)
+80105673:	ff 75 f4             	pushl  -0xc(%ebp)
+80105676:	e8 c5 fe ff ff       	call   80105540 <fetchstr>
+8010567b:	83 c4 10             	add    $0x10,%esp
+}
+8010567e:	c9                   	leave  
+8010567f:	c3                   	ret    
+80105680:	c9                   	leave  
+    return -1;
+80105681:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105686:	c3                   	ret    
+80105687:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010568e:	66 90                	xchg   %ax,%ax
 
-80104a40 <syscall>:
+80105690 <syscall>:
 [SYS_close]   sys_close,
 };
 
 void
 syscall(void)
 {
-80104a40:	f3 0f 1e fb          	endbr32 
-80104a44:	55                   	push   %ebp
-80104a45:	89 e5                	mov    %esp,%ebp
-80104a47:	53                   	push   %ebx
-80104a48:	83 ec 04             	sub    $0x4,%esp
+80105690:	f3 0f 1e fb          	endbr32 
+80105694:	55                   	push   %ebp
+80105695:	89 e5                	mov    %esp,%ebp
+80105697:	53                   	push   %ebx
+80105698:	83 ec 04             	sub    $0x4,%esp
   int num;
   struct proc *curproc = myproc();
-80104a4b:	e8 10 ef ff ff       	call   80103960 <myproc>
-80104a50:	89 c3                	mov    %eax,%ebx
+8010569b:	e8 50 e9 ff ff       	call   80103ff0 <myproc>
+801056a0:	89 c3                	mov    %eax,%ebx
 
   num = curproc->tf->eax;
-80104a52:	8b 40 18             	mov    0x18(%eax),%eax
-80104a55:	8b 40 1c             	mov    0x1c(%eax),%eax
+801056a2:	8b 40 18             	mov    0x18(%eax),%eax
+801056a5:	8b 40 1c             	mov    0x1c(%eax),%eax
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-80104a58:	8d 50 ff             	lea    -0x1(%eax),%edx
-80104a5b:	83 fa 14             	cmp    $0x14,%edx
-80104a5e:	77 20                	ja     80104a80 <syscall+0x40>
-80104a60:	8b 14 85 a0 77 10 80 	mov    -0x7fef8860(,%eax,4),%edx
-80104a67:	85 d2                	test   %edx,%edx
-80104a69:	74 15                	je     80104a80 <syscall+0x40>
+801056a8:	8d 50 ff             	lea    -0x1(%eax),%edx
+801056ab:	83 fa 14             	cmp    $0x14,%edx
+801056ae:	77 20                	ja     801056d0 <syscall+0x40>
+801056b0:	8b 14 85 40 86 10 80 	mov    -0x7fef79c0(,%eax,4),%edx
+801056b7:	85 d2                	test   %edx,%edx
+801056b9:	74 15                	je     801056d0 <syscall+0x40>
     curproc->tf->eax = syscalls[num]();
-80104a6b:	ff d2                	call   *%edx
-80104a6d:	89 c2                	mov    %eax,%edx
-80104a6f:	8b 43 18             	mov    0x18(%ebx),%eax
-80104a72:	89 50 1c             	mov    %edx,0x1c(%eax)
+801056bb:	ff d2                	call   *%edx
+801056bd:	89 c2                	mov    %eax,%edx
+801056bf:	8b 43 18             	mov    0x18(%ebx),%eax
+801056c2:	89 50 1c             	mov    %edx,0x1c(%eax)
   } else {
     cprintf("%d %s: unknown sys call %d\n",
             curproc->pid, curproc->name, num);
     curproc->tf->eax = -1;
   }
 }
-80104a75:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104a78:	c9                   	leave  
-80104a79:	c3                   	ret    
-80104a7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801056c5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801056c8:	c9                   	leave  
+801056c9:	c3                   	ret    
+801056ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     cprintf("%d %s: unknown sys call %d\n",
-80104a80:	50                   	push   %eax
+801056d0:	50                   	push   %eax
             curproc->pid, curproc->name, num);
-80104a81:	8d 43 6c             	lea    0x6c(%ebx),%eax
+801056d1:	8d 43 6c             	lea    0x6c(%ebx),%eax
     cprintf("%d %s: unknown sys call %d\n",
-80104a84:	50                   	push   %eax
-80104a85:	ff 73 10             	pushl  0x10(%ebx)
-80104a88:	68 7d 77 10 80       	push   $0x8010777d
-80104a8d:	e8 1e bc ff ff       	call   801006b0 <cprintf>
+801056d4:	50                   	push   %eax
+801056d5:	ff 73 10             	pushl  0x10(%ebx)
+801056d8:	68 11 86 10 80       	push   $0x80108611
+801056dd:	e8 ce af ff ff       	call   801006b0 <cprintf>
     curproc->tf->eax = -1;
-80104a92:	8b 43 18             	mov    0x18(%ebx),%eax
-80104a95:	83 c4 10             	add    $0x10,%esp
-80104a98:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
-}
-80104a9f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104aa2:	c9                   	leave  
-80104aa3:	c3                   	ret    
-80104aa4:	66 90                	xchg   %ax,%ax
-80104aa6:	66 90                	xchg   %ax,%ax
-80104aa8:	66 90                	xchg   %ax,%ax
-80104aaa:	66 90                	xchg   %ax,%ax
-80104aac:	66 90                	xchg   %ax,%ax
-80104aae:	66 90                	xchg   %ax,%ax
+801056e2:	8b 43 18             	mov    0x18(%ebx),%eax
+801056e5:	83 c4 10             	add    $0x10,%esp
+801056e8:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
+}
+801056ef:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801056f2:	c9                   	leave  
+801056f3:	c3                   	ret    
+801056f4:	66 90                	xchg   %ax,%ax
+801056f6:	66 90                	xchg   %ax,%ax
+801056f8:	66 90                	xchg   %ax,%ax
+801056fa:	66 90                	xchg   %ax,%ax
+801056fc:	66 90                	xchg   %ax,%ax
+801056fe:	66 90                	xchg   %ax,%ax
 
-80104ab0 <create>:
+80105700 <create>:
   return -1;
 }
 
 static struct inode*
 create(char *path, short type, short major, short minor)
 {
-80104ab0:	55                   	push   %ebp
-80104ab1:	89 e5                	mov    %esp,%ebp
-80104ab3:	57                   	push   %edi
-80104ab4:	56                   	push   %esi
+80105700:	55                   	push   %ebp
+80105701:	89 e5                	mov    %esp,%ebp
+80105703:	57                   	push   %edi
+80105704:	56                   	push   %esi
   struct inode *ip, *dp;
   char name[DIRSIZ];
 
   if((dp = nameiparent(path, name)) == 0)
-80104ab5:	8d 7d da             	lea    -0x26(%ebp),%edi
+80105705:	8d 7d da             	lea    -0x26(%ebp),%edi
 {
-80104ab8:	53                   	push   %ebx
-80104ab9:	83 ec 34             	sub    $0x34,%esp
-80104abc:	89 4d d0             	mov    %ecx,-0x30(%ebp)
-80104abf:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80105708:	53                   	push   %ebx
+80105709:	83 ec 34             	sub    $0x34,%esp
+8010570c:	89 4d d0             	mov    %ecx,-0x30(%ebp)
+8010570f:	8b 4d 08             	mov    0x8(%ebp),%ecx
   if((dp = nameiparent(path, name)) == 0)
-80104ac2:	57                   	push   %edi
-80104ac3:	50                   	push   %eax
+80105712:	57                   	push   %edi
+80105713:	50                   	push   %eax
 {
-80104ac4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-80104ac7:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+80105714:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+80105717:	89 4d cc             	mov    %ecx,-0x34(%ebp)
   if((dp = nameiparent(path, name)) == 0)
-80104aca:	e8 81 d5 ff ff       	call   80102050 <nameiparent>
-80104acf:	83 c4 10             	add    $0x10,%esp
-80104ad2:	85 c0                	test   %eax,%eax
-80104ad4:	0f 84 46 01 00 00    	je     80104c20 <create+0x170>
+8010571a:	e8 31 c9 ff ff       	call   80102050 <nameiparent>
+8010571f:	83 c4 10             	add    $0x10,%esp
+80105722:	85 c0                	test   %eax,%eax
+80105724:	0f 84 46 01 00 00    	je     80105870 <create+0x170>
     return 0;
   ilock(dp);
-80104ada:	83 ec 0c             	sub    $0xc,%esp
-80104add:	89 c3                	mov    %eax,%ebx
-80104adf:	50                   	push   %eax
-80104ae0:	e8 7b cc ff ff       	call   80101760 <ilock>
+8010572a:	83 ec 0c             	sub    $0xc,%esp
+8010572d:	89 c3                	mov    %eax,%ebx
+8010572f:	50                   	push   %eax
+80105730:	e8 2b c0 ff ff       	call   80101760 <ilock>
 
   if((ip = dirlookup(dp, name, 0)) != 0){
-80104ae5:	83 c4 0c             	add    $0xc,%esp
-80104ae8:	6a 00                	push   $0x0
-80104aea:	57                   	push   %edi
-80104aeb:	53                   	push   %ebx
-80104aec:	e8 bf d1 ff ff       	call   80101cb0 <dirlookup>
-80104af1:	83 c4 10             	add    $0x10,%esp
-80104af4:	89 c6                	mov    %eax,%esi
-80104af6:	85 c0                	test   %eax,%eax
-80104af8:	74 56                	je     80104b50 <create+0xa0>
+80105735:	83 c4 0c             	add    $0xc,%esp
+80105738:	6a 00                	push   $0x0
+8010573a:	57                   	push   %edi
+8010573b:	53                   	push   %ebx
+8010573c:	e8 6f c5 ff ff       	call   80101cb0 <dirlookup>
+80105741:	83 c4 10             	add    $0x10,%esp
+80105744:	89 c6                	mov    %eax,%esi
+80105746:	85 c0                	test   %eax,%eax
+80105748:	74 56                	je     801057a0 <create+0xa0>
     iunlockput(dp);
-80104afa:	83 ec 0c             	sub    $0xc,%esp
-80104afd:	53                   	push   %ebx
-80104afe:	e8 fd ce ff ff       	call   80101a00 <iunlockput>
+8010574a:	83 ec 0c             	sub    $0xc,%esp
+8010574d:	53                   	push   %ebx
+8010574e:	e8 ad c2 ff ff       	call   80101a00 <iunlockput>
     ilock(ip);
-80104b03:	89 34 24             	mov    %esi,(%esp)
-80104b06:	e8 55 cc ff ff       	call   80101760 <ilock>
+80105753:	89 34 24             	mov    %esi,(%esp)
+80105756:	e8 05 c0 ff ff       	call   80101760 <ilock>
     if(type == T_FILE && ip->type == T_FILE)
-80104b0b:	83 c4 10             	add    $0x10,%esp
-80104b0e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
-80104b13:	75 1b                	jne    80104b30 <create+0x80>
-80104b15:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
-80104b1a:	75 14                	jne    80104b30 <create+0x80>
+8010575b:	83 c4 10             	add    $0x10,%esp
+8010575e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
+80105763:	75 1b                	jne    80105780 <create+0x80>
+80105765:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
+8010576a:	75 14                	jne    80105780 <create+0x80>
     panic("create: dirlink");
 
   iunlockput(dp);
 
   return ip;
 }
-80104b1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104b1f:	89 f0                	mov    %esi,%eax
-80104b21:	5b                   	pop    %ebx
-80104b22:	5e                   	pop    %esi
-80104b23:	5f                   	pop    %edi
-80104b24:	5d                   	pop    %ebp
-80104b25:	c3                   	ret    
-80104b26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104b2d:	8d 76 00             	lea    0x0(%esi),%esi
+8010576c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010576f:	89 f0                	mov    %esi,%eax
+80105771:	5b                   	pop    %ebx
+80105772:	5e                   	pop    %esi
+80105773:	5f                   	pop    %edi
+80105774:	5d                   	pop    %ebp
+80105775:	c3                   	ret    
+80105776:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010577d:	8d 76 00             	lea    0x0(%esi),%esi
     iunlockput(ip);
-80104b30:	83 ec 0c             	sub    $0xc,%esp
-80104b33:	56                   	push   %esi
+80105780:	83 ec 0c             	sub    $0xc,%esp
+80105783:	56                   	push   %esi
     return 0;
-80104b34:	31 f6                	xor    %esi,%esi
+80105784:	31 f6                	xor    %esi,%esi
     iunlockput(ip);
-80104b36:	e8 c5 ce ff ff       	call   80101a00 <iunlockput>
+80105786:	e8 75 c2 ff ff       	call   80101a00 <iunlockput>
     return 0;
-80104b3b:	83 c4 10             	add    $0x10,%esp
+8010578b:	83 c4 10             	add    $0x10,%esp
 }
-80104b3e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104b41:	89 f0                	mov    %esi,%eax
-80104b43:	5b                   	pop    %ebx
-80104b44:	5e                   	pop    %esi
-80104b45:	5f                   	pop    %edi
-80104b46:	5d                   	pop    %ebp
-80104b47:	c3                   	ret    
-80104b48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104b4f:	90                   	nop
+8010578e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105791:	89 f0                	mov    %esi,%eax
+80105793:	5b                   	pop    %ebx
+80105794:	5e                   	pop    %esi
+80105795:	5f                   	pop    %edi
+80105796:	5d                   	pop    %ebp
+80105797:	c3                   	ret    
+80105798:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010579f:	90                   	nop
   if((ip = ialloc(dp->dev, type)) == 0)
-80104b50:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
-80104b54:	83 ec 08             	sub    $0x8,%esp
-80104b57:	50                   	push   %eax
-80104b58:	ff 33                	pushl  (%ebx)
-80104b5a:	e8 81 ca ff ff       	call   801015e0 <ialloc>
-80104b5f:	83 c4 10             	add    $0x10,%esp
-80104b62:	89 c6                	mov    %eax,%esi
-80104b64:	85 c0                	test   %eax,%eax
-80104b66:	0f 84 cd 00 00 00    	je     80104c39 <create+0x189>
+801057a0:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
+801057a4:	83 ec 08             	sub    $0x8,%esp
+801057a7:	50                   	push   %eax
+801057a8:	ff 33                	pushl  (%ebx)
+801057aa:	e8 31 be ff ff       	call   801015e0 <ialloc>
+801057af:	83 c4 10             	add    $0x10,%esp
+801057b2:	89 c6                	mov    %eax,%esi
+801057b4:	85 c0                	test   %eax,%eax
+801057b6:	0f 84 cd 00 00 00    	je     80105889 <create+0x189>
   ilock(ip);
-80104b6c:	83 ec 0c             	sub    $0xc,%esp
-80104b6f:	50                   	push   %eax
-80104b70:	e8 eb cb ff ff       	call   80101760 <ilock>
+801057bc:	83 ec 0c             	sub    $0xc,%esp
+801057bf:	50                   	push   %eax
+801057c0:	e8 9b bf ff ff       	call   80101760 <ilock>
   ip->major = major;
-80104b75:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
-80104b79:	66 89 46 52          	mov    %ax,0x52(%esi)
+801057c5:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
+801057c9:	66 89 46 52          	mov    %ax,0x52(%esi)
   ip->minor = minor;
-80104b7d:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
-80104b81:	66 89 46 54          	mov    %ax,0x54(%esi)
+801057cd:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
+801057d1:	66 89 46 54          	mov    %ax,0x54(%esi)
   ip->nlink = 1;
-80104b85:	b8 01 00 00 00       	mov    $0x1,%eax
-80104b8a:	66 89 46 56          	mov    %ax,0x56(%esi)
+801057d5:	b8 01 00 00 00       	mov    $0x1,%eax
+801057da:	66 89 46 56          	mov    %ax,0x56(%esi)
   iupdate(ip);
-80104b8e:	89 34 24             	mov    %esi,(%esp)
-80104b91:	e8 0a cb ff ff       	call   801016a0 <iupdate>
+801057de:	89 34 24             	mov    %esi,(%esp)
+801057e1:	e8 ba be ff ff       	call   801016a0 <iupdate>
   if(type == T_DIR){  // Create . and .. entries.
-80104b96:	83 c4 10             	add    $0x10,%esp
-80104b99:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
-80104b9e:	74 30                	je     80104bd0 <create+0x120>
+801057e6:	83 c4 10             	add    $0x10,%esp
+801057e9:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
+801057ee:	74 30                	je     80105820 <create+0x120>
   if(dirlink(dp, name, ip->inum) < 0)
-80104ba0:	83 ec 04             	sub    $0x4,%esp
-80104ba3:	ff 76 04             	pushl  0x4(%esi)
-80104ba6:	57                   	push   %edi
-80104ba7:	53                   	push   %ebx
-80104ba8:	e8 c3 d3 ff ff       	call   80101f70 <dirlink>
-80104bad:	83 c4 10             	add    $0x10,%esp
-80104bb0:	85 c0                	test   %eax,%eax
-80104bb2:	78 78                	js     80104c2c <create+0x17c>
+801057f0:	83 ec 04             	sub    $0x4,%esp
+801057f3:	ff 76 04             	pushl  0x4(%esi)
+801057f6:	57                   	push   %edi
+801057f7:	53                   	push   %ebx
+801057f8:	e8 73 c7 ff ff       	call   80101f70 <dirlink>
+801057fd:	83 c4 10             	add    $0x10,%esp
+80105800:	85 c0                	test   %eax,%eax
+80105802:	78 78                	js     8010587c <create+0x17c>
   iunlockput(dp);
-80104bb4:	83 ec 0c             	sub    $0xc,%esp
-80104bb7:	53                   	push   %ebx
-80104bb8:	e8 43 ce ff ff       	call   80101a00 <iunlockput>
+80105804:	83 ec 0c             	sub    $0xc,%esp
+80105807:	53                   	push   %ebx
+80105808:	e8 f3 c1 ff ff       	call   80101a00 <iunlockput>
   return ip;
-80104bbd:	83 c4 10             	add    $0x10,%esp
+8010580d:	83 c4 10             	add    $0x10,%esp
 }
-80104bc0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104bc3:	89 f0                	mov    %esi,%eax
-80104bc5:	5b                   	pop    %ebx
-80104bc6:	5e                   	pop    %esi
-80104bc7:	5f                   	pop    %edi
-80104bc8:	5d                   	pop    %ebp
-80104bc9:	c3                   	ret    
-80104bca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105810:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105813:	89 f0                	mov    %esi,%eax
+80105815:	5b                   	pop    %ebx
+80105816:	5e                   	pop    %esi
+80105817:	5f                   	pop    %edi
+80105818:	5d                   	pop    %ebp
+80105819:	c3                   	ret    
+8010581a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     iupdate(dp);
-80104bd0:	83 ec 0c             	sub    $0xc,%esp
+80105820:	83 ec 0c             	sub    $0xc,%esp
     dp->nlink++;  // for ".."
-80104bd3:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+80105823:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
     iupdate(dp);
-80104bd8:	53                   	push   %ebx
-80104bd9:	e8 c2 ca ff ff       	call   801016a0 <iupdate>
+80105828:	53                   	push   %ebx
+80105829:	e8 72 be ff ff       	call   801016a0 <iupdate>
     if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
-80104bde:	83 c4 0c             	add    $0xc,%esp
-80104be1:	ff 76 04             	pushl  0x4(%esi)
-80104be4:	68 14 78 10 80       	push   $0x80107814
-80104be9:	56                   	push   %esi
-80104bea:	e8 81 d3 ff ff       	call   80101f70 <dirlink>
-80104bef:	83 c4 10             	add    $0x10,%esp
-80104bf2:	85 c0                	test   %eax,%eax
-80104bf4:	78 18                	js     80104c0e <create+0x15e>
-80104bf6:	83 ec 04             	sub    $0x4,%esp
-80104bf9:	ff 73 04             	pushl  0x4(%ebx)
-80104bfc:	68 13 78 10 80       	push   $0x80107813
-80104c01:	56                   	push   %esi
-80104c02:	e8 69 d3 ff ff       	call   80101f70 <dirlink>
-80104c07:	83 c4 10             	add    $0x10,%esp
-80104c0a:	85 c0                	test   %eax,%eax
-80104c0c:	79 92                	jns    80104ba0 <create+0xf0>
+8010582e:	83 c4 0c             	add    $0xc,%esp
+80105831:	ff 76 04             	pushl  0x4(%esi)
+80105834:	68 a5 86 10 80       	push   $0x801086a5
+80105839:	56                   	push   %esi
+8010583a:	e8 31 c7 ff ff       	call   80101f70 <dirlink>
+8010583f:	83 c4 10             	add    $0x10,%esp
+80105842:	85 c0                	test   %eax,%eax
+80105844:	78 18                	js     8010585e <create+0x15e>
+80105846:	83 ec 04             	sub    $0x4,%esp
+80105849:	ff 73 04             	pushl  0x4(%ebx)
+8010584c:	68 a4 86 10 80       	push   $0x801086a4
+80105851:	56                   	push   %esi
+80105852:	e8 19 c7 ff ff       	call   80101f70 <dirlink>
+80105857:	83 c4 10             	add    $0x10,%esp
+8010585a:	85 c0                	test   %eax,%eax
+8010585c:	79 92                	jns    801057f0 <create+0xf0>
       panic("create dots");
-80104c0e:	83 ec 0c             	sub    $0xc,%esp
-80104c11:	68 07 78 10 80       	push   $0x80107807
-80104c16:	e8 75 b7 ff ff       	call   80100390 <panic>
-80104c1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104c1f:	90                   	nop
+8010585e:	83 ec 0c             	sub    $0xc,%esp
+80105861:	68 98 86 10 80       	push   $0x80108698
+80105866:	e8 25 ab ff ff       	call   80100390 <panic>
+8010586b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010586f:	90                   	nop
 }
-80104c20:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105870:	8d 65 f4             	lea    -0xc(%ebp),%esp
     return 0;
-80104c23:	31 f6                	xor    %esi,%esi
+80105873:	31 f6                	xor    %esi,%esi
 }
-80104c25:	5b                   	pop    %ebx
-80104c26:	89 f0                	mov    %esi,%eax
-80104c28:	5e                   	pop    %esi
-80104c29:	5f                   	pop    %edi
-80104c2a:	5d                   	pop    %ebp
-80104c2b:	c3                   	ret    
+80105875:	5b                   	pop    %ebx
+80105876:	89 f0                	mov    %esi,%eax
+80105878:	5e                   	pop    %esi
+80105879:	5f                   	pop    %edi
+8010587a:	5d                   	pop    %ebp
+8010587b:	c3                   	ret    
     panic("create: dirlink");
-80104c2c:	83 ec 0c             	sub    $0xc,%esp
-80104c2f:	68 16 78 10 80       	push   $0x80107816
-80104c34:	e8 57 b7 ff ff       	call   80100390 <panic>
+8010587c:	83 ec 0c             	sub    $0xc,%esp
+8010587f:	68 e6 83 10 80       	push   $0x801083e6
+80105884:	e8 07 ab ff ff       	call   80100390 <panic>
     panic("create: ialloc");
-80104c39:	83 ec 0c             	sub    $0xc,%esp
-80104c3c:	68 f8 77 10 80       	push   $0x801077f8
-80104c41:	e8 4a b7 ff ff       	call   80100390 <panic>
-80104c46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104c4d:	8d 76 00             	lea    0x0(%esi),%esi
+80105889:	83 ec 0c             	sub    $0xc,%esp
+8010588c:	68 d7 83 10 80       	push   $0x801083d7
+80105891:	e8 fa aa ff ff       	call   80100390 <panic>
+80105896:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010589d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104c50 <argfd.constprop.0>:
+801058a0 <argfd.constprop.0>:
 argfd(int n, int *pfd, struct file **pf)
-80104c50:	55                   	push   %ebp
-80104c51:	89 e5                	mov    %esp,%ebp
-80104c53:	56                   	push   %esi
-80104c54:	89 d6                	mov    %edx,%esi
-80104c56:	53                   	push   %ebx
-80104c57:	89 c3                	mov    %eax,%ebx
+801058a0:	55                   	push   %ebp
+801058a1:	89 e5                	mov    %esp,%ebp
+801058a3:	56                   	push   %esi
+801058a4:	89 d6                	mov    %edx,%esi
+801058a6:	53                   	push   %ebx
+801058a7:	89 c3                	mov    %eax,%ebx
   if(argint(n, &fd) < 0)
-80104c59:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801058a9:	8d 45 f4             	lea    -0xc(%ebp),%eax
 argfd(int n, int *pfd, struct file **pf)
-80104c5c:	83 ec 18             	sub    $0x18,%esp
+801058ac:	83 ec 18             	sub    $0x18,%esp
   if(argint(n, &fd) < 0)
-80104c5f:	50                   	push   %eax
-80104c60:	6a 00                	push   $0x0
-80104c62:	e8 e9 fc ff ff       	call   80104950 <argint>
-80104c67:	83 c4 10             	add    $0x10,%esp
-80104c6a:	85 c0                	test   %eax,%eax
-80104c6c:	78 2a                	js     80104c98 <argfd.constprop.0+0x48>
+801058af:	50                   	push   %eax
+801058b0:	6a 00                	push   $0x0
+801058b2:	e8 e9 fc ff ff       	call   801055a0 <argint>
+801058b7:	83 c4 10             	add    $0x10,%esp
+801058ba:	85 c0                	test   %eax,%eax
+801058bc:	78 2a                	js     801058e8 <argfd.constprop.0+0x48>
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104c6e:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104c72:	77 24                	ja     80104c98 <argfd.constprop.0+0x48>
-80104c74:	e8 e7 ec ff ff       	call   80103960 <myproc>
-80104c79:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104c7c:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
-80104c80:	85 c0                	test   %eax,%eax
-80104c82:	74 14                	je     80104c98 <argfd.constprop.0+0x48>
+801058be:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+801058c2:	77 24                	ja     801058e8 <argfd.constprop.0+0x48>
+801058c4:	e8 27 e7 ff ff       	call   80103ff0 <myproc>
+801058c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
+801058cc:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
+801058d0:	85 c0                	test   %eax,%eax
+801058d2:	74 14                	je     801058e8 <argfd.constprop.0+0x48>
   if(pfd)
-80104c84:	85 db                	test   %ebx,%ebx
-80104c86:	74 02                	je     80104c8a <argfd.constprop.0+0x3a>
+801058d4:	85 db                	test   %ebx,%ebx
+801058d6:	74 02                	je     801058da <argfd.constprop.0+0x3a>
     *pfd = fd;
-80104c88:	89 13                	mov    %edx,(%ebx)
+801058d8:	89 13                	mov    %edx,(%ebx)
     *pf = f;
-80104c8a:	89 06                	mov    %eax,(%esi)
+801058da:	89 06                	mov    %eax,(%esi)
   return 0;
-80104c8c:	31 c0                	xor    %eax,%eax
+801058dc:	31 c0                	xor    %eax,%eax
 }
-80104c8e:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104c91:	5b                   	pop    %ebx
-80104c92:	5e                   	pop    %esi
-80104c93:	5d                   	pop    %ebp
-80104c94:	c3                   	ret    
-80104c95:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-80104c98:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104c9d:	eb ef                	jmp    80104c8e <argfd.constprop.0+0x3e>
-80104c9f:	90                   	nop
+801058de:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801058e1:	5b                   	pop    %ebx
+801058e2:	5e                   	pop    %esi
+801058e3:	5d                   	pop    %ebp
+801058e4:	c3                   	ret    
+801058e5:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+801058e8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801058ed:	eb ef                	jmp    801058de <argfd.constprop.0+0x3e>
+801058ef:	90                   	nop
 
-80104ca0 <sys_dup>:
+801058f0 <sys_dup>:
 {
-80104ca0:	f3 0f 1e fb          	endbr32 
-80104ca4:	55                   	push   %ebp
+801058f0:	f3 0f 1e fb          	endbr32 
+801058f4:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0)
-80104ca5:	31 c0                	xor    %eax,%eax
+801058f5:	31 c0                	xor    %eax,%eax
 {
-80104ca7:	89 e5                	mov    %esp,%ebp
-80104ca9:	56                   	push   %esi
-80104caa:	53                   	push   %ebx
+801058f7:	89 e5                	mov    %esp,%ebp
+801058f9:	56                   	push   %esi
+801058fa:	53                   	push   %ebx
   if(argfd(0, 0, &f) < 0)
-80104cab:	8d 55 f4             	lea    -0xc(%ebp),%edx
+801058fb:	8d 55 f4             	lea    -0xc(%ebp),%edx
 {
-80104cae:	83 ec 10             	sub    $0x10,%esp
+801058fe:	83 ec 10             	sub    $0x10,%esp
   if(argfd(0, 0, &f) < 0)
-80104cb1:	e8 9a ff ff ff       	call   80104c50 <argfd.constprop.0>
-80104cb6:	85 c0                	test   %eax,%eax
-80104cb8:	78 1e                	js     80104cd8 <sys_dup+0x38>
+80105901:	e8 9a ff ff ff       	call   801058a0 <argfd.constprop.0>
+80105906:	85 c0                	test   %eax,%eax
+80105908:	78 1e                	js     80105928 <sys_dup+0x38>
   if((fd=fdalloc(f)) < 0)
-80104cba:	8b 75 f4             	mov    -0xc(%ebp),%esi
+8010590a:	8b 75 f4             	mov    -0xc(%ebp),%esi
   for(fd = 0; fd < NOFILE; fd++){
-80104cbd:	31 db                	xor    %ebx,%ebx
+8010590d:	31 db                	xor    %ebx,%ebx
   struct proc *curproc = myproc();
-80104cbf:	e8 9c ec ff ff       	call   80103960 <myproc>
+8010590f:	e8 dc e6 ff ff       	call   80103ff0 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-80104cc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105914:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[fd] == 0){
-80104cc8:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-80104ccc:	85 d2                	test   %edx,%edx
-80104cce:	74 20                	je     80104cf0 <sys_dup+0x50>
+80105918:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+8010591c:	85 d2                	test   %edx,%edx
+8010591e:	74 20                	je     80105940 <sys_dup+0x50>
   for(fd = 0; fd < NOFILE; fd++){
-80104cd0:	83 c3 01             	add    $0x1,%ebx
-80104cd3:	83 fb 10             	cmp    $0x10,%ebx
-80104cd6:	75 f0                	jne    80104cc8 <sys_dup+0x28>
-}
-80104cd8:	8d 65 f8             	lea    -0x8(%ebp),%esp
-    return -1;
-80104cdb:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-}
-80104ce0:	89 d8                	mov    %ebx,%eax
-80104ce2:	5b                   	pop    %ebx
-80104ce3:	5e                   	pop    %esi
-80104ce4:	5d                   	pop    %ebp
-80104ce5:	c3                   	ret    
-80104ce6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104ced:	8d 76 00             	lea    0x0(%esi),%esi
+80105920:	83 c3 01             	add    $0x1,%ebx
+80105923:	83 fb 10             	cmp    $0x10,%ebx
+80105926:	75 f0                	jne    80105918 <sys_dup+0x28>
+}
+80105928:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    return -1;
+8010592b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+}
+80105930:	89 d8                	mov    %ebx,%eax
+80105932:	5b                   	pop    %ebx
+80105933:	5e                   	pop    %esi
+80105934:	5d                   	pop    %ebp
+80105935:	c3                   	ret    
+80105936:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010593d:	8d 76 00             	lea    0x0(%esi),%esi
       curproc->ofile[fd] = f;
-80104cf0:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
+80105940:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
   filedup(f);
-80104cf4:	83 ec 0c             	sub    $0xc,%esp
-80104cf7:	ff 75 f4             	pushl  -0xc(%ebp)
-80104cfa:	e8 71 c1 ff ff       	call   80100e70 <filedup>
+80105944:	83 ec 0c             	sub    $0xc,%esp
+80105947:	ff 75 f4             	pushl  -0xc(%ebp)
+8010594a:	e8 21 b5 ff ff       	call   80100e70 <filedup>
   return fd;
-80104cff:	83 c4 10             	add    $0x10,%esp
+8010594f:	83 c4 10             	add    $0x10,%esp
 }
-80104d02:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104d05:	89 d8                	mov    %ebx,%eax
-80104d07:	5b                   	pop    %ebx
-80104d08:	5e                   	pop    %esi
-80104d09:	5d                   	pop    %ebp
-80104d0a:	c3                   	ret    
-80104d0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104d0f:	90                   	nop
+80105952:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105955:	89 d8                	mov    %ebx,%eax
+80105957:	5b                   	pop    %ebx
+80105958:	5e                   	pop    %esi
+80105959:	5d                   	pop    %ebp
+8010595a:	c3                   	ret    
+8010595b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010595f:	90                   	nop
 
-80104d10 <sys_read>:
+80105960 <sys_read>:
 {
-80104d10:	f3 0f 1e fb          	endbr32 
-80104d14:	55                   	push   %ebp
+80105960:	f3 0f 1e fb          	endbr32 
+80105964:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104d15:	31 c0                	xor    %eax,%eax
+80105965:	31 c0                	xor    %eax,%eax
 {
-80104d17:	89 e5                	mov    %esp,%ebp
-80104d19:	83 ec 18             	sub    $0x18,%esp
+80105967:	89 e5                	mov    %esp,%ebp
+80105969:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104d1c:	8d 55 ec             	lea    -0x14(%ebp),%edx
-80104d1f:	e8 2c ff ff ff       	call   80104c50 <argfd.constprop.0>
-80104d24:	85 c0                	test   %eax,%eax
-80104d26:	78 48                	js     80104d70 <sys_read+0x60>
-80104d28:	83 ec 08             	sub    $0x8,%esp
-80104d2b:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104d2e:	50                   	push   %eax
-80104d2f:	6a 02                	push   $0x2
-80104d31:	e8 1a fc ff ff       	call   80104950 <argint>
-80104d36:	83 c4 10             	add    $0x10,%esp
-80104d39:	85 c0                	test   %eax,%eax
-80104d3b:	78 33                	js     80104d70 <sys_read+0x60>
-80104d3d:	83 ec 04             	sub    $0x4,%esp
-80104d40:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104d43:	ff 75 f0             	pushl  -0x10(%ebp)
-80104d46:	50                   	push   %eax
-80104d47:	6a 01                	push   $0x1
-80104d49:	e8 52 fc ff ff       	call   801049a0 <argptr>
-80104d4e:	83 c4 10             	add    $0x10,%esp
-80104d51:	85 c0                	test   %eax,%eax
-80104d53:	78 1b                	js     80104d70 <sys_read+0x60>
+8010596c:	8d 55 ec             	lea    -0x14(%ebp),%edx
+8010596f:	e8 2c ff ff ff       	call   801058a0 <argfd.constprop.0>
+80105974:	85 c0                	test   %eax,%eax
+80105976:	78 48                	js     801059c0 <sys_read+0x60>
+80105978:	83 ec 08             	sub    $0x8,%esp
+8010597b:	8d 45 f0             	lea    -0x10(%ebp),%eax
+8010597e:	50                   	push   %eax
+8010597f:	6a 02                	push   $0x2
+80105981:	e8 1a fc ff ff       	call   801055a0 <argint>
+80105986:	83 c4 10             	add    $0x10,%esp
+80105989:	85 c0                	test   %eax,%eax
+8010598b:	78 33                	js     801059c0 <sys_read+0x60>
+8010598d:	83 ec 04             	sub    $0x4,%esp
+80105990:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105993:	ff 75 f0             	pushl  -0x10(%ebp)
+80105996:	50                   	push   %eax
+80105997:	6a 01                	push   $0x1
+80105999:	e8 52 fc ff ff       	call   801055f0 <argptr>
+8010599e:	83 c4 10             	add    $0x10,%esp
+801059a1:	85 c0                	test   %eax,%eax
+801059a3:	78 1b                	js     801059c0 <sys_read+0x60>
   return fileread(f, p, n);
-80104d55:	83 ec 04             	sub    $0x4,%esp
-80104d58:	ff 75 f0             	pushl  -0x10(%ebp)
-80104d5b:	ff 75 f4             	pushl  -0xc(%ebp)
-80104d5e:	ff 75 ec             	pushl  -0x14(%ebp)
-80104d61:	e8 8a c2 ff ff       	call   80100ff0 <fileread>
-80104d66:	83 c4 10             	add    $0x10,%esp
-}
-80104d69:	c9                   	leave  
-80104d6a:	c3                   	ret    
-80104d6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104d6f:	90                   	nop
-80104d70:	c9                   	leave  
-    return -1;
-80104d71:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104d76:	c3                   	ret    
-80104d77:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104d7e:	66 90                	xchg   %ax,%ax
+801059a5:	83 ec 04             	sub    $0x4,%esp
+801059a8:	ff 75 f0             	pushl  -0x10(%ebp)
+801059ab:	ff 75 f4             	pushl  -0xc(%ebp)
+801059ae:	ff 75 ec             	pushl  -0x14(%ebp)
+801059b1:	e8 3a b6 ff ff       	call   80100ff0 <fileread>
+801059b6:	83 c4 10             	add    $0x10,%esp
+}
+801059b9:	c9                   	leave  
+801059ba:	c3                   	ret    
+801059bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801059bf:	90                   	nop
+801059c0:	c9                   	leave  
+    return -1;
+801059c1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801059c6:	c3                   	ret    
+801059c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801059ce:	66 90                	xchg   %ax,%ax
 
-80104d80 <sys_write>:
+801059d0 <sys_write>:
 {
-80104d80:	f3 0f 1e fb          	endbr32 
-80104d84:	55                   	push   %ebp
+801059d0:	f3 0f 1e fb          	endbr32 
+801059d4:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104d85:	31 c0                	xor    %eax,%eax
+801059d5:	31 c0                	xor    %eax,%eax
 {
-80104d87:	89 e5                	mov    %esp,%ebp
-80104d89:	83 ec 18             	sub    $0x18,%esp
+801059d7:	89 e5                	mov    %esp,%ebp
+801059d9:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104d8c:	8d 55 ec             	lea    -0x14(%ebp),%edx
-80104d8f:	e8 bc fe ff ff       	call   80104c50 <argfd.constprop.0>
-80104d94:	85 c0                	test   %eax,%eax
-80104d96:	78 48                	js     80104de0 <sys_write+0x60>
-80104d98:	83 ec 08             	sub    $0x8,%esp
-80104d9b:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104d9e:	50                   	push   %eax
-80104d9f:	6a 02                	push   $0x2
-80104da1:	e8 aa fb ff ff       	call   80104950 <argint>
-80104da6:	83 c4 10             	add    $0x10,%esp
-80104da9:	85 c0                	test   %eax,%eax
-80104dab:	78 33                	js     80104de0 <sys_write+0x60>
-80104dad:	83 ec 04             	sub    $0x4,%esp
-80104db0:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104db3:	ff 75 f0             	pushl  -0x10(%ebp)
-80104db6:	50                   	push   %eax
-80104db7:	6a 01                	push   $0x1
-80104db9:	e8 e2 fb ff ff       	call   801049a0 <argptr>
-80104dbe:	83 c4 10             	add    $0x10,%esp
-80104dc1:	85 c0                	test   %eax,%eax
-80104dc3:	78 1b                	js     80104de0 <sys_write+0x60>
+801059dc:	8d 55 ec             	lea    -0x14(%ebp),%edx
+801059df:	e8 bc fe ff ff       	call   801058a0 <argfd.constprop.0>
+801059e4:	85 c0                	test   %eax,%eax
+801059e6:	78 48                	js     80105a30 <sys_write+0x60>
+801059e8:	83 ec 08             	sub    $0x8,%esp
+801059eb:	8d 45 f0             	lea    -0x10(%ebp),%eax
+801059ee:	50                   	push   %eax
+801059ef:	6a 02                	push   $0x2
+801059f1:	e8 aa fb ff ff       	call   801055a0 <argint>
+801059f6:	83 c4 10             	add    $0x10,%esp
+801059f9:	85 c0                	test   %eax,%eax
+801059fb:	78 33                	js     80105a30 <sys_write+0x60>
+801059fd:	83 ec 04             	sub    $0x4,%esp
+80105a00:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105a03:	ff 75 f0             	pushl  -0x10(%ebp)
+80105a06:	50                   	push   %eax
+80105a07:	6a 01                	push   $0x1
+80105a09:	e8 e2 fb ff ff       	call   801055f0 <argptr>
+80105a0e:	83 c4 10             	add    $0x10,%esp
+80105a11:	85 c0                	test   %eax,%eax
+80105a13:	78 1b                	js     80105a30 <sys_write+0x60>
   return filewrite(f, p, n);
-80104dc5:	83 ec 04             	sub    $0x4,%esp
-80104dc8:	ff 75 f0             	pushl  -0x10(%ebp)
-80104dcb:	ff 75 f4             	pushl  -0xc(%ebp)
-80104dce:	ff 75 ec             	pushl  -0x14(%ebp)
-80104dd1:	e8 ba c2 ff ff       	call   80101090 <filewrite>
-80104dd6:	83 c4 10             	add    $0x10,%esp
-}
-80104dd9:	c9                   	leave  
-80104dda:	c3                   	ret    
-80104ddb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104ddf:	90                   	nop
-80104de0:	c9                   	leave  
-    return -1;
-80104de1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104de6:	c3                   	ret    
-80104de7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104dee:	66 90                	xchg   %ax,%ax
-
-80104df0 <sys_close>:
-{
-80104df0:	f3 0f 1e fb          	endbr32 
-80104df4:	55                   	push   %ebp
-80104df5:	89 e5                	mov    %esp,%ebp
-80104df7:	83 ec 18             	sub    $0x18,%esp
+80105a15:	83 ec 04             	sub    $0x4,%esp
+80105a18:	ff 75 f0             	pushl  -0x10(%ebp)
+80105a1b:	ff 75 f4             	pushl  -0xc(%ebp)
+80105a1e:	ff 75 ec             	pushl  -0x14(%ebp)
+80105a21:	e8 6a b6 ff ff       	call   80101090 <filewrite>
+80105a26:	83 c4 10             	add    $0x10,%esp
+}
+80105a29:	c9                   	leave  
+80105a2a:	c3                   	ret    
+80105a2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105a2f:	90                   	nop
+80105a30:	c9                   	leave  
+    return -1;
+80105a31:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105a36:	c3                   	ret    
+80105a37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a3e:	66 90                	xchg   %ax,%ax
+
+80105a40 <sys_close>:
+{
+80105a40:	f3 0f 1e fb          	endbr32 
+80105a44:	55                   	push   %ebp
+80105a45:	89 e5                	mov    %esp,%ebp
+80105a47:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, &fd, &f) < 0)
-80104dfa:	8d 55 f4             	lea    -0xc(%ebp),%edx
-80104dfd:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104e00:	e8 4b fe ff ff       	call   80104c50 <argfd.constprop.0>
-80104e05:	85 c0                	test   %eax,%eax
-80104e07:	78 27                	js     80104e30 <sys_close+0x40>
+80105a4a:	8d 55 f4             	lea    -0xc(%ebp),%edx
+80105a4d:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105a50:	e8 4b fe ff ff       	call   801058a0 <argfd.constprop.0>
+80105a55:	85 c0                	test   %eax,%eax
+80105a57:	78 27                	js     80105a80 <sys_close+0x40>
   myproc()->ofile[fd] = 0;
-80104e09:	e8 52 eb ff ff       	call   80103960 <myproc>
-80104e0e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+80105a59:	e8 92 e5 ff ff       	call   80103ff0 <myproc>
+80105a5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
   fileclose(f);
-80104e11:	83 ec 0c             	sub    $0xc,%esp
+80105a61:	83 ec 0c             	sub    $0xc,%esp
   myproc()->ofile[fd] = 0;
-80104e14:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
-80104e1b:	00 
+80105a64:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
+80105a6b:	00 
   fileclose(f);
-80104e1c:	ff 75 f4             	pushl  -0xc(%ebp)
-80104e1f:	e8 9c c0 ff ff       	call   80100ec0 <fileclose>
+80105a6c:	ff 75 f4             	pushl  -0xc(%ebp)
+80105a6f:	e8 4c b4 ff ff       	call   80100ec0 <fileclose>
   return 0;
-80104e24:	83 c4 10             	add    $0x10,%esp
-80104e27:	31 c0                	xor    %eax,%eax
+80105a74:	83 c4 10             	add    $0x10,%esp
+80105a77:	31 c0                	xor    %eax,%eax
 }
-80104e29:	c9                   	leave  
-80104e2a:	c3                   	ret    
-80104e2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104e2f:	90                   	nop
-80104e30:	c9                   	leave  
+80105a79:	c9                   	leave  
+80105a7a:	c3                   	ret    
+80105a7b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105a7f:	90                   	nop
+80105a80:	c9                   	leave  
     return -1;
-80104e31:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105a81:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80104e36:	c3                   	ret    
-80104e37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104e3e:	66 90                	xchg   %ax,%ax
+80105a86:	c3                   	ret    
+80105a87:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a8e:	66 90                	xchg   %ax,%ax
 
-80104e40 <sys_fstat>:
+80105a90 <sys_fstat>:
 {
-80104e40:	f3 0f 1e fb          	endbr32 
-80104e44:	55                   	push   %ebp
+80105a90:	f3 0f 1e fb          	endbr32 
+80105a94:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-80104e45:	31 c0                	xor    %eax,%eax
+80105a95:	31 c0                	xor    %eax,%eax
 {
-80104e47:	89 e5                	mov    %esp,%ebp
-80104e49:	83 ec 18             	sub    $0x18,%esp
+80105a97:	89 e5                	mov    %esp,%ebp
+80105a99:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-80104e4c:	8d 55 f0             	lea    -0x10(%ebp),%edx
-80104e4f:	e8 fc fd ff ff       	call   80104c50 <argfd.constprop.0>
-80104e54:	85 c0                	test   %eax,%eax
-80104e56:	78 30                	js     80104e88 <sys_fstat+0x48>
-80104e58:	83 ec 04             	sub    $0x4,%esp
-80104e5b:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104e5e:	6a 14                	push   $0x14
-80104e60:	50                   	push   %eax
-80104e61:	6a 01                	push   $0x1
-80104e63:	e8 38 fb ff ff       	call   801049a0 <argptr>
-80104e68:	83 c4 10             	add    $0x10,%esp
-80104e6b:	85 c0                	test   %eax,%eax
-80104e6d:	78 19                	js     80104e88 <sys_fstat+0x48>
+80105a9c:	8d 55 f0             	lea    -0x10(%ebp),%edx
+80105a9f:	e8 fc fd ff ff       	call   801058a0 <argfd.constprop.0>
+80105aa4:	85 c0                	test   %eax,%eax
+80105aa6:	78 30                	js     80105ad8 <sys_fstat+0x48>
+80105aa8:	83 ec 04             	sub    $0x4,%esp
+80105aab:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105aae:	6a 14                	push   $0x14
+80105ab0:	50                   	push   %eax
+80105ab1:	6a 01                	push   $0x1
+80105ab3:	e8 38 fb ff ff       	call   801055f0 <argptr>
+80105ab8:	83 c4 10             	add    $0x10,%esp
+80105abb:	85 c0                	test   %eax,%eax
+80105abd:	78 19                	js     80105ad8 <sys_fstat+0x48>
   return filestat(f, st);
-80104e6f:	83 ec 08             	sub    $0x8,%esp
-80104e72:	ff 75 f4             	pushl  -0xc(%ebp)
-80104e75:	ff 75 f0             	pushl  -0x10(%ebp)
-80104e78:	e8 23 c1 ff ff       	call   80100fa0 <filestat>
-80104e7d:	83 c4 10             	add    $0x10,%esp
-}
-80104e80:	c9                   	leave  
-80104e81:	c3                   	ret    
-80104e82:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104e88:	c9                   	leave  
-    return -1;
-80104e89:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104e8e:	c3                   	ret    
-80104e8f:	90                   	nop
-
-80104e90 <sys_link>:
-{
-80104e90:	f3 0f 1e fb          	endbr32 
-80104e94:	55                   	push   %ebp
-80104e95:	89 e5                	mov    %esp,%ebp
-80104e97:	57                   	push   %edi
-80104e98:	56                   	push   %esi
+80105abf:	83 ec 08             	sub    $0x8,%esp
+80105ac2:	ff 75 f4             	pushl  -0xc(%ebp)
+80105ac5:	ff 75 f0             	pushl  -0x10(%ebp)
+80105ac8:	e8 d3 b4 ff ff       	call   80100fa0 <filestat>
+80105acd:	83 c4 10             	add    $0x10,%esp
+}
+80105ad0:	c9                   	leave  
+80105ad1:	c3                   	ret    
+80105ad2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105ad8:	c9                   	leave  
+    return -1;
+80105ad9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105ade:	c3                   	ret    
+80105adf:	90                   	nop
+
+80105ae0 <sys_link>:
+{
+80105ae0:	f3 0f 1e fb          	endbr32 
+80105ae4:	55                   	push   %ebp
+80105ae5:	89 e5                	mov    %esp,%ebp
+80105ae7:	57                   	push   %edi
+80105ae8:	56                   	push   %esi
   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-80104e99:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+80105ae9:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 {
-80104e9c:	53                   	push   %ebx
-80104e9d:	83 ec 34             	sub    $0x34,%esp
+80105aec:	53                   	push   %ebx
+80105aed:	83 ec 34             	sub    $0x34,%esp
   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-80104ea0:	50                   	push   %eax
-80104ea1:	6a 00                	push   $0x0
-80104ea3:	e8 58 fb ff ff       	call   80104a00 <argstr>
-80104ea8:	83 c4 10             	add    $0x10,%esp
-80104eab:	85 c0                	test   %eax,%eax
-80104ead:	0f 88 ff 00 00 00    	js     80104fb2 <sys_link+0x122>
-80104eb3:	83 ec 08             	sub    $0x8,%esp
-80104eb6:	8d 45 d0             	lea    -0x30(%ebp),%eax
-80104eb9:	50                   	push   %eax
-80104eba:	6a 01                	push   $0x1
-80104ebc:	e8 3f fb ff ff       	call   80104a00 <argstr>
-80104ec1:	83 c4 10             	add    $0x10,%esp
-80104ec4:	85 c0                	test   %eax,%eax
-80104ec6:	0f 88 e6 00 00 00    	js     80104fb2 <sys_link+0x122>
+80105af0:	50                   	push   %eax
+80105af1:	6a 00                	push   $0x0
+80105af3:	e8 58 fb ff ff       	call   80105650 <argstr>
+80105af8:	83 c4 10             	add    $0x10,%esp
+80105afb:	85 c0                	test   %eax,%eax
+80105afd:	0f 88 ff 00 00 00    	js     80105c02 <sys_link+0x122>
+80105b03:	83 ec 08             	sub    $0x8,%esp
+80105b06:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80105b09:	50                   	push   %eax
+80105b0a:	6a 01                	push   $0x1
+80105b0c:	e8 3f fb ff ff       	call   80105650 <argstr>
+80105b11:	83 c4 10             	add    $0x10,%esp
+80105b14:	85 c0                	test   %eax,%eax
+80105b16:	0f 88 e6 00 00 00    	js     80105c02 <sys_link+0x122>
   begin_op();
-80104ecc:	e8 5f de ff ff       	call   80102d30 <begin_op>
+80105b1c:	e8 7f d2 ff ff       	call   80102da0 <begin_op>
   if((ip = namei(old)) == 0){
-80104ed1:	83 ec 0c             	sub    $0xc,%esp
-80104ed4:	ff 75 d4             	pushl  -0x2c(%ebp)
-80104ed7:	e8 54 d1 ff ff       	call   80102030 <namei>
-80104edc:	83 c4 10             	add    $0x10,%esp
-80104edf:	89 c3                	mov    %eax,%ebx
-80104ee1:	85 c0                	test   %eax,%eax
-80104ee3:	0f 84 e8 00 00 00    	je     80104fd1 <sys_link+0x141>
+80105b21:	83 ec 0c             	sub    $0xc,%esp
+80105b24:	ff 75 d4             	pushl  -0x2c(%ebp)
+80105b27:	e8 04 c5 ff ff       	call   80102030 <namei>
+80105b2c:	83 c4 10             	add    $0x10,%esp
+80105b2f:	89 c3                	mov    %eax,%ebx
+80105b31:	85 c0                	test   %eax,%eax
+80105b33:	0f 84 e8 00 00 00    	je     80105c21 <sys_link+0x141>
   ilock(ip);
-80104ee9:	83 ec 0c             	sub    $0xc,%esp
-80104eec:	50                   	push   %eax
-80104eed:	e8 6e c8 ff ff       	call   80101760 <ilock>
+80105b39:	83 ec 0c             	sub    $0xc,%esp
+80105b3c:	50                   	push   %eax
+80105b3d:	e8 1e bc ff ff       	call   80101760 <ilock>
   if(ip->type == T_DIR){
-80104ef2:	83 c4 10             	add    $0x10,%esp
-80104ef5:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80104efa:	0f 84 b9 00 00 00    	je     80104fb9 <sys_link+0x129>
+80105b42:	83 c4 10             	add    $0x10,%esp
+80105b45:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105b4a:	0f 84 b9 00 00 00    	je     80105c09 <sys_link+0x129>
   iupdate(ip);
-80104f00:	83 ec 0c             	sub    $0xc,%esp
+80105b50:	83 ec 0c             	sub    $0xc,%esp
   ip->nlink++;
-80104f03:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+80105b53:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
   if((dp = nameiparent(new, name)) == 0)
-80104f08:	8d 7d da             	lea    -0x26(%ebp),%edi
+80105b58:	8d 7d da             	lea    -0x26(%ebp),%edi
   iupdate(ip);
-80104f0b:	53                   	push   %ebx
-80104f0c:	e8 8f c7 ff ff       	call   801016a0 <iupdate>
+80105b5b:	53                   	push   %ebx
+80105b5c:	e8 3f bb ff ff       	call   801016a0 <iupdate>
   iunlock(ip);
-80104f11:	89 1c 24             	mov    %ebx,(%esp)
-80104f14:	e8 27 c9 ff ff       	call   80101840 <iunlock>
+80105b61:	89 1c 24             	mov    %ebx,(%esp)
+80105b64:	e8 d7 bc ff ff       	call   80101840 <iunlock>
   if((dp = nameiparent(new, name)) == 0)
-80104f19:	58                   	pop    %eax
-80104f1a:	5a                   	pop    %edx
-80104f1b:	57                   	push   %edi
-80104f1c:	ff 75 d0             	pushl  -0x30(%ebp)
-80104f1f:	e8 2c d1 ff ff       	call   80102050 <nameiparent>
-80104f24:	83 c4 10             	add    $0x10,%esp
-80104f27:	89 c6                	mov    %eax,%esi
-80104f29:	85 c0                	test   %eax,%eax
-80104f2b:	74 5f                	je     80104f8c <sys_link+0xfc>
+80105b69:	58                   	pop    %eax
+80105b6a:	5a                   	pop    %edx
+80105b6b:	57                   	push   %edi
+80105b6c:	ff 75 d0             	pushl  -0x30(%ebp)
+80105b6f:	e8 dc c4 ff ff       	call   80102050 <nameiparent>
+80105b74:	83 c4 10             	add    $0x10,%esp
+80105b77:	89 c6                	mov    %eax,%esi
+80105b79:	85 c0                	test   %eax,%eax
+80105b7b:	74 5f                	je     80105bdc <sys_link+0xfc>
   ilock(dp);
-80104f2d:	83 ec 0c             	sub    $0xc,%esp
-80104f30:	50                   	push   %eax
-80104f31:	e8 2a c8 ff ff       	call   80101760 <ilock>
+80105b7d:	83 ec 0c             	sub    $0xc,%esp
+80105b80:	50                   	push   %eax
+80105b81:	e8 da bb ff ff       	call   80101760 <ilock>
   if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
-80104f36:	8b 03                	mov    (%ebx),%eax
-80104f38:	83 c4 10             	add    $0x10,%esp
-80104f3b:	39 06                	cmp    %eax,(%esi)
-80104f3d:	75 41                	jne    80104f80 <sys_link+0xf0>
-80104f3f:	83 ec 04             	sub    $0x4,%esp
-80104f42:	ff 73 04             	pushl  0x4(%ebx)
-80104f45:	57                   	push   %edi
-80104f46:	56                   	push   %esi
-80104f47:	e8 24 d0 ff ff       	call   80101f70 <dirlink>
-80104f4c:	83 c4 10             	add    $0x10,%esp
-80104f4f:	85 c0                	test   %eax,%eax
-80104f51:	78 2d                	js     80104f80 <sys_link+0xf0>
+80105b86:	8b 03                	mov    (%ebx),%eax
+80105b88:	83 c4 10             	add    $0x10,%esp
+80105b8b:	39 06                	cmp    %eax,(%esi)
+80105b8d:	75 41                	jne    80105bd0 <sys_link+0xf0>
+80105b8f:	83 ec 04             	sub    $0x4,%esp
+80105b92:	ff 73 04             	pushl  0x4(%ebx)
+80105b95:	57                   	push   %edi
+80105b96:	56                   	push   %esi
+80105b97:	e8 d4 c3 ff ff       	call   80101f70 <dirlink>
+80105b9c:	83 c4 10             	add    $0x10,%esp
+80105b9f:	85 c0                	test   %eax,%eax
+80105ba1:	78 2d                	js     80105bd0 <sys_link+0xf0>
   iunlockput(dp);
-80104f53:	83 ec 0c             	sub    $0xc,%esp
-80104f56:	56                   	push   %esi
-80104f57:	e8 a4 ca ff ff       	call   80101a00 <iunlockput>
+80105ba3:	83 ec 0c             	sub    $0xc,%esp
+80105ba6:	56                   	push   %esi
+80105ba7:	e8 54 be ff ff       	call   80101a00 <iunlockput>
   iput(ip);
-80104f5c:	89 1c 24             	mov    %ebx,(%esp)
-80104f5f:	e8 2c c9 ff ff       	call   80101890 <iput>
+80105bac:	89 1c 24             	mov    %ebx,(%esp)
+80105baf:	e8 dc bc ff ff       	call   80101890 <iput>
   end_op();
-80104f64:	e8 37 de ff ff       	call   80102da0 <end_op>
+80105bb4:	e8 57 d2 ff ff       	call   80102e10 <end_op>
   return 0;
-80104f69:	83 c4 10             	add    $0x10,%esp
-80104f6c:	31 c0                	xor    %eax,%eax
+80105bb9:	83 c4 10             	add    $0x10,%esp
+80105bbc:	31 c0                	xor    %eax,%eax
 }
-80104f6e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104f71:	5b                   	pop    %ebx
-80104f72:	5e                   	pop    %esi
-80104f73:	5f                   	pop    %edi
-80104f74:	5d                   	pop    %ebp
-80104f75:	c3                   	ret    
-80104f76:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104f7d:	8d 76 00             	lea    0x0(%esi),%esi
+80105bbe:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105bc1:	5b                   	pop    %ebx
+80105bc2:	5e                   	pop    %esi
+80105bc3:	5f                   	pop    %edi
+80105bc4:	5d                   	pop    %ebp
+80105bc5:	c3                   	ret    
+80105bc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105bcd:	8d 76 00             	lea    0x0(%esi),%esi
     iunlockput(dp);
-80104f80:	83 ec 0c             	sub    $0xc,%esp
-80104f83:	56                   	push   %esi
-80104f84:	e8 77 ca ff ff       	call   80101a00 <iunlockput>
+80105bd0:	83 ec 0c             	sub    $0xc,%esp
+80105bd3:	56                   	push   %esi
+80105bd4:	e8 27 be ff ff       	call   80101a00 <iunlockput>
     goto bad;
-80104f89:	83 c4 10             	add    $0x10,%esp
+80105bd9:	83 c4 10             	add    $0x10,%esp
   ilock(ip);
-80104f8c:	83 ec 0c             	sub    $0xc,%esp
-80104f8f:	53                   	push   %ebx
-80104f90:	e8 cb c7 ff ff       	call   80101760 <ilock>
+80105bdc:	83 ec 0c             	sub    $0xc,%esp
+80105bdf:	53                   	push   %ebx
+80105be0:	e8 7b bb ff ff       	call   80101760 <ilock>
   ip->nlink--;
-80104f95:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+80105be5:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
   iupdate(ip);
-80104f9a:	89 1c 24             	mov    %ebx,(%esp)
-80104f9d:	e8 fe c6 ff ff       	call   801016a0 <iupdate>
+80105bea:	89 1c 24             	mov    %ebx,(%esp)
+80105bed:	e8 ae ba ff ff       	call   801016a0 <iupdate>
   iunlockput(ip);
-80104fa2:	89 1c 24             	mov    %ebx,(%esp)
-80104fa5:	e8 56 ca ff ff       	call   80101a00 <iunlockput>
+80105bf2:	89 1c 24             	mov    %ebx,(%esp)
+80105bf5:	e8 06 be ff ff       	call   80101a00 <iunlockput>
   end_op();
-80104faa:	e8 f1 dd ff ff       	call   80102da0 <end_op>
+80105bfa:	e8 11 d2 ff ff       	call   80102e10 <end_op>
   return -1;
-80104faf:	83 c4 10             	add    $0x10,%esp
-80104fb2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104fb7:	eb b5                	jmp    80104f6e <sys_link+0xde>
+80105bff:	83 c4 10             	add    $0x10,%esp
+80105c02:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105c07:	eb b5                	jmp    80105bbe <sys_link+0xde>
     iunlockput(ip);
-80104fb9:	83 ec 0c             	sub    $0xc,%esp
-80104fbc:	53                   	push   %ebx
-80104fbd:	e8 3e ca ff ff       	call   80101a00 <iunlockput>
+80105c09:	83 ec 0c             	sub    $0xc,%esp
+80105c0c:	53                   	push   %ebx
+80105c0d:	e8 ee bd ff ff       	call   80101a00 <iunlockput>
     end_op();
-80104fc2:	e8 d9 dd ff ff       	call   80102da0 <end_op>
+80105c12:	e8 f9 d1 ff ff       	call   80102e10 <end_op>
     return -1;
-80104fc7:	83 c4 10             	add    $0x10,%esp
-80104fca:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104fcf:	eb 9d                	jmp    80104f6e <sys_link+0xde>
+80105c17:	83 c4 10             	add    $0x10,%esp
+80105c1a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105c1f:	eb 9d                	jmp    80105bbe <sys_link+0xde>
     end_op();
-80104fd1:	e8 ca dd ff ff       	call   80102da0 <end_op>
+80105c21:	e8 ea d1 ff ff       	call   80102e10 <end_op>
     return -1;
-80104fd6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104fdb:	eb 91                	jmp    80104f6e <sys_link+0xde>
-80104fdd:	8d 76 00             	lea    0x0(%esi),%esi
-
-80104fe0 <sys_unlink>:
-{
-80104fe0:	f3 0f 1e fb          	endbr32 
-80104fe4:	55                   	push   %ebp
-80104fe5:	89 e5                	mov    %esp,%ebp
-80104fe7:	57                   	push   %edi
-80104fe8:	56                   	push   %esi
+80105c26:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105c2b:	eb 91                	jmp    80105bbe <sys_link+0xde>
+80105c2d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80105c30 <sys_unlink>:
+{
+80105c30:	f3 0f 1e fb          	endbr32 
+80105c34:	55                   	push   %ebp
+80105c35:	89 e5                	mov    %esp,%ebp
+80105c37:	57                   	push   %edi
+80105c38:	56                   	push   %esi
   if(argstr(0, &path) < 0)
-80104fe9:	8d 45 c0             	lea    -0x40(%ebp),%eax
+80105c39:	8d 45 c0             	lea    -0x40(%ebp),%eax
 {
-80104fec:	53                   	push   %ebx
-80104fed:	83 ec 54             	sub    $0x54,%esp
+80105c3c:	53                   	push   %ebx
+80105c3d:	83 ec 54             	sub    $0x54,%esp
   if(argstr(0, &path) < 0)
-80104ff0:	50                   	push   %eax
-80104ff1:	6a 00                	push   $0x0
-80104ff3:	e8 08 fa ff ff       	call   80104a00 <argstr>
-80104ff8:	83 c4 10             	add    $0x10,%esp
-80104ffb:	85 c0                	test   %eax,%eax
-80104ffd:	0f 88 7d 01 00 00    	js     80105180 <sys_unlink+0x1a0>
+80105c40:	50                   	push   %eax
+80105c41:	6a 00                	push   $0x0
+80105c43:	e8 08 fa ff ff       	call   80105650 <argstr>
+80105c48:	83 c4 10             	add    $0x10,%esp
+80105c4b:	85 c0                	test   %eax,%eax
+80105c4d:	0f 88 7d 01 00 00    	js     80105dd0 <sys_unlink+0x1a0>
   begin_op();
-80105003:	e8 28 dd ff ff       	call   80102d30 <begin_op>
+80105c53:	e8 48 d1 ff ff       	call   80102da0 <begin_op>
   if((dp = nameiparent(path, name)) == 0){
-80105008:	8d 5d ca             	lea    -0x36(%ebp),%ebx
-8010500b:	83 ec 08             	sub    $0x8,%esp
-8010500e:	53                   	push   %ebx
-8010500f:	ff 75 c0             	pushl  -0x40(%ebp)
-80105012:	e8 39 d0 ff ff       	call   80102050 <nameiparent>
-80105017:	83 c4 10             	add    $0x10,%esp
-8010501a:	89 c6                	mov    %eax,%esi
-8010501c:	85 c0                	test   %eax,%eax
-8010501e:	0f 84 66 01 00 00    	je     8010518a <sys_unlink+0x1aa>
+80105c58:	8d 5d ca             	lea    -0x36(%ebp),%ebx
+80105c5b:	83 ec 08             	sub    $0x8,%esp
+80105c5e:	53                   	push   %ebx
+80105c5f:	ff 75 c0             	pushl  -0x40(%ebp)
+80105c62:	e8 e9 c3 ff ff       	call   80102050 <nameiparent>
+80105c67:	83 c4 10             	add    $0x10,%esp
+80105c6a:	89 c6                	mov    %eax,%esi
+80105c6c:	85 c0                	test   %eax,%eax
+80105c6e:	0f 84 66 01 00 00    	je     80105dda <sys_unlink+0x1aa>
   ilock(dp);
-80105024:	83 ec 0c             	sub    $0xc,%esp
-80105027:	50                   	push   %eax
-80105028:	e8 33 c7 ff ff       	call   80101760 <ilock>
+80105c74:	83 ec 0c             	sub    $0xc,%esp
+80105c77:	50                   	push   %eax
+80105c78:	e8 e3 ba ff ff       	call   80101760 <ilock>
   if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
-8010502d:	58                   	pop    %eax
-8010502e:	5a                   	pop    %edx
-8010502f:	68 14 78 10 80       	push   $0x80107814
-80105034:	53                   	push   %ebx
-80105035:	e8 56 cc ff ff       	call   80101c90 <namecmp>
-8010503a:	83 c4 10             	add    $0x10,%esp
-8010503d:	85 c0                	test   %eax,%eax
-8010503f:	0f 84 03 01 00 00    	je     80105148 <sys_unlink+0x168>
-80105045:	83 ec 08             	sub    $0x8,%esp
-80105048:	68 13 78 10 80       	push   $0x80107813
-8010504d:	53                   	push   %ebx
-8010504e:	e8 3d cc ff ff       	call   80101c90 <namecmp>
-80105053:	83 c4 10             	add    $0x10,%esp
-80105056:	85 c0                	test   %eax,%eax
-80105058:	0f 84 ea 00 00 00    	je     80105148 <sys_unlink+0x168>
+80105c7d:	58                   	pop    %eax
+80105c7e:	5a                   	pop    %edx
+80105c7f:	68 a5 86 10 80       	push   $0x801086a5
+80105c84:	53                   	push   %ebx
+80105c85:	e8 06 c0 ff ff       	call   80101c90 <namecmp>
+80105c8a:	83 c4 10             	add    $0x10,%esp
+80105c8d:	85 c0                	test   %eax,%eax
+80105c8f:	0f 84 03 01 00 00    	je     80105d98 <sys_unlink+0x168>
+80105c95:	83 ec 08             	sub    $0x8,%esp
+80105c98:	68 a4 86 10 80       	push   $0x801086a4
+80105c9d:	53                   	push   %ebx
+80105c9e:	e8 ed bf ff ff       	call   80101c90 <namecmp>
+80105ca3:	83 c4 10             	add    $0x10,%esp
+80105ca6:	85 c0                	test   %eax,%eax
+80105ca8:	0f 84 ea 00 00 00    	je     80105d98 <sys_unlink+0x168>
   if((ip = dirlookup(dp, name, &off)) == 0)
-8010505e:	83 ec 04             	sub    $0x4,%esp
-80105061:	8d 45 c4             	lea    -0x3c(%ebp),%eax
-80105064:	50                   	push   %eax
-80105065:	53                   	push   %ebx
-80105066:	56                   	push   %esi
-80105067:	e8 44 cc ff ff       	call   80101cb0 <dirlookup>
-8010506c:	83 c4 10             	add    $0x10,%esp
-8010506f:	89 c3                	mov    %eax,%ebx
-80105071:	85 c0                	test   %eax,%eax
-80105073:	0f 84 cf 00 00 00    	je     80105148 <sys_unlink+0x168>
+80105cae:	83 ec 04             	sub    $0x4,%esp
+80105cb1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
+80105cb4:	50                   	push   %eax
+80105cb5:	53                   	push   %ebx
+80105cb6:	56                   	push   %esi
+80105cb7:	e8 f4 bf ff ff       	call   80101cb0 <dirlookup>
+80105cbc:	83 c4 10             	add    $0x10,%esp
+80105cbf:	89 c3                	mov    %eax,%ebx
+80105cc1:	85 c0                	test   %eax,%eax
+80105cc3:	0f 84 cf 00 00 00    	je     80105d98 <sys_unlink+0x168>
   ilock(ip);
-80105079:	83 ec 0c             	sub    $0xc,%esp
-8010507c:	50                   	push   %eax
-8010507d:	e8 de c6 ff ff       	call   80101760 <ilock>
+80105cc9:	83 ec 0c             	sub    $0xc,%esp
+80105ccc:	50                   	push   %eax
+80105ccd:	e8 8e ba ff ff       	call   80101760 <ilock>
   if(ip->nlink < 1)
-80105082:	83 c4 10             	add    $0x10,%esp
-80105085:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
-8010508a:	0f 8e 23 01 00 00    	jle    801051b3 <sys_unlink+0x1d3>
+80105cd2:	83 c4 10             	add    $0x10,%esp
+80105cd5:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+80105cda:	0f 8e 23 01 00 00    	jle    80105e03 <sys_unlink+0x1d3>
   if(ip->type == T_DIR && !isdirempty(ip)){
-80105090:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80105095:	8d 7d d8             	lea    -0x28(%ebp),%edi
-80105098:	74 66                	je     80105100 <sys_unlink+0x120>
+80105ce0:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105ce5:	8d 7d d8             	lea    -0x28(%ebp),%edi
+80105ce8:	74 66                	je     80105d50 <sys_unlink+0x120>
   memset(&de, 0, sizeof(de));
-8010509a:	83 ec 04             	sub    $0x4,%esp
-8010509d:	6a 10                	push   $0x10
-8010509f:	6a 00                	push   $0x0
-801050a1:	57                   	push   %edi
-801050a2:	e8 c9 f5 ff ff       	call   80104670 <memset>
+80105cea:	83 ec 04             	sub    $0x4,%esp
+80105ced:	6a 10                	push   $0x10
+80105cef:	6a 00                	push   $0x0
+80105cf1:	57                   	push   %edi
+80105cf2:	e8 c9 f5 ff ff       	call   801052c0 <memset>
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-801050a7:	6a 10                	push   $0x10
-801050a9:	ff 75 c4             	pushl  -0x3c(%ebp)
-801050ac:	57                   	push   %edi
-801050ad:	56                   	push   %esi
-801050ae:	e8 ad ca ff ff       	call   80101b60 <writei>
-801050b3:	83 c4 20             	add    $0x20,%esp
-801050b6:	83 f8 10             	cmp    $0x10,%eax
-801050b9:	0f 85 e7 00 00 00    	jne    801051a6 <sys_unlink+0x1c6>
+80105cf7:	6a 10                	push   $0x10
+80105cf9:	ff 75 c4             	pushl  -0x3c(%ebp)
+80105cfc:	57                   	push   %edi
+80105cfd:	56                   	push   %esi
+80105cfe:	e8 5d be ff ff       	call   80101b60 <writei>
+80105d03:	83 c4 20             	add    $0x20,%esp
+80105d06:	83 f8 10             	cmp    $0x10,%eax
+80105d09:	0f 85 e7 00 00 00    	jne    80105df6 <sys_unlink+0x1c6>
   if(ip->type == T_DIR){
-801050bf:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-801050c4:	0f 84 96 00 00 00    	je     80105160 <sys_unlink+0x180>
+80105d0f:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105d14:	0f 84 96 00 00 00    	je     80105db0 <sys_unlink+0x180>
   iunlockput(dp);
-801050ca:	83 ec 0c             	sub    $0xc,%esp
-801050cd:	56                   	push   %esi
-801050ce:	e8 2d c9 ff ff       	call   80101a00 <iunlockput>
+80105d1a:	83 ec 0c             	sub    $0xc,%esp
+80105d1d:	56                   	push   %esi
+80105d1e:	e8 dd bc ff ff       	call   80101a00 <iunlockput>
   ip->nlink--;
-801050d3:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+80105d23:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
   iupdate(ip);
-801050d8:	89 1c 24             	mov    %ebx,(%esp)
-801050db:	e8 c0 c5 ff ff       	call   801016a0 <iupdate>
+80105d28:	89 1c 24             	mov    %ebx,(%esp)
+80105d2b:	e8 70 b9 ff ff       	call   801016a0 <iupdate>
   iunlockput(ip);
-801050e0:	89 1c 24             	mov    %ebx,(%esp)
-801050e3:	e8 18 c9 ff ff       	call   80101a00 <iunlockput>
+80105d30:	89 1c 24             	mov    %ebx,(%esp)
+80105d33:	e8 c8 bc ff ff       	call   80101a00 <iunlockput>
   end_op();
-801050e8:	e8 b3 dc ff ff       	call   80102da0 <end_op>
+80105d38:	e8 d3 d0 ff ff       	call   80102e10 <end_op>
   return 0;
-801050ed:	83 c4 10             	add    $0x10,%esp
-801050f0:	31 c0                	xor    %eax,%eax
+80105d3d:	83 c4 10             	add    $0x10,%esp
+80105d40:	31 c0                	xor    %eax,%eax
 }
-801050f2:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801050f5:	5b                   	pop    %ebx
-801050f6:	5e                   	pop    %esi
-801050f7:	5f                   	pop    %edi
-801050f8:	5d                   	pop    %ebp
-801050f9:	c3                   	ret    
-801050fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105d42:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105d45:	5b                   	pop    %ebx
+80105d46:	5e                   	pop    %esi
+80105d47:	5f                   	pop    %edi
+80105d48:	5d                   	pop    %ebp
+80105d49:	c3                   	ret    
+80105d4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
-80105100:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
-80105104:	76 94                	jbe    8010509a <sys_unlink+0xba>
-80105106:	ba 20 00 00 00       	mov    $0x20,%edx
-8010510b:	eb 0b                	jmp    80105118 <sys_unlink+0x138>
-8010510d:	8d 76 00             	lea    0x0(%esi),%esi
-80105110:	83 c2 10             	add    $0x10,%edx
-80105113:	39 53 58             	cmp    %edx,0x58(%ebx)
-80105116:	76 82                	jbe    8010509a <sys_unlink+0xba>
+80105d50:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
+80105d54:	76 94                	jbe    80105cea <sys_unlink+0xba>
+80105d56:	ba 20 00 00 00       	mov    $0x20,%edx
+80105d5b:	eb 0b                	jmp    80105d68 <sys_unlink+0x138>
+80105d5d:	8d 76 00             	lea    0x0(%esi),%esi
+80105d60:	83 c2 10             	add    $0x10,%edx
+80105d63:	39 53 58             	cmp    %edx,0x58(%ebx)
+80105d66:	76 82                	jbe    80105cea <sys_unlink+0xba>
     if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80105118:	6a 10                	push   $0x10
-8010511a:	52                   	push   %edx
-8010511b:	57                   	push   %edi
-8010511c:	53                   	push   %ebx
-8010511d:	89 55 b4             	mov    %edx,-0x4c(%ebp)
-80105120:	e8 3b c9 ff ff       	call   80101a60 <readi>
-80105125:	83 c4 10             	add    $0x10,%esp
-80105128:	8b 55 b4             	mov    -0x4c(%ebp),%edx
-8010512b:	83 f8 10             	cmp    $0x10,%eax
-8010512e:	75 69                	jne    80105199 <sys_unlink+0x1b9>
+80105d68:	6a 10                	push   $0x10
+80105d6a:	52                   	push   %edx
+80105d6b:	57                   	push   %edi
+80105d6c:	53                   	push   %ebx
+80105d6d:	89 55 b4             	mov    %edx,-0x4c(%ebp)
+80105d70:	e8 eb bc ff ff       	call   80101a60 <readi>
+80105d75:	83 c4 10             	add    $0x10,%esp
+80105d78:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+80105d7b:	83 f8 10             	cmp    $0x10,%eax
+80105d7e:	75 69                	jne    80105de9 <sys_unlink+0x1b9>
     if(de.inum != 0)
-80105130:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
-80105135:	74 d9                	je     80105110 <sys_unlink+0x130>
+80105d80:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80105d85:	74 d9                	je     80105d60 <sys_unlink+0x130>
     iunlockput(ip);
-80105137:	83 ec 0c             	sub    $0xc,%esp
-8010513a:	53                   	push   %ebx
-8010513b:	e8 c0 c8 ff ff       	call   80101a00 <iunlockput>
+80105d87:	83 ec 0c             	sub    $0xc,%esp
+80105d8a:	53                   	push   %ebx
+80105d8b:	e8 70 bc ff ff       	call   80101a00 <iunlockput>
     goto bad;
-80105140:	83 c4 10             	add    $0x10,%esp
-80105143:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105147:	90                   	nop
+80105d90:	83 c4 10             	add    $0x10,%esp
+80105d93:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105d97:	90                   	nop
   iunlockput(dp);
-80105148:	83 ec 0c             	sub    $0xc,%esp
-8010514b:	56                   	push   %esi
-8010514c:	e8 af c8 ff ff       	call   80101a00 <iunlockput>
+80105d98:	83 ec 0c             	sub    $0xc,%esp
+80105d9b:	56                   	push   %esi
+80105d9c:	e8 5f bc ff ff       	call   80101a00 <iunlockput>
   end_op();
-80105151:	e8 4a dc ff ff       	call   80102da0 <end_op>
+80105da1:	e8 6a d0 ff ff       	call   80102e10 <end_op>
   return -1;
-80105156:	83 c4 10             	add    $0x10,%esp
-80105159:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010515e:	eb 92                	jmp    801050f2 <sys_unlink+0x112>
+80105da6:	83 c4 10             	add    $0x10,%esp
+80105da9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105dae:	eb 92                	jmp    80105d42 <sys_unlink+0x112>
     iupdate(dp);
-80105160:	83 ec 0c             	sub    $0xc,%esp
+80105db0:	83 ec 0c             	sub    $0xc,%esp
     dp->nlink--;
-80105163:	66 83 6e 56 01       	subw   $0x1,0x56(%esi)
+80105db3:	66 83 6e 56 01       	subw   $0x1,0x56(%esi)
     iupdate(dp);
-80105168:	56                   	push   %esi
-80105169:	e8 32 c5 ff ff       	call   801016a0 <iupdate>
-8010516e:	83 c4 10             	add    $0x10,%esp
-80105171:	e9 54 ff ff ff       	jmp    801050ca <sys_unlink+0xea>
-80105176:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010517d:	8d 76 00             	lea    0x0(%esi),%esi
+80105db8:	56                   	push   %esi
+80105db9:	e8 e2 b8 ff ff       	call   801016a0 <iupdate>
+80105dbe:	83 c4 10             	add    $0x10,%esp
+80105dc1:	e9 54 ff ff ff       	jmp    80105d1a <sys_unlink+0xea>
+80105dc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105dcd:	8d 76 00             	lea    0x0(%esi),%esi
     return -1;
-80105180:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105185:	e9 68 ff ff ff       	jmp    801050f2 <sys_unlink+0x112>
+80105dd0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105dd5:	e9 68 ff ff ff       	jmp    80105d42 <sys_unlink+0x112>
     end_op();
-8010518a:	e8 11 dc ff ff       	call   80102da0 <end_op>
+80105dda:	e8 31 d0 ff ff       	call   80102e10 <end_op>
     return -1;
-8010518f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105194:	e9 59 ff ff ff       	jmp    801050f2 <sys_unlink+0x112>
+80105ddf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105de4:	e9 59 ff ff ff       	jmp    80105d42 <sys_unlink+0x112>
       panic("isdirempty: readi");
-80105199:	83 ec 0c             	sub    $0xc,%esp
-8010519c:	68 38 78 10 80       	push   $0x80107838
-801051a1:	e8 ea b1 ff ff       	call   80100390 <panic>
+80105de9:	83 ec 0c             	sub    $0xc,%esp
+80105dec:	68 b9 86 10 80       	push   $0x801086b9
+80105df1:	e8 9a a5 ff ff       	call   80100390 <panic>
     panic("unlink: writei");
-801051a6:	83 ec 0c             	sub    $0xc,%esp
-801051a9:	68 4a 78 10 80       	push   $0x8010784a
-801051ae:	e8 dd b1 ff ff       	call   80100390 <panic>
+80105df6:	83 ec 0c             	sub    $0xc,%esp
+80105df9:	68 cb 86 10 80       	push   $0x801086cb
+80105dfe:	e8 8d a5 ff ff       	call   80100390 <panic>
     panic("unlink: nlink < 1");
-801051b3:	83 ec 0c             	sub    $0xc,%esp
-801051b6:	68 26 78 10 80       	push   $0x80107826
-801051bb:	e8 d0 b1 ff ff       	call   80100390 <panic>
+80105e03:	83 ec 0c             	sub    $0xc,%esp
+80105e06:	68 a7 86 10 80       	push   $0x801086a7
+80105e0b:	e8 80 a5 ff ff       	call   80100390 <panic>
 
-801051c0 <sys_open>:
+80105e10 <sys_open>:
 
 int
 sys_open(void)
 {
-801051c0:	f3 0f 1e fb          	endbr32 
-801051c4:	55                   	push   %ebp
-801051c5:	89 e5                	mov    %esp,%ebp
-801051c7:	57                   	push   %edi
-801051c8:	56                   	push   %esi
+80105e10:	f3 0f 1e fb          	endbr32 
+80105e14:	55                   	push   %ebp
+80105e15:	89 e5                	mov    %esp,%ebp
+80105e17:	57                   	push   %edi
+80105e18:	56                   	push   %esi
   char *path;
   int fd, omode;
   struct file *f;
   struct inode *ip;
 
   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-801051c9:	8d 45 e0             	lea    -0x20(%ebp),%eax
+80105e19:	8d 45 e0             	lea    -0x20(%ebp),%eax
 {
-801051cc:	53                   	push   %ebx
-801051cd:	83 ec 24             	sub    $0x24,%esp
+80105e1c:	53                   	push   %ebx
+80105e1d:	83 ec 24             	sub    $0x24,%esp
   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-801051d0:	50                   	push   %eax
-801051d1:	6a 00                	push   $0x0
-801051d3:	e8 28 f8 ff ff       	call   80104a00 <argstr>
-801051d8:	83 c4 10             	add    $0x10,%esp
-801051db:	85 c0                	test   %eax,%eax
-801051dd:	0f 88 8a 00 00 00    	js     8010526d <sys_open+0xad>
-801051e3:	83 ec 08             	sub    $0x8,%esp
-801051e6:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-801051e9:	50                   	push   %eax
-801051ea:	6a 01                	push   $0x1
-801051ec:	e8 5f f7 ff ff       	call   80104950 <argint>
-801051f1:	83 c4 10             	add    $0x10,%esp
-801051f4:	85 c0                	test   %eax,%eax
-801051f6:	78 75                	js     8010526d <sys_open+0xad>
+80105e20:	50                   	push   %eax
+80105e21:	6a 00                	push   $0x0
+80105e23:	e8 28 f8 ff ff       	call   80105650 <argstr>
+80105e28:	83 c4 10             	add    $0x10,%esp
+80105e2b:	85 c0                	test   %eax,%eax
+80105e2d:	0f 88 8a 00 00 00    	js     80105ebd <sys_open+0xad>
+80105e33:	83 ec 08             	sub    $0x8,%esp
+80105e36:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105e39:	50                   	push   %eax
+80105e3a:	6a 01                	push   $0x1
+80105e3c:	e8 5f f7 ff ff       	call   801055a0 <argint>
+80105e41:	83 c4 10             	add    $0x10,%esp
+80105e44:	85 c0                	test   %eax,%eax
+80105e46:	78 75                	js     80105ebd <sys_open+0xad>
     return -1;
 
   begin_op();
-801051f8:	e8 33 db ff ff       	call   80102d30 <begin_op>
+80105e48:	e8 53 cf ff ff       	call   80102da0 <begin_op>
 
   if(omode & O_CREATE){
-801051fd:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
-80105201:	75 75                	jne    80105278 <sys_open+0xb8>
+80105e4d:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
+80105e51:	75 75                	jne    80105ec8 <sys_open+0xb8>
     if(ip == 0){
       end_op();
       return -1;
     }
   } else {
     if((ip = namei(path)) == 0){
-80105203:	83 ec 0c             	sub    $0xc,%esp
-80105206:	ff 75 e0             	pushl  -0x20(%ebp)
-80105209:	e8 22 ce ff ff       	call   80102030 <namei>
-8010520e:	83 c4 10             	add    $0x10,%esp
-80105211:	89 c6                	mov    %eax,%esi
-80105213:	85 c0                	test   %eax,%eax
-80105215:	74 7e                	je     80105295 <sys_open+0xd5>
+80105e53:	83 ec 0c             	sub    $0xc,%esp
+80105e56:	ff 75 e0             	pushl  -0x20(%ebp)
+80105e59:	e8 d2 c1 ff ff       	call   80102030 <namei>
+80105e5e:	83 c4 10             	add    $0x10,%esp
+80105e61:	89 c6                	mov    %eax,%esi
+80105e63:	85 c0                	test   %eax,%eax
+80105e65:	74 7e                	je     80105ee5 <sys_open+0xd5>
       end_op();
       return -1;
     }
     ilock(ip);
-80105217:	83 ec 0c             	sub    $0xc,%esp
-8010521a:	50                   	push   %eax
-8010521b:	e8 40 c5 ff ff       	call   80101760 <ilock>
+80105e67:	83 ec 0c             	sub    $0xc,%esp
+80105e6a:	50                   	push   %eax
+80105e6b:	e8 f0 b8 ff ff       	call   80101760 <ilock>
     if(ip->type == T_DIR && omode != O_RDONLY){
-80105220:	83 c4 10             	add    $0x10,%esp
-80105223:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
-80105228:	0f 84 c2 00 00 00    	je     801052f0 <sys_open+0x130>
+80105e70:	83 c4 10             	add    $0x10,%esp
+80105e73:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+80105e78:	0f 84 c2 00 00 00    	je     80105f40 <sys_open+0x130>
       end_op();
       return -1;
     }
   }
 
   if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
-8010522e:	e8 cd bb ff ff       	call   80100e00 <filealloc>
-80105233:	89 c7                	mov    %eax,%edi
-80105235:	85 c0                	test   %eax,%eax
-80105237:	74 23                	je     8010525c <sys_open+0x9c>
+80105e7e:	e8 7d af ff ff       	call   80100e00 <filealloc>
+80105e83:	89 c7                	mov    %eax,%edi
+80105e85:	85 c0                	test   %eax,%eax
+80105e87:	74 23                	je     80105eac <sys_open+0x9c>
   struct proc *curproc = myproc();
-80105239:	e8 22 e7 ff ff       	call   80103960 <myproc>
+80105e89:	e8 62 e1 ff ff       	call   80103ff0 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-8010523e:	31 db                	xor    %ebx,%ebx
+80105e8e:	31 db                	xor    %ebx,%ebx
     if(curproc->ofile[fd] == 0){
-80105240:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-80105244:	85 d2                	test   %edx,%edx
-80105246:	74 60                	je     801052a8 <sys_open+0xe8>
+80105e90:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+80105e94:	85 d2                	test   %edx,%edx
+80105e96:	74 60                	je     80105ef8 <sys_open+0xe8>
   for(fd = 0; fd < NOFILE; fd++){
-80105248:	83 c3 01             	add    $0x1,%ebx
-8010524b:	83 fb 10             	cmp    $0x10,%ebx
-8010524e:	75 f0                	jne    80105240 <sys_open+0x80>
+80105e98:	83 c3 01             	add    $0x1,%ebx
+80105e9b:	83 fb 10             	cmp    $0x10,%ebx
+80105e9e:	75 f0                	jne    80105e90 <sys_open+0x80>
     if(f)
       fileclose(f);
-80105250:	83 ec 0c             	sub    $0xc,%esp
-80105253:	57                   	push   %edi
-80105254:	e8 67 bc ff ff       	call   80100ec0 <fileclose>
-80105259:	83 c4 10             	add    $0x10,%esp
+80105ea0:	83 ec 0c             	sub    $0xc,%esp
+80105ea3:	57                   	push   %edi
+80105ea4:	e8 17 b0 ff ff       	call   80100ec0 <fileclose>
+80105ea9:	83 c4 10             	add    $0x10,%esp
     iunlockput(ip);
-8010525c:	83 ec 0c             	sub    $0xc,%esp
-8010525f:	56                   	push   %esi
-80105260:	e8 9b c7 ff ff       	call   80101a00 <iunlockput>
+80105eac:	83 ec 0c             	sub    $0xc,%esp
+80105eaf:	56                   	push   %esi
+80105eb0:	e8 4b bb ff ff       	call   80101a00 <iunlockput>
     end_op();
-80105265:	e8 36 db ff ff       	call   80102da0 <end_op>
+80105eb5:	e8 56 cf ff ff       	call   80102e10 <end_op>
     return -1;
-8010526a:	83 c4 10             	add    $0x10,%esp
-8010526d:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80105272:	eb 6d                	jmp    801052e1 <sys_open+0x121>
-80105274:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105eba:	83 c4 10             	add    $0x10,%esp
+80105ebd:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105ec2:	eb 6d                	jmp    80105f31 <sys_open+0x121>
+80105ec4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     ip = create(path, T_FILE, 0, 0);
-80105278:	83 ec 0c             	sub    $0xc,%esp
-8010527b:	8b 45 e0             	mov    -0x20(%ebp),%eax
-8010527e:	31 c9                	xor    %ecx,%ecx
-80105280:	ba 02 00 00 00       	mov    $0x2,%edx
-80105285:	6a 00                	push   $0x0
-80105287:	e8 24 f8 ff ff       	call   80104ab0 <create>
+80105ec8:	83 ec 0c             	sub    $0xc,%esp
+80105ecb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80105ece:	31 c9                	xor    %ecx,%ecx
+80105ed0:	ba 02 00 00 00       	mov    $0x2,%edx
+80105ed5:	6a 00                	push   $0x0
+80105ed7:	e8 24 f8 ff ff       	call   80105700 <create>
     if(ip == 0){
-8010528c:	83 c4 10             	add    $0x10,%esp
+80105edc:	83 c4 10             	add    $0x10,%esp
     ip = create(path, T_FILE, 0, 0);
-8010528f:	89 c6                	mov    %eax,%esi
+80105edf:	89 c6                	mov    %eax,%esi
     if(ip == 0){
-80105291:	85 c0                	test   %eax,%eax
-80105293:	75 99                	jne    8010522e <sys_open+0x6e>
+80105ee1:	85 c0                	test   %eax,%eax
+80105ee3:	75 99                	jne    80105e7e <sys_open+0x6e>
       end_op();
-80105295:	e8 06 db ff ff       	call   80102da0 <end_op>
+80105ee5:	e8 26 cf ff ff       	call   80102e10 <end_op>
       return -1;
-8010529a:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-8010529f:	eb 40                	jmp    801052e1 <sys_open+0x121>
-801052a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105eea:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105eef:	eb 40                	jmp    80105f31 <sys_open+0x121>
+80105ef1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   }
   iunlock(ip);
-801052a8:	83 ec 0c             	sub    $0xc,%esp
+80105ef8:	83 ec 0c             	sub    $0xc,%esp
       curproc->ofile[fd] = f;
-801052ab:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
+80105efb:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
   iunlock(ip);
-801052af:	56                   	push   %esi
-801052b0:	e8 8b c5 ff ff       	call   80101840 <iunlock>
+80105eff:	56                   	push   %esi
+80105f00:	e8 3b b9 ff ff       	call   80101840 <iunlock>
   end_op();
-801052b5:	e8 e6 da ff ff       	call   80102da0 <end_op>
+80105f05:	e8 06 cf ff ff       	call   80102e10 <end_op>
 
   f->type = FD_INODE;
-801052ba:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
+80105f0a:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
   f->ip = ip;
   f->off = 0;
   f->readable = !(omode & O_WRONLY);
-801052c0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80105f10:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801052c3:	83 c4 10             	add    $0x10,%esp
+80105f13:	83 c4 10             	add    $0x10,%esp
   f->ip = ip;
-801052c6:	89 77 10             	mov    %esi,0x10(%edi)
+80105f16:	89 77 10             	mov    %esi,0x10(%edi)
   f->readable = !(omode & O_WRONLY);
-801052c9:	89 d0                	mov    %edx,%eax
+80105f19:	89 d0                	mov    %edx,%eax
   f->off = 0;
-801052cb:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
+80105f1b:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
   f->readable = !(omode & O_WRONLY);
-801052d2:	f7 d0                	not    %eax
-801052d4:	83 e0 01             	and    $0x1,%eax
+80105f22:	f7 d0                	not    %eax
+80105f24:	83 e0 01             	and    $0x1,%eax
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801052d7:	83 e2 03             	and    $0x3,%edx
+80105f27:	83 e2 03             	and    $0x3,%edx
   f->readable = !(omode & O_WRONLY);
-801052da:	88 47 08             	mov    %al,0x8(%edi)
+80105f2a:	88 47 08             	mov    %al,0x8(%edi)
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801052dd:	0f 95 47 09          	setne  0x9(%edi)
+80105f2d:	0f 95 47 09          	setne  0x9(%edi)
   return fd;
 }
-801052e1:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801052e4:	89 d8                	mov    %ebx,%eax
-801052e6:	5b                   	pop    %ebx
-801052e7:	5e                   	pop    %esi
-801052e8:	5f                   	pop    %edi
-801052e9:	5d                   	pop    %ebp
-801052ea:	c3                   	ret    
-801052eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801052ef:	90                   	nop
+80105f31:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105f34:	89 d8                	mov    %ebx,%eax
+80105f36:	5b                   	pop    %ebx
+80105f37:	5e                   	pop    %esi
+80105f38:	5f                   	pop    %edi
+80105f39:	5d                   	pop    %ebp
+80105f3a:	c3                   	ret    
+80105f3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105f3f:	90                   	nop
     if(ip->type == T_DIR && omode != O_RDONLY){
-801052f0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-801052f3:	85 c9                	test   %ecx,%ecx
-801052f5:	0f 84 33 ff ff ff    	je     8010522e <sys_open+0x6e>
-801052fb:	e9 5c ff ff ff       	jmp    8010525c <sys_open+0x9c>
+80105f40:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80105f43:	85 c9                	test   %ecx,%ecx
+80105f45:	0f 84 33 ff ff ff    	je     80105e7e <sys_open+0x6e>
+80105f4b:	e9 5c ff ff ff       	jmp    80105eac <sys_open+0x9c>
 
-80105300 <sys_mkdir>:
+80105f50 <sys_mkdir>:
 
 int
 sys_mkdir(void)
 {
-80105300:	f3 0f 1e fb          	endbr32 
-80105304:	55                   	push   %ebp
-80105305:	89 e5                	mov    %esp,%ebp
-80105307:	83 ec 18             	sub    $0x18,%esp
+80105f50:	f3 0f 1e fb          	endbr32 
+80105f54:	55                   	push   %ebp
+80105f55:	89 e5                	mov    %esp,%ebp
+80105f57:	83 ec 18             	sub    $0x18,%esp
   char *path;
   struct inode *ip;
 
   begin_op();
-8010530a:	e8 21 da ff ff       	call   80102d30 <begin_op>
+80105f5a:	e8 41 ce ff ff       	call   80102da0 <begin_op>
   if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
-8010530f:	83 ec 08             	sub    $0x8,%esp
-80105312:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105315:	50                   	push   %eax
-80105316:	6a 00                	push   $0x0
-80105318:	e8 e3 f6 ff ff       	call   80104a00 <argstr>
-8010531d:	83 c4 10             	add    $0x10,%esp
-80105320:	85 c0                	test   %eax,%eax
-80105322:	78 34                	js     80105358 <sys_mkdir+0x58>
-80105324:	83 ec 0c             	sub    $0xc,%esp
-80105327:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010532a:	31 c9                	xor    %ecx,%ecx
-8010532c:	ba 01 00 00 00       	mov    $0x1,%edx
-80105331:	6a 00                	push   $0x0
-80105333:	e8 78 f7 ff ff       	call   80104ab0 <create>
-80105338:	83 c4 10             	add    $0x10,%esp
-8010533b:	85 c0                	test   %eax,%eax
-8010533d:	74 19                	je     80105358 <sys_mkdir+0x58>
+80105f5f:	83 ec 08             	sub    $0x8,%esp
+80105f62:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105f65:	50                   	push   %eax
+80105f66:	6a 00                	push   $0x0
+80105f68:	e8 e3 f6 ff ff       	call   80105650 <argstr>
+80105f6d:	83 c4 10             	add    $0x10,%esp
+80105f70:	85 c0                	test   %eax,%eax
+80105f72:	78 34                	js     80105fa8 <sys_mkdir+0x58>
+80105f74:	83 ec 0c             	sub    $0xc,%esp
+80105f77:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105f7a:	31 c9                	xor    %ecx,%ecx
+80105f7c:	ba 01 00 00 00       	mov    $0x1,%edx
+80105f81:	6a 00                	push   $0x0
+80105f83:	e8 78 f7 ff ff       	call   80105700 <create>
+80105f88:	83 c4 10             	add    $0x10,%esp
+80105f8b:	85 c0                	test   %eax,%eax
+80105f8d:	74 19                	je     80105fa8 <sys_mkdir+0x58>
     end_op();
     return -1;
   }
   iunlockput(ip);
-8010533f:	83 ec 0c             	sub    $0xc,%esp
-80105342:	50                   	push   %eax
-80105343:	e8 b8 c6 ff ff       	call   80101a00 <iunlockput>
+80105f8f:	83 ec 0c             	sub    $0xc,%esp
+80105f92:	50                   	push   %eax
+80105f93:	e8 68 ba ff ff       	call   80101a00 <iunlockput>
   end_op();
-80105348:	e8 53 da ff ff       	call   80102da0 <end_op>
+80105f98:	e8 73 ce ff ff       	call   80102e10 <end_op>
   return 0;
-8010534d:	83 c4 10             	add    $0x10,%esp
-80105350:	31 c0                	xor    %eax,%eax
+80105f9d:	83 c4 10             	add    $0x10,%esp
+80105fa0:	31 c0                	xor    %eax,%eax
 }
-80105352:	c9                   	leave  
-80105353:	c3                   	ret    
-80105354:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105fa2:	c9                   	leave  
+80105fa3:	c3                   	ret    
+80105fa4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     end_op();
-80105358:	e8 43 da ff ff       	call   80102da0 <end_op>
+80105fa8:	e8 63 ce ff ff       	call   80102e10 <end_op>
     return -1;
-8010535d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105fad:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105362:	c9                   	leave  
-80105363:	c3                   	ret    
-80105364:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010536b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010536f:	90                   	nop
+80105fb2:	c9                   	leave  
+80105fb3:	c3                   	ret    
+80105fb4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105fbb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105fbf:	90                   	nop
 
-80105370 <sys_mknod>:
+80105fc0 <sys_mknod>:
 
 int
 sys_mknod(void)
 {
-80105370:	f3 0f 1e fb          	endbr32 
-80105374:	55                   	push   %ebp
-80105375:	89 e5                	mov    %esp,%ebp
-80105377:	83 ec 18             	sub    $0x18,%esp
+80105fc0:	f3 0f 1e fb          	endbr32 
+80105fc4:	55                   	push   %ebp
+80105fc5:	89 e5                	mov    %esp,%ebp
+80105fc7:	83 ec 18             	sub    $0x18,%esp
   struct inode *ip;
   char *path;
   int major, minor;
 
   begin_op();
-8010537a:	e8 b1 d9 ff ff       	call   80102d30 <begin_op>
+80105fca:	e8 d1 cd ff ff       	call   80102da0 <begin_op>
   if((argstr(0, &path)) < 0 ||
-8010537f:	83 ec 08             	sub    $0x8,%esp
-80105382:	8d 45 ec             	lea    -0x14(%ebp),%eax
-80105385:	50                   	push   %eax
-80105386:	6a 00                	push   $0x0
-80105388:	e8 73 f6 ff ff       	call   80104a00 <argstr>
-8010538d:	83 c4 10             	add    $0x10,%esp
-80105390:	85 c0                	test   %eax,%eax
-80105392:	78 64                	js     801053f8 <sys_mknod+0x88>
+80105fcf:	83 ec 08             	sub    $0x8,%esp
+80105fd2:	8d 45 ec             	lea    -0x14(%ebp),%eax
+80105fd5:	50                   	push   %eax
+80105fd6:	6a 00                	push   $0x0
+80105fd8:	e8 73 f6 ff ff       	call   80105650 <argstr>
+80105fdd:	83 c4 10             	add    $0x10,%esp
+80105fe0:	85 c0                	test   %eax,%eax
+80105fe2:	78 64                	js     80106048 <sys_mknod+0x88>
      argint(1, &major) < 0 ||
-80105394:	83 ec 08             	sub    $0x8,%esp
-80105397:	8d 45 f0             	lea    -0x10(%ebp),%eax
-8010539a:	50                   	push   %eax
-8010539b:	6a 01                	push   $0x1
-8010539d:	e8 ae f5 ff ff       	call   80104950 <argint>
+80105fe4:	83 ec 08             	sub    $0x8,%esp
+80105fe7:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105fea:	50                   	push   %eax
+80105feb:	6a 01                	push   $0x1
+80105fed:	e8 ae f5 ff ff       	call   801055a0 <argint>
   if((argstr(0, &path)) < 0 ||
-801053a2:	83 c4 10             	add    $0x10,%esp
-801053a5:	85 c0                	test   %eax,%eax
-801053a7:	78 4f                	js     801053f8 <sys_mknod+0x88>
+80105ff2:	83 c4 10             	add    $0x10,%esp
+80105ff5:	85 c0                	test   %eax,%eax
+80105ff7:	78 4f                	js     80106048 <sys_mknod+0x88>
      argint(2, &minor) < 0 ||
-801053a9:	83 ec 08             	sub    $0x8,%esp
-801053ac:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801053af:	50                   	push   %eax
-801053b0:	6a 02                	push   $0x2
-801053b2:	e8 99 f5 ff ff       	call   80104950 <argint>
+80105ff9:	83 ec 08             	sub    $0x8,%esp
+80105ffc:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105fff:	50                   	push   %eax
+80106000:	6a 02                	push   $0x2
+80106002:	e8 99 f5 ff ff       	call   801055a0 <argint>
      argint(1, &major) < 0 ||
-801053b7:	83 c4 10             	add    $0x10,%esp
-801053ba:	85 c0                	test   %eax,%eax
-801053bc:	78 3a                	js     801053f8 <sys_mknod+0x88>
+80106007:	83 c4 10             	add    $0x10,%esp
+8010600a:	85 c0                	test   %eax,%eax
+8010600c:	78 3a                	js     80106048 <sys_mknod+0x88>
      (ip = create(path, T_DEV, major, minor)) == 0){
-801053be:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
-801053c2:	83 ec 0c             	sub    $0xc,%esp
-801053c5:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
-801053c9:	ba 03 00 00 00       	mov    $0x3,%edx
-801053ce:	50                   	push   %eax
-801053cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
-801053d2:	e8 d9 f6 ff ff       	call   80104ab0 <create>
+8010600e:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
+80106012:	83 ec 0c             	sub    $0xc,%esp
+80106015:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
+80106019:	ba 03 00 00 00       	mov    $0x3,%edx
+8010601e:	50                   	push   %eax
+8010601f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80106022:	e8 d9 f6 ff ff       	call   80105700 <create>
      argint(2, &minor) < 0 ||
-801053d7:	83 c4 10             	add    $0x10,%esp
-801053da:	85 c0                	test   %eax,%eax
-801053dc:	74 1a                	je     801053f8 <sys_mknod+0x88>
+80106027:	83 c4 10             	add    $0x10,%esp
+8010602a:	85 c0                	test   %eax,%eax
+8010602c:	74 1a                	je     80106048 <sys_mknod+0x88>
     end_op();
     return -1;
   }
   iunlockput(ip);
-801053de:	83 ec 0c             	sub    $0xc,%esp
-801053e1:	50                   	push   %eax
-801053e2:	e8 19 c6 ff ff       	call   80101a00 <iunlockput>
+8010602e:	83 ec 0c             	sub    $0xc,%esp
+80106031:	50                   	push   %eax
+80106032:	e8 c9 b9 ff ff       	call   80101a00 <iunlockput>
   end_op();
-801053e7:	e8 b4 d9 ff ff       	call   80102da0 <end_op>
+80106037:	e8 d4 cd ff ff       	call   80102e10 <end_op>
   return 0;
-801053ec:	83 c4 10             	add    $0x10,%esp
-801053ef:	31 c0                	xor    %eax,%eax
+8010603c:	83 c4 10             	add    $0x10,%esp
+8010603f:	31 c0                	xor    %eax,%eax
 }
-801053f1:	c9                   	leave  
-801053f2:	c3                   	ret    
-801053f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801053f7:	90                   	nop
+80106041:	c9                   	leave  
+80106042:	c3                   	ret    
+80106043:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106047:	90                   	nop
     end_op();
-801053f8:	e8 a3 d9 ff ff       	call   80102da0 <end_op>
+80106048:	e8 c3 cd ff ff       	call   80102e10 <end_op>
     return -1;
-801053fd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010604d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105402:	c9                   	leave  
-80105403:	c3                   	ret    
-80105404:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010540b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010540f:	90                   	nop
+80106052:	c9                   	leave  
+80106053:	c3                   	ret    
+80106054:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010605b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010605f:	90                   	nop
 
-80105410 <sys_chdir>:
+80106060 <sys_chdir>:
 
 int
 sys_chdir(void)
 {
-80105410:	f3 0f 1e fb          	endbr32 
-80105414:	55                   	push   %ebp
-80105415:	89 e5                	mov    %esp,%ebp
-80105417:	56                   	push   %esi
-80105418:	53                   	push   %ebx
-80105419:	83 ec 10             	sub    $0x10,%esp
+80106060:	f3 0f 1e fb          	endbr32 
+80106064:	55                   	push   %ebp
+80106065:	89 e5                	mov    %esp,%ebp
+80106067:	56                   	push   %esi
+80106068:	53                   	push   %ebx
+80106069:	83 ec 10             	sub    $0x10,%esp
   char *path;
   struct inode *ip;
   struct proc *curproc = myproc();
-8010541c:	e8 3f e5 ff ff       	call   80103960 <myproc>
-80105421:	89 c6                	mov    %eax,%esi
+8010606c:	e8 7f df ff ff       	call   80103ff0 <myproc>
+80106071:	89 c6                	mov    %eax,%esi
   
   begin_op();
-80105423:	e8 08 d9 ff ff       	call   80102d30 <begin_op>
+80106073:	e8 28 cd ff ff       	call   80102da0 <begin_op>
   if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
-80105428:	83 ec 08             	sub    $0x8,%esp
-8010542b:	8d 45 f4             	lea    -0xc(%ebp),%eax
-8010542e:	50                   	push   %eax
-8010542f:	6a 00                	push   $0x0
-80105431:	e8 ca f5 ff ff       	call   80104a00 <argstr>
-80105436:	83 c4 10             	add    $0x10,%esp
-80105439:	85 c0                	test   %eax,%eax
-8010543b:	78 73                	js     801054b0 <sys_chdir+0xa0>
-8010543d:	83 ec 0c             	sub    $0xc,%esp
-80105440:	ff 75 f4             	pushl  -0xc(%ebp)
-80105443:	e8 e8 cb ff ff       	call   80102030 <namei>
-80105448:	83 c4 10             	add    $0x10,%esp
-8010544b:	89 c3                	mov    %eax,%ebx
-8010544d:	85 c0                	test   %eax,%eax
-8010544f:	74 5f                	je     801054b0 <sys_chdir+0xa0>
+80106078:	83 ec 08             	sub    $0x8,%esp
+8010607b:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010607e:	50                   	push   %eax
+8010607f:	6a 00                	push   $0x0
+80106081:	e8 ca f5 ff ff       	call   80105650 <argstr>
+80106086:	83 c4 10             	add    $0x10,%esp
+80106089:	85 c0                	test   %eax,%eax
+8010608b:	78 73                	js     80106100 <sys_chdir+0xa0>
+8010608d:	83 ec 0c             	sub    $0xc,%esp
+80106090:	ff 75 f4             	pushl  -0xc(%ebp)
+80106093:	e8 98 bf ff ff       	call   80102030 <namei>
+80106098:	83 c4 10             	add    $0x10,%esp
+8010609b:	89 c3                	mov    %eax,%ebx
+8010609d:	85 c0                	test   %eax,%eax
+8010609f:	74 5f                	je     80106100 <sys_chdir+0xa0>
     end_op();
     return -1;
   }
   ilock(ip);
-80105451:	83 ec 0c             	sub    $0xc,%esp
-80105454:	50                   	push   %eax
-80105455:	e8 06 c3 ff ff       	call   80101760 <ilock>
+801060a1:	83 ec 0c             	sub    $0xc,%esp
+801060a4:	50                   	push   %eax
+801060a5:	e8 b6 b6 ff ff       	call   80101760 <ilock>
   if(ip->type != T_DIR){
-8010545a:	83 c4 10             	add    $0x10,%esp
-8010545d:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80105462:	75 2c                	jne    80105490 <sys_chdir+0x80>
+801060aa:	83 c4 10             	add    $0x10,%esp
+801060ad:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+801060b2:	75 2c                	jne    801060e0 <sys_chdir+0x80>
     iunlockput(ip);
     end_op();
     return -1;
   }
   iunlock(ip);
-80105464:	83 ec 0c             	sub    $0xc,%esp
-80105467:	53                   	push   %ebx
-80105468:	e8 d3 c3 ff ff       	call   80101840 <iunlock>
+801060b4:	83 ec 0c             	sub    $0xc,%esp
+801060b7:	53                   	push   %ebx
+801060b8:	e8 83 b7 ff ff       	call   80101840 <iunlock>
   iput(curproc->cwd);
-8010546d:	58                   	pop    %eax
-8010546e:	ff 76 68             	pushl  0x68(%esi)
-80105471:	e8 1a c4 ff ff       	call   80101890 <iput>
+801060bd:	58                   	pop    %eax
+801060be:	ff 76 68             	pushl  0x68(%esi)
+801060c1:	e8 ca b7 ff ff       	call   80101890 <iput>
   end_op();
-80105476:	e8 25 d9 ff ff       	call   80102da0 <end_op>
+801060c6:	e8 45 cd ff ff       	call   80102e10 <end_op>
   curproc->cwd = ip;
-8010547b:	89 5e 68             	mov    %ebx,0x68(%esi)
+801060cb:	89 5e 68             	mov    %ebx,0x68(%esi)
   return 0;
-8010547e:	83 c4 10             	add    $0x10,%esp
-80105481:	31 c0                	xor    %eax,%eax
+801060ce:	83 c4 10             	add    $0x10,%esp
+801060d1:	31 c0                	xor    %eax,%eax
 }
-80105483:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80105486:	5b                   	pop    %ebx
-80105487:	5e                   	pop    %esi
-80105488:	5d                   	pop    %ebp
-80105489:	c3                   	ret    
-8010548a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801060d3:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801060d6:	5b                   	pop    %ebx
+801060d7:	5e                   	pop    %esi
+801060d8:	5d                   	pop    %ebp
+801060d9:	c3                   	ret    
+801060da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     iunlockput(ip);
-80105490:	83 ec 0c             	sub    $0xc,%esp
-80105493:	53                   	push   %ebx
-80105494:	e8 67 c5 ff ff       	call   80101a00 <iunlockput>
+801060e0:	83 ec 0c             	sub    $0xc,%esp
+801060e3:	53                   	push   %ebx
+801060e4:	e8 17 b9 ff ff       	call   80101a00 <iunlockput>
     end_op();
-80105499:	e8 02 d9 ff ff       	call   80102da0 <end_op>
+801060e9:	e8 22 cd ff ff       	call   80102e10 <end_op>
     return -1;
-8010549e:	83 c4 10             	add    $0x10,%esp
-801054a1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801054a6:	eb db                	jmp    80105483 <sys_chdir+0x73>
-801054a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801054af:	90                   	nop
+801060ee:	83 c4 10             	add    $0x10,%esp
+801060f1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801060f6:	eb db                	jmp    801060d3 <sys_chdir+0x73>
+801060f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801060ff:	90                   	nop
     end_op();
-801054b0:	e8 eb d8 ff ff       	call   80102da0 <end_op>
+80106100:	e8 0b cd ff ff       	call   80102e10 <end_op>
     return -1;
-801054b5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801054ba:	eb c7                	jmp    80105483 <sys_chdir+0x73>
-801054bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106105:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010610a:	eb c7                	jmp    801060d3 <sys_chdir+0x73>
+8010610c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801054c0 <sys_exec>:
+80106110 <sys_exec>:
 
 int
 sys_exec(void)
 {
-801054c0:	f3 0f 1e fb          	endbr32 
-801054c4:	55                   	push   %ebp
-801054c5:	89 e5                	mov    %esp,%ebp
-801054c7:	57                   	push   %edi
-801054c8:	56                   	push   %esi
+80106110:	f3 0f 1e fb          	endbr32 
+80106114:	55                   	push   %ebp
+80106115:	89 e5                	mov    %esp,%ebp
+80106117:	57                   	push   %edi
+80106118:	56                   	push   %esi
   char *path, *argv[MAXARG];
   int i;
   uint uargv, uarg;
 
   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-801054c9:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
+80106119:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
 {
-801054cf:	53                   	push   %ebx
-801054d0:	81 ec a4 00 00 00    	sub    $0xa4,%esp
+8010611f:	53                   	push   %ebx
+80106120:	81 ec a4 00 00 00    	sub    $0xa4,%esp
   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-801054d6:	50                   	push   %eax
-801054d7:	6a 00                	push   $0x0
-801054d9:	e8 22 f5 ff ff       	call   80104a00 <argstr>
-801054de:	83 c4 10             	add    $0x10,%esp
-801054e1:	85 c0                	test   %eax,%eax
-801054e3:	0f 88 8b 00 00 00    	js     80105574 <sys_exec+0xb4>
-801054e9:	83 ec 08             	sub    $0x8,%esp
-801054ec:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
-801054f2:	50                   	push   %eax
-801054f3:	6a 01                	push   $0x1
-801054f5:	e8 56 f4 ff ff       	call   80104950 <argint>
-801054fa:	83 c4 10             	add    $0x10,%esp
-801054fd:	85 c0                	test   %eax,%eax
-801054ff:	78 73                	js     80105574 <sys_exec+0xb4>
+80106126:	50                   	push   %eax
+80106127:	6a 00                	push   $0x0
+80106129:	e8 22 f5 ff ff       	call   80105650 <argstr>
+8010612e:	83 c4 10             	add    $0x10,%esp
+80106131:	85 c0                	test   %eax,%eax
+80106133:	0f 88 8b 00 00 00    	js     801061c4 <sys_exec+0xb4>
+80106139:	83 ec 08             	sub    $0x8,%esp
+8010613c:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
+80106142:	50                   	push   %eax
+80106143:	6a 01                	push   $0x1
+80106145:	e8 56 f4 ff ff       	call   801055a0 <argint>
+8010614a:	83 c4 10             	add    $0x10,%esp
+8010614d:	85 c0                	test   %eax,%eax
+8010614f:	78 73                	js     801061c4 <sys_exec+0xb4>
     return -1;
   }
   memset(argv, 0, sizeof(argv));
-80105501:	83 ec 04             	sub    $0x4,%esp
-80105504:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+80106151:	83 ec 04             	sub    $0x4,%esp
+80106154:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
   for(i=0;; i++){
-8010550a:	31 db                	xor    %ebx,%ebx
+8010615a:	31 db                	xor    %ebx,%ebx
   memset(argv, 0, sizeof(argv));
-8010550c:	68 80 00 00 00       	push   $0x80
-80105511:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
-80105517:	6a 00                	push   $0x0
-80105519:	50                   	push   %eax
-8010551a:	e8 51 f1 ff ff       	call   80104670 <memset>
-8010551f:	83 c4 10             	add    $0x10,%esp
-80105522:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010615c:	68 80 00 00 00       	push   $0x80
+80106161:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
+80106167:	6a 00                	push   $0x0
+80106169:	50                   	push   %eax
+8010616a:	e8 51 f1 ff ff       	call   801052c0 <memset>
+8010616f:	83 c4 10             	add    $0x10,%esp
+80106172:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(i >= NELEM(argv))
       return -1;
     if(fetchint(uargv+4*i, (int*)&uarg) < 0)
-80105528:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
-8010552e:	8d 34 9d 00 00 00 00 	lea    0x0(,%ebx,4),%esi
-80105535:	83 ec 08             	sub    $0x8,%esp
-80105538:	57                   	push   %edi
-80105539:	01 f0                	add    %esi,%eax
-8010553b:	50                   	push   %eax
-8010553c:	e8 6f f3 ff ff       	call   801048b0 <fetchint>
-80105541:	83 c4 10             	add    $0x10,%esp
-80105544:	85 c0                	test   %eax,%eax
-80105546:	78 2c                	js     80105574 <sys_exec+0xb4>
+80106178:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
+8010617e:	8d 34 9d 00 00 00 00 	lea    0x0(,%ebx,4),%esi
+80106185:	83 ec 08             	sub    $0x8,%esp
+80106188:	57                   	push   %edi
+80106189:	01 f0                	add    %esi,%eax
+8010618b:	50                   	push   %eax
+8010618c:	e8 6f f3 ff ff       	call   80105500 <fetchint>
+80106191:	83 c4 10             	add    $0x10,%esp
+80106194:	85 c0                	test   %eax,%eax
+80106196:	78 2c                	js     801061c4 <sys_exec+0xb4>
       return -1;
     if(uarg == 0){
-80105548:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
-8010554e:	85 c0                	test   %eax,%eax
-80105550:	74 36                	je     80105588 <sys_exec+0xc8>
+80106198:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
+8010619e:	85 c0                	test   %eax,%eax
+801061a0:	74 36                	je     801061d8 <sys_exec+0xc8>
       argv[i] = 0;
       break;
     }
     if(fetchstr(uarg, &argv[i]) < 0)
-80105552:	8d 8d 68 ff ff ff    	lea    -0x98(%ebp),%ecx
-80105558:	83 ec 08             	sub    $0x8,%esp
-8010555b:	8d 14 31             	lea    (%ecx,%esi,1),%edx
-8010555e:	52                   	push   %edx
-8010555f:	50                   	push   %eax
-80105560:	e8 8b f3 ff ff       	call   801048f0 <fetchstr>
-80105565:	83 c4 10             	add    $0x10,%esp
-80105568:	85 c0                	test   %eax,%eax
-8010556a:	78 08                	js     80105574 <sys_exec+0xb4>
+801061a2:	8d 8d 68 ff ff ff    	lea    -0x98(%ebp),%ecx
+801061a8:	83 ec 08             	sub    $0x8,%esp
+801061ab:	8d 14 31             	lea    (%ecx,%esi,1),%edx
+801061ae:	52                   	push   %edx
+801061af:	50                   	push   %eax
+801061b0:	e8 8b f3 ff ff       	call   80105540 <fetchstr>
+801061b5:	83 c4 10             	add    $0x10,%esp
+801061b8:	85 c0                	test   %eax,%eax
+801061ba:	78 08                	js     801061c4 <sys_exec+0xb4>
   for(i=0;; i++){
-8010556c:	83 c3 01             	add    $0x1,%ebx
+801061bc:	83 c3 01             	add    $0x1,%ebx
     if(i >= NELEM(argv))
-8010556f:	83 fb 20             	cmp    $0x20,%ebx
-80105572:	75 b4                	jne    80105528 <sys_exec+0x68>
+801061bf:	83 fb 20             	cmp    $0x20,%ebx
+801061c2:	75 b4                	jne    80106178 <sys_exec+0x68>
       return -1;
   }
   return exec(path, argv);
 }
-80105574:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801061c4:	8d 65 f4             	lea    -0xc(%ebp),%esp
     return -1;
-80105577:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801061c7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-8010557c:	5b                   	pop    %ebx
-8010557d:	5e                   	pop    %esi
-8010557e:	5f                   	pop    %edi
-8010557f:	5d                   	pop    %ebp
-80105580:	c3                   	ret    
-80105581:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801061cc:	5b                   	pop    %ebx
+801061cd:	5e                   	pop    %esi
+801061ce:	5f                   	pop    %edi
+801061cf:	5d                   	pop    %ebp
+801061d0:	c3                   	ret    
+801061d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   return exec(path, argv);
-80105588:	83 ec 08             	sub    $0x8,%esp
-8010558b:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+801061d8:	83 ec 08             	sub    $0x8,%esp
+801061db:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
       argv[i] = 0;
-80105591:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
-80105598:	00 00 00 00 
+801061e1:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
+801061e8:	00 00 00 00 
   return exec(path, argv);
-8010559c:	50                   	push   %eax
-8010559d:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
-801055a3:	e8 d8 b4 ff ff       	call   80100a80 <exec>
-801055a8:	83 c4 10             	add    $0x10,%esp
-}
-801055ab:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801055ae:	5b                   	pop    %ebx
-801055af:	5e                   	pop    %esi
-801055b0:	5f                   	pop    %edi
-801055b1:	5d                   	pop    %ebp
-801055b2:	c3                   	ret    
-801055b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801055ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801061ec:	50                   	push   %eax
+801061ed:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
+801061f3:	e8 88 a8 ff ff       	call   80100a80 <exec>
+801061f8:	83 c4 10             	add    $0x10,%esp
+}
+801061fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801061fe:	5b                   	pop    %ebx
+801061ff:	5e                   	pop    %esi
+80106200:	5f                   	pop    %edi
+80106201:	5d                   	pop    %ebp
+80106202:	c3                   	ret    
+80106203:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010620a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801055c0 <sys_pipe>:
+80106210 <sys_pipe>:
 
 int
 sys_pipe(void)
 {
-801055c0:	f3 0f 1e fb          	endbr32 
-801055c4:	55                   	push   %ebp
-801055c5:	89 e5                	mov    %esp,%ebp
-801055c7:	57                   	push   %edi
-801055c8:	56                   	push   %esi
+80106210:	f3 0f 1e fb          	endbr32 
+80106214:	55                   	push   %ebp
+80106215:	89 e5                	mov    %esp,%ebp
+80106217:	57                   	push   %edi
+80106218:	56                   	push   %esi
   int *fd;
   struct file *rf, *wf;
   int fd0, fd1;
 
   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-801055c9:	8d 45 dc             	lea    -0x24(%ebp),%eax
+80106219:	8d 45 dc             	lea    -0x24(%ebp),%eax
 {
-801055cc:	53                   	push   %ebx
-801055cd:	83 ec 20             	sub    $0x20,%esp
+8010621c:	53                   	push   %ebx
+8010621d:	83 ec 20             	sub    $0x20,%esp
   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-801055d0:	6a 08                	push   $0x8
-801055d2:	50                   	push   %eax
-801055d3:	6a 00                	push   $0x0
-801055d5:	e8 c6 f3 ff ff       	call   801049a0 <argptr>
-801055da:	83 c4 10             	add    $0x10,%esp
-801055dd:	85 c0                	test   %eax,%eax
-801055df:	78 4e                	js     8010562f <sys_pipe+0x6f>
+80106220:	6a 08                	push   $0x8
+80106222:	50                   	push   %eax
+80106223:	6a 00                	push   $0x0
+80106225:	e8 c6 f3 ff ff       	call   801055f0 <argptr>
+8010622a:	83 c4 10             	add    $0x10,%esp
+8010622d:	85 c0                	test   %eax,%eax
+8010622f:	78 4e                	js     8010627f <sys_pipe+0x6f>
     return -1;
   if(pipealloc(&rf, &wf) < 0)
-801055e1:	83 ec 08             	sub    $0x8,%esp
-801055e4:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-801055e7:	50                   	push   %eax
-801055e8:	8d 45 e0             	lea    -0x20(%ebp),%eax
-801055eb:	50                   	push   %eax
-801055ec:	e8 ff dd ff ff       	call   801033f0 <pipealloc>
-801055f1:	83 c4 10             	add    $0x10,%esp
-801055f4:	85 c0                	test   %eax,%eax
-801055f6:	78 37                	js     8010562f <sys_pipe+0x6f>
+80106231:	83 ec 08             	sub    $0x8,%esp
+80106234:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80106237:	50                   	push   %eax
+80106238:	8d 45 e0             	lea    -0x20(%ebp),%eax
+8010623b:	50                   	push   %eax
+8010623c:	e8 1f d2 ff ff       	call   80103460 <pipealloc>
+80106241:	83 c4 10             	add    $0x10,%esp
+80106244:	85 c0                	test   %eax,%eax
+80106246:	78 37                	js     8010627f <sys_pipe+0x6f>
     return -1;
   fd0 = -1;
   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-801055f8:	8b 7d e0             	mov    -0x20(%ebp),%edi
+80106248:	8b 7d e0             	mov    -0x20(%ebp),%edi
   for(fd = 0; fd < NOFILE; fd++){
-801055fb:	31 db                	xor    %ebx,%ebx
+8010624b:	31 db                	xor    %ebx,%ebx
   struct proc *curproc = myproc();
-801055fd:	e8 5e e3 ff ff       	call   80103960 <myproc>
+8010624d:	e8 9e dd ff ff       	call   80103ff0 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-80105602:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106252:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(curproc->ofile[fd] == 0){
-80105608:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
-8010560c:	85 f6                	test   %esi,%esi
-8010560e:	74 30                	je     80105640 <sys_pipe+0x80>
+80106258:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
+8010625c:	85 f6                	test   %esi,%esi
+8010625e:	74 30                	je     80106290 <sys_pipe+0x80>
   for(fd = 0; fd < NOFILE; fd++){
-80105610:	83 c3 01             	add    $0x1,%ebx
-80105613:	83 fb 10             	cmp    $0x10,%ebx
-80105616:	75 f0                	jne    80105608 <sys_pipe+0x48>
+80106260:	83 c3 01             	add    $0x1,%ebx
+80106263:	83 fb 10             	cmp    $0x10,%ebx
+80106266:	75 f0                	jne    80106258 <sys_pipe+0x48>
     if(fd0 >= 0)
       myproc()->ofile[fd0] = 0;
     fileclose(rf);
-80105618:	83 ec 0c             	sub    $0xc,%esp
-8010561b:	ff 75 e0             	pushl  -0x20(%ebp)
-8010561e:	e8 9d b8 ff ff       	call   80100ec0 <fileclose>
+80106268:	83 ec 0c             	sub    $0xc,%esp
+8010626b:	ff 75 e0             	pushl  -0x20(%ebp)
+8010626e:	e8 4d ac ff ff       	call   80100ec0 <fileclose>
     fileclose(wf);
-80105623:	58                   	pop    %eax
-80105624:	ff 75 e4             	pushl  -0x1c(%ebp)
-80105627:	e8 94 b8 ff ff       	call   80100ec0 <fileclose>
-    return -1;
-8010562c:	83 c4 10             	add    $0x10,%esp
-8010562f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105634:	eb 5b                	jmp    80105691 <sys_pipe+0xd1>
-80105636:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010563d:	8d 76 00             	lea    0x0(%esi),%esi
+80106273:	58                   	pop    %eax
+80106274:	ff 75 e4             	pushl  -0x1c(%ebp)
+80106277:	e8 44 ac ff ff       	call   80100ec0 <fileclose>
+    return -1;
+8010627c:	83 c4 10             	add    $0x10,%esp
+8010627f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106284:	eb 5b                	jmp    801062e1 <sys_pipe+0xd1>
+80106286:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010628d:	8d 76 00             	lea    0x0(%esi),%esi
       curproc->ofile[fd] = f;
-80105640:	8d 73 08             	lea    0x8(%ebx),%esi
-80105643:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
+80106290:	8d 73 08             	lea    0x8(%ebx),%esi
+80106293:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-80105647:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80106297:	8b 7d e4             	mov    -0x1c(%ebp),%edi
   struct proc *curproc = myproc();
-8010564a:	e8 11 e3 ff ff       	call   80103960 <myproc>
+8010629a:	e8 51 dd ff ff       	call   80103ff0 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-8010564f:	31 d2                	xor    %edx,%edx
-80105651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010629f:	31 d2                	xor    %edx,%edx
+801062a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[fd] == 0){
-80105658:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
-8010565c:	85 c9                	test   %ecx,%ecx
-8010565e:	74 20                	je     80105680 <sys_pipe+0xc0>
+801062a8:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
+801062ac:	85 c9                	test   %ecx,%ecx
+801062ae:	74 20                	je     801062d0 <sys_pipe+0xc0>
   for(fd = 0; fd < NOFILE; fd++){
-80105660:	83 c2 01             	add    $0x1,%edx
-80105663:	83 fa 10             	cmp    $0x10,%edx
-80105666:	75 f0                	jne    80105658 <sys_pipe+0x98>
+801062b0:	83 c2 01             	add    $0x1,%edx
+801062b3:	83 fa 10             	cmp    $0x10,%edx
+801062b6:	75 f0                	jne    801062a8 <sys_pipe+0x98>
       myproc()->ofile[fd0] = 0;
-80105668:	e8 f3 e2 ff ff       	call   80103960 <myproc>
-8010566d:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
-80105674:	00 
-80105675:	eb a1                	jmp    80105618 <sys_pipe+0x58>
-80105677:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010567e:	66 90                	xchg   %ax,%ax
+801062b8:	e8 33 dd ff ff       	call   80103ff0 <myproc>
+801062bd:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
+801062c4:	00 
+801062c5:	eb a1                	jmp    80106268 <sys_pipe+0x58>
+801062c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801062ce:	66 90                	xchg   %ax,%ax
       curproc->ofile[fd] = f;
-80105680:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
+801062d0:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
   }
   fd[0] = fd0;
-80105684:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80105687:	89 18                	mov    %ebx,(%eax)
+801062d4:	8b 45 dc             	mov    -0x24(%ebp),%eax
+801062d7:	89 18                	mov    %ebx,(%eax)
   fd[1] = fd1;
-80105689:	8b 45 dc             	mov    -0x24(%ebp),%eax
-8010568c:	89 50 04             	mov    %edx,0x4(%eax)
+801062d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+801062dc:	89 50 04             	mov    %edx,0x4(%eax)
   return 0;
-8010568f:	31 c0                	xor    %eax,%eax
+801062df:	31 c0                	xor    %eax,%eax
 }
-80105691:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105694:	5b                   	pop    %ebx
-80105695:	5e                   	pop    %esi
-80105696:	5f                   	pop    %edi
-80105697:	5d                   	pop    %ebp
-80105698:	c3                   	ret    
-80105699:	66 90                	xchg   %ax,%ax
-8010569b:	66 90                	xchg   %ax,%ax
-8010569d:	66 90                	xchg   %ax,%ax
-8010569f:	90                   	nop
+801062e1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801062e4:	5b                   	pop    %ebx
+801062e5:	5e                   	pop    %esi
+801062e6:	5f                   	pop    %edi
+801062e7:	5d                   	pop    %ebp
+801062e8:	c3                   	ret    
+801062e9:	66 90                	xchg   %ax,%ax
+801062eb:	66 90                	xchg   %ax,%ax
+801062ed:	66 90                	xchg   %ax,%ax
+801062ef:	90                   	nop
 
-801056a0 <sys_fork>:
+801062f0 <sys_fork>:
 #include "mmu.h"
 #include "proc.h"
 
 int
 sys_fork(void)
 {
-801056a0:	f3 0f 1e fb          	endbr32 
+801062f0:	f3 0f 1e fb          	endbr32 
   return fork();
-801056a4:	e9 67 e4 ff ff       	jmp    80103b10 <fork>
-801056a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801062f4:	e9 87 df ff ff       	jmp    80104280 <fork>
+801062f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801056b0 <sys_exit>:
+80106300 <sys_exit>:
 }
 
 int
 sys_exit(void)
 {
-801056b0:	f3 0f 1e fb          	endbr32 
-801056b4:	55                   	push   %ebp
-801056b5:	89 e5                	mov    %esp,%ebp
-801056b7:	83 ec 08             	sub    $0x8,%esp
+80106300:	f3 0f 1e fb          	endbr32 
+80106304:	55                   	push   %ebp
+80106305:	89 e5                	mov    %esp,%ebp
+80106307:	83 ec 08             	sub    $0x8,%esp
   exit();
-801056ba:	e8 d1 e6 ff ff       	call   80103d90 <exit>
+8010630a:	e8 f1 e4 ff ff       	call   80104800 <exit>
   return 0;  // not reached
 }
-801056bf:	31 c0                	xor    %eax,%eax
-801056c1:	c9                   	leave  
-801056c2:	c3                   	ret    
-801056c3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801056ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010630f:	31 c0                	xor    %eax,%eax
+80106311:	c9                   	leave  
+80106312:	c3                   	ret    
+80106313:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010631a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801056d0 <sys_wait>:
+80106320 <sys_wait>:
 
 int
 sys_wait(void)
 {
-801056d0:	f3 0f 1e fb          	endbr32 
+80106320:	f3 0f 1e fb          	endbr32 
   return wait();
-801056d4:	e9 07 e9 ff ff       	jmp    80103fe0 <wait>
-801056d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106324:	e9 27 e7 ff ff       	jmp    80104a50 <wait>
+80106329:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801056e0 <sys_kill>:
+80106330 <sys_kill>:
 }
 
 int
 sys_kill(void)
 {
-801056e0:	f3 0f 1e fb          	endbr32 
-801056e4:	55                   	push   %ebp
-801056e5:	89 e5                	mov    %esp,%ebp
-801056e7:	83 ec 20             	sub    $0x20,%esp
+80106330:	f3 0f 1e fb          	endbr32 
+80106334:	55                   	push   %ebp
+80106335:	89 e5                	mov    %esp,%ebp
+80106337:	83 ec 20             	sub    $0x20,%esp
   int pid;
 
   if(argint(0, &pid) < 0)
-801056ea:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801056ed:	50                   	push   %eax
-801056ee:	6a 00                	push   $0x0
-801056f0:	e8 5b f2 ff ff       	call   80104950 <argint>
-801056f5:	83 c4 10             	add    $0x10,%esp
-801056f8:	85 c0                	test   %eax,%eax
-801056fa:	78 14                	js     80105710 <sys_kill+0x30>
+8010633a:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010633d:	50                   	push   %eax
+8010633e:	6a 00                	push   $0x0
+80106340:	e8 5b f2 ff ff       	call   801055a0 <argint>
+80106345:	83 c4 10             	add    $0x10,%esp
+80106348:	85 c0                	test   %eax,%eax
+8010634a:	78 14                	js     80106360 <sys_kill+0x30>
     return -1;
   return kill(pid);
-801056fc:	83 ec 0c             	sub    $0xc,%esp
-801056ff:	ff 75 f4             	pushl  -0xc(%ebp)
-80105702:	e8 39 ea ff ff       	call   80104140 <kill>
-80105707:	83 c4 10             	add    $0x10,%esp
-}
-8010570a:	c9                   	leave  
-8010570b:	c3                   	ret    
-8010570c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105710:	c9                   	leave  
-    return -1;
-80105711:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80105716:	c3                   	ret    
-80105717:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010571e:	66 90                	xchg   %ax,%ax
+8010634c:	83 ec 0c             	sub    $0xc,%esp
+8010634f:	ff 75 f4             	pushl  -0xc(%ebp)
+80106352:	e8 39 ea ff ff       	call   80104d90 <kill>
+80106357:	83 c4 10             	add    $0x10,%esp
+}
+8010635a:	c9                   	leave  
+8010635b:	c3                   	ret    
+8010635c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106360:	c9                   	leave  
+    return -1;
+80106361:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106366:	c3                   	ret    
+80106367:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010636e:	66 90                	xchg   %ax,%ax
 
-80105720 <sys_getpid>:
+80106370 <sys_getpid>:
 
 int
 sys_getpid(void)
 {
-80105720:	f3 0f 1e fb          	endbr32 
-80105724:	55                   	push   %ebp
-80105725:	89 e5                	mov    %esp,%ebp
-80105727:	83 ec 08             	sub    $0x8,%esp
+80106370:	f3 0f 1e fb          	endbr32 
+80106374:	55                   	push   %ebp
+80106375:	89 e5                	mov    %esp,%ebp
+80106377:	83 ec 08             	sub    $0x8,%esp
   return myproc()->pid;
-8010572a:	e8 31 e2 ff ff       	call   80103960 <myproc>
-8010572f:	8b 40 10             	mov    0x10(%eax),%eax
+8010637a:	e8 71 dc ff ff       	call   80103ff0 <myproc>
+8010637f:	8b 40 10             	mov    0x10(%eax),%eax
 }
-80105732:	c9                   	leave  
-80105733:	c3                   	ret    
-80105734:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010573b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010573f:	90                   	nop
+80106382:	c9                   	leave  
+80106383:	c3                   	ret    
+80106384:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010638b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010638f:	90                   	nop
 
-80105740 <sys_sbrk>:
+80106390 <sys_sbrk>:
 
 int
 sys_sbrk(void)
 {
-80105740:	f3 0f 1e fb          	endbr32 
-80105744:	55                   	push   %ebp
-80105745:	89 e5                	mov    %esp,%ebp
-80105747:	53                   	push   %ebx
+80106390:	f3 0f 1e fb          	endbr32 
+80106394:	55                   	push   %ebp
+80106395:	89 e5                	mov    %esp,%ebp
+80106397:	53                   	push   %ebx
   int addr;
   int n;
 
   if(argint(0, &n) < 0)
-80105748:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80106398:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-8010574b:	83 ec 1c             	sub    $0x1c,%esp
+8010639b:	83 ec 1c             	sub    $0x1c,%esp
   if(argint(0, &n) < 0)
-8010574e:	50                   	push   %eax
-8010574f:	6a 00                	push   $0x0
-80105751:	e8 fa f1 ff ff       	call   80104950 <argint>
-80105756:	83 c4 10             	add    $0x10,%esp
-80105759:	85 c0                	test   %eax,%eax
-8010575b:	78 23                	js     80105780 <sys_sbrk+0x40>
+8010639e:	50                   	push   %eax
+8010639f:	6a 00                	push   $0x0
+801063a1:	e8 fa f1 ff ff       	call   801055a0 <argint>
+801063a6:	83 c4 10             	add    $0x10,%esp
+801063a9:	85 c0                	test   %eax,%eax
+801063ab:	78 23                	js     801063d0 <sys_sbrk+0x40>
     return -1;
   addr = myproc()->sz;
-8010575d:	e8 fe e1 ff ff       	call   80103960 <myproc>
+801063ad:	e8 3e dc ff ff       	call   80103ff0 <myproc>
   if(growproc(n) < 0)
-80105762:	83 ec 0c             	sub    $0xc,%esp
+801063b2:	83 ec 0c             	sub    $0xc,%esp
   addr = myproc()->sz;
-80105765:	8b 18                	mov    (%eax),%ebx
+801063b5:	8b 18                	mov    (%eax),%ebx
   if(growproc(n) < 0)
-80105767:	ff 75 f4             	pushl  -0xc(%ebp)
-8010576a:	e8 21 e3 ff ff       	call   80103a90 <growproc>
-8010576f:	83 c4 10             	add    $0x10,%esp
-80105772:	85 c0                	test   %eax,%eax
-80105774:	78 0a                	js     80105780 <sys_sbrk+0x40>
+801063b7:	ff 75 f4             	pushl  -0xc(%ebp)
+801063ba:	e8 41 de ff ff       	call   80104200 <growproc>
+801063bf:	83 c4 10             	add    $0x10,%esp
+801063c2:	85 c0                	test   %eax,%eax
+801063c4:	78 0a                	js     801063d0 <sys_sbrk+0x40>
     return -1;
   return addr;
 }
-80105776:	89 d8                	mov    %ebx,%eax
-80105778:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010577b:	c9                   	leave  
-8010577c:	c3                   	ret    
-8010577d:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-80105780:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80105785:	eb ef                	jmp    80105776 <sys_sbrk+0x36>
-80105787:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010578e:	66 90                	xchg   %ax,%ax
+801063c6:	89 d8                	mov    %ebx,%eax
+801063c8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801063cb:	c9                   	leave  
+801063cc:	c3                   	ret    
+801063cd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+801063d0:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+801063d5:	eb ef                	jmp    801063c6 <sys_sbrk+0x36>
+801063d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801063de:	66 90                	xchg   %ax,%ax
 
-80105790 <sys_sleep>:
+801063e0 <sys_sleep>:
 
 int
 sys_sleep(void)
 {
-80105790:	f3 0f 1e fb          	endbr32 
-80105794:	55                   	push   %ebp
-80105795:	89 e5                	mov    %esp,%ebp
-80105797:	53                   	push   %ebx
+801063e0:	f3 0f 1e fb          	endbr32 
+801063e4:	55                   	push   %ebp
+801063e5:	89 e5                	mov    %esp,%ebp
+801063e7:	53                   	push   %ebx
   int n;
   uint ticks0;
 
   if(argint(0, &n) < 0)
-80105798:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801063e8:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-8010579b:	83 ec 1c             	sub    $0x1c,%esp
+801063eb:	83 ec 1c             	sub    $0x1c,%esp
   if(argint(0, &n) < 0)
-8010579e:	50                   	push   %eax
-8010579f:	6a 00                	push   $0x0
-801057a1:	e8 aa f1 ff ff       	call   80104950 <argint>
-801057a6:	83 c4 10             	add    $0x10,%esp
-801057a9:	85 c0                	test   %eax,%eax
-801057ab:	0f 88 86 00 00 00    	js     80105837 <sys_sleep+0xa7>
+801063ee:	50                   	push   %eax
+801063ef:	6a 00                	push   $0x0
+801063f1:	e8 aa f1 ff ff       	call   801055a0 <argint>
+801063f6:	83 c4 10             	add    $0x10,%esp
+801063f9:	85 c0                	test   %eax,%eax
+801063fb:	0f 88 86 00 00 00    	js     80106487 <sys_sleep+0xa7>
     return -1;
   acquire(&tickslock);
-801057b1:	83 ec 0c             	sub    $0xc,%esp
-801057b4:	68 60 4c 11 80       	push   $0x80114c60
-801057b9:	e8 a2 ed ff ff       	call   80104560 <acquire>
+80106401:	83 ec 0c             	sub    $0xc,%esp
+80106404:	68 60 5b 11 80       	push   $0x80115b60
+80106409:	e8 a2 ed ff ff       	call   801051b0 <acquire>
   ticks0 = ticks;
   while(ticks - ticks0 < n){
-801057be:	8b 55 f4             	mov    -0xc(%ebp),%edx
+8010640e:	8b 55 f4             	mov    -0xc(%ebp),%edx
   ticks0 = ticks;
-801057c1:	8b 1d a0 54 11 80    	mov    0x801154a0,%ebx
+80106411:	8b 1d a0 63 11 80    	mov    0x801163a0,%ebx
   while(ticks - ticks0 < n){
-801057c7:	83 c4 10             	add    $0x10,%esp
-801057ca:	85 d2                	test   %edx,%edx
-801057cc:	75 23                	jne    801057f1 <sys_sleep+0x61>
-801057ce:	eb 50                	jmp    80105820 <sys_sleep+0x90>
+80106417:	83 c4 10             	add    $0x10,%esp
+8010641a:	85 d2                	test   %edx,%edx
+8010641c:	75 23                	jne    80106441 <sys_sleep+0x61>
+8010641e:	eb 50                	jmp    80106470 <sys_sleep+0x90>
     if(myproc()->killed){
       release(&tickslock);
       return -1;
     }
     sleep(&ticks, &tickslock);
-801057d0:	83 ec 08             	sub    $0x8,%esp
-801057d3:	68 60 4c 11 80       	push   $0x80114c60
-801057d8:	68 a0 54 11 80       	push   $0x801154a0
-801057dd:	e8 3e e7 ff ff       	call   80103f20 <sleep>
+80106420:	83 ec 08             	sub    $0x8,%esp
+80106423:	68 60 5b 11 80       	push   $0x80115b60
+80106428:	68 a0 63 11 80       	push   $0x801163a0
+8010642d:	e8 5e e5 ff ff       	call   80104990 <sleep>
   while(ticks - ticks0 < n){
-801057e2:	a1 a0 54 11 80       	mov    0x801154a0,%eax
-801057e7:	83 c4 10             	add    $0x10,%esp
-801057ea:	29 d8                	sub    %ebx,%eax
-801057ec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-801057ef:	73 2f                	jae    80105820 <sys_sleep+0x90>
+80106432:	a1 a0 63 11 80       	mov    0x801163a0,%eax
+80106437:	83 c4 10             	add    $0x10,%esp
+8010643a:	29 d8                	sub    %ebx,%eax
+8010643c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+8010643f:	73 2f                	jae    80106470 <sys_sleep+0x90>
     if(myproc()->killed){
-801057f1:	e8 6a e1 ff ff       	call   80103960 <myproc>
-801057f6:	8b 40 24             	mov    0x24(%eax),%eax
-801057f9:	85 c0                	test   %eax,%eax
-801057fb:	74 d3                	je     801057d0 <sys_sleep+0x40>
+80106441:	e8 aa db ff ff       	call   80103ff0 <myproc>
+80106446:	8b 40 24             	mov    0x24(%eax),%eax
+80106449:	85 c0                	test   %eax,%eax
+8010644b:	74 d3                	je     80106420 <sys_sleep+0x40>
       release(&tickslock);
-801057fd:	83 ec 0c             	sub    $0xc,%esp
-80105800:	68 60 4c 11 80       	push   $0x80114c60
-80105805:	e8 16 ee ff ff       	call   80104620 <release>
+8010644d:	83 ec 0c             	sub    $0xc,%esp
+80106450:	68 60 5b 11 80       	push   $0x80115b60
+80106455:	e8 16 ee ff ff       	call   80105270 <release>
   }
   release(&tickslock);
   return 0;
 }
-8010580a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010645a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
       return -1;
-8010580d:	83 c4 10             	add    $0x10,%esp
-80105810:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010645d:	83 c4 10             	add    $0x10,%esp
+80106460:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105815:	c9                   	leave  
-80105816:	c3                   	ret    
-80105817:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010581e:	66 90                	xchg   %ax,%ax
+80106465:	c9                   	leave  
+80106466:	c3                   	ret    
+80106467:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010646e:	66 90                	xchg   %ax,%ax
   release(&tickslock);
-80105820:	83 ec 0c             	sub    $0xc,%esp
-80105823:	68 60 4c 11 80       	push   $0x80114c60
-80105828:	e8 f3 ed ff ff       	call   80104620 <release>
+80106470:	83 ec 0c             	sub    $0xc,%esp
+80106473:	68 60 5b 11 80       	push   $0x80115b60
+80106478:	e8 f3 ed ff ff       	call   80105270 <release>
   return 0;
-8010582d:	83 c4 10             	add    $0x10,%esp
-80105830:	31 c0                	xor    %eax,%eax
+8010647d:	83 c4 10             	add    $0x10,%esp
+80106480:	31 c0                	xor    %eax,%eax
 }
-80105832:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80105835:	c9                   	leave  
-80105836:	c3                   	ret    
-    return -1;
-80105837:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010583c:	eb f4                	jmp    80105832 <sys_sleep+0xa2>
-8010583e:	66 90                	xchg   %ax,%ax
+80106482:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80106485:	c9                   	leave  
+80106486:	c3                   	ret    
+    return -1;
+80106487:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010648c:	eb f4                	jmp    80106482 <sys_sleep+0xa2>
+8010648e:	66 90                	xchg   %ax,%ax
 
-80105840 <sys_uptime>:
+80106490 <sys_uptime>:
 
 // return how many clock tick interrupts have occurred
 // since start.
 int
 sys_uptime(void)
 {
-80105840:	f3 0f 1e fb          	endbr32 
-80105844:	55                   	push   %ebp
-80105845:	89 e5                	mov    %esp,%ebp
-80105847:	53                   	push   %ebx
-80105848:	83 ec 10             	sub    $0x10,%esp
+80106490:	f3 0f 1e fb          	endbr32 
+80106494:	55                   	push   %ebp
+80106495:	89 e5                	mov    %esp,%ebp
+80106497:	53                   	push   %ebx
+80106498:	83 ec 10             	sub    $0x10,%esp
   uint xticks;
 
   acquire(&tickslock);
-8010584b:	68 60 4c 11 80       	push   $0x80114c60
-80105850:	e8 0b ed ff ff       	call   80104560 <acquire>
+8010649b:	68 60 5b 11 80       	push   $0x80115b60
+801064a0:	e8 0b ed ff ff       	call   801051b0 <acquire>
   xticks = ticks;
-80105855:	8b 1d a0 54 11 80    	mov    0x801154a0,%ebx
+801064a5:	8b 1d a0 63 11 80    	mov    0x801163a0,%ebx
   release(&tickslock);
-8010585b:	c7 04 24 60 4c 11 80 	movl   $0x80114c60,(%esp)
-80105862:	e8 b9 ed ff ff       	call   80104620 <release>
+801064ab:	c7 04 24 60 5b 11 80 	movl   $0x80115b60,(%esp)
+801064b2:	e8 b9 ed ff ff       	call   80105270 <release>
   return xticks;
 }
-80105867:	89 d8                	mov    %ebx,%eax
-80105869:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010586c:	c9                   	leave  
-8010586d:	c3                   	ret    
-
-8010586e <alltraps>:
-
-  # vectors.S sends all traps here.
-.globl alltraps
-alltraps:
-  # Build trap frame.
-  pushl %ds
-8010586e:	1e                   	push   %ds
-  pushl %es
-8010586f:	06                   	push   %es
-  pushl %fs
-80105870:	0f a0                	push   %fs
-  pushl %gs
-80105872:	0f a8                	push   %gs
-  pushal
-80105874:	60                   	pusha  
-  
-  # Set up data segments.
-  movw $(SEG_KDATA<<3), %ax
-80105875:	66 b8 10 00          	mov    $0x10,%ax
-  movw %ax, %ds
-80105879:	8e d8                	mov    %eax,%ds
-  movw %ax, %es
-8010587b:	8e c0                	mov    %eax,%es
-
-  # Call trap(tf), where tf=%esp
-  pushl %esp
-8010587d:	54                   	push   %esp
-  call trap
-8010587e:	e8 cd 00 00 00       	call   80105950 <trap>
-  addl $4, %esp
-80105883:	83 c4 04             	add    $0x4,%esp
-
-80105886 <trapret>:
-
-  # Return falls through to trapret...
-.globl trapret
-trapret:
-  popal
-80105886:	61                   	popa   
-  popl %gs
-80105887:	0f a9                	pop    %gs
-  popl %fs
-80105889:	0f a1                	pop    %fs
-  popl %es
-8010588b:	07                   	pop    %es
-  popl %ds
-8010588c:	1f                   	pop    %ds
-  addl $0x8, %esp  # trapno and errcode
-8010588d:	83 c4 08             	add    $0x8,%esp
-  iret
-80105890:	cf                   	iret   
-80105891:	66 90                	xchg   %ax,%ax
-80105893:	66 90                	xchg   %ax,%ax
-80105895:	66 90                	xchg   %ax,%ax
-80105897:	66 90                	xchg   %ax,%ax
-80105899:	66 90                	xchg   %ax,%ax
-8010589b:	66 90                	xchg   %ax,%ax
-8010589d:	66 90                	xchg   %ax,%ax
-8010589f:	90                   	nop
+801064b7:	89 d8                	mov    %ebx,%eax
+801064b9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801064bc:	c9                   	leave  
+801064bd:	c3                   	ret    
+
+801064be <alltraps>:
+801064be:	1e                   	push   %ds
+801064bf:	06                   	push   %es
+801064c0:	0f a0                	push   %fs
+801064c2:	0f a8                	push   %gs
+801064c4:	60                   	pusha  
+801064c5:	66 b8 10 00          	mov    $0x10,%ax
+801064c9:	8e d8                	mov    %eax,%ds
+801064cb:	8e c0                	mov    %eax,%es
+801064cd:	54                   	push   %esp
+801064ce:	e8 7d 01 00 00       	call   80106650 <trap>
+801064d3:	83 c4 04             	add    $0x4,%esp
+
+801064d6 <trapret>:
+801064d6:	61                   	popa   
+801064d7:	0f a9                	pop    %gs
+801064d9:	0f a1                	pop    %fs
+801064db:	07                   	pop    %es
+801064dc:	1f                   	pop    %ds
+801064dd:	83 c4 08             	add    $0x8,%esp
+801064e0:	cf                   	iret   
+801064e1:	66 90                	xchg   %ax,%ax
+801064e3:	66 90                	xchg   %ax,%ax
+801064e5:	66 90                	xchg   %ax,%ax
+801064e7:	66 90                	xchg   %ax,%ax
+801064e9:	66 90                	xchg   %ax,%ax
+801064eb:	66 90                	xchg   %ax,%ax
+801064ed:	66 90                	xchg   %ax,%ax
+801064ef:	90                   	nop
 
-801058a0 <tvinit>:
+801064f0 <handlePageFault>:
 struct spinlock tickslock;
 uint ticks;
 
+struct spinlock swap_in_lock;
+
+void handlePageFault(){
+801064f0:	f3 0f 1e fb          	endbr32 
+801064f4:	55                   	push   %ebp
+801064f5:	89 e5                	mov    %esp,%ebp
+801064f7:	56                   	push   %esi
+801064f8:	53                   	push   %ebx
+
+static inline uint
+rcr2(void)
+{
+  uint val;
+  asm volatile("movl %%cr2,%0" : "=r" (val));
+801064f9:	0f 20 d6             	mov    %cr2,%esi
+  int addr=rcr2();
+  struct proc *p=myproc();
+801064fc:	e8 ef da ff ff       	call   80103ff0 <myproc>
+  acquire(&swap_in_lock);
+80106501:	83 ec 0c             	sub    $0xc,%esp
+80106504:	68 20 5b 11 80       	push   $0x80115b20
+  struct proc *p=myproc();
+80106509:	89 c3                	mov    %eax,%ebx
+  acquire(&swap_in_lock);
+8010650b:	e8 a0 ec ff ff       	call   801051b0 <acquire>
+  sleep(p,&swap_in_lock);
+80106510:	5a                   	pop    %edx
+80106511:	59                   	pop    %ecx
+80106512:	68 20 5b 11 80       	push   $0x80115b20
+80106517:	53                   	push   %ebx
+80106518:	e8 73 e4 ff ff       	call   80104990 <sleep>
+  pde_t *pde = &(p->pgdir)[PDX(addr)];
+  pte_t *pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+8010651d:	8b 43 04             	mov    0x4(%ebx),%eax
+  pde_t *pde = &(p->pgdir)[PDX(addr)];
+80106520:	89 f2                	mov    %esi,%edx
+
+  if((pgtab[PTX(addr)])&0x080){
+80106522:	83 c4 10             	add    $0x10,%esp
+  pde_t *pde = &(p->pgdir)[PDX(addr)];
+80106525:	c1 ea 16             	shr    $0x16,%edx
+  pte_t *pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+80106528:	8b 04 90             	mov    (%eax,%edx,4),%eax
+  if((pgtab[PTX(addr)])&0x080){
+8010652b:	89 f2                	mov    %esi,%edx
+8010652d:	c1 ea 0c             	shr    $0xc,%edx
+  pte_t *pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+80106530:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+  if((pgtab[PTX(addr)])&0x080){
+80106535:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
+8010653b:	f6 84 90 00 00 00 80 	testb  $0x80,-0x80000000(%eax,%edx,4)
+80106542:	80 
+80106543:	74 23                	je     80106568 <handlePageFault+0x78>
+    //This means that the page was swapped out.
+    //virtual address for page
+    p->addr = addr;
+    rpush2(p);
+80106545:	83 ec 0c             	sub    $0xc,%esp
+    p->addr = addr;
+80106548:	89 73 7c             	mov    %esi,0x7c(%ebx)
+    rpush2(p);
+8010654b:	53                   	push   %ebx
+8010654c:	e8 ff d5 ff ff       	call   80103b50 <rpush2>
+    if(!swap_in_process_exists){
+80106551:	a1 b8 b5 10 80       	mov    0x8010b5b8,%eax
+80106556:	83 c4 10             	add    $0x10,%esp
+80106559:	85 c0                	test   %eax,%eax
+8010655b:	74 1b                	je     80106578 <handlePageFault+0x88>
+      create_kernel_process("swap_in_process", &swap_in_process_function);
+    }
+  } else {
+    exit();
+  }
+}
+8010655d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80106560:	5b                   	pop    %ebx
+80106561:	5e                   	pop    %esi
+80106562:	5d                   	pop    %ebp
+80106563:	c3                   	ret    
+80106564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106568:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010656b:	5b                   	pop    %ebx
+8010656c:	5e                   	pop    %esi
+8010656d:	5d                   	pop    %ebp
+    exit();
+8010656e:	e9 8d e2 ff ff       	jmp    80104800 <exit>
+80106573:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106577:	90                   	nop
+      swap_in_process_exists=1;
+80106578:	c7 05 b8 b5 10 80 01 	movl   $0x1,0x8010b5b8
+8010657f:	00 00 00 
+      create_kernel_process("swap_in_process", &swap_in_process_function);
+80106582:	83 ec 08             	sub    $0x8,%esp
+80106585:	68 b0 4b 10 80       	push   $0x80104bb0
+8010658a:	68 f9 84 10 80       	push   $0x801084f9
+8010658f:	e8 8c da ff ff       	call   80104020 <create_kernel_process>
+}
+80106594:	83 c4 10             	add    $0x10,%esp
+80106597:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010659a:	5b                   	pop    %ebx
+8010659b:	5e                   	pop    %esi
+8010659c:	5d                   	pop    %ebp
+8010659d:	c3                   	ret    
+8010659e:	66 90                	xchg   %ax,%ax
+
+801065a0 <tvinit>:
+
 void
 tvinit(void)
 {
-801058a0:	f3 0f 1e fb          	endbr32 
-801058a4:	55                   	push   %ebp
+801065a0:	f3 0f 1e fb          	endbr32 
+801065a4:	55                   	push   %ebp
   int i;
 
   for(i = 0; i < 256; i++)
-801058a5:	31 c0                	xor    %eax,%eax
+801065a5:	31 c0                	xor    %eax,%eax
 {
-801058a7:	89 e5                	mov    %esp,%ebp
-801058a9:	83 ec 08             	sub    $0x8,%esp
-801058ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801065a7:	89 e5                	mov    %esp,%ebp
+801065a9:	83 ec 08             	sub    $0x8,%esp
+801065ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
-801058b0:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
-801058b7:	c7 04 c5 a2 4c 11 80 	movl   $0x8e000008,-0x7feeb35e(,%eax,8)
-801058be:	08 00 00 8e 
-801058c2:	66 89 14 c5 a0 4c 11 	mov    %dx,-0x7feeb360(,%eax,8)
-801058c9:	80 
-801058ca:	c1 ea 10             	shr    $0x10,%edx
-801058cd:	66 89 14 c5 a6 4c 11 	mov    %dx,-0x7feeb35a(,%eax,8)
-801058d4:	80 
+801065b0:	8b 14 85 08 b0 10 80 	mov    -0x7fef4ff8(,%eax,4),%edx
+801065b7:	c7 04 c5 a2 5b 11 80 	movl   $0x8e000008,-0x7feea45e(,%eax,8)
+801065be:	08 00 00 8e 
+801065c2:	66 89 14 c5 a0 5b 11 	mov    %dx,-0x7feea460(,%eax,8)
+801065c9:	80 
+801065ca:	c1 ea 10             	shr    $0x10,%edx
+801065cd:	66 89 14 c5 a6 5b 11 	mov    %dx,-0x7feea45a(,%eax,8)
+801065d4:	80 
   for(i = 0; i < 256; i++)
-801058d5:	83 c0 01             	add    $0x1,%eax
-801058d8:	3d 00 01 00 00       	cmp    $0x100,%eax
-801058dd:	75 d1                	jne    801058b0 <tvinit+0x10>
+801065d5:	83 c0 01             	add    $0x1,%eax
+801065d8:	3d 00 01 00 00       	cmp    $0x100,%eax
+801065dd:	75 d1                	jne    801065b0 <tvinit+0x10>
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
 
   initlock(&tickslock, "time");
-801058df:	83 ec 08             	sub    $0x8,%esp
+801065df:	83 ec 08             	sub    $0x8,%esp
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-801058e2:	a1 08 a1 10 80       	mov    0x8010a108,%eax
-801058e7:	c7 05 a2 4e 11 80 08 	movl   $0xef000008,0x80114ea2
-801058ee:	00 00 ef 
+801065e2:	a1 08 b1 10 80       	mov    0x8010b108,%eax
+801065e7:	c7 05 a2 5d 11 80 08 	movl   $0xef000008,0x80115da2
+801065ee:	00 00 ef 
   initlock(&tickslock, "time");
-801058f1:	68 59 78 10 80       	push   $0x80107859
-801058f6:	68 60 4c 11 80       	push   $0x80114c60
+801065f1:	68 da 86 10 80       	push   $0x801086da
+801065f6:	68 60 5b 11 80       	push   $0x80115b60
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-801058fb:	66 a3 a0 4e 11 80    	mov    %ax,0x80114ea0
-80105901:	c1 e8 10             	shr    $0x10,%eax
-80105904:	66 a3 a6 4e 11 80    	mov    %ax,0x80114ea6
+801065fb:	66 a3 a0 5d 11 80    	mov    %ax,0x80115da0
+80106601:	c1 e8 10             	shr    $0x10,%eax
+80106604:	66 a3 a6 5d 11 80    	mov    %ax,0x80115da6
   initlock(&tickslock, "time");
-8010590a:	e8 d1 ea ff ff       	call   801043e0 <initlock>
+8010660a:	e8 21 ea ff ff       	call   80105030 <initlock>
 }
-8010590f:	83 c4 10             	add    $0x10,%esp
-80105912:	c9                   	leave  
-80105913:	c3                   	ret    
-80105914:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010591b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010591f:	90                   	nop
+8010660f:	83 c4 10             	add    $0x10,%esp
+80106612:	c9                   	leave  
+80106613:	c3                   	ret    
+80106614:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010661b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010661f:	90                   	nop
 
-80105920 <idtinit>:
+80106620 <idtinit>:
 
 void
 idtinit(void)
 {
-80105920:	f3 0f 1e fb          	endbr32 
-80105924:	55                   	push   %ebp
+80106620:	f3 0f 1e fb          	endbr32 
+80106624:	55                   	push   %ebp
   pd[0] = size-1;
-80105925:	b8 ff 07 00 00       	mov    $0x7ff,%eax
-8010592a:	89 e5                	mov    %esp,%ebp
-8010592c:	83 ec 10             	sub    $0x10,%esp
-8010592f:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+80106625:	b8 ff 07 00 00       	mov    $0x7ff,%eax
+8010662a:	89 e5                	mov    %esp,%ebp
+8010662c:	83 ec 10             	sub    $0x10,%esp
+8010662f:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
   pd[1] = (uint)p;
-80105933:	b8 a0 4c 11 80       	mov    $0x80114ca0,%eax
-80105938:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+80106633:	b8 a0 5b 11 80       	mov    $0x80115ba0,%eax
+80106638:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   pd[2] = (uint)p >> 16;
-8010593c:	c1 e8 10             	shr    $0x10,%eax
-8010593f:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
+8010663c:	c1 e8 10             	shr    $0x10,%eax
+8010663f:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
   asm volatile("lidt (%0)" : : "r" (pd));
-80105943:	8d 45 fa             	lea    -0x6(%ebp),%eax
-80105946:	0f 01 18             	lidtl  (%eax)
+80106643:	8d 45 fa             	lea    -0x6(%ebp),%eax
+80106646:	0f 01 18             	lidtl  (%eax)
   lidt(idt, sizeof(idt));
 }
-80105949:	c9                   	leave  
-8010594a:	c3                   	ret    
-8010594b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010594f:	90                   	nop
+80106649:	c9                   	leave  
+8010664a:	c3                   	ret    
+8010664b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010664f:	90                   	nop
 
-80105950 <trap>:
+80106650 <trap>:
 
 //PAGEBREAK: 41
 void
 trap(struct trapframe *tf)
 {
-80105950:	f3 0f 1e fb          	endbr32 
-80105954:	55                   	push   %ebp
-80105955:	89 e5                	mov    %esp,%ebp
-80105957:	57                   	push   %edi
-80105958:	56                   	push   %esi
-80105959:	53                   	push   %ebx
-8010595a:	83 ec 1c             	sub    $0x1c,%esp
-8010595d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80106650:	f3 0f 1e fb          	endbr32 
+80106654:	55                   	push   %ebp
+80106655:	89 e5                	mov    %esp,%ebp
+80106657:	57                   	push   %edi
+80106658:	56                   	push   %esi
+80106659:	53                   	push   %ebx
+8010665a:	83 ec 1c             	sub    $0x1c,%esp
+8010665d:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(tf->trapno == T_SYSCALL){
-80105960:	8b 43 30             	mov    0x30(%ebx),%eax
-80105963:	83 f8 40             	cmp    $0x40,%eax
-80105966:	0f 84 bc 01 00 00    	je     80105b28 <trap+0x1d8>
+80106660:	8b 43 30             	mov    0x30(%ebx),%eax
+80106663:	83 f8 40             	cmp    $0x40,%eax
+80106666:	0f 84 a4 01 00 00    	je     80106810 <trap+0x1c0>
     if(myproc()->killed)
       exit();
     return;
   }
 
   switch(tf->trapno){
-8010596c:	83 e8 20             	sub    $0x20,%eax
-8010596f:	83 f8 1f             	cmp    $0x1f,%eax
-80105972:	77 08                	ja     8010597c <trap+0x2c>
-80105974:	3e ff 24 85 00 79 10 	notrack jmp *-0x7fef8700(,%eax,4)
-8010597b:	80 
-    lapiceoi();
-    break;
-
+8010666c:	83 e8 0e             	sub    $0xe,%eax
+8010666f:	83 f8 31             	cmp    $0x31,%eax
+80106672:	77 08                	ja     8010667c <trap+0x2c>
+80106674:	3e ff 24 85 80 87 10 	notrack jmp *-0x7fef7880(,%eax,4)
+8010667b:	80 
+  case T_PGFLT:
+    handlePageFault();
+  break;
   //PAGEBREAK: 13
   default:
     if(myproc() == 0 || (tf->cs&3) == 0){
-8010597c:	e8 df df ff ff       	call   80103960 <myproc>
-80105981:	8b 7b 38             	mov    0x38(%ebx),%edi
-80105984:	85 c0                	test   %eax,%eax
-80105986:	0f 84 eb 01 00 00    	je     80105b77 <trap+0x227>
-8010598c:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
-80105990:	0f 84 e1 01 00 00    	je     80105b77 <trap+0x227>
-
-static inline uint
-rcr2(void)
-{
-  uint val;
+8010667c:	e8 6f d9 ff ff       	call   80103ff0 <myproc>
+80106681:	8b 7b 38             	mov    0x38(%ebx),%edi
+80106684:	85 c0                	test   %eax,%eax
+80106686:	0f 84 d3 01 00 00    	je     8010685f <trap+0x20f>
+8010668c:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
+80106690:	0f 84 c9 01 00 00    	je     8010685f <trap+0x20f>
   asm volatile("movl %%cr2,%0" : "=r" (val));
-80105996:	0f 20 d1             	mov    %cr2,%ecx
-80105999:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+80106696:	0f 20 d1             	mov    %cr2,%ecx
+80106699:	89 4d d8             	mov    %ecx,-0x28(%ebp)
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
               tf->trapno, cpuid(), tf->eip, rcr2());
       panic("trap");
     }
     // In user space, assume process misbehaved.
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-8010599c:	e8 9f df ff ff       	call   80103940 <cpuid>
-801059a1:	8b 73 30             	mov    0x30(%ebx),%esi
-801059a4:	89 45 dc             	mov    %eax,-0x24(%ebp)
-801059a7:	8b 43 34             	mov    0x34(%ebx),%eax
-801059aa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010669c:	e8 ef d5 ff ff       	call   80103c90 <cpuid>
+801066a1:	8b 73 30             	mov    0x30(%ebx),%esi
+801066a4:	89 45 dc             	mov    %eax,-0x24(%ebp)
+801066a7:	8b 43 34             	mov    0x34(%ebx),%eax
+801066aa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
             "eip 0x%x addr 0x%x--kill proc\n",
             myproc()->pid, myproc()->name, tf->trapno,
-801059ad:	e8 ae df ff ff       	call   80103960 <myproc>
-801059b2:	89 45 e0             	mov    %eax,-0x20(%ebp)
-801059b5:	e8 a6 df ff ff       	call   80103960 <myproc>
+801066ad:	e8 3e d9 ff ff       	call   80103ff0 <myproc>
+801066b2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801066b5:	e8 36 d9 ff ff       	call   80103ff0 <myproc>
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-801059ba:	8b 4d d8             	mov    -0x28(%ebp),%ecx
-801059bd:	8b 55 dc             	mov    -0x24(%ebp),%edx
-801059c0:	51                   	push   %ecx
-801059c1:	57                   	push   %edi
-801059c2:	52                   	push   %edx
-801059c3:	ff 75 e4             	pushl  -0x1c(%ebp)
-801059c6:	56                   	push   %esi
+801066ba:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+801066bd:	8b 55 dc             	mov    -0x24(%ebp),%edx
+801066c0:	51                   	push   %ecx
+801066c1:	57                   	push   %edi
+801066c2:	52                   	push   %edx
+801066c3:	ff 75 e4             	pushl  -0x1c(%ebp)
+801066c6:	56                   	push   %esi
             myproc()->pid, myproc()->name, tf->trapno,
-801059c7:	8b 75 e0             	mov    -0x20(%ebp),%esi
-801059ca:	83 c6 6c             	add    $0x6c,%esi
+801066c7:	8b 75 e0             	mov    -0x20(%ebp),%esi
+801066ca:	83 c6 6c             	add    $0x6c,%esi
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-801059cd:	56                   	push   %esi
-801059ce:	ff 70 10             	pushl  0x10(%eax)
-801059d1:	68 bc 78 10 80       	push   $0x801078bc
-801059d6:	e8 d5 ac ff ff       	call   801006b0 <cprintf>
+801066cd:	56                   	push   %esi
+801066ce:	ff 70 10             	pushl  0x10(%eax)
+801066d1:	68 3c 87 10 80       	push   $0x8010873c
+801066d6:	e8 d5 9f ff ff       	call   801006b0 <cprintf>
             tf->err, cpuid(), tf->eip, rcr2());
     myproc()->killed = 1;
-801059db:	83 c4 20             	add    $0x20,%esp
-801059de:	e8 7d df ff ff       	call   80103960 <myproc>
-801059e3:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+801066db:	83 c4 20             	add    $0x20,%esp
+801066de:	e8 0d d9 ff ff       	call   80103ff0 <myproc>
+801066e3:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
   }
 
   // Force process exit if it has been killed and is in user space.
   // (If it is still executing in the kernel, let it keep running
   // until it gets to the regular system call return.)
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-801059ea:	e8 71 df ff ff       	call   80103960 <myproc>
-801059ef:	85 c0                	test   %eax,%eax
-801059f1:	74 1d                	je     80105a10 <trap+0xc0>
-801059f3:	e8 68 df ff ff       	call   80103960 <myproc>
-801059f8:	8b 50 24             	mov    0x24(%eax),%edx
-801059fb:	85 d2                	test   %edx,%edx
-801059fd:	74 11                	je     80105a10 <trap+0xc0>
-801059ff:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-80105a03:	83 e0 03             	and    $0x3,%eax
-80105a06:	66 83 f8 03          	cmp    $0x3,%ax
-80105a0a:	0f 84 50 01 00 00    	je     80105b60 <trap+0x210>
-    exit();
-
-  // Force process to give up CPU on clock tick.
-  // If interrupts were on while locks held, would need to check nlock.
-  if(myproc() && myproc()->state == RUNNING &&
-80105a10:	e8 4b df ff ff       	call   80103960 <myproc>
-80105a15:	85 c0                	test   %eax,%eax
-80105a17:	74 0f                	je     80105a28 <trap+0xd8>
-80105a19:	e8 42 df ff ff       	call   80103960 <myproc>
-80105a1e:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
-80105a22:	0f 84 e8 00 00 00    	je     80105b10 <trap+0x1c0>
-     tf->trapno == T_IRQ0+IRQ_TIMER)
-    yield();
+801066ea:	e8 01 d9 ff ff       	call   80103ff0 <myproc>
+801066ef:	85 c0                	test   %eax,%eax
+801066f1:	74 1d                	je     80106710 <trap+0xc0>
+801066f3:	e8 f8 d8 ff ff       	call   80103ff0 <myproc>
+801066f8:	8b 50 24             	mov    0x24(%eax),%edx
+801066fb:	85 d2                	test   %edx,%edx
+801066fd:	74 11                	je     80106710 <trap+0xc0>
+801066ff:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+80106703:	83 e0 03             	and    $0x3,%eax
+80106706:	66 83 f8 03          	cmp    $0x3,%ax
+8010670a:	0f 84 38 01 00 00    	je     80106848 <trap+0x1f8>
+  // if(myproc() && myproc()->state == RUNNING &&
+  //    tf->trapno == T_IRQ0+IRQ_TIMER)
+  //   yield();
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105a28:	e8 33 df ff ff       	call   80103960 <myproc>
-80105a2d:	85 c0                	test   %eax,%eax
-80105a2f:	74 1d                	je     80105a4e <trap+0xfe>
-80105a31:	e8 2a df ff ff       	call   80103960 <myproc>
-80105a36:	8b 40 24             	mov    0x24(%eax),%eax
-80105a39:	85 c0                	test   %eax,%eax
-80105a3b:	74 11                	je     80105a4e <trap+0xfe>
-80105a3d:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-80105a41:	83 e0 03             	and    $0x3,%eax
-80105a44:	66 83 f8 03          	cmp    $0x3,%ax
-80105a48:	0f 84 03 01 00 00    	je     80105b51 <trap+0x201>
+80106710:	e8 db d8 ff ff       	call   80103ff0 <myproc>
+80106715:	85 c0                	test   %eax,%eax
+80106717:	74 1d                	je     80106736 <trap+0xe6>
+80106719:	e8 d2 d8 ff ff       	call   80103ff0 <myproc>
+8010671e:	8b 40 24             	mov    0x24(%eax),%eax
+80106721:	85 c0                	test   %eax,%eax
+80106723:	74 11                	je     80106736 <trap+0xe6>
+80106725:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+80106729:	83 e0 03             	and    $0x3,%eax
+8010672c:	66 83 f8 03          	cmp    $0x3,%ax
+80106730:	0f 84 03 01 00 00    	je     80106839 <trap+0x1e9>
     exit();
-}
-80105a4e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105a51:	5b                   	pop    %ebx
-80105a52:	5e                   	pop    %esi
-80105a53:	5f                   	pop    %edi
-80105a54:	5d                   	pop    %ebp
-80105a55:	c3                   	ret    
+80106736:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106739:	5b                   	pop    %ebx
+8010673a:	5e                   	pop    %esi
+8010673b:	5f                   	pop    %edi
+8010673c:	5d                   	pop    %ebp
+8010673d:	c3                   	ret    
     ideintr();
-80105a56:	e8 85 c7 ff ff       	call   801021e0 <ideintr>
+8010673e:	e8 9d ba ff ff       	call   801021e0 <ideintr>
     lapiceoi();
-80105a5b:	e8 60 ce ff ff       	call   801028c0 <lapiceoi>
+80106743:	e8 e8 c1 ff ff       	call   80102930 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105a60:	e8 fb de ff ff       	call   80103960 <myproc>
-80105a65:	85 c0                	test   %eax,%eax
-80105a67:	75 8a                	jne    801059f3 <trap+0xa3>
-80105a69:	eb a5                	jmp    80105a10 <trap+0xc0>
+80106748:	e8 a3 d8 ff ff       	call   80103ff0 <myproc>
+8010674d:	85 c0                	test   %eax,%eax
+8010674f:	75 a2                	jne    801066f3 <trap+0xa3>
+80106751:	eb bd                	jmp    80106710 <trap+0xc0>
+    handlePageFault();
+80106753:	e8 98 fd ff ff       	call   801064f0 <handlePageFault>
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80106758:	e8 93 d8 ff ff       	call   80103ff0 <myproc>
+8010675d:	85 c0                	test   %eax,%eax
+8010675f:	75 92                	jne    801066f3 <trap+0xa3>
+80106761:	eb ad                	jmp    80106710 <trap+0xc0>
     if(cpuid() == 0){
-80105a6b:	e8 d0 de ff ff       	call   80103940 <cpuid>
-80105a70:	85 c0                	test   %eax,%eax
-80105a72:	75 e7                	jne    80105a5b <trap+0x10b>
+80106763:	e8 28 d5 ff ff       	call   80103c90 <cpuid>
+80106768:	85 c0                	test   %eax,%eax
+8010676a:	75 d7                	jne    80106743 <trap+0xf3>
       acquire(&tickslock);
-80105a74:	83 ec 0c             	sub    $0xc,%esp
-80105a77:	68 60 4c 11 80       	push   $0x80114c60
-80105a7c:	e8 df ea ff ff       	call   80104560 <acquire>
+8010676c:	83 ec 0c             	sub    $0xc,%esp
+8010676f:	68 60 5b 11 80       	push   $0x80115b60
+80106774:	e8 37 ea ff ff       	call   801051b0 <acquire>
       wakeup(&ticks);
-80105a81:	c7 04 24 a0 54 11 80 	movl   $0x801154a0,(%esp)
+80106779:	c7 04 24 a0 63 11 80 	movl   $0x801163a0,(%esp)
       ticks++;
-80105a88:	83 05 a0 54 11 80 01 	addl   $0x1,0x801154a0
+80106780:	83 05 a0 63 11 80 01 	addl   $0x1,0x801163a0
       wakeup(&ticks);
-80105a8f:	e8 4c e6 ff ff       	call   801040e0 <wakeup>
+80106787:	e8 c4 e3 ff ff       	call   80104b50 <wakeup>
       release(&tickslock);
-80105a94:	c7 04 24 60 4c 11 80 	movl   $0x80114c60,(%esp)
-80105a9b:	e8 80 eb ff ff       	call   80104620 <release>
-80105aa0:	83 c4 10             	add    $0x10,%esp
+8010678c:	c7 04 24 60 5b 11 80 	movl   $0x80115b60,(%esp)
+80106793:	e8 d8 ea ff ff       	call   80105270 <release>
+80106798:	83 c4 10             	add    $0x10,%esp
     lapiceoi();
-80105aa3:	eb b6                	jmp    80105a5b <trap+0x10b>
+8010679b:	eb a6                	jmp    80106743 <trap+0xf3>
     kbdintr();
-80105aa5:	e8 d6 cc ff ff       	call   80102780 <kbdintr>
+8010679d:	e8 4e c0 ff ff       	call   801027f0 <kbdintr>
     lapiceoi();
-80105aaa:	e8 11 ce ff ff       	call   801028c0 <lapiceoi>
+801067a2:	e8 89 c1 ff ff       	call   80102930 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105aaf:	e8 ac de ff ff       	call   80103960 <myproc>
-80105ab4:	85 c0                	test   %eax,%eax
-80105ab6:	0f 85 37 ff ff ff    	jne    801059f3 <trap+0xa3>
-80105abc:	e9 4f ff ff ff       	jmp    80105a10 <trap+0xc0>
+801067a7:	e8 44 d8 ff ff       	call   80103ff0 <myproc>
+801067ac:	85 c0                	test   %eax,%eax
+801067ae:	0f 85 3f ff ff ff    	jne    801066f3 <trap+0xa3>
+801067b4:	e9 57 ff ff ff       	jmp    80106710 <trap+0xc0>
     uartintr();
-80105ac1:	e8 4a 02 00 00       	call   80105d10 <uartintr>
+801067b9:	e8 42 02 00 00       	call   80106a00 <uartintr>
     lapiceoi();
-80105ac6:	e8 f5 cd ff ff       	call   801028c0 <lapiceoi>
+801067be:	e8 6d c1 ff ff       	call   80102930 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105acb:	e8 90 de ff ff       	call   80103960 <myproc>
-80105ad0:	85 c0                	test   %eax,%eax
-80105ad2:	0f 85 1b ff ff ff    	jne    801059f3 <trap+0xa3>
-80105ad8:	e9 33 ff ff ff       	jmp    80105a10 <trap+0xc0>
+801067c3:	e8 28 d8 ff ff       	call   80103ff0 <myproc>
+801067c8:	85 c0                	test   %eax,%eax
+801067ca:	0f 85 23 ff ff ff    	jne    801066f3 <trap+0xa3>
+801067d0:	e9 3b ff ff ff       	jmp    80106710 <trap+0xc0>
     cprintf("cpu%d: spurious interrupt at %x:%x\n",
-80105add:	8b 7b 38             	mov    0x38(%ebx),%edi
-80105ae0:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
-80105ae4:	e8 57 de ff ff       	call   80103940 <cpuid>
-80105ae9:	57                   	push   %edi
-80105aea:	56                   	push   %esi
-80105aeb:	50                   	push   %eax
-80105aec:	68 64 78 10 80       	push   $0x80107864
-80105af1:	e8 ba ab ff ff       	call   801006b0 <cprintf>
+801067d5:	8b 7b 38             	mov    0x38(%ebx),%edi
+801067d8:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
+801067dc:	e8 af d4 ff ff       	call   80103c90 <cpuid>
+801067e1:	57                   	push   %edi
+801067e2:	56                   	push   %esi
+801067e3:	50                   	push   %eax
+801067e4:	68 e4 86 10 80       	push   $0x801086e4
+801067e9:	e8 c2 9e ff ff       	call   801006b0 <cprintf>
     lapiceoi();
-80105af6:	e8 c5 cd ff ff       	call   801028c0 <lapiceoi>
+801067ee:	e8 3d c1 ff ff       	call   80102930 <lapiceoi>
     break;
-80105afb:	83 c4 10             	add    $0x10,%esp
+801067f3:	83 c4 10             	add    $0x10,%esp
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105afe:	e8 5d de ff ff       	call   80103960 <myproc>
-80105b03:	85 c0                	test   %eax,%eax
-80105b05:	0f 85 e8 fe ff ff    	jne    801059f3 <trap+0xa3>
-80105b0b:	e9 00 ff ff ff       	jmp    80105a10 <trap+0xc0>
-  if(myproc() && myproc()->state == RUNNING &&
-80105b10:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
-80105b14:	0f 85 0e ff ff ff    	jne    80105a28 <trap+0xd8>
-    yield();
-80105b1a:	e8 b1 e3 ff ff       	call   80103ed0 <yield>
-80105b1f:	e9 04 ff ff ff       	jmp    80105a28 <trap+0xd8>
-80105b24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801067f6:	e8 f5 d7 ff ff       	call   80103ff0 <myproc>
+801067fb:	85 c0                	test   %eax,%eax
+801067fd:	0f 85 f0 fe ff ff    	jne    801066f3 <trap+0xa3>
+80106803:	e9 08 ff ff ff       	jmp    80106710 <trap+0xc0>
+80106808:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010680f:	90                   	nop
     if(myproc()->killed)
-80105b28:	e8 33 de ff ff       	call   80103960 <myproc>
-80105b2d:	8b 70 24             	mov    0x24(%eax),%esi
-80105b30:	85 f6                	test   %esi,%esi
-80105b32:	75 3c                	jne    80105b70 <trap+0x220>
+80106810:	e8 db d7 ff ff       	call   80103ff0 <myproc>
+80106815:	8b 70 24             	mov    0x24(%eax),%esi
+80106818:	85 f6                	test   %esi,%esi
+8010681a:	75 3c                	jne    80106858 <trap+0x208>
     myproc()->tf = tf;
-80105b34:	e8 27 de ff ff       	call   80103960 <myproc>
-80105b39:	89 58 18             	mov    %ebx,0x18(%eax)
+8010681c:	e8 cf d7 ff ff       	call   80103ff0 <myproc>
+80106821:	89 58 18             	mov    %ebx,0x18(%eax)
     syscall();
-80105b3c:	e8 ff ee ff ff       	call   80104a40 <syscall>
+80106824:	e8 67 ee ff ff       	call   80105690 <syscall>
     if(myproc()->killed)
-80105b41:	e8 1a de ff ff       	call   80103960 <myproc>
-80105b46:	8b 48 24             	mov    0x24(%eax),%ecx
-80105b49:	85 c9                	test   %ecx,%ecx
-80105b4b:	0f 84 fd fe ff ff    	je     80105a4e <trap+0xfe>
-}
-80105b51:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105b54:	5b                   	pop    %ebx
-80105b55:	5e                   	pop    %esi
-80105b56:	5f                   	pop    %edi
-80105b57:	5d                   	pop    %ebp
+80106829:	e8 c2 d7 ff ff       	call   80103ff0 <myproc>
+8010682e:	8b 48 24             	mov    0x24(%eax),%ecx
+80106831:	85 c9                	test   %ecx,%ecx
+80106833:	0f 84 fd fe ff ff    	je     80106736 <trap+0xe6>
+80106839:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010683c:	5b                   	pop    %ebx
+8010683d:	5e                   	pop    %esi
+8010683e:	5f                   	pop    %edi
+8010683f:	5d                   	pop    %ebp
       exit();
-80105b58:	e9 33 e2 ff ff       	jmp    80103d90 <exit>
-80105b5d:	8d 76 00             	lea    0x0(%esi),%esi
+80106840:	e9 bb df ff ff       	jmp    80104800 <exit>
+80106845:	8d 76 00             	lea    0x0(%esi),%esi
     exit();
-80105b60:	e8 2b e2 ff ff       	call   80103d90 <exit>
-80105b65:	e9 a6 fe ff ff       	jmp    80105a10 <trap+0xc0>
-80105b6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106848:	e8 b3 df ff ff       	call   80104800 <exit>
+8010684d:	e9 be fe ff ff       	jmp    80106710 <trap+0xc0>
+80106852:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       exit();
-80105b70:	e8 1b e2 ff ff       	call   80103d90 <exit>
-80105b75:	eb bd                	jmp    80105b34 <trap+0x1e4>
-80105b77:	0f 20 d6             	mov    %cr2,%esi
+80106858:	e8 a3 df ff ff       	call   80104800 <exit>
+8010685d:	eb bd                	jmp    8010681c <trap+0x1cc>
+8010685f:	0f 20 d6             	mov    %cr2,%esi
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-80105b7a:	e8 c1 dd ff ff       	call   80103940 <cpuid>
-80105b7f:	83 ec 0c             	sub    $0xc,%esp
-80105b82:	56                   	push   %esi
-80105b83:	57                   	push   %edi
-80105b84:	50                   	push   %eax
-80105b85:	ff 73 30             	pushl  0x30(%ebx)
-80105b88:	68 88 78 10 80       	push   $0x80107888
-80105b8d:	e8 1e ab ff ff       	call   801006b0 <cprintf>
+80106862:	e8 29 d4 ff ff       	call   80103c90 <cpuid>
+80106867:	83 ec 0c             	sub    $0xc,%esp
+8010686a:	56                   	push   %esi
+8010686b:	57                   	push   %edi
+8010686c:	50                   	push   %eax
+8010686d:	ff 73 30             	pushl  0x30(%ebx)
+80106870:	68 08 87 10 80       	push   $0x80108708
+80106875:	e8 36 9e ff ff       	call   801006b0 <cprintf>
       panic("trap");
-80105b92:	83 c4 14             	add    $0x14,%esp
-80105b95:	68 5e 78 10 80       	push   $0x8010785e
-80105b9a:	e8 f1 a7 ff ff       	call   80100390 <panic>
-80105b9f:	90                   	nop
+8010687a:	83 c4 14             	add    $0x14,%esp
+8010687d:	68 df 86 10 80       	push   $0x801086df
+80106882:	e8 09 9b ff ff       	call   80100390 <panic>
+80106887:	66 90                	xchg   %ax,%ax
+80106889:	66 90                	xchg   %ax,%ax
+8010688b:	66 90                	xchg   %ax,%ax
+8010688d:	66 90                	xchg   %ax,%ax
+8010688f:	90                   	nop
 
-80105ba0 <uartgetc>:
+80106890 <uartgetc>:
   outb(COM1+0, c);
 }
 
 static int
 uartgetc(void)
 {
-80105ba0:	f3 0f 1e fb          	endbr32 
+80106890:	f3 0f 1e fb          	endbr32 
   if(!uart)
-80105ba4:	a1 bc a5 10 80       	mov    0x8010a5bc,%eax
-80105ba9:	85 c0                	test   %eax,%eax
-80105bab:	74 1b                	je     80105bc8 <uartgetc+0x28>
+80106894:	a1 c4 b5 10 80       	mov    0x8010b5c4,%eax
+80106899:	85 c0                	test   %eax,%eax
+8010689b:	74 1b                	je     801068b8 <uartgetc+0x28>
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105bad:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80105bb2:	ec                   	in     (%dx),%al
+8010689d:	ba fd 03 00 00       	mov    $0x3fd,%edx
+801068a2:	ec                   	in     (%dx),%al
     return -1;
   if(!(inb(COM1+5) & 0x01))
-80105bb3:	a8 01                	test   $0x1,%al
-80105bb5:	74 11                	je     80105bc8 <uartgetc+0x28>
-80105bb7:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105bbc:	ec                   	in     (%dx),%al
+801068a3:	a8 01                	test   $0x1,%al
+801068a5:	74 11                	je     801068b8 <uartgetc+0x28>
+801068a7:	ba f8 03 00 00       	mov    $0x3f8,%edx
+801068ac:	ec                   	in     (%dx),%al
     return -1;
   return inb(COM1+0);
-80105bbd:	0f b6 c0             	movzbl %al,%eax
-80105bc0:	c3                   	ret    
-80105bc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801068ad:	0f b6 c0             	movzbl %al,%eax
+801068b0:	c3                   	ret    
+801068b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     return -1;
-80105bc8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801068b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105bcd:	c3                   	ret    
-80105bce:	66 90                	xchg   %ax,%ax
+801068bd:	c3                   	ret    
+801068be:	66 90                	xchg   %ax,%ax
 
-80105bd0 <uartputc.part.0>:
+801068c0 <uartputc.part.0>:
 uartputc(int c)
-80105bd0:	55                   	push   %ebp
-80105bd1:	89 e5                	mov    %esp,%ebp
-80105bd3:	57                   	push   %edi
-80105bd4:	89 c7                	mov    %eax,%edi
-80105bd6:	56                   	push   %esi
-80105bd7:	be fd 03 00 00       	mov    $0x3fd,%esi
-80105bdc:	53                   	push   %ebx
-80105bdd:	bb 80 00 00 00       	mov    $0x80,%ebx
-80105be2:	83 ec 0c             	sub    $0xc,%esp
-80105be5:	eb 1b                	jmp    80105c02 <uartputc.part.0+0x32>
-80105be7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105bee:	66 90                	xchg   %ax,%ax
+801068c0:	55                   	push   %ebp
+801068c1:	89 e5                	mov    %esp,%ebp
+801068c3:	57                   	push   %edi
+801068c4:	89 c7                	mov    %eax,%edi
+801068c6:	56                   	push   %esi
+801068c7:	be fd 03 00 00       	mov    $0x3fd,%esi
+801068cc:	53                   	push   %ebx
+801068cd:	bb 80 00 00 00       	mov    $0x80,%ebx
+801068d2:	83 ec 0c             	sub    $0xc,%esp
+801068d5:	eb 1b                	jmp    801068f2 <uartputc.part.0+0x32>
+801068d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801068de:	66 90                	xchg   %ax,%ax
     microdelay(10);
-80105bf0:	83 ec 0c             	sub    $0xc,%esp
-80105bf3:	6a 0a                	push   $0xa
-80105bf5:	e8 e6 cc ff ff       	call   801028e0 <microdelay>
+801068e0:	83 ec 0c             	sub    $0xc,%esp
+801068e3:	6a 0a                	push   $0xa
+801068e5:	e8 66 c0 ff ff       	call   80102950 <microdelay>
   for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-80105bfa:	83 c4 10             	add    $0x10,%esp
-80105bfd:	83 eb 01             	sub    $0x1,%ebx
-80105c00:	74 07                	je     80105c09 <uartputc.part.0+0x39>
-80105c02:	89 f2                	mov    %esi,%edx
-80105c04:	ec                   	in     (%dx),%al
-80105c05:	a8 20                	test   $0x20,%al
-80105c07:	74 e7                	je     80105bf0 <uartputc.part.0+0x20>
+801068ea:	83 c4 10             	add    $0x10,%esp
+801068ed:	83 eb 01             	sub    $0x1,%ebx
+801068f0:	74 07                	je     801068f9 <uartputc.part.0+0x39>
+801068f2:	89 f2                	mov    %esi,%edx
+801068f4:	ec                   	in     (%dx),%al
+801068f5:	a8 20                	test   $0x20,%al
+801068f7:	74 e7                	je     801068e0 <uartputc.part.0+0x20>
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80105c09:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105c0e:	89 f8                	mov    %edi,%eax
-80105c10:	ee                   	out    %al,(%dx)
-}
-80105c11:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105c14:	5b                   	pop    %ebx
-80105c15:	5e                   	pop    %esi
-80105c16:	5f                   	pop    %edi
-80105c17:	5d                   	pop    %ebp
-80105c18:	c3                   	ret    
-80105c19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80105c20 <uartinit>:
-{
-80105c20:	f3 0f 1e fb          	endbr32 
-80105c24:	55                   	push   %ebp
-80105c25:	31 c9                	xor    %ecx,%ecx
-80105c27:	89 c8                	mov    %ecx,%eax
-80105c29:	89 e5                	mov    %esp,%ebp
-80105c2b:	57                   	push   %edi
-80105c2c:	56                   	push   %esi
-80105c2d:	53                   	push   %ebx
-80105c2e:	bb fa 03 00 00       	mov    $0x3fa,%ebx
-80105c33:	89 da                	mov    %ebx,%edx
-80105c35:	83 ec 0c             	sub    $0xc,%esp
-80105c38:	ee                   	out    %al,(%dx)
-80105c39:	bf fb 03 00 00       	mov    $0x3fb,%edi
-80105c3e:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
-80105c43:	89 fa                	mov    %edi,%edx
-80105c45:	ee                   	out    %al,(%dx)
-80105c46:	b8 0c 00 00 00       	mov    $0xc,%eax
-80105c4b:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105c50:	ee                   	out    %al,(%dx)
-80105c51:	be f9 03 00 00       	mov    $0x3f9,%esi
-80105c56:	89 c8                	mov    %ecx,%eax
-80105c58:	89 f2                	mov    %esi,%edx
-80105c5a:	ee                   	out    %al,(%dx)
-80105c5b:	b8 03 00 00 00       	mov    $0x3,%eax
-80105c60:	89 fa                	mov    %edi,%edx
-80105c62:	ee                   	out    %al,(%dx)
-80105c63:	ba fc 03 00 00       	mov    $0x3fc,%edx
-80105c68:	89 c8                	mov    %ecx,%eax
-80105c6a:	ee                   	out    %al,(%dx)
-80105c6b:	b8 01 00 00 00       	mov    $0x1,%eax
-80105c70:	89 f2                	mov    %esi,%edx
-80105c72:	ee                   	out    %al,(%dx)
+801068f9:	ba f8 03 00 00       	mov    $0x3f8,%edx
+801068fe:	89 f8                	mov    %edi,%eax
+80106900:	ee                   	out    %al,(%dx)
+}
+80106901:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106904:	5b                   	pop    %ebx
+80106905:	5e                   	pop    %esi
+80106906:	5f                   	pop    %edi
+80106907:	5d                   	pop    %ebp
+80106908:	c3                   	ret    
+80106909:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106910 <uartinit>:
+{
+80106910:	f3 0f 1e fb          	endbr32 
+80106914:	55                   	push   %ebp
+80106915:	31 c9                	xor    %ecx,%ecx
+80106917:	89 c8                	mov    %ecx,%eax
+80106919:	89 e5                	mov    %esp,%ebp
+8010691b:	57                   	push   %edi
+8010691c:	56                   	push   %esi
+8010691d:	53                   	push   %ebx
+8010691e:	bb fa 03 00 00       	mov    $0x3fa,%ebx
+80106923:	89 da                	mov    %ebx,%edx
+80106925:	83 ec 0c             	sub    $0xc,%esp
+80106928:	ee                   	out    %al,(%dx)
+80106929:	bf fb 03 00 00       	mov    $0x3fb,%edi
+8010692e:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
+80106933:	89 fa                	mov    %edi,%edx
+80106935:	ee                   	out    %al,(%dx)
+80106936:	b8 0c 00 00 00       	mov    $0xc,%eax
+8010693b:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80106940:	ee                   	out    %al,(%dx)
+80106941:	be f9 03 00 00       	mov    $0x3f9,%esi
+80106946:	89 c8                	mov    %ecx,%eax
+80106948:	89 f2                	mov    %esi,%edx
+8010694a:	ee                   	out    %al,(%dx)
+8010694b:	b8 03 00 00 00       	mov    $0x3,%eax
+80106950:	89 fa                	mov    %edi,%edx
+80106952:	ee                   	out    %al,(%dx)
+80106953:	ba fc 03 00 00       	mov    $0x3fc,%edx
+80106958:	89 c8                	mov    %ecx,%eax
+8010695a:	ee                   	out    %al,(%dx)
+8010695b:	b8 01 00 00 00       	mov    $0x1,%eax
+80106960:	89 f2                	mov    %esi,%edx
+80106962:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105c73:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80105c78:	ec                   	in     (%dx),%al
+80106963:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80106968:	ec                   	in     (%dx),%al
   if(inb(COM1+5) == 0xFF)
-80105c79:	3c ff                	cmp    $0xff,%al
-80105c7b:	74 52                	je     80105ccf <uartinit+0xaf>
+80106969:	3c ff                	cmp    $0xff,%al
+8010696b:	74 52                	je     801069bf <uartinit+0xaf>
   uart = 1;
-80105c7d:	c7 05 bc a5 10 80 01 	movl   $0x1,0x8010a5bc
-80105c84:	00 00 00 
-80105c87:	89 da                	mov    %ebx,%edx
-80105c89:	ec                   	in     (%dx),%al
-80105c8a:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105c8f:	ec                   	in     (%dx),%al
+8010696d:	c7 05 c4 b5 10 80 01 	movl   $0x1,0x8010b5c4
+80106974:	00 00 00 
+80106977:	89 da                	mov    %ebx,%edx
+80106979:	ec                   	in     (%dx),%al
+8010697a:	ba f8 03 00 00       	mov    $0x3f8,%edx
+8010697f:	ec                   	in     (%dx),%al
   ioapicenable(IRQ_COM1, 0);
-80105c90:	83 ec 08             	sub    $0x8,%esp
-80105c93:	be 76 00 00 00       	mov    $0x76,%esi
+80106980:	83 ec 08             	sub    $0x8,%esp
+80106983:	be 76 00 00 00       	mov    $0x76,%esi
   for(p="xv6...\n"; *p; p++)
-80105c98:	bb 80 79 10 80       	mov    $0x80107980,%ebx
+80106988:	bb 48 88 10 80       	mov    $0x80108848,%ebx
   ioapicenable(IRQ_COM1, 0);
-80105c9d:	6a 00                	push   $0x0
-80105c9f:	6a 04                	push   $0x4
-80105ca1:	e8 8a c7 ff ff       	call   80102430 <ioapicenable>
-80105ca6:	83 c4 10             	add    $0x10,%esp
+8010698d:	6a 00                	push   $0x0
+8010698f:	6a 04                	push   $0x4
+80106991:	e8 9a ba ff ff       	call   80102430 <ioapicenable>
+80106996:	83 c4 10             	add    $0x10,%esp
   for(p="xv6...\n"; *p; p++)
-80105ca9:	b8 78 00 00 00       	mov    $0x78,%eax
-80105cae:	eb 04                	jmp    80105cb4 <uartinit+0x94>
-80105cb0:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
+80106999:	b8 78 00 00 00       	mov    $0x78,%eax
+8010699e:	eb 04                	jmp    801069a4 <uartinit+0x94>
+801069a0:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
   if(!uart)
-80105cb4:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
-80105cba:	85 d2                	test   %edx,%edx
-80105cbc:	74 08                	je     80105cc6 <uartinit+0xa6>
+801069a4:	8b 15 c4 b5 10 80    	mov    0x8010b5c4,%edx
+801069aa:	85 d2                	test   %edx,%edx
+801069ac:	74 08                	je     801069b6 <uartinit+0xa6>
     uartputc(*p);
-80105cbe:	0f be c0             	movsbl %al,%eax
-80105cc1:	e8 0a ff ff ff       	call   80105bd0 <uartputc.part.0>
+801069ae:	0f be c0             	movsbl %al,%eax
+801069b1:	e8 0a ff ff ff       	call   801068c0 <uartputc.part.0>
   for(p="xv6...\n"; *p; p++)
-80105cc6:	89 f0                	mov    %esi,%eax
-80105cc8:	83 c3 01             	add    $0x1,%ebx
-80105ccb:	84 c0                	test   %al,%al
-80105ccd:	75 e1                	jne    80105cb0 <uartinit+0x90>
-}
-80105ccf:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105cd2:	5b                   	pop    %ebx
-80105cd3:	5e                   	pop    %esi
-80105cd4:	5f                   	pop    %edi
-80105cd5:	5d                   	pop    %ebp
-80105cd6:	c3                   	ret    
-80105cd7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105cde:	66 90                	xchg   %ax,%ax
+801069b6:	89 f0                	mov    %esi,%eax
+801069b8:	83 c3 01             	add    $0x1,%ebx
+801069bb:	84 c0                	test   %al,%al
+801069bd:	75 e1                	jne    801069a0 <uartinit+0x90>
+}
+801069bf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801069c2:	5b                   	pop    %ebx
+801069c3:	5e                   	pop    %esi
+801069c4:	5f                   	pop    %edi
+801069c5:	5d                   	pop    %ebp
+801069c6:	c3                   	ret    
+801069c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801069ce:	66 90                	xchg   %ax,%ax
 
-80105ce0 <uartputc>:
+801069d0 <uartputc>:
 {
-80105ce0:	f3 0f 1e fb          	endbr32 
-80105ce4:	55                   	push   %ebp
+801069d0:	f3 0f 1e fb          	endbr32 
+801069d4:	55                   	push   %ebp
   if(!uart)
-80105ce5:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
+801069d5:	8b 15 c4 b5 10 80    	mov    0x8010b5c4,%edx
 {
-80105ceb:	89 e5                	mov    %esp,%ebp
-80105ced:	8b 45 08             	mov    0x8(%ebp),%eax
+801069db:	89 e5                	mov    %esp,%ebp
+801069dd:	8b 45 08             	mov    0x8(%ebp),%eax
   if(!uart)
-80105cf0:	85 d2                	test   %edx,%edx
-80105cf2:	74 0c                	je     80105d00 <uartputc+0x20>
+801069e0:	85 d2                	test   %edx,%edx
+801069e2:	74 0c                	je     801069f0 <uartputc+0x20>
 }
-80105cf4:	5d                   	pop    %ebp
-80105cf5:	e9 d6 fe ff ff       	jmp    80105bd0 <uartputc.part.0>
-80105cfa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80105d00:	5d                   	pop    %ebp
-80105d01:	c3                   	ret    
-80105d02:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105d09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801069e4:	5d                   	pop    %ebp
+801069e5:	e9 d6 fe ff ff       	jmp    801068c0 <uartputc.part.0>
+801069ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801069f0:	5d                   	pop    %ebp
+801069f1:	c3                   	ret    
+801069f2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801069f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80105d10 <uartintr>:
+80106a00 <uartintr>:
 
 void
 uartintr(void)
 {
-80105d10:	f3 0f 1e fb          	endbr32 
-80105d14:	55                   	push   %ebp
-80105d15:	89 e5                	mov    %esp,%ebp
-80105d17:	83 ec 14             	sub    $0x14,%esp
+80106a00:	f3 0f 1e fb          	endbr32 
+80106a04:	55                   	push   %ebp
+80106a05:	89 e5                	mov    %esp,%ebp
+80106a07:	83 ec 14             	sub    $0x14,%esp
   consoleintr(uartgetc);
-80105d1a:	68 a0 5b 10 80       	push   $0x80105ba0
-80105d1f:	e8 3c ab ff ff       	call   80100860 <consoleintr>
+80106a0a:	68 90 68 10 80       	push   $0x80106890
+80106a0f:	e8 4c 9e ff ff       	call   80100860 <consoleintr>
 }
-80105d24:	83 c4 10             	add    $0x10,%esp
-80105d27:	c9                   	leave  
-80105d28:	c3                   	ret    
-
-80105d29 <vector0>:
-# generated by vectors.pl - do not edit
-# handlers
-.globl alltraps
-.globl vector0
-vector0:
-  pushl $0
-80105d29:	6a 00                	push   $0x0
-  pushl $0
-80105d2b:	6a 00                	push   $0x0
-  jmp alltraps
-80105d2d:	e9 3c fb ff ff       	jmp    8010586e <alltraps>
-
-80105d32 <vector1>:
-.globl vector1
-vector1:
-  pushl $0
-80105d32:	6a 00                	push   $0x0
-  pushl $1
-80105d34:	6a 01                	push   $0x1
-  jmp alltraps
-80105d36:	e9 33 fb ff ff       	jmp    8010586e <alltraps>
-
-80105d3b <vector2>:
-.globl vector2
-vector2:
-  pushl $0
-80105d3b:	6a 00                	push   $0x0
-  pushl $2
-80105d3d:	6a 02                	push   $0x2
-  jmp alltraps
-80105d3f:	e9 2a fb ff ff       	jmp    8010586e <alltraps>
-
-80105d44 <vector3>:
-.globl vector3
-vector3:
-  pushl $0
-80105d44:	6a 00                	push   $0x0
-  pushl $3
-80105d46:	6a 03                	push   $0x3
-  jmp alltraps
-80105d48:	e9 21 fb ff ff       	jmp    8010586e <alltraps>
-
-80105d4d <vector4>:
-.globl vector4
-vector4:
-  pushl $0
-80105d4d:	6a 00                	push   $0x0
-  pushl $4
-80105d4f:	6a 04                	push   $0x4
-  jmp alltraps
-80105d51:	e9 18 fb ff ff       	jmp    8010586e <alltraps>
-
-80105d56 <vector5>:
-.globl vector5
-vector5:
-  pushl $0
-80105d56:	6a 00                	push   $0x0
-  pushl $5
-80105d58:	6a 05                	push   $0x5
-  jmp alltraps
-80105d5a:	e9 0f fb ff ff       	jmp    8010586e <alltraps>
-
-80105d5f <vector6>:
-.globl vector6
-vector6:
-  pushl $0
-80105d5f:	6a 00                	push   $0x0
-  pushl $6
-80105d61:	6a 06                	push   $0x6
-  jmp alltraps
-80105d63:	e9 06 fb ff ff       	jmp    8010586e <alltraps>
-
-80105d68 <vector7>:
-.globl vector7
-vector7:
-  pushl $0
-80105d68:	6a 00                	push   $0x0
-  pushl $7
-80105d6a:	6a 07                	push   $0x7
-  jmp alltraps
-80105d6c:	e9 fd fa ff ff       	jmp    8010586e <alltraps>
-
-80105d71 <vector8>:
-.globl vector8
-vector8:
-  pushl $8
-80105d71:	6a 08                	push   $0x8
-  jmp alltraps
-80105d73:	e9 f6 fa ff ff       	jmp    8010586e <alltraps>
-
-80105d78 <vector9>:
-.globl vector9
-vector9:
-  pushl $0
-80105d78:	6a 00                	push   $0x0
-  pushl $9
-80105d7a:	6a 09                	push   $0x9
-  jmp alltraps
-80105d7c:	e9 ed fa ff ff       	jmp    8010586e <alltraps>
-
-80105d81 <vector10>:
-.globl vector10
-vector10:
-  pushl $10
-80105d81:	6a 0a                	push   $0xa
-  jmp alltraps
-80105d83:	e9 e6 fa ff ff       	jmp    8010586e <alltraps>
-
-80105d88 <vector11>:
-.globl vector11
-vector11:
-  pushl $11
-80105d88:	6a 0b                	push   $0xb
-  jmp alltraps
-80105d8a:	e9 df fa ff ff       	jmp    8010586e <alltraps>
-
-80105d8f <vector12>:
-.globl vector12
-vector12:
-  pushl $12
-80105d8f:	6a 0c                	push   $0xc
-  jmp alltraps
-80105d91:	e9 d8 fa ff ff       	jmp    8010586e <alltraps>
-
-80105d96 <vector13>:
-.globl vector13
-vector13:
-  pushl $13
-80105d96:	6a 0d                	push   $0xd
-  jmp alltraps
-80105d98:	e9 d1 fa ff ff       	jmp    8010586e <alltraps>
-
-80105d9d <vector14>:
-.globl vector14
-vector14:
-  pushl $14
-80105d9d:	6a 0e                	push   $0xe
-  jmp alltraps
-80105d9f:	e9 ca fa ff ff       	jmp    8010586e <alltraps>
-
-80105da4 <vector15>:
-.globl vector15
-vector15:
-  pushl $0
-80105da4:	6a 00                	push   $0x0
-  pushl $15
-80105da6:	6a 0f                	push   $0xf
-  jmp alltraps
-80105da8:	e9 c1 fa ff ff       	jmp    8010586e <alltraps>
-
-80105dad <vector16>:
-.globl vector16
-vector16:
-  pushl $0
-80105dad:	6a 00                	push   $0x0
-  pushl $16
-80105daf:	6a 10                	push   $0x10
-  jmp alltraps
-80105db1:	e9 b8 fa ff ff       	jmp    8010586e <alltraps>
-
-80105db6 <vector17>:
-.globl vector17
-vector17:
-  pushl $17
-80105db6:	6a 11                	push   $0x11
-  jmp alltraps
-80105db8:	e9 b1 fa ff ff       	jmp    8010586e <alltraps>
-
-80105dbd <vector18>:
-.globl vector18
-vector18:
-  pushl $0
-80105dbd:	6a 00                	push   $0x0
-  pushl $18
-80105dbf:	6a 12                	push   $0x12
-  jmp alltraps
-80105dc1:	e9 a8 fa ff ff       	jmp    8010586e <alltraps>
-
-80105dc6 <vector19>:
-.globl vector19
-vector19:
-  pushl $0
-80105dc6:	6a 00                	push   $0x0
-  pushl $19
-80105dc8:	6a 13                	push   $0x13
-  jmp alltraps
-80105dca:	e9 9f fa ff ff       	jmp    8010586e <alltraps>
-
-80105dcf <vector20>:
-.globl vector20
-vector20:
-  pushl $0
-80105dcf:	6a 00                	push   $0x0
-  pushl $20
-80105dd1:	6a 14                	push   $0x14
-  jmp alltraps
-80105dd3:	e9 96 fa ff ff       	jmp    8010586e <alltraps>
-
-80105dd8 <vector21>:
-.globl vector21
-vector21:
-  pushl $0
-80105dd8:	6a 00                	push   $0x0
-  pushl $21
-80105dda:	6a 15                	push   $0x15
-  jmp alltraps
-80105ddc:	e9 8d fa ff ff       	jmp    8010586e <alltraps>
-
-80105de1 <vector22>:
-.globl vector22
-vector22:
-  pushl $0
-80105de1:	6a 00                	push   $0x0
-  pushl $22
-80105de3:	6a 16                	push   $0x16
-  jmp alltraps
-80105de5:	e9 84 fa ff ff       	jmp    8010586e <alltraps>
-
-80105dea <vector23>:
-.globl vector23
-vector23:
-  pushl $0
-80105dea:	6a 00                	push   $0x0
-  pushl $23
-80105dec:	6a 17                	push   $0x17
-  jmp alltraps
-80105dee:	e9 7b fa ff ff       	jmp    8010586e <alltraps>
-
-80105df3 <vector24>:
-.globl vector24
-vector24:
-  pushl $0
-80105df3:	6a 00                	push   $0x0
-  pushl $24
-80105df5:	6a 18                	push   $0x18
-  jmp alltraps
-80105df7:	e9 72 fa ff ff       	jmp    8010586e <alltraps>
-
-80105dfc <vector25>:
-.globl vector25
-vector25:
-  pushl $0
-80105dfc:	6a 00                	push   $0x0
-  pushl $25
-80105dfe:	6a 19                	push   $0x19
-  jmp alltraps
-80105e00:	e9 69 fa ff ff       	jmp    8010586e <alltraps>
-
-80105e05 <vector26>:
-.globl vector26
-vector26:
-  pushl $0
-80105e05:	6a 00                	push   $0x0
-  pushl $26
-80105e07:	6a 1a                	push   $0x1a
-  jmp alltraps
-80105e09:	e9 60 fa ff ff       	jmp    8010586e <alltraps>
-
-80105e0e <vector27>:
-.globl vector27
-vector27:
-  pushl $0
-80105e0e:	6a 00                	push   $0x0
-  pushl $27
-80105e10:	6a 1b                	push   $0x1b
-  jmp alltraps
-80105e12:	e9 57 fa ff ff       	jmp    8010586e <alltraps>
-
-80105e17 <vector28>:
-.globl vector28
-vector28:
-  pushl $0
-80105e17:	6a 00                	push   $0x0
-  pushl $28
-80105e19:	6a 1c                	push   $0x1c
-  jmp alltraps
-80105e1b:	e9 4e fa ff ff       	jmp    8010586e <alltraps>
-
-80105e20 <vector29>:
-.globl vector29
-vector29:
-  pushl $0
-80105e20:	6a 00                	push   $0x0
-  pushl $29
-80105e22:	6a 1d                	push   $0x1d
-  jmp alltraps
-80105e24:	e9 45 fa ff ff       	jmp    8010586e <alltraps>
-
-80105e29 <vector30>:
-.globl vector30
-vector30:
-  pushl $0
-80105e29:	6a 00                	push   $0x0
-  pushl $30
-80105e2b:	6a 1e                	push   $0x1e
-  jmp alltraps
-80105e2d:	e9 3c fa ff ff       	jmp    8010586e <alltraps>
-
-80105e32 <vector31>:
-.globl vector31
-vector31:
-  pushl $0
-80105e32:	6a 00                	push   $0x0
-  pushl $31
-80105e34:	6a 1f                	push   $0x1f
-  jmp alltraps
-80105e36:	e9 33 fa ff ff       	jmp    8010586e <alltraps>
-
-80105e3b <vector32>:
-.globl vector32
-vector32:
-  pushl $0
-80105e3b:	6a 00                	push   $0x0
-  pushl $32
-80105e3d:	6a 20                	push   $0x20
-  jmp alltraps
-80105e3f:	e9 2a fa ff ff       	jmp    8010586e <alltraps>
-
-80105e44 <vector33>:
-.globl vector33
-vector33:
-  pushl $0
-80105e44:	6a 00                	push   $0x0
-  pushl $33
-80105e46:	6a 21                	push   $0x21
-  jmp alltraps
-80105e48:	e9 21 fa ff ff       	jmp    8010586e <alltraps>
-
-80105e4d <vector34>:
-.globl vector34
-vector34:
-  pushl $0
-80105e4d:	6a 00                	push   $0x0
-  pushl $34
-80105e4f:	6a 22                	push   $0x22
-  jmp alltraps
-80105e51:	e9 18 fa ff ff       	jmp    8010586e <alltraps>
-
-80105e56 <vector35>:
-.globl vector35
-vector35:
-  pushl $0
-80105e56:	6a 00                	push   $0x0
-  pushl $35
-80105e58:	6a 23                	push   $0x23
-  jmp alltraps
-80105e5a:	e9 0f fa ff ff       	jmp    8010586e <alltraps>
-
-80105e5f <vector36>:
-.globl vector36
-vector36:
-  pushl $0
-80105e5f:	6a 00                	push   $0x0
-  pushl $36
-80105e61:	6a 24                	push   $0x24
-  jmp alltraps
-80105e63:	e9 06 fa ff ff       	jmp    8010586e <alltraps>
-
-80105e68 <vector37>:
-.globl vector37
-vector37:
-  pushl $0
-80105e68:	6a 00                	push   $0x0
-  pushl $37
-80105e6a:	6a 25                	push   $0x25
-  jmp alltraps
-80105e6c:	e9 fd f9 ff ff       	jmp    8010586e <alltraps>
-
-80105e71 <vector38>:
-.globl vector38
-vector38:
-  pushl $0
-80105e71:	6a 00                	push   $0x0
-  pushl $38
-80105e73:	6a 26                	push   $0x26
-  jmp alltraps
-80105e75:	e9 f4 f9 ff ff       	jmp    8010586e <alltraps>
-
-80105e7a <vector39>:
-.globl vector39
-vector39:
-  pushl $0
-80105e7a:	6a 00                	push   $0x0
-  pushl $39
-80105e7c:	6a 27                	push   $0x27
-  jmp alltraps
-80105e7e:	e9 eb f9 ff ff       	jmp    8010586e <alltraps>
-
-80105e83 <vector40>:
-.globl vector40
-vector40:
-  pushl $0
-80105e83:	6a 00                	push   $0x0
-  pushl $40
-80105e85:	6a 28                	push   $0x28
-  jmp alltraps
-80105e87:	e9 e2 f9 ff ff       	jmp    8010586e <alltraps>
-
-80105e8c <vector41>:
-.globl vector41
-vector41:
-  pushl $0
-80105e8c:	6a 00                	push   $0x0
-  pushl $41
-80105e8e:	6a 29                	push   $0x29
-  jmp alltraps
-80105e90:	e9 d9 f9 ff ff       	jmp    8010586e <alltraps>
-
-80105e95 <vector42>:
-.globl vector42
-vector42:
-  pushl $0
-80105e95:	6a 00                	push   $0x0
-  pushl $42
-80105e97:	6a 2a                	push   $0x2a
-  jmp alltraps
-80105e99:	e9 d0 f9 ff ff       	jmp    8010586e <alltraps>
-
-80105e9e <vector43>:
-.globl vector43
-vector43:
-  pushl $0
-80105e9e:	6a 00                	push   $0x0
-  pushl $43
-80105ea0:	6a 2b                	push   $0x2b
-  jmp alltraps
-80105ea2:	e9 c7 f9 ff ff       	jmp    8010586e <alltraps>
-
-80105ea7 <vector44>:
-.globl vector44
-vector44:
-  pushl $0
-80105ea7:	6a 00                	push   $0x0
-  pushl $44
-80105ea9:	6a 2c                	push   $0x2c
-  jmp alltraps
-80105eab:	e9 be f9 ff ff       	jmp    8010586e <alltraps>
-
-80105eb0 <vector45>:
-.globl vector45
-vector45:
-  pushl $0
-80105eb0:	6a 00                	push   $0x0
-  pushl $45
-80105eb2:	6a 2d                	push   $0x2d
-  jmp alltraps
-80105eb4:	e9 b5 f9 ff ff       	jmp    8010586e <alltraps>
-
-80105eb9 <vector46>:
-.globl vector46
-vector46:
-  pushl $0
-80105eb9:	6a 00                	push   $0x0
-  pushl $46
-80105ebb:	6a 2e                	push   $0x2e
-  jmp alltraps
-80105ebd:	e9 ac f9 ff ff       	jmp    8010586e <alltraps>
-
-80105ec2 <vector47>:
-.globl vector47
-vector47:
-  pushl $0
-80105ec2:	6a 00                	push   $0x0
-  pushl $47
-80105ec4:	6a 2f                	push   $0x2f
-  jmp alltraps
-80105ec6:	e9 a3 f9 ff ff       	jmp    8010586e <alltraps>
-
-80105ecb <vector48>:
-.globl vector48
-vector48:
-  pushl $0
-80105ecb:	6a 00                	push   $0x0
-  pushl $48
-80105ecd:	6a 30                	push   $0x30
-  jmp alltraps
-80105ecf:	e9 9a f9 ff ff       	jmp    8010586e <alltraps>
-
-80105ed4 <vector49>:
-.globl vector49
-vector49:
-  pushl $0
-80105ed4:	6a 00                	push   $0x0
-  pushl $49
-80105ed6:	6a 31                	push   $0x31
-  jmp alltraps
-80105ed8:	e9 91 f9 ff ff       	jmp    8010586e <alltraps>
-
-80105edd <vector50>:
-.globl vector50
-vector50:
-  pushl $0
-80105edd:	6a 00                	push   $0x0
-  pushl $50
-80105edf:	6a 32                	push   $0x32
-  jmp alltraps
-80105ee1:	e9 88 f9 ff ff       	jmp    8010586e <alltraps>
-
-80105ee6 <vector51>:
-.globl vector51
-vector51:
-  pushl $0
-80105ee6:	6a 00                	push   $0x0
-  pushl $51
-80105ee8:	6a 33                	push   $0x33
-  jmp alltraps
-80105eea:	e9 7f f9 ff ff       	jmp    8010586e <alltraps>
-
-80105eef <vector52>:
-.globl vector52
-vector52:
-  pushl $0
-80105eef:	6a 00                	push   $0x0
-  pushl $52
-80105ef1:	6a 34                	push   $0x34
-  jmp alltraps
-80105ef3:	e9 76 f9 ff ff       	jmp    8010586e <alltraps>
-
-80105ef8 <vector53>:
-.globl vector53
-vector53:
-  pushl $0
-80105ef8:	6a 00                	push   $0x0
-  pushl $53
-80105efa:	6a 35                	push   $0x35
-  jmp alltraps
-80105efc:	e9 6d f9 ff ff       	jmp    8010586e <alltraps>
-
-80105f01 <vector54>:
-.globl vector54
-vector54:
-  pushl $0
-80105f01:	6a 00                	push   $0x0
-  pushl $54
-80105f03:	6a 36                	push   $0x36
-  jmp alltraps
-80105f05:	e9 64 f9 ff ff       	jmp    8010586e <alltraps>
-
-80105f0a <vector55>:
-.globl vector55
-vector55:
-  pushl $0
-80105f0a:	6a 00                	push   $0x0
-  pushl $55
-80105f0c:	6a 37                	push   $0x37
-  jmp alltraps
-80105f0e:	e9 5b f9 ff ff       	jmp    8010586e <alltraps>
-
-80105f13 <vector56>:
-.globl vector56
-vector56:
-  pushl $0
-80105f13:	6a 00                	push   $0x0
-  pushl $56
-80105f15:	6a 38                	push   $0x38
-  jmp alltraps
-80105f17:	e9 52 f9 ff ff       	jmp    8010586e <alltraps>
-
-80105f1c <vector57>:
-.globl vector57
-vector57:
-  pushl $0
-80105f1c:	6a 00                	push   $0x0
-  pushl $57
-80105f1e:	6a 39                	push   $0x39
-  jmp alltraps
-80105f20:	e9 49 f9 ff ff       	jmp    8010586e <alltraps>
-
-80105f25 <vector58>:
-.globl vector58
-vector58:
-  pushl $0
-80105f25:	6a 00                	push   $0x0
-  pushl $58
-80105f27:	6a 3a                	push   $0x3a
-  jmp alltraps
-80105f29:	e9 40 f9 ff ff       	jmp    8010586e <alltraps>
-
-80105f2e <vector59>:
-.globl vector59
-vector59:
-  pushl $0
-80105f2e:	6a 00                	push   $0x0
-  pushl $59
-80105f30:	6a 3b                	push   $0x3b
-  jmp alltraps
-80105f32:	e9 37 f9 ff ff       	jmp    8010586e <alltraps>
-
-80105f37 <vector60>:
-.globl vector60
-vector60:
-  pushl $0
-80105f37:	6a 00                	push   $0x0
-  pushl $60
-80105f39:	6a 3c                	push   $0x3c
-  jmp alltraps
-80105f3b:	e9 2e f9 ff ff       	jmp    8010586e <alltraps>
-
-80105f40 <vector61>:
-.globl vector61
-vector61:
-  pushl $0
-80105f40:	6a 00                	push   $0x0
-  pushl $61
-80105f42:	6a 3d                	push   $0x3d
-  jmp alltraps
-80105f44:	e9 25 f9 ff ff       	jmp    8010586e <alltraps>
-
-80105f49 <vector62>:
-.globl vector62
-vector62:
-  pushl $0
-80105f49:	6a 00                	push   $0x0
-  pushl $62
-80105f4b:	6a 3e                	push   $0x3e
-  jmp alltraps
-80105f4d:	e9 1c f9 ff ff       	jmp    8010586e <alltraps>
-
-80105f52 <vector63>:
-.globl vector63
-vector63:
-  pushl $0
-80105f52:	6a 00                	push   $0x0
-  pushl $63
-80105f54:	6a 3f                	push   $0x3f
-  jmp alltraps
-80105f56:	e9 13 f9 ff ff       	jmp    8010586e <alltraps>
-
-80105f5b <vector64>:
-.globl vector64
-vector64:
-  pushl $0
-80105f5b:	6a 00                	push   $0x0
-  pushl $64
-80105f5d:	6a 40                	push   $0x40
-  jmp alltraps
-80105f5f:	e9 0a f9 ff ff       	jmp    8010586e <alltraps>
-
-80105f64 <vector65>:
-.globl vector65
-vector65:
-  pushl $0
-80105f64:	6a 00                	push   $0x0
-  pushl $65
-80105f66:	6a 41                	push   $0x41
-  jmp alltraps
-80105f68:	e9 01 f9 ff ff       	jmp    8010586e <alltraps>
-
-80105f6d <vector66>:
-.globl vector66
-vector66:
-  pushl $0
-80105f6d:	6a 00                	push   $0x0
-  pushl $66
-80105f6f:	6a 42                	push   $0x42
-  jmp alltraps
-80105f71:	e9 f8 f8 ff ff       	jmp    8010586e <alltraps>
-
-80105f76 <vector67>:
-.globl vector67
-vector67:
-  pushl $0
-80105f76:	6a 00                	push   $0x0
-  pushl $67
-80105f78:	6a 43                	push   $0x43
-  jmp alltraps
-80105f7a:	e9 ef f8 ff ff       	jmp    8010586e <alltraps>
-
-80105f7f <vector68>:
-.globl vector68
-vector68:
-  pushl $0
-80105f7f:	6a 00                	push   $0x0
-  pushl $68
-80105f81:	6a 44                	push   $0x44
-  jmp alltraps
-80105f83:	e9 e6 f8 ff ff       	jmp    8010586e <alltraps>
-
-80105f88 <vector69>:
-.globl vector69
-vector69:
-  pushl $0
-80105f88:	6a 00                	push   $0x0
-  pushl $69
-80105f8a:	6a 45                	push   $0x45
-  jmp alltraps
-80105f8c:	e9 dd f8 ff ff       	jmp    8010586e <alltraps>
-
-80105f91 <vector70>:
-.globl vector70
-vector70:
-  pushl $0
-80105f91:	6a 00                	push   $0x0
-  pushl $70
-80105f93:	6a 46                	push   $0x46
-  jmp alltraps
-80105f95:	e9 d4 f8 ff ff       	jmp    8010586e <alltraps>
-
-80105f9a <vector71>:
-.globl vector71
-vector71:
-  pushl $0
-80105f9a:	6a 00                	push   $0x0
-  pushl $71
-80105f9c:	6a 47                	push   $0x47
-  jmp alltraps
-80105f9e:	e9 cb f8 ff ff       	jmp    8010586e <alltraps>
-
-80105fa3 <vector72>:
-.globl vector72
-vector72:
-  pushl $0
-80105fa3:	6a 00                	push   $0x0
-  pushl $72
-80105fa5:	6a 48                	push   $0x48
-  jmp alltraps
-80105fa7:	e9 c2 f8 ff ff       	jmp    8010586e <alltraps>
-
-80105fac <vector73>:
-.globl vector73
-vector73:
-  pushl $0
-80105fac:	6a 00                	push   $0x0
-  pushl $73
-80105fae:	6a 49                	push   $0x49
-  jmp alltraps
-80105fb0:	e9 b9 f8 ff ff       	jmp    8010586e <alltraps>
-
-80105fb5 <vector74>:
-.globl vector74
-vector74:
-  pushl $0
-80105fb5:	6a 00                	push   $0x0
-  pushl $74
-80105fb7:	6a 4a                	push   $0x4a
-  jmp alltraps
-80105fb9:	e9 b0 f8 ff ff       	jmp    8010586e <alltraps>
-
-80105fbe <vector75>:
-.globl vector75
-vector75:
-  pushl $0
-80105fbe:	6a 00                	push   $0x0
-  pushl $75
-80105fc0:	6a 4b                	push   $0x4b
-  jmp alltraps
-80105fc2:	e9 a7 f8 ff ff       	jmp    8010586e <alltraps>
-
-80105fc7 <vector76>:
-.globl vector76
-vector76:
-  pushl $0
-80105fc7:	6a 00                	push   $0x0
-  pushl $76
-80105fc9:	6a 4c                	push   $0x4c
-  jmp alltraps
-80105fcb:	e9 9e f8 ff ff       	jmp    8010586e <alltraps>
-
-80105fd0 <vector77>:
-.globl vector77
-vector77:
-  pushl $0
-80105fd0:	6a 00                	push   $0x0
-  pushl $77
-80105fd2:	6a 4d                	push   $0x4d
-  jmp alltraps
-80105fd4:	e9 95 f8 ff ff       	jmp    8010586e <alltraps>
-
-80105fd9 <vector78>:
-.globl vector78
-vector78:
-  pushl $0
-80105fd9:	6a 00                	push   $0x0
-  pushl $78
-80105fdb:	6a 4e                	push   $0x4e
-  jmp alltraps
-80105fdd:	e9 8c f8 ff ff       	jmp    8010586e <alltraps>
-
-80105fe2 <vector79>:
-.globl vector79
-vector79:
-  pushl $0
-80105fe2:	6a 00                	push   $0x0
-  pushl $79
-80105fe4:	6a 4f                	push   $0x4f
-  jmp alltraps
-80105fe6:	e9 83 f8 ff ff       	jmp    8010586e <alltraps>
-
-80105feb <vector80>:
-.globl vector80
-vector80:
-  pushl $0
-80105feb:	6a 00                	push   $0x0
-  pushl $80
-80105fed:	6a 50                	push   $0x50
-  jmp alltraps
-80105fef:	e9 7a f8 ff ff       	jmp    8010586e <alltraps>
-
-80105ff4 <vector81>:
-.globl vector81
-vector81:
-  pushl $0
-80105ff4:	6a 00                	push   $0x0
-  pushl $81
-80105ff6:	6a 51                	push   $0x51
-  jmp alltraps
-80105ff8:	e9 71 f8 ff ff       	jmp    8010586e <alltraps>
-
-80105ffd <vector82>:
-.globl vector82
-vector82:
-  pushl $0
-80105ffd:	6a 00                	push   $0x0
-  pushl $82
-80105fff:	6a 52                	push   $0x52
-  jmp alltraps
-80106001:	e9 68 f8 ff ff       	jmp    8010586e <alltraps>
-
-80106006 <vector83>:
-.globl vector83
-vector83:
-  pushl $0
-80106006:	6a 00                	push   $0x0
-  pushl $83
-80106008:	6a 53                	push   $0x53
-  jmp alltraps
-8010600a:	e9 5f f8 ff ff       	jmp    8010586e <alltraps>
-
-8010600f <vector84>:
-.globl vector84
-vector84:
-  pushl $0
-8010600f:	6a 00                	push   $0x0
-  pushl $84
-80106011:	6a 54                	push   $0x54
-  jmp alltraps
-80106013:	e9 56 f8 ff ff       	jmp    8010586e <alltraps>
-
-80106018 <vector85>:
-.globl vector85
-vector85:
-  pushl $0
-80106018:	6a 00                	push   $0x0
-  pushl $85
-8010601a:	6a 55                	push   $0x55
-  jmp alltraps
-8010601c:	e9 4d f8 ff ff       	jmp    8010586e <alltraps>
-
-80106021 <vector86>:
-.globl vector86
-vector86:
-  pushl $0
-80106021:	6a 00                	push   $0x0
-  pushl $86
-80106023:	6a 56                	push   $0x56
-  jmp alltraps
-80106025:	e9 44 f8 ff ff       	jmp    8010586e <alltraps>
-
-8010602a <vector87>:
-.globl vector87
-vector87:
-  pushl $0
-8010602a:	6a 00                	push   $0x0
-  pushl $87
-8010602c:	6a 57                	push   $0x57
-  jmp alltraps
-8010602e:	e9 3b f8 ff ff       	jmp    8010586e <alltraps>
-
-80106033 <vector88>:
-.globl vector88
-vector88:
-  pushl $0
-80106033:	6a 00                	push   $0x0
-  pushl $88
-80106035:	6a 58                	push   $0x58
-  jmp alltraps
-80106037:	e9 32 f8 ff ff       	jmp    8010586e <alltraps>
-
-8010603c <vector89>:
-.globl vector89
-vector89:
-  pushl $0
-8010603c:	6a 00                	push   $0x0
-  pushl $89
-8010603e:	6a 59                	push   $0x59
-  jmp alltraps
-80106040:	e9 29 f8 ff ff       	jmp    8010586e <alltraps>
-
-80106045 <vector90>:
-.globl vector90
-vector90:
-  pushl $0
-80106045:	6a 00                	push   $0x0
-  pushl $90
-80106047:	6a 5a                	push   $0x5a
-  jmp alltraps
-80106049:	e9 20 f8 ff ff       	jmp    8010586e <alltraps>
-
-8010604e <vector91>:
-.globl vector91
-vector91:
-  pushl $0
-8010604e:	6a 00                	push   $0x0
-  pushl $91
-80106050:	6a 5b                	push   $0x5b
-  jmp alltraps
-80106052:	e9 17 f8 ff ff       	jmp    8010586e <alltraps>
-
-80106057 <vector92>:
-.globl vector92
-vector92:
-  pushl $0
-80106057:	6a 00                	push   $0x0
-  pushl $92
-80106059:	6a 5c                	push   $0x5c
-  jmp alltraps
-8010605b:	e9 0e f8 ff ff       	jmp    8010586e <alltraps>
-
-80106060 <vector93>:
-.globl vector93
-vector93:
-  pushl $0
-80106060:	6a 00                	push   $0x0
-  pushl $93
-80106062:	6a 5d                	push   $0x5d
-  jmp alltraps
-80106064:	e9 05 f8 ff ff       	jmp    8010586e <alltraps>
-
-80106069 <vector94>:
-.globl vector94
-vector94:
-  pushl $0
-80106069:	6a 00                	push   $0x0
-  pushl $94
-8010606b:	6a 5e                	push   $0x5e
-  jmp alltraps
-8010606d:	e9 fc f7 ff ff       	jmp    8010586e <alltraps>
-
-80106072 <vector95>:
-.globl vector95
-vector95:
-  pushl $0
-80106072:	6a 00                	push   $0x0
-  pushl $95
-80106074:	6a 5f                	push   $0x5f
-  jmp alltraps
-80106076:	e9 f3 f7 ff ff       	jmp    8010586e <alltraps>
-
-8010607b <vector96>:
-.globl vector96
-vector96:
-  pushl $0
-8010607b:	6a 00                	push   $0x0
-  pushl $96
-8010607d:	6a 60                	push   $0x60
-  jmp alltraps
-8010607f:	e9 ea f7 ff ff       	jmp    8010586e <alltraps>
-
-80106084 <vector97>:
-.globl vector97
-vector97:
-  pushl $0
-80106084:	6a 00                	push   $0x0
-  pushl $97
-80106086:	6a 61                	push   $0x61
-  jmp alltraps
-80106088:	e9 e1 f7 ff ff       	jmp    8010586e <alltraps>
-
-8010608d <vector98>:
-.globl vector98
-vector98:
-  pushl $0
-8010608d:	6a 00                	push   $0x0
-  pushl $98
-8010608f:	6a 62                	push   $0x62
-  jmp alltraps
-80106091:	e9 d8 f7 ff ff       	jmp    8010586e <alltraps>
-
-80106096 <vector99>:
-.globl vector99
-vector99:
-  pushl $0
-80106096:	6a 00                	push   $0x0
-  pushl $99
-80106098:	6a 63                	push   $0x63
-  jmp alltraps
-8010609a:	e9 cf f7 ff ff       	jmp    8010586e <alltraps>
-
-8010609f <vector100>:
-.globl vector100
-vector100:
-  pushl $0
-8010609f:	6a 00                	push   $0x0
-  pushl $100
-801060a1:	6a 64                	push   $0x64
-  jmp alltraps
-801060a3:	e9 c6 f7 ff ff       	jmp    8010586e <alltraps>
-
-801060a8 <vector101>:
-.globl vector101
-vector101:
-  pushl $0
-801060a8:	6a 00                	push   $0x0
-  pushl $101
-801060aa:	6a 65                	push   $0x65
-  jmp alltraps
-801060ac:	e9 bd f7 ff ff       	jmp    8010586e <alltraps>
-
-801060b1 <vector102>:
-.globl vector102
-vector102:
-  pushl $0
-801060b1:	6a 00                	push   $0x0
-  pushl $102
-801060b3:	6a 66                	push   $0x66
-  jmp alltraps
-801060b5:	e9 b4 f7 ff ff       	jmp    8010586e <alltraps>
-
-801060ba <vector103>:
-.globl vector103
-vector103:
-  pushl $0
-801060ba:	6a 00                	push   $0x0
-  pushl $103
-801060bc:	6a 67                	push   $0x67
-  jmp alltraps
-801060be:	e9 ab f7 ff ff       	jmp    8010586e <alltraps>
-
-801060c3 <vector104>:
-.globl vector104
-vector104:
-  pushl $0
-801060c3:	6a 00                	push   $0x0
-  pushl $104
-801060c5:	6a 68                	push   $0x68
-  jmp alltraps
-801060c7:	e9 a2 f7 ff ff       	jmp    8010586e <alltraps>
-
-801060cc <vector105>:
-.globl vector105
-vector105:
-  pushl $0
-801060cc:	6a 00                	push   $0x0
-  pushl $105
-801060ce:	6a 69                	push   $0x69
-  jmp alltraps
-801060d0:	e9 99 f7 ff ff       	jmp    8010586e <alltraps>
-
-801060d5 <vector106>:
-.globl vector106
-vector106:
-  pushl $0
-801060d5:	6a 00                	push   $0x0
-  pushl $106
-801060d7:	6a 6a                	push   $0x6a
-  jmp alltraps
-801060d9:	e9 90 f7 ff ff       	jmp    8010586e <alltraps>
-
-801060de <vector107>:
-.globl vector107
-vector107:
-  pushl $0
-801060de:	6a 00                	push   $0x0
-  pushl $107
-801060e0:	6a 6b                	push   $0x6b
-  jmp alltraps
-801060e2:	e9 87 f7 ff ff       	jmp    8010586e <alltraps>
-
-801060e7 <vector108>:
-.globl vector108
-vector108:
-  pushl $0
-801060e7:	6a 00                	push   $0x0
-  pushl $108
-801060e9:	6a 6c                	push   $0x6c
-  jmp alltraps
-801060eb:	e9 7e f7 ff ff       	jmp    8010586e <alltraps>
-
-801060f0 <vector109>:
-.globl vector109
-vector109:
-  pushl $0
-801060f0:	6a 00                	push   $0x0
-  pushl $109
-801060f2:	6a 6d                	push   $0x6d
-  jmp alltraps
-801060f4:	e9 75 f7 ff ff       	jmp    8010586e <alltraps>
-
-801060f9 <vector110>:
-.globl vector110
-vector110:
-  pushl $0
-801060f9:	6a 00                	push   $0x0
-  pushl $110
-801060fb:	6a 6e                	push   $0x6e
-  jmp alltraps
-801060fd:	e9 6c f7 ff ff       	jmp    8010586e <alltraps>
-
-80106102 <vector111>:
-.globl vector111
-vector111:
-  pushl $0
-80106102:	6a 00                	push   $0x0
-  pushl $111
-80106104:	6a 6f                	push   $0x6f
-  jmp alltraps
-80106106:	e9 63 f7 ff ff       	jmp    8010586e <alltraps>
-
-8010610b <vector112>:
-.globl vector112
-vector112:
-  pushl $0
-8010610b:	6a 00                	push   $0x0
-  pushl $112
-8010610d:	6a 70                	push   $0x70
-  jmp alltraps
-8010610f:	e9 5a f7 ff ff       	jmp    8010586e <alltraps>
-
-80106114 <vector113>:
-.globl vector113
-vector113:
-  pushl $0
-80106114:	6a 00                	push   $0x0
-  pushl $113
-80106116:	6a 71                	push   $0x71
-  jmp alltraps
-80106118:	e9 51 f7 ff ff       	jmp    8010586e <alltraps>
-
-8010611d <vector114>:
-.globl vector114
-vector114:
-  pushl $0
-8010611d:	6a 00                	push   $0x0
-  pushl $114
-8010611f:	6a 72                	push   $0x72
-  jmp alltraps
-80106121:	e9 48 f7 ff ff       	jmp    8010586e <alltraps>
-
-80106126 <vector115>:
-.globl vector115
-vector115:
-  pushl $0
-80106126:	6a 00                	push   $0x0
-  pushl $115
-80106128:	6a 73                	push   $0x73
-  jmp alltraps
-8010612a:	e9 3f f7 ff ff       	jmp    8010586e <alltraps>
-
-8010612f <vector116>:
-.globl vector116
-vector116:
-  pushl $0
-8010612f:	6a 00                	push   $0x0
-  pushl $116
-80106131:	6a 74                	push   $0x74
-  jmp alltraps
-80106133:	e9 36 f7 ff ff       	jmp    8010586e <alltraps>
-
-80106138 <vector117>:
-.globl vector117
-vector117:
-  pushl $0
-80106138:	6a 00                	push   $0x0
-  pushl $117
-8010613a:	6a 75                	push   $0x75
-  jmp alltraps
-8010613c:	e9 2d f7 ff ff       	jmp    8010586e <alltraps>
-
-80106141 <vector118>:
-.globl vector118
-vector118:
-  pushl $0
-80106141:	6a 00                	push   $0x0
-  pushl $118
-80106143:	6a 76                	push   $0x76
-  jmp alltraps
-80106145:	e9 24 f7 ff ff       	jmp    8010586e <alltraps>
-
-8010614a <vector119>:
-.globl vector119
-vector119:
-  pushl $0
-8010614a:	6a 00                	push   $0x0
-  pushl $119
-8010614c:	6a 77                	push   $0x77
-  jmp alltraps
-8010614e:	e9 1b f7 ff ff       	jmp    8010586e <alltraps>
-
-80106153 <vector120>:
-.globl vector120
-vector120:
-  pushl $0
-80106153:	6a 00                	push   $0x0
-  pushl $120
-80106155:	6a 78                	push   $0x78
-  jmp alltraps
-80106157:	e9 12 f7 ff ff       	jmp    8010586e <alltraps>
-
-8010615c <vector121>:
-.globl vector121
-vector121:
-  pushl $0
-8010615c:	6a 00                	push   $0x0
-  pushl $121
-8010615e:	6a 79                	push   $0x79
-  jmp alltraps
-80106160:	e9 09 f7 ff ff       	jmp    8010586e <alltraps>
-
-80106165 <vector122>:
-.globl vector122
-vector122:
-  pushl $0
-80106165:	6a 00                	push   $0x0
-  pushl $122
-80106167:	6a 7a                	push   $0x7a
-  jmp alltraps
-80106169:	e9 00 f7 ff ff       	jmp    8010586e <alltraps>
-
-8010616e <vector123>:
-.globl vector123
-vector123:
-  pushl $0
-8010616e:	6a 00                	push   $0x0
-  pushl $123
-80106170:	6a 7b                	push   $0x7b
-  jmp alltraps
-80106172:	e9 f7 f6 ff ff       	jmp    8010586e <alltraps>
-
-80106177 <vector124>:
-.globl vector124
-vector124:
-  pushl $0
-80106177:	6a 00                	push   $0x0
-  pushl $124
-80106179:	6a 7c                	push   $0x7c
-  jmp alltraps
-8010617b:	e9 ee f6 ff ff       	jmp    8010586e <alltraps>
-
-80106180 <vector125>:
-.globl vector125
-vector125:
-  pushl $0
-80106180:	6a 00                	push   $0x0
-  pushl $125
-80106182:	6a 7d                	push   $0x7d
-  jmp alltraps
-80106184:	e9 e5 f6 ff ff       	jmp    8010586e <alltraps>
-
-80106189 <vector126>:
-.globl vector126
-vector126:
-  pushl $0
-80106189:	6a 00                	push   $0x0
-  pushl $126
-8010618b:	6a 7e                	push   $0x7e
-  jmp alltraps
-8010618d:	e9 dc f6 ff ff       	jmp    8010586e <alltraps>
-
-80106192 <vector127>:
-.globl vector127
-vector127:
-  pushl $0
-80106192:	6a 00                	push   $0x0
-  pushl $127
-80106194:	6a 7f                	push   $0x7f
-  jmp alltraps
-80106196:	e9 d3 f6 ff ff       	jmp    8010586e <alltraps>
-
-8010619b <vector128>:
-.globl vector128
-vector128:
-  pushl $0
-8010619b:	6a 00                	push   $0x0
-  pushl $128
-8010619d:	68 80 00 00 00       	push   $0x80
-  jmp alltraps
-801061a2:	e9 c7 f6 ff ff       	jmp    8010586e <alltraps>
-
-801061a7 <vector129>:
-.globl vector129
-vector129:
-  pushl $0
-801061a7:	6a 00                	push   $0x0
-  pushl $129
-801061a9:	68 81 00 00 00       	push   $0x81
-  jmp alltraps
-801061ae:	e9 bb f6 ff ff       	jmp    8010586e <alltraps>
-
-801061b3 <vector130>:
-.globl vector130
-vector130:
-  pushl $0
-801061b3:	6a 00                	push   $0x0
-  pushl $130
-801061b5:	68 82 00 00 00       	push   $0x82
-  jmp alltraps
-801061ba:	e9 af f6 ff ff       	jmp    8010586e <alltraps>
-
-801061bf <vector131>:
-.globl vector131
-vector131:
-  pushl $0
-801061bf:	6a 00                	push   $0x0
-  pushl $131
-801061c1:	68 83 00 00 00       	push   $0x83
-  jmp alltraps
-801061c6:	e9 a3 f6 ff ff       	jmp    8010586e <alltraps>
-
-801061cb <vector132>:
-.globl vector132
-vector132:
-  pushl $0
-801061cb:	6a 00                	push   $0x0
-  pushl $132
-801061cd:	68 84 00 00 00       	push   $0x84
-  jmp alltraps
-801061d2:	e9 97 f6 ff ff       	jmp    8010586e <alltraps>
-
-801061d7 <vector133>:
-.globl vector133
-vector133:
-  pushl $0
-801061d7:	6a 00                	push   $0x0
-  pushl $133
-801061d9:	68 85 00 00 00       	push   $0x85
-  jmp alltraps
-801061de:	e9 8b f6 ff ff       	jmp    8010586e <alltraps>
-
-801061e3 <vector134>:
-.globl vector134
-vector134:
-  pushl $0
-801061e3:	6a 00                	push   $0x0
-  pushl $134
-801061e5:	68 86 00 00 00       	push   $0x86
-  jmp alltraps
-801061ea:	e9 7f f6 ff ff       	jmp    8010586e <alltraps>
-
-801061ef <vector135>:
-.globl vector135
-vector135:
-  pushl $0
-801061ef:	6a 00                	push   $0x0
-  pushl $135
-801061f1:	68 87 00 00 00       	push   $0x87
-  jmp alltraps
-801061f6:	e9 73 f6 ff ff       	jmp    8010586e <alltraps>
-
-801061fb <vector136>:
-.globl vector136
-vector136:
-  pushl $0
-801061fb:	6a 00                	push   $0x0
-  pushl $136
-801061fd:	68 88 00 00 00       	push   $0x88
-  jmp alltraps
-80106202:	e9 67 f6 ff ff       	jmp    8010586e <alltraps>
-
-80106207 <vector137>:
-.globl vector137
-vector137:
-  pushl $0
-80106207:	6a 00                	push   $0x0
-  pushl $137
-80106209:	68 89 00 00 00       	push   $0x89
-  jmp alltraps
-8010620e:	e9 5b f6 ff ff       	jmp    8010586e <alltraps>
-
-80106213 <vector138>:
-.globl vector138
-vector138:
-  pushl $0
-80106213:	6a 00                	push   $0x0
-  pushl $138
-80106215:	68 8a 00 00 00       	push   $0x8a
-  jmp alltraps
-8010621a:	e9 4f f6 ff ff       	jmp    8010586e <alltraps>
-
-8010621f <vector139>:
-.globl vector139
-vector139:
-  pushl $0
-8010621f:	6a 00                	push   $0x0
-  pushl $139
-80106221:	68 8b 00 00 00       	push   $0x8b
-  jmp alltraps
-80106226:	e9 43 f6 ff ff       	jmp    8010586e <alltraps>
-
-8010622b <vector140>:
-.globl vector140
-vector140:
-  pushl $0
-8010622b:	6a 00                	push   $0x0
-  pushl $140
-8010622d:	68 8c 00 00 00       	push   $0x8c
-  jmp alltraps
-80106232:	e9 37 f6 ff ff       	jmp    8010586e <alltraps>
-
-80106237 <vector141>:
-.globl vector141
-vector141:
-  pushl $0
-80106237:	6a 00                	push   $0x0
-  pushl $141
-80106239:	68 8d 00 00 00       	push   $0x8d
-  jmp alltraps
-8010623e:	e9 2b f6 ff ff       	jmp    8010586e <alltraps>
-
-80106243 <vector142>:
-.globl vector142
-vector142:
-  pushl $0
-80106243:	6a 00                	push   $0x0
-  pushl $142
-80106245:	68 8e 00 00 00       	push   $0x8e
-  jmp alltraps
-8010624a:	e9 1f f6 ff ff       	jmp    8010586e <alltraps>
-
-8010624f <vector143>:
-.globl vector143
-vector143:
-  pushl $0
-8010624f:	6a 00                	push   $0x0
-  pushl $143
-80106251:	68 8f 00 00 00       	push   $0x8f
-  jmp alltraps
-80106256:	e9 13 f6 ff ff       	jmp    8010586e <alltraps>
-
-8010625b <vector144>:
-.globl vector144
-vector144:
-  pushl $0
-8010625b:	6a 00                	push   $0x0
-  pushl $144
-8010625d:	68 90 00 00 00       	push   $0x90
-  jmp alltraps
-80106262:	e9 07 f6 ff ff       	jmp    8010586e <alltraps>
-
-80106267 <vector145>:
-.globl vector145
-vector145:
-  pushl $0
-80106267:	6a 00                	push   $0x0
-  pushl $145
-80106269:	68 91 00 00 00       	push   $0x91
-  jmp alltraps
-8010626e:	e9 fb f5 ff ff       	jmp    8010586e <alltraps>
-
-80106273 <vector146>:
-.globl vector146
-vector146:
-  pushl $0
-80106273:	6a 00                	push   $0x0
-  pushl $146
-80106275:	68 92 00 00 00       	push   $0x92
-  jmp alltraps
-8010627a:	e9 ef f5 ff ff       	jmp    8010586e <alltraps>
-
-8010627f <vector147>:
-.globl vector147
-vector147:
-  pushl $0
-8010627f:	6a 00                	push   $0x0
-  pushl $147
-80106281:	68 93 00 00 00       	push   $0x93
-  jmp alltraps
-80106286:	e9 e3 f5 ff ff       	jmp    8010586e <alltraps>
-
-8010628b <vector148>:
-.globl vector148
-vector148:
-  pushl $0
-8010628b:	6a 00                	push   $0x0
-  pushl $148
-8010628d:	68 94 00 00 00       	push   $0x94
-  jmp alltraps
-80106292:	e9 d7 f5 ff ff       	jmp    8010586e <alltraps>
-
-80106297 <vector149>:
-.globl vector149
-vector149:
-  pushl $0
-80106297:	6a 00                	push   $0x0
-  pushl $149
-80106299:	68 95 00 00 00       	push   $0x95
-  jmp alltraps
-8010629e:	e9 cb f5 ff ff       	jmp    8010586e <alltraps>
-
-801062a3 <vector150>:
-.globl vector150
-vector150:
-  pushl $0
-801062a3:	6a 00                	push   $0x0
-  pushl $150
-801062a5:	68 96 00 00 00       	push   $0x96
-  jmp alltraps
-801062aa:	e9 bf f5 ff ff       	jmp    8010586e <alltraps>
-
-801062af <vector151>:
-.globl vector151
-vector151:
-  pushl $0
-801062af:	6a 00                	push   $0x0
-  pushl $151
-801062b1:	68 97 00 00 00       	push   $0x97
-  jmp alltraps
-801062b6:	e9 b3 f5 ff ff       	jmp    8010586e <alltraps>
-
-801062bb <vector152>:
-.globl vector152
-vector152:
-  pushl $0
-801062bb:	6a 00                	push   $0x0
-  pushl $152
-801062bd:	68 98 00 00 00       	push   $0x98
-  jmp alltraps
-801062c2:	e9 a7 f5 ff ff       	jmp    8010586e <alltraps>
-
-801062c7 <vector153>:
-.globl vector153
-vector153:
-  pushl $0
-801062c7:	6a 00                	push   $0x0
-  pushl $153
-801062c9:	68 99 00 00 00       	push   $0x99
-  jmp alltraps
-801062ce:	e9 9b f5 ff ff       	jmp    8010586e <alltraps>
-
-801062d3 <vector154>:
-.globl vector154
-vector154:
-  pushl $0
-801062d3:	6a 00                	push   $0x0
-  pushl $154
-801062d5:	68 9a 00 00 00       	push   $0x9a
-  jmp alltraps
-801062da:	e9 8f f5 ff ff       	jmp    8010586e <alltraps>
-
-801062df <vector155>:
-.globl vector155
-vector155:
-  pushl $0
-801062df:	6a 00                	push   $0x0
-  pushl $155
-801062e1:	68 9b 00 00 00       	push   $0x9b
-  jmp alltraps
-801062e6:	e9 83 f5 ff ff       	jmp    8010586e <alltraps>
-
-801062eb <vector156>:
-.globl vector156
-vector156:
-  pushl $0
-801062eb:	6a 00                	push   $0x0
-  pushl $156
-801062ed:	68 9c 00 00 00       	push   $0x9c
-  jmp alltraps
-801062f2:	e9 77 f5 ff ff       	jmp    8010586e <alltraps>
-
-801062f7 <vector157>:
-.globl vector157
-vector157:
-  pushl $0
-801062f7:	6a 00                	push   $0x0
-  pushl $157
-801062f9:	68 9d 00 00 00       	push   $0x9d
-  jmp alltraps
-801062fe:	e9 6b f5 ff ff       	jmp    8010586e <alltraps>
-
-80106303 <vector158>:
-.globl vector158
-vector158:
-  pushl $0
-80106303:	6a 00                	push   $0x0
-  pushl $158
-80106305:	68 9e 00 00 00       	push   $0x9e
-  jmp alltraps
-8010630a:	e9 5f f5 ff ff       	jmp    8010586e <alltraps>
-
-8010630f <vector159>:
-.globl vector159
-vector159:
-  pushl $0
-8010630f:	6a 00                	push   $0x0
-  pushl $159
-80106311:	68 9f 00 00 00       	push   $0x9f
-  jmp alltraps
-80106316:	e9 53 f5 ff ff       	jmp    8010586e <alltraps>
-
-8010631b <vector160>:
-.globl vector160
-vector160:
-  pushl $0
-8010631b:	6a 00                	push   $0x0
-  pushl $160
-8010631d:	68 a0 00 00 00       	push   $0xa0
-  jmp alltraps
-80106322:	e9 47 f5 ff ff       	jmp    8010586e <alltraps>
-
-80106327 <vector161>:
-.globl vector161
-vector161:
-  pushl $0
-80106327:	6a 00                	push   $0x0
-  pushl $161
-80106329:	68 a1 00 00 00       	push   $0xa1
-  jmp alltraps
-8010632e:	e9 3b f5 ff ff       	jmp    8010586e <alltraps>
-
-80106333 <vector162>:
-.globl vector162
-vector162:
-  pushl $0
-80106333:	6a 00                	push   $0x0
-  pushl $162
-80106335:	68 a2 00 00 00       	push   $0xa2
-  jmp alltraps
-8010633a:	e9 2f f5 ff ff       	jmp    8010586e <alltraps>
-
-8010633f <vector163>:
-.globl vector163
-vector163:
-  pushl $0
-8010633f:	6a 00                	push   $0x0
-  pushl $163
-80106341:	68 a3 00 00 00       	push   $0xa3
-  jmp alltraps
-80106346:	e9 23 f5 ff ff       	jmp    8010586e <alltraps>
-
-8010634b <vector164>:
-.globl vector164
-vector164:
-  pushl $0
-8010634b:	6a 00                	push   $0x0
-  pushl $164
-8010634d:	68 a4 00 00 00       	push   $0xa4
-  jmp alltraps
-80106352:	e9 17 f5 ff ff       	jmp    8010586e <alltraps>
-
-80106357 <vector165>:
-.globl vector165
-vector165:
-  pushl $0
-80106357:	6a 00                	push   $0x0
-  pushl $165
-80106359:	68 a5 00 00 00       	push   $0xa5
-  jmp alltraps
-8010635e:	e9 0b f5 ff ff       	jmp    8010586e <alltraps>
-
-80106363 <vector166>:
-.globl vector166
-vector166:
-  pushl $0
-80106363:	6a 00                	push   $0x0
-  pushl $166
-80106365:	68 a6 00 00 00       	push   $0xa6
-  jmp alltraps
-8010636a:	e9 ff f4 ff ff       	jmp    8010586e <alltraps>
-
-8010636f <vector167>:
-.globl vector167
-vector167:
-  pushl $0
-8010636f:	6a 00                	push   $0x0
-  pushl $167
-80106371:	68 a7 00 00 00       	push   $0xa7
-  jmp alltraps
-80106376:	e9 f3 f4 ff ff       	jmp    8010586e <alltraps>
-
-8010637b <vector168>:
-.globl vector168
-vector168:
-  pushl $0
-8010637b:	6a 00                	push   $0x0
-  pushl $168
-8010637d:	68 a8 00 00 00       	push   $0xa8
-  jmp alltraps
-80106382:	e9 e7 f4 ff ff       	jmp    8010586e <alltraps>
-
-80106387 <vector169>:
-.globl vector169
-vector169:
-  pushl $0
-80106387:	6a 00                	push   $0x0
-  pushl $169
-80106389:	68 a9 00 00 00       	push   $0xa9
-  jmp alltraps
-8010638e:	e9 db f4 ff ff       	jmp    8010586e <alltraps>
-
-80106393 <vector170>:
-.globl vector170
-vector170:
-  pushl $0
-80106393:	6a 00                	push   $0x0
-  pushl $170
-80106395:	68 aa 00 00 00       	push   $0xaa
-  jmp alltraps
-8010639a:	e9 cf f4 ff ff       	jmp    8010586e <alltraps>
-
-8010639f <vector171>:
-.globl vector171
-vector171:
-  pushl $0
-8010639f:	6a 00                	push   $0x0
-  pushl $171
-801063a1:	68 ab 00 00 00       	push   $0xab
-  jmp alltraps
-801063a6:	e9 c3 f4 ff ff       	jmp    8010586e <alltraps>
-
-801063ab <vector172>:
-.globl vector172
-vector172:
-  pushl $0
-801063ab:	6a 00                	push   $0x0
-  pushl $172
-801063ad:	68 ac 00 00 00       	push   $0xac
-  jmp alltraps
-801063b2:	e9 b7 f4 ff ff       	jmp    8010586e <alltraps>
-
-801063b7 <vector173>:
-.globl vector173
-vector173:
-  pushl $0
-801063b7:	6a 00                	push   $0x0
-  pushl $173
-801063b9:	68 ad 00 00 00       	push   $0xad
-  jmp alltraps
-801063be:	e9 ab f4 ff ff       	jmp    8010586e <alltraps>
-
-801063c3 <vector174>:
-.globl vector174
-vector174:
-  pushl $0
-801063c3:	6a 00                	push   $0x0
-  pushl $174
-801063c5:	68 ae 00 00 00       	push   $0xae
-  jmp alltraps
-801063ca:	e9 9f f4 ff ff       	jmp    8010586e <alltraps>
-
-801063cf <vector175>:
-.globl vector175
-vector175:
-  pushl $0
-801063cf:	6a 00                	push   $0x0
-  pushl $175
-801063d1:	68 af 00 00 00       	push   $0xaf
-  jmp alltraps
-801063d6:	e9 93 f4 ff ff       	jmp    8010586e <alltraps>
-
-801063db <vector176>:
-.globl vector176
-vector176:
-  pushl $0
-801063db:	6a 00                	push   $0x0
-  pushl $176
-801063dd:	68 b0 00 00 00       	push   $0xb0
-  jmp alltraps
-801063e2:	e9 87 f4 ff ff       	jmp    8010586e <alltraps>
-
-801063e7 <vector177>:
-.globl vector177
-vector177:
-  pushl $0
-801063e7:	6a 00                	push   $0x0
-  pushl $177
-801063e9:	68 b1 00 00 00       	push   $0xb1
-  jmp alltraps
-801063ee:	e9 7b f4 ff ff       	jmp    8010586e <alltraps>
-
-801063f3 <vector178>:
-.globl vector178
-vector178:
-  pushl $0
-801063f3:	6a 00                	push   $0x0
-  pushl $178
-801063f5:	68 b2 00 00 00       	push   $0xb2
-  jmp alltraps
-801063fa:	e9 6f f4 ff ff       	jmp    8010586e <alltraps>
-
-801063ff <vector179>:
-.globl vector179
-vector179:
-  pushl $0
-801063ff:	6a 00                	push   $0x0
-  pushl $179
-80106401:	68 b3 00 00 00       	push   $0xb3
-  jmp alltraps
-80106406:	e9 63 f4 ff ff       	jmp    8010586e <alltraps>
-
-8010640b <vector180>:
-.globl vector180
-vector180:
-  pushl $0
-8010640b:	6a 00                	push   $0x0
-  pushl $180
-8010640d:	68 b4 00 00 00       	push   $0xb4
-  jmp alltraps
-80106412:	e9 57 f4 ff ff       	jmp    8010586e <alltraps>
-
-80106417 <vector181>:
-.globl vector181
-vector181:
-  pushl $0
-80106417:	6a 00                	push   $0x0
-  pushl $181
-80106419:	68 b5 00 00 00       	push   $0xb5
-  jmp alltraps
-8010641e:	e9 4b f4 ff ff       	jmp    8010586e <alltraps>
-
-80106423 <vector182>:
-.globl vector182
-vector182:
-  pushl $0
-80106423:	6a 00                	push   $0x0
-  pushl $182
-80106425:	68 b6 00 00 00       	push   $0xb6
-  jmp alltraps
-8010642a:	e9 3f f4 ff ff       	jmp    8010586e <alltraps>
-
-8010642f <vector183>:
-.globl vector183
-vector183:
-  pushl $0
-8010642f:	6a 00                	push   $0x0
-  pushl $183
-80106431:	68 b7 00 00 00       	push   $0xb7
-  jmp alltraps
-80106436:	e9 33 f4 ff ff       	jmp    8010586e <alltraps>
-
-8010643b <vector184>:
-.globl vector184
-vector184:
-  pushl $0
-8010643b:	6a 00                	push   $0x0
-  pushl $184
-8010643d:	68 b8 00 00 00       	push   $0xb8
-  jmp alltraps
-80106442:	e9 27 f4 ff ff       	jmp    8010586e <alltraps>
-
-80106447 <vector185>:
-.globl vector185
-vector185:
-  pushl $0
-80106447:	6a 00                	push   $0x0
-  pushl $185
-80106449:	68 b9 00 00 00       	push   $0xb9
-  jmp alltraps
-8010644e:	e9 1b f4 ff ff       	jmp    8010586e <alltraps>
-
-80106453 <vector186>:
-.globl vector186
-vector186:
-  pushl $0
-80106453:	6a 00                	push   $0x0
-  pushl $186
-80106455:	68 ba 00 00 00       	push   $0xba
-  jmp alltraps
-8010645a:	e9 0f f4 ff ff       	jmp    8010586e <alltraps>
-
-8010645f <vector187>:
-.globl vector187
-vector187:
-  pushl $0
-8010645f:	6a 00                	push   $0x0
-  pushl $187
-80106461:	68 bb 00 00 00       	push   $0xbb
-  jmp alltraps
-80106466:	e9 03 f4 ff ff       	jmp    8010586e <alltraps>
-
-8010646b <vector188>:
-.globl vector188
-vector188:
-  pushl $0
-8010646b:	6a 00                	push   $0x0
-  pushl $188
-8010646d:	68 bc 00 00 00       	push   $0xbc
-  jmp alltraps
-80106472:	e9 f7 f3 ff ff       	jmp    8010586e <alltraps>
-
-80106477 <vector189>:
-.globl vector189
-vector189:
-  pushl $0
-80106477:	6a 00                	push   $0x0
-  pushl $189
-80106479:	68 bd 00 00 00       	push   $0xbd
-  jmp alltraps
-8010647e:	e9 eb f3 ff ff       	jmp    8010586e <alltraps>
-
-80106483 <vector190>:
-.globl vector190
-vector190:
-  pushl $0
-80106483:	6a 00                	push   $0x0
-  pushl $190
-80106485:	68 be 00 00 00       	push   $0xbe
-  jmp alltraps
-8010648a:	e9 df f3 ff ff       	jmp    8010586e <alltraps>
-
-8010648f <vector191>:
-.globl vector191
-vector191:
-  pushl $0
-8010648f:	6a 00                	push   $0x0
-  pushl $191
-80106491:	68 bf 00 00 00       	push   $0xbf
-  jmp alltraps
-80106496:	e9 d3 f3 ff ff       	jmp    8010586e <alltraps>
-
-8010649b <vector192>:
-.globl vector192
-vector192:
-  pushl $0
-8010649b:	6a 00                	push   $0x0
-  pushl $192
-8010649d:	68 c0 00 00 00       	push   $0xc0
-  jmp alltraps
-801064a2:	e9 c7 f3 ff ff       	jmp    8010586e <alltraps>
-
-801064a7 <vector193>:
-.globl vector193
-vector193:
-  pushl $0
-801064a7:	6a 00                	push   $0x0
-  pushl $193
-801064a9:	68 c1 00 00 00       	push   $0xc1
-  jmp alltraps
-801064ae:	e9 bb f3 ff ff       	jmp    8010586e <alltraps>
-
-801064b3 <vector194>:
-.globl vector194
-vector194:
-  pushl $0
-801064b3:	6a 00                	push   $0x0
-  pushl $194
-801064b5:	68 c2 00 00 00       	push   $0xc2
-  jmp alltraps
-801064ba:	e9 af f3 ff ff       	jmp    8010586e <alltraps>
-
-801064bf <vector195>:
-.globl vector195
-vector195:
-  pushl $0
-801064bf:	6a 00                	push   $0x0
-  pushl $195
-801064c1:	68 c3 00 00 00       	push   $0xc3
-  jmp alltraps
-801064c6:	e9 a3 f3 ff ff       	jmp    8010586e <alltraps>
-
-801064cb <vector196>:
-.globl vector196
-vector196:
-  pushl $0
-801064cb:	6a 00                	push   $0x0
-  pushl $196
-801064cd:	68 c4 00 00 00       	push   $0xc4
-  jmp alltraps
-801064d2:	e9 97 f3 ff ff       	jmp    8010586e <alltraps>
-
-801064d7 <vector197>:
-.globl vector197
-vector197:
-  pushl $0
-801064d7:	6a 00                	push   $0x0
-  pushl $197
-801064d9:	68 c5 00 00 00       	push   $0xc5
-  jmp alltraps
-801064de:	e9 8b f3 ff ff       	jmp    8010586e <alltraps>
-
-801064e3 <vector198>:
-.globl vector198
-vector198:
-  pushl $0
-801064e3:	6a 00                	push   $0x0
-  pushl $198
-801064e5:	68 c6 00 00 00       	push   $0xc6
-  jmp alltraps
-801064ea:	e9 7f f3 ff ff       	jmp    8010586e <alltraps>
-
-801064ef <vector199>:
-.globl vector199
-vector199:
-  pushl $0
-801064ef:	6a 00                	push   $0x0
-  pushl $199
-801064f1:	68 c7 00 00 00       	push   $0xc7
-  jmp alltraps
-801064f6:	e9 73 f3 ff ff       	jmp    8010586e <alltraps>
-
-801064fb <vector200>:
-.globl vector200
-vector200:
-  pushl $0
-801064fb:	6a 00                	push   $0x0
-  pushl $200
-801064fd:	68 c8 00 00 00       	push   $0xc8
-  jmp alltraps
-80106502:	e9 67 f3 ff ff       	jmp    8010586e <alltraps>
-
-80106507 <vector201>:
-.globl vector201
-vector201:
-  pushl $0
-80106507:	6a 00                	push   $0x0
-  pushl $201
-80106509:	68 c9 00 00 00       	push   $0xc9
-  jmp alltraps
-8010650e:	e9 5b f3 ff ff       	jmp    8010586e <alltraps>
-
-80106513 <vector202>:
-.globl vector202
-vector202:
-  pushl $0
-80106513:	6a 00                	push   $0x0
-  pushl $202
-80106515:	68 ca 00 00 00       	push   $0xca
-  jmp alltraps
-8010651a:	e9 4f f3 ff ff       	jmp    8010586e <alltraps>
-
-8010651f <vector203>:
-.globl vector203
-vector203:
-  pushl $0
-8010651f:	6a 00                	push   $0x0
-  pushl $203
-80106521:	68 cb 00 00 00       	push   $0xcb
-  jmp alltraps
-80106526:	e9 43 f3 ff ff       	jmp    8010586e <alltraps>
-
-8010652b <vector204>:
-.globl vector204
-vector204:
-  pushl $0
-8010652b:	6a 00                	push   $0x0
-  pushl $204
-8010652d:	68 cc 00 00 00       	push   $0xcc
-  jmp alltraps
-80106532:	e9 37 f3 ff ff       	jmp    8010586e <alltraps>
-
-80106537 <vector205>:
-.globl vector205
-vector205:
-  pushl $0
-80106537:	6a 00                	push   $0x0
-  pushl $205
-80106539:	68 cd 00 00 00       	push   $0xcd
-  jmp alltraps
-8010653e:	e9 2b f3 ff ff       	jmp    8010586e <alltraps>
-
-80106543 <vector206>:
-.globl vector206
-vector206:
-  pushl $0
-80106543:	6a 00                	push   $0x0
-  pushl $206
-80106545:	68 ce 00 00 00       	push   $0xce
-  jmp alltraps
-8010654a:	e9 1f f3 ff ff       	jmp    8010586e <alltraps>
-
-8010654f <vector207>:
-.globl vector207
-vector207:
-  pushl $0
-8010654f:	6a 00                	push   $0x0
-  pushl $207
-80106551:	68 cf 00 00 00       	push   $0xcf
-  jmp alltraps
-80106556:	e9 13 f3 ff ff       	jmp    8010586e <alltraps>
-
-8010655b <vector208>:
-.globl vector208
-vector208:
-  pushl $0
-8010655b:	6a 00                	push   $0x0
-  pushl $208
-8010655d:	68 d0 00 00 00       	push   $0xd0
-  jmp alltraps
-80106562:	e9 07 f3 ff ff       	jmp    8010586e <alltraps>
-
-80106567 <vector209>:
-.globl vector209
-vector209:
-  pushl $0
-80106567:	6a 00                	push   $0x0
-  pushl $209
-80106569:	68 d1 00 00 00       	push   $0xd1
-  jmp alltraps
-8010656e:	e9 fb f2 ff ff       	jmp    8010586e <alltraps>
-
-80106573 <vector210>:
-.globl vector210
-vector210:
-  pushl $0
-80106573:	6a 00                	push   $0x0
-  pushl $210
-80106575:	68 d2 00 00 00       	push   $0xd2
-  jmp alltraps
-8010657a:	e9 ef f2 ff ff       	jmp    8010586e <alltraps>
-
-8010657f <vector211>:
-.globl vector211
-vector211:
-  pushl $0
-8010657f:	6a 00                	push   $0x0
-  pushl $211
-80106581:	68 d3 00 00 00       	push   $0xd3
-  jmp alltraps
-80106586:	e9 e3 f2 ff ff       	jmp    8010586e <alltraps>
-
-8010658b <vector212>:
-.globl vector212
-vector212:
-  pushl $0
-8010658b:	6a 00                	push   $0x0
-  pushl $212
-8010658d:	68 d4 00 00 00       	push   $0xd4
-  jmp alltraps
-80106592:	e9 d7 f2 ff ff       	jmp    8010586e <alltraps>
-
-80106597 <vector213>:
-.globl vector213
-vector213:
-  pushl $0
-80106597:	6a 00                	push   $0x0
-  pushl $213
-80106599:	68 d5 00 00 00       	push   $0xd5
-  jmp alltraps
-8010659e:	e9 cb f2 ff ff       	jmp    8010586e <alltraps>
-
-801065a3 <vector214>:
-.globl vector214
-vector214:
-  pushl $0
-801065a3:	6a 00                	push   $0x0
-  pushl $214
-801065a5:	68 d6 00 00 00       	push   $0xd6
-  jmp alltraps
-801065aa:	e9 bf f2 ff ff       	jmp    8010586e <alltraps>
-
-801065af <vector215>:
-.globl vector215
-vector215:
-  pushl $0
-801065af:	6a 00                	push   $0x0
-  pushl $215
-801065b1:	68 d7 00 00 00       	push   $0xd7
-  jmp alltraps
-801065b6:	e9 b3 f2 ff ff       	jmp    8010586e <alltraps>
-
-801065bb <vector216>:
-.globl vector216
-vector216:
-  pushl $0
-801065bb:	6a 00                	push   $0x0
-  pushl $216
-801065bd:	68 d8 00 00 00       	push   $0xd8
-  jmp alltraps
-801065c2:	e9 a7 f2 ff ff       	jmp    8010586e <alltraps>
-
-801065c7 <vector217>:
-.globl vector217
-vector217:
-  pushl $0
-801065c7:	6a 00                	push   $0x0
-  pushl $217
-801065c9:	68 d9 00 00 00       	push   $0xd9
-  jmp alltraps
-801065ce:	e9 9b f2 ff ff       	jmp    8010586e <alltraps>
-
-801065d3 <vector218>:
-.globl vector218
-vector218:
-  pushl $0
-801065d3:	6a 00                	push   $0x0
-  pushl $218
-801065d5:	68 da 00 00 00       	push   $0xda
-  jmp alltraps
-801065da:	e9 8f f2 ff ff       	jmp    8010586e <alltraps>
-
-801065df <vector219>:
-.globl vector219
-vector219:
-  pushl $0
-801065df:	6a 00                	push   $0x0
-  pushl $219
-801065e1:	68 db 00 00 00       	push   $0xdb
-  jmp alltraps
-801065e6:	e9 83 f2 ff ff       	jmp    8010586e <alltraps>
-
-801065eb <vector220>:
-.globl vector220
-vector220:
-  pushl $0
-801065eb:	6a 00                	push   $0x0
-  pushl $220
-801065ed:	68 dc 00 00 00       	push   $0xdc
-  jmp alltraps
-801065f2:	e9 77 f2 ff ff       	jmp    8010586e <alltraps>
-
-801065f7 <vector221>:
-.globl vector221
-vector221:
-  pushl $0
-801065f7:	6a 00                	push   $0x0
-  pushl $221
-801065f9:	68 dd 00 00 00       	push   $0xdd
-  jmp alltraps
-801065fe:	e9 6b f2 ff ff       	jmp    8010586e <alltraps>
-
-80106603 <vector222>:
-.globl vector222
-vector222:
-  pushl $0
-80106603:	6a 00                	push   $0x0
-  pushl $222
-80106605:	68 de 00 00 00       	push   $0xde
-  jmp alltraps
-8010660a:	e9 5f f2 ff ff       	jmp    8010586e <alltraps>
-
-8010660f <vector223>:
-.globl vector223
-vector223:
-  pushl $0
-8010660f:	6a 00                	push   $0x0
-  pushl $223
-80106611:	68 df 00 00 00       	push   $0xdf
-  jmp alltraps
-80106616:	e9 53 f2 ff ff       	jmp    8010586e <alltraps>
-
-8010661b <vector224>:
-.globl vector224
-vector224:
-  pushl $0
-8010661b:	6a 00                	push   $0x0
-  pushl $224
-8010661d:	68 e0 00 00 00       	push   $0xe0
-  jmp alltraps
-80106622:	e9 47 f2 ff ff       	jmp    8010586e <alltraps>
-
-80106627 <vector225>:
-.globl vector225
-vector225:
-  pushl $0
-80106627:	6a 00                	push   $0x0
-  pushl $225
-80106629:	68 e1 00 00 00       	push   $0xe1
-  jmp alltraps
-8010662e:	e9 3b f2 ff ff       	jmp    8010586e <alltraps>
-
-80106633 <vector226>:
-.globl vector226
-vector226:
-  pushl $0
-80106633:	6a 00                	push   $0x0
-  pushl $226
-80106635:	68 e2 00 00 00       	push   $0xe2
-  jmp alltraps
-8010663a:	e9 2f f2 ff ff       	jmp    8010586e <alltraps>
-
-8010663f <vector227>:
-.globl vector227
-vector227:
-  pushl $0
-8010663f:	6a 00                	push   $0x0
-  pushl $227
-80106641:	68 e3 00 00 00       	push   $0xe3
-  jmp alltraps
-80106646:	e9 23 f2 ff ff       	jmp    8010586e <alltraps>
-
-8010664b <vector228>:
-.globl vector228
-vector228:
-  pushl $0
-8010664b:	6a 00                	push   $0x0
-  pushl $228
-8010664d:	68 e4 00 00 00       	push   $0xe4
-  jmp alltraps
-80106652:	e9 17 f2 ff ff       	jmp    8010586e <alltraps>
-
-80106657 <vector229>:
-.globl vector229
-vector229:
-  pushl $0
-80106657:	6a 00                	push   $0x0
-  pushl $229
-80106659:	68 e5 00 00 00       	push   $0xe5
-  jmp alltraps
-8010665e:	e9 0b f2 ff ff       	jmp    8010586e <alltraps>
-
-80106663 <vector230>:
-.globl vector230
-vector230:
-  pushl $0
-80106663:	6a 00                	push   $0x0
-  pushl $230
-80106665:	68 e6 00 00 00       	push   $0xe6
-  jmp alltraps
-8010666a:	e9 ff f1 ff ff       	jmp    8010586e <alltraps>
-
-8010666f <vector231>:
-.globl vector231
-vector231:
-  pushl $0
-8010666f:	6a 00                	push   $0x0
-  pushl $231
-80106671:	68 e7 00 00 00       	push   $0xe7
-  jmp alltraps
-80106676:	e9 f3 f1 ff ff       	jmp    8010586e <alltraps>
-
-8010667b <vector232>:
-.globl vector232
-vector232:
-  pushl $0
-8010667b:	6a 00                	push   $0x0
-  pushl $232
-8010667d:	68 e8 00 00 00       	push   $0xe8
-  jmp alltraps
-80106682:	e9 e7 f1 ff ff       	jmp    8010586e <alltraps>
-
-80106687 <vector233>:
-.globl vector233
-vector233:
-  pushl $0
-80106687:	6a 00                	push   $0x0
-  pushl $233
-80106689:	68 e9 00 00 00       	push   $0xe9
-  jmp alltraps
-8010668e:	e9 db f1 ff ff       	jmp    8010586e <alltraps>
-
-80106693 <vector234>:
-.globl vector234
-vector234:
-  pushl $0
-80106693:	6a 00                	push   $0x0
-  pushl $234
-80106695:	68 ea 00 00 00       	push   $0xea
-  jmp alltraps
-8010669a:	e9 cf f1 ff ff       	jmp    8010586e <alltraps>
-
-8010669f <vector235>:
-.globl vector235
-vector235:
-  pushl $0
-8010669f:	6a 00                	push   $0x0
-  pushl $235
-801066a1:	68 eb 00 00 00       	push   $0xeb
-  jmp alltraps
-801066a6:	e9 c3 f1 ff ff       	jmp    8010586e <alltraps>
-
-801066ab <vector236>:
-.globl vector236
-vector236:
-  pushl $0
-801066ab:	6a 00                	push   $0x0
-  pushl $236
-801066ad:	68 ec 00 00 00       	push   $0xec
-  jmp alltraps
-801066b2:	e9 b7 f1 ff ff       	jmp    8010586e <alltraps>
-
-801066b7 <vector237>:
-.globl vector237
-vector237:
-  pushl $0
-801066b7:	6a 00                	push   $0x0
-  pushl $237
-801066b9:	68 ed 00 00 00       	push   $0xed
-  jmp alltraps
-801066be:	e9 ab f1 ff ff       	jmp    8010586e <alltraps>
-
-801066c3 <vector238>:
-.globl vector238
-vector238:
-  pushl $0
-801066c3:	6a 00                	push   $0x0
-  pushl $238
-801066c5:	68 ee 00 00 00       	push   $0xee
-  jmp alltraps
-801066ca:	e9 9f f1 ff ff       	jmp    8010586e <alltraps>
-
-801066cf <vector239>:
-.globl vector239
-vector239:
-  pushl $0
-801066cf:	6a 00                	push   $0x0
-  pushl $239
-801066d1:	68 ef 00 00 00       	push   $0xef
-  jmp alltraps
-801066d6:	e9 93 f1 ff ff       	jmp    8010586e <alltraps>
-
-801066db <vector240>:
-.globl vector240
-vector240:
-  pushl $0
-801066db:	6a 00                	push   $0x0
-  pushl $240
-801066dd:	68 f0 00 00 00       	push   $0xf0
-  jmp alltraps
-801066e2:	e9 87 f1 ff ff       	jmp    8010586e <alltraps>
-
-801066e7 <vector241>:
-.globl vector241
-vector241:
-  pushl $0
-801066e7:	6a 00                	push   $0x0
-  pushl $241
-801066e9:	68 f1 00 00 00       	push   $0xf1
-  jmp alltraps
-801066ee:	e9 7b f1 ff ff       	jmp    8010586e <alltraps>
-
-801066f3 <vector242>:
-.globl vector242
-vector242:
-  pushl $0
-801066f3:	6a 00                	push   $0x0
-  pushl $242
-801066f5:	68 f2 00 00 00       	push   $0xf2
-  jmp alltraps
-801066fa:	e9 6f f1 ff ff       	jmp    8010586e <alltraps>
-
-801066ff <vector243>:
-.globl vector243
-vector243:
-  pushl $0
-801066ff:	6a 00                	push   $0x0
-  pushl $243
-80106701:	68 f3 00 00 00       	push   $0xf3
-  jmp alltraps
-80106706:	e9 63 f1 ff ff       	jmp    8010586e <alltraps>
-
-8010670b <vector244>:
-.globl vector244
-vector244:
-  pushl $0
-8010670b:	6a 00                	push   $0x0
-  pushl $244
-8010670d:	68 f4 00 00 00       	push   $0xf4
-  jmp alltraps
-80106712:	e9 57 f1 ff ff       	jmp    8010586e <alltraps>
-
-80106717 <vector245>:
-.globl vector245
-vector245:
-  pushl $0
-80106717:	6a 00                	push   $0x0
-  pushl $245
-80106719:	68 f5 00 00 00       	push   $0xf5
-  jmp alltraps
-8010671e:	e9 4b f1 ff ff       	jmp    8010586e <alltraps>
-
-80106723 <vector246>:
-.globl vector246
-vector246:
-  pushl $0
-80106723:	6a 00                	push   $0x0
-  pushl $246
-80106725:	68 f6 00 00 00       	push   $0xf6
-  jmp alltraps
-8010672a:	e9 3f f1 ff ff       	jmp    8010586e <alltraps>
-
-8010672f <vector247>:
-.globl vector247
-vector247:
-  pushl $0
-8010672f:	6a 00                	push   $0x0
-  pushl $247
-80106731:	68 f7 00 00 00       	push   $0xf7
-  jmp alltraps
-80106736:	e9 33 f1 ff ff       	jmp    8010586e <alltraps>
-
-8010673b <vector248>:
-.globl vector248
-vector248:
-  pushl $0
-8010673b:	6a 00                	push   $0x0
-  pushl $248
-8010673d:	68 f8 00 00 00       	push   $0xf8
-  jmp alltraps
-80106742:	e9 27 f1 ff ff       	jmp    8010586e <alltraps>
-
-80106747 <vector249>:
-.globl vector249
-vector249:
-  pushl $0
-80106747:	6a 00                	push   $0x0
-  pushl $249
-80106749:	68 f9 00 00 00       	push   $0xf9
-  jmp alltraps
-8010674e:	e9 1b f1 ff ff       	jmp    8010586e <alltraps>
-
-80106753 <vector250>:
-.globl vector250
-vector250:
-  pushl $0
-80106753:	6a 00                	push   $0x0
-  pushl $250
-80106755:	68 fa 00 00 00       	push   $0xfa
-  jmp alltraps
-8010675a:	e9 0f f1 ff ff       	jmp    8010586e <alltraps>
-
-8010675f <vector251>:
-.globl vector251
-vector251:
-  pushl $0
-8010675f:	6a 00                	push   $0x0
-  pushl $251
-80106761:	68 fb 00 00 00       	push   $0xfb
-  jmp alltraps
-80106766:	e9 03 f1 ff ff       	jmp    8010586e <alltraps>
-
-8010676b <vector252>:
-.globl vector252
-vector252:
-  pushl $0
-8010676b:	6a 00                	push   $0x0
-  pushl $252
-8010676d:	68 fc 00 00 00       	push   $0xfc
-  jmp alltraps
-80106772:	e9 f7 f0 ff ff       	jmp    8010586e <alltraps>
-
-80106777 <vector253>:
-.globl vector253
-vector253:
-  pushl $0
-80106777:	6a 00                	push   $0x0
-  pushl $253
-80106779:	68 fd 00 00 00       	push   $0xfd
-  jmp alltraps
-8010677e:	e9 eb f0 ff ff       	jmp    8010586e <alltraps>
-
-80106783 <vector254>:
-.globl vector254
-vector254:
-  pushl $0
-80106783:	6a 00                	push   $0x0
-  pushl $254
-80106785:	68 fe 00 00 00       	push   $0xfe
-  jmp alltraps
-8010678a:	e9 df f0 ff ff       	jmp    8010586e <alltraps>
-
-8010678f <vector255>:
-.globl vector255
-vector255:
-  pushl $0
-8010678f:	6a 00                	push   $0x0
-  pushl $255
-80106791:	68 ff 00 00 00       	push   $0xff
-  jmp alltraps
-80106796:	e9 d3 f0 ff ff       	jmp    8010586e <alltraps>
-8010679b:	66 90                	xchg   %ax,%ax
-8010679d:	66 90                	xchg   %ax,%ax
-8010679f:	90                   	nop
+80106a14:	83 c4 10             	add    $0x10,%esp
+80106a17:	c9                   	leave  
+80106a18:	c3                   	ret    
+
+80106a19 <vector0>:
+80106a19:	6a 00                	push   $0x0
+80106a1b:	6a 00                	push   $0x0
+80106a1d:	e9 9c fa ff ff       	jmp    801064be <alltraps>
+
+80106a22 <vector1>:
+80106a22:	6a 00                	push   $0x0
+80106a24:	6a 01                	push   $0x1
+80106a26:	e9 93 fa ff ff       	jmp    801064be <alltraps>
+
+80106a2b <vector2>:
+80106a2b:	6a 00                	push   $0x0
+80106a2d:	6a 02                	push   $0x2
+80106a2f:	e9 8a fa ff ff       	jmp    801064be <alltraps>
+
+80106a34 <vector3>:
+80106a34:	6a 00                	push   $0x0
+80106a36:	6a 03                	push   $0x3
+80106a38:	e9 81 fa ff ff       	jmp    801064be <alltraps>
+
+80106a3d <vector4>:
+80106a3d:	6a 00                	push   $0x0
+80106a3f:	6a 04                	push   $0x4
+80106a41:	e9 78 fa ff ff       	jmp    801064be <alltraps>
+
+80106a46 <vector5>:
+80106a46:	6a 00                	push   $0x0
+80106a48:	6a 05                	push   $0x5
+80106a4a:	e9 6f fa ff ff       	jmp    801064be <alltraps>
+
+80106a4f <vector6>:
+80106a4f:	6a 00                	push   $0x0
+80106a51:	6a 06                	push   $0x6
+80106a53:	e9 66 fa ff ff       	jmp    801064be <alltraps>
+
+80106a58 <vector7>:
+80106a58:	6a 00                	push   $0x0
+80106a5a:	6a 07                	push   $0x7
+80106a5c:	e9 5d fa ff ff       	jmp    801064be <alltraps>
+
+80106a61 <vector8>:
+80106a61:	6a 08                	push   $0x8
+80106a63:	e9 56 fa ff ff       	jmp    801064be <alltraps>
+
+80106a68 <vector9>:
+80106a68:	6a 00                	push   $0x0
+80106a6a:	6a 09                	push   $0x9
+80106a6c:	e9 4d fa ff ff       	jmp    801064be <alltraps>
+
+80106a71 <vector10>:
+80106a71:	6a 0a                	push   $0xa
+80106a73:	e9 46 fa ff ff       	jmp    801064be <alltraps>
+
+80106a78 <vector11>:
+80106a78:	6a 0b                	push   $0xb
+80106a7a:	e9 3f fa ff ff       	jmp    801064be <alltraps>
+
+80106a7f <vector12>:
+80106a7f:	6a 0c                	push   $0xc
+80106a81:	e9 38 fa ff ff       	jmp    801064be <alltraps>
+
+80106a86 <vector13>:
+80106a86:	6a 0d                	push   $0xd
+80106a88:	e9 31 fa ff ff       	jmp    801064be <alltraps>
+
+80106a8d <vector14>:
+80106a8d:	6a 0e                	push   $0xe
+80106a8f:	e9 2a fa ff ff       	jmp    801064be <alltraps>
+
+80106a94 <vector15>:
+80106a94:	6a 00                	push   $0x0
+80106a96:	6a 0f                	push   $0xf
+80106a98:	e9 21 fa ff ff       	jmp    801064be <alltraps>
+
+80106a9d <vector16>:
+80106a9d:	6a 00                	push   $0x0
+80106a9f:	6a 10                	push   $0x10
+80106aa1:	e9 18 fa ff ff       	jmp    801064be <alltraps>
+
+80106aa6 <vector17>:
+80106aa6:	6a 11                	push   $0x11
+80106aa8:	e9 11 fa ff ff       	jmp    801064be <alltraps>
+
+80106aad <vector18>:
+80106aad:	6a 00                	push   $0x0
+80106aaf:	6a 12                	push   $0x12
+80106ab1:	e9 08 fa ff ff       	jmp    801064be <alltraps>
+
+80106ab6 <vector19>:
+80106ab6:	6a 00                	push   $0x0
+80106ab8:	6a 13                	push   $0x13
+80106aba:	e9 ff f9 ff ff       	jmp    801064be <alltraps>
+
+80106abf <vector20>:
+80106abf:	6a 00                	push   $0x0
+80106ac1:	6a 14                	push   $0x14
+80106ac3:	e9 f6 f9 ff ff       	jmp    801064be <alltraps>
+
+80106ac8 <vector21>:
+80106ac8:	6a 00                	push   $0x0
+80106aca:	6a 15                	push   $0x15
+80106acc:	e9 ed f9 ff ff       	jmp    801064be <alltraps>
+
+80106ad1 <vector22>:
+80106ad1:	6a 00                	push   $0x0
+80106ad3:	6a 16                	push   $0x16
+80106ad5:	e9 e4 f9 ff ff       	jmp    801064be <alltraps>
+
+80106ada <vector23>:
+80106ada:	6a 00                	push   $0x0
+80106adc:	6a 17                	push   $0x17
+80106ade:	e9 db f9 ff ff       	jmp    801064be <alltraps>
+
+80106ae3 <vector24>:
+80106ae3:	6a 00                	push   $0x0
+80106ae5:	6a 18                	push   $0x18
+80106ae7:	e9 d2 f9 ff ff       	jmp    801064be <alltraps>
+
+80106aec <vector25>:
+80106aec:	6a 00                	push   $0x0
+80106aee:	6a 19                	push   $0x19
+80106af0:	e9 c9 f9 ff ff       	jmp    801064be <alltraps>
+
+80106af5 <vector26>:
+80106af5:	6a 00                	push   $0x0
+80106af7:	6a 1a                	push   $0x1a
+80106af9:	e9 c0 f9 ff ff       	jmp    801064be <alltraps>
+
+80106afe <vector27>:
+80106afe:	6a 00                	push   $0x0
+80106b00:	6a 1b                	push   $0x1b
+80106b02:	e9 b7 f9 ff ff       	jmp    801064be <alltraps>
+
+80106b07 <vector28>:
+80106b07:	6a 00                	push   $0x0
+80106b09:	6a 1c                	push   $0x1c
+80106b0b:	e9 ae f9 ff ff       	jmp    801064be <alltraps>
+
+80106b10 <vector29>:
+80106b10:	6a 00                	push   $0x0
+80106b12:	6a 1d                	push   $0x1d
+80106b14:	e9 a5 f9 ff ff       	jmp    801064be <alltraps>
+
+80106b19 <vector30>:
+80106b19:	6a 00                	push   $0x0
+80106b1b:	6a 1e                	push   $0x1e
+80106b1d:	e9 9c f9 ff ff       	jmp    801064be <alltraps>
+
+80106b22 <vector31>:
+80106b22:	6a 00                	push   $0x0
+80106b24:	6a 1f                	push   $0x1f
+80106b26:	e9 93 f9 ff ff       	jmp    801064be <alltraps>
+
+80106b2b <vector32>:
+80106b2b:	6a 00                	push   $0x0
+80106b2d:	6a 20                	push   $0x20
+80106b2f:	e9 8a f9 ff ff       	jmp    801064be <alltraps>
+
+80106b34 <vector33>:
+80106b34:	6a 00                	push   $0x0
+80106b36:	6a 21                	push   $0x21
+80106b38:	e9 81 f9 ff ff       	jmp    801064be <alltraps>
+
+80106b3d <vector34>:
+80106b3d:	6a 00                	push   $0x0
+80106b3f:	6a 22                	push   $0x22
+80106b41:	e9 78 f9 ff ff       	jmp    801064be <alltraps>
+
+80106b46 <vector35>:
+80106b46:	6a 00                	push   $0x0
+80106b48:	6a 23                	push   $0x23
+80106b4a:	e9 6f f9 ff ff       	jmp    801064be <alltraps>
+
+80106b4f <vector36>:
+80106b4f:	6a 00                	push   $0x0
+80106b51:	6a 24                	push   $0x24
+80106b53:	e9 66 f9 ff ff       	jmp    801064be <alltraps>
+
+80106b58 <vector37>:
+80106b58:	6a 00                	push   $0x0
+80106b5a:	6a 25                	push   $0x25
+80106b5c:	e9 5d f9 ff ff       	jmp    801064be <alltraps>
+
+80106b61 <vector38>:
+80106b61:	6a 00                	push   $0x0
+80106b63:	6a 26                	push   $0x26
+80106b65:	e9 54 f9 ff ff       	jmp    801064be <alltraps>
+
+80106b6a <vector39>:
+80106b6a:	6a 00                	push   $0x0
+80106b6c:	6a 27                	push   $0x27
+80106b6e:	e9 4b f9 ff ff       	jmp    801064be <alltraps>
+
+80106b73 <vector40>:
+80106b73:	6a 00                	push   $0x0
+80106b75:	6a 28                	push   $0x28
+80106b77:	e9 42 f9 ff ff       	jmp    801064be <alltraps>
+
+80106b7c <vector41>:
+80106b7c:	6a 00                	push   $0x0
+80106b7e:	6a 29                	push   $0x29
+80106b80:	e9 39 f9 ff ff       	jmp    801064be <alltraps>
+
+80106b85 <vector42>:
+80106b85:	6a 00                	push   $0x0
+80106b87:	6a 2a                	push   $0x2a
+80106b89:	e9 30 f9 ff ff       	jmp    801064be <alltraps>
+
+80106b8e <vector43>:
+80106b8e:	6a 00                	push   $0x0
+80106b90:	6a 2b                	push   $0x2b
+80106b92:	e9 27 f9 ff ff       	jmp    801064be <alltraps>
+
+80106b97 <vector44>:
+80106b97:	6a 00                	push   $0x0
+80106b99:	6a 2c                	push   $0x2c
+80106b9b:	e9 1e f9 ff ff       	jmp    801064be <alltraps>
+
+80106ba0 <vector45>:
+80106ba0:	6a 00                	push   $0x0
+80106ba2:	6a 2d                	push   $0x2d
+80106ba4:	e9 15 f9 ff ff       	jmp    801064be <alltraps>
+
+80106ba9 <vector46>:
+80106ba9:	6a 00                	push   $0x0
+80106bab:	6a 2e                	push   $0x2e
+80106bad:	e9 0c f9 ff ff       	jmp    801064be <alltraps>
+
+80106bb2 <vector47>:
+80106bb2:	6a 00                	push   $0x0
+80106bb4:	6a 2f                	push   $0x2f
+80106bb6:	e9 03 f9 ff ff       	jmp    801064be <alltraps>
+
+80106bbb <vector48>:
+80106bbb:	6a 00                	push   $0x0
+80106bbd:	6a 30                	push   $0x30
+80106bbf:	e9 fa f8 ff ff       	jmp    801064be <alltraps>
+
+80106bc4 <vector49>:
+80106bc4:	6a 00                	push   $0x0
+80106bc6:	6a 31                	push   $0x31
+80106bc8:	e9 f1 f8 ff ff       	jmp    801064be <alltraps>
+
+80106bcd <vector50>:
+80106bcd:	6a 00                	push   $0x0
+80106bcf:	6a 32                	push   $0x32
+80106bd1:	e9 e8 f8 ff ff       	jmp    801064be <alltraps>
+
+80106bd6 <vector51>:
+80106bd6:	6a 00                	push   $0x0
+80106bd8:	6a 33                	push   $0x33
+80106bda:	e9 df f8 ff ff       	jmp    801064be <alltraps>
+
+80106bdf <vector52>:
+80106bdf:	6a 00                	push   $0x0
+80106be1:	6a 34                	push   $0x34
+80106be3:	e9 d6 f8 ff ff       	jmp    801064be <alltraps>
+
+80106be8 <vector53>:
+80106be8:	6a 00                	push   $0x0
+80106bea:	6a 35                	push   $0x35
+80106bec:	e9 cd f8 ff ff       	jmp    801064be <alltraps>
+
+80106bf1 <vector54>:
+80106bf1:	6a 00                	push   $0x0
+80106bf3:	6a 36                	push   $0x36
+80106bf5:	e9 c4 f8 ff ff       	jmp    801064be <alltraps>
+
+80106bfa <vector55>:
+80106bfa:	6a 00                	push   $0x0
+80106bfc:	6a 37                	push   $0x37
+80106bfe:	e9 bb f8 ff ff       	jmp    801064be <alltraps>
+
+80106c03 <vector56>:
+80106c03:	6a 00                	push   $0x0
+80106c05:	6a 38                	push   $0x38
+80106c07:	e9 b2 f8 ff ff       	jmp    801064be <alltraps>
+
+80106c0c <vector57>:
+80106c0c:	6a 00                	push   $0x0
+80106c0e:	6a 39                	push   $0x39
+80106c10:	e9 a9 f8 ff ff       	jmp    801064be <alltraps>
+
+80106c15 <vector58>:
+80106c15:	6a 00                	push   $0x0
+80106c17:	6a 3a                	push   $0x3a
+80106c19:	e9 a0 f8 ff ff       	jmp    801064be <alltraps>
+
+80106c1e <vector59>:
+80106c1e:	6a 00                	push   $0x0
+80106c20:	6a 3b                	push   $0x3b
+80106c22:	e9 97 f8 ff ff       	jmp    801064be <alltraps>
+
+80106c27 <vector60>:
+80106c27:	6a 00                	push   $0x0
+80106c29:	6a 3c                	push   $0x3c
+80106c2b:	e9 8e f8 ff ff       	jmp    801064be <alltraps>
+
+80106c30 <vector61>:
+80106c30:	6a 00                	push   $0x0
+80106c32:	6a 3d                	push   $0x3d
+80106c34:	e9 85 f8 ff ff       	jmp    801064be <alltraps>
+
+80106c39 <vector62>:
+80106c39:	6a 00                	push   $0x0
+80106c3b:	6a 3e                	push   $0x3e
+80106c3d:	e9 7c f8 ff ff       	jmp    801064be <alltraps>
+
+80106c42 <vector63>:
+80106c42:	6a 00                	push   $0x0
+80106c44:	6a 3f                	push   $0x3f
+80106c46:	e9 73 f8 ff ff       	jmp    801064be <alltraps>
+
+80106c4b <vector64>:
+80106c4b:	6a 00                	push   $0x0
+80106c4d:	6a 40                	push   $0x40
+80106c4f:	e9 6a f8 ff ff       	jmp    801064be <alltraps>
+
+80106c54 <vector65>:
+80106c54:	6a 00                	push   $0x0
+80106c56:	6a 41                	push   $0x41
+80106c58:	e9 61 f8 ff ff       	jmp    801064be <alltraps>
+
+80106c5d <vector66>:
+80106c5d:	6a 00                	push   $0x0
+80106c5f:	6a 42                	push   $0x42
+80106c61:	e9 58 f8 ff ff       	jmp    801064be <alltraps>
+
+80106c66 <vector67>:
+80106c66:	6a 00                	push   $0x0
+80106c68:	6a 43                	push   $0x43
+80106c6a:	e9 4f f8 ff ff       	jmp    801064be <alltraps>
+
+80106c6f <vector68>:
+80106c6f:	6a 00                	push   $0x0
+80106c71:	6a 44                	push   $0x44
+80106c73:	e9 46 f8 ff ff       	jmp    801064be <alltraps>
+
+80106c78 <vector69>:
+80106c78:	6a 00                	push   $0x0
+80106c7a:	6a 45                	push   $0x45
+80106c7c:	e9 3d f8 ff ff       	jmp    801064be <alltraps>
+
+80106c81 <vector70>:
+80106c81:	6a 00                	push   $0x0
+80106c83:	6a 46                	push   $0x46
+80106c85:	e9 34 f8 ff ff       	jmp    801064be <alltraps>
+
+80106c8a <vector71>:
+80106c8a:	6a 00                	push   $0x0
+80106c8c:	6a 47                	push   $0x47
+80106c8e:	e9 2b f8 ff ff       	jmp    801064be <alltraps>
+
+80106c93 <vector72>:
+80106c93:	6a 00                	push   $0x0
+80106c95:	6a 48                	push   $0x48
+80106c97:	e9 22 f8 ff ff       	jmp    801064be <alltraps>
+
+80106c9c <vector73>:
+80106c9c:	6a 00                	push   $0x0
+80106c9e:	6a 49                	push   $0x49
+80106ca0:	e9 19 f8 ff ff       	jmp    801064be <alltraps>
+
+80106ca5 <vector74>:
+80106ca5:	6a 00                	push   $0x0
+80106ca7:	6a 4a                	push   $0x4a
+80106ca9:	e9 10 f8 ff ff       	jmp    801064be <alltraps>
+
+80106cae <vector75>:
+80106cae:	6a 00                	push   $0x0
+80106cb0:	6a 4b                	push   $0x4b
+80106cb2:	e9 07 f8 ff ff       	jmp    801064be <alltraps>
+
+80106cb7 <vector76>:
+80106cb7:	6a 00                	push   $0x0
+80106cb9:	6a 4c                	push   $0x4c
+80106cbb:	e9 fe f7 ff ff       	jmp    801064be <alltraps>
+
+80106cc0 <vector77>:
+80106cc0:	6a 00                	push   $0x0
+80106cc2:	6a 4d                	push   $0x4d
+80106cc4:	e9 f5 f7 ff ff       	jmp    801064be <alltraps>
+
+80106cc9 <vector78>:
+80106cc9:	6a 00                	push   $0x0
+80106ccb:	6a 4e                	push   $0x4e
+80106ccd:	e9 ec f7 ff ff       	jmp    801064be <alltraps>
+
+80106cd2 <vector79>:
+80106cd2:	6a 00                	push   $0x0
+80106cd4:	6a 4f                	push   $0x4f
+80106cd6:	e9 e3 f7 ff ff       	jmp    801064be <alltraps>
+
+80106cdb <vector80>:
+80106cdb:	6a 00                	push   $0x0
+80106cdd:	6a 50                	push   $0x50
+80106cdf:	e9 da f7 ff ff       	jmp    801064be <alltraps>
+
+80106ce4 <vector81>:
+80106ce4:	6a 00                	push   $0x0
+80106ce6:	6a 51                	push   $0x51
+80106ce8:	e9 d1 f7 ff ff       	jmp    801064be <alltraps>
+
+80106ced <vector82>:
+80106ced:	6a 00                	push   $0x0
+80106cef:	6a 52                	push   $0x52
+80106cf1:	e9 c8 f7 ff ff       	jmp    801064be <alltraps>
+
+80106cf6 <vector83>:
+80106cf6:	6a 00                	push   $0x0
+80106cf8:	6a 53                	push   $0x53
+80106cfa:	e9 bf f7 ff ff       	jmp    801064be <alltraps>
+
+80106cff <vector84>:
+80106cff:	6a 00                	push   $0x0
+80106d01:	6a 54                	push   $0x54
+80106d03:	e9 b6 f7 ff ff       	jmp    801064be <alltraps>
+
+80106d08 <vector85>:
+80106d08:	6a 00                	push   $0x0
+80106d0a:	6a 55                	push   $0x55
+80106d0c:	e9 ad f7 ff ff       	jmp    801064be <alltraps>
+
+80106d11 <vector86>:
+80106d11:	6a 00                	push   $0x0
+80106d13:	6a 56                	push   $0x56
+80106d15:	e9 a4 f7 ff ff       	jmp    801064be <alltraps>
+
+80106d1a <vector87>:
+80106d1a:	6a 00                	push   $0x0
+80106d1c:	6a 57                	push   $0x57
+80106d1e:	e9 9b f7 ff ff       	jmp    801064be <alltraps>
+
+80106d23 <vector88>:
+80106d23:	6a 00                	push   $0x0
+80106d25:	6a 58                	push   $0x58
+80106d27:	e9 92 f7 ff ff       	jmp    801064be <alltraps>
+
+80106d2c <vector89>:
+80106d2c:	6a 00                	push   $0x0
+80106d2e:	6a 59                	push   $0x59
+80106d30:	e9 89 f7 ff ff       	jmp    801064be <alltraps>
+
+80106d35 <vector90>:
+80106d35:	6a 00                	push   $0x0
+80106d37:	6a 5a                	push   $0x5a
+80106d39:	e9 80 f7 ff ff       	jmp    801064be <alltraps>
+
+80106d3e <vector91>:
+80106d3e:	6a 00                	push   $0x0
+80106d40:	6a 5b                	push   $0x5b
+80106d42:	e9 77 f7 ff ff       	jmp    801064be <alltraps>
+
+80106d47 <vector92>:
+80106d47:	6a 00                	push   $0x0
+80106d49:	6a 5c                	push   $0x5c
+80106d4b:	e9 6e f7 ff ff       	jmp    801064be <alltraps>
+
+80106d50 <vector93>:
+80106d50:	6a 00                	push   $0x0
+80106d52:	6a 5d                	push   $0x5d
+80106d54:	e9 65 f7 ff ff       	jmp    801064be <alltraps>
+
+80106d59 <vector94>:
+80106d59:	6a 00                	push   $0x0
+80106d5b:	6a 5e                	push   $0x5e
+80106d5d:	e9 5c f7 ff ff       	jmp    801064be <alltraps>
+
+80106d62 <vector95>:
+80106d62:	6a 00                	push   $0x0
+80106d64:	6a 5f                	push   $0x5f
+80106d66:	e9 53 f7 ff ff       	jmp    801064be <alltraps>
+
+80106d6b <vector96>:
+80106d6b:	6a 00                	push   $0x0
+80106d6d:	6a 60                	push   $0x60
+80106d6f:	e9 4a f7 ff ff       	jmp    801064be <alltraps>
+
+80106d74 <vector97>:
+80106d74:	6a 00                	push   $0x0
+80106d76:	6a 61                	push   $0x61
+80106d78:	e9 41 f7 ff ff       	jmp    801064be <alltraps>
+
+80106d7d <vector98>:
+80106d7d:	6a 00                	push   $0x0
+80106d7f:	6a 62                	push   $0x62
+80106d81:	e9 38 f7 ff ff       	jmp    801064be <alltraps>
+
+80106d86 <vector99>:
+80106d86:	6a 00                	push   $0x0
+80106d88:	6a 63                	push   $0x63
+80106d8a:	e9 2f f7 ff ff       	jmp    801064be <alltraps>
+
+80106d8f <vector100>:
+80106d8f:	6a 00                	push   $0x0
+80106d91:	6a 64                	push   $0x64
+80106d93:	e9 26 f7 ff ff       	jmp    801064be <alltraps>
+
+80106d98 <vector101>:
+80106d98:	6a 00                	push   $0x0
+80106d9a:	6a 65                	push   $0x65
+80106d9c:	e9 1d f7 ff ff       	jmp    801064be <alltraps>
+
+80106da1 <vector102>:
+80106da1:	6a 00                	push   $0x0
+80106da3:	6a 66                	push   $0x66
+80106da5:	e9 14 f7 ff ff       	jmp    801064be <alltraps>
+
+80106daa <vector103>:
+80106daa:	6a 00                	push   $0x0
+80106dac:	6a 67                	push   $0x67
+80106dae:	e9 0b f7 ff ff       	jmp    801064be <alltraps>
+
+80106db3 <vector104>:
+80106db3:	6a 00                	push   $0x0
+80106db5:	6a 68                	push   $0x68
+80106db7:	e9 02 f7 ff ff       	jmp    801064be <alltraps>
+
+80106dbc <vector105>:
+80106dbc:	6a 00                	push   $0x0
+80106dbe:	6a 69                	push   $0x69
+80106dc0:	e9 f9 f6 ff ff       	jmp    801064be <alltraps>
+
+80106dc5 <vector106>:
+80106dc5:	6a 00                	push   $0x0
+80106dc7:	6a 6a                	push   $0x6a
+80106dc9:	e9 f0 f6 ff ff       	jmp    801064be <alltraps>
+
+80106dce <vector107>:
+80106dce:	6a 00                	push   $0x0
+80106dd0:	6a 6b                	push   $0x6b
+80106dd2:	e9 e7 f6 ff ff       	jmp    801064be <alltraps>
+
+80106dd7 <vector108>:
+80106dd7:	6a 00                	push   $0x0
+80106dd9:	6a 6c                	push   $0x6c
+80106ddb:	e9 de f6 ff ff       	jmp    801064be <alltraps>
+
+80106de0 <vector109>:
+80106de0:	6a 00                	push   $0x0
+80106de2:	6a 6d                	push   $0x6d
+80106de4:	e9 d5 f6 ff ff       	jmp    801064be <alltraps>
+
+80106de9 <vector110>:
+80106de9:	6a 00                	push   $0x0
+80106deb:	6a 6e                	push   $0x6e
+80106ded:	e9 cc f6 ff ff       	jmp    801064be <alltraps>
+
+80106df2 <vector111>:
+80106df2:	6a 00                	push   $0x0
+80106df4:	6a 6f                	push   $0x6f
+80106df6:	e9 c3 f6 ff ff       	jmp    801064be <alltraps>
+
+80106dfb <vector112>:
+80106dfb:	6a 00                	push   $0x0
+80106dfd:	6a 70                	push   $0x70
+80106dff:	e9 ba f6 ff ff       	jmp    801064be <alltraps>
+
+80106e04 <vector113>:
+80106e04:	6a 00                	push   $0x0
+80106e06:	6a 71                	push   $0x71
+80106e08:	e9 b1 f6 ff ff       	jmp    801064be <alltraps>
+
+80106e0d <vector114>:
+80106e0d:	6a 00                	push   $0x0
+80106e0f:	6a 72                	push   $0x72
+80106e11:	e9 a8 f6 ff ff       	jmp    801064be <alltraps>
+
+80106e16 <vector115>:
+80106e16:	6a 00                	push   $0x0
+80106e18:	6a 73                	push   $0x73
+80106e1a:	e9 9f f6 ff ff       	jmp    801064be <alltraps>
+
+80106e1f <vector116>:
+80106e1f:	6a 00                	push   $0x0
+80106e21:	6a 74                	push   $0x74
+80106e23:	e9 96 f6 ff ff       	jmp    801064be <alltraps>
+
+80106e28 <vector117>:
+80106e28:	6a 00                	push   $0x0
+80106e2a:	6a 75                	push   $0x75
+80106e2c:	e9 8d f6 ff ff       	jmp    801064be <alltraps>
+
+80106e31 <vector118>:
+80106e31:	6a 00                	push   $0x0
+80106e33:	6a 76                	push   $0x76
+80106e35:	e9 84 f6 ff ff       	jmp    801064be <alltraps>
+
+80106e3a <vector119>:
+80106e3a:	6a 00                	push   $0x0
+80106e3c:	6a 77                	push   $0x77
+80106e3e:	e9 7b f6 ff ff       	jmp    801064be <alltraps>
+
+80106e43 <vector120>:
+80106e43:	6a 00                	push   $0x0
+80106e45:	6a 78                	push   $0x78
+80106e47:	e9 72 f6 ff ff       	jmp    801064be <alltraps>
+
+80106e4c <vector121>:
+80106e4c:	6a 00                	push   $0x0
+80106e4e:	6a 79                	push   $0x79
+80106e50:	e9 69 f6 ff ff       	jmp    801064be <alltraps>
+
+80106e55 <vector122>:
+80106e55:	6a 00                	push   $0x0
+80106e57:	6a 7a                	push   $0x7a
+80106e59:	e9 60 f6 ff ff       	jmp    801064be <alltraps>
+
+80106e5e <vector123>:
+80106e5e:	6a 00                	push   $0x0
+80106e60:	6a 7b                	push   $0x7b
+80106e62:	e9 57 f6 ff ff       	jmp    801064be <alltraps>
+
+80106e67 <vector124>:
+80106e67:	6a 00                	push   $0x0
+80106e69:	6a 7c                	push   $0x7c
+80106e6b:	e9 4e f6 ff ff       	jmp    801064be <alltraps>
+
+80106e70 <vector125>:
+80106e70:	6a 00                	push   $0x0
+80106e72:	6a 7d                	push   $0x7d
+80106e74:	e9 45 f6 ff ff       	jmp    801064be <alltraps>
+
+80106e79 <vector126>:
+80106e79:	6a 00                	push   $0x0
+80106e7b:	6a 7e                	push   $0x7e
+80106e7d:	e9 3c f6 ff ff       	jmp    801064be <alltraps>
+
+80106e82 <vector127>:
+80106e82:	6a 00                	push   $0x0
+80106e84:	6a 7f                	push   $0x7f
+80106e86:	e9 33 f6 ff ff       	jmp    801064be <alltraps>
+
+80106e8b <vector128>:
+80106e8b:	6a 00                	push   $0x0
+80106e8d:	68 80 00 00 00       	push   $0x80
+80106e92:	e9 27 f6 ff ff       	jmp    801064be <alltraps>
+
+80106e97 <vector129>:
+80106e97:	6a 00                	push   $0x0
+80106e99:	68 81 00 00 00       	push   $0x81
+80106e9e:	e9 1b f6 ff ff       	jmp    801064be <alltraps>
+
+80106ea3 <vector130>:
+80106ea3:	6a 00                	push   $0x0
+80106ea5:	68 82 00 00 00       	push   $0x82
+80106eaa:	e9 0f f6 ff ff       	jmp    801064be <alltraps>
+
+80106eaf <vector131>:
+80106eaf:	6a 00                	push   $0x0
+80106eb1:	68 83 00 00 00       	push   $0x83
+80106eb6:	e9 03 f6 ff ff       	jmp    801064be <alltraps>
+
+80106ebb <vector132>:
+80106ebb:	6a 00                	push   $0x0
+80106ebd:	68 84 00 00 00       	push   $0x84
+80106ec2:	e9 f7 f5 ff ff       	jmp    801064be <alltraps>
+
+80106ec7 <vector133>:
+80106ec7:	6a 00                	push   $0x0
+80106ec9:	68 85 00 00 00       	push   $0x85
+80106ece:	e9 eb f5 ff ff       	jmp    801064be <alltraps>
+
+80106ed3 <vector134>:
+80106ed3:	6a 00                	push   $0x0
+80106ed5:	68 86 00 00 00       	push   $0x86
+80106eda:	e9 df f5 ff ff       	jmp    801064be <alltraps>
+
+80106edf <vector135>:
+80106edf:	6a 00                	push   $0x0
+80106ee1:	68 87 00 00 00       	push   $0x87
+80106ee6:	e9 d3 f5 ff ff       	jmp    801064be <alltraps>
+
+80106eeb <vector136>:
+80106eeb:	6a 00                	push   $0x0
+80106eed:	68 88 00 00 00       	push   $0x88
+80106ef2:	e9 c7 f5 ff ff       	jmp    801064be <alltraps>
+
+80106ef7 <vector137>:
+80106ef7:	6a 00                	push   $0x0
+80106ef9:	68 89 00 00 00       	push   $0x89
+80106efe:	e9 bb f5 ff ff       	jmp    801064be <alltraps>
+
+80106f03 <vector138>:
+80106f03:	6a 00                	push   $0x0
+80106f05:	68 8a 00 00 00       	push   $0x8a
+80106f0a:	e9 af f5 ff ff       	jmp    801064be <alltraps>
+
+80106f0f <vector139>:
+80106f0f:	6a 00                	push   $0x0
+80106f11:	68 8b 00 00 00       	push   $0x8b
+80106f16:	e9 a3 f5 ff ff       	jmp    801064be <alltraps>
+
+80106f1b <vector140>:
+80106f1b:	6a 00                	push   $0x0
+80106f1d:	68 8c 00 00 00       	push   $0x8c
+80106f22:	e9 97 f5 ff ff       	jmp    801064be <alltraps>
+
+80106f27 <vector141>:
+80106f27:	6a 00                	push   $0x0
+80106f29:	68 8d 00 00 00       	push   $0x8d
+80106f2e:	e9 8b f5 ff ff       	jmp    801064be <alltraps>
+
+80106f33 <vector142>:
+80106f33:	6a 00                	push   $0x0
+80106f35:	68 8e 00 00 00       	push   $0x8e
+80106f3a:	e9 7f f5 ff ff       	jmp    801064be <alltraps>
+
+80106f3f <vector143>:
+80106f3f:	6a 00                	push   $0x0
+80106f41:	68 8f 00 00 00       	push   $0x8f
+80106f46:	e9 73 f5 ff ff       	jmp    801064be <alltraps>
+
+80106f4b <vector144>:
+80106f4b:	6a 00                	push   $0x0
+80106f4d:	68 90 00 00 00       	push   $0x90
+80106f52:	e9 67 f5 ff ff       	jmp    801064be <alltraps>
+
+80106f57 <vector145>:
+80106f57:	6a 00                	push   $0x0
+80106f59:	68 91 00 00 00       	push   $0x91
+80106f5e:	e9 5b f5 ff ff       	jmp    801064be <alltraps>
+
+80106f63 <vector146>:
+80106f63:	6a 00                	push   $0x0
+80106f65:	68 92 00 00 00       	push   $0x92
+80106f6a:	e9 4f f5 ff ff       	jmp    801064be <alltraps>
+
+80106f6f <vector147>:
+80106f6f:	6a 00                	push   $0x0
+80106f71:	68 93 00 00 00       	push   $0x93
+80106f76:	e9 43 f5 ff ff       	jmp    801064be <alltraps>
+
+80106f7b <vector148>:
+80106f7b:	6a 00                	push   $0x0
+80106f7d:	68 94 00 00 00       	push   $0x94
+80106f82:	e9 37 f5 ff ff       	jmp    801064be <alltraps>
+
+80106f87 <vector149>:
+80106f87:	6a 00                	push   $0x0
+80106f89:	68 95 00 00 00       	push   $0x95
+80106f8e:	e9 2b f5 ff ff       	jmp    801064be <alltraps>
+
+80106f93 <vector150>:
+80106f93:	6a 00                	push   $0x0
+80106f95:	68 96 00 00 00       	push   $0x96
+80106f9a:	e9 1f f5 ff ff       	jmp    801064be <alltraps>
+
+80106f9f <vector151>:
+80106f9f:	6a 00                	push   $0x0
+80106fa1:	68 97 00 00 00       	push   $0x97
+80106fa6:	e9 13 f5 ff ff       	jmp    801064be <alltraps>
+
+80106fab <vector152>:
+80106fab:	6a 00                	push   $0x0
+80106fad:	68 98 00 00 00       	push   $0x98
+80106fb2:	e9 07 f5 ff ff       	jmp    801064be <alltraps>
+
+80106fb7 <vector153>:
+80106fb7:	6a 00                	push   $0x0
+80106fb9:	68 99 00 00 00       	push   $0x99
+80106fbe:	e9 fb f4 ff ff       	jmp    801064be <alltraps>
+
+80106fc3 <vector154>:
+80106fc3:	6a 00                	push   $0x0
+80106fc5:	68 9a 00 00 00       	push   $0x9a
+80106fca:	e9 ef f4 ff ff       	jmp    801064be <alltraps>
+
+80106fcf <vector155>:
+80106fcf:	6a 00                	push   $0x0
+80106fd1:	68 9b 00 00 00       	push   $0x9b
+80106fd6:	e9 e3 f4 ff ff       	jmp    801064be <alltraps>
+
+80106fdb <vector156>:
+80106fdb:	6a 00                	push   $0x0
+80106fdd:	68 9c 00 00 00       	push   $0x9c
+80106fe2:	e9 d7 f4 ff ff       	jmp    801064be <alltraps>
+
+80106fe7 <vector157>:
+80106fe7:	6a 00                	push   $0x0
+80106fe9:	68 9d 00 00 00       	push   $0x9d
+80106fee:	e9 cb f4 ff ff       	jmp    801064be <alltraps>
+
+80106ff3 <vector158>:
+80106ff3:	6a 00                	push   $0x0
+80106ff5:	68 9e 00 00 00       	push   $0x9e
+80106ffa:	e9 bf f4 ff ff       	jmp    801064be <alltraps>
+
+80106fff <vector159>:
+80106fff:	6a 00                	push   $0x0
+80107001:	68 9f 00 00 00       	push   $0x9f
+80107006:	e9 b3 f4 ff ff       	jmp    801064be <alltraps>
+
+8010700b <vector160>:
+8010700b:	6a 00                	push   $0x0
+8010700d:	68 a0 00 00 00       	push   $0xa0
+80107012:	e9 a7 f4 ff ff       	jmp    801064be <alltraps>
+
+80107017 <vector161>:
+80107017:	6a 00                	push   $0x0
+80107019:	68 a1 00 00 00       	push   $0xa1
+8010701e:	e9 9b f4 ff ff       	jmp    801064be <alltraps>
+
+80107023 <vector162>:
+80107023:	6a 00                	push   $0x0
+80107025:	68 a2 00 00 00       	push   $0xa2
+8010702a:	e9 8f f4 ff ff       	jmp    801064be <alltraps>
+
+8010702f <vector163>:
+8010702f:	6a 00                	push   $0x0
+80107031:	68 a3 00 00 00       	push   $0xa3
+80107036:	e9 83 f4 ff ff       	jmp    801064be <alltraps>
+
+8010703b <vector164>:
+8010703b:	6a 00                	push   $0x0
+8010703d:	68 a4 00 00 00       	push   $0xa4
+80107042:	e9 77 f4 ff ff       	jmp    801064be <alltraps>
+
+80107047 <vector165>:
+80107047:	6a 00                	push   $0x0
+80107049:	68 a5 00 00 00       	push   $0xa5
+8010704e:	e9 6b f4 ff ff       	jmp    801064be <alltraps>
+
+80107053 <vector166>:
+80107053:	6a 00                	push   $0x0
+80107055:	68 a6 00 00 00       	push   $0xa6
+8010705a:	e9 5f f4 ff ff       	jmp    801064be <alltraps>
+
+8010705f <vector167>:
+8010705f:	6a 00                	push   $0x0
+80107061:	68 a7 00 00 00       	push   $0xa7
+80107066:	e9 53 f4 ff ff       	jmp    801064be <alltraps>
+
+8010706b <vector168>:
+8010706b:	6a 00                	push   $0x0
+8010706d:	68 a8 00 00 00       	push   $0xa8
+80107072:	e9 47 f4 ff ff       	jmp    801064be <alltraps>
+
+80107077 <vector169>:
+80107077:	6a 00                	push   $0x0
+80107079:	68 a9 00 00 00       	push   $0xa9
+8010707e:	e9 3b f4 ff ff       	jmp    801064be <alltraps>
+
+80107083 <vector170>:
+80107083:	6a 00                	push   $0x0
+80107085:	68 aa 00 00 00       	push   $0xaa
+8010708a:	e9 2f f4 ff ff       	jmp    801064be <alltraps>
+
+8010708f <vector171>:
+8010708f:	6a 00                	push   $0x0
+80107091:	68 ab 00 00 00       	push   $0xab
+80107096:	e9 23 f4 ff ff       	jmp    801064be <alltraps>
+
+8010709b <vector172>:
+8010709b:	6a 00                	push   $0x0
+8010709d:	68 ac 00 00 00       	push   $0xac
+801070a2:	e9 17 f4 ff ff       	jmp    801064be <alltraps>
+
+801070a7 <vector173>:
+801070a7:	6a 00                	push   $0x0
+801070a9:	68 ad 00 00 00       	push   $0xad
+801070ae:	e9 0b f4 ff ff       	jmp    801064be <alltraps>
+
+801070b3 <vector174>:
+801070b3:	6a 00                	push   $0x0
+801070b5:	68 ae 00 00 00       	push   $0xae
+801070ba:	e9 ff f3 ff ff       	jmp    801064be <alltraps>
+
+801070bf <vector175>:
+801070bf:	6a 00                	push   $0x0
+801070c1:	68 af 00 00 00       	push   $0xaf
+801070c6:	e9 f3 f3 ff ff       	jmp    801064be <alltraps>
+
+801070cb <vector176>:
+801070cb:	6a 00                	push   $0x0
+801070cd:	68 b0 00 00 00       	push   $0xb0
+801070d2:	e9 e7 f3 ff ff       	jmp    801064be <alltraps>
+
+801070d7 <vector177>:
+801070d7:	6a 00                	push   $0x0
+801070d9:	68 b1 00 00 00       	push   $0xb1
+801070de:	e9 db f3 ff ff       	jmp    801064be <alltraps>
+
+801070e3 <vector178>:
+801070e3:	6a 00                	push   $0x0
+801070e5:	68 b2 00 00 00       	push   $0xb2
+801070ea:	e9 cf f3 ff ff       	jmp    801064be <alltraps>
+
+801070ef <vector179>:
+801070ef:	6a 00                	push   $0x0
+801070f1:	68 b3 00 00 00       	push   $0xb3
+801070f6:	e9 c3 f3 ff ff       	jmp    801064be <alltraps>
+
+801070fb <vector180>:
+801070fb:	6a 00                	push   $0x0
+801070fd:	68 b4 00 00 00       	push   $0xb4
+80107102:	e9 b7 f3 ff ff       	jmp    801064be <alltraps>
+
+80107107 <vector181>:
+80107107:	6a 00                	push   $0x0
+80107109:	68 b5 00 00 00       	push   $0xb5
+8010710e:	e9 ab f3 ff ff       	jmp    801064be <alltraps>
+
+80107113 <vector182>:
+80107113:	6a 00                	push   $0x0
+80107115:	68 b6 00 00 00       	push   $0xb6
+8010711a:	e9 9f f3 ff ff       	jmp    801064be <alltraps>
+
+8010711f <vector183>:
+8010711f:	6a 00                	push   $0x0
+80107121:	68 b7 00 00 00       	push   $0xb7
+80107126:	e9 93 f3 ff ff       	jmp    801064be <alltraps>
+
+8010712b <vector184>:
+8010712b:	6a 00                	push   $0x0
+8010712d:	68 b8 00 00 00       	push   $0xb8
+80107132:	e9 87 f3 ff ff       	jmp    801064be <alltraps>
+
+80107137 <vector185>:
+80107137:	6a 00                	push   $0x0
+80107139:	68 b9 00 00 00       	push   $0xb9
+8010713e:	e9 7b f3 ff ff       	jmp    801064be <alltraps>
+
+80107143 <vector186>:
+80107143:	6a 00                	push   $0x0
+80107145:	68 ba 00 00 00       	push   $0xba
+8010714a:	e9 6f f3 ff ff       	jmp    801064be <alltraps>
+
+8010714f <vector187>:
+8010714f:	6a 00                	push   $0x0
+80107151:	68 bb 00 00 00       	push   $0xbb
+80107156:	e9 63 f3 ff ff       	jmp    801064be <alltraps>
+
+8010715b <vector188>:
+8010715b:	6a 00                	push   $0x0
+8010715d:	68 bc 00 00 00       	push   $0xbc
+80107162:	e9 57 f3 ff ff       	jmp    801064be <alltraps>
+
+80107167 <vector189>:
+80107167:	6a 00                	push   $0x0
+80107169:	68 bd 00 00 00       	push   $0xbd
+8010716e:	e9 4b f3 ff ff       	jmp    801064be <alltraps>
+
+80107173 <vector190>:
+80107173:	6a 00                	push   $0x0
+80107175:	68 be 00 00 00       	push   $0xbe
+8010717a:	e9 3f f3 ff ff       	jmp    801064be <alltraps>
+
+8010717f <vector191>:
+8010717f:	6a 00                	push   $0x0
+80107181:	68 bf 00 00 00       	push   $0xbf
+80107186:	e9 33 f3 ff ff       	jmp    801064be <alltraps>
+
+8010718b <vector192>:
+8010718b:	6a 00                	push   $0x0
+8010718d:	68 c0 00 00 00       	push   $0xc0
+80107192:	e9 27 f3 ff ff       	jmp    801064be <alltraps>
+
+80107197 <vector193>:
+80107197:	6a 00                	push   $0x0
+80107199:	68 c1 00 00 00       	push   $0xc1
+8010719e:	e9 1b f3 ff ff       	jmp    801064be <alltraps>
+
+801071a3 <vector194>:
+801071a3:	6a 00                	push   $0x0
+801071a5:	68 c2 00 00 00       	push   $0xc2
+801071aa:	e9 0f f3 ff ff       	jmp    801064be <alltraps>
+
+801071af <vector195>:
+801071af:	6a 00                	push   $0x0
+801071b1:	68 c3 00 00 00       	push   $0xc3
+801071b6:	e9 03 f3 ff ff       	jmp    801064be <alltraps>
+
+801071bb <vector196>:
+801071bb:	6a 00                	push   $0x0
+801071bd:	68 c4 00 00 00       	push   $0xc4
+801071c2:	e9 f7 f2 ff ff       	jmp    801064be <alltraps>
+
+801071c7 <vector197>:
+801071c7:	6a 00                	push   $0x0
+801071c9:	68 c5 00 00 00       	push   $0xc5
+801071ce:	e9 eb f2 ff ff       	jmp    801064be <alltraps>
+
+801071d3 <vector198>:
+801071d3:	6a 00                	push   $0x0
+801071d5:	68 c6 00 00 00       	push   $0xc6
+801071da:	e9 df f2 ff ff       	jmp    801064be <alltraps>
+
+801071df <vector199>:
+801071df:	6a 00                	push   $0x0
+801071e1:	68 c7 00 00 00       	push   $0xc7
+801071e6:	e9 d3 f2 ff ff       	jmp    801064be <alltraps>
+
+801071eb <vector200>:
+801071eb:	6a 00                	push   $0x0
+801071ed:	68 c8 00 00 00       	push   $0xc8
+801071f2:	e9 c7 f2 ff ff       	jmp    801064be <alltraps>
+
+801071f7 <vector201>:
+801071f7:	6a 00                	push   $0x0
+801071f9:	68 c9 00 00 00       	push   $0xc9
+801071fe:	e9 bb f2 ff ff       	jmp    801064be <alltraps>
+
+80107203 <vector202>:
+80107203:	6a 00                	push   $0x0
+80107205:	68 ca 00 00 00       	push   $0xca
+8010720a:	e9 af f2 ff ff       	jmp    801064be <alltraps>
+
+8010720f <vector203>:
+8010720f:	6a 00                	push   $0x0
+80107211:	68 cb 00 00 00       	push   $0xcb
+80107216:	e9 a3 f2 ff ff       	jmp    801064be <alltraps>
+
+8010721b <vector204>:
+8010721b:	6a 00                	push   $0x0
+8010721d:	68 cc 00 00 00       	push   $0xcc
+80107222:	e9 97 f2 ff ff       	jmp    801064be <alltraps>
+
+80107227 <vector205>:
+80107227:	6a 00                	push   $0x0
+80107229:	68 cd 00 00 00       	push   $0xcd
+8010722e:	e9 8b f2 ff ff       	jmp    801064be <alltraps>
+
+80107233 <vector206>:
+80107233:	6a 00                	push   $0x0
+80107235:	68 ce 00 00 00       	push   $0xce
+8010723a:	e9 7f f2 ff ff       	jmp    801064be <alltraps>
+
+8010723f <vector207>:
+8010723f:	6a 00                	push   $0x0
+80107241:	68 cf 00 00 00       	push   $0xcf
+80107246:	e9 73 f2 ff ff       	jmp    801064be <alltraps>
+
+8010724b <vector208>:
+8010724b:	6a 00                	push   $0x0
+8010724d:	68 d0 00 00 00       	push   $0xd0
+80107252:	e9 67 f2 ff ff       	jmp    801064be <alltraps>
+
+80107257 <vector209>:
+80107257:	6a 00                	push   $0x0
+80107259:	68 d1 00 00 00       	push   $0xd1
+8010725e:	e9 5b f2 ff ff       	jmp    801064be <alltraps>
+
+80107263 <vector210>:
+80107263:	6a 00                	push   $0x0
+80107265:	68 d2 00 00 00       	push   $0xd2
+8010726a:	e9 4f f2 ff ff       	jmp    801064be <alltraps>
+
+8010726f <vector211>:
+8010726f:	6a 00                	push   $0x0
+80107271:	68 d3 00 00 00       	push   $0xd3
+80107276:	e9 43 f2 ff ff       	jmp    801064be <alltraps>
+
+8010727b <vector212>:
+8010727b:	6a 00                	push   $0x0
+8010727d:	68 d4 00 00 00       	push   $0xd4
+80107282:	e9 37 f2 ff ff       	jmp    801064be <alltraps>
+
+80107287 <vector213>:
+80107287:	6a 00                	push   $0x0
+80107289:	68 d5 00 00 00       	push   $0xd5
+8010728e:	e9 2b f2 ff ff       	jmp    801064be <alltraps>
+
+80107293 <vector214>:
+80107293:	6a 00                	push   $0x0
+80107295:	68 d6 00 00 00       	push   $0xd6
+8010729a:	e9 1f f2 ff ff       	jmp    801064be <alltraps>
+
+8010729f <vector215>:
+8010729f:	6a 00                	push   $0x0
+801072a1:	68 d7 00 00 00       	push   $0xd7
+801072a6:	e9 13 f2 ff ff       	jmp    801064be <alltraps>
+
+801072ab <vector216>:
+801072ab:	6a 00                	push   $0x0
+801072ad:	68 d8 00 00 00       	push   $0xd8
+801072b2:	e9 07 f2 ff ff       	jmp    801064be <alltraps>
+
+801072b7 <vector217>:
+801072b7:	6a 00                	push   $0x0
+801072b9:	68 d9 00 00 00       	push   $0xd9
+801072be:	e9 fb f1 ff ff       	jmp    801064be <alltraps>
+
+801072c3 <vector218>:
+801072c3:	6a 00                	push   $0x0
+801072c5:	68 da 00 00 00       	push   $0xda
+801072ca:	e9 ef f1 ff ff       	jmp    801064be <alltraps>
+
+801072cf <vector219>:
+801072cf:	6a 00                	push   $0x0
+801072d1:	68 db 00 00 00       	push   $0xdb
+801072d6:	e9 e3 f1 ff ff       	jmp    801064be <alltraps>
+
+801072db <vector220>:
+801072db:	6a 00                	push   $0x0
+801072dd:	68 dc 00 00 00       	push   $0xdc
+801072e2:	e9 d7 f1 ff ff       	jmp    801064be <alltraps>
+
+801072e7 <vector221>:
+801072e7:	6a 00                	push   $0x0
+801072e9:	68 dd 00 00 00       	push   $0xdd
+801072ee:	e9 cb f1 ff ff       	jmp    801064be <alltraps>
+
+801072f3 <vector222>:
+801072f3:	6a 00                	push   $0x0
+801072f5:	68 de 00 00 00       	push   $0xde
+801072fa:	e9 bf f1 ff ff       	jmp    801064be <alltraps>
+
+801072ff <vector223>:
+801072ff:	6a 00                	push   $0x0
+80107301:	68 df 00 00 00       	push   $0xdf
+80107306:	e9 b3 f1 ff ff       	jmp    801064be <alltraps>
+
+8010730b <vector224>:
+8010730b:	6a 00                	push   $0x0
+8010730d:	68 e0 00 00 00       	push   $0xe0
+80107312:	e9 a7 f1 ff ff       	jmp    801064be <alltraps>
+
+80107317 <vector225>:
+80107317:	6a 00                	push   $0x0
+80107319:	68 e1 00 00 00       	push   $0xe1
+8010731e:	e9 9b f1 ff ff       	jmp    801064be <alltraps>
+
+80107323 <vector226>:
+80107323:	6a 00                	push   $0x0
+80107325:	68 e2 00 00 00       	push   $0xe2
+8010732a:	e9 8f f1 ff ff       	jmp    801064be <alltraps>
+
+8010732f <vector227>:
+8010732f:	6a 00                	push   $0x0
+80107331:	68 e3 00 00 00       	push   $0xe3
+80107336:	e9 83 f1 ff ff       	jmp    801064be <alltraps>
+
+8010733b <vector228>:
+8010733b:	6a 00                	push   $0x0
+8010733d:	68 e4 00 00 00       	push   $0xe4
+80107342:	e9 77 f1 ff ff       	jmp    801064be <alltraps>
+
+80107347 <vector229>:
+80107347:	6a 00                	push   $0x0
+80107349:	68 e5 00 00 00       	push   $0xe5
+8010734e:	e9 6b f1 ff ff       	jmp    801064be <alltraps>
+
+80107353 <vector230>:
+80107353:	6a 00                	push   $0x0
+80107355:	68 e6 00 00 00       	push   $0xe6
+8010735a:	e9 5f f1 ff ff       	jmp    801064be <alltraps>
+
+8010735f <vector231>:
+8010735f:	6a 00                	push   $0x0
+80107361:	68 e7 00 00 00       	push   $0xe7
+80107366:	e9 53 f1 ff ff       	jmp    801064be <alltraps>
+
+8010736b <vector232>:
+8010736b:	6a 00                	push   $0x0
+8010736d:	68 e8 00 00 00       	push   $0xe8
+80107372:	e9 47 f1 ff ff       	jmp    801064be <alltraps>
+
+80107377 <vector233>:
+80107377:	6a 00                	push   $0x0
+80107379:	68 e9 00 00 00       	push   $0xe9
+8010737e:	e9 3b f1 ff ff       	jmp    801064be <alltraps>
+
+80107383 <vector234>:
+80107383:	6a 00                	push   $0x0
+80107385:	68 ea 00 00 00       	push   $0xea
+8010738a:	e9 2f f1 ff ff       	jmp    801064be <alltraps>
+
+8010738f <vector235>:
+8010738f:	6a 00                	push   $0x0
+80107391:	68 eb 00 00 00       	push   $0xeb
+80107396:	e9 23 f1 ff ff       	jmp    801064be <alltraps>
+
+8010739b <vector236>:
+8010739b:	6a 00                	push   $0x0
+8010739d:	68 ec 00 00 00       	push   $0xec
+801073a2:	e9 17 f1 ff ff       	jmp    801064be <alltraps>
+
+801073a7 <vector237>:
+801073a7:	6a 00                	push   $0x0
+801073a9:	68 ed 00 00 00       	push   $0xed
+801073ae:	e9 0b f1 ff ff       	jmp    801064be <alltraps>
+
+801073b3 <vector238>:
+801073b3:	6a 00                	push   $0x0
+801073b5:	68 ee 00 00 00       	push   $0xee
+801073ba:	e9 ff f0 ff ff       	jmp    801064be <alltraps>
+
+801073bf <vector239>:
+801073bf:	6a 00                	push   $0x0
+801073c1:	68 ef 00 00 00       	push   $0xef
+801073c6:	e9 f3 f0 ff ff       	jmp    801064be <alltraps>
+
+801073cb <vector240>:
+801073cb:	6a 00                	push   $0x0
+801073cd:	68 f0 00 00 00       	push   $0xf0
+801073d2:	e9 e7 f0 ff ff       	jmp    801064be <alltraps>
+
+801073d7 <vector241>:
+801073d7:	6a 00                	push   $0x0
+801073d9:	68 f1 00 00 00       	push   $0xf1
+801073de:	e9 db f0 ff ff       	jmp    801064be <alltraps>
+
+801073e3 <vector242>:
+801073e3:	6a 00                	push   $0x0
+801073e5:	68 f2 00 00 00       	push   $0xf2
+801073ea:	e9 cf f0 ff ff       	jmp    801064be <alltraps>
+
+801073ef <vector243>:
+801073ef:	6a 00                	push   $0x0
+801073f1:	68 f3 00 00 00       	push   $0xf3
+801073f6:	e9 c3 f0 ff ff       	jmp    801064be <alltraps>
+
+801073fb <vector244>:
+801073fb:	6a 00                	push   $0x0
+801073fd:	68 f4 00 00 00       	push   $0xf4
+80107402:	e9 b7 f0 ff ff       	jmp    801064be <alltraps>
+
+80107407 <vector245>:
+80107407:	6a 00                	push   $0x0
+80107409:	68 f5 00 00 00       	push   $0xf5
+8010740e:	e9 ab f0 ff ff       	jmp    801064be <alltraps>
+
+80107413 <vector246>:
+80107413:	6a 00                	push   $0x0
+80107415:	68 f6 00 00 00       	push   $0xf6
+8010741a:	e9 9f f0 ff ff       	jmp    801064be <alltraps>
+
+8010741f <vector247>:
+8010741f:	6a 00                	push   $0x0
+80107421:	68 f7 00 00 00       	push   $0xf7
+80107426:	e9 93 f0 ff ff       	jmp    801064be <alltraps>
+
+8010742b <vector248>:
+8010742b:	6a 00                	push   $0x0
+8010742d:	68 f8 00 00 00       	push   $0xf8
+80107432:	e9 87 f0 ff ff       	jmp    801064be <alltraps>
+
+80107437 <vector249>:
+80107437:	6a 00                	push   $0x0
+80107439:	68 f9 00 00 00       	push   $0xf9
+8010743e:	e9 7b f0 ff ff       	jmp    801064be <alltraps>
+
+80107443 <vector250>:
+80107443:	6a 00                	push   $0x0
+80107445:	68 fa 00 00 00       	push   $0xfa
+8010744a:	e9 6f f0 ff ff       	jmp    801064be <alltraps>
+
+8010744f <vector251>:
+8010744f:	6a 00                	push   $0x0
+80107451:	68 fb 00 00 00       	push   $0xfb
+80107456:	e9 63 f0 ff ff       	jmp    801064be <alltraps>
+
+8010745b <vector252>:
+8010745b:	6a 00                	push   $0x0
+8010745d:	68 fc 00 00 00       	push   $0xfc
+80107462:	e9 57 f0 ff ff       	jmp    801064be <alltraps>
+
+80107467 <vector253>:
+80107467:	6a 00                	push   $0x0
+80107469:	68 fd 00 00 00       	push   $0xfd
+8010746e:	e9 4b f0 ff ff       	jmp    801064be <alltraps>
+
+80107473 <vector254>:
+80107473:	6a 00                	push   $0x0
+80107475:	68 fe 00 00 00       	push   $0xfe
+8010747a:	e9 3f f0 ff ff       	jmp    801064be <alltraps>
+
+8010747f <vector255>:
+8010747f:	6a 00                	push   $0x0
+80107481:	68 ff 00 00 00       	push   $0xff
+80107486:	e9 33 f0 ff ff       	jmp    801064be <alltraps>
+8010748b:	66 90                	xchg   %ax,%ax
+8010748d:	66 90                	xchg   %ax,%ax
+8010748f:	90                   	nop
 
-801067a0 <walkpgdir>:
+80107490 <walkpgdir>:
 // Return the address of the PTE in page table pgdir
 // that corresponds to virtual address va.  If alloc!=0,
 // create any required page table pages.
 static pte_t *
 walkpgdir(pde_t *pgdir, const void *va, int alloc)
 {
-801067a0:	55                   	push   %ebp
-801067a1:	89 e5                	mov    %esp,%ebp
-801067a3:	57                   	push   %edi
-801067a4:	56                   	push   %esi
-801067a5:	89 d6                	mov    %edx,%esi
+80107490:	55                   	push   %ebp
+80107491:	89 e5                	mov    %esp,%ebp
+80107493:	57                   	push   %edi
+80107494:	56                   	push   %esi
+80107495:	89 d6                	mov    %edx,%esi
   pde_t *pde;
   pte_t *pgtab;
 
   pde = &pgdir[PDX(va)];
-801067a7:	c1 ea 16             	shr    $0x16,%edx
+80107497:	c1 ea 16             	shr    $0x16,%edx
 {
-801067aa:	53                   	push   %ebx
+8010749a:	53                   	push   %ebx
   pde = &pgdir[PDX(va)];
-801067ab:	8d 3c 90             	lea    (%eax,%edx,4),%edi
+8010749b:	8d 3c 90             	lea    (%eax,%edx,4),%edi
 {
-801067ae:	83 ec 0c             	sub    $0xc,%esp
+8010749e:	83 ec 0c             	sub    $0xc,%esp
   if(*pde & PTE_P){
-801067b1:	8b 1f                	mov    (%edi),%ebx
-801067b3:	f6 c3 01             	test   $0x1,%bl
-801067b6:	74 28                	je     801067e0 <walkpgdir+0x40>
+801074a1:	8b 1f                	mov    (%edi),%ebx
+801074a3:	f6 c3 01             	test   $0x1,%bl
+801074a6:	74 28                	je     801074d0 <walkpgdir+0x40>
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-801067b8:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-801067be:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
+801074a8:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+801074ae:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
     // The permissions here are overly generous, but they can
     // be further restricted by the permissions in the page table
     // entries, if necessary.
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
   }
   return &pgtab[PTX(va)];
-801067c4:	89 f0                	mov    %esi,%eax
+801074b4:	89 f0                	mov    %esi,%eax
 }
-801067c6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801074b6:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return &pgtab[PTX(va)];
-801067c9:	c1 e8 0a             	shr    $0xa,%eax
-801067cc:	25 fc 0f 00 00       	and    $0xffc,%eax
-801067d1:	01 d8                	add    %ebx,%eax
-}
-801067d3:	5b                   	pop    %ebx
-801067d4:	5e                   	pop    %esi
-801067d5:	5f                   	pop    %edi
-801067d6:	5d                   	pop    %ebp
-801067d7:	c3                   	ret    
-801067d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801067df:	90                   	nop
+801074b9:	c1 e8 0a             	shr    $0xa,%eax
+801074bc:	25 fc 0f 00 00       	and    $0xffc,%eax
+801074c1:	01 d8                	add    %ebx,%eax
+}
+801074c3:	5b                   	pop    %ebx
+801074c4:	5e                   	pop    %esi
+801074c5:	5f                   	pop    %edi
+801074c6:	5d                   	pop    %ebp
+801074c7:	c3                   	ret    
+801074c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801074cf:	90                   	nop
     if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
-801067e0:	85 c9                	test   %ecx,%ecx
-801067e2:	74 2c                	je     80106810 <walkpgdir+0x70>
-801067e4:	e8 47 be ff ff       	call   80102630 <kalloc>
-801067e9:	89 c3                	mov    %eax,%ebx
-801067eb:	85 c0                	test   %eax,%eax
-801067ed:	74 21                	je     80106810 <walkpgdir+0x70>
+801074d0:	85 c9                	test   %ecx,%ecx
+801074d2:	74 2c                	je     80107500 <walkpgdir+0x70>
+801074d4:	e8 c7 b1 ff ff       	call   801026a0 <kalloc>
+801074d9:	89 c3                	mov    %eax,%ebx
+801074db:	85 c0                	test   %eax,%eax
+801074dd:	74 21                	je     80107500 <walkpgdir+0x70>
     memset(pgtab, 0, PGSIZE);
-801067ef:	83 ec 04             	sub    $0x4,%esp
-801067f2:	68 00 10 00 00       	push   $0x1000
-801067f7:	6a 00                	push   $0x0
-801067f9:	50                   	push   %eax
-801067fa:	e8 71 de ff ff       	call   80104670 <memset>
+801074df:	83 ec 04             	sub    $0x4,%esp
+801074e2:	68 00 10 00 00       	push   $0x1000
+801074e7:	6a 00                	push   $0x0
+801074e9:	50                   	push   %eax
+801074ea:	e8 d1 dd ff ff       	call   801052c0 <memset>
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
-801067ff:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106805:	83 c4 10             	add    $0x10,%esp
-80106808:	83 c8 07             	or     $0x7,%eax
-8010680b:	89 07                	mov    %eax,(%edi)
-8010680d:	eb b5                	jmp    801067c4 <walkpgdir+0x24>
-8010680f:	90                   	nop
+801074ef:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+801074f5:	83 c4 10             	add    $0x10,%esp
+801074f8:	83 c8 07             	or     $0x7,%eax
+801074fb:	89 07                	mov    %eax,(%edi)
+801074fd:	eb b5                	jmp    801074b4 <walkpgdir+0x24>
+801074ff:	90                   	nop
 }
-80106810:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107500:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return 0;
-80106813:	31 c0                	xor    %eax,%eax
+80107503:	31 c0                	xor    %eax,%eax
 }
-80106815:	5b                   	pop    %ebx
-80106816:	5e                   	pop    %esi
-80106817:	5f                   	pop    %edi
-80106818:	5d                   	pop    %ebp
-80106819:	c3                   	ret    
-8010681a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80106820 <mappages>:
-// Create PTEs for virtual addresses starting at va that refer to
-// physical addresses starting at pa. va and size might not
-// be page-aligned.
-static int
-mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
-{
-80106820:	55                   	push   %ebp
-80106821:	89 e5                	mov    %esp,%ebp
-80106823:	57                   	push   %edi
-80106824:	89 c7                	mov    %eax,%edi
-  char *a, *last;
-  pte_t *pte;
+80107505:	5b                   	pop    %ebx
+80107506:	5e                   	pop    %esi
+80107507:	5f                   	pop    %edi
+80107508:	5d                   	pop    %ebp
+80107509:	c3                   	ret    
+8010750a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-  a = (char*)PGROUNDDOWN((uint)va);
-  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-80106826:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
-{
-8010682a:	56                   	push   %esi
-  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-8010682b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-  a = (char*)PGROUNDDOWN((uint)va);
-80106830:	89 d6                	mov    %edx,%esi
-{
-80106832:	53                   	push   %ebx
-  a = (char*)PGROUNDDOWN((uint)va);
-80106833:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
-{
-80106839:	83 ec 1c             	sub    $0x1c,%esp
-  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-8010683c:	89 45 e0             	mov    %eax,-0x20(%ebp)
-8010683f:	8b 45 08             	mov    0x8(%ebp),%eax
-80106842:	29 f0                	sub    %esi,%eax
-80106844:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106847:	eb 1f                	jmp    80106868 <mappages+0x48>
-80106849:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  for(;;){
-    if((pte = walkpgdir(pgdir, a, 1)) == 0)
-      return -1;
-    if(*pte & PTE_P)
-80106850:	f6 00 01             	testb  $0x1,(%eax)
-80106853:	75 45                	jne    8010689a <mappages+0x7a>
-      panic("remap");
-    *pte = pa | perm | PTE_P;
-80106855:	0b 5d 0c             	or     0xc(%ebp),%ebx
-80106858:	83 cb 01             	or     $0x1,%ebx
-8010685b:	89 18                	mov    %ebx,(%eax)
-    if(a == last)
-8010685d:	3b 75 e0             	cmp    -0x20(%ebp),%esi
-80106860:	74 2e                	je     80106890 <mappages+0x70>
-      break;
-    a += PGSIZE;
-80106862:	81 c6 00 10 00 00    	add    $0x1000,%esi
-  for(;;){
-80106868:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    if((pte = walkpgdir(pgdir, a, 1)) == 0)
-8010686b:	b9 01 00 00 00       	mov    $0x1,%ecx
-80106870:	89 f2                	mov    %esi,%edx
-80106872:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
-80106875:	89 f8                	mov    %edi,%eax
-80106877:	e8 24 ff ff ff       	call   801067a0 <walkpgdir>
-8010687c:	85 c0                	test   %eax,%eax
-8010687e:	75 d0                	jne    80106850 <mappages+0x30>
-    pa += PGSIZE;
-  }
-  return 0;
-}
-80106880:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return -1;
-80106883:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80106888:	5b                   	pop    %ebx
-80106889:	5e                   	pop    %esi
-8010688a:	5f                   	pop    %edi
-8010688b:	5d                   	pop    %ebp
-8010688c:	c3                   	ret    
-8010688d:	8d 76 00             	lea    0x0(%esi),%esi
-80106890:	8d 65 f4             	lea    -0xc(%ebp),%esp
-  return 0;
-80106893:	31 c0                	xor    %eax,%eax
-}
-80106895:	5b                   	pop    %ebx
-80106896:	5e                   	pop    %esi
-80106897:	5f                   	pop    %edi
-80106898:	5d                   	pop    %ebp
-80106899:	c3                   	ret    
-      panic("remap");
-8010689a:	83 ec 0c             	sub    $0xc,%esp
-8010689d:	68 88 79 10 80       	push   $0x80107988
-801068a2:	e8 e9 9a ff ff       	call   80100390 <panic>
-801068a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801068ae:	66 90                	xchg   %ax,%ax
-
-801068b0 <deallocuvm.part.0>:
+80107510 <deallocuvm.part.0>:
 // Deallocate user pages to bring the process size from oldsz to
 // newsz.  oldsz and newsz need not be page-aligned, nor does newsz
 // need to be less than oldsz.  oldsz can be larger than the actual
 // process size.  Returns the new process size.
 int
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-801068b0:	55                   	push   %ebp
-801068b1:	89 e5                	mov    %esp,%ebp
-801068b3:	57                   	push   %edi
-801068b4:	56                   	push   %esi
-801068b5:	89 c6                	mov    %eax,%esi
-801068b7:	53                   	push   %ebx
-801068b8:	89 d3                	mov    %edx,%ebx
+80107510:	55                   	push   %ebp
+80107511:	89 e5                	mov    %esp,%ebp
+80107513:	57                   	push   %edi
+80107514:	56                   	push   %esi
+80107515:	89 c6                	mov    %eax,%esi
+80107517:	53                   	push   %ebx
+80107518:	89 d3                	mov    %edx,%ebx
   uint a, pa;
 
   if(newsz >= oldsz)
     return oldsz;
 
   a = PGROUNDUP(newsz);
-801068ba:	8d 91 ff 0f 00 00    	lea    0xfff(%ecx),%edx
-801068c0:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+8010751a:	8d 91 ff 0f 00 00    	lea    0xfff(%ecx),%edx
+80107520:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-801068c6:	83 ec 1c             	sub    $0x1c,%esp
-801068c9:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+80107526:	83 ec 1c             	sub    $0x1c,%esp
+80107529:	89 4d e0             	mov    %ecx,-0x20(%ebp)
   for(; a  < oldsz; a += PGSIZE){
-801068cc:	39 da                	cmp    %ebx,%edx
-801068ce:	73 5b                	jae    8010692b <deallocuvm.part.0+0x7b>
-801068d0:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
-801068d3:	89 d7                	mov    %edx,%edi
-801068d5:	eb 14                	jmp    801068eb <deallocuvm.part.0+0x3b>
-801068d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801068de:	66 90                	xchg   %ax,%ax
-801068e0:	81 c7 00 10 00 00    	add    $0x1000,%edi
-801068e6:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
-801068e9:	76 40                	jbe    8010692b <deallocuvm.part.0+0x7b>
+8010752c:	39 da                	cmp    %ebx,%edx
+8010752e:	73 5b                	jae    8010758b <deallocuvm.part.0+0x7b>
+80107530:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
+80107533:	89 d7                	mov    %edx,%edi
+80107535:	eb 14                	jmp    8010754b <deallocuvm.part.0+0x3b>
+80107537:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010753e:	66 90                	xchg   %ax,%ax
+80107540:	81 c7 00 10 00 00    	add    $0x1000,%edi
+80107546:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80107549:	76 40                	jbe    8010758b <deallocuvm.part.0+0x7b>
     pte = walkpgdir(pgdir, (char*)a, 0);
-801068eb:	31 c9                	xor    %ecx,%ecx
-801068ed:	89 fa                	mov    %edi,%edx
-801068ef:	89 f0                	mov    %esi,%eax
-801068f1:	e8 aa fe ff ff       	call   801067a0 <walkpgdir>
-801068f6:	89 c3                	mov    %eax,%ebx
+8010754b:	31 c9                	xor    %ecx,%ecx
+8010754d:	89 fa                	mov    %edi,%edx
+8010754f:	89 f0                	mov    %esi,%eax
+80107551:	e8 3a ff ff ff       	call   80107490 <walkpgdir>
+80107556:	89 c3                	mov    %eax,%ebx
     if(!pte)
-801068f8:	85 c0                	test   %eax,%eax
-801068fa:	74 44                	je     80106940 <deallocuvm.part.0+0x90>
+80107558:	85 c0                	test   %eax,%eax
+8010755a:	74 44                	je     801075a0 <deallocuvm.part.0+0x90>
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
     else if((*pte & PTE_P) != 0){
-801068fc:	8b 00                	mov    (%eax),%eax
-801068fe:	a8 01                	test   $0x1,%al
-80106900:	74 de                	je     801068e0 <deallocuvm.part.0+0x30>
+8010755c:	8b 00                	mov    (%eax),%eax
+8010755e:	a8 01                	test   $0x1,%al
+80107560:	74 de                	je     80107540 <deallocuvm.part.0+0x30>
       pa = PTE_ADDR(*pte);
       if(pa == 0)
-80106902:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80106907:	74 47                	je     80106950 <deallocuvm.part.0+0xa0>
+80107562:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80107567:	74 47                	je     801075b0 <deallocuvm.part.0+0xa0>
         panic("kfree");
       char *v = P2V(pa);
       kfree(v);
-80106909:	83 ec 0c             	sub    $0xc,%esp
+80107569:	83 ec 0c             	sub    $0xc,%esp
       char *v = P2V(pa);
-8010690c:	05 00 00 00 80       	add    $0x80000000,%eax
-80106911:	81 c7 00 10 00 00    	add    $0x1000,%edi
+8010756c:	05 00 00 00 80       	add    $0x80000000,%eax
+80107571:	81 c7 00 10 00 00    	add    $0x1000,%edi
       kfree(v);
-80106917:	50                   	push   %eax
-80106918:	e8 53 bb ff ff       	call   80102470 <kfree>
+80107577:	50                   	push   %eax
+80107578:	e8 f3 ae ff ff       	call   80102470 <kfree>
       *pte = 0;
-8010691d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-80106923:	83 c4 10             	add    $0x10,%esp
+8010757d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80107583:	83 c4 10             	add    $0x10,%esp
   for(; a  < oldsz; a += PGSIZE){
-80106926:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
-80106929:	77 c0                	ja     801068eb <deallocuvm.part.0+0x3b>
+80107586:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80107589:	77 c0                	ja     8010754b <deallocuvm.part.0+0x3b>
     }
   }
   return newsz;
 }
-8010692b:	8b 45 e0             	mov    -0x20(%ebp),%eax
-8010692e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106931:	5b                   	pop    %ebx
-80106932:	5e                   	pop    %esi
-80106933:	5f                   	pop    %edi
-80106934:	5d                   	pop    %ebp
-80106935:	c3                   	ret    
-80106936:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010693d:	8d 76 00             	lea    0x0(%esi),%esi
+8010758b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010758e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107591:	5b                   	pop    %ebx
+80107592:	5e                   	pop    %esi
+80107593:	5f                   	pop    %edi
+80107594:	5d                   	pop    %ebp
+80107595:	c3                   	ret    
+80107596:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010759d:	8d 76 00             	lea    0x0(%esi),%esi
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
-80106940:	89 fa                	mov    %edi,%edx
-80106942:	81 e2 00 00 c0 ff    	and    $0xffc00000,%edx
-80106948:	8d ba 00 00 40 00    	lea    0x400000(%edx),%edi
-8010694e:	eb 96                	jmp    801068e6 <deallocuvm.part.0+0x36>
+801075a0:	89 fa                	mov    %edi,%edx
+801075a2:	81 e2 00 00 c0 ff    	and    $0xffc00000,%edx
+801075a8:	8d ba 00 00 40 00    	lea    0x400000(%edx),%edi
+801075ae:	eb 96                	jmp    80107546 <deallocuvm.part.0+0x36>
         panic("kfree");
-80106950:	83 ec 0c             	sub    $0xc,%esp
-80106953:	68 46 73 10 80       	push   $0x80107346
-80106958:	e8 33 9a ff ff       	call   80100390 <panic>
-8010695d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80106960 <seginit>:
-{
-80106960:	f3 0f 1e fb          	endbr32 
-80106964:	55                   	push   %ebp
-80106965:	89 e5                	mov    %esp,%ebp
-80106967:	83 ec 18             	sub    $0x18,%esp
+801075b0:	83 ec 0c             	sub    $0xc,%esp
+801075b3:	68 c6 80 10 80       	push   $0x801080c6
+801075b8:	e8 d3 8d ff ff       	call   80100390 <panic>
+801075bd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801075c0 <seginit>:
+{
+801075c0:	f3 0f 1e fb          	endbr32 
+801075c4:	55                   	push   %ebp
+801075c5:	89 e5                	mov    %esp,%ebp
+801075c7:	83 ec 18             	sub    $0x18,%esp
   c = &cpus[cpuid()];
-8010696a:	e8 d1 cf ff ff       	call   80103940 <cpuid>
+801075ca:	e8 c1 c6 ff ff       	call   80103c90 <cpuid>
   pd[0] = size-1;
-8010696f:	ba 2f 00 00 00       	mov    $0x2f,%edx
-80106974:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
-8010697a:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
+801075cf:	ba 2f 00 00 00       	mov    $0x2f,%edx
+801075d4:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
+801075da:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-8010697e:	c7 80 f8 27 11 80 ff 	movl   $0xffff,-0x7feed808(%eax)
-80106985:	ff 00 00 
-80106988:	c7 80 fc 27 11 80 00 	movl   $0xcf9a00,-0x7feed804(%eax)
-8010698f:	9a cf 00 
+801075de:	c7 80 18 38 11 80 ff 	movl   $0xffff,-0x7feec7e8(%eax)
+801075e5:	ff 00 00 
+801075e8:	c7 80 1c 38 11 80 00 	movl   $0xcf9a00,-0x7feec7e4(%eax)
+801075ef:	9a cf 00 
   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-80106992:	c7 80 00 28 11 80 ff 	movl   $0xffff,-0x7feed800(%eax)
-80106999:	ff 00 00 
-8010699c:	c7 80 04 28 11 80 00 	movl   $0xcf9200,-0x7feed7fc(%eax)
-801069a3:	92 cf 00 
+801075f2:	c7 80 20 38 11 80 ff 	movl   $0xffff,-0x7feec7e0(%eax)
+801075f9:	ff 00 00 
+801075fc:	c7 80 24 38 11 80 00 	movl   $0xcf9200,-0x7feec7dc(%eax)
+80107603:	92 cf 00 
   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-801069a6:	c7 80 08 28 11 80 ff 	movl   $0xffff,-0x7feed7f8(%eax)
-801069ad:	ff 00 00 
-801069b0:	c7 80 0c 28 11 80 00 	movl   $0xcffa00,-0x7feed7f4(%eax)
-801069b7:	fa cf 00 
+80107606:	c7 80 28 38 11 80 ff 	movl   $0xffff,-0x7feec7d8(%eax)
+8010760d:	ff 00 00 
+80107610:	c7 80 2c 38 11 80 00 	movl   $0xcffa00,-0x7feec7d4(%eax)
+80107617:	fa cf 00 
   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-801069ba:	c7 80 10 28 11 80 ff 	movl   $0xffff,-0x7feed7f0(%eax)
-801069c1:	ff 00 00 
-801069c4:	c7 80 14 28 11 80 00 	movl   $0xcff200,-0x7feed7ec(%eax)
-801069cb:	f2 cf 00 
+8010761a:	c7 80 30 38 11 80 ff 	movl   $0xffff,-0x7feec7d0(%eax)
+80107621:	ff 00 00 
+80107624:	c7 80 34 38 11 80 00 	movl   $0xcff200,-0x7feec7cc(%eax)
+8010762b:	f2 cf 00 
   lgdt(c->gdt, sizeof(c->gdt));
-801069ce:	05 f0 27 11 80       	add    $0x801127f0,%eax
+8010762e:	05 10 38 11 80       	add    $0x80113810,%eax
   pd[1] = (uint)p;
-801069d3:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
+80107633:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
   pd[2] = (uint)p >> 16;
-801069d7:	c1 e8 10             	shr    $0x10,%eax
-801069da:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+80107637:	c1 e8 10             	shr    $0x10,%eax
+8010763a:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
   asm volatile("lgdt (%0)" : : "r" (pd));
-801069de:	8d 45 f2             	lea    -0xe(%ebp),%eax
-801069e1:	0f 01 10             	lgdtl  (%eax)
+8010763e:	8d 45 f2             	lea    -0xe(%ebp),%eax
+80107641:	0f 01 10             	lgdtl  (%eax)
+}
+80107644:	c9                   	leave  
+80107645:	c3                   	ret    
+80107646:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010764d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80107650 <mappages>:
+{
+80107650:	f3 0f 1e fb          	endbr32 
+80107654:	55                   	push   %ebp
+80107655:	89 e5                	mov    %esp,%ebp
+80107657:	57                   	push   %edi
+80107658:	56                   	push   %esi
+80107659:	53                   	push   %ebx
+8010765a:	83 ec 1c             	sub    $0x1c,%esp
+8010765d:	8b 45 0c             	mov    0xc(%ebp),%eax
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+80107660:	8b 4d 10             	mov    0x10(%ebp),%ecx
+{
+80107663:	8b 7d 08             	mov    0x8(%ebp),%edi
+  a = (char*)PGROUNDDOWN((uint)va);
+80107666:	89 c6                	mov    %eax,%esi
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+80107668:	8d 44 08 ff          	lea    -0x1(%eax,%ecx,1),%eax
+8010766c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+  a = (char*)PGROUNDDOWN((uint)va);
+80107671:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+80107677:	89 45 e0             	mov    %eax,-0x20(%ebp)
+8010767a:	8b 45 14             	mov    0x14(%ebp),%eax
+8010767d:	29 f0                	sub    %esi,%eax
+8010767f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107682:	eb 1c                	jmp    801076a0 <mappages+0x50>
+80107684:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(*pte & PTE_P)
+80107688:	f6 00 01             	testb  $0x1,(%eax)
+8010768b:	75 45                	jne    801076d2 <mappages+0x82>
+    *pte = pa | perm | PTE_P;
+8010768d:	0b 5d 18             	or     0x18(%ebp),%ebx
+80107690:	83 cb 01             	or     $0x1,%ebx
+80107693:	89 18                	mov    %ebx,(%eax)
+    if(a == last)
+80107695:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+80107698:	74 2e                	je     801076c8 <mappages+0x78>
+    a += PGSIZE;
+8010769a:	81 c6 00 10 00 00    	add    $0x1000,%esi
+  for(;;){
+801076a0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    if((pte = walkpgdir(pgdir, a, 1)) == 0)
+801076a3:	b9 01 00 00 00       	mov    $0x1,%ecx
+801076a8:	89 f2                	mov    %esi,%edx
+801076aa:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
+801076ad:	89 f8                	mov    %edi,%eax
+801076af:	e8 dc fd ff ff       	call   80107490 <walkpgdir>
+801076b4:	85 c0                	test   %eax,%eax
+801076b6:	75 d0                	jne    80107688 <mappages+0x38>
+}
+801076b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return -1;
+801076bb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801069e4:	c9                   	leave  
-801069e5:	c3                   	ret    
-801069e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801069ed:	8d 76 00             	lea    0x0(%esi),%esi
+801076c0:	5b                   	pop    %ebx
+801076c1:	5e                   	pop    %esi
+801076c2:	5f                   	pop    %edi
+801076c3:	5d                   	pop    %ebp
+801076c4:	c3                   	ret    
+801076c5:	8d 76 00             	lea    0x0(%esi),%esi
+801076c8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+801076cb:	31 c0                	xor    %eax,%eax
+}
+801076cd:	5b                   	pop    %ebx
+801076ce:	5e                   	pop    %esi
+801076cf:	5f                   	pop    %edi
+801076d0:	5d                   	pop    %ebp
+801076d1:	c3                   	ret    
+      panic("remap");
+801076d2:	83 ec 0c             	sub    $0xc,%esp
+801076d5:	68 50 88 10 80       	push   $0x80108850
+801076da:	e8 b1 8c ff ff       	call   80100390 <panic>
+801076df:	90                   	nop
 
-801069f0 <switchkvm>:
+801076e0 <switchkvm>:
 {
-801069f0:	f3 0f 1e fb          	endbr32 
+801076e0:	f3 0f 1e fb          	endbr32 
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-801069f4:	a1 a4 54 11 80       	mov    0x801154a4,%eax
-801069f9:	05 00 00 00 80       	add    $0x80000000,%eax
+801076e4:	a1 f4 63 11 80       	mov    0x801163f4,%eax
+801076e9:	05 00 00 00 80       	add    $0x80000000,%eax
 }
 
 static inline void
 lcr3(uint val)
 {
   asm volatile("movl %0,%%cr3" : : "r" (val));
-801069fe:	0f 22 d8             	mov    %eax,%cr3
+801076ee:	0f 22 d8             	mov    %eax,%cr3
 }
-80106a01:	c3                   	ret    
-80106a02:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106a09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80106a10 <switchuvm>:
-{
-80106a10:	f3 0f 1e fb          	endbr32 
-80106a14:	55                   	push   %ebp
-80106a15:	89 e5                	mov    %esp,%ebp
-80106a17:	57                   	push   %edi
-80106a18:	56                   	push   %esi
-80106a19:	53                   	push   %ebx
-80106a1a:	83 ec 1c             	sub    $0x1c,%esp
-80106a1d:	8b 75 08             	mov    0x8(%ebp),%esi
+801076f1:	c3                   	ret    
+801076f2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801076f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80107700 <switchuvm>:
+{
+80107700:	f3 0f 1e fb          	endbr32 
+80107704:	55                   	push   %ebp
+80107705:	89 e5                	mov    %esp,%ebp
+80107707:	57                   	push   %edi
+80107708:	56                   	push   %esi
+80107709:	53                   	push   %ebx
+8010770a:	83 ec 1c             	sub    $0x1c,%esp
+8010770d:	8b 75 08             	mov    0x8(%ebp),%esi
   if(p == 0)
-80106a20:	85 f6                	test   %esi,%esi
-80106a22:	0f 84 cb 00 00 00    	je     80106af3 <switchuvm+0xe3>
+80107710:	85 f6                	test   %esi,%esi
+80107712:	0f 84 cb 00 00 00    	je     801077e3 <switchuvm+0xe3>
   if(p->kstack == 0)
-80106a28:	8b 46 08             	mov    0x8(%esi),%eax
-80106a2b:	85 c0                	test   %eax,%eax
-80106a2d:	0f 84 da 00 00 00    	je     80106b0d <switchuvm+0xfd>
+80107718:	8b 46 08             	mov    0x8(%esi),%eax
+8010771b:	85 c0                	test   %eax,%eax
+8010771d:	0f 84 da 00 00 00    	je     801077fd <switchuvm+0xfd>
   if(p->pgdir == 0)
-80106a33:	8b 46 04             	mov    0x4(%esi),%eax
-80106a36:	85 c0                	test   %eax,%eax
-80106a38:	0f 84 c2 00 00 00    	je     80106b00 <switchuvm+0xf0>
+80107723:	8b 46 04             	mov    0x4(%esi),%eax
+80107726:	85 c0                	test   %eax,%eax
+80107728:	0f 84 c2 00 00 00    	je     801077f0 <switchuvm+0xf0>
   pushcli();
-80106a3e:	e8 1d da ff ff       	call   80104460 <pushcli>
+8010772e:	e8 7d d9 ff ff       	call   801050b0 <pushcli>
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106a43:	e8 88 ce ff ff       	call   801038d0 <mycpu>
-80106a48:	89 c3                	mov    %eax,%ebx
-80106a4a:	e8 81 ce ff ff       	call   801038d0 <mycpu>
-80106a4f:	89 c7                	mov    %eax,%edi
-80106a51:	e8 7a ce ff ff       	call   801038d0 <mycpu>
-80106a56:	83 c7 08             	add    $0x8,%edi
-80106a59:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106a5c:	e8 6f ce ff ff       	call   801038d0 <mycpu>
-80106a61:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80106a64:	ba 67 00 00 00       	mov    $0x67,%edx
-80106a69:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
-80106a70:	83 c0 08             	add    $0x8,%eax
-80106a73:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
+80107733:	e8 f8 c4 ff ff       	call   80103c30 <mycpu>
+80107738:	89 c3                	mov    %eax,%ebx
+8010773a:	e8 f1 c4 ff ff       	call   80103c30 <mycpu>
+8010773f:	89 c7                	mov    %eax,%edi
+80107741:	e8 ea c4 ff ff       	call   80103c30 <mycpu>
+80107746:	83 c7 08             	add    $0x8,%edi
+80107749:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010774c:	e8 df c4 ff ff       	call   80103c30 <mycpu>
+80107751:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80107754:	ba 67 00 00 00       	mov    $0x67,%edx
+80107759:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
+80107760:	83 c0 08             	add    $0x8,%eax
+80107763:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106a7a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
+8010776a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106a7f:	83 c1 08             	add    $0x8,%ecx
-80106a82:	c1 e8 18             	shr    $0x18,%eax
-80106a85:	c1 e9 10             	shr    $0x10,%ecx
-80106a88:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
-80106a8e:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
-80106a94:	b9 99 40 00 00       	mov    $0x4099,%ecx
-80106a99:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
+8010776f:	83 c1 08             	add    $0x8,%ecx
+80107772:	c1 e8 18             	shr    $0x18,%eax
+80107775:	c1 e9 10             	shr    $0x10,%ecx
+80107778:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
+8010777e:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
+80107784:	b9 99 40 00 00       	mov    $0x4099,%ecx
+80107789:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106aa0:	bb 10 00 00 00       	mov    $0x10,%ebx
+80107790:	bb 10 00 00 00       	mov    $0x10,%ebx
   mycpu()->gdt[SEG_TSS].s = 0;
-80106aa5:	e8 26 ce ff ff       	call   801038d0 <mycpu>
-80106aaa:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
+80107795:	e8 96 c4 ff ff       	call   80103c30 <mycpu>
+8010779a:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106ab1:	e8 1a ce ff ff       	call   801038d0 <mycpu>
-80106ab6:	66 89 58 10          	mov    %bx,0x10(%eax)
+801077a1:	e8 8a c4 ff ff       	call   80103c30 <mycpu>
+801077a6:	66 89 58 10          	mov    %bx,0x10(%eax)
   mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
-80106aba:	8b 5e 08             	mov    0x8(%esi),%ebx
-80106abd:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80106ac3:	e8 08 ce ff ff       	call   801038d0 <mycpu>
-80106ac8:	89 58 0c             	mov    %ebx,0xc(%eax)
+801077aa:	8b 5e 08             	mov    0x8(%esi),%ebx
+801077ad:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801077b3:	e8 78 c4 ff ff       	call   80103c30 <mycpu>
+801077b8:	89 58 0c             	mov    %ebx,0xc(%eax)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106acb:	e8 00 ce ff ff       	call   801038d0 <mycpu>
-80106ad0:	66 89 78 6e          	mov    %di,0x6e(%eax)
+801077bb:	e8 70 c4 ff ff       	call   80103c30 <mycpu>
+801077c0:	66 89 78 6e          	mov    %di,0x6e(%eax)
   asm volatile("ltr %0" : : "r" (sel));
-80106ad4:	b8 28 00 00 00       	mov    $0x28,%eax
-80106ad9:	0f 00 d8             	ltr    %ax
+801077c4:	b8 28 00 00 00       	mov    $0x28,%eax
+801077c9:	0f 00 d8             	ltr    %ax
   lcr3(V2P(p->pgdir));  // switch to process's address space
-80106adc:	8b 46 04             	mov    0x4(%esi),%eax
-80106adf:	05 00 00 00 80       	add    $0x80000000,%eax
+801077cc:	8b 46 04             	mov    0x4(%esi),%eax
+801077cf:	05 00 00 00 80       	add    $0x80000000,%eax
   asm volatile("movl %0,%%cr3" : : "r" (val));
-80106ae4:	0f 22 d8             	mov    %eax,%cr3
+801077d4:	0f 22 d8             	mov    %eax,%cr3
 }
-80106ae7:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106aea:	5b                   	pop    %ebx
-80106aeb:	5e                   	pop    %esi
-80106aec:	5f                   	pop    %edi
-80106aed:	5d                   	pop    %ebp
+801077d7:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801077da:	5b                   	pop    %ebx
+801077db:	5e                   	pop    %esi
+801077dc:	5f                   	pop    %edi
+801077dd:	5d                   	pop    %ebp
   popcli();
-80106aee:	e9 bd d9 ff ff       	jmp    801044b0 <popcli>
+801077de:	e9 1d d9 ff ff       	jmp    80105100 <popcli>
     panic("switchuvm: no process");
-80106af3:	83 ec 0c             	sub    $0xc,%esp
-80106af6:	68 8e 79 10 80       	push   $0x8010798e
-80106afb:	e8 90 98 ff ff       	call   80100390 <panic>
+801077e3:	83 ec 0c             	sub    $0xc,%esp
+801077e6:	68 56 88 10 80       	push   $0x80108856
+801077eb:	e8 a0 8b ff ff       	call   80100390 <panic>
     panic("switchuvm: no pgdir");
-80106b00:	83 ec 0c             	sub    $0xc,%esp
-80106b03:	68 b9 79 10 80       	push   $0x801079b9
-80106b08:	e8 83 98 ff ff       	call   80100390 <panic>
+801077f0:	83 ec 0c             	sub    $0xc,%esp
+801077f3:	68 81 88 10 80       	push   $0x80108881
+801077f8:	e8 93 8b ff ff       	call   80100390 <panic>
     panic("switchuvm: no kstack");
-80106b0d:	83 ec 0c             	sub    $0xc,%esp
-80106b10:	68 a4 79 10 80       	push   $0x801079a4
-80106b15:	e8 76 98 ff ff       	call   80100390 <panic>
-80106b1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80106b20 <inituvm>:
-{
-80106b20:	f3 0f 1e fb          	endbr32 
-80106b24:	55                   	push   %ebp
-80106b25:	89 e5                	mov    %esp,%ebp
-80106b27:	57                   	push   %edi
-80106b28:	56                   	push   %esi
-80106b29:	53                   	push   %ebx
-80106b2a:	83 ec 1c             	sub    $0x1c,%esp
-80106b2d:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106b30:	8b 75 10             	mov    0x10(%ebp),%esi
-80106b33:	8b 7d 08             	mov    0x8(%ebp),%edi
-80106b36:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801077fd:	83 ec 0c             	sub    $0xc,%esp
+80107800:	68 6c 88 10 80       	push   $0x8010886c
+80107805:	e8 86 8b ff ff       	call   80100390 <panic>
+8010780a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80107810 <inituvm>:
+{
+80107810:	f3 0f 1e fb          	endbr32 
+80107814:	55                   	push   %ebp
+80107815:	89 e5                	mov    %esp,%ebp
+80107817:	57                   	push   %edi
+80107818:	56                   	push   %esi
+80107819:	53                   	push   %ebx
+8010781a:	83 ec 1c             	sub    $0x1c,%esp
+8010781d:	8b 75 10             	mov    0x10(%ebp),%esi
+80107820:	8b 55 08             	mov    0x8(%ebp),%edx
+80107823:	8b 7d 0c             	mov    0xc(%ebp),%edi
   if(sz >= PGSIZE)
-80106b39:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
-80106b3f:	77 4b                	ja     80106b8c <inituvm+0x6c>
+80107826:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+8010782c:	77 50                	ja     8010787e <inituvm+0x6e>
+8010782e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
   mem = kalloc();
-80106b41:	e8 ea ba ff ff       	call   80102630 <kalloc>
+80107831:	e8 6a ae ff ff       	call   801026a0 <kalloc>
   memset(mem, 0, PGSIZE);
-80106b46:	83 ec 04             	sub    $0x4,%esp
-80106b49:	68 00 10 00 00       	push   $0x1000
+80107836:	83 ec 04             	sub    $0x4,%esp
+80107839:	68 00 10 00 00       	push   $0x1000
   mem = kalloc();
-80106b4e:	89 c3                	mov    %eax,%ebx
+8010783e:	89 c3                	mov    %eax,%ebx
   memset(mem, 0, PGSIZE);
-80106b50:	6a 00                	push   $0x0
-80106b52:	50                   	push   %eax
-80106b53:	e8 18 db ff ff       	call   80104670 <memset>
+80107840:	6a 00                	push   $0x0
+80107842:	50                   	push   %eax
+80107843:	e8 78 da ff ff       	call   801052c0 <memset>
   mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
-80106b58:	58                   	pop    %eax
-80106b59:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106b5f:	5a                   	pop    %edx
-80106b60:	6a 06                	push   $0x6
-80106b62:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106b67:	31 d2                	xor    %edx,%edx
-80106b69:	50                   	push   %eax
-80106b6a:	89 f8                	mov    %edi,%eax
-80106b6c:	e8 af fc ff ff       	call   80106820 <mappages>
+80107848:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+8010784b:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80107851:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
+80107858:	50                   	push   %eax
+80107859:	68 00 10 00 00       	push   $0x1000
+8010785e:	6a 00                	push   $0x0
+80107860:	52                   	push   %edx
+80107861:	e8 ea fd ff ff       	call   80107650 <mappages>
   memmove(mem, init, sz);
-80106b71:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106b74:	89 75 10             	mov    %esi,0x10(%ebp)
-80106b77:	83 c4 10             	add    $0x10,%esp
-80106b7a:	89 5d 08             	mov    %ebx,0x8(%ebp)
-80106b7d:	89 45 0c             	mov    %eax,0xc(%ebp)
-}
-80106b80:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106b83:	5b                   	pop    %ebx
-80106b84:	5e                   	pop    %esi
-80106b85:	5f                   	pop    %edi
-80106b86:	5d                   	pop    %ebp
+80107866:	89 75 10             	mov    %esi,0x10(%ebp)
+80107869:	83 c4 20             	add    $0x20,%esp
+8010786c:	89 7d 0c             	mov    %edi,0xc(%ebp)
+8010786f:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+80107872:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107875:	5b                   	pop    %ebx
+80107876:	5e                   	pop    %esi
+80107877:	5f                   	pop    %edi
+80107878:	5d                   	pop    %ebp
   memmove(mem, init, sz);
-80106b87:	e9 84 db ff ff       	jmp    80104710 <memmove>
+80107879:	e9 e2 da ff ff       	jmp    80105360 <memmove>
     panic("inituvm: more than a page");
-80106b8c:	83 ec 0c             	sub    $0xc,%esp
-80106b8f:	68 cd 79 10 80       	push   $0x801079cd
-80106b94:	e8 f7 97 ff ff       	call   80100390 <panic>
-80106b99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80106ba0 <loaduvm>:
-{
-80106ba0:	f3 0f 1e fb          	endbr32 
-80106ba4:	55                   	push   %ebp
-80106ba5:	89 e5                	mov    %esp,%ebp
-80106ba7:	57                   	push   %edi
-80106ba8:	56                   	push   %esi
-80106ba9:	53                   	push   %ebx
-80106baa:	83 ec 1c             	sub    $0x1c,%esp
-80106bad:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106bb0:	8b 75 18             	mov    0x18(%ebp),%esi
+8010787e:	83 ec 0c             	sub    $0xc,%esp
+80107881:	68 95 88 10 80       	push   $0x80108895
+80107886:	e8 05 8b ff ff       	call   80100390 <panic>
+8010788b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010788f:	90                   	nop
+
+80107890 <loaduvm>:
+{
+80107890:	f3 0f 1e fb          	endbr32 
+80107894:	55                   	push   %ebp
+80107895:	89 e5                	mov    %esp,%ebp
+80107897:	57                   	push   %edi
+80107898:	56                   	push   %esi
+80107899:	53                   	push   %ebx
+8010789a:	83 ec 1c             	sub    $0x1c,%esp
+8010789d:	8b 45 0c             	mov    0xc(%ebp),%eax
+801078a0:	8b 75 18             	mov    0x18(%ebp),%esi
   if((uint) addr % PGSIZE != 0)
-80106bb3:	a9 ff 0f 00 00       	test   $0xfff,%eax
-80106bb8:	0f 85 99 00 00 00    	jne    80106c57 <loaduvm+0xb7>
+801078a3:	a9 ff 0f 00 00       	test   $0xfff,%eax
+801078a8:	0f 85 99 00 00 00    	jne    80107947 <loaduvm+0xb7>
   for(i = 0; i < sz; i += PGSIZE){
-80106bbe:	01 f0                	add    %esi,%eax
-80106bc0:	89 f3                	mov    %esi,%ebx
-80106bc2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801078ae:	01 f0                	add    %esi,%eax
+801078b0:	89 f3                	mov    %esi,%ebx
+801078b2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106bc5:	8b 45 14             	mov    0x14(%ebp),%eax
-80106bc8:	01 f0                	add    %esi,%eax
-80106bca:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801078b5:	8b 45 14             	mov    0x14(%ebp),%eax
+801078b8:	01 f0                	add    %esi,%eax
+801078ba:	89 45 e0             	mov    %eax,-0x20(%ebp)
   for(i = 0; i < sz; i += PGSIZE){
-80106bcd:	85 f6                	test   %esi,%esi
-80106bcf:	75 15                	jne    80106be6 <loaduvm+0x46>
-80106bd1:	eb 6d                	jmp    80106c40 <loaduvm+0xa0>
-80106bd3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106bd7:	90                   	nop
-80106bd8:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
-80106bde:	89 f0                	mov    %esi,%eax
-80106be0:	29 d8                	sub    %ebx,%eax
-80106be2:	39 c6                	cmp    %eax,%esi
-80106be4:	76 5a                	jbe    80106c40 <loaduvm+0xa0>
+801078bd:	85 f6                	test   %esi,%esi
+801078bf:	75 15                	jne    801078d6 <loaduvm+0x46>
+801078c1:	eb 6d                	jmp    80107930 <loaduvm+0xa0>
+801078c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801078c7:	90                   	nop
+801078c8:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
+801078ce:	89 f0                	mov    %esi,%eax
+801078d0:	29 d8                	sub    %ebx,%eax
+801078d2:	39 c6                	cmp    %eax,%esi
+801078d4:	76 5a                	jbe    80107930 <loaduvm+0xa0>
     if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
-80106be6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80106be9:	8b 45 08             	mov    0x8(%ebp),%eax
-80106bec:	31 c9                	xor    %ecx,%ecx
-80106bee:	29 da                	sub    %ebx,%edx
-80106bf0:	e8 ab fb ff ff       	call   801067a0 <walkpgdir>
-80106bf5:	85 c0                	test   %eax,%eax
-80106bf7:	74 51                	je     80106c4a <loaduvm+0xaa>
+801078d6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+801078d9:	8b 45 08             	mov    0x8(%ebp),%eax
+801078dc:	31 c9                	xor    %ecx,%ecx
+801078de:	29 da                	sub    %ebx,%edx
+801078e0:	e8 ab fb ff ff       	call   80107490 <walkpgdir>
+801078e5:	85 c0                	test   %eax,%eax
+801078e7:	74 51                	je     8010793a <loaduvm+0xaa>
     pa = PTE_ADDR(*pte);
-80106bf9:	8b 00                	mov    (%eax),%eax
+801078e9:	8b 00                	mov    (%eax),%eax
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106bfb:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+801078eb:	8b 4d e0             	mov    -0x20(%ebp),%ecx
     if(sz - i < PGSIZE)
-80106bfe:	bf 00 10 00 00       	mov    $0x1000,%edi
+801078ee:	bf 00 10 00 00       	mov    $0x1000,%edi
     pa = PTE_ADDR(*pte);
-80106c03:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+801078f3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
     if(sz - i < PGSIZE)
-80106c08:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
-80106c0e:	0f 46 fb             	cmovbe %ebx,%edi
+801078f8:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
+801078fe:	0f 46 fb             	cmovbe %ebx,%edi
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106c11:	29 d9                	sub    %ebx,%ecx
-80106c13:	05 00 00 00 80       	add    $0x80000000,%eax
-80106c18:	57                   	push   %edi
-80106c19:	51                   	push   %ecx
-80106c1a:	50                   	push   %eax
-80106c1b:	ff 75 10             	pushl  0x10(%ebp)
-80106c1e:	e8 3d ae ff ff       	call   80101a60 <readi>
-80106c23:	83 c4 10             	add    $0x10,%esp
-80106c26:	39 f8                	cmp    %edi,%eax
-80106c28:	74 ae                	je     80106bd8 <loaduvm+0x38>
+80107901:	29 d9                	sub    %ebx,%ecx
+80107903:	05 00 00 00 80       	add    $0x80000000,%eax
+80107908:	57                   	push   %edi
+80107909:	51                   	push   %ecx
+8010790a:	50                   	push   %eax
+8010790b:	ff 75 10             	pushl  0x10(%ebp)
+8010790e:	e8 4d a1 ff ff       	call   80101a60 <readi>
+80107913:	83 c4 10             	add    $0x10,%esp
+80107916:	39 f8                	cmp    %edi,%eax
+80107918:	74 ae                	je     801078c8 <loaduvm+0x38>
 }
-80106c2a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010791a:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-80106c2d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010791d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80106c32:	5b                   	pop    %ebx
-80106c33:	5e                   	pop    %esi
-80106c34:	5f                   	pop    %edi
-80106c35:	5d                   	pop    %ebp
-80106c36:	c3                   	ret    
-80106c37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106c3e:	66 90                	xchg   %ax,%ax
-80106c40:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107922:	5b                   	pop    %ebx
+80107923:	5e                   	pop    %esi
+80107924:	5f                   	pop    %edi
+80107925:	5d                   	pop    %ebp
+80107926:	c3                   	ret    
+80107927:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010792e:	66 90                	xchg   %ax,%ax
+80107930:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-80106c43:	31 c0                	xor    %eax,%eax
+80107933:	31 c0                	xor    %eax,%eax
 }
-80106c45:	5b                   	pop    %ebx
-80106c46:	5e                   	pop    %esi
-80106c47:	5f                   	pop    %edi
-80106c48:	5d                   	pop    %ebp
-80106c49:	c3                   	ret    
+80107935:	5b                   	pop    %ebx
+80107936:	5e                   	pop    %esi
+80107937:	5f                   	pop    %edi
+80107938:	5d                   	pop    %ebp
+80107939:	c3                   	ret    
       panic("loaduvm: address should exist");
-80106c4a:	83 ec 0c             	sub    $0xc,%esp
-80106c4d:	68 e7 79 10 80       	push   $0x801079e7
-80106c52:	e8 39 97 ff ff       	call   80100390 <panic>
+8010793a:	83 ec 0c             	sub    $0xc,%esp
+8010793d:	68 af 88 10 80       	push   $0x801088af
+80107942:	e8 49 8a ff ff       	call   80100390 <panic>
     panic("loaduvm: addr must be page aligned");
-80106c57:	83 ec 0c             	sub    $0xc,%esp
-80106c5a:	68 88 7a 10 80       	push   $0x80107a88
-80106c5f:	e8 2c 97 ff ff       	call   80100390 <panic>
-80106c64:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106c6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106c6f:	90                   	nop
-
-80106c70 <allocuvm>:
-{
-80106c70:	f3 0f 1e fb          	endbr32 
-80106c74:	55                   	push   %ebp
-80106c75:	89 e5                	mov    %esp,%ebp
-80106c77:	57                   	push   %edi
-80106c78:	56                   	push   %esi
-80106c79:	53                   	push   %ebx
-80106c7a:	83 ec 1c             	sub    $0x1c,%esp
+80107947:	83 ec 0c             	sub    $0xc,%esp
+8010794a:	68 38 89 10 80       	push   $0x80108938
+8010794f:	e8 3c 8a ff ff       	call   80100390 <panic>
+80107954:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010795b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010795f:	90                   	nop
+
+80107960 <allocuvm>:
+{
+80107960:	f3 0f 1e fb          	endbr32 
+80107964:	55                   	push   %ebp
+80107965:	89 e5                	mov    %esp,%ebp
+80107967:	57                   	push   %edi
+80107968:	56                   	push   %esi
+80107969:	53                   	push   %ebx
+8010796a:	83 ec 1c             	sub    $0x1c,%esp
   if(newsz >= KERNBASE)
-80106c7d:	8b 45 10             	mov    0x10(%ebp),%eax
-{
-80106c80:	8b 7d 08             	mov    0x8(%ebp),%edi
-  if(newsz >= KERNBASE)
-80106c83:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106c86:	85 c0                	test   %eax,%eax
-80106c88:	0f 88 b2 00 00 00    	js     80106d40 <allocuvm+0xd0>
+8010796d:	8b 7d 10             	mov    0x10(%ebp),%edi
+80107970:	85 ff                	test   %edi,%edi
+80107972:	0f 88 20 01 00 00    	js     80107a98 <allocuvm+0x138>
   if(newsz < oldsz)
-80106c8e:	3b 45 0c             	cmp    0xc(%ebp),%eax
-    return oldsz;
-80106c91:	8b 45 0c             	mov    0xc(%ebp),%eax
-  if(newsz < oldsz)
-80106c94:	0f 82 96 00 00 00    	jb     80106d30 <allocuvm+0xc0>
+80107978:	3b 7d 0c             	cmp    0xc(%ebp),%edi
+8010797b:	0f 82 07 01 00 00    	jb     80107a88 <allocuvm+0x128>
   a = PGROUNDUP(oldsz);
-80106c9a:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
-80106ca0:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+80107981:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107984:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
+8010798a:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
   for(; a < newsz; a += PGSIZE){
-80106ca6:	39 75 10             	cmp    %esi,0x10(%ebp)
-80106ca9:	77 40                	ja     80106ceb <allocuvm+0x7b>
-80106cab:	e9 83 00 00 00       	jmp    80106d33 <allocuvm+0xc3>
+80107990:	39 75 10             	cmp    %esi,0x10(%ebp)
+80107993:	0f 86 f2 00 00 00    	jbe    80107a8b <allocuvm+0x12b>
+80107999:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+8010799c:	8b 7d 08             	mov    0x8(%ebp),%edi
+8010799f:	eb 4b                	jmp    801079ec <allocuvm+0x8c>
+801079a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     memset(mem, 0, PGSIZE);
-80106cb0:	83 ec 04             	sub    $0x4,%esp
-80106cb3:	68 00 10 00 00       	push   $0x1000
-80106cb8:	6a 00                	push   $0x0
-80106cba:	50                   	push   %eax
-80106cbb:	e8 b0 d9 ff ff       	call   80104670 <memset>
+801079a8:	83 ec 04             	sub    $0x4,%esp
+801079ab:	68 00 10 00 00       	push   $0x1000
+801079b0:	6a 00                	push   $0x0
+801079b2:	50                   	push   %eax
+801079b3:	e8 08 d9 ff ff       	call   801052c0 <memset>
     if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
-80106cc0:	58                   	pop    %eax
-80106cc1:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106cc7:	5a                   	pop    %edx
-80106cc8:	6a 06                	push   $0x6
-80106cca:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106ccf:	89 f2                	mov    %esi,%edx
-80106cd1:	50                   	push   %eax
-80106cd2:	89 f8                	mov    %edi,%eax
-80106cd4:	e8 47 fb ff ff       	call   80106820 <mappages>
-80106cd9:	83 c4 10             	add    $0x10,%esp
-80106cdc:	85 c0                	test   %eax,%eax
-80106cde:	78 78                	js     80106d58 <allocuvm+0xe8>
+801079b8:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+801079be:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
+801079c5:	50                   	push   %eax
+801079c6:	68 00 10 00 00       	push   $0x1000
+801079cb:	56                   	push   %esi
+801079cc:	57                   	push   %edi
+801079cd:	e8 7e fc ff ff       	call   80107650 <mappages>
+801079d2:	83 c4 20             	add    $0x20,%esp
+801079d5:	85 c0                	test   %eax,%eax
+801079d7:	0f 88 cb 00 00 00    	js     80107aa8 <allocuvm+0x148>
   for(; a < newsz; a += PGSIZE){
-80106ce0:	81 c6 00 10 00 00    	add    $0x1000,%esi
-80106ce6:	39 75 10             	cmp    %esi,0x10(%ebp)
-80106ce9:	76 48                	jbe    80106d33 <allocuvm+0xc3>
+801079dd:	81 c6 00 10 00 00    	add    $0x1000,%esi
+801079e3:	39 75 10             	cmp    %esi,0x10(%ebp)
+801079e6:	0f 86 fc 00 00 00    	jbe    80107ae8 <allocuvm+0x188>
     mem = kalloc();
-80106ceb:	e8 40 b9 ff ff       	call   80102630 <kalloc>
-80106cf0:	89 c3                	mov    %eax,%ebx
+801079ec:	e8 af ac ff ff       	call   801026a0 <kalloc>
+801079f1:	89 c3                	mov    %eax,%ebx
     if(mem == 0){
-80106cf2:	85 c0                	test   %eax,%eax
-80106cf4:	75 ba                	jne    80106cb0 <allocuvm+0x40>
-      cprintf("allocuvm out of memory\n");
-80106cf6:	83 ec 0c             	sub    $0xc,%esp
-80106cf9:	68 05 7a 10 80       	push   $0x80107a05
-80106cfe:	e8 ad 99 ff ff       	call   801006b0 <cprintf>
+801079f3:	85 c0                	test   %eax,%eax
+801079f5:	75 b1                	jne    801079a8 <allocuvm+0x48>
   if(newsz >= oldsz)
-80106d03:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106d06:	83 c4 10             	add    $0x10,%esp
-80106d09:	39 45 10             	cmp    %eax,0x10(%ebp)
-80106d0c:	74 32                	je     80106d40 <allocuvm+0xd0>
-80106d0e:	8b 55 10             	mov    0x10(%ebp),%edx
-80106d11:	89 c1                	mov    %eax,%ecx
-80106d13:	89 f8                	mov    %edi,%eax
-80106d15:	e8 96 fb ff ff       	call   801068b0 <deallocuvm.part.0>
-      return 0;
-80106d1a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-}
-80106d21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d24:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d27:	5b                   	pop    %ebx
-80106d28:	5e                   	pop    %esi
-80106d29:	5f                   	pop    %edi
-80106d2a:	5d                   	pop    %ebp
-80106d2b:	c3                   	ret    
-80106d2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801079f7:	8b 45 0c             	mov    0xc(%ebp),%eax
+801079fa:	39 45 10             	cmp    %eax,0x10(%ebp)
+801079fd:	74 0d                	je     80107a0c <allocuvm+0xac>
+801079ff:	89 c1                	mov    %eax,%ecx
+80107a01:	8b 55 10             	mov    0x10(%ebp),%edx
+80107a04:	8b 45 08             	mov    0x8(%ebp),%eax
+80107a07:	e8 04 fb ff ff       	call   80107510 <deallocuvm.part.0>
+      myproc()->state=SLEEPING;
+80107a0c:	e8 df c5 ff ff       	call   80103ff0 <myproc>
+      acquire(&sleeping_channel_lock);
+80107a11:	83 ec 0c             	sub    $0xc,%esp
+      myproc()->state=SLEEPING;
+80107a14:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)
+      acquire(&sleeping_channel_lock);
+80107a1b:	68 c0 63 11 80       	push   $0x801163c0
+80107a20:	e8 8b d7 ff ff       	call   801051b0 <acquire>
+      myproc()->chan=sleeping_channel;
+80107a25:	e8 c6 c5 ff ff       	call   80103ff0 <myproc>
+80107a2a:	8b 15 f8 63 11 80    	mov    0x801163f8,%edx
+      sleeping_channel_count++;
+80107a30:	83 05 c8 b5 10 80 01 	addl   $0x1,0x8010b5c8
+      myproc()->chan=sleeping_channel;
+80107a37:	89 50 20             	mov    %edx,0x20(%eax)
+      release(&sleeping_channel_lock);
+80107a3a:	c7 04 24 c0 63 11 80 	movl   $0x801163c0,(%esp)
+80107a41:	e8 2a d8 ff ff       	call   80105270 <release>
+	     rpush(myproc());
+80107a46:	e8 a5 c5 ff ff       	call   80103ff0 <myproc>
+80107a4b:	89 04 24             	mov    %eax,(%esp)
+80107a4e:	e8 fd bf ff ff       	call   80103a50 <rpush>
+      if(!swap_out_process_exists){
+80107a53:	8b 3d bc b5 10 80    	mov    0x8010b5bc,%edi
+80107a59:	83 c4 10             	add    $0x10,%esp
+80107a5c:	85 ff                	test   %edi,%edi
+80107a5e:	75 38                	jne    80107a98 <allocuvm+0x138>
+        swap_out_process_exists=1;
+80107a60:	c7 05 bc b5 10 80 01 	movl   $0x1,0x8010b5bc
+80107a67:	00 00 00 
+        create_kernel_process("swap_out_process", &swap_out_process_function);
+80107a6a:	83 ec 08             	sub    $0x8,%esp
+80107a6d:	68 a0 45 10 80       	push   $0x801045a0
+80107a72:	68 8c 84 10 80       	push   $0x8010848c
+80107a77:	e8 a4 c5 ff ff       	call   80104020 <create_kernel_process>
+80107a7c:	83 c4 10             	add    $0x10,%esp
+80107a7f:	eb 0a                	jmp    80107a8b <allocuvm+0x12b>
+80107a81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     return oldsz;
-80106d30:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107a88:	8b 7d 0c             	mov    0xc(%ebp),%edi
 }
-80106d33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d36:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d39:	5b                   	pop    %ebx
-80106d3a:	5e                   	pop    %esi
-80106d3b:	5f                   	pop    %edi
-80106d3c:	5d                   	pop    %ebp
-80106d3d:	c3                   	ret    
-80106d3e:	66 90                	xchg   %ax,%ax
+80107a8b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107a8e:	89 f8                	mov    %edi,%eax
+80107a90:	5b                   	pop    %ebx
+80107a91:	5e                   	pop    %esi
+80107a92:	5f                   	pop    %edi
+80107a93:	5d                   	pop    %ebp
+80107a94:	c3                   	ret    
+80107a95:	8d 76 00             	lea    0x0(%esi),%esi
+80107a98:	8d 65 f4             	lea    -0xc(%ebp),%esp
     return 0;
-80106d40:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80107a9b:	31 ff                	xor    %edi,%edi
 }
-80106d47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d4a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d4d:	5b                   	pop    %ebx
-80106d4e:	5e                   	pop    %esi
-80106d4f:	5f                   	pop    %edi
-80106d50:	5d                   	pop    %ebp
-80106d51:	c3                   	ret    
-80106d52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80107a9d:	5b                   	pop    %ebx
+80107a9e:	89 f8                	mov    %edi,%eax
+80107aa0:	5e                   	pop    %esi
+80107aa1:	5f                   	pop    %edi
+80107aa2:	5d                   	pop    %ebp
+80107aa3:	c3                   	ret    
+80107aa4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       cprintf("allocuvm out of memory (2)\n");
-80106d58:	83 ec 0c             	sub    $0xc,%esp
-80106d5b:	68 1d 7a 10 80       	push   $0x80107a1d
-80106d60:	e8 4b 99 ff ff       	call   801006b0 <cprintf>
+80107aa8:	83 ec 0c             	sub    $0xc,%esp
+80107aab:	68 cd 88 10 80       	push   $0x801088cd
+80107ab0:	e8 fb 8b ff ff       	call   801006b0 <cprintf>
   if(newsz >= oldsz)
-80106d65:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106d68:	83 c4 10             	add    $0x10,%esp
-80106d6b:	39 45 10             	cmp    %eax,0x10(%ebp)
-80106d6e:	74 0c                	je     80106d7c <allocuvm+0x10c>
-80106d70:	8b 55 10             	mov    0x10(%ebp),%edx
-80106d73:	89 c1                	mov    %eax,%ecx
-80106d75:	89 f8                	mov    %edi,%eax
-80106d77:	e8 34 fb ff ff       	call   801068b0 <deallocuvm.part.0>
+80107ab5:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107ab8:	83 c4 10             	add    $0x10,%esp
+80107abb:	39 45 10             	cmp    %eax,0x10(%ebp)
+80107abe:	74 0d                	je     80107acd <allocuvm+0x16d>
+80107ac0:	89 c1                	mov    %eax,%ecx
+80107ac2:	8b 55 10             	mov    0x10(%ebp),%edx
+80107ac5:	8b 45 08             	mov    0x8(%ebp),%eax
+80107ac8:	e8 43 fa ff ff       	call   80107510 <deallocuvm.part.0>
+      kfree(mem);
+80107acd:	83 ec 0c             	sub    $0xc,%esp
+      return 0;
+80107ad0:	31 ff                	xor    %edi,%edi
       kfree(mem);
-80106d7c:	83 ec 0c             	sub    $0xc,%esp
-80106d7f:	53                   	push   %ebx
-80106d80:	e8 eb b6 ff ff       	call   80102470 <kfree>
+80107ad2:	53                   	push   %ebx
+80107ad3:	e8 98 a9 ff ff       	call   80102470 <kfree>
       return 0;
-80106d85:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-80106d8c:	83 c4 10             	add    $0x10,%esp
+80107ad8:	83 c4 10             	add    $0x10,%esp
 }
-80106d8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d92:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d95:	5b                   	pop    %ebx
-80106d96:	5e                   	pop    %esi
-80106d97:	5f                   	pop    %edi
-80106d98:	5d                   	pop    %ebp
-80106d99:	c3                   	ret    
-80106d9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80106da0 <deallocuvm>:
-{
-80106da0:	f3 0f 1e fb          	endbr32 
-80106da4:	55                   	push   %ebp
-80106da5:	89 e5                	mov    %esp,%ebp
-80106da7:	8b 55 0c             	mov    0xc(%ebp),%edx
-80106daa:	8b 4d 10             	mov    0x10(%ebp),%ecx
-80106dad:	8b 45 08             	mov    0x8(%ebp),%eax
+80107adb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107ade:	89 f8                	mov    %edi,%eax
+80107ae0:	5b                   	pop    %ebx
+80107ae1:	5e                   	pop    %esi
+80107ae2:	5f                   	pop    %edi
+80107ae3:	5d                   	pop    %ebp
+80107ae4:	c3                   	ret    
+80107ae5:	8d 76 00             	lea    0x0(%esi),%esi
+80107ae8:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80107aeb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107aee:	5b                   	pop    %ebx
+80107aef:	5e                   	pop    %esi
+80107af0:	89 f8                	mov    %edi,%eax
+80107af2:	5f                   	pop    %edi
+80107af3:	5d                   	pop    %ebp
+80107af4:	c3                   	ret    
+80107af5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107afc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80107b00 <deallocuvm>:
+{
+80107b00:	f3 0f 1e fb          	endbr32 
+80107b04:	55                   	push   %ebp
+80107b05:	89 e5                	mov    %esp,%ebp
+80107b07:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107b0a:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80107b0d:	8b 45 08             	mov    0x8(%ebp),%eax
   if(newsz >= oldsz)
-80106db0:	39 d1                	cmp    %edx,%ecx
-80106db2:	73 0c                	jae    80106dc0 <deallocuvm+0x20>
+80107b10:	39 d1                	cmp    %edx,%ecx
+80107b12:	73 0c                	jae    80107b20 <deallocuvm+0x20>
 }
-80106db4:	5d                   	pop    %ebp
-80106db5:	e9 f6 fa ff ff       	jmp    801068b0 <deallocuvm.part.0>
-80106dba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80106dc0:	89 d0                	mov    %edx,%eax
-80106dc2:	5d                   	pop    %ebp
-80106dc3:	c3                   	ret    
-80106dc4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106dcb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106dcf:	90                   	nop
+80107b14:	5d                   	pop    %ebp
+80107b15:	e9 f6 f9 ff ff       	jmp    80107510 <deallocuvm.part.0>
+80107b1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80107b20:	89 d0                	mov    %edx,%eax
+80107b22:	5d                   	pop    %ebp
+80107b23:	c3                   	ret    
+80107b24:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107b2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107b2f:	90                   	nop
 
-80106dd0 <freevm>:
+80107b30 <freevm>:
 
 // Free a page table and all the physical memory pages
 // in the user part.
 void
 freevm(pde_t *pgdir)
 {
-80106dd0:	f3 0f 1e fb          	endbr32 
-80106dd4:	55                   	push   %ebp
-80106dd5:	89 e5                	mov    %esp,%ebp
-80106dd7:	57                   	push   %edi
-80106dd8:	56                   	push   %esi
-80106dd9:	53                   	push   %ebx
-80106dda:	83 ec 0c             	sub    $0xc,%esp
-80106ddd:	8b 75 08             	mov    0x8(%ebp),%esi
+80107b30:	f3 0f 1e fb          	endbr32 
+80107b34:	55                   	push   %ebp
+80107b35:	89 e5                	mov    %esp,%ebp
+80107b37:	57                   	push   %edi
+80107b38:	56                   	push   %esi
+80107b39:	53                   	push   %ebx
+80107b3a:	83 ec 0c             	sub    $0xc,%esp
+80107b3d:	8b 75 08             	mov    0x8(%ebp),%esi
   uint i;
 
   if(pgdir == 0)
-80106de0:	85 f6                	test   %esi,%esi
-80106de2:	74 55                	je     80106e39 <freevm+0x69>
+80107b40:	85 f6                	test   %esi,%esi
+80107b42:	74 55                	je     80107b99 <freevm+0x69>
   if(newsz >= oldsz)
-80106de4:	31 c9                	xor    %ecx,%ecx
-80106de6:	ba 00 00 00 80       	mov    $0x80000000,%edx
-80106deb:	89 f0                	mov    %esi,%eax
-80106ded:	89 f3                	mov    %esi,%ebx
-80106def:	e8 bc fa ff ff       	call   801068b0 <deallocuvm.part.0>
+80107b44:	31 c9                	xor    %ecx,%ecx
+80107b46:	ba 00 00 00 80       	mov    $0x80000000,%edx
+80107b4b:	89 f0                	mov    %esi,%eax
+80107b4d:	89 f3                	mov    %esi,%ebx
+80107b4f:	e8 bc f9 ff ff       	call   80107510 <deallocuvm.part.0>
     panic("freevm: no pgdir");
   deallocuvm(pgdir, KERNBASE, 0);
   for(i = 0; i < NPDENTRIES; i++){
-80106df4:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
-80106dfa:	eb 0b                	jmp    80106e07 <freevm+0x37>
-80106dfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106e00:	83 c3 04             	add    $0x4,%ebx
-80106e03:	39 df                	cmp    %ebx,%edi
-80106e05:	74 23                	je     80106e2a <freevm+0x5a>
+80107b54:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
+80107b5a:	eb 0b                	jmp    80107b67 <freevm+0x37>
+80107b5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107b60:	83 c3 04             	add    $0x4,%ebx
+80107b63:	39 df                	cmp    %ebx,%edi
+80107b65:	74 23                	je     80107b8a <freevm+0x5a>
     if(pgdir[i] & PTE_P){
-80106e07:	8b 03                	mov    (%ebx),%eax
-80106e09:	a8 01                	test   $0x1,%al
-80106e0b:	74 f3                	je     80106e00 <freevm+0x30>
+80107b67:	8b 03                	mov    (%ebx),%eax
+80107b69:	a8 01                	test   $0x1,%al
+80107b6b:	74 f3                	je     80107b60 <freevm+0x30>
       char * v = P2V(PTE_ADDR(pgdir[i]));
-80106e0d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80107b6d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
       kfree(v);
-80106e12:	83 ec 0c             	sub    $0xc,%esp
-80106e15:	83 c3 04             	add    $0x4,%ebx
+80107b72:	83 ec 0c             	sub    $0xc,%esp
+80107b75:	83 c3 04             	add    $0x4,%ebx
       char * v = P2V(PTE_ADDR(pgdir[i]));
-80106e18:	05 00 00 00 80       	add    $0x80000000,%eax
+80107b78:	05 00 00 00 80       	add    $0x80000000,%eax
       kfree(v);
-80106e1d:	50                   	push   %eax
-80106e1e:	e8 4d b6 ff ff       	call   80102470 <kfree>
-80106e23:	83 c4 10             	add    $0x10,%esp
+80107b7d:	50                   	push   %eax
+80107b7e:	e8 ed a8 ff ff       	call   80102470 <kfree>
+80107b83:	83 c4 10             	add    $0x10,%esp
   for(i = 0; i < NPDENTRIES; i++){
-80106e26:	39 df                	cmp    %ebx,%edi
-80106e28:	75 dd                	jne    80106e07 <freevm+0x37>
+80107b86:	39 df                	cmp    %ebx,%edi
+80107b88:	75 dd                	jne    80107b67 <freevm+0x37>
     }
   }
   kfree((char*)pgdir);
-80106e2a:	89 75 08             	mov    %esi,0x8(%ebp)
+80107b8a:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-80106e2d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106e30:	5b                   	pop    %ebx
-80106e31:	5e                   	pop    %esi
-80106e32:	5f                   	pop    %edi
-80106e33:	5d                   	pop    %ebp
+80107b8d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107b90:	5b                   	pop    %ebx
+80107b91:	5e                   	pop    %esi
+80107b92:	5f                   	pop    %edi
+80107b93:	5d                   	pop    %ebp
   kfree((char*)pgdir);
-80106e34:	e9 37 b6 ff ff       	jmp    80102470 <kfree>
+80107b94:	e9 d7 a8 ff ff       	jmp    80102470 <kfree>
     panic("freevm: no pgdir");
-80106e39:	83 ec 0c             	sub    $0xc,%esp
-80106e3c:	68 39 7a 10 80       	push   $0x80107a39
-80106e41:	e8 4a 95 ff ff       	call   80100390 <panic>
-80106e46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106e4d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80106e50 <setupkvm>:
-{
-80106e50:	f3 0f 1e fb          	endbr32 
-80106e54:	55                   	push   %ebp
-80106e55:	89 e5                	mov    %esp,%ebp
-80106e57:	56                   	push   %esi
-80106e58:	53                   	push   %ebx
+80107b99:	83 ec 0c             	sub    $0xc,%esp
+80107b9c:	68 e9 88 10 80       	push   $0x801088e9
+80107ba1:	e8 ea 87 ff ff       	call   80100390 <panic>
+80107ba6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107bad:	8d 76 00             	lea    0x0(%esi),%esi
+
+80107bb0 <setupkvm>:
+{
+80107bb0:	f3 0f 1e fb          	endbr32 
+80107bb4:	55                   	push   %ebp
+80107bb5:	89 e5                	mov    %esp,%ebp
+80107bb7:	56                   	push   %esi
+80107bb8:	53                   	push   %ebx
   if((pgdir = (pde_t*)kalloc()) == 0)
-80106e59:	e8 d2 b7 ff ff       	call   80102630 <kalloc>
-80106e5e:	89 c6                	mov    %eax,%esi
-80106e60:	85 c0                	test   %eax,%eax
-80106e62:	74 42                	je     80106ea6 <setupkvm+0x56>
+80107bb9:	e8 e2 aa ff ff       	call   801026a0 <kalloc>
+80107bbe:	89 c6                	mov    %eax,%esi
+80107bc0:	85 c0                	test   %eax,%eax
+80107bc2:	74 42                	je     80107c06 <setupkvm+0x56>
   memset(pgdir, 0, PGSIZE);
-80106e64:	83 ec 04             	sub    $0x4,%esp
+80107bc4:	83 ec 04             	sub    $0x4,%esp
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80106e67:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
+80107bc7:	bb 20 b4 10 80       	mov    $0x8010b420,%ebx
   memset(pgdir, 0, PGSIZE);
-80106e6c:	68 00 10 00 00       	push   $0x1000
-80106e71:	6a 00                	push   $0x0
-80106e73:	50                   	push   %eax
-80106e74:	e8 f7 d7 ff ff       	call   80104670 <memset>
-80106e79:	83 c4 10             	add    $0x10,%esp
+80107bcc:	68 00 10 00 00       	push   $0x1000
+80107bd1:	6a 00                	push   $0x0
+80107bd3:	50                   	push   %eax
+80107bd4:	e8 e7 d6 ff ff       	call   801052c0 <memset>
+80107bd9:	83 c4 10             	add    $0x10,%esp
                 (uint)k->phys_start, k->perm) < 0) {
-80106e7c:	8b 43 04             	mov    0x4(%ebx),%eax
+80107bdc:	8b 43 04             	mov    0x4(%ebx),%eax
     if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
-80106e7f:	83 ec 08             	sub    $0x8,%esp
-80106e82:	8b 4b 08             	mov    0x8(%ebx),%ecx
-80106e85:	ff 73 0c             	pushl  0xc(%ebx)
-80106e88:	8b 13                	mov    (%ebx),%edx
-80106e8a:	50                   	push   %eax
-80106e8b:	29 c1                	sub    %eax,%ecx
-80106e8d:	89 f0                	mov    %esi,%eax
-80106e8f:	e8 8c f9 ff ff       	call   80106820 <mappages>
-80106e94:	83 c4 10             	add    $0x10,%esp
-80106e97:	85 c0                	test   %eax,%eax
-80106e99:	78 15                	js     80106eb0 <setupkvm+0x60>
+80107bdf:	8b 53 08             	mov    0x8(%ebx),%edx
+80107be2:	83 ec 0c             	sub    $0xc,%esp
+80107be5:	ff 73 0c             	pushl  0xc(%ebx)
+80107be8:	29 c2                	sub    %eax,%edx
+80107bea:	50                   	push   %eax
+80107beb:	52                   	push   %edx
+80107bec:	ff 33                	pushl  (%ebx)
+80107bee:	56                   	push   %esi
+80107bef:	e8 5c fa ff ff       	call   80107650 <mappages>
+80107bf4:	83 c4 20             	add    $0x20,%esp
+80107bf7:	85 c0                	test   %eax,%eax
+80107bf9:	78 15                	js     80107c10 <setupkvm+0x60>
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80106e9b:	83 c3 10             	add    $0x10,%ebx
-80106e9e:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
-80106ea4:	75 d6                	jne    80106e7c <setupkvm+0x2c>
-}
-80106ea6:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80106ea9:	89 f0                	mov    %esi,%eax
-80106eab:	5b                   	pop    %ebx
-80106eac:	5e                   	pop    %esi
-80106ead:	5d                   	pop    %ebp
-80106eae:	c3                   	ret    
-80106eaf:	90                   	nop
+80107bfb:	83 c3 10             	add    $0x10,%ebx
+80107bfe:	81 fb 60 b4 10 80    	cmp    $0x8010b460,%ebx
+80107c04:	75 d6                	jne    80107bdc <setupkvm+0x2c>
+}
+80107c06:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80107c09:	89 f0                	mov    %esi,%eax
+80107c0b:	5b                   	pop    %ebx
+80107c0c:	5e                   	pop    %esi
+80107c0d:	5d                   	pop    %ebp
+80107c0e:	c3                   	ret    
+80107c0f:	90                   	nop
       freevm(pgdir);
-80106eb0:	83 ec 0c             	sub    $0xc,%esp
-80106eb3:	56                   	push   %esi
+80107c10:	83 ec 0c             	sub    $0xc,%esp
+80107c13:	56                   	push   %esi
       return 0;
-80106eb4:	31 f6                	xor    %esi,%esi
+80107c14:	31 f6                	xor    %esi,%esi
       freevm(pgdir);
-80106eb6:	e8 15 ff ff ff       	call   80106dd0 <freevm>
+80107c16:	e8 15 ff ff ff       	call   80107b30 <freevm>
       return 0;
-80106ebb:	83 c4 10             	add    $0x10,%esp
+80107c1b:	83 c4 10             	add    $0x10,%esp
 }
-80106ebe:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80106ec1:	89 f0                	mov    %esi,%eax
-80106ec3:	5b                   	pop    %ebx
-80106ec4:	5e                   	pop    %esi
-80106ec5:	5d                   	pop    %ebp
-80106ec6:	c3                   	ret    
-80106ec7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106ece:	66 90                	xchg   %ax,%ax
-
-80106ed0 <kvmalloc>:
-{
-80106ed0:	f3 0f 1e fb          	endbr32 
-80106ed4:	55                   	push   %ebp
-80106ed5:	89 e5                	mov    %esp,%ebp
-80106ed7:	83 ec 08             	sub    $0x8,%esp
+80107c1e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80107c21:	89 f0                	mov    %esi,%eax
+80107c23:	5b                   	pop    %ebx
+80107c24:	5e                   	pop    %esi
+80107c25:	5d                   	pop    %ebp
+80107c26:	c3                   	ret    
+80107c27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107c2e:	66 90                	xchg   %ax,%ax
+
+80107c30 <kvmalloc>:
+{
+80107c30:	f3 0f 1e fb          	endbr32 
+80107c34:	55                   	push   %ebp
+80107c35:	89 e5                	mov    %esp,%ebp
+80107c37:	83 ec 08             	sub    $0x8,%esp
   kpgdir = setupkvm();
-80106eda:	e8 71 ff ff ff       	call   80106e50 <setupkvm>
-80106edf:	a3 a4 54 11 80       	mov    %eax,0x801154a4
+80107c3a:	e8 71 ff ff ff       	call   80107bb0 <setupkvm>
+80107c3f:	a3 f4 63 11 80       	mov    %eax,0x801163f4
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-80106ee4:	05 00 00 00 80       	add    $0x80000000,%eax
-80106ee9:	0f 22 d8             	mov    %eax,%cr3
+80107c44:	05 00 00 00 80       	add    $0x80000000,%eax
+80107c49:	0f 22 d8             	mov    %eax,%cr3
 }
-80106eec:	c9                   	leave  
-80106eed:	c3                   	ret    
-80106eee:	66 90                	xchg   %ax,%ax
+80107c4c:	c9                   	leave  
+80107c4d:	c3                   	ret    
+80107c4e:	66 90                	xchg   %ax,%ax
 
-80106ef0 <clearpteu>:
+80107c50 <clearpteu>:
 
 // Clear PTE_U on a page. Used to create an inaccessible
 // page beneath the user stack.
 void
 clearpteu(pde_t *pgdir, char *uva)
 {
-80106ef0:	f3 0f 1e fb          	endbr32 
-80106ef4:	55                   	push   %ebp
+80107c50:	f3 0f 1e fb          	endbr32 
+80107c54:	55                   	push   %ebp
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
-80106ef5:	31 c9                	xor    %ecx,%ecx
+80107c55:	31 c9                	xor    %ecx,%ecx
 {
-80106ef7:	89 e5                	mov    %esp,%ebp
-80106ef9:	83 ec 08             	sub    $0x8,%esp
+80107c57:	89 e5                	mov    %esp,%ebp
+80107c59:	83 ec 08             	sub    $0x8,%esp
   pte = walkpgdir(pgdir, uva, 0);
-80106efc:	8b 55 0c             	mov    0xc(%ebp),%edx
-80106eff:	8b 45 08             	mov    0x8(%ebp),%eax
-80106f02:	e8 99 f8 ff ff       	call   801067a0 <walkpgdir>
+80107c5c:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107c5f:	8b 45 08             	mov    0x8(%ebp),%eax
+80107c62:	e8 29 f8 ff ff       	call   80107490 <walkpgdir>
   if(pte == 0)
-80106f07:	85 c0                	test   %eax,%eax
-80106f09:	74 05                	je     80106f10 <clearpteu+0x20>
+80107c67:	85 c0                	test   %eax,%eax
+80107c69:	74 05                	je     80107c70 <clearpteu+0x20>
     panic("clearpteu");
   *pte &= ~PTE_U;
-80106f0b:	83 20 fb             	andl   $0xfffffffb,(%eax)
+80107c6b:	83 20 fb             	andl   $0xfffffffb,(%eax)
 }
-80106f0e:	c9                   	leave  
-80106f0f:	c3                   	ret    
+80107c6e:	c9                   	leave  
+80107c6f:	c3                   	ret    
     panic("clearpteu");
-80106f10:	83 ec 0c             	sub    $0xc,%esp
-80106f13:	68 4a 7a 10 80       	push   $0x80107a4a
-80106f18:	e8 73 94 ff ff       	call   80100390 <panic>
-80106f1d:	8d 76 00             	lea    0x0(%esi),%esi
+80107c70:	83 ec 0c             	sub    $0xc,%esp
+80107c73:	68 fa 88 10 80       	push   $0x801088fa
+80107c78:	e8 13 87 ff ff       	call   80100390 <panic>
+80107c7d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80106f20 <copyuvm>:
+80107c80 <copyuvm>:
 
 // Given a parent process's page table, create a copy
 // of it for a child.
 pde_t*
 copyuvm(pde_t *pgdir, uint sz)
 {
-80106f20:	f3 0f 1e fb          	endbr32 
-80106f24:	55                   	push   %ebp
-80106f25:	89 e5                	mov    %esp,%ebp
-80106f27:	57                   	push   %edi
-80106f28:	56                   	push   %esi
-80106f29:	53                   	push   %ebx
-80106f2a:	83 ec 1c             	sub    $0x1c,%esp
+80107c80:	f3 0f 1e fb          	endbr32 
+80107c84:	55                   	push   %ebp
+80107c85:	89 e5                	mov    %esp,%ebp
+80107c87:	57                   	push   %edi
+80107c88:	56                   	push   %esi
+80107c89:	53                   	push   %ebx
+80107c8a:	83 ec 1c             	sub    $0x1c,%esp
   pde_t *d;
   pte_t *pte;
   uint pa, i, flags;
   char *mem;
 
   if((d = setupkvm()) == 0)
-80106f2d:	e8 1e ff ff ff       	call   80106e50 <setupkvm>
-80106f32:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80106f35:	85 c0                	test   %eax,%eax
-80106f37:	0f 84 9b 00 00 00    	je     80106fd8 <copyuvm+0xb8>
+80107c8d:	e8 1e ff ff ff       	call   80107bb0 <setupkvm>
+80107c92:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80107c95:	85 c0                	test   %eax,%eax
+80107c97:	0f 84 9e 00 00 00    	je     80107d3b <copyuvm+0xbb>
     return 0;
   for(i = 0; i < sz; i += PGSIZE){
-80106f3d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80106f40:	85 c9                	test   %ecx,%ecx
-80106f42:	0f 84 90 00 00 00    	je     80106fd8 <copyuvm+0xb8>
-80106f48:	31 f6                	xor    %esi,%esi
-80106f4a:	eb 46                	jmp    80106f92 <copyuvm+0x72>
-80106f4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107c9d:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107ca0:	85 d2                	test   %edx,%edx
+80107ca2:	0f 84 93 00 00 00    	je     80107d3b <copyuvm+0xbb>
+80107ca8:	31 f6                	xor    %esi,%esi
+80107caa:	eb 44                	jmp    80107cf0 <copyuvm+0x70>
+80107cac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       panic("copyuvm: page not present");
     pa = PTE_ADDR(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
       goto bad;
     memmove(mem, (char*)P2V(pa), PGSIZE);
-80106f50:	83 ec 04             	sub    $0x4,%esp
-80106f53:	81 c7 00 00 00 80    	add    $0x80000000,%edi
-80106f59:	68 00 10 00 00       	push   $0x1000
-80106f5e:	57                   	push   %edi
-80106f5f:	50                   	push   %eax
-80106f60:	e8 ab d7 ff ff       	call   80104710 <memmove>
+80107cb0:	83 ec 04             	sub    $0x4,%esp
+80107cb3:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
+80107cb9:	68 00 10 00 00       	push   $0x1000
+80107cbe:	53                   	push   %ebx
+80107cbf:	50                   	push   %eax
+80107cc0:	e8 9b d6 ff ff       	call   80105360 <memmove>
     if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
-80106f65:	58                   	pop    %eax
-80106f66:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106f6c:	5a                   	pop    %edx
-80106f6d:	ff 75 e4             	pushl  -0x1c(%ebp)
-80106f70:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106f75:	89 f2                	mov    %esi,%edx
-80106f77:	50                   	push   %eax
-80106f78:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106f7b:	e8 a0 f8 ff ff       	call   80106820 <mappages>
-80106f80:	83 c4 10             	add    $0x10,%esp
-80106f83:	85 c0                	test   %eax,%eax
-80106f85:	78 61                	js     80106fe8 <copyuvm+0xc8>
+80107cc5:	58                   	pop    %eax
+80107cc6:	8d 87 00 00 00 80    	lea    -0x80000000(%edi),%eax
+80107ccc:	ff 75 e4             	pushl  -0x1c(%ebp)
+80107ccf:	50                   	push   %eax
+80107cd0:	68 00 10 00 00       	push   $0x1000
+80107cd5:	56                   	push   %esi
+80107cd6:	ff 75 e0             	pushl  -0x20(%ebp)
+80107cd9:	e8 72 f9 ff ff       	call   80107650 <mappages>
+80107cde:	83 c4 20             	add    $0x20,%esp
+80107ce1:	85 c0                	test   %eax,%eax
+80107ce3:	78 6b                	js     80107d50 <copyuvm+0xd0>
   for(i = 0; i < sz; i += PGSIZE){
-80106f87:	81 c6 00 10 00 00    	add    $0x1000,%esi
-80106f8d:	39 75 0c             	cmp    %esi,0xc(%ebp)
-80106f90:	76 46                	jbe    80106fd8 <copyuvm+0xb8>
+80107ce5:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80107ceb:	39 75 0c             	cmp    %esi,0xc(%ebp)
+80107cee:	76 4b                	jbe    80107d3b <copyuvm+0xbb>
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
-80106f92:	8b 45 08             	mov    0x8(%ebp),%eax
-80106f95:	31 c9                	xor    %ecx,%ecx
-80106f97:	89 f2                	mov    %esi,%edx
-80106f99:	e8 02 f8 ff ff       	call   801067a0 <walkpgdir>
-80106f9e:	85 c0                	test   %eax,%eax
-80106fa0:	74 61                	je     80107003 <copyuvm+0xe3>
+80107cf0:	8b 45 08             	mov    0x8(%ebp),%eax
+80107cf3:	31 c9                	xor    %ecx,%ecx
+80107cf5:	89 f2                	mov    %esi,%edx
+80107cf7:	e8 94 f7 ff ff       	call   80107490 <walkpgdir>
+80107cfc:	85 c0                	test   %eax,%eax
+80107cfe:	74 6b                	je     80107d6b <copyuvm+0xeb>
     if(!(*pte & PTE_P))
-80106fa2:	8b 00                	mov    (%eax),%eax
-80106fa4:	a8 01                	test   $0x1,%al
-80106fa6:	74 4e                	je     80106ff6 <copyuvm+0xd6>
+80107d00:	8b 38                	mov    (%eax),%edi
+80107d02:	f7 c7 01 00 00 00    	test   $0x1,%edi
+80107d08:	74 54                	je     80107d5e <copyuvm+0xde>
     pa = PTE_ADDR(*pte);
-80106fa8:	89 c7                	mov    %eax,%edi
+80107d0a:	89 fb                	mov    %edi,%ebx
     flags = PTE_FLAGS(*pte);
-80106faa:	25 ff 0f 00 00       	and    $0xfff,%eax
-80106faf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107d0c:	81 e7 ff 0f 00 00    	and    $0xfff,%edi
+80107d12:	89 7d e4             	mov    %edi,-0x1c(%ebp)
     pa = PTE_ADDR(*pte);
-80106fb2:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+80107d15:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
     if((mem = kalloc()) == 0)
-80106fb8:	e8 73 b6 ff ff       	call   80102630 <kalloc>
-80106fbd:	89 c3                	mov    %eax,%ebx
-80106fbf:	85 c0                	test   %eax,%eax
-80106fc1:	75 8d                	jne    80106f50 <copyuvm+0x30>
+80107d1b:	e8 80 a9 ff ff       	call   801026a0 <kalloc>
+80107d20:	89 c7                	mov    %eax,%edi
+80107d22:	85 c0                	test   %eax,%eax
+80107d24:	75 8a                	jne    80107cb0 <copyuvm+0x30>
     }
   }
   return d;
 
 bad:
   freevm(d);
-80106fc3:	83 ec 0c             	sub    $0xc,%esp
-80106fc6:	ff 75 e0             	pushl  -0x20(%ebp)
-80106fc9:	e8 02 fe ff ff       	call   80106dd0 <freevm>
+80107d26:	83 ec 0c             	sub    $0xc,%esp
+80107d29:	ff 75 e0             	pushl  -0x20(%ebp)
+80107d2c:	e8 ff fd ff ff       	call   80107b30 <freevm>
   return 0;
-80106fce:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
-80106fd5:	83 c4 10             	add    $0x10,%esp
+80107d31:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+80107d38:	83 c4 10             	add    $0x10,%esp
 }
-80106fd8:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106fdb:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106fde:	5b                   	pop    %ebx
-80106fdf:	5e                   	pop    %esi
-80106fe0:	5f                   	pop    %edi
-80106fe1:	5d                   	pop    %ebp
-80106fe2:	c3                   	ret    
-80106fe3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106fe7:	90                   	nop
+80107d3b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80107d3e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107d41:	5b                   	pop    %ebx
+80107d42:	5e                   	pop    %esi
+80107d43:	5f                   	pop    %edi
+80107d44:	5d                   	pop    %ebp
+80107d45:	c3                   	ret    
+80107d46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107d4d:	8d 76 00             	lea    0x0(%esi),%esi
       kfree(mem);
-80106fe8:	83 ec 0c             	sub    $0xc,%esp
-80106feb:	53                   	push   %ebx
-80106fec:	e8 7f b4 ff ff       	call   80102470 <kfree>
+80107d50:	83 ec 0c             	sub    $0xc,%esp
+80107d53:	57                   	push   %edi
+80107d54:	e8 17 a7 ff ff       	call   80102470 <kfree>
       goto bad;
-80106ff1:	83 c4 10             	add    $0x10,%esp
-80106ff4:	eb cd                	jmp    80106fc3 <copyuvm+0xa3>
+80107d59:	83 c4 10             	add    $0x10,%esp
+80107d5c:	eb c8                	jmp    80107d26 <copyuvm+0xa6>
       panic("copyuvm: page not present");
-80106ff6:	83 ec 0c             	sub    $0xc,%esp
-80106ff9:	68 6e 7a 10 80       	push   $0x80107a6e
-80106ffe:	e8 8d 93 ff ff       	call   80100390 <panic>
+80107d5e:	83 ec 0c             	sub    $0xc,%esp
+80107d61:	68 1e 89 10 80       	push   $0x8010891e
+80107d66:	e8 25 86 ff ff       	call   80100390 <panic>
       panic("copyuvm: pte should exist");
-80107003:	83 ec 0c             	sub    $0xc,%esp
-80107006:	68 54 7a 10 80       	push   $0x80107a54
-8010700b:	e8 80 93 ff ff       	call   80100390 <panic>
+80107d6b:	83 ec 0c             	sub    $0xc,%esp
+80107d6e:	68 04 89 10 80       	push   $0x80108904
+80107d73:	e8 18 86 ff ff       	call   80100390 <panic>
+80107d78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107d7f:	90                   	nop
 
-80107010 <uva2ka>:
+80107d80 <uva2ka>:
 
 //PAGEBREAK!
 // Map user virtual address to kernel address.
 char*
 uva2ka(pde_t *pgdir, char *uva)
 {
-80107010:	f3 0f 1e fb          	endbr32 
-80107014:	55                   	push   %ebp
+80107d80:	f3 0f 1e fb          	endbr32 
+80107d84:	55                   	push   %ebp
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
-80107015:	31 c9                	xor    %ecx,%ecx
+80107d85:	31 c9                	xor    %ecx,%ecx
 {
-80107017:	89 e5                	mov    %esp,%ebp
-80107019:	83 ec 08             	sub    $0x8,%esp
+80107d87:	89 e5                	mov    %esp,%ebp
+80107d89:	83 ec 08             	sub    $0x8,%esp
   pte = walkpgdir(pgdir, uva, 0);
-8010701c:	8b 55 0c             	mov    0xc(%ebp),%edx
-8010701f:	8b 45 08             	mov    0x8(%ebp),%eax
-80107022:	e8 79 f7 ff ff       	call   801067a0 <walkpgdir>
+80107d8c:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107d8f:	8b 45 08             	mov    0x8(%ebp),%eax
+80107d92:	e8 f9 f6 ff ff       	call   80107490 <walkpgdir>
   if((*pte & PTE_P) == 0)
-80107027:	8b 00                	mov    (%eax),%eax
+80107d97:	8b 00                	mov    (%eax),%eax
     return 0;
   if((*pte & PTE_U) == 0)
     return 0;
   return (char*)P2V(PTE_ADDR(*pte));
 }
-80107029:	c9                   	leave  
+80107d99:	c9                   	leave  
   if((*pte & PTE_U) == 0)
-8010702a:	89 c2                	mov    %eax,%edx
+80107d9a:	89 c2                	mov    %eax,%edx
   return (char*)P2V(PTE_ADDR(*pte));
-8010702c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80107d9c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   if((*pte & PTE_U) == 0)
-80107031:	83 e2 05             	and    $0x5,%edx
+80107da1:	83 e2 05             	and    $0x5,%edx
   return (char*)P2V(PTE_ADDR(*pte));
-80107034:	05 00 00 00 80       	add    $0x80000000,%eax
-80107039:	83 fa 05             	cmp    $0x5,%edx
-8010703c:	ba 00 00 00 00       	mov    $0x0,%edx
-80107041:	0f 45 c2             	cmovne %edx,%eax
-}
-80107044:	c3                   	ret    
-80107045:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010704c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107da4:	05 00 00 00 80       	add    $0x80000000,%eax
+80107da9:	83 fa 05             	cmp    $0x5,%edx
+80107dac:	ba 00 00 00 00       	mov    $0x0,%edx
+80107db1:	0f 45 c2             	cmovne %edx,%eax
+}
+80107db4:	c3                   	ret    
+80107db5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107dbc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80107050 <copyout>:
+80107dc0 <copyout>:
 // Copy len bytes from p to user address va in page table pgdir.
 // Most useful when pgdir is not the current page table.
 // uva2ka ensures this only works for PTE_U pages.
 int
 copyout(pde_t *pgdir, uint va, void *p, uint len)
 {
-80107050:	f3 0f 1e fb          	endbr32 
-80107054:	55                   	push   %ebp
-80107055:	89 e5                	mov    %esp,%ebp
-80107057:	57                   	push   %edi
-80107058:	56                   	push   %esi
-80107059:	53                   	push   %ebx
-8010705a:	83 ec 0c             	sub    $0xc,%esp
-8010705d:	8b 75 14             	mov    0x14(%ebp),%esi
-80107060:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107dc0:	f3 0f 1e fb          	endbr32 
+80107dc4:	55                   	push   %ebp
+80107dc5:	89 e5                	mov    %esp,%ebp
+80107dc7:	57                   	push   %edi
+80107dc8:	56                   	push   %esi
+80107dc9:	53                   	push   %ebx
+80107dca:	83 ec 0c             	sub    $0xc,%esp
+80107dcd:	8b 75 14             	mov    0x14(%ebp),%esi
+80107dd0:	8b 55 0c             	mov    0xc(%ebp),%edx
   char *buf, *pa0;
   uint n, va0;
 
   buf = (char*)p;
   while(len > 0){
-80107063:	85 f6                	test   %esi,%esi
-80107065:	75 3c                	jne    801070a3 <copyout+0x53>
-80107067:	eb 67                	jmp    801070d0 <copyout+0x80>
-80107069:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107dd3:	85 f6                	test   %esi,%esi
+80107dd5:	75 3c                	jne    80107e13 <copyout+0x53>
+80107dd7:	eb 67                	jmp    80107e40 <copyout+0x80>
+80107dd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     va0 = (uint)PGROUNDDOWN(va);
     pa0 = uva2ka(pgdir, (char*)va0);
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (va - va0);
-80107070:	8b 55 0c             	mov    0xc(%ebp),%edx
-80107073:	89 fb                	mov    %edi,%ebx
-80107075:	29 d3                	sub    %edx,%ebx
-80107077:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80107de0:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107de3:	89 fb                	mov    %edi,%ebx
+80107de5:	29 d3                	sub    %edx,%ebx
+80107de7:	81 c3 00 10 00 00    	add    $0x1000,%ebx
     if(n > len)
-8010707d:	39 f3                	cmp    %esi,%ebx
-8010707f:	0f 47 de             	cmova  %esi,%ebx
+80107ded:	39 f3                	cmp    %esi,%ebx
+80107def:	0f 47 de             	cmova  %esi,%ebx
       n = len;
     memmove(pa0 + (va - va0), buf, n);
-80107082:	29 fa                	sub    %edi,%edx
-80107084:	83 ec 04             	sub    $0x4,%esp
-80107087:	01 c2                	add    %eax,%edx
-80107089:	53                   	push   %ebx
-8010708a:	ff 75 10             	pushl  0x10(%ebp)
-8010708d:	52                   	push   %edx
-8010708e:	e8 7d d6 ff ff       	call   80104710 <memmove>
+80107df2:	29 fa                	sub    %edi,%edx
+80107df4:	83 ec 04             	sub    $0x4,%esp
+80107df7:	01 c2                	add    %eax,%edx
+80107df9:	53                   	push   %ebx
+80107dfa:	ff 75 10             	pushl  0x10(%ebp)
+80107dfd:	52                   	push   %edx
+80107dfe:	e8 5d d5 ff ff       	call   80105360 <memmove>
     len -= n;
     buf += n;
-80107093:	01 5d 10             	add    %ebx,0x10(%ebp)
+80107e03:	01 5d 10             	add    %ebx,0x10(%ebp)
     va = va0 + PGSIZE;
-80107096:	8d 97 00 10 00 00    	lea    0x1000(%edi),%edx
+80107e06:	8d 97 00 10 00 00    	lea    0x1000(%edi),%edx
   while(len > 0){
-8010709c:	83 c4 10             	add    $0x10,%esp
-8010709f:	29 de                	sub    %ebx,%esi
-801070a1:	74 2d                	je     801070d0 <copyout+0x80>
+80107e0c:	83 c4 10             	add    $0x10,%esp
+80107e0f:	29 de                	sub    %ebx,%esi
+80107e11:	74 2d                	je     80107e40 <copyout+0x80>
     va0 = (uint)PGROUNDDOWN(va);
-801070a3:	89 d7                	mov    %edx,%edi
+80107e13:	89 d7                	mov    %edx,%edi
     pa0 = uva2ka(pgdir, (char*)va0);
-801070a5:	83 ec 08             	sub    $0x8,%esp
+80107e15:	83 ec 08             	sub    $0x8,%esp
     va0 = (uint)PGROUNDDOWN(va);
-801070a8:	89 55 0c             	mov    %edx,0xc(%ebp)
-801070ab:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+80107e18:	89 55 0c             	mov    %edx,0xc(%ebp)
+80107e1b:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
     pa0 = uva2ka(pgdir, (char*)va0);
-801070b1:	57                   	push   %edi
-801070b2:	ff 75 08             	pushl  0x8(%ebp)
-801070b5:	e8 56 ff ff ff       	call   80107010 <uva2ka>
+80107e21:	57                   	push   %edi
+80107e22:	ff 75 08             	pushl  0x8(%ebp)
+80107e25:	e8 56 ff ff ff       	call   80107d80 <uva2ka>
     if(pa0 == 0)
-801070ba:	83 c4 10             	add    $0x10,%esp
-801070bd:	85 c0                	test   %eax,%eax
-801070bf:	75 af                	jne    80107070 <copyout+0x20>
+80107e2a:	83 c4 10             	add    $0x10,%esp
+80107e2d:	85 c0                	test   %eax,%eax
+80107e2f:	75 af                	jne    80107de0 <copyout+0x20>
   }
   return 0;
 }
-801070c1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107e31:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-801070c4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80107e34:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801070c9:	5b                   	pop    %ebx
-801070ca:	5e                   	pop    %esi
-801070cb:	5f                   	pop    %edi
-801070cc:	5d                   	pop    %ebp
-801070cd:	c3                   	ret    
-801070ce:	66 90                	xchg   %ax,%ax
-801070d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107e39:	5b                   	pop    %ebx
+80107e3a:	5e                   	pop    %esi
+80107e3b:	5f                   	pop    %edi
+80107e3c:	5d                   	pop    %ebp
+80107e3d:	c3                   	ret    
+80107e3e:	66 90                	xchg   %ax,%ax
+80107e40:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-801070d3:	31 c0                	xor    %eax,%eax
+80107e43:	31 c0                	xor    %eax,%eax
 }
-801070d5:	5b                   	pop    %ebx
-801070d6:	5e                   	pop    %esi
-801070d7:	5f                   	pop    %edi
-801070d8:	5d                   	pop    %ebp
-801070d9:	c3                   	ret    
+80107e45:	5b                   	pop    %ebx
+80107e46:	5e                   	pop    %esi
+80107e47:	5f                   	pop    %edi
+80107e48:	5d                   	pop    %ebp
+80107e49:	c3                   	ret    
diff -ruN xv6-public/kernel.sym xv6-public-partb/kernel.sym
--- xv6-public/kernel.sym	2022-08-13 16:28:45.571026000 +0530
+++ xv6-public-partb/kernel.sym	2022-10-31 11:09:07.601095183 +0530
@@ -1,7 +1,7 @@
 80100000 .text
-801070e0 .rodata
-80108000 .data
-8010a520 .bss
+80107e60 .rodata
+80109000 .data
+8010b520 .bss
 00000000 .debug_line
 00000000 .debug_info
 00000000 .debug_abbrev
@@ -12,11 +12,11 @@
 00000000 .comment
 00000000 bio.c
 00000000 console.c
-8010a520 cons
-8010a558 panicked
+8010b520 cons
+8010b558 panicked
 80100410 consputc.part.0
 801005a0 printint
-80107150 digits.1577
+80107ed0 digits.1598
 00000000 exec.c
 00000000 file.c
 00000000 fs.c
@@ -27,490 +27,512 @@
 80101d70 namex
 00000000 ide.c
 80102070 idestart
-8010a580 idelock
-8010a560 havedisk1
-8010a564 idequeue
+8010b580 idelock
+8010b560 havedisk1
+8010b564 idequeue
 00000000 ioapic.c
 00000000 kalloc.c
 00000000 kbd.c
-8010a5b4 shift.1418
-80107480 shiftcode
-80107380 togglecode
-80107360 charcode.1419
-80108200 normalmap
-80108100 shiftmap
-80108000 ctlmap
+8010b5b4 shift.1438
+80108200 shiftcode
+80108100 togglecode
+801080e0 charcode.1439
+80109200 normalmap
+80109100 shiftmap
+80109000 ctlmap
 00000000 lapic.c
 00000000 log.c
-80102b90 install_trans
-80102c30 write_head
+80102c00 install_trans
+80102ca0 write_head
 00000000 main.c
-80102fe0 mpmain
-80103020 mpenter
+80103050 mpmain
+80103090 mpenter
 00000000 mp.c
-80103170 mpsearch1
+801031e0 mpsearch1
 00000000 picirq.c
 00000000 pipe.c
 00000000 proc.c
-80103790 allocproc
-8010a000 first.1619
-8010a5b8 initproc
-8010772c states.1645
+80103800 allocproc
+8010b000 first.1829
+80103920 int_to_string.part.0
+8010b5c0 initproc
+801085c0 states.1855
 00000000 sleeplock.c
 00000000 spinlock.c
 00000000 string.c
 00000000 syscall.c
-801077a0 syscalls
+80108640 syscalls
 00000000 sysfile.c
-80104ab0 create
-80104c50 argfd.constprop.0
+80105700 create
+801058a0 argfd.constprop.0
 00000000 sysproc.c
 00000000 trap.c
 00000000 uart.c
-80105ba0 uartgetc
-8010a5bc uart
-80105bd0 uartputc.part.0
+80106890 uartgetc
+8010b5c4 uart
+801068c0 uartputc.part.0
 00000000 vm.c
-801067a0 walkpgdir
-80106820 mappages
-801068b0 deallocuvm.part.0
-8010a420 kmap
+80107490 walkpgdir
+80107510 deallocuvm.part.0
+8010b420 kmap
+80107650 mappages
 80100290 consoleread
-801066f3 vector242
-8010614a vector119
+801073e3 vector242
+80106e3a vector119
 8010000c entry
-8010602a vector87
-80106021 vector86
-80104830 safestrcpy
-80104df0 sys_close
-8010675f vector251
-8010604e vector91
-80105e44 vector33
-80106333 vector162
-80103ed0 yield
-80112680 log
-80112640 kmem
-80106597 vector213
-801060e7 vector108
-80105c20 uartinit
-80105e9e vector43
-801028c0 lapiceoi
-80106357 vector165
-80106447 vector185
+80106d1a vector87
+80106d11 vector86
+80105480 safestrcpy
+80105a40 sys_close
+8010744f vector251
+80106d3e vector91
+80106b34 vector33
+80107023 vector162
+80104940 yield
+801136a0 log
+80113660 kmem
+80107287 vector213
+80106dd7 vector108
+80106910 uartinit
+80106b8e vector43
+80102930 lapiceoi
+80107047 vector165
+80107137 vector185
 80102380 ioapicinit
-80106126 vector115
+80106e16 vector115
 80100ff0 fileread
-80106165 vector122
-80105740 sys_sbrk
-80112760 ioapicid
-801062eb vector156
-80106717 vector245
-80112634 ioapic
-80106477 vector189
-80105d68 vector7
-80105f40 vector61
-80105df3 vector24
-80106102 vector111
-801064fb vector200
-80105f76 vector67
-80106213 vector138
-80105fb5 vector74
-80103cd0 sched
-80104710 memmove
-80105f1c vector57
-80104a40 syscall
-801065a3 vector214
-80106096 vector99
-80103940 cpuid
+80106e55 vector122
+80106390 sys_sbrk
+80113780 ioapicid
+80103f80 proc_read
+80106fdb vector156
+80107407 vector245
+80113654 ioapic
+80107167 vector189
+80106a58 vector7
+80106c30 vector61
+80106ae3 vector24
+80106df2 vector111
+801071eb vector200
+80106c66 vector67
+80106f03 vector138
+80106ca5 vector74
+801044e0 sched
+80105360 memmove
+80106c0c vector57
+80105690 syscall
+80107293 vector214
+80106d86 vector99
+80103c90 cpuid
 80101b60 writei
-80106237 vector141
-801056a0 sys_fork
-8010b5c0 bcache
-801063ab vector172
-801066e7 vector241
-80104400 getcallerpcs
-80105300 sys_mkdir
-80106777 vector253
-80105d44 vector3
-80105d3b vector2
+80106f27 vector141
+801062f0 sys_fork
+8010c5e0 bcache
+8010709b vector172
+801073d7 vector241
+80105050 getcallerpcs
+80105f50 sys_mkdir
+80107467 vector253
+80106a34 vector3
+80106a2b vector2
 80101c90 namecmp
-8010663f vector227
-80106573 vector210
-80104a00 argstr
-8010661b vector224
-80105e8c vector41
+8010732f vector227
+80107263 vector210
+80105650 argstr
+8010730b vector224
+80106b7c vector41
 801006b0 cprintf
 80100e70 filedup
 80102030 namei
-80105dd8 vector21
+80106ac8 vector21
 80100040 binit
-801063e7 vector177
-80106141 vector118
-80105f91 vector70
-80105f88 vector69
-801066b7 vector237
-80105f5b vector64
-80105e0e vector27
-801061cb vector132
-80106453 vector186
-80104d10 sys_read
-801065c7 vector217
-801048b0 fetchint
-80106e50 setupkvm
-80104770 memcpy
-80106dd0 freevm
-80105d32 vector1
-801063f3 vector178
-80105e71 vector38
+801070d7 vector177
+80106e31 vector118
+80106c81 vector70
+801163c0 sleeping_channel_lock
+80106c78 vector69
+801073a7 vector237
+80106c4b vector64
+80106afe vector27
+80106ebb vector132
+8010b5c8 sleeping_channel_count
+80107143 vector186
+80105960 sys_read
+801072b7 vector217
+80105500 fetchint
+80107bb0 setupkvm
+801053c0 memcpy
+80107b30 freevm
+80106a22 vector1
+801070e3 vector178
+80106b61 vector38
+8010b5b8 swap_in_process_exists
 80102470 kfree
-801066c3 vector238
-801038d0 mycpu
+801073b3 vector238
+80103c30 mycpu
 80101890 iput
-801061d7 vector133
-80105fac vector73
-8010625b vector144
-80106783 vector254
+80106ec7 vector133
+80106c9c vector73
+80106f4b vector144
+80107473 vector254
 80101500 readsb
-8010a004 nextpid
-801060a8 vector101
-8010657f vector211
-801031f0 mpinit
-801063c3 vector174
-801066ff vector243
+8010b004 nextpid
+80106d98 vector101
+8010726f vector211
+80103260 mpinit
+801070b3 vector174
+801073ef vector243
 80100de0 fileinit
-801043e0 initlock
-8010619b vector128
-80107050 copyout
-80105ff4 vector81
-80103f20 sleep
-801028e0 microdelay
-80105d96 vector13
-80105ee6 vector51
-80105dad vector16
-8010ff20 input
-801066db vector240
-80105f01 vector54
-80105dc6 vector19
-80106057 vector92
-8010670b vector244
+80105030 initlock
+80106e8b vector128
+80107dc0 copyout
+80106ce4 vector81
+80104990 sleep
+80102950 microdelay
+80106a86 vector13
+80106bd6 vector51
+80106a9d vector16
+80110f40 input
+801073cb vector240
+80106bf1 vector54
+80106ab6 vector19
+80115b20 swap_in_lock
+80106d47 vector92
+801073fb vector244
 80101a30 stati
-8010622b vector140
-801056e0 sys_kill
-80105eb0 vector45
-80105fe2 vector79
-80103500 pipeclose
-80106657 vector229
-80106303 vector158
-80104e40 sys_fstat
+80106f1b vector140
+80106330 sys_kill
+80106ba0 vector45
+80106cd2 vector79
+80103ad0 rpop2
+80103570 pipeclose
+80107347 vector229
+80106ff3 vector158
+80105a90 sys_fstat
 80100640 consolewrite
-80105e7a vector39
-8010637b vector168
-80102da0 end_op
-80105e56 vector35
-80106114 vector113
-80102510 freerange
-80106180 vector125
-80106c70 allocuvm
-80105886 trapret
-801065bb vector216
-80105f52 vector63
-80105e05 vector26
-801064a7 vector193
-801027a0 lapicinit
-801064cb vector196
-80106567 vector209
-80105d4d vector4
-80106393 vector170
-8010a5c0 stack
-801061fb vector136
-80105d81 vector10
-80106543 vector206
+80106b6a vector39
+8010706b vector168
+80102e10 end_op
+80106b46 vector35
+80106e04 vector113
+80102580 freerange
+80113860 rqueue
+80103da0 proc_open
+80106e70 vector125
+80107960 allocuvm
+801064d6 trapret
+801045a0 swap_out_process_function
+801072ab vector216
+80106c42 vector63
+80106af5 vector26
+80107197 vector193
+80102810 lapicinit
+801071bb vector196
+80107257 vector209
+80106a3d vector4
+80107083 vector170
+8010b5d0 stack
+80106eeb vector136
+80106a71 vector10
+80107233 vector206
 80101840 iunlock
-80105790 sys_sleep
-8010678f vector255
-80106417 vector181
-80105f2e vector59
-80106018 vector85
-8010600f vector84
-8010642f vector183
-8010630f vector159
-8010658b vector212
-80104e90 sys_link
-80105ec2 vector47
-8010664b vector228
-80105e95 vector42
-8010611d vector114
-80107010 uva2ka
-801063cf vector175
-8010624f vector143
+801063e0 sys_sleep
+8010747f vector255
+80107107 vector181
+80106c1e vector59
+80104bb0 swap_in_process_function
+80106d08 vector85
+80106cff vector84
+8010711f vector183
+80106fff vector159
+8010727b vector212
+80105ae0 sys_link
+80106bb2 vector47
+8010733b vector228
+80106b85 vector42
+80106e0d vector114
+80103cb0 proc_close
+80107d80 uva2ka
+801070bf vector175
+80106f3f vector143
 80100e00 filealloc
-801040e0 wakeup
-801061b3 vector130
-80106723 vector246
-80105d78 vector9
-80106243 vector142
-8010609f vector100
-80106507 vector201
-80106ef0 clearpteu
-80103960 myproc
-801058a0 tvinit
-80105f37 vector60
-80105dea vector23
+80104b50 wakeup
+80106ea3 vector130
+80107413 vector246
+80106a68 vector9
+80106f33 vector142
+80106d8f vector100
+801071f7 vector201
+80107c50 clearpteu
+80103ff0 myproc
+801065a0 tvinit
+80106c27 vector60
+80106ada vector23
 80101730 idup
-801066ab vector236
-80102780 kbdintr
-801051c0 sys_open
-8010666f vector231
-80105f6d vector66
-80105e20 vector29
+8010739b vector236
+801027f0 kbdintr
+80105e10 sys_open
+8010735f vector231
+80106c5d vector66
+80106b10 vector29
 80101a60 readi
-801061ef vector135
+80106edf vector135
 80100860 consoleintr
-80104140 kill
-80105fd0 vector77
+80104d90 kill
+80106cc0 vector77
 801015e0 ialloc
-8010640b vector180
-801154a4 kpgdir
-8010655b vector208
-80102990 cmostime
-80105d10 uartintr
-8010608d vector98
-80106084 vector97
-801063db vector176
-801064b3 vector194
-80105e3b vector32
-801154a8 end
-801064ef vector199
-801061bf vector131
-8010676b vector252
+801070fb vector180
+801163f4 kpgdir
+8010724b vector208
+80102a00 cmostime
+80106a00 uartintr
+80103d30 proc_write
+80106d7d vector98
+80106d74 vector97
+801070cb vector176
+801071a3 vector194
+80106b2b vector32
+801163fc end
+801071df vector199
+80106eaf vector131
+8010745b vector252
 80101090 filewrite
-80105d29 vector0
-80104950 argint
+80106a19 vector0
+801055a0 argint
 80100a80 exec
-80106267 vector145
-80104d80 sys_write
-80104620 release
-801048f0 fetchstr
-801060de vector107
-80105e83 vector40
-80103fe0 wait
-801060b1 vector102
-80109000 entrypgdir
+80106f57 vector145
+801059d0 sys_write
+80105270 release
+80105540 fetchstr
+80106dce vector107
+80106b73 vector40
+80104a50 wait
+80106da1 vector102
+8010a000 entrypgdir
 0010000c _start
-80105f13 vector56
-80105f7f vector68
-80105d5f vector6
-8010a48c _binary_initcode_end
+80106c03 vector56
+80106c6f vector68
+80106a4f vector6
+8010b48c _binary_initcode_end
 80100000 multiboot_header
-801061a7 vector129
-80103c30 scheduler
+80106e97 vector129
+801043a0 scheduler
 80101cb0 dirlookup
-801064d7 vector197
+801071c7 vector197
 80100ec0 fileclose
-80102d30 begin_op
-801062bb vector152
-80106ed0 kvmalloc
-80106663 vector230
-80104780 strncmp
-80105e68 vector37
-80106537 vector205
-80106327 vector161
-80114c60 tickslock
-801035a0 pipewrite
-801047d0 strncpy
-80105f9a vector71
-80106f20 copyuvm
-8010ffc0 ftable
-8010631b vector160
-801049a0 argptr
-801065af vector215
-801062f7 vector157
-80104ca0 sys_dup
-8010610b vector112
+80102da0 begin_op
+80106fab vector152
+80107c30 kvmalloc
+80107353 vector230
+801053d0 strncmp
+80106b58 vector37
+80107227 vector205
+80107017 vector161
+80115b60 tickslock
+80103610 pipewrite
+80105420 strncpy
+80106c8a vector71
+80107c80 copyuvm
+80110fe0 ftable
+8010700b vector160
+801055f0 argptr
+8010729f vector215
+80106fe7 vector157
+801058f0 sys_dup
+80106dfb vector112
 80100390 panic
-80103860 forkret
-80106423 vector182
-80105d8f vector12
-801046c0 memcmp
-801026a0 kbdgetc
-801060f0 vector109
-80105dcf vector20
-80103b10 fork
-80105ef8 vector53
-80105dbd vector18
+801038d0 forkret
+80107113 vector182
+80106a7f vector12
+80105310 memcmp
+80102710 kbdgetc
+80106de0 vector109
+80106abf vector20
+80104280 fork
+80106be8 vector53
+80106aad vector18
 0000008a _binary_entryother_size
-80112780 cpus
-80104340 releasesleep
-80106072 vector95
-80104510 holding
-801109c0 sb
-80104560 acquire
-80106633 vector226
+801137a0 cpus
+80104f90 releasesleep
+80106d62 vector95
+80105160 holding
+801119e0 sb
+801051b0 acquire
+80107323 vector226
 80102050 nameiparent
-80105ed4 vector49
-80105ea7 vector44
-8011267c lapic
-80105fd9 vector78
-8010586e alltraps
-801063b7 vector173
-80106138 vector117
-80105ffd vector82
-80106603 vector222
-80105d71 vector8
-80106297 vector149
+80106bc4 vector49
+80106b97 vector44
+8011369c lapic
+80106cc9 vector78
+801064be alltraps
+801070a7 vector173
+80106e28 vector117
+80106ced vector82
+801072f3 vector222
+80103b50 rpush2
+80106a61 vector8
+80106f87 vector149
 801016a0 iupdate
-80108000 data
-80104670 memset
-8010667b vector232
-80103040 main
-801069f0 switchkvm
-801060d5 vector106
-801065eb vector220
-80106045 vector90
-8010633f vector163
-80106693 vector234
-80102f10 log_write
-801042e0 acquiresleep
-80104fe0 sys_unlink
-80105f49 vector62
-80105dfc vector25
-801064e3 vector198
-80106153 vector120
-8010a48c _binary_entryother_start
-80102560 kinit1
-80105edd vector50
-80105da4 vector15
-801062af vector151
-80106006 vector83
-8010603c vector89
-80106033 vector88
-80105950 trap
-80105840 sys_uptime
-801063ff vector179
-80105e4d vector34
-80105eb9 vector46
-801061e3 vector134
-8010660f vector223
-80114ca0 idt
-801065d3 vector218
-801038b0 pinit
-80106da0 deallocuvm
-80106627 vector225
-801028a0 lapicid
-8010645f vector187
-80103a90 growproc
-80104380 holdingsleep
-80112d00 ncpu
-80105e29 vector30
-80103990 userinit
+80109000 data
+801052c0 memset
+8010736b vector232
+801030b0 main
+801076e0 switchkvm
+801139a0 rqueue2
+80106dc5 vector106
+801064f0 handlePageFault
+801072db vector220
+80106d35 vector90
+8010702f vector163
+80107383 vector234
+80102f80 log_write
+80104f30 acquiresleep
+80105c30 sys_unlink
+80106c39 vector62
+80106aec vector25
+801071d3 vector198
+80106e43 vector120
+8010b48c _binary_entryother_start
+80104020 create_kernel_process
+801025d0 kinit1
+80106bcd vector50
+80106a94 vector15
+80106f9f vector151
+80106cf6 vector83
+80106d2c vector89
+80106d23 vector88
+80103a50 rpush
+80106650 trap
+80106490 sys_uptime
+801070ef vector179
+80106b3d vector34
+80106ba9 vector46
+80106ed3 vector134
+801072ff vector223
+80115ba0 idt
+801072c3 vector218
+80103bd0 pinit
+80107b00 deallocuvm
+80107317 vector225
+80102910 lapicid
+8010714f vector187
+80104200 growproc
+80104fd0 holdingsleep
+80113850 ncpu
+80106b19 vector30
+801040b0 userinit
 801000d0 bread
-80106192 vector127
-801036a0 piperead
-801154a0 ticks
-8010649b vector192
-80106363 vector166
+80106e82 vector127
+80103710 piperead
+801163a0 ticks
+8010718b vector192
+80107053 vector166
 80100a30 consoleinit
-80105fc7 vector76
-80105fbe vector75
+80106cb7 vector76
+80106cae vector75
 801021e0 ideintr
-801064bf vector195
-801062a3 vector150
-80105f25 vector58
-8010673b vector248
-8010616e vector123
-8010607b vector96
-80105e32 vector31
-8010651f vector203
-8010621f vector139
-801062c7 vector153
-8010634b vector164
-801041d0 procdump
-8010615c vector121
-80105ce0 uartputc
-80105d56 vector5
-8010636f vector167
-801062df vector155
-80106747 vector249
+801071af vector195
+80106f93 vector150
+80106c15 vector58
+8010742b vector248
+80106e5e vector123
+80106d6b vector96
+80106b22 vector31
+8010720f vector203
+80106f0f vector139
+80106fb7 vector153
+8010703b vector164
+80104e20 procdump
+80106e4c vector121
+801069d0 uartputc
+80106a46 vector5
+8010705f vector167
+80106fcf vector155
+80107437 vector249
 801001f0 brelse
-80106753 vector250
-80106177 vector124
-801060f9 vector110
-8010652b vector204
+801039a0 int_to_string
+80107443 vector250
+80106e67 vector124
+80106de9 vector110
+8010721b vector204
 80101760 ilock
-801054c0 sys_exec
-80106207 vector137
-8010a460 _binary_initcode_start
-80104893 swtch
-8010672f vector247
-80105de1 vector22
-80106513 vector202
-80106960 seginit
+80106110 sys_exec
+80106ef7 vector137
+8010b460 _binary_initcode_start
+801054e3 swtch
+8010741f vector247
+80106ad1 vector22
+80107203 vector202
+801075c0 seginit
 80101a00 iunlockput
-80105fa3 vector72
-80105f0a vector55
-80106189 vector126
-80105f64 vector65
-80105e17 vector28
-8010a516 _binary_entryother_end
-80106387 vector169
+80106c93 vector72
+80106bfa vector55
+80106e79 vector126
+80106c54 vector65
+80106b07 vector28
+8010b516 _binary_entryother_end
+80107077 vector169
 801001b0 bwrite
-80106687 vector233
-80105920 idtinit
-80103d90 exit
-801056d0 sys_wait
-801056b0 sys_exit
+80107377 vector233
+80106620 idtinit
+80104800 exit
+80106320 sys_wait
+80106300 sys_exit
 80101f70 dirlink
 0000002c _binary_initcode_size
-8010627f vector147
-801042a0 initsleeplock
+80106f6f vector147
+80104ef0 initsleeplock
 80102150 ideinit
-80106ba0 loaduvm
-801060c3 vector104
-8010612f vector116
-80112d20 ptable
+801163f8 sleeping_channel
+80107890 loaduvm
+80106db3 vector104
+80106e1f vector116
+80113ae0 ptable
 80102430 ioapicenable
-801044b0 popcli
-8010a008 vectors
-80105eef vector52
-80105db6 vector17
-8010643b vector184
-80104870 strlen
-801055c0 sys_pipe
+80105100 popcli
+8010b008 vectors
+80106bdf vector52
+80106aa6 vector17
+8010712b vector184
+801054c0 strlen
+80106210 sys_pipe
 80101540 iinit
-801033d0 picinit
-8010654f vector207
-80106b20 inituvm
-80106483 vector190
-801066cf vector239
-80106069 vector94
-80106060 vector93
-80102c90 initlog
-8010646b vector188
-80105ecb vector48
+80103440 picinit
+8010723f vector207
+80107810 inituvm
+80107173 vector190
+801073bf vector239
+80106d59 vector94
+80106d50 vector93
+80102d00 initlog
+8010715b vector188
+80106bbb vector48
 80102280 iderw
-801065df vector219
-8010628b vector148
-801065f7 vector221
-80102630 kalloc
-80110960 devsw
-80105720 sys_getpid
-80105feb vector80
-8010639f vector171
-801062d3 vector154
-80105e5f vector36
-801033f0 pipealloc
-8010669f vector235
-801060cc vector105
-80105410 sys_chdir
-801109e0 icache
-80106273 vector146
-8010648f vector191
-801060ba vector103
-80105370 sys_mknod
-801028f0 lapicstartap
-80106a10 switchuvm
-80104460 pushcli
-801025d0 kinit2
-80105d88 vector11
-80105d9d vector14
+801072cf vector219
+80106f7b vector148
+801072e7 vector221
+801026a0 kalloc
+80111980 devsw
+80106370 sys_getpid
+801039d0 rpop
+80106cdb vector80
+8010708f vector171
+80106fc3 vector154
+80106b4f vector36
+80103460 pipealloc
+8010738f vector235
+80106dbc vector105
+80106060 sys_chdir
+80111a00 icache
+80106f63 vector146
+8010717f vector191
+80106daa vector103
+8010b5bc swap_out_process_exists
+80105fc0 sys_mknod
+80102960 lapicstartap
+80107700 switchuvm
+801050b0 pushcli
+80102640 kinit2
+80106a78 vector11
+80106a8d vector14
 80100fa0 filestat
Binary files xv6-public/_kill and xv6-public-partb/_kill differ
diff -ruN xv6-public/kill.asm xv6-public-partb/kill.asm
--- xv6-public/kill.asm	2022-08-13 16:28:54.340333000 +0530
+++ xv6-public-partb/kill.asm	2022-10-31 11:08:58.488541181 +0530
@@ -52,7 +52,7 @@
     printf(2, "usage: kill pid...\n");
   51:	50                   	push   %eax
   52:	50                   	push   %eax
-  53:	68 98 07 00 00       	push   $0x798
+  53:	68 d0 09 00 00       	push   $0x9d0
   58:	6a 02                	push   $0x2
   5a:	e8 d1 03 00 00       	call   430 <printf>
     exit();
@@ -202,6 +202,7 @@
  141:	89 d7                	mov    %edx,%edi
  143:	fc                   	cld    
  144:	f3 aa                	rep stos %al,%es:(%edi)
+
   stosb(dst, c, n);
   return dst;
 }
@@ -453,7 +454,6 @@
  2c1:	39 f8                	cmp    %edi,%eax
  2c3:	75 fb                	jne    2c0 <memmove+0x20>
   return vdst;
-}
  2c5:	5e                   	pop    %esi
  2c6:	89 d0                	mov    %edx,%eax
  2c8:	5f                   	pop    %edi
@@ -461,132 +461,106 @@
  2ca:	c3                   	ret    
 
 000002cb <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  2cb:	b8 01 00 00 00       	mov    $0x1,%eax
  2d0:	cd 40                	int    $0x40
  2d2:	c3                   	ret    
 
 000002d3 <exit>:
-SYSCALL(exit)
  2d3:	b8 02 00 00 00       	mov    $0x2,%eax
  2d8:	cd 40                	int    $0x40
  2da:	c3                   	ret    
 
 000002db <wait>:
-SYSCALL(wait)
  2db:	b8 03 00 00 00       	mov    $0x3,%eax
  2e0:	cd 40                	int    $0x40
  2e2:	c3                   	ret    
 
 000002e3 <pipe>:
-SYSCALL(pipe)
  2e3:	b8 04 00 00 00       	mov    $0x4,%eax
  2e8:	cd 40                	int    $0x40
  2ea:	c3                   	ret    
 
 000002eb <read>:
-SYSCALL(read)
  2eb:	b8 05 00 00 00       	mov    $0x5,%eax
  2f0:	cd 40                	int    $0x40
  2f2:	c3                   	ret    
 
 000002f3 <write>:
-SYSCALL(write)
  2f3:	b8 10 00 00 00       	mov    $0x10,%eax
  2f8:	cd 40                	int    $0x40
  2fa:	c3                   	ret    
 
 000002fb <close>:
-SYSCALL(close)
  2fb:	b8 15 00 00 00       	mov    $0x15,%eax
  300:	cd 40                	int    $0x40
  302:	c3                   	ret    
 
 00000303 <kill>:
-SYSCALL(kill)
  303:	b8 06 00 00 00       	mov    $0x6,%eax
  308:	cd 40                	int    $0x40
  30a:	c3                   	ret    
 
 0000030b <exec>:
-SYSCALL(exec)
  30b:	b8 07 00 00 00       	mov    $0x7,%eax
  310:	cd 40                	int    $0x40
  312:	c3                   	ret    
 
 00000313 <open>:
-SYSCALL(open)
  313:	b8 0f 00 00 00       	mov    $0xf,%eax
  318:	cd 40                	int    $0x40
  31a:	c3                   	ret    
 
 0000031b <mknod>:
-SYSCALL(mknod)
  31b:	b8 11 00 00 00       	mov    $0x11,%eax
  320:	cd 40                	int    $0x40
  322:	c3                   	ret    
 
 00000323 <unlink>:
-SYSCALL(unlink)
  323:	b8 12 00 00 00       	mov    $0x12,%eax
  328:	cd 40                	int    $0x40
  32a:	c3                   	ret    
 
 0000032b <fstat>:
-SYSCALL(fstat)
  32b:	b8 08 00 00 00       	mov    $0x8,%eax
  330:	cd 40                	int    $0x40
  332:	c3                   	ret    
 
 00000333 <link>:
-SYSCALL(link)
  333:	b8 13 00 00 00       	mov    $0x13,%eax
  338:	cd 40                	int    $0x40
  33a:	c3                   	ret    
 
 0000033b <mkdir>:
-SYSCALL(mkdir)
  33b:	b8 14 00 00 00       	mov    $0x14,%eax
  340:	cd 40                	int    $0x40
  342:	c3                   	ret    
 
 00000343 <chdir>:
-SYSCALL(chdir)
  343:	b8 09 00 00 00       	mov    $0x9,%eax
  348:	cd 40                	int    $0x40
  34a:	c3                   	ret    
 
 0000034b <dup>:
-SYSCALL(dup)
  34b:	b8 0a 00 00 00       	mov    $0xa,%eax
  350:	cd 40                	int    $0x40
  352:	c3                   	ret    
 
 00000353 <getpid>:
-SYSCALL(getpid)
  353:	b8 0b 00 00 00       	mov    $0xb,%eax
  358:	cd 40                	int    $0x40
  35a:	c3                   	ret    
 
 0000035b <sbrk>:
-SYSCALL(sbrk)
  35b:	b8 0c 00 00 00       	mov    $0xc,%eax
  360:	cd 40                	int    $0x40
  362:	c3                   	ret    
 
 00000363 <sleep>:
-SYSCALL(sleep)
  363:	b8 0d 00 00 00       	mov    $0xd,%eax
  368:	cd 40                	int    $0x40
  36a:	c3                   	ret    
 
 0000036b <uptime>:
-SYSCALL(uptime)
  36b:	b8 0e 00 00 00       	mov    $0xe,%eax
  370:	cd 40                	int    $0x40
  372:	c3                   	ret    
@@ -644,7 +618,7 @@
  3b2:	31 d2                	xor    %edx,%edx
  3b4:	89 cf                	mov    %ecx,%edi
  3b6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3b9:	0f b6 92 b4 07 00 00 	movzbl 0x7b4(%edx),%edx
+ 3b9:	0f b6 92 ec 09 00 00 	movzbl 0x9ec(%edx),%edx
  3c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
  3c3:	89 d8                	mov    %ebx,%eax
  3c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
@@ -915,7 +889,7 @@
  5b1:	8b 5d 08             	mov    0x8(%ebp),%ebx
  5b4:	eb 1a                	jmp    5d0 <printf+0x1a0>
           s = "(null)";
- 5b6:	bb ac 07 00 00       	mov    $0x7ac,%ebx
+ 5b6:	bb e4 09 00 00       	mov    $0x9e4,%ebx
         while(*s != 0){
  5bb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  5be:	b8 28 00 00 00       	mov    $0x28,%eax
@@ -961,7 +935,7 @@
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 605:	a1 64 0a 00 00       	mov    0xa64,%eax
+ 605:	a1 40 0d 00 00       	mov    0xd40,%eax
 {
  60a:	89 e5                	mov    %esp,%ebp
  60c:	57                   	push   %edi
@@ -1017,7 +991,7 @@
 }
  651:	5b                   	pop    %ebx
   freep = p;
- 652:	a3 64 0a 00 00       	mov    %eax,0xa64
+ 652:	a3 40 0d 00 00       	mov    %eax,0xd40
 }
  657:	5e                   	pop    %esi
  658:	5f                   	pop    %edi
@@ -1040,7 +1014,7 @@
     p->s.size += bp->s.size;
  677:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 67a:	a3 64 0a 00 00       	mov    %eax,0xa64
+ 67a:	a3 40 0d 00 00       	mov    %eax,0xd40
     p->s.size += bp->s.size;
  67f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
@@ -1074,7 +1048,7 @@
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  69d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 6a0:	8b 3d 64 0a 00 00    	mov    0xa64,%edi
+ 6a0:	8b 3d 40 0d 00 00    	mov    0xd40,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  6a6:	8d 70 07             	lea    0x7(%eax),%esi
  6a9:	c1 ee 03             	shr    $0x3,%esi
@@ -1105,7 +1079,7 @@
  6e2:	8b 4a 04             	mov    0x4(%edx),%ecx
  6e5:	39 f1                	cmp    %esi,%ecx
  6e7:	73 4f                	jae    738 <malloc+0xa8>
- 6e9:	8b 3d 64 0a 00 00    	mov    0xa64,%edi
+ 6e9:	8b 3d 40 0d 00 00    	mov    0xd40,%edi
  6ef:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
@@ -1131,7 +1105,7 @@
  711:	50                   	push   %eax
  712:	e8 e9 fe ff ff       	call   600 <free>
   return freep;
- 717:	a1 64 0a 00 00       	mov    0xa64,%eax
+ 717:	a1 40 0d 00 00       	mov    0xd40,%eax
       if((p = morecore(nunits)) == 0)
  71c:	83 c4 10             	add    $0x10,%esp
  71f:	85 c0                	test   %eax,%eax
@@ -1163,7 +1137,7 @@
         p->s.size = nunits;
  744:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 747:	a3 64 0a 00 00       	mov    %eax,0xa64
+ 747:	a3 40 0d 00 00       	mov    %eax,0xd40
 }
  74c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
@@ -1177,17 +1151,17 @@
  757:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  75e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 760:	c7 05 64 0a 00 00 68 	movl   $0xa68,0xa64
- 767:	0a 00 00 
+ 760:	c7 05 40 0d 00 00 44 	movl   $0xd44,0xd40
+ 767:	0d 00 00 
     base.s.size = 0;
- 76a:	bf 68 0a 00 00       	mov    $0xa68,%edi
+ 76a:	bf 44 0d 00 00       	mov    $0xd44,%edi
     base.s.ptr = freep = prevp = &base;
- 76f:	c7 05 68 0a 00 00 68 	movl   $0xa68,0xa68
- 776:	0a 00 00 
+ 76f:	c7 05 44 0d 00 00 44 	movl   $0xd44,0xd44
+ 776:	0d 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
  779:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 77b:	c7 05 6c 0a 00 00 00 	movl   $0x0,0xa6c
+ 77b:	c7 05 48 0d 00 00 00 	movl   $0x0,0xd48
  782:	00 00 00 
     if(p->s.size >= nunits){
  785:	e9 36 ff ff ff       	jmp    6c0 <malloc+0x30>
@@ -1196,3 +1170,279 @@
  790:	8b 0a                	mov    (%edx),%ecx
  792:	89 08                	mov    %ecx,(%eax)
  794:	eb b1                	jmp    747 <malloc+0xb7>
+ 796:	66 90                	xchg   %ax,%ax
+ 798:	66 90                	xchg   %ax,%ax
+ 79a:	66 90                	xchg   %ax,%ax
+ 79c:	66 90                	xchg   %ax,%ax
+ 79e:	66 90                	xchg   %ax,%ax
+
+000007a0 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 7a0:	f3 0f 1e fb          	endbr32 
+ 7a4:	55                   	push   %ebp
+ 7a5:	b8 64 0d 00 00       	mov    $0xd64,%eax
+ 7aa:	89 e5                	mov    %esp,%ebp
+ 7ac:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 7af:	89 15 60 0d 00 00    	mov    %edx,0xd60
+    for (mti=1; mti<N; mti++)
+ 7b5:	eb 0c                	jmp    7c3 <sgenrand+0x23>
+ 7b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7be:	66 90                	xchg   %ax,%ax
+ 7c0:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 7c3:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 7c9:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 7cb:	3d 1c 17 00 00       	cmp    $0x171c,%eax
+ 7d0:	75 ee                	jne    7c0 <sgenrand+0x20>
+ 7d2:	c7 05 2c 0d 00 00 70 	movl   $0x270,0xd2c
+ 7d9:	02 00 00 
+}
+ 7dc:	5d                   	pop    %ebp
+ 7dd:	c3                   	ret    
+ 7de:	66 90                	xchg   %ax,%ax
+
+000007e0 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 7e0:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 7e4:	a1 2c 0d 00 00       	mov    0xd2c,%eax
+ 7e9:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 7ee:	7f 3c                	jg     82c <genrand+0x4c>
+ 7f0:	8d 50 01             	lea    0x1(%eax),%edx
+ 7f3:	8b 04 85 60 0d 00 00 	mov    0xd60(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 7fa:	89 15 2c 0d 00 00    	mov    %edx,0xd2c
+    y ^= TEMPERING_SHIFT_U(y);
+ 800:	89 c2                	mov    %eax,%edx
+ 802:	c1 ea 0b             	shr    $0xb,%edx
+ 805:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 807:	89 d0                	mov    %edx,%eax
+ 809:	c1 e0 07             	shl    $0x7,%eax
+ 80c:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 811:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 813:	89 d0                	mov    %edx,%eax
+ 815:	c1 e0 0f             	shl    $0xf,%eax
+ 818:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 81d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 81f:	89 c2                	mov    %eax,%edx
+ 821:	c1 ea 12             	shr    $0x12,%edx
+ 824:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 826:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 82b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 82c:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 831:	0f 84 d2 00 00 00    	je     909 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 837:	31 c0                	xor    %eax,%eax
+ 839:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 840:	8b 0c 85 60 0d 00 00 	mov    0xd60(,%eax,4),%ecx
+ 847:	83 c0 01             	add    $0x1,%eax
+ 84a:	8b 14 85 60 0d 00 00 	mov    0xd60(,%eax,4),%edx
+ 851:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 857:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 85d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 85f:	89 d1                	mov    %edx,%ecx
+ 861:	83 e2 01             	and    $0x1,%edx
+ 864:	d1 e9                	shr    %ecx
+ 866:	33 0c 85 90 13 00 00 	xor    0x1390(,%eax,4),%ecx
+ 86d:	33 0c 95 00 0a 00 00 	xor    0xa00(,%edx,4),%ecx
+ 874:	89 0c 85 5c 0d 00 00 	mov    %ecx,0xd5c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 87b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 880:	75 be                	jne    840 <genrand+0x60>
+ 882:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 888:	8b 0c 85 60 0d 00 00 	mov    0xd60(,%eax,4),%ecx
+ 88f:	83 c0 01             	add    $0x1,%eax
+ 892:	8b 14 85 60 0d 00 00 	mov    0xd60(,%eax,4),%edx
+ 899:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 89f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8a5:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8a7:	89 d1                	mov    %edx,%ecx
+ 8a9:	83 e2 01             	and    $0x1,%edx
+ 8ac:	d1 e9                	shr    %ecx
+ 8ae:	33 0c 85 d0 09 00 00 	xor    0x9d0(,%eax,4),%ecx
+ 8b5:	33 0c 95 00 0a 00 00 	xor    0xa00(,%edx,4),%ecx
+ 8bc:	89 0c 85 5c 0d 00 00 	mov    %ecx,0xd5c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 8c3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8c8:	75 be                	jne    888 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 8ca:	a1 60 0d 00 00       	mov    0xd60,%eax
+ 8cf:	8b 0d 1c 17 00 00    	mov    0x171c,%ecx
+ 8d5:	89 c2                	mov    %eax,%edx
+ 8d7:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8dd:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8e3:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8e5:	89 ca                	mov    %ecx,%edx
+ 8e7:	83 e1 01             	and    $0x1,%ecx
+ 8ea:	d1 ea                	shr    %edx
+ 8ec:	33 15 90 13 00 00    	xor    0x1390,%edx
+ 8f2:	33 14 8d 00 0a 00 00 	xor    0xa00(,%ecx,4),%edx
+ 8f9:	89 15 1c 17 00 00    	mov    %edx,0x171c
+ 8ff:	ba 01 00 00 00       	mov    $0x1,%edx
+ 904:	e9 f1 fe ff ff       	jmp    7fa <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ 909:	b8 64 0d 00 00       	mov    $0xd64,%eax
+ 90e:	b9 1c 17 00 00       	mov    $0x171c,%ecx
+ 913:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 918:	c7 05 60 0d 00 00 05 	movl   $0x1105,0xd60
+ 91f:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 922:	eb 07                	jmp    92b <genrand+0x14b>
+ 924:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 928:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 92b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 931:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 933:	39 c1                	cmp    %eax,%ecx
+ 935:	75 f1                	jne    928 <genrand+0x148>
+ 937:	e9 fb fe ff ff       	jmp    837 <genrand+0x57>
+ 93c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000940 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 940:	f3 0f 1e fb          	endbr32 
+ 944:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 945:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 947:	89 e5                	mov    %esp,%ebp
+ 949:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 94a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 94d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 94e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 953:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 956:	89 d8                	mov    %ebx,%eax
+ 958:	f7 f1                	div    %ecx
+ 95a:	89 c6                	mov    %eax,%esi
+ 95c:	29 d3                	sub    %edx,%ebx
+ 95e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ 960:	e8 7b fe ff ff       	call   7e0 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 965:	39 d8                	cmp    %ebx,%eax
+ 967:	73 f7                	jae    960 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 969:	31 d2                	xor    %edx,%edx
+}
+ 96b:	5b                   	pop    %ebx
+  return x/bin_size;
+ 96c:	f7 f6                	div    %esi
+}
+ 96e:	5e                   	pop    %esi
+ 96f:	5d                   	pop    %ebp
+ 970:	c3                   	ret    
+ 971:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 978:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 97f:	90                   	nop
+
+00000980 <randomrange>:
+
+int randomrange(int low, int high){
+ 980:	f3 0f 1e fb          	endbr32 
+ 984:	55                   	push   %ebp
+ 985:	89 e5                	mov    %esp,%ebp
+ 987:	57                   	push   %edi
+ 988:	56                   	push   %esi
+ 989:	53                   	push   %ebx
+ 98a:	83 ec 0c             	sub    $0xc,%esp
+ 98d:	8b 75 08             	mov    0x8(%ebp),%esi
+ 990:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 993:	39 f0                	cmp    %esi,%eax
+ 995:	7d 06                	jge    99d <randomrange+0x1d>
+ 997:	89 f2                	mov    %esi,%edx
+ 999:	89 c6                	mov    %eax,%esi
+ 99b:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 99d:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 99f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 9a4:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 9a6:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 9a9:	89 d8                	mov    %ebx,%eax
+ 9ab:	f7 f1                	div    %ecx
+ 9ad:	89 c7                	mov    %eax,%edi
+ 9af:	29 d3                	sub    %edx,%ebx
+ 9b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ 9b8:	e8 23 fe ff ff       	call   7e0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 9bd:	39 d8                	cmp    %ebx,%eax
+ 9bf:	73 f7                	jae    9b8 <randomrange+0x38>
+  return x/bin_size;
+ 9c1:	31 d2                	xor    %edx,%edx
+  return val;
+ 9c3:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ 9c6:	f7 f7                	div    %edi
+ 9c8:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ 9c9:	01 f0                	add    %esi,%eax
+ 9cb:	5e                   	pop    %esi
+ 9cc:	5f                   	pop    %edi
+ 9cd:	5d                   	pop    %ebp
+ 9ce:	c3                   	ret    
Binary files xv6-public/kill.o and xv6-public-partb/kill.o differ
diff -ruN xv6-public/kill.sym xv6-public-partb/kill.sym
--- xv6-public/kill.sym	2022-08-13 16:28:54.344332000 +0530
+++ xv6-public-partb/kill.sym	2022-10-31 11:08:58.512553180 +0530
@@ -1,7 +1,8 @@
 00000000 .text
-00000798 .rodata
-000007c8 .eh_frame
-00000a64 .bss
+000009d0 .rodata
+00000a08 .eh_frame
+00000d2c .data
+00000d40 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -14,11 +15,16 @@
 00000000 ulib.c
 00000000 printf.c
 00000380 printint
-000007b4 digits.1085
+000009ec digits.1088
 00000000 umalloc.c
-00000a64 freep
-00000a68 base
+00000d40 freep
+00000d44 base
+00000000 random.c
+00000d60 mt
+00000d2c mti
+00000a00 mag01.989
 00000070 strcpy
+000007a0 sgenrand
 00000430 printf
 000002a0 memmove
 0000031b mknod
@@ -26,6 +32,7 @@
 00000353 getpid
 00000690 malloc
 00000363 sleep
+00000940 random_at_most
 000002e3 pipe
 000002f3 write
 0000032b fstat
@@ -38,20 +45,22 @@
 000002cb fork
 0000035b sbrk
 0000036b uptime
-00000a64 __bss_start
+00000d30 __bss_start
 00000130 memset
 00000000 main
 000000a0 strcmp
 0000034b dup
+000007e0 genrand
 00000210 stat
-00000a64 _edata
-00000a70 _end
+00000d30 _edata
+00001720 _end
 00000333 link
 000002d3 exit
 00000260 atoi
 000000f0 strlen
 00000313 open
 00000150 strchr
+00000980 randomrange
 0000033b mkdir
 000002fb close
 00000600 free
Binary files xv6-public/lapic.o and xv6-public-partb/lapic.o differ
Binary files xv6-public/_ln and xv6-public-partb/_ln differ
diff -ruN xv6-public/ln.asm xv6-public-partb/ln.asm
--- xv6-public/ln.asm	2022-08-13 16:28:54.404313000 +0530
+++ xv6-public-partb/ln.asm	2022-10-31 11:08:58.832713182 +0530
@@ -28,7 +28,7 @@
     printf(2, "Usage: ln old new\n");
   1b:	52                   	push   %edx
   1c:	52                   	push   %edx
-  1d:	68 88 07 00 00       	push   $0x788
+  1d:	68 c0 09 00 00       	push   $0x9c0
   22:	6a 02                	push   $0x2
   24:	e8 f7 03 00 00       	call   420 <printf>
     exit();
@@ -49,7 +49,7 @@
     printf(2, "link %s %s: failed\n", argv[1], argv[2]);
   47:	ff 73 08             	pushl  0x8(%ebx)
   4a:	ff 73 04             	pushl  0x4(%ebx)
-  4d:	68 9b 07 00 00       	push   $0x79b
+  4d:	68 d3 09 00 00       	push   $0x9d3
   52:	6a 02                	push   $0x2
   54:	e8 c7 03 00 00       	call   420 <printf>
   59:	83 c4 10             	add    $0x10,%esp
@@ -194,6 +194,7 @@
  131:	89 d7                	mov    %edx,%edi
  133:	fc                   	cld    
  134:	f3 aa                	rep stos %al,%es:(%edi)
+
   stosb(dst, c, n);
   return dst;
 }
@@ -445,7 +446,6 @@
  2b1:	39 f8                	cmp    %edi,%eax
  2b3:	75 fb                	jne    2b0 <memmove+0x20>
   return vdst;
-}
  2b5:	5e                   	pop    %esi
  2b6:	89 d0                	mov    %edx,%eax
  2b8:	5f                   	pop    %edi
@@ -453,132 +453,106 @@
  2ba:	c3                   	ret    
 
 000002bb <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  2bb:	b8 01 00 00 00       	mov    $0x1,%eax
  2c0:	cd 40                	int    $0x40
  2c2:	c3                   	ret    
 
 000002c3 <exit>:
-SYSCALL(exit)
  2c3:	b8 02 00 00 00       	mov    $0x2,%eax
  2c8:	cd 40                	int    $0x40
  2ca:	c3                   	ret    
 
 000002cb <wait>:
-SYSCALL(wait)
  2cb:	b8 03 00 00 00       	mov    $0x3,%eax
  2d0:	cd 40                	int    $0x40
  2d2:	c3                   	ret    
 
 000002d3 <pipe>:
-SYSCALL(pipe)
  2d3:	b8 04 00 00 00       	mov    $0x4,%eax
  2d8:	cd 40                	int    $0x40
  2da:	c3                   	ret    
 
 000002db <read>:
-SYSCALL(read)
  2db:	b8 05 00 00 00       	mov    $0x5,%eax
  2e0:	cd 40                	int    $0x40
  2e2:	c3                   	ret    
 
 000002e3 <write>:
-SYSCALL(write)
  2e3:	b8 10 00 00 00       	mov    $0x10,%eax
  2e8:	cd 40                	int    $0x40
  2ea:	c3                   	ret    
 
 000002eb <close>:
-SYSCALL(close)
  2eb:	b8 15 00 00 00       	mov    $0x15,%eax
  2f0:	cd 40                	int    $0x40
  2f2:	c3                   	ret    
 
 000002f3 <kill>:
-SYSCALL(kill)
  2f3:	b8 06 00 00 00       	mov    $0x6,%eax
  2f8:	cd 40                	int    $0x40
  2fa:	c3                   	ret    
 
 000002fb <exec>:
-SYSCALL(exec)
  2fb:	b8 07 00 00 00       	mov    $0x7,%eax
  300:	cd 40                	int    $0x40
  302:	c3                   	ret    
 
 00000303 <open>:
-SYSCALL(open)
  303:	b8 0f 00 00 00       	mov    $0xf,%eax
  308:	cd 40                	int    $0x40
  30a:	c3                   	ret    
 
 0000030b <mknod>:
-SYSCALL(mknod)
  30b:	b8 11 00 00 00       	mov    $0x11,%eax
  310:	cd 40                	int    $0x40
  312:	c3                   	ret    
 
 00000313 <unlink>:
-SYSCALL(unlink)
  313:	b8 12 00 00 00       	mov    $0x12,%eax
  318:	cd 40                	int    $0x40
  31a:	c3                   	ret    
 
 0000031b <fstat>:
-SYSCALL(fstat)
  31b:	b8 08 00 00 00       	mov    $0x8,%eax
  320:	cd 40                	int    $0x40
  322:	c3                   	ret    
 
 00000323 <link>:
-SYSCALL(link)
  323:	b8 13 00 00 00       	mov    $0x13,%eax
  328:	cd 40                	int    $0x40
  32a:	c3                   	ret    
 
 0000032b <mkdir>:
-SYSCALL(mkdir)
  32b:	b8 14 00 00 00       	mov    $0x14,%eax
  330:	cd 40                	int    $0x40
  332:	c3                   	ret    
 
 00000333 <chdir>:
-SYSCALL(chdir)
  333:	b8 09 00 00 00       	mov    $0x9,%eax
  338:	cd 40                	int    $0x40
  33a:	c3                   	ret    
 
 0000033b <dup>:
-SYSCALL(dup)
  33b:	b8 0a 00 00 00       	mov    $0xa,%eax
  340:	cd 40                	int    $0x40
  342:	c3                   	ret    
 
 00000343 <getpid>:
-SYSCALL(getpid)
  343:	b8 0b 00 00 00       	mov    $0xb,%eax
  348:	cd 40                	int    $0x40
  34a:	c3                   	ret    
 
 0000034b <sbrk>:
-SYSCALL(sbrk)
  34b:	b8 0c 00 00 00       	mov    $0xc,%eax
  350:	cd 40                	int    $0x40
  352:	c3                   	ret    
 
 00000353 <sleep>:
-SYSCALL(sleep)
  353:	b8 0d 00 00 00       	mov    $0xd,%eax
  358:	cd 40                	int    $0x40
  35a:	c3                   	ret    
 
 0000035b <uptime>:
-SYSCALL(uptime)
  35b:	b8 0e 00 00 00       	mov    $0xe,%eax
  360:	cd 40                	int    $0x40
  362:	c3                   	ret    
@@ -636,7 +610,7 @@
  3a2:	31 d2                	xor    %edx,%edx
  3a4:	89 cf                	mov    %ecx,%edi
  3a6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3a9:	0f b6 92 b8 07 00 00 	movzbl 0x7b8(%edx),%edx
+ 3a9:	0f b6 92 f0 09 00 00 	movzbl 0x9f0(%edx),%edx
  3b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
  3b3:	89 d8                	mov    %ebx,%eax
  3b5:	8d 5b 01             	lea    0x1(%ebx),%ebx
@@ -907,7 +881,7 @@
  5a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
  5a4:	eb 1a                	jmp    5c0 <printf+0x1a0>
           s = "(null)";
- 5a6:	bb af 07 00 00       	mov    $0x7af,%ebx
+ 5a6:	bb e7 09 00 00       	mov    $0x9e7,%ebx
         while(*s != 0){
  5ab:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  5ae:	b8 28 00 00 00       	mov    $0x28,%eax
@@ -953,7 +927,7 @@
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5f5:	a1 64 0a 00 00       	mov    0xa64,%eax
+ 5f5:	a1 40 0d 00 00       	mov    0xd40,%eax
 {
  5fa:	89 e5                	mov    %esp,%ebp
  5fc:	57                   	push   %edi
@@ -1009,7 +983,7 @@
 }
  641:	5b                   	pop    %ebx
   freep = p;
- 642:	a3 64 0a 00 00       	mov    %eax,0xa64
+ 642:	a3 40 0d 00 00       	mov    %eax,0xd40
 }
  647:	5e                   	pop    %esi
  648:	5f                   	pop    %edi
@@ -1032,7 +1006,7 @@
     p->s.size += bp->s.size;
  667:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 66a:	a3 64 0a 00 00       	mov    %eax,0xa64
+ 66a:	a3 40 0d 00 00       	mov    %eax,0xd40
     p->s.size += bp->s.size;
  66f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
@@ -1066,7 +1040,7 @@
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  68d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 690:	8b 3d 64 0a 00 00    	mov    0xa64,%edi
+ 690:	8b 3d 40 0d 00 00    	mov    0xd40,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  696:	8d 70 07             	lea    0x7(%eax),%esi
  699:	c1 ee 03             	shr    $0x3,%esi
@@ -1097,7 +1071,7 @@
  6d2:	8b 4a 04             	mov    0x4(%edx),%ecx
  6d5:	39 f1                	cmp    %esi,%ecx
  6d7:	73 4f                	jae    728 <malloc+0xa8>
- 6d9:	8b 3d 64 0a 00 00    	mov    0xa64,%edi
+ 6d9:	8b 3d 40 0d 00 00    	mov    0xd40,%edi
  6df:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
@@ -1123,7 +1097,7 @@
  701:	50                   	push   %eax
  702:	e8 e9 fe ff ff       	call   5f0 <free>
   return freep;
- 707:	a1 64 0a 00 00       	mov    0xa64,%eax
+ 707:	a1 40 0d 00 00       	mov    0xd40,%eax
       if((p = morecore(nunits)) == 0)
  70c:	83 c4 10             	add    $0x10,%esp
  70f:	85 c0                	test   %eax,%eax
@@ -1155,7 +1129,7 @@
         p->s.size = nunits;
  734:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 737:	a3 64 0a 00 00       	mov    %eax,0xa64
+ 737:	a3 40 0d 00 00       	mov    %eax,0xd40
 }
  73c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
@@ -1169,17 +1143,17 @@
  747:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  74e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 750:	c7 05 64 0a 00 00 68 	movl   $0xa68,0xa64
- 757:	0a 00 00 
+ 750:	c7 05 40 0d 00 00 44 	movl   $0xd44,0xd40
+ 757:	0d 00 00 
     base.s.size = 0;
- 75a:	bf 68 0a 00 00       	mov    $0xa68,%edi
+ 75a:	bf 44 0d 00 00       	mov    $0xd44,%edi
     base.s.ptr = freep = prevp = &base;
- 75f:	c7 05 68 0a 00 00 68 	movl   $0xa68,0xa68
- 766:	0a 00 00 
+ 75f:	c7 05 44 0d 00 00 44 	movl   $0xd44,0xd44
+ 766:	0d 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
  769:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 76b:	c7 05 6c 0a 00 00 00 	movl   $0x0,0xa6c
+ 76b:	c7 05 48 0d 00 00 00 	movl   $0x0,0xd48
  772:	00 00 00 
     if(p->s.size >= nunits){
  775:	e9 36 ff ff ff       	jmp    6b0 <malloc+0x30>
@@ -1188,3 +1162,279 @@
  780:	8b 0a                	mov    (%edx),%ecx
  782:	89 08                	mov    %ecx,(%eax)
  784:	eb b1                	jmp    737 <malloc+0xb7>
+ 786:	66 90                	xchg   %ax,%ax
+ 788:	66 90                	xchg   %ax,%ax
+ 78a:	66 90                	xchg   %ax,%ax
+ 78c:	66 90                	xchg   %ax,%ax
+ 78e:	66 90                	xchg   %ax,%ax
+
+00000790 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 790:	f3 0f 1e fb          	endbr32 
+ 794:	55                   	push   %ebp
+ 795:	b8 64 0d 00 00       	mov    $0xd64,%eax
+ 79a:	89 e5                	mov    %esp,%ebp
+ 79c:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 79f:	89 15 60 0d 00 00    	mov    %edx,0xd60
+    for (mti=1; mti<N; mti++)
+ 7a5:	eb 0c                	jmp    7b3 <sgenrand+0x23>
+ 7a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7ae:	66 90                	xchg   %ax,%ax
+ 7b0:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 7b3:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 7b9:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 7bb:	3d 1c 17 00 00       	cmp    $0x171c,%eax
+ 7c0:	75 ee                	jne    7b0 <sgenrand+0x20>
+ 7c2:	c7 05 2c 0d 00 00 70 	movl   $0x270,0xd2c
+ 7c9:	02 00 00 
+}
+ 7cc:	5d                   	pop    %ebp
+ 7cd:	c3                   	ret    
+ 7ce:	66 90                	xchg   %ax,%ax
+
+000007d0 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 7d0:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 7d4:	a1 2c 0d 00 00       	mov    0xd2c,%eax
+ 7d9:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 7de:	7f 3c                	jg     81c <genrand+0x4c>
+ 7e0:	8d 50 01             	lea    0x1(%eax),%edx
+ 7e3:	8b 04 85 60 0d 00 00 	mov    0xd60(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 7ea:	89 15 2c 0d 00 00    	mov    %edx,0xd2c
+    y ^= TEMPERING_SHIFT_U(y);
+ 7f0:	89 c2                	mov    %eax,%edx
+ 7f2:	c1 ea 0b             	shr    $0xb,%edx
+ 7f5:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 7f7:	89 d0                	mov    %edx,%eax
+ 7f9:	c1 e0 07             	shl    $0x7,%eax
+ 7fc:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 801:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 803:	89 d0                	mov    %edx,%eax
+ 805:	c1 e0 0f             	shl    $0xf,%eax
+ 808:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 80d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 80f:	89 c2                	mov    %eax,%edx
+ 811:	c1 ea 12             	shr    $0x12,%edx
+ 814:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 816:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 81b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 81c:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 821:	0f 84 d2 00 00 00    	je     8f9 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 827:	31 c0                	xor    %eax,%eax
+ 829:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 830:	8b 0c 85 60 0d 00 00 	mov    0xd60(,%eax,4),%ecx
+ 837:	83 c0 01             	add    $0x1,%eax
+ 83a:	8b 14 85 60 0d 00 00 	mov    0xd60(,%eax,4),%edx
+ 841:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 847:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 84d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 84f:	89 d1                	mov    %edx,%ecx
+ 851:	83 e2 01             	and    $0x1,%edx
+ 854:	d1 e9                	shr    %ecx
+ 856:	33 0c 85 90 13 00 00 	xor    0x1390(,%eax,4),%ecx
+ 85d:	33 0c 95 04 0a 00 00 	xor    0xa04(,%edx,4),%ecx
+ 864:	89 0c 85 5c 0d 00 00 	mov    %ecx,0xd5c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 86b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 870:	75 be                	jne    830 <genrand+0x60>
+ 872:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 878:	8b 0c 85 60 0d 00 00 	mov    0xd60(,%eax,4),%ecx
+ 87f:	83 c0 01             	add    $0x1,%eax
+ 882:	8b 14 85 60 0d 00 00 	mov    0xd60(,%eax,4),%edx
+ 889:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 88f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 895:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 897:	89 d1                	mov    %edx,%ecx
+ 899:	83 e2 01             	and    $0x1,%edx
+ 89c:	d1 e9                	shr    %ecx
+ 89e:	33 0c 85 d0 09 00 00 	xor    0x9d0(,%eax,4),%ecx
+ 8a5:	33 0c 95 04 0a 00 00 	xor    0xa04(,%edx,4),%ecx
+ 8ac:	89 0c 85 5c 0d 00 00 	mov    %ecx,0xd5c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 8b3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8b8:	75 be                	jne    878 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 8ba:	a1 60 0d 00 00       	mov    0xd60,%eax
+ 8bf:	8b 0d 1c 17 00 00    	mov    0x171c,%ecx
+ 8c5:	89 c2                	mov    %eax,%edx
+ 8c7:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8cd:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8d3:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8d5:	89 ca                	mov    %ecx,%edx
+ 8d7:	83 e1 01             	and    $0x1,%ecx
+ 8da:	d1 ea                	shr    %edx
+ 8dc:	33 15 90 13 00 00    	xor    0x1390,%edx
+ 8e2:	33 14 8d 04 0a 00 00 	xor    0xa04(,%ecx,4),%edx
+ 8e9:	89 15 1c 17 00 00    	mov    %edx,0x171c
+ 8ef:	ba 01 00 00 00       	mov    $0x1,%edx
+ 8f4:	e9 f1 fe ff ff       	jmp    7ea <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ 8f9:	b8 64 0d 00 00       	mov    $0xd64,%eax
+ 8fe:	b9 1c 17 00 00       	mov    $0x171c,%ecx
+ 903:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 908:	c7 05 60 0d 00 00 05 	movl   $0x1105,0xd60
+ 90f:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 912:	eb 07                	jmp    91b <genrand+0x14b>
+ 914:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 918:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 91b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 921:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 923:	39 c1                	cmp    %eax,%ecx
+ 925:	75 f1                	jne    918 <genrand+0x148>
+ 927:	e9 fb fe ff ff       	jmp    827 <genrand+0x57>
+ 92c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000930 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 930:	f3 0f 1e fb          	endbr32 
+ 934:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 935:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 937:	89 e5                	mov    %esp,%ebp
+ 939:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 93a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 93d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 93e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 943:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 946:	89 d8                	mov    %ebx,%eax
+ 948:	f7 f1                	div    %ecx
+ 94a:	89 c6                	mov    %eax,%esi
+ 94c:	29 d3                	sub    %edx,%ebx
+ 94e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ 950:	e8 7b fe ff ff       	call   7d0 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 955:	39 d8                	cmp    %ebx,%eax
+ 957:	73 f7                	jae    950 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 959:	31 d2                	xor    %edx,%edx
+}
+ 95b:	5b                   	pop    %ebx
+  return x/bin_size;
+ 95c:	f7 f6                	div    %esi
+}
+ 95e:	5e                   	pop    %esi
+ 95f:	5d                   	pop    %ebp
+ 960:	c3                   	ret    
+ 961:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 968:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 96f:	90                   	nop
+
+00000970 <randomrange>:
+
+int randomrange(int low, int high){
+ 970:	f3 0f 1e fb          	endbr32 
+ 974:	55                   	push   %ebp
+ 975:	89 e5                	mov    %esp,%ebp
+ 977:	57                   	push   %edi
+ 978:	56                   	push   %esi
+ 979:	53                   	push   %ebx
+ 97a:	83 ec 0c             	sub    $0xc,%esp
+ 97d:	8b 75 08             	mov    0x8(%ebp),%esi
+ 980:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 983:	39 f0                	cmp    %esi,%eax
+ 985:	7d 06                	jge    98d <randomrange+0x1d>
+ 987:	89 f2                	mov    %esi,%edx
+ 989:	89 c6                	mov    %eax,%esi
+ 98b:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 98d:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 98f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 994:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 996:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 999:	89 d8                	mov    %ebx,%eax
+ 99b:	f7 f1                	div    %ecx
+ 99d:	89 c7                	mov    %eax,%edi
+ 99f:	29 d3                	sub    %edx,%ebx
+ 9a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ 9a8:	e8 23 fe ff ff       	call   7d0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 9ad:	39 d8                	cmp    %ebx,%eax
+ 9af:	73 f7                	jae    9a8 <randomrange+0x38>
+  return x/bin_size;
+ 9b1:	31 d2                	xor    %edx,%edx
+  return val;
+ 9b3:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ 9b6:	f7 f7                	div    %edi
+ 9b8:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ 9b9:	01 f0                	add    %esi,%eax
+ 9bb:	5e                   	pop    %esi
+ 9bc:	5f                   	pop    %edi
+ 9bd:	5d                   	pop    %ebp
+ 9be:	c3                   	ret    
Binary files xv6-public/ln.o and xv6-public-partb/ln.o differ
diff -ruN xv6-public/ln.sym xv6-public-partb/ln.sym
--- xv6-public/ln.sym	2022-08-13 16:28:54.420308000 +0530
+++ xv6-public-partb/ln.sym	2022-10-31 11:08:58.868731181 +0530
@@ -1,7 +1,8 @@
 00000000 .text
-00000788 .rodata
-000007cc .eh_frame
-00000a64 .bss
+000009c0 .rodata
+00000a0c .eh_frame
+00000d2c .data
+00000d40 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -14,11 +15,16 @@
 00000000 ulib.c
 00000000 printf.c
 00000370 printint
-000007b8 digits.1085
+000009f0 digits.1088
 00000000 umalloc.c
-00000a64 freep
-00000a68 base
+00000d40 freep
+00000d44 base
+00000000 random.c
+00000d60 mt
+00000d2c mti
+00000a04 mag01.989
 00000060 strcpy
+00000790 sgenrand
 00000420 printf
 00000290 memmove
 0000030b mknod
@@ -26,6 +32,7 @@
 00000343 getpid
 00000680 malloc
 00000353 sleep
+00000930 random_at_most
 000002d3 pipe
 000002e3 write
 0000031b fstat
@@ -38,20 +45,22 @@
 000002bb fork
 0000034b sbrk
 0000035b uptime
-00000a64 __bss_start
+00000d30 __bss_start
 00000120 memset
 00000000 main
 00000090 strcmp
 0000033b dup
+000007d0 genrand
 00000200 stat
-00000a64 _edata
-00000a70 _end
+00000d30 _edata
+00001720 _end
 00000323 link
 000002c3 exit
 00000250 atoi
 000000e0 strlen
 00000303 open
 00000140 strchr
+00000970 randomrange
 0000032b mkdir
 000002eb close
 000005f0 free
Binary files xv6-public/log.o and xv6-public-partb/log.o differ
Binary files xv6-public/_ls and xv6-public-partb/_ls differ
diff -ruN xv6-public/ls.asm xv6-public-partb/ls.asm
--- xv6-public/ls.asm	2022-08-13 16:28:54.508280000 +0530
+++ xv6-public-partb/ls.asm	2022-10-31 11:08:59.172883182 +0530
@@ -49,7 +49,7 @@
   44:	e8 5a 05 00 00       	call   5a3 <exit>
     ls(".");
   49:	83 ec 0c             	sub    $0xc,%esp
-  4c:	68 b0 0a 00 00       	push   $0xab0
+  4c:	68 e8 0c 00 00       	push   $0xce8
   51:	e8 aa 00 00 00       	call   100 <ls>
     exit();
   56:	e8 48 05 00 00       	call   5a3 <exit>
@@ -95,21 +95,21 @@
   ab:	83 c4 0c             	add    $0xc,%esp
   ae:	50                   	push   %eax
   af:	53                   	push   %ebx
-  b0:	68 e4 0d 00 00       	push   $0xde4
+  b0:	68 c0 10 00 00       	push   $0x10c0
   b5:	e8 b6 04 00 00       	call   570 <memmove>
   memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
   ba:	89 1c 24             	mov    %ebx,(%esp)
   bd:	e8 fe 02 00 00       	call   3c0 <strlen>
   c2:	89 1c 24             	mov    %ebx,(%esp)
   return buf;
-  c5:	bb e4 0d 00 00       	mov    $0xde4,%ebx
+  c5:	bb c0 10 00 00       	mov    $0x10c0,%ebx
   memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
   ca:	89 c6                	mov    %eax,%esi
   cc:	e8 ef 02 00 00       	call   3c0 <strlen>
   d1:	ba 0e 00 00 00       	mov    $0xe,%edx
   d6:	83 c4 0c             	add    $0xc,%esp
   d9:	29 f2                	sub    %esi,%edx
-  db:	05 e4 0d 00 00       	add    $0xde4,%eax
+  db:	05 c0 10 00 00       	add    $0x10c0,%eax
   e0:	52                   	push   %edx
   e1:	6a 20                	push   $0x20
   e3:	50                   	push   %eax
@@ -186,7 +186,7 @@
  194:	56                   	push   %esi
  195:	6a 02                	push   $0x2
  197:	50                   	push   %eax
- 198:	68 90 0a 00 00       	push   $0xa90
+ 198:	68 c8 0c 00 00       	push   $0xcc8
  19d:	6a 01                	push   $0x1
  19f:	e8 5c 05 00 00       	call   700 <printf>
     break;
@@ -273,7 +273,7 @@
  29a:	52                   	push   %edx
  29b:	ff b5 b4 fd ff ff    	pushl  -0x24c(%ebp)
  2a1:	50                   	push   %eax
- 2a2:	68 90 0a 00 00       	push   $0xa90
+ 2a2:	68 c8 0c 00 00       	push   $0xcc8
  2a7:	6a 01                	push   $0x1
  2a9:	e8 52 04 00 00       	call   700 <printf>
  2ae:	83 c4 20             	add    $0x20,%esp
@@ -283,7 +283,7 @@
     printf(2, "ls: cannot open %s\n", path);
  2c0:	83 ec 04             	sub    $0x4,%esp
  2c3:	57                   	push   %edi
- 2c4:	68 68 0a 00 00       	push   $0xa68
+ 2c4:	68 a0 0c 00 00       	push   $0xca0
  2c9:	6a 02                	push   $0x2
  2cb:	e8 30 04 00 00       	call   700 <printf>
     return;
@@ -299,7 +299,7 @@
  2df:	90                   	nop
       printf(1, "ls: path too long\n");
  2e0:	83 ec 08             	sub    $0x8,%esp
- 2e3:	68 9d 0a 00 00       	push   $0xa9d
+ 2e3:	68 d5 0c 00 00       	push   $0xcd5
  2e8:	6a 01                	push   $0x1
  2ea:	e8 11 04 00 00       	call   700 <printf>
       break;
@@ -310,7 +310,7 @@
     printf(2, "ls: cannot stat %s\n", path);
  300:	83 ec 04             	sub    $0x4,%esp
  303:	57                   	push   %edi
- 304:	68 7c 0a 00 00       	push   $0xa7c
+ 304:	68 b4 0c 00 00       	push   $0xcb4
  309:	6a 02                	push   $0x2
  30b:	e8 f0 03 00 00       	call   700 <printf>
     close(fd);
@@ -330,7 +330,7 @@
         printf(1, "ls: cannot stat %s\n", buf);
  328:	83 ec 04             	sub    $0x4,%esp
  32b:	57                   	push   %edi
- 32c:	68 7c 0a 00 00       	push   $0xa7c
+ 32c:	68 b4 0c 00 00       	push   $0xcb4
  331:	6a 01                	push   $0x1
  333:	e8 c8 03 00 00       	call   700 <printf>
         continue;
@@ -475,6 +475,7 @@
  411:	89 d7                	mov    %edx,%edi
  413:	fc                   	cld    
  414:	f3 aa                	rep stos %al,%es:(%edi)
+
   stosb(dst, c, n);
   return dst;
 }
@@ -726,7 +727,6 @@
  591:	39 f8                	cmp    %edi,%eax
  593:	75 fb                	jne    590 <memmove+0x20>
   return vdst;
-}
  595:	5e                   	pop    %esi
  596:	89 d0                	mov    %edx,%eax
  598:	5f                   	pop    %edi
@@ -734,132 +734,106 @@
  59a:	c3                   	ret    
 
 0000059b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  59b:	b8 01 00 00 00       	mov    $0x1,%eax
  5a0:	cd 40                	int    $0x40
  5a2:	c3                   	ret    
 
 000005a3 <exit>:
-SYSCALL(exit)
  5a3:	b8 02 00 00 00       	mov    $0x2,%eax
  5a8:	cd 40                	int    $0x40
  5aa:	c3                   	ret    
 
 000005ab <wait>:
-SYSCALL(wait)
  5ab:	b8 03 00 00 00       	mov    $0x3,%eax
  5b0:	cd 40                	int    $0x40
  5b2:	c3                   	ret    
 
 000005b3 <pipe>:
-SYSCALL(pipe)
  5b3:	b8 04 00 00 00       	mov    $0x4,%eax
  5b8:	cd 40                	int    $0x40
  5ba:	c3                   	ret    
 
 000005bb <read>:
-SYSCALL(read)
  5bb:	b8 05 00 00 00       	mov    $0x5,%eax
  5c0:	cd 40                	int    $0x40
  5c2:	c3                   	ret    
 
 000005c3 <write>:
-SYSCALL(write)
  5c3:	b8 10 00 00 00       	mov    $0x10,%eax
  5c8:	cd 40                	int    $0x40
  5ca:	c3                   	ret    
 
 000005cb <close>:
-SYSCALL(close)
  5cb:	b8 15 00 00 00       	mov    $0x15,%eax
  5d0:	cd 40                	int    $0x40
  5d2:	c3                   	ret    
 
 000005d3 <kill>:
-SYSCALL(kill)
  5d3:	b8 06 00 00 00       	mov    $0x6,%eax
  5d8:	cd 40                	int    $0x40
  5da:	c3                   	ret    
 
 000005db <exec>:
-SYSCALL(exec)
  5db:	b8 07 00 00 00       	mov    $0x7,%eax
  5e0:	cd 40                	int    $0x40
  5e2:	c3                   	ret    
 
 000005e3 <open>:
-SYSCALL(open)
  5e3:	b8 0f 00 00 00       	mov    $0xf,%eax
  5e8:	cd 40                	int    $0x40
  5ea:	c3                   	ret    
 
 000005eb <mknod>:
-SYSCALL(mknod)
  5eb:	b8 11 00 00 00       	mov    $0x11,%eax
  5f0:	cd 40                	int    $0x40
  5f2:	c3                   	ret    
 
 000005f3 <unlink>:
-SYSCALL(unlink)
  5f3:	b8 12 00 00 00       	mov    $0x12,%eax
  5f8:	cd 40                	int    $0x40
  5fa:	c3                   	ret    
 
 000005fb <fstat>:
-SYSCALL(fstat)
  5fb:	b8 08 00 00 00       	mov    $0x8,%eax
  600:	cd 40                	int    $0x40
  602:	c3                   	ret    
 
 00000603 <link>:
-SYSCALL(link)
  603:	b8 13 00 00 00       	mov    $0x13,%eax
  608:	cd 40                	int    $0x40
  60a:	c3                   	ret    
 
 0000060b <mkdir>:
-SYSCALL(mkdir)
  60b:	b8 14 00 00 00       	mov    $0x14,%eax
  610:	cd 40                	int    $0x40
  612:	c3                   	ret    
 
 00000613 <chdir>:
-SYSCALL(chdir)
  613:	b8 09 00 00 00       	mov    $0x9,%eax
  618:	cd 40                	int    $0x40
  61a:	c3                   	ret    
 
 0000061b <dup>:
-SYSCALL(dup)
  61b:	b8 0a 00 00 00       	mov    $0xa,%eax
  620:	cd 40                	int    $0x40
  622:	c3                   	ret    
 
 00000623 <getpid>:
-SYSCALL(getpid)
  623:	b8 0b 00 00 00       	mov    $0xb,%eax
  628:	cd 40                	int    $0x40
  62a:	c3                   	ret    
 
 0000062b <sbrk>:
-SYSCALL(sbrk)
  62b:	b8 0c 00 00 00       	mov    $0xc,%eax
  630:	cd 40                	int    $0x40
  632:	c3                   	ret    
 
 00000633 <sleep>:
-SYSCALL(sleep)
  633:	b8 0d 00 00 00       	mov    $0xd,%eax
  638:	cd 40                	int    $0x40
  63a:	c3                   	ret    
 
 0000063b <uptime>:
-SYSCALL(uptime)
  63b:	b8 0e 00 00 00       	mov    $0xe,%eax
  640:	cd 40                	int    $0x40
  642:	c3                   	ret    
@@ -917,7 +891,7 @@
  682:	31 d2                	xor    %edx,%edx
  684:	89 cf                	mov    %ecx,%edi
  686:	f7 75 c4             	divl   -0x3c(%ebp)
- 689:	0f b6 92 bc 0a 00 00 	movzbl 0xabc(%edx),%edx
+ 689:	0f b6 92 f4 0c 00 00 	movzbl 0xcf4(%edx),%edx
  690:	89 45 c0             	mov    %eax,-0x40(%ebp)
  693:	89 d8                	mov    %ebx,%eax
  695:	8d 5b 01             	lea    0x1(%ebx),%ebx
@@ -1188,7 +1162,7 @@
  881:	8b 5d 08             	mov    0x8(%ebp),%ebx
  884:	eb 1a                	jmp    8a0 <printf+0x1a0>
           s = "(null)";
- 886:	bb b2 0a 00 00       	mov    $0xab2,%ebx
+ 886:	bb ea 0c 00 00       	mov    $0xcea,%ebx
         while(*s != 0){
  88b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  88e:	b8 28 00 00 00       	mov    $0x28,%eax
@@ -1234,7 +1208,7 @@
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8d5:	a1 f4 0d 00 00       	mov    0xdf4,%eax
+ 8d5:	a1 d0 10 00 00       	mov    0x10d0,%eax
 {
  8da:	89 e5                	mov    %esp,%ebp
  8dc:	57                   	push   %edi
@@ -1290,7 +1264,7 @@
 }
  921:	5b                   	pop    %ebx
   freep = p;
- 922:	a3 f4 0d 00 00       	mov    %eax,0xdf4
+ 922:	a3 d0 10 00 00       	mov    %eax,0x10d0
 }
  927:	5e                   	pop    %esi
  928:	5f                   	pop    %edi
@@ -1313,7 +1287,7 @@
     p->s.size += bp->s.size;
  947:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 94a:	a3 f4 0d 00 00       	mov    %eax,0xdf4
+ 94a:	a3 d0 10 00 00       	mov    %eax,0x10d0
     p->s.size += bp->s.size;
  94f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
@@ -1347,7 +1321,7 @@
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  96d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 970:	8b 3d f4 0d 00 00    	mov    0xdf4,%edi
+ 970:	8b 3d d0 10 00 00    	mov    0x10d0,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  976:	8d 70 07             	lea    0x7(%eax),%esi
  979:	c1 ee 03             	shr    $0x3,%esi
@@ -1378,7 +1352,7 @@
  9b2:	8b 4a 04             	mov    0x4(%edx),%ecx
  9b5:	39 f1                	cmp    %esi,%ecx
  9b7:	73 4f                	jae    a08 <malloc+0xa8>
- 9b9:	8b 3d f4 0d 00 00    	mov    0xdf4,%edi
+ 9b9:	8b 3d d0 10 00 00    	mov    0x10d0,%edi
  9bf:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
@@ -1404,7 +1378,7 @@
  9e1:	50                   	push   %eax
  9e2:	e8 e9 fe ff ff       	call   8d0 <free>
   return freep;
- 9e7:	a1 f4 0d 00 00       	mov    0xdf4,%eax
+ 9e7:	a1 d0 10 00 00       	mov    0x10d0,%eax
       if((p = morecore(nunits)) == 0)
  9ec:	83 c4 10             	add    $0x10,%esp
  9ef:	85 c0                	test   %eax,%eax
@@ -1436,7 +1410,7 @@
         p->s.size = nunits;
  a14:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- a17:	a3 f4 0d 00 00       	mov    %eax,0xdf4
+ a17:	a3 d0 10 00 00       	mov    %eax,0x10d0
 }
  a1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
@@ -1450,17 +1424,17 @@
  a27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  a2e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- a30:	c7 05 f4 0d 00 00 f8 	movl   $0xdf8,0xdf4
- a37:	0d 00 00 
+ a30:	c7 05 d0 10 00 00 d4 	movl   $0x10d4,0x10d0
+ a37:	10 00 00 
     base.s.size = 0;
- a3a:	bf f8 0d 00 00       	mov    $0xdf8,%edi
+ a3a:	bf d4 10 00 00       	mov    $0x10d4,%edi
     base.s.ptr = freep = prevp = &base;
- a3f:	c7 05 f8 0d 00 00 f8 	movl   $0xdf8,0xdf8
- a46:	0d 00 00 
+ a3f:	c7 05 d4 10 00 00 d4 	movl   $0x10d4,0x10d4
+ a46:	10 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
  a49:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- a4b:	c7 05 fc 0d 00 00 00 	movl   $0x0,0xdfc
+ a4b:	c7 05 d8 10 00 00 00 	movl   $0x0,0x10d8
  a52:	00 00 00 
     if(p->s.size >= nunits){
  a55:	e9 36 ff ff ff       	jmp    990 <malloc+0x30>
@@ -1469,3 +1443,279 @@
  a60:	8b 0a                	mov    (%edx),%ecx
  a62:	89 08                	mov    %ecx,(%eax)
  a64:	eb b1                	jmp    a17 <malloc+0xb7>
+ a66:	66 90                	xchg   %ax,%ax
+ a68:	66 90                	xchg   %ax,%ax
+ a6a:	66 90                	xchg   %ax,%ax
+ a6c:	66 90                	xchg   %ax,%ax
+ a6e:	66 90                	xchg   %ax,%ax
+
+00000a70 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ a70:	f3 0f 1e fb          	endbr32 
+ a74:	55                   	push   %ebp
+ a75:	b8 e4 10 00 00       	mov    $0x10e4,%eax
+ a7a:	89 e5                	mov    %esp,%ebp
+ a7c:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ a7f:	89 15 e0 10 00 00    	mov    %edx,0x10e0
+    for (mti=1; mti<N; mti++)
+ a85:	eb 0c                	jmp    a93 <sgenrand+0x23>
+ a87:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a8e:	66 90                	xchg   %ax,%ax
+ a90:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ a93:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ a99:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ a9b:	3d 9c 1a 00 00       	cmp    $0x1a9c,%eax
+ aa0:	75 ee                	jne    a90 <sgenrand+0x20>
+ aa2:	c7 05 ac 10 00 00 70 	movl   $0x270,0x10ac
+ aa9:	02 00 00 
+}
+ aac:	5d                   	pop    %ebp
+ aad:	c3                   	ret    
+ aae:	66 90                	xchg   %ax,%ax
+
+00000ab0 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ ab0:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ ab4:	a1 ac 10 00 00       	mov    0x10ac,%eax
+ ab9:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ abe:	7f 3c                	jg     afc <genrand+0x4c>
+ ac0:	8d 50 01             	lea    0x1(%eax),%edx
+ ac3:	8b 04 85 e0 10 00 00 	mov    0x10e0(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ aca:	89 15 ac 10 00 00    	mov    %edx,0x10ac
+    y ^= TEMPERING_SHIFT_U(y);
+ ad0:	89 c2                	mov    %eax,%edx
+ ad2:	c1 ea 0b             	shr    $0xb,%edx
+ ad5:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ ad7:	89 d0                	mov    %edx,%eax
+ ad9:	c1 e0 07             	shl    $0x7,%eax
+ adc:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ ae1:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ ae3:	89 d0                	mov    %edx,%eax
+ ae5:	c1 e0 0f             	shl    $0xf,%eax
+ ae8:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ aed:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ aef:	89 c2                	mov    %eax,%edx
+ af1:	c1 ea 12             	shr    $0x12,%edx
+ af4:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ af6:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ afb:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ afc:	3d 71 02 00 00       	cmp    $0x271,%eax
+ b01:	0f 84 d2 00 00 00    	je     bd9 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ b07:	31 c0                	xor    %eax,%eax
+ b09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ b10:	8b 0c 85 e0 10 00 00 	mov    0x10e0(,%eax,4),%ecx
+ b17:	83 c0 01             	add    $0x1,%eax
+ b1a:	8b 14 85 e0 10 00 00 	mov    0x10e0(,%eax,4),%edx
+ b21:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ b27:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ b2d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ b2f:	89 d1                	mov    %edx,%ecx
+ b31:	83 e2 01             	and    $0x1,%edx
+ b34:	d1 e9                	shr    %ecx
+ b36:	33 0c 85 10 17 00 00 	xor    0x1710(,%eax,4),%ecx
+ b3d:	33 0c 95 08 0d 00 00 	xor    0xd08(,%edx,4),%ecx
+ b44:	89 0c 85 dc 10 00 00 	mov    %ecx,0x10dc(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ b4b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ b50:	75 be                	jne    b10 <genrand+0x60>
+ b52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ b58:	8b 0c 85 e0 10 00 00 	mov    0x10e0(,%eax,4),%ecx
+ b5f:	83 c0 01             	add    $0x1,%eax
+ b62:	8b 14 85 e0 10 00 00 	mov    0x10e0(,%eax,4),%edx
+ b69:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ b6f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ b75:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ b77:	89 d1                	mov    %edx,%ecx
+ b79:	83 e2 01             	and    $0x1,%edx
+ b7c:	d1 e9                	shr    %ecx
+ b7e:	33 0c 85 50 0d 00 00 	xor    0xd50(,%eax,4),%ecx
+ b85:	33 0c 95 08 0d 00 00 	xor    0xd08(,%edx,4),%ecx
+ b8c:	89 0c 85 dc 10 00 00 	mov    %ecx,0x10dc(,%eax,4)
+        for (;kk<N-1;kk++) {
+ b93:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ b98:	75 be                	jne    b58 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ b9a:	a1 e0 10 00 00       	mov    0x10e0,%eax
+ b9f:	8b 0d 9c 1a 00 00    	mov    0x1a9c,%ecx
+ ba5:	89 c2                	mov    %eax,%edx
+ ba7:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ bad:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ bb3:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ bb5:	89 ca                	mov    %ecx,%edx
+ bb7:	83 e1 01             	and    $0x1,%ecx
+ bba:	d1 ea                	shr    %edx
+ bbc:	33 15 10 17 00 00    	xor    0x1710,%edx
+ bc2:	33 14 8d 08 0d 00 00 	xor    0xd08(,%ecx,4),%edx
+ bc9:	89 15 9c 1a 00 00    	mov    %edx,0x1a9c
+ bcf:	ba 01 00 00 00       	mov    $0x1,%edx
+ bd4:	e9 f1 fe ff ff       	jmp    aca <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ bd9:	b8 e4 10 00 00       	mov    $0x10e4,%eax
+ bde:	b9 9c 1a 00 00       	mov    $0x1a9c,%ecx
+ be3:	ba 05 11 00 00       	mov    $0x1105,%edx
+ be8:	c7 05 e0 10 00 00 05 	movl   $0x1105,0x10e0
+ bef:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ bf2:	eb 07                	jmp    bfb <genrand+0x14b>
+ bf4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ bf8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ bfb:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ c01:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ c03:	39 c1                	cmp    %eax,%ecx
+ c05:	75 f1                	jne    bf8 <genrand+0x148>
+ c07:	e9 fb fe ff ff       	jmp    b07 <genrand+0x57>
+ c0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000c10 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ c10:	f3 0f 1e fb          	endbr32 
+ c14:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ c15:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ c17:	89 e5                	mov    %esp,%ebp
+ c19:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ c1a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ c1d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ c1e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ c23:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ c26:	89 d8                	mov    %ebx,%eax
+ c28:	f7 f1                	div    %ecx
+ c2a:	89 c6                	mov    %eax,%esi
+ c2c:	29 d3                	sub    %edx,%ebx
+ c2e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ c30:	e8 7b fe ff ff       	call   ab0 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ c35:	39 d8                	cmp    %ebx,%eax
+ c37:	73 f7                	jae    c30 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ c39:	31 d2                	xor    %edx,%edx
+}
+ c3b:	5b                   	pop    %ebx
+  return x/bin_size;
+ c3c:	f7 f6                	div    %esi
+}
+ c3e:	5e                   	pop    %esi
+ c3f:	5d                   	pop    %ebp
+ c40:	c3                   	ret    
+ c41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ c48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ c4f:	90                   	nop
+
+00000c50 <randomrange>:
+
+int randomrange(int low, int high){
+ c50:	f3 0f 1e fb          	endbr32 
+ c54:	55                   	push   %ebp
+ c55:	89 e5                	mov    %esp,%ebp
+ c57:	57                   	push   %edi
+ c58:	56                   	push   %esi
+ c59:	53                   	push   %ebx
+ c5a:	83 ec 0c             	sub    $0xc,%esp
+ c5d:	8b 75 08             	mov    0x8(%ebp),%esi
+ c60:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ c63:	39 f0                	cmp    %esi,%eax
+ c65:	7d 06                	jge    c6d <randomrange+0x1d>
+ c67:	89 f2                	mov    %esi,%edx
+ c69:	89 c6                	mov    %eax,%esi
+ c6b:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ c6d:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ c6f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ c74:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ c76:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ c79:	89 d8                	mov    %ebx,%eax
+ c7b:	f7 f1                	div    %ecx
+ c7d:	89 c7                	mov    %eax,%edi
+ c7f:	29 d3                	sub    %edx,%ebx
+ c81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ c88:	e8 23 fe ff ff       	call   ab0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ c8d:	39 d8                	cmp    %ebx,%eax
+ c8f:	73 f7                	jae    c88 <randomrange+0x38>
+  return x/bin_size;
+ c91:	31 d2                	xor    %edx,%edx
+  return val;
+ c93:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ c96:	f7 f7                	div    %edi
+ c98:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ c99:	01 f0                	add    %esi,%eax
+ c9b:	5e                   	pop    %esi
+ c9c:	5f                   	pop    %edi
+ c9d:	5d                   	pop    %ebp
+ c9e:	c3                   	ret    
Binary files xv6-public/ls.o and xv6-public-partb/ls.o differ
diff -ruN xv6-public/ls.sym xv6-public-partb/ls.sym
--- xv6-public/ls.sym	2022-08-13 16:28:54.516277000 +0530
+++ xv6-public-partb/ls.sym	2022-10-31 11:08:59.232913181 +0530
@@ -1,7 +1,8 @@
 00000000 .text
-00000a68 .rodata
-00000ad0 .eh_frame
-00000de4 .bss
+00000ca0 .rodata
+00000d10 .eh_frame
+000010ac .data
+000010c0 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -11,16 +12,21 @@
 00000000 .debug_loc
 00000000 .debug_ranges
 00000000 ls.c
-00000de4 buf.1096
+000010c0 buf.1099
 00000000 ulib.c
 00000000 printf.c
 00000650 printint
-00000abc digits.1085
+00000cf4 digits.1088
 00000000 umalloc.c
-00000df4 freep
-00000df8 base
+000010d0 freep
+000010d4 base
+00000000 random.c
+000010e0 mt
+000010ac mti
+00000d08 mag01.989
 00000340 strcpy
 00000060 fmtname
+00000a70 sgenrand
 00000700 printf
 00000570 memmove
 000005eb mknod
@@ -28,6 +34,7 @@
 00000623 getpid
 00000960 malloc
 00000633 sleep
+00000c10 random_at_most
 000005b3 pipe
 000005c3 write
 000005fb fstat
@@ -40,14 +47,15 @@
 0000059b fork
 0000062b sbrk
 0000063b uptime
-00000de4 __bss_start
+000010b0 __bss_start
 00000400 memset
 00000000 main
 00000370 strcmp
 0000061b dup
+00000ab0 genrand
 000004e0 stat
-00000de4 _edata
-00000e00 _end
+000010b0 _edata
+00001aa0 _end
 00000603 link
 00000100 ls
 000005a3 exit
@@ -55,6 +63,7 @@
 000003c0 strlen
 000005e3 open
 00000420 strchr
+00000c50 randomrange
 0000060b mkdir
 000005cb close
 000008d0 free
diff -ruN xv6-public/main.c xv6-public-partb/main.c
--- xv6-public/main.c	2022-08-11 13:14:39.068070000 +0530
+++ xv6-public-partb/main.c	2022-10-31 11:05:08.849779052 +0530
@@ -14,6 +14,7 @@
 // Bootstrap processor starts running C code here.
 // Allocate a real stack and switch to it, first
 // doing some setup required for memory allocator to work.
+
 int
 main(void)
 {
@@ -30,11 +31,13 @@
   tvinit();        // trap vectors
   binit();         // buffer cache
   fileinit();      // file table
-  ideinit();       // disk 
+  ideinit();       // disk
   startothers();   // start other processors
   kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
   userinit();      // first user process
+  // create_kernel_process("swap_out_process", &swap_out_process_function);
   mpmain();        // finish this processor's setup
+
 }
 
 // Other CPUs jump here from entryother.S.
@@ -113,4 +116,3 @@
 // Blank page.
 //PAGEBREAK!
 // Blank page.
-
Binary files xv6-public/main.o and xv6-public-partb/main.o differ
diff -ruN xv6-public/Makefile xv6-public-partb/Makefile
--- xv6-public/Makefile	2022-10-07 22:20:46.969138000 +0530
+++ xv6-public-partb/Makefile	2022-10-31 11:03:58.254499038 +0530
@@ -51,7 +51,7 @@
 endif
 
 # If the makefile can't find QEMU, specify its path here
-QEMU = qemu-system-i386
+# QEMU = qemu-system-i386
 
 # Try to infer the correct QEMU
 ifndef QEMU
@@ -103,7 +103,7 @@
 bootblock: bootasm.S bootmain.c
 	$(CC) $(CFLAGS) -fno-pic -O -nostdinc -I. -c bootmain.c
 	$(CC) $(CFLAGS) -fno-pic -nostdinc -I. -c bootasm.S
-	$(LD) $(LDFLAGS) -N -e start -Ttext 0x7c00 -o bootblock.o bootasm.o bootmain.o
+	$(LD) $(LDFLAGS) -N -e start -Ttext 0x7C00 -o bootblock.o bootasm.o bootmain.o
 	$(OBJDUMP) -S bootblock.o > bootblock.asm
 	$(OBJCOPY) -S -O binary -j .text bootblock.o bootblock
 	./sign.pl bootblock
@@ -143,7 +143,7 @@
 vectors.S: vectors.pl
 	./vectors.pl > vectors.S
 
-ULIB = ulib.o usys.o printf.o umalloc.o
+ULIB = ulib.o usys.o printf.o umalloc.o random.o
 
 _%: %.o $(ULIB)
 	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o $@ $^
@@ -181,7 +181,8 @@
 	_usertests\
 	_wc\
 	_zombie\
-	
+	_memtest\
+
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
 
@@ -249,8 +250,8 @@
 
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
-	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
+	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c memtest.c\
+	printf.c umalloc.c random.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
@@ -283,4 +284,4 @@
 	cp dist/* dist/.gdbinit.tmpl /tmp/xv6
 	(cd /tmp; tar cf - xv6) | gzip >xv6-rev10.tar.gz  # the next one will be 10 (9/17)
 
-.PHONY: dist-test dist
+.PHONY: dist-test dist
\ No newline at end of file
Binary files xv6-public/_memtest and xv6-public-partb/_memtest differ
diff -ruN xv6-public/memtest.asm xv6-public-partb/memtest.asm
--- xv6-public/memtest.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partb/memtest.asm	2022-10-31 11:09:01.954273182 +0530
@@ -0,0 +1,1556 @@
+
+_memtest:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+int math_func(int num){
+	return num*num - 4*num + 1;
+}
+
+int
+main(int argc, char* argv[]){
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	53                   	push   %ebx
+
+	for(int i=0;i<20;i++){
+  14:	31 db                	xor    %ebx,%ebx
+main(int argc, char* argv[]){
+  16:	51                   	push   %ecx
+  17:	83 ec 08             	sub    $0x8,%esp
+  1a:	eb 0d                	jmp    29 <main+0x29>
+  1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+	for(int i=0;i<20;i++){
+  20:	83 fb 14             	cmp    $0x14,%ebx
+  23:	0f 84 cc 00 00 00    	je     f5 <main+0xf5>
+		if(!fork()){
+  29:	e8 7d 03 00 00       	call   3ab <fork>
+  2e:	83 c3 01             	add    $0x1,%ebx
+  31:	85 c0                	test   %eax,%eax
+  33:	75 eb                	jne    20 <main+0x20>
+			printf(1, "Child %d\n", i+1);
+  35:	50                   	push   %eax
+  36:	53                   	push   %ebx
+  37:	68 b0 0a 00 00       	push   $0xab0
+  3c:	6a 01                	push   $0x1
+  3e:	e8 cd 04 00 00       	call   510 <printf>
+			printf(1, "Iteration Matched Different\n");
+  43:	5a                   	pop    %edx
+  44:	59                   	pop    %ecx
+  45:	68 ba 0a 00 00       	push   $0xaba
+  4a:	6a 01                	push   $0x1
+  4c:	e8 bf 04 00 00       	call   510 <printf>
+			printf(1, "--------- ------- ---------\n\n");
+  51:	5b                   	pop    %ebx
+  52:	5e                   	pop    %esi
+  53:	68 d7 0a 00 00       	push   $0xad7
+  58:	6a 01                	push   $0x1
+			
+			for(int j=0;j<10;j++){
+  5a:	31 db                	xor    %ebx,%ebx
+			printf(1, "--------- ------- ---------\n\n");
+  5c:	e8 af 04 00 00       	call   510 <printf>
+  61:	83 c4 10             	add    $0x10,%esp
+				int *arr = malloc(4096);
+  64:	83 ec 0c             	sub    $0xc,%esp
+  67:	68 00 10 00 00       	push   $0x1000
+  6c:	e8 ff 06 00 00       	call   770 <malloc>
+  71:	83 c4 10             	add    $0x10,%esp
+				for(int k=0;k<1024;k++){
+  74:	31 d2                	xor    %edx,%edx
+  76:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  7d:	8d 76 00             	lea    0x0(%esi),%esi
+	return num*num - 4*num + 1;
+  80:	89 d1                	mov    %edx,%ecx
+  82:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
+  89:	0f af ca             	imul   %edx,%ecx
+  8c:	29 f1                	sub    %esi,%ecx
+  8e:	83 c1 01             	add    $0x1,%ecx
+  91:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
+				for(int k=0;k<1024;k++){
+  94:	83 c2 01             	add    $0x1,%edx
+  97:	81 fa 00 04 00 00    	cmp    $0x400,%edx
+  9d:	75 e1                	jne    80 <main+0x80>
+					arr[k] = math_func(k);
+				}
+				int matched=0;
+				for(int k=0;k<1024;k++){
+  9f:	31 d2                	xor    %edx,%edx
+				int matched=0;
+  a1:	31 ff                	xor    %edi,%edi
+  a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  a7:	90                   	nop
+	return num*num - 4*num + 1;
+  a8:	89 d1                	mov    %edx,%ecx
+  aa:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
+  b1:	0f af ca             	imul   %edx,%ecx
+  b4:	29 f1                	sub    %esi,%ecx
+  b6:	83 c1 01             	add    $0x1,%ecx
+					if(arr[k] == math_func(k))
+  b9:	39 0c 90             	cmp    %ecx,(%eax,%edx,4)
+  bc:	75 03                	jne    c1 <main+0xc1>
+						matched+=4;
+  be:	83 c7 04             	add    $0x4,%edi
+				for(int k=0;k<1024;k++){
+  c1:	83 c2 01             	add    $0x1,%edx
+  c4:	81 fa 00 04 00 00    	cmp    $0x400,%edx
+  ca:	75 dc                	jne    a8 <main+0xa8>
+				}
+				
+				if(j<9)
+  cc:	b8 00 10 00 00       	mov    $0x1000,%eax
+  d1:	29 f8                	sub    %edi,%eax
+  d3:	83 fb 09             	cmp    $0x9,%ebx
+  d6:	74 2c                	je     104 <main+0x104>
+					printf(1, "    %d      %dB      %dB\n", j+1, matched, 4096-matched);
+  d8:	83 ec 0c             	sub    $0xc,%esp
+  db:	83 c3 01             	add    $0x1,%ebx
+  de:	50                   	push   %eax
+  df:	57                   	push   %edi
+  e0:	53                   	push   %ebx
+  e1:	68 f5 0a 00 00       	push   $0xaf5
+  e6:	6a 01                	push   $0x1
+  e8:	e8 23 04 00 00       	call   510 <printf>
+  ed:	83 c4 20             	add    $0x20,%esp
+  f0:	e9 6f ff ff ff       	jmp    64 <main+0x64>
+			
+			exit();
+		}
+	}
+
+	while(wait()!=-1);
+  f5:	e8 c1 02 00 00       	call   3bb <wait>
+  fa:	83 f8 ff             	cmp    $0xffffffff,%eax
+  fd:	75 f6                	jne    f5 <main+0xf5>
+	exit();
+  ff:	e8 af 02 00 00       	call   3b3 <exit>
+					printf(1, "   %d      %dB      %dB\n", j+1, matched, 4096-matched);
+ 104:	83 ec 0c             	sub    $0xc,%esp
+ 107:	50                   	push   %eax
+ 108:	57                   	push   %edi
+ 109:	6a 0a                	push   $0xa
+ 10b:	68 f6 0a 00 00       	push   $0xaf6
+ 110:	6a 01                	push   $0x1
+ 112:	e8 f9 03 00 00       	call   510 <printf>
+			printf(1, "\n");
+ 117:	83 c4 18             	add    $0x18,%esp
+ 11a:	68 f3 0a 00 00       	push   $0xaf3
+ 11f:	6a 01                	push   $0x1
+ 121:	e8 ea 03 00 00       	call   510 <printf>
+			exit();
+ 126:	e8 88 02 00 00       	call   3b3 <exit>
+ 12b:	66 90                	xchg   %ax,%ax
+ 12d:	66 90                	xchg   %ax,%ax
+ 12f:	90                   	nop
+
+00000130 <math_func>:
+int math_func(int num){
+ 130:	f3 0f 1e fb          	endbr32 
+ 134:	55                   	push   %ebp
+ 135:	89 e5                	mov    %esp,%ebp
+ 137:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+ 13a:	5d                   	pop    %ebp
+	return num*num - 4*num + 1;
+ 13b:	89 d0                	mov    %edx,%eax
+ 13d:	0f af c2             	imul   %edx,%eax
+ 140:	c1 e2 02             	shl    $0x2,%edx
+ 143:	29 d0                	sub    %edx,%eax
+ 145:	83 c0 01             	add    $0x1,%eax
+}
+ 148:	c3                   	ret    
+ 149:	66 90                	xchg   %ax,%ax
+ 14b:	66 90                	xchg   %ax,%ax
+ 14d:	66 90                	xchg   %ax,%ax
+ 14f:	90                   	nop
+
+00000150 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 150:	f3 0f 1e fb          	endbr32 
+ 154:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 155:	31 c0                	xor    %eax,%eax
+{
+ 157:	89 e5                	mov    %esp,%ebp
+ 159:	53                   	push   %ebx
+ 15a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 15d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 160:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 164:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 167:	83 c0 01             	add    $0x1,%eax
+ 16a:	84 d2                	test   %dl,%dl
+ 16c:	75 f2                	jne    160 <strcpy+0x10>
+    ;
+  return os;
+}
+ 16e:	89 c8                	mov    %ecx,%eax
+ 170:	5b                   	pop    %ebx
+ 171:	5d                   	pop    %ebp
+ 172:	c3                   	ret    
+ 173:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000180 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 180:	f3 0f 1e fb          	endbr32 
+ 184:	55                   	push   %ebp
+ 185:	89 e5                	mov    %esp,%ebp
+ 187:	53                   	push   %ebx
+ 188:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 18b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 18e:	0f b6 01             	movzbl (%ecx),%eax
+ 191:	0f b6 1a             	movzbl (%edx),%ebx
+ 194:	84 c0                	test   %al,%al
+ 196:	75 19                	jne    1b1 <strcmp+0x31>
+ 198:	eb 26                	jmp    1c0 <strcmp+0x40>
+ 19a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1a0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 1a4:	83 c1 01             	add    $0x1,%ecx
+ 1a7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 1aa:	0f b6 1a             	movzbl (%edx),%ebx
+ 1ad:	84 c0                	test   %al,%al
+ 1af:	74 0f                	je     1c0 <strcmp+0x40>
+ 1b1:	38 d8                	cmp    %bl,%al
+ 1b3:	74 eb                	je     1a0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 1b5:	29 d8                	sub    %ebx,%eax
+}
+ 1b7:	5b                   	pop    %ebx
+ 1b8:	5d                   	pop    %ebp
+ 1b9:	c3                   	ret    
+ 1ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1c0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 1c2:	29 d8                	sub    %ebx,%eax
+}
+ 1c4:	5b                   	pop    %ebx
+ 1c5:	5d                   	pop    %ebp
+ 1c6:	c3                   	ret    
+ 1c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ce:	66 90                	xchg   %ax,%ax
+
+000001d0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1d0:	f3 0f 1e fb          	endbr32 
+ 1d4:	55                   	push   %ebp
+ 1d5:	89 e5                	mov    %esp,%ebp
+ 1d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1da:	80 3a 00             	cmpb   $0x0,(%edx)
+ 1dd:	74 21                	je     200 <strlen+0x30>
+ 1df:	31 c0                	xor    %eax,%eax
+ 1e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1e8:	83 c0 01             	add    $0x1,%eax
+ 1eb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 1ef:	89 c1                	mov    %eax,%ecx
+ 1f1:	75 f5                	jne    1e8 <strlen+0x18>
+    ;
+  return n;
+}
+ 1f3:	89 c8                	mov    %ecx,%eax
+ 1f5:	5d                   	pop    %ebp
+ 1f6:	c3                   	ret    
+ 1f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1fe:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 200:	31 c9                	xor    %ecx,%ecx
+}
+ 202:	5d                   	pop    %ebp
+ 203:	89 c8                	mov    %ecx,%eax
+ 205:	c3                   	ret    
+ 206:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000210 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 210:	f3 0f 1e fb          	endbr32 
+ 214:	55                   	push   %ebp
+ 215:	89 e5                	mov    %esp,%ebp
+ 217:	57                   	push   %edi
+ 218:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 21b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 21e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 221:	89 d7                	mov    %edx,%edi
+ 223:	fc                   	cld    
+ 224:	f3 aa                	rep stos %al,%es:(%edi)
+
+  stosb(dst, c, n);
+  return dst;
+}
+ 226:	89 d0                	mov    %edx,%eax
+ 228:	5f                   	pop    %edi
+ 229:	5d                   	pop    %ebp
+ 22a:	c3                   	ret    
+ 22b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 22f:	90                   	nop
+
+00000230 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 230:	f3 0f 1e fb          	endbr32 
+ 234:	55                   	push   %ebp
+ 235:	89 e5                	mov    %esp,%ebp
+ 237:	8b 45 08             	mov    0x8(%ebp),%eax
+ 23a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 23e:	0f b6 10             	movzbl (%eax),%edx
+ 241:	84 d2                	test   %dl,%dl
+ 243:	75 16                	jne    25b <strchr+0x2b>
+ 245:	eb 21                	jmp    268 <strchr+0x38>
+ 247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24e:	66 90                	xchg   %ax,%ax
+ 250:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 254:	83 c0 01             	add    $0x1,%eax
+ 257:	84 d2                	test   %dl,%dl
+ 259:	74 0d                	je     268 <strchr+0x38>
+    if(*s == c)
+ 25b:	38 d1                	cmp    %dl,%cl
+ 25d:	75 f1                	jne    250 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 25f:	5d                   	pop    %ebp
+ 260:	c3                   	ret    
+ 261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 268:	31 c0                	xor    %eax,%eax
+}
+ 26a:	5d                   	pop    %ebp
+ 26b:	c3                   	ret    
+ 26c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000270 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	57                   	push   %edi
+ 278:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 279:	31 f6                	xor    %esi,%esi
+{
+ 27b:	53                   	push   %ebx
+ 27c:	89 f3                	mov    %esi,%ebx
+ 27e:	83 ec 1c             	sub    $0x1c,%esp
+ 281:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 284:	eb 33                	jmp    2b9 <gets+0x49>
+ 286:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 28d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 290:	83 ec 04             	sub    $0x4,%esp
+ 293:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 296:	6a 01                	push   $0x1
+ 298:	50                   	push   %eax
+ 299:	6a 00                	push   $0x0
+ 29b:	e8 2b 01 00 00       	call   3cb <read>
+    if(cc < 1)
+ 2a0:	83 c4 10             	add    $0x10,%esp
+ 2a3:	85 c0                	test   %eax,%eax
+ 2a5:	7e 1c                	jle    2c3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 2a7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 2ab:	83 c7 01             	add    $0x1,%edi
+ 2ae:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 2b1:	3c 0a                	cmp    $0xa,%al
+ 2b3:	74 23                	je     2d8 <gets+0x68>
+ 2b5:	3c 0d                	cmp    $0xd,%al
+ 2b7:	74 1f                	je     2d8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 2b9:	83 c3 01             	add    $0x1,%ebx
+ 2bc:	89 fe                	mov    %edi,%esi
+ 2be:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 2c1:	7c cd                	jl     290 <gets+0x20>
+ 2c3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 2c5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 2c8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2cb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2ce:	5b                   	pop    %ebx
+ 2cf:	5e                   	pop    %esi
+ 2d0:	5f                   	pop    %edi
+ 2d1:	5d                   	pop    %ebp
+ 2d2:	c3                   	ret    
+ 2d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2d7:	90                   	nop
+ 2d8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 2db:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2de:	01 de                	add    %ebx,%esi
+ 2e0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2e2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2e5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2e8:	5b                   	pop    %ebx
+ 2e9:	5e                   	pop    %esi
+ 2ea:	5f                   	pop    %edi
+ 2eb:	5d                   	pop    %ebp
+ 2ec:	c3                   	ret    
+ 2ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000002f0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2f0:	f3 0f 1e fb          	endbr32 
+ 2f4:	55                   	push   %ebp
+ 2f5:	89 e5                	mov    %esp,%ebp
+ 2f7:	56                   	push   %esi
+ 2f8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2f9:	83 ec 08             	sub    $0x8,%esp
+ 2fc:	6a 00                	push   $0x0
+ 2fe:	ff 75 08             	pushl  0x8(%ebp)
+ 301:	e8 ed 00 00 00       	call   3f3 <open>
+  if(fd < 0)
+ 306:	83 c4 10             	add    $0x10,%esp
+ 309:	85 c0                	test   %eax,%eax
+ 30b:	78 2b                	js     338 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 30d:	83 ec 08             	sub    $0x8,%esp
+ 310:	ff 75 0c             	pushl  0xc(%ebp)
+ 313:	89 c3                	mov    %eax,%ebx
+ 315:	50                   	push   %eax
+ 316:	e8 f0 00 00 00       	call   40b <fstat>
+  close(fd);
+ 31b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 31e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 320:	e8 b6 00 00 00       	call   3db <close>
+  return r;
+ 325:	83 c4 10             	add    $0x10,%esp
+}
+ 328:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 32b:	89 f0                	mov    %esi,%eax
+ 32d:	5b                   	pop    %ebx
+ 32e:	5e                   	pop    %esi
+ 32f:	5d                   	pop    %ebp
+ 330:	c3                   	ret    
+ 331:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 338:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 33d:	eb e9                	jmp    328 <stat+0x38>
+ 33f:	90                   	nop
+
+00000340 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 340:	f3 0f 1e fb          	endbr32 
+ 344:	55                   	push   %ebp
+ 345:	89 e5                	mov    %esp,%ebp
+ 347:	53                   	push   %ebx
+ 348:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 34b:	0f be 02             	movsbl (%edx),%eax
+ 34e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 351:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 354:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 359:	77 1a                	ja     375 <atoi+0x35>
+ 35b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 35f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 360:	83 c2 01             	add    $0x1,%edx
+ 363:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 366:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 36a:	0f be 02             	movsbl (%edx),%eax
+ 36d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 370:	80 fb 09             	cmp    $0x9,%bl
+ 373:	76 eb                	jbe    360 <atoi+0x20>
+  return n;
+}
+ 375:	89 c8                	mov    %ecx,%eax
+ 377:	5b                   	pop    %ebx
+ 378:	5d                   	pop    %ebp
+ 379:	c3                   	ret    
+ 37a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000380 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 380:	f3 0f 1e fb          	endbr32 
+ 384:	55                   	push   %ebp
+ 385:	89 e5                	mov    %esp,%ebp
+ 387:	57                   	push   %edi
+ 388:	8b 45 10             	mov    0x10(%ebp),%eax
+ 38b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 38e:	56                   	push   %esi
+ 38f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 392:	85 c0                	test   %eax,%eax
+ 394:	7e 0f                	jle    3a5 <memmove+0x25>
+ 396:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 398:	89 d7                	mov    %edx,%edi
+ 39a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 3a0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 3a1:	39 f8                	cmp    %edi,%eax
+ 3a3:	75 fb                	jne    3a0 <memmove+0x20>
+  return vdst;
+ 3a5:	5e                   	pop    %esi
+ 3a6:	89 d0                	mov    %edx,%eax
+ 3a8:	5f                   	pop    %edi
+ 3a9:	5d                   	pop    %ebp
+ 3aa:	c3                   	ret    
+
+000003ab <fork>:
+ 3ab:	b8 01 00 00 00       	mov    $0x1,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <exit>:
+ 3b3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <wait>:
+ 3bb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <pipe>:
+ 3c3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <read>:
+ 3cb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <write>:
+ 3d3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <close>:
+ 3db:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <kill>:
+ 3e3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <exec>:
+ 3eb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <open>:
+ 3f3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <mknod>:
+ 3fb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <unlink>:
+ 403:	b8 12 00 00 00       	mov    $0x12,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <fstat>:
+ 40b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <link>:
+ 413:	b8 13 00 00 00       	mov    $0x13,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <mkdir>:
+ 41b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <chdir>:
+ 423:	b8 09 00 00 00       	mov    $0x9,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <dup>:
+ 42b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <getpid>:
+ 433:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <sbrk>:
+ 43b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <sleep>:
+ 443:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <uptime>:
+ 44b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+ 453:	66 90                	xchg   %ax,%ax
+ 455:	66 90                	xchg   %ax,%ax
+ 457:	66 90                	xchg   %ax,%ax
+ 459:	66 90                	xchg   %ax,%ax
+ 45b:	66 90                	xchg   %ax,%ax
+ 45d:	66 90                	xchg   %ax,%ax
+ 45f:	90                   	nop
+
+00000460 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 460:	55                   	push   %ebp
+ 461:	89 e5                	mov    %esp,%ebp
+ 463:	57                   	push   %edi
+ 464:	56                   	push   %esi
+ 465:	53                   	push   %ebx
+ 466:	83 ec 3c             	sub    $0x3c,%esp
+ 469:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 46c:	89 d1                	mov    %edx,%ecx
+{
+ 46e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 471:	85 d2                	test   %edx,%edx
+ 473:	0f 89 7f 00 00 00    	jns    4f8 <printint+0x98>
+ 479:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 47d:	74 79                	je     4f8 <printint+0x98>
+    neg = 1;
+ 47f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 486:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 488:	31 db                	xor    %ebx,%ebx
+ 48a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 48d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 490:	89 c8                	mov    %ecx,%eax
+ 492:	31 d2                	xor    %edx,%edx
+ 494:	89 cf                	mov    %ecx,%edi
+ 496:	f7 75 c4             	divl   -0x3c(%ebp)
+ 499:	0f b6 92 18 0b 00 00 	movzbl 0xb18(%edx),%edx
+ 4a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 4a3:	89 d8                	mov    %ebx,%eax
+ 4a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 4a8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 4ab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 4ae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 4b1:	76 dd                	jbe    490 <printint+0x30>
+  if(neg)
+ 4b3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 4b6:	85 c9                	test   %ecx,%ecx
+ 4b8:	74 0c                	je     4c6 <printint+0x66>
+    buf[i++] = '-';
+ 4ba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 4bf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 4c1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 4c6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 4c9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 4cd:	eb 07                	jmp    4d6 <printint+0x76>
+ 4cf:	90                   	nop
+ 4d0:	0f b6 13             	movzbl (%ebx),%edx
+ 4d3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 4d6:	83 ec 04             	sub    $0x4,%esp
+ 4d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4dc:	6a 01                	push   $0x1
+ 4de:	56                   	push   %esi
+ 4df:	57                   	push   %edi
+ 4e0:	e8 ee fe ff ff       	call   3d3 <write>
+  while(--i >= 0)
+ 4e5:	83 c4 10             	add    $0x10,%esp
+ 4e8:	39 de                	cmp    %ebx,%esi
+ 4ea:	75 e4                	jne    4d0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 4ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4ef:	5b                   	pop    %ebx
+ 4f0:	5e                   	pop    %esi
+ 4f1:	5f                   	pop    %edi
+ 4f2:	5d                   	pop    %ebp
+ 4f3:	c3                   	ret    
+ 4f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4f8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4ff:	eb 87                	jmp    488 <printint+0x28>
+ 501:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 508:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 50f:	90                   	nop
+
+00000510 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 510:	f3 0f 1e fb          	endbr32 
+ 514:	55                   	push   %ebp
+ 515:	89 e5                	mov    %esp,%ebp
+ 517:	57                   	push   %edi
+ 518:	56                   	push   %esi
+ 519:	53                   	push   %ebx
+ 51a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 51d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 520:	0f b6 1e             	movzbl (%esi),%ebx
+ 523:	84 db                	test   %bl,%bl
+ 525:	0f 84 b4 00 00 00    	je     5df <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 52b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 52e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 531:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 534:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 536:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 539:	eb 33                	jmp    56e <printf+0x5e>
+ 53b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 53f:	90                   	nop
+ 540:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 543:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 548:	83 f8 25             	cmp    $0x25,%eax
+ 54b:	74 17                	je     564 <printf+0x54>
+  write(fd, &c, 1);
+ 54d:	83 ec 04             	sub    $0x4,%esp
+ 550:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 553:	6a 01                	push   $0x1
+ 555:	57                   	push   %edi
+ 556:	ff 75 08             	pushl  0x8(%ebp)
+ 559:	e8 75 fe ff ff       	call   3d3 <write>
+ 55e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 561:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 564:	0f b6 1e             	movzbl (%esi),%ebx
+ 567:	83 c6 01             	add    $0x1,%esi
+ 56a:	84 db                	test   %bl,%bl
+ 56c:	74 71                	je     5df <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 56e:	0f be cb             	movsbl %bl,%ecx
+ 571:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 574:	85 d2                	test   %edx,%edx
+ 576:	74 c8                	je     540 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 578:	83 fa 25             	cmp    $0x25,%edx
+ 57b:	75 e7                	jne    564 <printf+0x54>
+      if(c == 'd'){
+ 57d:	83 f8 64             	cmp    $0x64,%eax
+ 580:	0f 84 9a 00 00 00    	je     620 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 586:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 58c:	83 f9 70             	cmp    $0x70,%ecx
+ 58f:	74 5f                	je     5f0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 591:	83 f8 73             	cmp    $0x73,%eax
+ 594:	0f 84 d6 00 00 00    	je     670 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 59a:	83 f8 63             	cmp    $0x63,%eax
+ 59d:	0f 84 8d 00 00 00    	je     630 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 5a3:	83 f8 25             	cmp    $0x25,%eax
+ 5a6:	0f 84 b4 00 00 00    	je     660 <printf+0x150>
+  write(fd, &c, 1);
+ 5ac:	83 ec 04             	sub    $0x4,%esp
+ 5af:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5b3:	6a 01                	push   $0x1
+ 5b5:	57                   	push   %edi
+ 5b6:	ff 75 08             	pushl  0x8(%ebp)
+ 5b9:	e8 15 fe ff ff       	call   3d3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 5be:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5c1:	83 c4 0c             	add    $0xc,%esp
+ 5c4:	6a 01                	push   $0x1
+ 5c6:	83 c6 01             	add    $0x1,%esi
+ 5c9:	57                   	push   %edi
+ 5ca:	ff 75 08             	pushl  0x8(%ebp)
+ 5cd:	e8 01 fe ff ff       	call   3d3 <write>
+  for(i = 0; fmt[i]; i++){
+ 5d2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 5d6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 5d9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 5db:	84 db                	test   %bl,%bl
+ 5dd:	75 8f                	jne    56e <printf+0x5e>
+    }
+  }
+}
+ 5df:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5e2:	5b                   	pop    %ebx
+ 5e3:	5e                   	pop    %esi
+ 5e4:	5f                   	pop    %edi
+ 5e5:	5d                   	pop    %ebp
+ 5e6:	c3                   	ret    
+ 5e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ee:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 5f0:	83 ec 0c             	sub    $0xc,%esp
+ 5f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5f8:	6a 00                	push   $0x0
+ 5fa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 5fd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 600:	8b 13                	mov    (%ebx),%edx
+ 602:	e8 59 fe ff ff       	call   460 <printint>
+        ap++;
+ 607:	89 d8                	mov    %ebx,%eax
+ 609:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 60c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 60e:	83 c0 04             	add    $0x4,%eax
+ 611:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 614:	e9 4b ff ff ff       	jmp    564 <printf+0x54>
+ 619:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 620:	83 ec 0c             	sub    $0xc,%esp
+ 623:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 628:	6a 01                	push   $0x1
+ 62a:	eb ce                	jmp    5fa <printf+0xea>
+ 62c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 630:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 633:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 636:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 638:	6a 01                	push   $0x1
+        ap++;
+ 63a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 63d:	57                   	push   %edi
+ 63e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 641:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 644:	e8 8a fd ff ff       	call   3d3 <write>
+        ap++;
+ 649:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 64c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 64f:	31 d2                	xor    %edx,%edx
+ 651:	e9 0e ff ff ff       	jmp    564 <printf+0x54>
+ 656:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 65d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 660:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 663:	83 ec 04             	sub    $0x4,%esp
+ 666:	e9 59 ff ff ff       	jmp    5c4 <printf+0xb4>
+ 66b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 66f:	90                   	nop
+        s = (char*)*ap;
+ 670:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 673:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 675:	83 c0 04             	add    $0x4,%eax
+ 678:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 67b:	85 db                	test   %ebx,%ebx
+ 67d:	74 17                	je     696 <printf+0x186>
+        while(*s != 0){
+ 67f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 682:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 684:	84 c0                	test   %al,%al
+ 686:	0f 84 d8 fe ff ff    	je     564 <printf+0x54>
+ 68c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 68f:	89 de                	mov    %ebx,%esi
+ 691:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 694:	eb 1a                	jmp    6b0 <printf+0x1a0>
+          s = "(null)";
+ 696:	bb 0f 0b 00 00       	mov    $0xb0f,%ebx
+        while(*s != 0){
+ 69b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 69e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6a3:	89 de                	mov    %ebx,%esi
+ 6a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6af:	90                   	nop
+  write(fd, &c, 1);
+ 6b0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 6b3:	83 c6 01             	add    $0x1,%esi
+ 6b6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 6b9:	6a 01                	push   $0x1
+ 6bb:	57                   	push   %edi
+ 6bc:	53                   	push   %ebx
+ 6bd:	e8 11 fd ff ff       	call   3d3 <write>
+        while(*s != 0){
+ 6c2:	0f b6 06             	movzbl (%esi),%eax
+ 6c5:	83 c4 10             	add    $0x10,%esp
+ 6c8:	84 c0                	test   %al,%al
+ 6ca:	75 e4                	jne    6b0 <printf+0x1a0>
+ 6cc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 6cf:	31 d2                	xor    %edx,%edx
+ 6d1:	e9 8e fe ff ff       	jmp    564 <printf+0x54>
+ 6d6:	66 90                	xchg   %ax,%ax
+ 6d8:	66 90                	xchg   %ax,%ax
+ 6da:	66 90                	xchg   %ax,%ax
+ 6dc:	66 90                	xchg   %ax,%ax
+ 6de:	66 90                	xchg   %ax,%ax
+
+000006e0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6e0:	f3 0f 1e fb          	endbr32 
+ 6e4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6e5:	a1 a0 0e 00 00       	mov    0xea0,%eax
+{
+ 6ea:	89 e5                	mov    %esp,%ebp
+ 6ec:	57                   	push   %edi
+ 6ed:	56                   	push   %esi
+ 6ee:	53                   	push   %ebx
+ 6ef:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6f2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 6f4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6f7:	39 c8                	cmp    %ecx,%eax
+ 6f9:	73 15                	jae    710 <free+0x30>
+ 6fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6ff:	90                   	nop
+ 700:	39 d1                	cmp    %edx,%ecx
+ 702:	72 14                	jb     718 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 704:	39 d0                	cmp    %edx,%eax
+ 706:	73 10                	jae    718 <free+0x38>
+{
+ 708:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 70a:	8b 10                	mov    (%eax),%edx
+ 70c:	39 c8                	cmp    %ecx,%eax
+ 70e:	72 f0                	jb     700 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 710:	39 d0                	cmp    %edx,%eax
+ 712:	72 f4                	jb     708 <free+0x28>
+ 714:	39 d1                	cmp    %edx,%ecx
+ 716:	73 f0                	jae    708 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 718:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 71b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 71e:	39 fa                	cmp    %edi,%edx
+ 720:	74 1e                	je     740 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 722:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 725:	8b 50 04             	mov    0x4(%eax),%edx
+ 728:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 72b:	39 f1                	cmp    %esi,%ecx
+ 72d:	74 28                	je     757 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 72f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 731:	5b                   	pop    %ebx
+  freep = p;
+ 732:	a3 a0 0e 00 00       	mov    %eax,0xea0
+}
+ 737:	5e                   	pop    %esi
+ 738:	5f                   	pop    %edi
+ 739:	5d                   	pop    %ebp
+ 73a:	c3                   	ret    
+ 73b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 73f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 740:	03 72 04             	add    0x4(%edx),%esi
+ 743:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 746:	8b 10                	mov    (%eax),%edx
+ 748:	8b 12                	mov    (%edx),%edx
+ 74a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 74d:	8b 50 04             	mov    0x4(%eax),%edx
+ 750:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 753:	39 f1                	cmp    %esi,%ecx
+ 755:	75 d8                	jne    72f <free+0x4f>
+    p->s.size += bp->s.size;
+ 757:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 75a:	a3 a0 0e 00 00       	mov    %eax,0xea0
+    p->s.size += bp->s.size;
+ 75f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 762:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 765:	89 10                	mov    %edx,(%eax)
+}
+ 767:	5b                   	pop    %ebx
+ 768:	5e                   	pop    %esi
+ 769:	5f                   	pop    %edi
+ 76a:	5d                   	pop    %ebp
+ 76b:	c3                   	ret    
+ 76c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000770 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 770:	f3 0f 1e fb          	endbr32 
+ 774:	55                   	push   %ebp
+ 775:	89 e5                	mov    %esp,%ebp
+ 777:	57                   	push   %edi
+ 778:	56                   	push   %esi
+ 779:	53                   	push   %ebx
+ 77a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 77d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 780:	8b 3d a0 0e 00 00    	mov    0xea0,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 786:	8d 70 07             	lea    0x7(%eax),%esi
+ 789:	c1 ee 03             	shr    $0x3,%esi
+ 78c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 78f:	85 ff                	test   %edi,%edi
+ 791:	0f 84 a9 00 00 00    	je     840 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 797:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 799:	8b 48 04             	mov    0x4(%eax),%ecx
+ 79c:	39 f1                	cmp    %esi,%ecx
+ 79e:	73 6d                	jae    80d <malloc+0x9d>
+ 7a0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 7a6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 7ab:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 7ae:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 7b5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 7b8:	eb 17                	jmp    7d1 <malloc+0x61>
+ 7ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7c0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 7c2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 7c5:	39 f1                	cmp    %esi,%ecx
+ 7c7:	73 4f                	jae    818 <malloc+0xa8>
+ 7c9:	8b 3d a0 0e 00 00    	mov    0xea0,%edi
+ 7cf:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7d1:	39 c7                	cmp    %eax,%edi
+ 7d3:	75 eb                	jne    7c0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 7d5:	83 ec 0c             	sub    $0xc,%esp
+ 7d8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 7db:	e8 5b fc ff ff       	call   43b <sbrk>
+  if(p == (char*)-1)
+ 7e0:	83 c4 10             	add    $0x10,%esp
+ 7e3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7e6:	74 1b                	je     803 <malloc+0x93>
+  hp->s.size = nu;
+ 7e8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7eb:	83 ec 0c             	sub    $0xc,%esp
+ 7ee:	83 c0 08             	add    $0x8,%eax
+ 7f1:	50                   	push   %eax
+ 7f2:	e8 e9 fe ff ff       	call   6e0 <free>
+  return freep;
+ 7f7:	a1 a0 0e 00 00       	mov    0xea0,%eax
+      if((p = morecore(nunits)) == 0)
+ 7fc:	83 c4 10             	add    $0x10,%esp
+ 7ff:	85 c0                	test   %eax,%eax
+ 801:	75 bd                	jne    7c0 <malloc+0x50>
+        return 0;
+  }
+}
+ 803:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 806:	31 c0                	xor    %eax,%eax
+}
+ 808:	5b                   	pop    %ebx
+ 809:	5e                   	pop    %esi
+ 80a:	5f                   	pop    %edi
+ 80b:	5d                   	pop    %ebp
+ 80c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 80d:	89 c2                	mov    %eax,%edx
+ 80f:	89 f8                	mov    %edi,%eax
+ 811:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 818:	39 ce                	cmp    %ecx,%esi
+ 81a:	74 54                	je     870 <malloc+0x100>
+        p->s.size -= nunits;
+ 81c:	29 f1                	sub    %esi,%ecx
+ 81e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 821:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 824:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 827:	a3 a0 0e 00 00       	mov    %eax,0xea0
+}
+ 82c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 82f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 832:	5b                   	pop    %ebx
+ 833:	5e                   	pop    %esi
+ 834:	5f                   	pop    %edi
+ 835:	5d                   	pop    %ebp
+ 836:	c3                   	ret    
+ 837:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 83e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 840:	c7 05 a0 0e 00 00 a4 	movl   $0xea4,0xea0
+ 847:	0e 00 00 
+    base.s.size = 0;
+ 84a:	bf a4 0e 00 00       	mov    $0xea4,%edi
+    base.s.ptr = freep = prevp = &base;
+ 84f:	c7 05 a4 0e 00 00 a4 	movl   $0xea4,0xea4
+ 856:	0e 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 859:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 85b:	c7 05 a8 0e 00 00 00 	movl   $0x0,0xea8
+ 862:	00 00 00 
+    if(p->s.size >= nunits){
+ 865:	e9 36 ff ff ff       	jmp    7a0 <malloc+0x30>
+ 86a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 870:	8b 0a                	mov    (%edx),%ecx
+ 872:	89 08                	mov    %ecx,(%eax)
+ 874:	eb b1                	jmp    827 <malloc+0xb7>
+ 876:	66 90                	xchg   %ax,%ax
+ 878:	66 90                	xchg   %ax,%ax
+ 87a:	66 90                	xchg   %ax,%ax
+ 87c:	66 90                	xchg   %ax,%ax
+ 87e:	66 90                	xchg   %ax,%ax
+
+00000880 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 880:	f3 0f 1e fb          	endbr32 
+ 884:	55                   	push   %ebp
+ 885:	b8 c4 0e 00 00       	mov    $0xec4,%eax
+ 88a:	89 e5                	mov    %esp,%ebp
+ 88c:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 88f:	89 15 c0 0e 00 00    	mov    %edx,0xec0
+    for (mti=1; mti<N; mti++)
+ 895:	eb 0c                	jmp    8a3 <sgenrand+0x23>
+ 897:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 89e:	66 90                	xchg   %ax,%ax
+ 8a0:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 8a3:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 8a9:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 8ab:	3d 7c 18 00 00       	cmp    $0x187c,%eax
+ 8b0:	75 ee                	jne    8a0 <sgenrand+0x20>
+ 8b2:	c7 05 80 0e 00 00 70 	movl   $0x270,0xe80
+ 8b9:	02 00 00 
+}
+ 8bc:	5d                   	pop    %ebp
+ 8bd:	c3                   	ret    
+ 8be:	66 90                	xchg   %ax,%ax
+
+000008c0 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 8c0:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 8c4:	a1 80 0e 00 00       	mov    0xe80,%eax
+ 8c9:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8ce:	7f 3c                	jg     90c <genrand+0x4c>
+ 8d0:	8d 50 01             	lea    0x1(%eax),%edx
+ 8d3:	8b 04 85 c0 0e 00 00 	mov    0xec0(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 8da:	89 15 80 0e 00 00    	mov    %edx,0xe80
+    y ^= TEMPERING_SHIFT_U(y);
+ 8e0:	89 c2                	mov    %eax,%edx
+ 8e2:	c1 ea 0b             	shr    $0xb,%edx
+ 8e5:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 8e7:	89 d0                	mov    %edx,%eax
+ 8e9:	c1 e0 07             	shl    $0x7,%eax
+ 8ec:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 8f1:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 8f3:	89 d0                	mov    %edx,%eax
+ 8f5:	c1 e0 0f             	shl    $0xf,%eax
+ 8f8:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 8fd:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 8ff:	89 c2                	mov    %eax,%edx
+ 901:	c1 ea 12             	shr    $0x12,%edx
+ 904:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 906:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 90b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 90c:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 911:	0f 84 d2 00 00 00    	je     9e9 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 917:	31 c0                	xor    %eax,%eax
+ 919:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 920:	8b 0c 85 c0 0e 00 00 	mov    0xec0(,%eax,4),%ecx
+ 927:	83 c0 01             	add    $0x1,%eax
+ 92a:	8b 14 85 c0 0e 00 00 	mov    0xec0(,%eax,4),%edx
+ 931:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 937:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 93d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 93f:	89 d1                	mov    %edx,%ecx
+ 941:	83 e2 01             	and    $0x1,%edx
+ 944:	d1 e9                	shr    %ecx
+ 946:	33 0c 85 f0 14 00 00 	xor    0x14f0(,%eax,4),%ecx
+ 94d:	33 0c 95 2c 0b 00 00 	xor    0xb2c(,%edx,4),%ecx
+ 954:	89 0c 85 bc 0e 00 00 	mov    %ecx,0xebc(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 95b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 960:	75 be                	jne    920 <genrand+0x60>
+ 962:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 968:	8b 0c 85 c0 0e 00 00 	mov    0xec0(,%eax,4),%ecx
+ 96f:	83 c0 01             	add    $0x1,%eax
+ 972:	8b 14 85 c0 0e 00 00 	mov    0xec0(,%eax,4),%edx
+ 979:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 97f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 985:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 987:	89 d1                	mov    %edx,%ecx
+ 989:	83 e2 01             	and    $0x1,%edx
+ 98c:	d1 e9                	shr    %ecx
+ 98e:	33 0c 85 30 0b 00 00 	xor    0xb30(,%eax,4),%ecx
+ 995:	33 0c 95 2c 0b 00 00 	xor    0xb2c(,%edx,4),%ecx
+ 99c:	89 0c 85 bc 0e 00 00 	mov    %ecx,0xebc(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 9a3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 9a8:	75 be                	jne    968 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 9aa:	a1 c0 0e 00 00       	mov    0xec0,%eax
+ 9af:	8b 0d 7c 18 00 00    	mov    0x187c,%ecx
+ 9b5:	89 c2                	mov    %eax,%edx
+ 9b7:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 9bd:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 9c3:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 9c5:	89 ca                	mov    %ecx,%edx
+ 9c7:	83 e1 01             	and    $0x1,%ecx
+ 9ca:	d1 ea                	shr    %edx
+ 9cc:	33 15 f0 14 00 00    	xor    0x14f0,%edx
+ 9d2:	33 14 8d 2c 0b 00 00 	xor    0xb2c(,%ecx,4),%edx
+ 9d9:	89 15 7c 18 00 00    	mov    %edx,0x187c
+ 9df:	ba 01 00 00 00       	mov    $0x1,%edx
+ 9e4:	e9 f1 fe ff ff       	jmp    8da <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ 9e9:	b8 c4 0e 00 00       	mov    $0xec4,%eax
+ 9ee:	b9 7c 18 00 00       	mov    $0x187c,%ecx
+ 9f3:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 9f8:	c7 05 c0 0e 00 00 05 	movl   $0x1105,0xec0
+ 9ff:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ a02:	eb 07                	jmp    a0b <genrand+0x14b>
+ a04:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ a08:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ a0b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ a11:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ a13:	39 c1                	cmp    %eax,%ecx
+ a15:	75 f1                	jne    a08 <genrand+0x148>
+ a17:	e9 fb fe ff ff       	jmp    917 <genrand+0x57>
+ a1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000a20 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ a20:	f3 0f 1e fb          	endbr32 
+ a24:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ a25:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ a27:	89 e5                	mov    %esp,%ebp
+ a29:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ a2a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ a2d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ a2e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ a33:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ a36:	89 d8                	mov    %ebx,%eax
+ a38:	f7 f1                	div    %ecx
+ a3a:	89 c6                	mov    %eax,%esi
+ a3c:	29 d3                	sub    %edx,%ebx
+ a3e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ a40:	e8 7b fe ff ff       	call   8c0 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ a45:	39 d8                	cmp    %ebx,%eax
+ a47:	73 f7                	jae    a40 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ a49:	31 d2                	xor    %edx,%edx
+}
+ a4b:	5b                   	pop    %ebx
+  return x/bin_size;
+ a4c:	f7 f6                	div    %esi
+}
+ a4e:	5e                   	pop    %esi
+ a4f:	5d                   	pop    %ebp
+ a50:	c3                   	ret    
+ a51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a58:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a5f:	90                   	nop
+
+00000a60 <randomrange>:
+
+int randomrange(int low, int high){
+ a60:	f3 0f 1e fb          	endbr32 
+ a64:	55                   	push   %ebp
+ a65:	89 e5                	mov    %esp,%ebp
+ a67:	57                   	push   %edi
+ a68:	56                   	push   %esi
+ a69:	53                   	push   %ebx
+ a6a:	83 ec 0c             	sub    $0xc,%esp
+ a6d:	8b 75 08             	mov    0x8(%ebp),%esi
+ a70:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ a73:	39 f0                	cmp    %esi,%eax
+ a75:	7d 06                	jge    a7d <randomrange+0x1d>
+ a77:	89 f2                	mov    %esi,%edx
+ a79:	89 c6                	mov    %eax,%esi
+ a7b:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ a7d:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ a7f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ a84:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ a86:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ a89:	89 d8                	mov    %ebx,%eax
+ a8b:	f7 f1                	div    %ecx
+ a8d:	89 c7                	mov    %eax,%edi
+ a8f:	29 d3                	sub    %edx,%ebx
+ a91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ a98:	e8 23 fe ff ff       	call   8c0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ a9d:	39 d8                	cmp    %ebx,%eax
+ a9f:	73 f7                	jae    a98 <randomrange+0x38>
+  return x/bin_size;
+ aa1:	31 d2                	xor    %edx,%edx
+  return val;
+ aa3:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ aa6:	f7 f7                	div    %edi
+ aa8:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ aa9:	01 f0                	add    %esi,%eax
+ aab:	5e                   	pop    %esi
+ aac:	5f                   	pop    %edi
+ aad:	5d                   	pop    %ebp
+ aae:	c3                   	ret    
diff -ruN xv6-public/memtest.c xv6-public-partb/memtest.c
--- xv6-public/memtest.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partb/memtest.c	2022-10-31 11:05:34.638667067 +0530
@@ -0,0 +1,44 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int math_func(int num){
+	return num*num - 4*num + 1;
+}
+
+int
+main(int argc, char* argv[]){
+
+	for(int i=0;i<20;i++){
+		if(!fork()){
+			printf(1, "Child %d\n", i+1);
+			printf(1, "Iteration Matched Different\n");
+			printf(1, "--------- ------- ---------\n\n");
+			
+			for(int j=0;j<10;j++){
+				int *arr = malloc(4096);
+				for(int k=0;k<1024;k++){
+					arr[k] = math_func(k);
+				}
+				int matched=0;
+				for(int k=0;k<1024;k++){
+					if(arr[k] == math_func(k))
+						matched+=4;
+				}
+				
+				if(j<9)
+					printf(1, "    %d      %dB      %dB\n", j+1, matched, 4096-matched);
+				else
+					printf(1, "   %d      %dB      %dB\n", j+1, matched, 4096-matched);
+				
+			}
+			printf(1, "\n");
+			
+			exit();
+		}
+	}
+
+	while(wait()!=-1);
+	exit();
+
+}
\ No newline at end of file
diff -ruN xv6-public/memtest.d xv6-public-partb/memtest.d
--- xv6-public/memtest.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partb/memtest.d	2022-10-31 11:09:01.774183183 +0530
@@ -0,0 +1 @@
+memtest.o: memtest.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/memtest.o and xv6-public-partb/memtest.o differ
diff -ruN xv6-public/memtest.sym xv6-public-partb/memtest.sym
--- xv6-public/memtest.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partb/memtest.sym	2022-10-31 11:09:01.974283182 +0530
@@ -0,0 +1,67 @@
+00000000 .text
+00000ab0 .rodata
+00000b34 .eh_frame
+00000e80 .data
+00000ea0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 memtest.c
+00000000 ulib.c
+00000000 printf.c
+00000460 printint
+00000b18 digits.1088
+00000000 umalloc.c
+00000ea0 freep
+00000ea4 base
+00000000 random.c
+00000ec0 mt
+00000e80 mti
+00000b2c mag01.989
+00000150 strcpy
+00000880 sgenrand
+00000510 printf
+00000380 memmove
+000003fb mknod
+00000270 gets
+00000433 getpid
+00000770 malloc
+00000443 sleep
+00000a20 random_at_most
+000003c3 pipe
+000003d3 write
+0000040b fstat
+000003e3 kill
+00000423 chdir
+000003eb exec
+000003bb wait
+000003cb read
+00000403 unlink
+000003ab fork
+0000043b sbrk
+0000044b uptime
+00000e84 __bss_start
+00000210 memset
+00000000 main
+00000180 strcmp
+0000042b dup
+000008c0 genrand
+00000130 math_func
+000002f0 stat
+00000e84 _edata
+00001880 _end
+00000413 link
+000003b3 exit
+00000340 atoi
+000001d0 strlen
+000003f3 open
+00000230 strchr
+00000a60 randomrange
+0000041b mkdir
+000003db close
+000006e0 free
Binary files xv6-public/_mkdir and xv6-public-partb/_mkdir differ
diff -ruN xv6-public/mkdir.asm xv6-public-partb/mkdir.asm
--- xv6-public/mkdir.asm	2022-08-13 16:28:54.588254000 +0530
+++ xv6-public-partb/mkdir.asm	2022-10-31 11:08:59.537065182 +0530
@@ -59,7 +59,7 @@
       printf(2, "mkdir: %s failed to create\n", argv[i]);
   50:	50                   	push   %eax
   51:	ff 33                	pushl  (%ebx)
-  53:	68 bf 07 00 00       	push   $0x7bf
+  53:	68 f7 09 00 00       	push   $0x9f7
   58:	6a 02                	push   $0x2
   5a:	e8 e1 03 00 00       	call   440 <printf>
       break;
@@ -68,7 +68,7 @@
     printf(2, "Usage: mkdir files...\n");
   64:	52                   	push   %edx
   65:	52                   	push   %edx
-  66:	68 a8 07 00 00       	push   $0x7a8
+  66:	68 e0 09 00 00       	push   $0x9e0
   6b:	6a 02                	push   $0x2
   6d:	e8 ce 03 00 00       	call   440 <printf>
     exit();
@@ -217,6 +217,7 @@
  151:	89 d7                	mov    %edx,%edi
  153:	fc                   	cld    
  154:	f3 aa                	rep stos %al,%es:(%edi)
+
   stosb(dst, c, n);
   return dst;
 }
@@ -468,7 +469,6 @@
  2d1:	39 f8                	cmp    %edi,%eax
  2d3:	75 fb                	jne    2d0 <memmove+0x20>
   return vdst;
-}
  2d5:	5e                   	pop    %esi
  2d6:	89 d0                	mov    %edx,%eax
  2d8:	5f                   	pop    %edi
@@ -476,132 +476,106 @@
  2da:	c3                   	ret    
 
 000002db <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  2db:	b8 01 00 00 00       	mov    $0x1,%eax
  2e0:	cd 40                	int    $0x40
  2e2:	c3                   	ret    
 
 000002e3 <exit>:
-SYSCALL(exit)
  2e3:	b8 02 00 00 00       	mov    $0x2,%eax
  2e8:	cd 40                	int    $0x40
  2ea:	c3                   	ret    
 
 000002eb <wait>:
-SYSCALL(wait)
  2eb:	b8 03 00 00 00       	mov    $0x3,%eax
  2f0:	cd 40                	int    $0x40
  2f2:	c3                   	ret    
 
 000002f3 <pipe>:
-SYSCALL(pipe)
  2f3:	b8 04 00 00 00       	mov    $0x4,%eax
  2f8:	cd 40                	int    $0x40
  2fa:	c3                   	ret    
 
 000002fb <read>:
-SYSCALL(read)
  2fb:	b8 05 00 00 00       	mov    $0x5,%eax
  300:	cd 40                	int    $0x40
  302:	c3                   	ret    
 
 00000303 <write>:
-SYSCALL(write)
  303:	b8 10 00 00 00       	mov    $0x10,%eax
  308:	cd 40                	int    $0x40
  30a:	c3                   	ret    
 
 0000030b <close>:
-SYSCALL(close)
  30b:	b8 15 00 00 00       	mov    $0x15,%eax
  310:	cd 40                	int    $0x40
  312:	c3                   	ret    
 
 00000313 <kill>:
-SYSCALL(kill)
  313:	b8 06 00 00 00       	mov    $0x6,%eax
  318:	cd 40                	int    $0x40
  31a:	c3                   	ret    
 
 0000031b <exec>:
-SYSCALL(exec)
  31b:	b8 07 00 00 00       	mov    $0x7,%eax
  320:	cd 40                	int    $0x40
  322:	c3                   	ret    
 
 00000323 <open>:
-SYSCALL(open)
  323:	b8 0f 00 00 00       	mov    $0xf,%eax
  328:	cd 40                	int    $0x40
  32a:	c3                   	ret    
 
 0000032b <mknod>:
-SYSCALL(mknod)
  32b:	b8 11 00 00 00       	mov    $0x11,%eax
  330:	cd 40                	int    $0x40
  332:	c3                   	ret    
 
 00000333 <unlink>:
-SYSCALL(unlink)
  333:	b8 12 00 00 00       	mov    $0x12,%eax
  338:	cd 40                	int    $0x40
  33a:	c3                   	ret    
 
 0000033b <fstat>:
-SYSCALL(fstat)
  33b:	b8 08 00 00 00       	mov    $0x8,%eax
  340:	cd 40                	int    $0x40
  342:	c3                   	ret    
 
 00000343 <link>:
-SYSCALL(link)
  343:	b8 13 00 00 00       	mov    $0x13,%eax
  348:	cd 40                	int    $0x40
  34a:	c3                   	ret    
 
 0000034b <mkdir>:
-SYSCALL(mkdir)
  34b:	b8 14 00 00 00       	mov    $0x14,%eax
  350:	cd 40                	int    $0x40
  352:	c3                   	ret    
 
 00000353 <chdir>:
-SYSCALL(chdir)
  353:	b8 09 00 00 00       	mov    $0x9,%eax
  358:	cd 40                	int    $0x40
  35a:	c3                   	ret    
 
 0000035b <dup>:
-SYSCALL(dup)
  35b:	b8 0a 00 00 00       	mov    $0xa,%eax
  360:	cd 40                	int    $0x40
  362:	c3                   	ret    
 
 00000363 <getpid>:
-SYSCALL(getpid)
  363:	b8 0b 00 00 00       	mov    $0xb,%eax
  368:	cd 40                	int    $0x40
  36a:	c3                   	ret    
 
 0000036b <sbrk>:
-SYSCALL(sbrk)
  36b:	b8 0c 00 00 00       	mov    $0xc,%eax
  370:	cd 40                	int    $0x40
  372:	c3                   	ret    
 
 00000373 <sleep>:
-SYSCALL(sleep)
  373:	b8 0d 00 00 00       	mov    $0xd,%eax
  378:	cd 40                	int    $0x40
  37a:	c3                   	ret    
 
 0000037b <uptime>:
-SYSCALL(uptime)
  37b:	b8 0e 00 00 00       	mov    $0xe,%eax
  380:	cd 40                	int    $0x40
  382:	c3                   	ret    
@@ -659,7 +633,7 @@
  3c2:	31 d2                	xor    %edx,%edx
  3c4:	89 cf                	mov    %ecx,%edi
  3c6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3c9:	0f b6 92 e4 07 00 00 	movzbl 0x7e4(%edx),%edx
+ 3c9:	0f b6 92 1c 0a 00 00 	movzbl 0xa1c(%edx),%edx
  3d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
  3d3:	89 d8                	mov    %ebx,%eax
  3d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
@@ -930,7 +904,7 @@
  5c1:	8b 5d 08             	mov    0x8(%ebp),%ebx
  5c4:	eb 1a                	jmp    5e0 <printf+0x1a0>
           s = "(null)";
- 5c6:	bb db 07 00 00       	mov    $0x7db,%ebx
+ 5c6:	bb 13 0a 00 00       	mov    $0xa13,%ebx
         while(*s != 0){
  5cb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  5ce:	b8 28 00 00 00       	mov    $0x28,%eax
@@ -976,7 +950,7 @@
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 615:	a1 9c 0a 00 00       	mov    0xa9c,%eax
+ 615:	a1 80 0d 00 00       	mov    0xd80,%eax
 {
  61a:	89 e5                	mov    %esp,%ebp
  61c:	57                   	push   %edi
@@ -1032,7 +1006,7 @@
 }
  661:	5b                   	pop    %ebx
   freep = p;
- 662:	a3 9c 0a 00 00       	mov    %eax,0xa9c
+ 662:	a3 80 0d 00 00       	mov    %eax,0xd80
 }
  667:	5e                   	pop    %esi
  668:	5f                   	pop    %edi
@@ -1055,7 +1029,7 @@
     p->s.size += bp->s.size;
  687:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 68a:	a3 9c 0a 00 00       	mov    %eax,0xa9c
+ 68a:	a3 80 0d 00 00       	mov    %eax,0xd80
     p->s.size += bp->s.size;
  68f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
@@ -1089,7 +1063,7 @@
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  6ad:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 6b0:	8b 3d 9c 0a 00 00    	mov    0xa9c,%edi
+ 6b0:	8b 3d 80 0d 00 00    	mov    0xd80,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  6b6:	8d 70 07             	lea    0x7(%eax),%esi
  6b9:	c1 ee 03             	shr    $0x3,%esi
@@ -1120,7 +1094,7 @@
  6f2:	8b 4a 04             	mov    0x4(%edx),%ecx
  6f5:	39 f1                	cmp    %esi,%ecx
  6f7:	73 4f                	jae    748 <malloc+0xa8>
- 6f9:	8b 3d 9c 0a 00 00    	mov    0xa9c,%edi
+ 6f9:	8b 3d 80 0d 00 00    	mov    0xd80,%edi
  6ff:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
@@ -1146,7 +1120,7 @@
  721:	50                   	push   %eax
  722:	e8 e9 fe ff ff       	call   610 <free>
   return freep;
- 727:	a1 9c 0a 00 00       	mov    0xa9c,%eax
+ 727:	a1 80 0d 00 00       	mov    0xd80,%eax
       if((p = morecore(nunits)) == 0)
  72c:	83 c4 10             	add    $0x10,%esp
  72f:	85 c0                	test   %eax,%eax
@@ -1178,7 +1152,7 @@
         p->s.size = nunits;
  754:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 757:	a3 9c 0a 00 00       	mov    %eax,0xa9c
+ 757:	a3 80 0d 00 00       	mov    %eax,0xd80
 }
  75c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
@@ -1192,17 +1166,17 @@
  767:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  76e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 770:	c7 05 9c 0a 00 00 a0 	movl   $0xaa0,0xa9c
- 777:	0a 00 00 
+ 770:	c7 05 80 0d 00 00 84 	movl   $0xd84,0xd80
+ 777:	0d 00 00 
     base.s.size = 0;
- 77a:	bf a0 0a 00 00       	mov    $0xaa0,%edi
+ 77a:	bf 84 0d 00 00       	mov    $0xd84,%edi
     base.s.ptr = freep = prevp = &base;
- 77f:	c7 05 a0 0a 00 00 a0 	movl   $0xaa0,0xaa0
- 786:	0a 00 00 
+ 77f:	c7 05 84 0d 00 00 84 	movl   $0xd84,0xd84
+ 786:	0d 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
  789:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 78b:	c7 05 a4 0a 00 00 00 	movl   $0x0,0xaa4
+ 78b:	c7 05 88 0d 00 00 00 	movl   $0x0,0xd88
  792:	00 00 00 
     if(p->s.size >= nunits){
  795:	e9 36 ff ff ff       	jmp    6d0 <malloc+0x30>
@@ -1211,3 +1185,279 @@
  7a0:	8b 0a                	mov    (%edx),%ecx
  7a2:	89 08                	mov    %ecx,(%eax)
  7a4:	eb b1                	jmp    757 <malloc+0xb7>
+ 7a6:	66 90                	xchg   %ax,%ax
+ 7a8:	66 90                	xchg   %ax,%ax
+ 7aa:	66 90                	xchg   %ax,%ax
+ 7ac:	66 90                	xchg   %ax,%ax
+ 7ae:	66 90                	xchg   %ax,%ax
+
+000007b0 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 7b0:	f3 0f 1e fb          	endbr32 
+ 7b4:	55                   	push   %ebp
+ 7b5:	b8 a4 0d 00 00       	mov    $0xda4,%eax
+ 7ba:	89 e5                	mov    %esp,%ebp
+ 7bc:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 7bf:	89 15 a0 0d 00 00    	mov    %edx,0xda0
+    for (mti=1; mti<N; mti++)
+ 7c5:	eb 0c                	jmp    7d3 <sgenrand+0x23>
+ 7c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7ce:	66 90                	xchg   %ax,%ax
+ 7d0:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 7d3:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 7d9:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 7db:	3d 5c 17 00 00       	cmp    $0x175c,%eax
+ 7e0:	75 ee                	jne    7d0 <sgenrand+0x20>
+ 7e2:	c7 05 64 0d 00 00 70 	movl   $0x270,0xd64
+ 7e9:	02 00 00 
+}
+ 7ec:	5d                   	pop    %ebp
+ 7ed:	c3                   	ret    
+ 7ee:	66 90                	xchg   %ax,%ax
+
+000007f0 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 7f0:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 7f4:	a1 64 0d 00 00       	mov    0xd64,%eax
+ 7f9:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 7fe:	7f 3c                	jg     83c <genrand+0x4c>
+ 800:	8d 50 01             	lea    0x1(%eax),%edx
+ 803:	8b 04 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 80a:	89 15 64 0d 00 00    	mov    %edx,0xd64
+    y ^= TEMPERING_SHIFT_U(y);
+ 810:	89 c2                	mov    %eax,%edx
+ 812:	c1 ea 0b             	shr    $0xb,%edx
+ 815:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 817:	89 d0                	mov    %edx,%eax
+ 819:	c1 e0 07             	shl    $0x7,%eax
+ 81c:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 821:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 823:	89 d0                	mov    %edx,%eax
+ 825:	c1 e0 0f             	shl    $0xf,%eax
+ 828:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 82d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 82f:	89 c2                	mov    %eax,%edx
+ 831:	c1 ea 12             	shr    $0x12,%edx
+ 834:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 836:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 83b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 83c:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 841:	0f 84 d2 00 00 00    	je     919 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 847:	31 c0                	xor    %eax,%eax
+ 849:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 850:	8b 0c 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%ecx
+ 857:	83 c0 01             	add    $0x1,%eax
+ 85a:	8b 14 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%edx
+ 861:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 867:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 86d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 86f:	89 d1                	mov    %edx,%ecx
+ 871:	83 e2 01             	and    $0x1,%edx
+ 874:	d1 e9                	shr    %ecx
+ 876:	33 0c 85 d0 13 00 00 	xor    0x13d0(,%eax,4),%ecx
+ 87d:	33 0c 95 30 0a 00 00 	xor    0xa30(,%edx,4),%ecx
+ 884:	89 0c 85 9c 0d 00 00 	mov    %ecx,0xd9c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 88b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 890:	75 be                	jne    850 <genrand+0x60>
+ 892:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 898:	8b 0c 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%ecx
+ 89f:	83 c0 01             	add    $0x1,%eax
+ 8a2:	8b 14 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%edx
+ 8a9:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8af:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8b5:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8b7:	89 d1                	mov    %edx,%ecx
+ 8b9:	83 e2 01             	and    $0x1,%edx
+ 8bc:	d1 e9                	shr    %ecx
+ 8be:	33 0c 85 10 0a 00 00 	xor    0xa10(,%eax,4),%ecx
+ 8c5:	33 0c 95 30 0a 00 00 	xor    0xa30(,%edx,4),%ecx
+ 8cc:	89 0c 85 9c 0d 00 00 	mov    %ecx,0xd9c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 8d3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8d8:	75 be                	jne    898 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 8da:	a1 a0 0d 00 00       	mov    0xda0,%eax
+ 8df:	8b 0d 5c 17 00 00    	mov    0x175c,%ecx
+ 8e5:	89 c2                	mov    %eax,%edx
+ 8e7:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8ed:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8f3:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8f5:	89 ca                	mov    %ecx,%edx
+ 8f7:	83 e1 01             	and    $0x1,%ecx
+ 8fa:	d1 ea                	shr    %edx
+ 8fc:	33 15 d0 13 00 00    	xor    0x13d0,%edx
+ 902:	33 14 8d 30 0a 00 00 	xor    0xa30(,%ecx,4),%edx
+ 909:	89 15 5c 17 00 00    	mov    %edx,0x175c
+ 90f:	ba 01 00 00 00       	mov    $0x1,%edx
+ 914:	e9 f1 fe ff ff       	jmp    80a <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ 919:	b8 a4 0d 00 00       	mov    $0xda4,%eax
+ 91e:	b9 5c 17 00 00       	mov    $0x175c,%ecx
+ 923:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 928:	c7 05 a0 0d 00 00 05 	movl   $0x1105,0xda0
+ 92f:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 932:	eb 07                	jmp    93b <genrand+0x14b>
+ 934:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 938:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 93b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 941:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 943:	39 c1                	cmp    %eax,%ecx
+ 945:	75 f1                	jne    938 <genrand+0x148>
+ 947:	e9 fb fe ff ff       	jmp    847 <genrand+0x57>
+ 94c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000950 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 950:	f3 0f 1e fb          	endbr32 
+ 954:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 955:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 957:	89 e5                	mov    %esp,%ebp
+ 959:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 95a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 95d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 95e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 963:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 966:	89 d8                	mov    %ebx,%eax
+ 968:	f7 f1                	div    %ecx
+ 96a:	89 c6                	mov    %eax,%esi
+ 96c:	29 d3                	sub    %edx,%ebx
+ 96e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ 970:	e8 7b fe ff ff       	call   7f0 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 975:	39 d8                	cmp    %ebx,%eax
+ 977:	73 f7                	jae    970 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 979:	31 d2                	xor    %edx,%edx
+}
+ 97b:	5b                   	pop    %ebx
+  return x/bin_size;
+ 97c:	f7 f6                	div    %esi
+}
+ 97e:	5e                   	pop    %esi
+ 97f:	5d                   	pop    %ebp
+ 980:	c3                   	ret    
+ 981:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 988:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 98f:	90                   	nop
+
+00000990 <randomrange>:
+
+int randomrange(int low, int high){
+ 990:	f3 0f 1e fb          	endbr32 
+ 994:	55                   	push   %ebp
+ 995:	89 e5                	mov    %esp,%ebp
+ 997:	57                   	push   %edi
+ 998:	56                   	push   %esi
+ 999:	53                   	push   %ebx
+ 99a:	83 ec 0c             	sub    $0xc,%esp
+ 99d:	8b 75 08             	mov    0x8(%ebp),%esi
+ 9a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 9a3:	39 f0                	cmp    %esi,%eax
+ 9a5:	7d 06                	jge    9ad <randomrange+0x1d>
+ 9a7:	89 f2                	mov    %esi,%edx
+ 9a9:	89 c6                	mov    %eax,%esi
+ 9ab:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 9ad:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 9af:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 9b4:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 9b6:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 9b9:	89 d8                	mov    %ebx,%eax
+ 9bb:	f7 f1                	div    %ecx
+ 9bd:	89 c7                	mov    %eax,%edi
+ 9bf:	29 d3                	sub    %edx,%ebx
+ 9c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ 9c8:	e8 23 fe ff ff       	call   7f0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 9cd:	39 d8                	cmp    %ebx,%eax
+ 9cf:	73 f7                	jae    9c8 <randomrange+0x38>
+  return x/bin_size;
+ 9d1:	31 d2                	xor    %edx,%edx
+  return val;
+ 9d3:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ 9d6:	f7 f7                	div    %edi
+ 9d8:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ 9d9:	01 f0                	add    %esi,%eax
+ 9db:	5e                   	pop    %esi
+ 9dc:	5f                   	pop    %edi
+ 9dd:	5d                   	pop    %ebp
+ 9de:	c3                   	ret    
Binary files xv6-public/mkdir.o and xv6-public-partb/mkdir.o differ
diff -ruN xv6-public/mkdir.sym xv6-public-partb/mkdir.sym
--- xv6-public/mkdir.sym	2022-08-13 16:28:54.596252000 +0530
+++ xv6-public-partb/mkdir.sym	2022-10-31 11:08:59.613103182 +0530
@@ -1,7 +1,8 @@
 00000000 .text
-000007a8 .rodata
-000007f8 .eh_frame
-00000a9c .bss
+000009e0 .rodata
+00000a38 .eh_frame
+00000d64 .data
+00000d80 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -14,11 +15,16 @@
 00000000 ulib.c
 00000000 printf.c
 00000390 printint
-000007e4 digits.1085
+00000a1c digits.1088
 00000000 umalloc.c
-00000a9c freep
-00000aa0 base
+00000d80 freep
+00000d84 base
+00000000 random.c
+00000da0 mt
+00000d64 mti
+00000a30 mag01.989
 00000080 strcpy
+000007b0 sgenrand
 00000440 printf
 000002b0 memmove
 0000032b mknod
@@ -26,6 +32,7 @@
 00000363 getpid
 000006a0 malloc
 00000373 sleep
+00000950 random_at_most
 000002f3 pipe
 00000303 write
 0000033b fstat
@@ -38,20 +45,22 @@
 000002db fork
 0000036b sbrk
 0000037b uptime
-00000a9c __bss_start
+00000d68 __bss_start
 00000140 memset
 00000000 main
 000000b0 strcmp
 0000035b dup
+000007f0 genrand
 00000220 stat
-00000a9c _edata
-00000aa8 _end
+00000d68 _edata
+00001760 _end
 00000343 link
 000002e3 exit
 00000270 atoi
 00000100 strlen
 00000323 open
 00000160 strchr
+00000990 randomrange
 0000034b mkdir
 0000030b close
 00000610 free
diff -ruN xv6-public/mmu.h xv6-public-partb/mmu.h
--- xv6-public/mmu.h	2022-08-11 13:14:39.068070000 +0530
+++ xv6-public-partb/mmu.h	2022-10-31 11:05:47.272981074 +0530
@@ -94,6 +94,7 @@
 #define PTE_P           0x001   // Present
 #define PTE_W           0x002   // Writeable
 #define PTE_U           0x004   // User
+#define PTE_A           0x020   // Accessed
 #define PTE_PS          0x080   // Page Size
 
 // Address in page table or page directory entry
@@ -178,4 +179,4 @@
   (gate).off_31_16 = (uint)(off) >> 16;                  \
 }
 
-#endif
+#endif
\ No newline at end of file
Binary files xv6-public/mp.o and xv6-public-partb/mp.o differ
diff -ruN xv6-public/param.h xv6-public-partb/param.h
--- xv6-public/param.h	2022-08-11 13:14:39.068070000 +0530
+++ xv6-public-partb/param.h	2022-10-31 11:06:07.967323082 +0530
@@ -1,6 +1,6 @@
 #define NPROC        64  // maximum number of processes
 #define KSTACKSIZE 4096  // size of per-process kernel stack
-#define NCPU          8  // maximum number of CPUs
+#define NCPU          1  // maximum number of CPUs
 #define NOFILE       16  // open files per process
 #define NFILE       100  // open files per system
 #define NINODE       50  // maximum number of active i-nodes
@@ -11,4 +11,3 @@
 #define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       1000  // size of file system in blocks
-
Binary files xv6-public/pipe.o and xv6-public-partb/pipe.o differ
Binary files xv6-public/printf.o and xv6-public-partb/printf.o differ
diff -ruN xv6-public/proc.c xv6-public-partb/proc.c
--- xv6-public/proc.c	2022-08-11 13:14:39.068070000 +0530
+++ xv6-public-partb/proc.c	2022-10-31 11:06:24.875773094 +0530
@@ -3,9 +3,370 @@
 #include "param.h"
 #include "memlayout.h"
 #include "mmu.h"
+#include "stat.h"
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "fcntl.h"
+#include "sleeplock.h"
+#include "fs.h"
+#include "file.h"
+
+int swap_out_process_exists=0;
+int swap_in_process_exists=0;
+
+int mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm);
+
+int
+proc_close(int fd)
+{
+  struct file *f;
+
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+    return -1;
+  
+  myproc()->ofile[fd] = 0;
+  fileclose(f);
+  return 0;
+}
+
+int
+proc_write(int fd, char *p, int n)
+{
+  struct file *f;
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+    return -1;
+  return filewrite(f, p, n);
+}
+
+
+static struct inode*
+proc_create(char *path, short type, short major, short minor)
+{
+  struct inode *ip, *dp;
+  char name[DIRSIZ];
+
+  if((dp = nameiparent(path, name)) == 0)
+    return 0;
+  ilock(dp);
+
+  if((ip = dirlookup(dp, name, 0)) != 0){
+    iunlockput(dp);
+    ilock(ip);
+    if(type == T_FILE && ip->type == T_FILE)
+      return ip;
+    iunlockput(ip);
+    return 0;
+  }
+
+  if((ip = ialloc(dp->dev, type)) == 0)
+    panic("create: ialloc");
+
+  ilock(ip);
+  ip->major = major;
+  ip->minor = minor;
+  ip->nlink = 1;
+  iupdate(ip);
+
+  if(type == T_DIR){  // Create . and .. entries.
+    dp->nlink++;  // for ".."
+    iupdate(dp);
+    // No ip->nlink++ for ".": avoid cyclic ref count.
+    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
+      panic("create dots");
+  }
+
+  if(dirlink(dp, name, ip->inum) < 0)
+    panic("create: dirlink");
+
+  iunlockput(dp);
+
+  return ip;
+}
+
+
+static int
+proc_fdalloc(struct file *f)
+{
+  int fd;
+  struct proc *curproc = myproc();
+
+  for(fd = 0; fd < NOFILE; fd++){
+    if(curproc->ofile[fd] == 0){
+      curproc->ofile[fd] = f;
+      return fd;
+    }
+  }
+  return -1;
+}
+
+int proc_open(char *path, int omode){
+
+  int fd;
+  struct file *f;
+  struct inode *ip;
+
+  begin_op();
+
+  if(omode & O_CREATE){
+    ip = proc_create(path, T_FILE, 0, 0);
+    if(ip == 0){
+      end_op();
+      return -1;
+    }
+  } else {
+    if((ip = namei(path)) == 0){
+      end_op();
+      return -1;
+    }
+    ilock(ip);
+    if(ip->type == T_DIR && omode != O_RDONLY){
+      iunlockput(ip);
+      end_op();
+      return -1;
+    }
+  }
+
+  if((f = filealloc()) == 0 || (fd = proc_fdalloc(f)) < 0){
+    if(f)
+      fileclose(f);
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+  end_op();
+
+  f->type = FD_INODE;
+  f->ip = ip;
+  f->off = 0;
+  f->readable = !(omode & O_WRONLY);
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+  return fd;
+
+}
+
+void int_to_string(int x, char *c){
+  if(x==0)
+  {
+    c[0]='0';
+    c[1]='\0';
+    return;
+  }
+  int i=0;
+  while(x>0){
+    c[i]=x%10+'0';
+    i++;
+    x/=10;
+  }
+  c[i]='\0';
+
+  for(int j=0;j<i/2;j++){
+    char a=c[j];
+    c[j]=c[i-j-1];
+    c[i-j-1]=a;
+  }
+
+}
+
+struct rq{
+  struct spinlock lock;
+  struct proc* queue[NPROC];
+  int s;
+  int e;
+};
+
+//circular request queue for swapping out requests.
+struct rq rqueue;
+
+struct proc* rpop(){
+
+  acquire(&rqueue.lock);
+  if(rqueue.s==rqueue.e){
+  	release(&rqueue.lock);
+  	return 0;
+  }
+  struct proc *p=rqueue.queue[rqueue.s];
+  (rqueue.s)++;
+  (rqueue.s)%=NPROC;
+  release(&rqueue.lock);
+
+  return p;
+}
+
+int rpush(struct proc *p){
+
+  acquire(&rqueue.lock);
+  if((rqueue.e+1)%NPROC==rqueue.s){
+  	release(&rqueue.lock);
+    return 0;
+  }
+  rqueue.queue[rqueue.e]=p;
+  rqueue.e++;
+  (rqueue.e)%=NPROC;
+  release(&rqueue.lock);
+  
+  return 1;
+}
+
+//circular request queue for swapping in requests
+struct rq rqueue2;
+
+struct proc* rpop2(){
+
+	acquire(&rqueue2.lock);
+	if(rqueue2.s==rqueue2.e){
+		release(&rqueue2.lock);
+		return 0;
+	}
+	struct proc* p=rqueue2.queue[rqueue2.s];
+	(rqueue2.s)++;
+	(rqueue2.s)%=NPROC;
+	release(&rqueue2.lock);
+	return p;
+}
+
+int rpush2(struct proc* p){
+	acquire(&rqueue2.lock);
+	if((rqueue2.e+1)%NPROC==rqueue2.s){
+		release(&rqueue2.lock);
+		return 0;
+	}
+	rqueue2.queue[rqueue2.e]=p;
+	(rqueue2.e)++;
+	(rqueue2.e)%=NPROC;
+
+	release(&rqueue2.lock);
+	return 1;
+}
+
+ 
+void swap_out_process_function(){
+
+  acquire(&rqueue.lock);
+  while(rqueue.s!=rqueue.e){
+    struct proc *p=rpop();
+
+    pde_t* pd = p->pgdir;
+    for(int i=0;i<NPDENTRIES;i++){
+
+      //skip page table if accessed. chances are high, not every page table was accessed.
+      if(pd[i]&PTE_A)
+        continue;
+      //else
+      pte_t *pgtab = (pte_t*)P2V(PTE_ADDR(pd[i]));
+      for(int j=0;j<NPTENTRIES;j++){
+
+        //Skip if found
+        if((pgtab[j]&PTE_A) || !(pgtab[j]&PTE_P))
+          continue;
+        pte_t *pte=(pte_t*)P2V(PTE_ADDR(pgtab[j]));
+
+        //for file name
+        int pid=p->pid;
+        int virt = ((1<<22)*i)+((1<<12)*j);
+
+        //file name
+        char c[50];
+        int_to_string(pid,c);
+        int x=strlen(c);
+        c[x]='_';
+        int_to_string(virt,c+x+1);
+        safestrcpy(c+strlen(c),".swp",5);
+
+        // file management
+        int fd=proc_open(c, O_CREATE | O_RDWR);
+        if(fd<0){
+          cprintf("error creating or opening file: %s\n", c);
+          panic("swap_out_process");
+        }
+
+        if(proc_write(fd,(char *)pte, PGSIZE) != PGSIZE){
+          cprintf("error writing to file: %s\n", c);
+          panic("swap_out_process");
+        }
+        proc_close(fd);
+
+        kfree((char*)pte);
+        memset(&pgtab[j],0,sizeof(pgtab[j]));
+
+        //mark this page as being swapped out.
+        pgtab[j]=((pgtab[j])^(0x080));
+
+        break;
+      }
+    }
+
+  }
+
+  release(&rqueue.lock);
+  
+  struct proc *p;
+  if((p=myproc())==0)
+    panic("swap out process");
+
+  swap_out_process_exists=0;
+  p->parent = 0;
+  p->name[0] = '*';
+  p->killed = 0;
+  p->state = UNUSED;
+  sched();
+}
+
+int proc_read(int fd, int n, char *p)
+{
+  struct file *f;
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+  return -1;
+  return fileread(f, p, n);
+
+}
+
+void swap_in_process_function(){
+
+	acquire(&rqueue2.lock);
+	while(rqueue2.s!=rqueue2.e){
+		struct proc *p=rpop2();
+
+		int pid=p->pid;
+		int virt=PTE_ADDR(p->addr);
+
+		char c[50];
+	    int_to_string(pid,c);
+	    int x=strlen(c);
+	    c[x]='_';
+	    int_to_string(virt,c+x+1);
+	    safestrcpy(c+strlen(c),".swp",5);
+
+	    int fd=proc_open(c,O_RDONLY);
+	    if(fd<0){
+	    	release(&rqueue2.lock);
+	    	cprintf("could not find page file in memory: %s\n", c);
+	    	panic("swap_in_process");
+	    }
+	    char *mem=kalloc();
+	    proc_read(fd,PGSIZE,mem);
+
+	    if(mappages(p->pgdir, (void *)virt, PGSIZE, V2P(mem), PTE_W|PTE_U)<0){
+	    	release(&rqueue2.lock);
+	    	panic("mappages");
+	    }
+	    wakeup(p);
+	}
+
+    release(&rqueue2.lock);
+    struct proc *p;
+	if((p=myproc())==0)
+	  panic("swap_in_process");
+
+	swap_in_process_exists=0;
+	p->parent = 0;
+	p->name[0] = '*';
+	p->killed = 0;
+	p->state = UNUSED;
+	sched();
+
+}
 
 struct {
   struct spinlock lock;
@@ -24,6 +385,9 @@
 pinit(void)
 {
   initlock(&ptable.lock, "ptable");
+  initlock(&rqueue.lock, "rqueue");
+  initlock(&sleeping_channel_lock, "sleeping_channel");
+  initlock(&rqueue2.lock, "rqueue2");
 }
 
 // Must be called with interrupts disabled
@@ -115,11 +479,46 @@
   return p;
 }
 
+void create_kernel_process(const char *name, void (*entrypoint)()){
+    
+  struct proc *p = allocproc();
+
+  if(p == 0)
+    panic("create_kernel_process failed");
+
+  //Setting up kernel page table using setupkvm
+  if((p->pgdir = setupkvm()) == 0)
+    panic("setupkvm failed");
+
+  //This is a kernel process. Trap frame stores user space registers. We don't need to initialise tf.
+  //Also, since this doesn't need to have a userspace, we don't need to assign a size to this process.
+
+  //eip stores address of next instruction to be executed
+  p->context->eip = (uint)entrypoint;
+
+  safestrcpy(p->name, name, sizeof(p->name));
+
+  acquire(&ptable.lock);
+  p->state = RUNNABLE;
+  release(&ptable.lock);
+
+}
+
 //PAGEBREAK: 32
 // Set up first user process.
 void
 userinit(void)
 {
+  acquire(&rqueue.lock);
+  rqueue.s=0;
+  rqueue.e=0;
+  release(&rqueue.lock);
+
+  acquire(&rqueue2.lock);
+  rqueue2.s=0;
+  rqueue2.e=0;
+  release(&rqueue2.lock);
+
   struct proc *p;
   extern char _binary_initcode_start[], _binary_initcode_size[];
 
@@ -151,6 +550,7 @@
   p->state = RUNNABLE;
 
   release(&ptable.lock);
+
 }
 
 // Grow current process's memory by n bytes.
@@ -180,6 +580,7 @@
 int
 fork(void)
 {
+
   int i, pid;
   struct proc *np;
   struct proc *curproc = myproc();
@@ -227,6 +628,7 @@
 void
 exit(void)
 {
+
   struct proc *curproc = myproc();
   struct proc *p;
   int fd;
@@ -242,6 +644,7 @@
     }
   }
 
+
   begin_op();
   iput(curproc->cwd);
   end_op();
@@ -333,9 +736,36 @@
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+
+      //If the swap out process has stopped running, free its stack and name.
+      if(p->state==UNUSED && p->name[0]=='*'){
+
+        kfree(p->kstack);
+        p->kstack=0;
+        p->name[0]=0;
+        p->pid=0;
+      }
+
       if(p->state != RUNNABLE)
         continue;
 
+      for(int i=0;i<NPDENTRIES;i++){
+        //If PDE was accessed
+
+        if(((p->pgdir)[i])&PTE_P && ((p->pgdir)[i])&PTE_A){
+
+          pte_t* pgtab = (pte_t*)P2V(PTE_ADDR((p->pgdir)[i]));
+
+          for(int j=0;j<NPTENTRIES;j++){
+            if(pgtab[j]&PTE_A){
+              pgtab[j]^=PTE_A;
+            }
+          }
+
+          ((p->pgdir)[i])^=PTE_A;
+        }
+      }
+
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
@@ -365,6 +795,7 @@
 void
 sched(void)
 {
+
   int intena;
   struct proc *p = myproc();
 
@@ -531,4 +962,4 @@
     }
     cprintf("\n");
   }
-}
+}
\ No newline at end of file
diff -ruN xv6-public/proc.d xv6-public-partb/proc.d
--- xv6-public/proc.d	2022-08-13 16:28:44.467351000 +0530
+++ xv6-public-partb/proc.d	2022-10-31 11:09:05.636113185 +0530
@@ -1,2 +1,3 @@
 proc.o: proc.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h x86.h proc.h spinlock.h
+ memlayout.h mmu.h stat.h x86.h proc.h spinlock.h fcntl.h sleeplock.h \
+ fs.h file.h
diff -ruN xv6-public/proc.h xv6-public-partb/proc.h
--- xv6-public/proc.h	2022-08-11 13:14:39.068070000 +0530
+++ xv6-public-partb/proc.h	2022-10-31 11:07:00.297475113 +0530
@@ -49,10 +49,12 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int addr;                    // ADDED: Virtual address of pagefault
+
 };
 
 // Process memory is laid out contiguously, low addresses first:
 //   text
 //   original data and bss
 //   fixed-size stack
-//   expandable heap
+//   expandable heap
\ No newline at end of file
Binary files xv6-public/proc.o and xv6-public-partb/proc.o differ
diff -ruN xv6-public/random.c xv6-public-partb/random.c
--- xv6-public/random.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partb/random.c	2022-10-31 11:07:15.417031120 +0530
@@ -0,0 +1,101 @@
+/* Period parameters */  
+#define N 624
+#define M 397
+#define MATRIX_A 0x9908b0df   /* constant vector a */
+#define UPPER_MASK 0x80000000 /* most significant w-r bits */
+#define LOWER_MASK 0x7fffffff /* least significant r bits */
+
+/* Tempering parameters */   
+#define TEMPERING_MASK_B 0x9d2c5680
+#define TEMPERING_MASK_C 0xefc60000
+#define TEMPERING_SHIFT_U(y)  (y >> 11)
+#define TEMPERING_SHIFT_S(y)  (y << 7)
+#define TEMPERING_SHIFT_T(y)  (y << 15)
+#define TEMPERING_SHIFT_L(y)  (y >> 18)
+
+#define RAND_MAX 0x7fffffff
+
+static unsigned long mt[N]; /* the array for the state vector  */
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+    for (mti=1; mti<N; mti++)
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+}
+
+long /* for integer generation */
+genrand()
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+        int kk;
+
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+            sgenrand(4357); /* a default initial seed is used   */
+
+        for (kk=0;kk<N-M;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        for (;kk<N-1;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+    y ^= TEMPERING_SHIFT_U(y);
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+    y ^= TEMPERING_SHIFT_L(y);
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+}
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+
+  // Truncated division is intentional
+  return x/bin_size;
+}
+
+int randomrange(int low, int high){
+  if(high<low){
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+  return val;
+}
\ No newline at end of file
diff -ruN xv6-public/random.d xv6-public-partb/random.d
--- xv6-public/random.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partb/random.d	2022-10-31 11:08:57.335965178 +0530
@@ -0,0 +1 @@
+random.o: random.c /usr/include/stdc-predef.h
Binary files xv6-public/random.o and xv6-public-partb/random.o differ
Binary files xv6-public/_rm and xv6-public-partb/_rm differ
diff -ruN xv6-public/rm.asm xv6-public-partb/rm.asm
--- xv6-public/rm.asm	2022-08-13 16:28:54.676227000 +0530
+++ xv6-public-partb/rm.asm	2022-10-31 11:08:59.833213183 +0530
@@ -59,7 +59,7 @@
       printf(2, "rm: %s failed to delete\n", argv[i]);
   50:	50                   	push   %eax
   51:	ff 33                	pushl  (%ebx)
-  53:	68 bc 07 00 00       	push   $0x7bc
+  53:	68 f4 09 00 00       	push   $0x9f4
   58:	6a 02                	push   $0x2
   5a:	e8 e1 03 00 00       	call   440 <printf>
       break;
@@ -68,7 +68,7 @@
     printf(2, "Usage: rm files...\n");
   64:	52                   	push   %edx
   65:	52                   	push   %edx
-  66:	68 a8 07 00 00       	push   $0x7a8
+  66:	68 e0 09 00 00       	push   $0x9e0
   6b:	6a 02                	push   $0x2
   6d:	e8 ce 03 00 00       	call   440 <printf>
     exit();
@@ -217,6 +217,7 @@
  151:	89 d7                	mov    %edx,%edi
  153:	fc                   	cld    
  154:	f3 aa                	rep stos %al,%es:(%edi)
+
   stosb(dst, c, n);
   return dst;
 }
@@ -468,7 +469,6 @@
  2d1:	39 f8                	cmp    %edi,%eax
  2d3:	75 fb                	jne    2d0 <memmove+0x20>
   return vdst;
-}
  2d5:	5e                   	pop    %esi
  2d6:	89 d0                	mov    %edx,%eax
  2d8:	5f                   	pop    %edi
@@ -476,132 +476,106 @@
  2da:	c3                   	ret    
 
 000002db <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  2db:	b8 01 00 00 00       	mov    $0x1,%eax
  2e0:	cd 40                	int    $0x40
  2e2:	c3                   	ret    
 
 000002e3 <exit>:
-SYSCALL(exit)
  2e3:	b8 02 00 00 00       	mov    $0x2,%eax
  2e8:	cd 40                	int    $0x40
  2ea:	c3                   	ret    
 
 000002eb <wait>:
-SYSCALL(wait)
  2eb:	b8 03 00 00 00       	mov    $0x3,%eax
  2f0:	cd 40                	int    $0x40
  2f2:	c3                   	ret    
 
 000002f3 <pipe>:
-SYSCALL(pipe)
  2f3:	b8 04 00 00 00       	mov    $0x4,%eax
  2f8:	cd 40                	int    $0x40
  2fa:	c3                   	ret    
 
 000002fb <read>:
-SYSCALL(read)
  2fb:	b8 05 00 00 00       	mov    $0x5,%eax
  300:	cd 40                	int    $0x40
  302:	c3                   	ret    
 
 00000303 <write>:
-SYSCALL(write)
  303:	b8 10 00 00 00       	mov    $0x10,%eax
  308:	cd 40                	int    $0x40
  30a:	c3                   	ret    
 
 0000030b <close>:
-SYSCALL(close)
  30b:	b8 15 00 00 00       	mov    $0x15,%eax
  310:	cd 40                	int    $0x40
  312:	c3                   	ret    
 
 00000313 <kill>:
-SYSCALL(kill)
  313:	b8 06 00 00 00       	mov    $0x6,%eax
  318:	cd 40                	int    $0x40
  31a:	c3                   	ret    
 
 0000031b <exec>:
-SYSCALL(exec)
  31b:	b8 07 00 00 00       	mov    $0x7,%eax
  320:	cd 40                	int    $0x40
  322:	c3                   	ret    
 
 00000323 <open>:
-SYSCALL(open)
  323:	b8 0f 00 00 00       	mov    $0xf,%eax
  328:	cd 40                	int    $0x40
  32a:	c3                   	ret    
 
 0000032b <mknod>:
-SYSCALL(mknod)
  32b:	b8 11 00 00 00       	mov    $0x11,%eax
  330:	cd 40                	int    $0x40
  332:	c3                   	ret    
 
 00000333 <unlink>:
-SYSCALL(unlink)
  333:	b8 12 00 00 00       	mov    $0x12,%eax
  338:	cd 40                	int    $0x40
  33a:	c3                   	ret    
 
 0000033b <fstat>:
-SYSCALL(fstat)
  33b:	b8 08 00 00 00       	mov    $0x8,%eax
  340:	cd 40                	int    $0x40
  342:	c3                   	ret    
 
 00000343 <link>:
-SYSCALL(link)
  343:	b8 13 00 00 00       	mov    $0x13,%eax
  348:	cd 40                	int    $0x40
  34a:	c3                   	ret    
 
 0000034b <mkdir>:
-SYSCALL(mkdir)
  34b:	b8 14 00 00 00       	mov    $0x14,%eax
  350:	cd 40                	int    $0x40
  352:	c3                   	ret    
 
 00000353 <chdir>:
-SYSCALL(chdir)
  353:	b8 09 00 00 00       	mov    $0x9,%eax
  358:	cd 40                	int    $0x40
  35a:	c3                   	ret    
 
 0000035b <dup>:
-SYSCALL(dup)
  35b:	b8 0a 00 00 00       	mov    $0xa,%eax
  360:	cd 40                	int    $0x40
  362:	c3                   	ret    
 
 00000363 <getpid>:
-SYSCALL(getpid)
  363:	b8 0b 00 00 00       	mov    $0xb,%eax
  368:	cd 40                	int    $0x40
  36a:	c3                   	ret    
 
 0000036b <sbrk>:
-SYSCALL(sbrk)
  36b:	b8 0c 00 00 00       	mov    $0xc,%eax
  370:	cd 40                	int    $0x40
  372:	c3                   	ret    
 
 00000373 <sleep>:
-SYSCALL(sleep)
  373:	b8 0d 00 00 00       	mov    $0xd,%eax
  378:	cd 40                	int    $0x40
  37a:	c3                   	ret    
 
 0000037b <uptime>:
-SYSCALL(uptime)
  37b:	b8 0e 00 00 00       	mov    $0xe,%eax
  380:	cd 40                	int    $0x40
  382:	c3                   	ret    
@@ -659,7 +633,7 @@
  3c2:	31 d2                	xor    %edx,%edx
  3c4:	89 cf                	mov    %ecx,%edi
  3c6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3c9:	0f b6 92 dc 07 00 00 	movzbl 0x7dc(%edx),%edx
+ 3c9:	0f b6 92 14 0a 00 00 	movzbl 0xa14(%edx),%edx
  3d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
  3d3:	89 d8                	mov    %ebx,%eax
  3d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
@@ -930,7 +904,7 @@
  5c1:	8b 5d 08             	mov    0x8(%ebp),%ebx
  5c4:	eb 1a                	jmp    5e0 <printf+0x1a0>
           s = "(null)";
- 5c6:	bb d5 07 00 00       	mov    $0x7d5,%ebx
+ 5c6:	bb 0d 0a 00 00       	mov    $0xa0d,%ebx
         while(*s != 0){
  5cb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  5ce:	b8 28 00 00 00       	mov    $0x28,%eax
@@ -976,7 +950,7 @@
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 615:	a1 94 0a 00 00       	mov    0xa94,%eax
+ 615:	a1 60 0d 00 00       	mov    0xd60,%eax
 {
  61a:	89 e5                	mov    %esp,%ebp
  61c:	57                   	push   %edi
@@ -1032,7 +1006,7 @@
 }
  661:	5b                   	pop    %ebx
   freep = p;
- 662:	a3 94 0a 00 00       	mov    %eax,0xa94
+ 662:	a3 60 0d 00 00       	mov    %eax,0xd60
 }
  667:	5e                   	pop    %esi
  668:	5f                   	pop    %edi
@@ -1055,7 +1029,7 @@
     p->s.size += bp->s.size;
  687:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 68a:	a3 94 0a 00 00       	mov    %eax,0xa94
+ 68a:	a3 60 0d 00 00       	mov    %eax,0xd60
     p->s.size += bp->s.size;
  68f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
@@ -1089,7 +1063,7 @@
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  6ad:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 6b0:	8b 3d 94 0a 00 00    	mov    0xa94,%edi
+ 6b0:	8b 3d 60 0d 00 00    	mov    0xd60,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  6b6:	8d 70 07             	lea    0x7(%eax),%esi
  6b9:	c1 ee 03             	shr    $0x3,%esi
@@ -1120,7 +1094,7 @@
  6f2:	8b 4a 04             	mov    0x4(%edx),%ecx
  6f5:	39 f1                	cmp    %esi,%ecx
  6f7:	73 4f                	jae    748 <malloc+0xa8>
- 6f9:	8b 3d 94 0a 00 00    	mov    0xa94,%edi
+ 6f9:	8b 3d 60 0d 00 00    	mov    0xd60,%edi
  6ff:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
@@ -1146,7 +1120,7 @@
  721:	50                   	push   %eax
  722:	e8 e9 fe ff ff       	call   610 <free>
   return freep;
- 727:	a1 94 0a 00 00       	mov    0xa94,%eax
+ 727:	a1 60 0d 00 00       	mov    0xd60,%eax
       if((p = morecore(nunits)) == 0)
  72c:	83 c4 10             	add    $0x10,%esp
  72f:	85 c0                	test   %eax,%eax
@@ -1178,7 +1152,7 @@
         p->s.size = nunits;
  754:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 757:	a3 94 0a 00 00       	mov    %eax,0xa94
+ 757:	a3 60 0d 00 00       	mov    %eax,0xd60
 }
  75c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
@@ -1192,17 +1166,17 @@
  767:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  76e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 770:	c7 05 94 0a 00 00 98 	movl   $0xa98,0xa94
- 777:	0a 00 00 
+ 770:	c7 05 60 0d 00 00 64 	movl   $0xd64,0xd60
+ 777:	0d 00 00 
     base.s.size = 0;
- 77a:	bf 98 0a 00 00       	mov    $0xa98,%edi
+ 77a:	bf 64 0d 00 00       	mov    $0xd64,%edi
     base.s.ptr = freep = prevp = &base;
- 77f:	c7 05 98 0a 00 00 98 	movl   $0xa98,0xa98
- 786:	0a 00 00 
+ 77f:	c7 05 64 0d 00 00 64 	movl   $0xd64,0xd64
+ 786:	0d 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
  789:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 78b:	c7 05 9c 0a 00 00 00 	movl   $0x0,0xa9c
+ 78b:	c7 05 68 0d 00 00 00 	movl   $0x0,0xd68
  792:	00 00 00 
     if(p->s.size >= nunits){
  795:	e9 36 ff ff ff       	jmp    6d0 <malloc+0x30>
@@ -1211,3 +1185,279 @@
  7a0:	8b 0a                	mov    (%edx),%ecx
  7a2:	89 08                	mov    %ecx,(%eax)
  7a4:	eb b1                	jmp    757 <malloc+0xb7>
+ 7a6:	66 90                	xchg   %ax,%ax
+ 7a8:	66 90                	xchg   %ax,%ax
+ 7aa:	66 90                	xchg   %ax,%ax
+ 7ac:	66 90                	xchg   %ax,%ax
+ 7ae:	66 90                	xchg   %ax,%ax
+
+000007b0 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 7b0:	f3 0f 1e fb          	endbr32 
+ 7b4:	55                   	push   %ebp
+ 7b5:	b8 84 0d 00 00       	mov    $0xd84,%eax
+ 7ba:	89 e5                	mov    %esp,%ebp
+ 7bc:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 7bf:	89 15 80 0d 00 00    	mov    %edx,0xd80
+    for (mti=1; mti<N; mti++)
+ 7c5:	eb 0c                	jmp    7d3 <sgenrand+0x23>
+ 7c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7ce:	66 90                	xchg   %ax,%ax
+ 7d0:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 7d3:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 7d9:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 7db:	3d 3c 17 00 00       	cmp    $0x173c,%eax
+ 7e0:	75 ee                	jne    7d0 <sgenrand+0x20>
+ 7e2:	c7 05 5c 0d 00 00 70 	movl   $0x270,0xd5c
+ 7e9:	02 00 00 
+}
+ 7ec:	5d                   	pop    %ebp
+ 7ed:	c3                   	ret    
+ 7ee:	66 90                	xchg   %ax,%ax
+
+000007f0 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 7f0:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 7f4:	a1 5c 0d 00 00       	mov    0xd5c,%eax
+ 7f9:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 7fe:	7f 3c                	jg     83c <genrand+0x4c>
+ 800:	8d 50 01             	lea    0x1(%eax),%edx
+ 803:	8b 04 85 80 0d 00 00 	mov    0xd80(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 80a:	89 15 5c 0d 00 00    	mov    %edx,0xd5c
+    y ^= TEMPERING_SHIFT_U(y);
+ 810:	89 c2                	mov    %eax,%edx
+ 812:	c1 ea 0b             	shr    $0xb,%edx
+ 815:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 817:	89 d0                	mov    %edx,%eax
+ 819:	c1 e0 07             	shl    $0x7,%eax
+ 81c:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 821:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 823:	89 d0                	mov    %edx,%eax
+ 825:	c1 e0 0f             	shl    $0xf,%eax
+ 828:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 82d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 82f:	89 c2                	mov    %eax,%edx
+ 831:	c1 ea 12             	shr    $0x12,%edx
+ 834:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 836:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 83b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 83c:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 841:	0f 84 d2 00 00 00    	je     919 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 847:	31 c0                	xor    %eax,%eax
+ 849:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 850:	8b 0c 85 80 0d 00 00 	mov    0xd80(,%eax,4),%ecx
+ 857:	83 c0 01             	add    $0x1,%eax
+ 85a:	8b 14 85 80 0d 00 00 	mov    0xd80(,%eax,4),%edx
+ 861:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 867:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 86d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 86f:	89 d1                	mov    %edx,%ecx
+ 871:	83 e2 01             	and    $0x1,%edx
+ 874:	d1 e9                	shr    %ecx
+ 876:	33 0c 85 b0 13 00 00 	xor    0x13b0(,%eax,4),%ecx
+ 87d:	33 0c 95 28 0a 00 00 	xor    0xa28(,%edx,4),%ecx
+ 884:	89 0c 85 7c 0d 00 00 	mov    %ecx,0xd7c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 88b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 890:	75 be                	jne    850 <genrand+0x60>
+ 892:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 898:	8b 0c 85 80 0d 00 00 	mov    0xd80(,%eax,4),%ecx
+ 89f:	83 c0 01             	add    $0x1,%eax
+ 8a2:	8b 14 85 80 0d 00 00 	mov    0xd80(,%eax,4),%edx
+ 8a9:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8af:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8b5:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8b7:	89 d1                	mov    %edx,%ecx
+ 8b9:	83 e2 01             	and    $0x1,%edx
+ 8bc:	d1 e9                	shr    %ecx
+ 8be:	33 0c 85 f0 09 00 00 	xor    0x9f0(,%eax,4),%ecx
+ 8c5:	33 0c 95 28 0a 00 00 	xor    0xa28(,%edx,4),%ecx
+ 8cc:	89 0c 85 7c 0d 00 00 	mov    %ecx,0xd7c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 8d3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8d8:	75 be                	jne    898 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 8da:	a1 80 0d 00 00       	mov    0xd80,%eax
+ 8df:	8b 0d 3c 17 00 00    	mov    0x173c,%ecx
+ 8e5:	89 c2                	mov    %eax,%edx
+ 8e7:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8ed:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8f3:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8f5:	89 ca                	mov    %ecx,%edx
+ 8f7:	83 e1 01             	and    $0x1,%ecx
+ 8fa:	d1 ea                	shr    %edx
+ 8fc:	33 15 b0 13 00 00    	xor    0x13b0,%edx
+ 902:	33 14 8d 28 0a 00 00 	xor    0xa28(,%ecx,4),%edx
+ 909:	89 15 3c 17 00 00    	mov    %edx,0x173c
+ 90f:	ba 01 00 00 00       	mov    $0x1,%edx
+ 914:	e9 f1 fe ff ff       	jmp    80a <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ 919:	b8 84 0d 00 00       	mov    $0xd84,%eax
+ 91e:	b9 3c 17 00 00       	mov    $0x173c,%ecx
+ 923:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 928:	c7 05 80 0d 00 00 05 	movl   $0x1105,0xd80
+ 92f:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 932:	eb 07                	jmp    93b <genrand+0x14b>
+ 934:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 938:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 93b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 941:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 943:	39 c1                	cmp    %eax,%ecx
+ 945:	75 f1                	jne    938 <genrand+0x148>
+ 947:	e9 fb fe ff ff       	jmp    847 <genrand+0x57>
+ 94c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000950 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 950:	f3 0f 1e fb          	endbr32 
+ 954:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 955:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 957:	89 e5                	mov    %esp,%ebp
+ 959:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 95a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 95d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 95e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 963:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 966:	89 d8                	mov    %ebx,%eax
+ 968:	f7 f1                	div    %ecx
+ 96a:	89 c6                	mov    %eax,%esi
+ 96c:	29 d3                	sub    %edx,%ebx
+ 96e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ 970:	e8 7b fe ff ff       	call   7f0 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 975:	39 d8                	cmp    %ebx,%eax
+ 977:	73 f7                	jae    970 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 979:	31 d2                	xor    %edx,%edx
+}
+ 97b:	5b                   	pop    %ebx
+  return x/bin_size;
+ 97c:	f7 f6                	div    %esi
+}
+ 97e:	5e                   	pop    %esi
+ 97f:	5d                   	pop    %ebp
+ 980:	c3                   	ret    
+ 981:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 988:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 98f:	90                   	nop
+
+00000990 <randomrange>:
+
+int randomrange(int low, int high){
+ 990:	f3 0f 1e fb          	endbr32 
+ 994:	55                   	push   %ebp
+ 995:	89 e5                	mov    %esp,%ebp
+ 997:	57                   	push   %edi
+ 998:	56                   	push   %esi
+ 999:	53                   	push   %ebx
+ 99a:	83 ec 0c             	sub    $0xc,%esp
+ 99d:	8b 75 08             	mov    0x8(%ebp),%esi
+ 9a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 9a3:	39 f0                	cmp    %esi,%eax
+ 9a5:	7d 06                	jge    9ad <randomrange+0x1d>
+ 9a7:	89 f2                	mov    %esi,%edx
+ 9a9:	89 c6                	mov    %eax,%esi
+ 9ab:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 9ad:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 9af:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 9b4:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 9b6:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 9b9:	89 d8                	mov    %ebx,%eax
+ 9bb:	f7 f1                	div    %ecx
+ 9bd:	89 c7                	mov    %eax,%edi
+ 9bf:	29 d3                	sub    %edx,%ebx
+ 9c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ 9c8:	e8 23 fe ff ff       	call   7f0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 9cd:	39 d8                	cmp    %ebx,%eax
+ 9cf:	73 f7                	jae    9c8 <randomrange+0x38>
+  return x/bin_size;
+ 9d1:	31 d2                	xor    %edx,%edx
+  return val;
+ 9d3:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ 9d6:	f7 f7                	div    %edi
+ 9d8:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ 9d9:	01 f0                	add    %esi,%eax
+ 9db:	5e                   	pop    %esi
+ 9dc:	5f                   	pop    %edi
+ 9dd:	5d                   	pop    %ebp
+ 9de:	c3                   	ret    
Binary files xv6-public/rm.o and xv6-public-partb/rm.o differ
diff -ruN xv6-public/rm.sym xv6-public-partb/rm.sym
--- xv6-public/rm.sym	2022-08-13 16:28:54.688223000 +0530
+++ xv6-public-partb/rm.sym	2022-10-31 11:08:59.861227182 +0530
@@ -1,7 +1,8 @@
 00000000 .text
-000007a8 .rodata
-000007f0 .eh_frame
-00000a94 .bss
+000009e0 .rodata
+00000a30 .eh_frame
+00000d5c .data
+00000d60 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -14,11 +15,16 @@
 00000000 ulib.c
 00000000 printf.c
 00000390 printint
-000007dc digits.1085
+00000a14 digits.1088
 00000000 umalloc.c
-00000a94 freep
-00000a98 base
+00000d60 freep
+00000d64 base
+00000000 random.c
+00000d80 mt
+00000d5c mti
+00000a28 mag01.989
 00000080 strcpy
+000007b0 sgenrand
 00000440 printf
 000002b0 memmove
 0000032b mknod
@@ -26,6 +32,7 @@
 00000363 getpid
 000006a0 malloc
 00000373 sleep
+00000950 random_at_most
 000002f3 pipe
 00000303 write
 0000033b fstat
@@ -38,20 +45,22 @@
 000002db fork
 0000036b sbrk
 0000037b uptime
-00000a94 __bss_start
+00000d60 __bss_start
 00000140 memset
 00000000 main
 000000b0 strcmp
 0000035b dup
+000007f0 genrand
 00000220 stat
-00000a94 _edata
-00000aa0 _end
+00000d60 _edata
+00001740 _end
 00000343 link
 000002e3 exit
 00000270 atoi
 00000100 strlen
 00000323 open
 00000160 strchr
+00000990 randomrange
 0000034b mkdir
 0000030b close
 00000610 free
Binary files xv6-public/_sh and xv6-public-partb/_sh differ
diff -ruN xv6-public/sh.asm xv6-public-partb/sh.asm
--- xv6-public/sh.asm	2022-08-13 16:28:54.932145000 +0530
+++ xv6-public-partb/sh.asm	2022-10-31 11:09:00.289441184 +0530
@@ -33,7 +33,7 @@
   while((fd = open("console", O_RDWR)) >= 0){
       29:	83 ec 08             	sub    $0x8,%esp
       2c:	6a 02                	push   $0x2
-      2e:	68 f9 12 00 00       	push   $0x12f9
+      2e:	68 31 15 00 00       	push   $0x1531
       33:	e8 9b 0d 00 00       	call   dd3 <open>
       38:	83 c4 10             	add    $0x10,%esp
       3b:	85 c0                	test   %eax,%eax
@@ -46,7 +46,7 @@
   // Read and run input commands.
   while(getcmd(buf, sizeof(buf)) >= 0){
     if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
-      48:	80 3d 42 19 00 00 20 	cmpb   $0x20,0x1942
+      48:	80 3d 02 1c 00 00 20 	cmpb   $0x20,0x1c02
       4f:	74 51                	je     a2 <main+0xa2>
       51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 int
@@ -67,27 +67,27 @@
   while(getcmd(buf, sizeof(buf)) >= 0){
       73:	83 ec 08             	sub    $0x8,%esp
       76:	6a 64                	push   $0x64
-      78:	68 40 19 00 00       	push   $0x1940
+      78:	68 00 1c 00 00       	push   $0x1c00
       7d:	e8 8e 00 00 00       	call   110 <getcmd>
       82:	83 c4 10             	add    $0x10,%esp
       85:	85 c0                	test   %eax,%eax
       87:	78 14                	js     9d <main+0x9d>
     if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
-      89:	80 3d 40 19 00 00 63 	cmpb   $0x63,0x1940
+      89:	80 3d 00 1c 00 00 63 	cmpb   $0x63,0x1c00
       90:	75 c6                	jne    58 <main+0x58>
-      92:	80 3d 41 19 00 00 64 	cmpb   $0x64,0x1941
+      92:	80 3d 01 1c 00 00 64 	cmpb   $0x64,0x1c01
       99:	75 bd                	jne    58 <main+0x58>
       9b:	eb ab                	jmp    48 <main+0x48>
   exit();
       9d:	e8 f1 0c 00 00       	call   d93 <exit>
       buf[strlen(buf)-1] = 0;  // chop \n
       a2:	83 ec 0c             	sub    $0xc,%esp
-      a5:	68 40 19 00 00       	push   $0x1940
+      a5:	68 00 1c 00 00       	push   $0x1c00
       aa:	e8 01 0b 00 00       	call   bb0 <strlen>
       if(chdir(buf+3) < 0)
-      af:	c7 04 24 43 19 00 00 	movl   $0x1943,(%esp)
+      af:	c7 04 24 03 1c 00 00 	movl   $0x1c03,(%esp)
       buf[strlen(buf)-1] = 0;  // chop \n
-      b6:	c6 80 3f 19 00 00 00 	movb   $0x0,0x193f(%eax)
+      b6:	c6 80 ff 1b 00 00 00 	movb   $0x0,0x1bff(%eax)
       if(chdir(buf+3) < 0)
       bd:	e8 41 0d 00 00       	call   e03 <chdir>
       c2:	83 c4 10             	add    $0x10,%esp
@@ -95,8 +95,8 @@
       c7:	79 aa                	jns    73 <main+0x73>
         printf(2, "cannot cd %s\n", buf+3);
       c9:	50                   	push   %eax
-      ca:	68 43 19 00 00       	push   $0x1943
-      cf:	68 01 13 00 00       	push   $0x1301
+      ca:	68 03 1c 00 00       	push   $0x1c03
+      cf:	68 39 15 00 00       	push   $0x1539
       d4:	6a 02                	push   $0x2
       d6:	e8 15 0e 00 00       	call   ef0 <printf>
       db:	83 c4 10             	add    $0x10,%esp
@@ -110,13 +110,13 @@
       ec:	eb 85                	jmp    73 <main+0x73>
       runcmd(parsecmd(buf));
       ee:	83 ec 0c             	sub    $0xc,%esp
-      f1:	68 40 19 00 00       	push   $0x1940
+      f1:	68 00 1c 00 00       	push   $0x1c00
       f6:	e8 c5 09 00 00       	call   ac0 <parsecmd>
       fb:	89 04 24             	mov    %eax,(%esp)
       fe:	e8 7d 00 00 00       	call   180 <runcmd>
     panic("fork");
      103:	83 ec 0c             	sub    $0xc,%esp
-     106:	68 82 12 00 00       	push   $0x1282
+     106:	68 ba 14 00 00       	push   $0x14ba
      10b:	e8 50 00 00 00       	call   160 <panic>
 
 00000110 <getcmd>:
@@ -130,7 +130,7 @@
      11c:	8b 5d 08             	mov    0x8(%ebp),%ebx
   printf(2, "$ ");
      11f:	83 ec 08             	sub    $0x8,%esp
-     122:	68 58 12 00 00       	push   $0x1258
+     122:	68 90 14 00 00       	push   $0x1490
      127:	6a 02                	push   $0x2
      129:	e8 c2 0d 00 00       	call   ef0 <printf>
   memset(buf, 0, nbuf);
@@ -170,7 +170,7 @@
      167:	83 ec 0c             	sub    $0xc,%esp
   printf(2, "%s\n", s);
      16a:	ff 75 08             	pushl  0x8(%ebp)
-     16d:	68 f5 12 00 00       	push   $0x12f5
+     16d:	68 2d 15 00 00       	push   $0x152d
      172:	6a 02                	push   $0x2
      174:	e8 77 0d 00 00       	call   ef0 <printf>
   exit();
@@ -192,7 +192,7 @@
      192:	83 3b 05             	cmpl   $0x5,(%ebx)
      195:	0f 87 04 01 00 00    	ja     29f <runcmd+0x11f>
      19b:	8b 03                	mov    (%ebx),%eax
-     19d:	3e ff 24 85 10 13 00 	notrack jmp *0x1310(,%eax,4)
+     19d:	3e ff 24 85 48 15 00 	notrack jmp *0x1548(,%eax,4)
      1a4:	00 
     if(pipe(p) < 0)
      1a5:	83 ec 0c             	sub    $0xc,%esp
@@ -258,7 +258,7 @@
     printf(2, "exec %s failed\n", ecmd->argv[0]);
      23c:	83 c4 0c             	add    $0xc,%esp
      23f:	ff 73 04             	pushl  0x4(%ebx)
-     242:	68 62 12 00 00       	push   $0x1262
+     242:	68 9a 14 00 00       	push   $0x149a
      247:	6a 02                	push   $0x2
      249:	e8 a2 0c 00 00       	call   ef0 <printf>
     break;
@@ -297,19 +297,19 @@
      29a:	e8 e1 fe ff ff       	call   180 <runcmd>
     panic("runcmd");
      29f:	83 ec 0c             	sub    $0xc,%esp
-     2a2:	68 5b 12 00 00       	push   $0x125b
+     2a2:	68 93 14 00 00       	push   $0x1493
      2a7:	e8 b4 fe ff ff       	call   160 <panic>
       printf(2, "open %s failed\n", rcmd->file);
      2ac:	51                   	push   %ecx
      2ad:	ff 73 08             	pushl  0x8(%ebx)
-     2b0:	68 72 12 00 00       	push   $0x1272
+     2b0:	68 aa 14 00 00       	push   $0x14aa
      2b5:	6a 02                	push   $0x2
      2b7:	e8 34 0c 00 00       	call   ef0 <printf>
       exit();
      2bc:	e8 d2 0a 00 00       	call   d93 <exit>
       panic("pipe");
      2c1:	83 ec 0c             	sub    $0xc,%esp
-     2c4:	68 87 12 00 00       	push   $0x1287
+     2c4:	68 bf 14 00 00       	push   $0x14bf
      2c9:	e8 92 fe ff ff       	call   160 <panic>
       close(1);
      2ce:	83 ec 0c             	sub    $0xc,%esp
@@ -353,7 +353,7 @@
      325:	e8 56 fe ff ff       	call   180 <runcmd>
     panic("fork");
      32a:	83 ec 0c             	sub    $0xc,%esp
-     32d:	68 82 12 00 00       	push   $0x1282
+     32d:	68 ba 14 00 00       	push   $0x14ba
      332:	e8 29 fe ff ff       	call   160 <panic>
      337:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      33e:	66 90                	xchg   %ax,%ax
@@ -375,7 +375,7 @@
      355:	c3                   	ret    
     panic("fork");
      356:	83 ec 0c             	sub    $0xc,%esp
-     359:	68 82 12 00 00       	push   $0x1282
+     359:	68 ba 14 00 00       	push   $0x14ba
      35e:	e8 fd fd ff ff       	call   160 <panic>
      363:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -629,7 +629,7 @@
      4d7:	0f be 07             	movsbl (%edi),%eax
      4da:	83 ec 08             	sub    $0x8,%esp
      4dd:	50                   	push   %eax
-     4de:	68 20 19 00 00       	push   $0x1920
+     4de:	68 e8 1b 00 00       	push   $0x1be8
      4e3:	e8 28 07 00 00       	call   c10 <strchr>
      4e8:	83 c4 10             	add    $0x10,%esp
      4eb:	85 c0                	test   %eax,%eax
@@ -674,7 +674,7 @@
      527:	0f be 07             	movsbl (%edi),%eax
      52a:	83 ec 08             	sub    $0x8,%esp
      52d:	50                   	push   %eax
-     52e:	68 20 19 00 00       	push   $0x1920
+     52e:	68 e8 1b 00 00       	push   $0x1be8
      533:	e8 d8 06 00 00       	call   c10 <strchr>
      538:	83 c4 10             	add    $0x10,%esp
      53b:	85 c0                	test   %eax,%eax
@@ -708,7 +708,7 @@
      568:	0f be 07             	movsbl (%edi),%eax
      56b:	83 ec 08             	sub    $0x8,%esp
      56e:	50                   	push   %eax
-     56f:	68 18 19 00 00       	push   $0x1918
+     56f:	68 e0 1b 00 00       	push   $0x1be0
      574:	e8 97 06 00 00       	call   c10 <strchr>
      579:	83 c4 10             	add    $0x10,%esp
      57c:	85 c0                	test   %eax,%eax
@@ -722,7 +722,7 @@
      58a:	83 ec 08             	sub    $0x8,%esp
      58d:	0f be f0             	movsbl %al,%esi
      590:	56                   	push   %esi
-     591:	68 20 19 00 00       	push   $0x1920
+     591:	68 e8 1b 00 00       	push   $0x1be8
      596:	e8 75 06 00 00       	call   c10 <strchr>
      59b:	83 c4 10             	add    $0x10,%esp
      59e:	85 c0                	test   %eax,%eax
@@ -803,7 +803,7 @@
      637:	0f be 03             	movsbl (%ebx),%eax
      63a:	83 ec 08             	sub    $0x8,%esp
      63d:	50                   	push   %eax
-     63e:	68 20 19 00 00       	push   $0x1920
+     63e:	68 e8 1b 00 00       	push   $0x1be8
      643:	e8 c8 05 00 00       	call   c10 <strchr>
      648:	83 c4 10             	add    $0x10,%esp
      64b:	85 c0                	test   %eax,%eax
@@ -867,7 +867,7 @@
      6a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
      6a7:	90                   	nop
      6a8:	83 ec 04             	sub    $0x4,%esp
-     6ab:	68 a9 12 00 00       	push   $0x12a9
+     6ab:	68 e1 14 00 00       	push   $0x14e1
      6b0:	53                   	push   %ebx
      6b1:	56                   	push   %esi
      6b2:	e8 59 ff ff ff       	call   610 <peek>
@@ -939,7 +939,7 @@
      732:	c3                   	ret    
       panic("missing file for redirection");
      733:	83 ec 0c             	sub    $0xc,%esp
-     736:	68 8c 12 00 00       	push   $0x128c
+     736:	68 c4 14 00 00       	push   $0x14c4
      73b:	e8 20 fa ff ff       	call   160 <panic>
 
 00000740 <parseexec>:
@@ -964,7 +964,7 @@
   struct cmd *ret;
 
   if(peek(ps, es, "("))
-     753:	68 ac 12 00 00       	push   $0x12ac
+     753:	68 e4 14 00 00       	push   $0x14e4
      758:	57                   	push   %edi
      759:	56                   	push   %esi
      75a:	e8 b1 fe ff ff       	call   610 <peek>
@@ -1011,7 +1011,7 @@
      7a0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   while(!peek(ps, es, "|)&;")){
      7a3:	83 ec 04             	sub    $0x4,%esp
-     7a6:	68 c3 12 00 00       	push   $0x12c3
+     7a6:	68 fb 14 00 00       	push   $0x14fb
      7ab:	57                   	push   %edi
      7ac:	56                   	push   %esi
      7ad:	e8 5e fe ff ff       	call   610 <peek>
@@ -1046,7 +1046,7 @@
      7eb:	75 a3                	jne    790 <parseexec+0x50>
       panic("too many args");
      7ed:	83 ec 0c             	sub    $0xc,%esp
-     7f0:	68 b5 12 00 00       	push   $0x12b5
+     7f0:	68 ed 14 00 00       	push   $0x14ed
      7f5:	e8 66 f9 ff ff       	call   160 <panic>
      7fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     return parseblock(ps, es);
@@ -1086,7 +1086,7 @@
      83e:	c3                   	ret    
       panic("syntax");
      83f:	83 ec 0c             	sub    $0xc,%esp
-     842:	68 ae 12 00 00       	push   $0x12ae
+     842:	68 e6 14 00 00       	push   $0x14e6
      847:	e8 14 f9 ff ff       	call   160 <panic>
      84c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
@@ -1107,7 +1107,7 @@
      865:	e8 d6 fe ff ff       	call   740 <parseexec>
   if(peek(ps, es, "|")){
      86a:	83 c4 0c             	add    $0xc,%esp
-     86d:	68 c8 12 00 00       	push   $0x12c8
+     86d:	68 00 15 00 00       	push   $0x1500
   cmd = parseexec(ps, es);
      872:	89 c3                	mov    %eax,%ebx
   if(peek(ps, es, "|")){
@@ -1186,7 +1186,7 @@
      8fe:	89 c3                	mov    %eax,%ebx
   while(peek(ps, es, "&")){
      900:	83 ec 04             	sub    $0x4,%esp
-     903:	68 ca 12 00 00       	push   $0x12ca
+     903:	68 02 15 00 00       	push   $0x1502
      908:	57                   	push   %edi
      909:	56                   	push   %esi
      90a:	e8 01 fd ff ff       	call   610 <peek>
@@ -1195,7 +1195,7 @@
      914:	75 d2                	jne    8e8 <parseline+0x28>
   if(peek(ps, es, ";")){
      916:	83 ec 04             	sub    $0x4,%esp
-     919:	68 c6 12 00 00       	push   $0x12c6
+     919:	68 fe 14 00 00       	push   $0x14fe
      91e:	57                   	push   %edi
      91f:	56                   	push   %esi
      920:	e8 eb fc ff ff       	call   610 <peek>
@@ -1249,7 +1249,7 @@
      97d:	8b 5d 08             	mov    0x8(%ebp),%ebx
      980:	8b 75 0c             	mov    0xc(%ebp),%esi
   if(!peek(ps, es, "("))
-     983:	68 ac 12 00 00       	push   $0x12ac
+     983:	68 e4 14 00 00       	push   $0x14e4
      988:	56                   	push   %esi
      989:	53                   	push   %ebx
      98a:	e8 81 fc ff ff       	call   610 <peek>
@@ -1270,7 +1270,7 @@
      9a5:	e8 16 ff ff ff       	call   8c0 <parseline>
   if(!peek(ps, es, ")"))
      9aa:	83 c4 0c             	add    $0xc,%esp
-     9ad:	68 e8 12 00 00       	push   $0x12e8
+     9ad:	68 20 15 00 00       	push   $0x1520
   cmd = parseline(ps, es);
      9b2:	89 c7                	mov    %eax,%edi
   if(!peek(ps, es, ")"))
@@ -1301,11 +1301,11 @@
      9df:	c3                   	ret    
     panic("parseblock");
      9e0:	83 ec 0c             	sub    $0xc,%esp
-     9e3:	68 cc 12 00 00       	push   $0x12cc
+     9e3:	68 04 15 00 00       	push   $0x1504
      9e8:	e8 73 f7 ff ff       	call   160 <panic>
     panic("syntax - missing )");
      9ed:	83 ec 0c             	sub    $0xc,%esp
-     9f0:	68 d7 12 00 00       	push   $0x12d7
+     9f0:	68 0f 15 00 00       	push   $0x150f
      9f5:	e8 66 f7 ff ff       	call   160 <panic>
      9fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
@@ -1335,7 +1335,7 @@
      a16:	83 3b 05             	cmpl   $0x5,(%ebx)
      a19:	77 6d                	ja     a88 <nulterminate+0x88>
      a1b:	8b 03                	mov    (%ebx),%eax
-     a1d:	3e ff 24 85 28 13 00 	notrack jmp *0x1328(,%eax,4)
+     a1d:	3e ff 24 85 60 15 00 	notrack jmp *0x1560(,%eax,4)
      a24:	00 
      a25:	8d 76 00             	lea    0x0(%esi),%esi
     nulterminate(pcmd->right);
@@ -1451,7 +1451,7 @@
      ae6:	89 c6                	mov    %eax,%esi
   peek(&s, es, "");
      ae8:	8d 45 08             	lea    0x8(%ebp),%eax
-     aeb:	68 71 12 00 00       	push   $0x1271
+     aeb:	68 a9 14 00 00       	push   $0x14a9
      af0:	53                   	push   %ebx
      af1:	50                   	push   %eax
      af2:	e8 19 fb ff ff       	call   610 <peek>
@@ -1474,11 +1474,11 @@
     printf(2, "leftovers: %s\n", s);
      b13:	52                   	push   %edx
      b14:	50                   	push   %eax
-     b15:	68 ea 12 00 00       	push   $0x12ea
+     b15:	68 22 15 00 00       	push   $0x1522
      b1a:	6a 02                	push   $0x2
      b1c:	e8 cf 03 00 00       	call   ef0 <printf>
     panic("syntax");
-     b21:	c7 04 24 ae 12 00 00 	movl   $0x12ae,(%esp)
+     b21:	c7 04 24 e6 14 00 00 	movl   $0x14e6,(%esp)
      b28:	e8 33 f6 ff ff       	call   160 <panic>
      b2d:	66 90                	xchg   %ax,%ax
      b2f:	90                   	nop
@@ -1621,6 +1621,7 @@
      c01:	89 d7                	mov    %edx,%edi
      c03:	fc                   	cld    
      c04:	f3 aa                	rep stos %al,%es:(%edi)
+
   stosb(dst, c, n);
   return dst;
 }
@@ -1872,7 +1873,6 @@
      d81:	39 f8                	cmp    %edi,%eax
      d83:	75 fb                	jne    d80 <memmove+0x20>
   return vdst;
-}
      d85:	5e                   	pop    %esi
      d86:	89 d0                	mov    %edx,%eax
      d88:	5f                   	pop    %edi
@@ -1880,132 +1880,106 @@
      d8a:	c3                   	ret    
 
 00000d8b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
      d8b:	b8 01 00 00 00       	mov    $0x1,%eax
      d90:	cd 40                	int    $0x40
      d92:	c3                   	ret    
 
 00000d93 <exit>:
-SYSCALL(exit)
      d93:	b8 02 00 00 00       	mov    $0x2,%eax
      d98:	cd 40                	int    $0x40
      d9a:	c3                   	ret    
 
 00000d9b <wait>:
-SYSCALL(wait)
      d9b:	b8 03 00 00 00       	mov    $0x3,%eax
      da0:	cd 40                	int    $0x40
      da2:	c3                   	ret    
 
 00000da3 <pipe>:
-SYSCALL(pipe)
      da3:	b8 04 00 00 00       	mov    $0x4,%eax
      da8:	cd 40                	int    $0x40
      daa:	c3                   	ret    
 
 00000dab <read>:
-SYSCALL(read)
      dab:	b8 05 00 00 00       	mov    $0x5,%eax
      db0:	cd 40                	int    $0x40
      db2:	c3                   	ret    
 
 00000db3 <write>:
-SYSCALL(write)
      db3:	b8 10 00 00 00       	mov    $0x10,%eax
      db8:	cd 40                	int    $0x40
      dba:	c3                   	ret    
 
 00000dbb <close>:
-SYSCALL(close)
      dbb:	b8 15 00 00 00       	mov    $0x15,%eax
      dc0:	cd 40                	int    $0x40
      dc2:	c3                   	ret    
 
 00000dc3 <kill>:
-SYSCALL(kill)
      dc3:	b8 06 00 00 00       	mov    $0x6,%eax
      dc8:	cd 40                	int    $0x40
      dca:	c3                   	ret    
 
 00000dcb <exec>:
-SYSCALL(exec)
      dcb:	b8 07 00 00 00       	mov    $0x7,%eax
      dd0:	cd 40                	int    $0x40
      dd2:	c3                   	ret    
 
 00000dd3 <open>:
-SYSCALL(open)
      dd3:	b8 0f 00 00 00       	mov    $0xf,%eax
      dd8:	cd 40                	int    $0x40
      dda:	c3                   	ret    
 
 00000ddb <mknod>:
-SYSCALL(mknod)
      ddb:	b8 11 00 00 00       	mov    $0x11,%eax
      de0:	cd 40                	int    $0x40
      de2:	c3                   	ret    
 
 00000de3 <unlink>:
-SYSCALL(unlink)
      de3:	b8 12 00 00 00       	mov    $0x12,%eax
      de8:	cd 40                	int    $0x40
      dea:	c3                   	ret    
 
 00000deb <fstat>:
-SYSCALL(fstat)
      deb:	b8 08 00 00 00       	mov    $0x8,%eax
      df0:	cd 40                	int    $0x40
      df2:	c3                   	ret    
 
 00000df3 <link>:
-SYSCALL(link)
      df3:	b8 13 00 00 00       	mov    $0x13,%eax
      df8:	cd 40                	int    $0x40
      dfa:	c3                   	ret    
 
 00000dfb <mkdir>:
-SYSCALL(mkdir)
      dfb:	b8 14 00 00 00       	mov    $0x14,%eax
      e00:	cd 40                	int    $0x40
      e02:	c3                   	ret    
 
 00000e03 <chdir>:
-SYSCALL(chdir)
      e03:	b8 09 00 00 00       	mov    $0x9,%eax
      e08:	cd 40                	int    $0x40
      e0a:	c3                   	ret    
 
 00000e0b <dup>:
-SYSCALL(dup)
      e0b:	b8 0a 00 00 00       	mov    $0xa,%eax
      e10:	cd 40                	int    $0x40
      e12:	c3                   	ret    
 
 00000e13 <getpid>:
-SYSCALL(getpid)
      e13:	b8 0b 00 00 00       	mov    $0xb,%eax
      e18:	cd 40                	int    $0x40
      e1a:	c3                   	ret    
 
 00000e1b <sbrk>:
-SYSCALL(sbrk)
      e1b:	b8 0c 00 00 00       	mov    $0xc,%eax
      e20:	cd 40                	int    $0x40
      e22:	c3                   	ret    
 
 00000e23 <sleep>:
-SYSCALL(sleep)
      e23:	b8 0d 00 00 00       	mov    $0xd,%eax
      e28:	cd 40                	int    $0x40
      e2a:	c3                   	ret    
 
 00000e2b <uptime>:
-SYSCALL(uptime)
      e2b:	b8 0e 00 00 00       	mov    $0xe,%eax
      e30:	cd 40                	int    $0x40
      e32:	c3                   	ret    
@@ -2063,7 +2037,7 @@
      e72:	31 d2                	xor    %edx,%edx
      e74:	89 cf                	mov    %ecx,%edi
      e76:	f7 75 c4             	divl   -0x3c(%ebp)
-     e79:	0f b6 92 48 13 00 00 	movzbl 0x1348(%edx),%edx
+     e79:	0f b6 92 80 15 00 00 	movzbl 0x1580(%edx),%edx
      e80:	89 45 c0             	mov    %eax,-0x40(%ebp)
      e83:	89 d8                	mov    %ebx,%eax
      e85:	8d 5b 01             	lea    0x1(%ebx),%ebx
@@ -2334,7 +2308,7 @@
     1071:	8b 5d 08             	mov    0x8(%ebp),%ebx
     1074:	eb 1a                	jmp    1090 <printf+0x1a0>
           s = "(null)";
-    1076:	bb 40 13 00 00       	mov    $0x1340,%ebx
+    1076:	bb 78 15 00 00       	mov    $0x1578,%ebx
         while(*s != 0){
     107b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
     107e:	b8 28 00 00 00       	mov    $0x28,%eax
@@ -2380,7 +2354,7 @@
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    10c5:	a1 a4 19 00 00       	mov    0x19a4,%eax
+    10c5:	a1 64 1c 00 00       	mov    0x1c64,%eax
 {
     10ca:	89 e5                	mov    %esp,%ebp
     10cc:	57                   	push   %edi
@@ -2436,7 +2410,7 @@
 }
     1111:	5b                   	pop    %ebx
   freep = p;
-    1112:	a3 a4 19 00 00       	mov    %eax,0x19a4
+    1112:	a3 64 1c 00 00       	mov    %eax,0x1c64
 }
     1117:	5e                   	pop    %esi
     1118:	5f                   	pop    %edi
@@ -2459,7 +2433,7 @@
     p->s.size += bp->s.size;
     1137:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
-    113a:	a3 a4 19 00 00       	mov    %eax,0x19a4
+    113a:	a3 64 1c 00 00       	mov    %eax,0x1c64
     p->s.size += bp->s.size;
     113f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
@@ -2493,7 +2467,7 @@
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
     115d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
-    1160:	8b 3d a4 19 00 00    	mov    0x19a4,%edi
+    1160:	8b 3d 64 1c 00 00    	mov    0x1c64,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
     1166:	8d 70 07             	lea    0x7(%eax),%esi
     1169:	c1 ee 03             	shr    $0x3,%esi
@@ -2524,7 +2498,7 @@
     11a2:	8b 4a 04             	mov    0x4(%edx),%ecx
     11a5:	39 f1                	cmp    %esi,%ecx
     11a7:	73 4f                	jae    11f8 <malloc+0xa8>
-    11a9:	8b 3d a4 19 00 00    	mov    0x19a4,%edi
+    11a9:	8b 3d 64 1c 00 00    	mov    0x1c64,%edi
     11af:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
@@ -2550,7 +2524,7 @@
     11d1:	50                   	push   %eax
     11d2:	e8 e9 fe ff ff       	call   10c0 <free>
   return freep;
-    11d7:	a1 a4 19 00 00       	mov    0x19a4,%eax
+    11d7:	a1 64 1c 00 00       	mov    0x1c64,%eax
       if((p = morecore(nunits)) == 0)
     11dc:	83 c4 10             	add    $0x10,%esp
     11df:	85 c0                	test   %eax,%eax
@@ -2582,7 +2556,7 @@
         p->s.size = nunits;
     1204:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
-    1207:	a3 a4 19 00 00       	mov    %eax,0x19a4
+    1207:	a3 64 1c 00 00       	mov    %eax,0x1c64
 }
     120c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
@@ -2596,17 +2570,17 @@
     1217:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     121e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
-    1220:	c7 05 a4 19 00 00 a8 	movl   $0x19a8,0x19a4
-    1227:	19 00 00 
+    1220:	c7 05 64 1c 00 00 68 	movl   $0x1c68,0x1c64
+    1227:	1c 00 00 
     base.s.size = 0;
-    122a:	bf a8 19 00 00       	mov    $0x19a8,%edi
+    122a:	bf 68 1c 00 00       	mov    $0x1c68,%edi
     base.s.ptr = freep = prevp = &base;
-    122f:	c7 05 a8 19 00 00 a8 	movl   $0x19a8,0x19a8
-    1236:	19 00 00 
+    122f:	c7 05 68 1c 00 00 68 	movl   $0x1c68,0x1c68
+    1236:	1c 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     1239:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
-    123b:	c7 05 ac 19 00 00 00 	movl   $0x0,0x19ac
+    123b:	c7 05 6c 1c 00 00 00 	movl   $0x0,0x1c6c
     1242:	00 00 00 
     if(p->s.size >= nunits){
     1245:	e9 36 ff ff ff       	jmp    1180 <malloc+0x30>
@@ -2615,3 +2589,279 @@
     1250:	8b 0a                	mov    (%edx),%ecx
     1252:	89 08                	mov    %ecx,(%eax)
     1254:	eb b1                	jmp    1207 <malloc+0xb7>
+    1256:	66 90                	xchg   %ax,%ax
+    1258:	66 90                	xchg   %ax,%ax
+    125a:	66 90                	xchg   %ax,%ax
+    125c:	66 90                	xchg   %ax,%ax
+    125e:	66 90                	xchg   %ax,%ax
+
+00001260 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+    1260:	f3 0f 1e fb          	endbr32 
+    1264:	55                   	push   %ebp
+    1265:	b8 84 1c 00 00       	mov    $0x1c84,%eax
+    126a:	89 e5                	mov    %esp,%ebp
+    126c:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+    126f:	89 15 80 1c 00 00    	mov    %edx,0x1c80
+    for (mti=1; mti<N; mti++)
+    1275:	eb 0c                	jmp    1283 <sgenrand+0x23>
+    1277:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    127e:	66 90                	xchg   %ax,%ax
+    1280:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+    1283:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+    1289:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+    128b:	3d 3c 26 00 00       	cmp    $0x263c,%eax
+    1290:	75 ee                	jne    1280 <sgenrand+0x20>
+    1292:	c7 05 f0 1b 00 00 70 	movl   $0x270,0x1bf0
+    1299:	02 00 00 
+}
+    129c:	5d                   	pop    %ebp
+    129d:	c3                   	ret    
+    129e:	66 90                	xchg   %ax,%ax
+
+000012a0 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+    12a0:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+    12a4:	a1 f0 1b 00 00       	mov    0x1bf0,%eax
+    12a9:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+    12ae:	7f 3c                	jg     12ec <genrand+0x4c>
+    12b0:	8d 50 01             	lea    0x1(%eax),%edx
+    12b3:	8b 04 85 80 1c 00 00 	mov    0x1c80(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+    12ba:	89 15 f0 1b 00 00    	mov    %edx,0x1bf0
+    y ^= TEMPERING_SHIFT_U(y);
+    12c0:	89 c2                	mov    %eax,%edx
+    12c2:	c1 ea 0b             	shr    $0xb,%edx
+    12c5:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+    12c7:	89 d0                	mov    %edx,%eax
+    12c9:	c1 e0 07             	shl    $0x7,%eax
+    12cc:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+    12d1:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+    12d3:	89 d0                	mov    %edx,%eax
+    12d5:	c1 e0 0f             	shl    $0xf,%eax
+    12d8:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+    12dd:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+    12df:	89 c2                	mov    %eax,%edx
+    12e1:	c1 ea 12             	shr    $0x12,%edx
+    12e4:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+    12e6:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+    12eb:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+    12ec:	3d 71 02 00 00       	cmp    $0x271,%eax
+    12f1:	0f 84 d2 00 00 00    	je     13c9 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+    12f7:	31 c0                	xor    %eax,%eax
+    12f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+    1300:	8b 0c 85 80 1c 00 00 	mov    0x1c80(,%eax,4),%ecx
+    1307:	83 c0 01             	add    $0x1,%eax
+    130a:	8b 14 85 80 1c 00 00 	mov    0x1c80(,%eax,4),%edx
+    1311:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+    1317:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+    131d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+    131f:	89 d1                	mov    %edx,%ecx
+    1321:	83 e2 01             	and    $0x1,%edx
+    1324:	d1 e9                	shr    %ecx
+    1326:	33 0c 85 b0 22 00 00 	xor    0x22b0(,%eax,4),%ecx
+    132d:	33 0c 95 94 15 00 00 	xor    0x1594(,%edx,4),%ecx
+    1334:	89 0c 85 7c 1c 00 00 	mov    %ecx,0x1c7c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+    133b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+    1340:	75 be                	jne    1300 <genrand+0x60>
+    1342:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+    1348:	8b 0c 85 80 1c 00 00 	mov    0x1c80(,%eax,4),%ecx
+    134f:	83 c0 01             	add    $0x1,%eax
+    1352:	8b 14 85 80 1c 00 00 	mov    0x1c80(,%eax,4),%edx
+    1359:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+    135f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+    1365:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+    1367:	89 d1                	mov    %edx,%ecx
+    1369:	83 e2 01             	and    $0x1,%edx
+    136c:	d1 e9                	shr    %ecx
+    136e:	33 0c 85 f0 18 00 00 	xor    0x18f0(,%eax,4),%ecx
+    1375:	33 0c 95 94 15 00 00 	xor    0x1594(,%edx,4),%ecx
+    137c:	89 0c 85 7c 1c 00 00 	mov    %ecx,0x1c7c(,%eax,4)
+        for (;kk<N-1;kk++) {
+    1383:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+    1388:	75 be                	jne    1348 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+    138a:	a1 80 1c 00 00       	mov    0x1c80,%eax
+    138f:	8b 0d 3c 26 00 00    	mov    0x263c,%ecx
+    1395:	89 c2                	mov    %eax,%edx
+    1397:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+    139d:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+    13a3:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+    13a5:	89 ca                	mov    %ecx,%edx
+    13a7:	83 e1 01             	and    $0x1,%ecx
+    13aa:	d1 ea                	shr    %edx
+    13ac:	33 15 b0 22 00 00    	xor    0x22b0,%edx
+    13b2:	33 14 8d 94 15 00 00 	xor    0x1594(,%ecx,4),%edx
+    13b9:	89 15 3c 26 00 00    	mov    %edx,0x263c
+    13bf:	ba 01 00 00 00       	mov    $0x1,%edx
+    13c4:	e9 f1 fe ff ff       	jmp    12ba <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+    13c9:	b8 84 1c 00 00       	mov    $0x1c84,%eax
+    13ce:	b9 3c 26 00 00       	mov    $0x263c,%ecx
+    13d3:	ba 05 11 00 00       	mov    $0x1105,%edx
+    13d8:	c7 05 80 1c 00 00 05 	movl   $0x1105,0x1c80
+    13df:	11 00 00 
+    for (mti=1; mti<N; mti++)
+    13e2:	eb 07                	jmp    13eb <genrand+0x14b>
+    13e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    13e8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+    13eb:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+    13f1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+    13f3:	39 c1                	cmp    %eax,%ecx
+    13f5:	75 f1                	jne    13e8 <genrand+0x148>
+    13f7:	e9 fb fe ff ff       	jmp    12f7 <genrand+0x57>
+    13fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00001400 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+    1400:	f3 0f 1e fb          	endbr32 
+    1404:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+    1405:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+    1407:	89 e5                	mov    %esp,%ebp
+    1409:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+    140a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+    140d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+    140e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+    1413:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+    1416:	89 d8                	mov    %ebx,%eax
+    1418:	f7 f1                	div    %ecx
+    141a:	89 c6                	mov    %eax,%esi
+    141c:	29 d3                	sub    %edx,%ebx
+    141e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+    1420:	e8 7b fe ff ff       	call   12a0 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+    1425:	39 d8                	cmp    %ebx,%eax
+    1427:	73 f7                	jae    1420 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+    1429:	31 d2                	xor    %edx,%edx
+}
+    142b:	5b                   	pop    %ebx
+  return x/bin_size;
+    142c:	f7 f6                	div    %esi
+}
+    142e:	5e                   	pop    %esi
+    142f:	5d                   	pop    %ebp
+    1430:	c3                   	ret    
+    1431:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1438:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    143f:	90                   	nop
+
+00001440 <randomrange>:
+
+int randomrange(int low, int high){
+    1440:	f3 0f 1e fb          	endbr32 
+    1444:	55                   	push   %ebp
+    1445:	89 e5                	mov    %esp,%ebp
+    1447:	57                   	push   %edi
+    1448:	56                   	push   %esi
+    1449:	53                   	push   %ebx
+    144a:	83 ec 0c             	sub    $0xc,%esp
+    144d:	8b 75 08             	mov    0x8(%ebp),%esi
+    1450:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+    1453:	39 f0                	cmp    %esi,%eax
+    1455:	7d 06                	jge    145d <randomrange+0x1d>
+    1457:	89 f2                	mov    %esi,%edx
+    1459:	89 c6                	mov    %eax,%esi
+    145b:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+    145d:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+    145f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    1464:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+    1466:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+    1469:	89 d8                	mov    %ebx,%eax
+    146b:	f7 f1                	div    %ecx
+    146d:	89 c7                	mov    %eax,%edi
+    146f:	29 d3                	sub    %edx,%ebx
+    1471:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+    1478:	e8 23 fe ff ff       	call   12a0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+    147d:	39 d8                	cmp    %ebx,%eax
+    147f:	73 f7                	jae    1478 <randomrange+0x38>
+  return x/bin_size;
+    1481:	31 d2                	xor    %edx,%edx
+  return val;
+    1483:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+    1486:	f7 f7                	div    %edi
+    1488:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+    1489:	01 f0                	add    %esi,%eax
+    148b:	5e                   	pop    %esi
+    148c:	5f                   	pop    %edi
+    148d:	5d                   	pop    %ebp
+    148e:	c3                   	ret    
Binary files xv6-public/sh.o and xv6-public-partb/sh.o differ
diff -ruN xv6-public/sh.sym xv6-public-partb/sh.sym
--- xv6-public/sh.sym	2022-08-13 16:28:54.940143000 +0530
+++ xv6-public-partb/sh.sym	2022-10-31 11:09:00.345469184 +0530
@@ -1,8 +1,8 @@
 00000000 .text
-00001258 .rodata
-0000135c .eh_frame
-00001918 .data
-00001940 .bss
+00001490 .rodata
+0000159c .eh_frame
+00001be0 .data
+00001c00 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -12,15 +12,20 @@
 00000000 .debug_loc
 00000000 .debug_ranges
 00000000 sh.c
-00001940 buf.1123
+00001c00 buf.1126
 00000000 ulib.c
 00000000 printf.c
 00000e40 printint
-00001348 digits.1085
+00001580 digits.1088
 00000000 umalloc.c
-000019a4 freep
-000019a8 base
+00001c64 freep
+00001c68 base
+00000000 random.c
+00001c80 mt
+00001bf0 mti
+00001594 mag01.989
 00000b30 strcpy
+00001260 sgenrand
 00000ef0 printf
 00000d60 memmove
 00000ddb mknod
@@ -35,7 +40,8 @@
 000004b0 gettoken
 00001150 malloc
 00000e23 sleep
-00001920 whitespace
+00001be8 whitespace
+00001400 random_at_most
 00000340 fork1
 00000a00 nulterminate
 00000da3 pipe
@@ -49,7 +55,7 @@
 00000970 parseblock
 00000dcb exec
 00000d9b wait
-00001918 symbols
+00001be0 symbols
 00000dab read
 00000740 parseexec
 00000de3 unlink
@@ -57,22 +63,24 @@
 00000d8b fork
 00000e1b sbrk
 00000e2b uptime
-00001926 __bss_start
+00001bf4 __bss_start
 00000bf0 memset
 00000000 main
 00000b60 strcmp
 00000e0b dup
 000003f0 pipecmd
 000003a0 redircmd
+000012a0 genrand
 00000cd0 stat
-00001926 _edata
-000019b0 _end
+00001bf4 _edata
+00002640 _end
 00000df3 link
 00000d93 exit
 00000d20 atoi
 00000bb0 strlen
 00000dd3 open
 00000c10 strchr
+00001440 randomrange
 00000dfb mkdir
 00000dbb close
 00000430 listcmd
diff -ruN xv6-public/sleeplock.c xv6-public-partb/sleeplock.c
--- xv6-public/sleeplock.c	2022-08-11 13:14:39.068070000 +0530
+++ xv6-public-partb/sleeplock.c	2022-10-31 11:07:30.280459129 +0530
@@ -22,10 +22,13 @@
 void
 acquiresleep(struct sleeplock *lk)
 {
+
   acquire(&lk->lk);
+
   while (lk->locked) {
     sleep(lk, &lk->lk);
   }
+
   lk->locked = 1;
   lk->pid = myproc()->pid;
   release(&lk->lk);
@@ -53,4 +56,3 @@
 }
 
 
-
Binary files xv6-public/sleeplock.o and xv6-public-partb/sleeplock.o differ
diff -ruN xv6-public/spinlock.c xv6-public-partb/spinlock.c
--- xv6-public/spinlock.c	2022-08-11 13:14:39.068070000 +0530
+++ xv6-public-partb/spinlock.c	2022-10-31 11:07:44.019325132 +0530
@@ -25,6 +25,7 @@
 acquire(struct spinlock *lk)
 {
   pushcli(); // disable interrupts to avoid deadlock.
+
   if(holding(lk))
     panic("acquire");
 
@@ -123,4 +124,3 @@
   if(mycpu()->ncli == 0 && mycpu()->intena)
     sti();
 }
-
Binary files xv6-public/spinlock.o and xv6-public-partb/spinlock.o differ
Binary files xv6-public/_stressfs and xv6-public-partb/_stressfs differ
diff -ruN xv6-public/stressfs.asm xv6-public-partb/stressfs.asm
--- xv6-public/stressfs.asm	2022-08-13 16:28:55.016119000 +0530
+++ xv6-public-partb/stressfs.asm	2022-10-31 11:09:00.665629183 +0530
@@ -39,7 +39,7 @@
   char path[] = "stressfs0";
   28:	66 89 85 e6 fd ff ff 	mov    %ax,-0x21a(%ebp)
   printf(1, "stressfs starting\n");
-  2f:	68 68 08 00 00       	push   $0x868
+  2f:	68 a0 0a 00 00       	push   $0xaa0
   34:	6a 01                	push   $0x1
   char path[] = "stressfs0";
   36:	c7 85 de fd ff ff 73 	movl   $0x65727473,-0x222(%ebp)
@@ -74,7 +74,7 @@
   fd = open(path, O_CREATE | O_RDWR);
   80:	bb 14 00 00 00       	mov    $0x14,%ebx
   printf(1, "write %d\n", i);
-  85:	68 7b 08 00 00       	push   $0x87b
+  85:	68 b3 0a 00 00       	push   $0xab3
   8a:	6a 01                	push   $0x1
   8c:	e8 6f 04 00 00       	call   500 <printf>
   path[8] += i;
@@ -112,7 +112,7 @@
   printf(1, "read\n");
   d8:	58                   	pop    %eax
   d9:	5a                   	pop    %edx
-  da:	68 85 08 00 00       	push   $0x885
+  da:	68 bd 0a 00 00       	push   $0xabd
   df:	6a 01                	push   $0x1
   e1:	e8 1a 04 00 00       	call   500 <printf>
 
@@ -296,6 +296,7 @@
  211:	89 d7                	mov    %edx,%edi
  213:	fc                   	cld    
  214:	f3 aa                	rep stos %al,%es:(%edi)
+
   stosb(dst, c, n);
   return dst;
 }
@@ -547,7 +548,6 @@
  391:	39 f8                	cmp    %edi,%eax
  393:	75 fb                	jne    390 <memmove+0x20>
   return vdst;
-}
  395:	5e                   	pop    %esi
  396:	89 d0                	mov    %edx,%eax
  398:	5f                   	pop    %edi
@@ -555,132 +555,106 @@
  39a:	c3                   	ret    
 
 0000039b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  39b:	b8 01 00 00 00       	mov    $0x1,%eax
  3a0:	cd 40                	int    $0x40
  3a2:	c3                   	ret    
 
 000003a3 <exit>:
-SYSCALL(exit)
  3a3:	b8 02 00 00 00       	mov    $0x2,%eax
  3a8:	cd 40                	int    $0x40
  3aa:	c3                   	ret    
 
 000003ab <wait>:
-SYSCALL(wait)
  3ab:	b8 03 00 00 00       	mov    $0x3,%eax
  3b0:	cd 40                	int    $0x40
  3b2:	c3                   	ret    
 
 000003b3 <pipe>:
-SYSCALL(pipe)
  3b3:	b8 04 00 00 00       	mov    $0x4,%eax
  3b8:	cd 40                	int    $0x40
  3ba:	c3                   	ret    
 
 000003bb <read>:
-SYSCALL(read)
  3bb:	b8 05 00 00 00       	mov    $0x5,%eax
  3c0:	cd 40                	int    $0x40
  3c2:	c3                   	ret    
 
 000003c3 <write>:
-SYSCALL(write)
  3c3:	b8 10 00 00 00       	mov    $0x10,%eax
  3c8:	cd 40                	int    $0x40
  3ca:	c3                   	ret    
 
 000003cb <close>:
-SYSCALL(close)
  3cb:	b8 15 00 00 00       	mov    $0x15,%eax
  3d0:	cd 40                	int    $0x40
  3d2:	c3                   	ret    
 
 000003d3 <kill>:
-SYSCALL(kill)
  3d3:	b8 06 00 00 00       	mov    $0x6,%eax
  3d8:	cd 40                	int    $0x40
  3da:	c3                   	ret    
 
 000003db <exec>:
-SYSCALL(exec)
  3db:	b8 07 00 00 00       	mov    $0x7,%eax
  3e0:	cd 40                	int    $0x40
  3e2:	c3                   	ret    
 
 000003e3 <open>:
-SYSCALL(open)
  3e3:	b8 0f 00 00 00       	mov    $0xf,%eax
  3e8:	cd 40                	int    $0x40
  3ea:	c3                   	ret    
 
 000003eb <mknod>:
-SYSCALL(mknod)
  3eb:	b8 11 00 00 00       	mov    $0x11,%eax
  3f0:	cd 40                	int    $0x40
  3f2:	c3                   	ret    
 
 000003f3 <unlink>:
-SYSCALL(unlink)
  3f3:	b8 12 00 00 00       	mov    $0x12,%eax
  3f8:	cd 40                	int    $0x40
  3fa:	c3                   	ret    
 
 000003fb <fstat>:
-SYSCALL(fstat)
  3fb:	b8 08 00 00 00       	mov    $0x8,%eax
  400:	cd 40                	int    $0x40
  402:	c3                   	ret    
 
 00000403 <link>:
-SYSCALL(link)
  403:	b8 13 00 00 00       	mov    $0x13,%eax
  408:	cd 40                	int    $0x40
  40a:	c3                   	ret    
 
 0000040b <mkdir>:
-SYSCALL(mkdir)
  40b:	b8 14 00 00 00       	mov    $0x14,%eax
  410:	cd 40                	int    $0x40
  412:	c3                   	ret    
 
 00000413 <chdir>:
-SYSCALL(chdir)
  413:	b8 09 00 00 00       	mov    $0x9,%eax
  418:	cd 40                	int    $0x40
  41a:	c3                   	ret    
 
 0000041b <dup>:
-SYSCALL(dup)
  41b:	b8 0a 00 00 00       	mov    $0xa,%eax
  420:	cd 40                	int    $0x40
  422:	c3                   	ret    
 
 00000423 <getpid>:
-SYSCALL(getpid)
  423:	b8 0b 00 00 00       	mov    $0xb,%eax
  428:	cd 40                	int    $0x40
  42a:	c3                   	ret    
 
 0000042b <sbrk>:
-SYSCALL(sbrk)
  42b:	b8 0c 00 00 00       	mov    $0xc,%eax
  430:	cd 40                	int    $0x40
  432:	c3                   	ret    
 
 00000433 <sleep>:
-SYSCALL(sleep)
  433:	b8 0d 00 00 00       	mov    $0xd,%eax
  438:	cd 40                	int    $0x40
  43a:	c3                   	ret    
 
 0000043b <uptime>:
-SYSCALL(uptime)
  43b:	b8 0e 00 00 00       	mov    $0xe,%eax
  440:	cd 40                	int    $0x40
  442:	c3                   	ret    
@@ -738,7 +712,7 @@
  482:	31 d2                	xor    %edx,%edx
  484:	89 cf                	mov    %ecx,%edi
  486:	f7 75 c4             	divl   -0x3c(%ebp)
- 489:	0f b6 92 94 08 00 00 	movzbl 0x894(%edx),%edx
+ 489:	0f b6 92 cc 0a 00 00 	movzbl 0xacc(%edx),%edx
  490:	89 45 c0             	mov    %eax,-0x40(%ebp)
  493:	89 d8                	mov    %ebx,%eax
  495:	8d 5b 01             	lea    0x1(%ebx),%ebx
@@ -1009,7 +983,7 @@
  681:	8b 5d 08             	mov    0x8(%ebp),%ebx
  684:	eb 1a                	jmp    6a0 <printf+0x1a0>
           s = "(null)";
- 686:	bb 8b 08 00 00       	mov    $0x88b,%ebx
+ 686:	bb c3 0a 00 00       	mov    $0xac3,%ebx
         while(*s != 0){
  68b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  68e:	b8 28 00 00 00       	mov    $0x28,%eax
@@ -1055,7 +1029,7 @@
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6d5:	a1 4c 0b 00 00       	mov    0xb4c,%eax
+ 6d5:	a1 20 0e 00 00       	mov    0xe20,%eax
 {
  6da:	89 e5                	mov    %esp,%ebp
  6dc:	57                   	push   %edi
@@ -1111,7 +1085,7 @@
 }
  721:	5b                   	pop    %ebx
   freep = p;
- 722:	a3 4c 0b 00 00       	mov    %eax,0xb4c
+ 722:	a3 20 0e 00 00       	mov    %eax,0xe20
 }
  727:	5e                   	pop    %esi
  728:	5f                   	pop    %edi
@@ -1134,7 +1108,7 @@
     p->s.size += bp->s.size;
  747:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 74a:	a3 4c 0b 00 00       	mov    %eax,0xb4c
+ 74a:	a3 20 0e 00 00       	mov    %eax,0xe20
     p->s.size += bp->s.size;
  74f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
@@ -1168,7 +1142,7 @@
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  76d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 770:	8b 3d 4c 0b 00 00    	mov    0xb4c,%edi
+ 770:	8b 3d 20 0e 00 00    	mov    0xe20,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  776:	8d 70 07             	lea    0x7(%eax),%esi
  779:	c1 ee 03             	shr    $0x3,%esi
@@ -1199,7 +1173,7 @@
  7b2:	8b 4a 04             	mov    0x4(%edx),%ecx
  7b5:	39 f1                	cmp    %esi,%ecx
  7b7:	73 4f                	jae    808 <malloc+0xa8>
- 7b9:	8b 3d 4c 0b 00 00    	mov    0xb4c,%edi
+ 7b9:	8b 3d 20 0e 00 00    	mov    0xe20,%edi
  7bf:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
@@ -1225,7 +1199,7 @@
  7e1:	50                   	push   %eax
  7e2:	e8 e9 fe ff ff       	call   6d0 <free>
   return freep;
- 7e7:	a1 4c 0b 00 00       	mov    0xb4c,%eax
+ 7e7:	a1 20 0e 00 00       	mov    0xe20,%eax
       if((p = morecore(nunits)) == 0)
  7ec:	83 c4 10             	add    $0x10,%esp
  7ef:	85 c0                	test   %eax,%eax
@@ -1257,7 +1231,7 @@
         p->s.size = nunits;
  814:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 817:	a3 4c 0b 00 00       	mov    %eax,0xb4c
+ 817:	a3 20 0e 00 00       	mov    %eax,0xe20
 }
  81c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
@@ -1271,17 +1245,17 @@
  827:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  82e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 830:	c7 05 4c 0b 00 00 50 	movl   $0xb50,0xb4c
- 837:	0b 00 00 
+ 830:	c7 05 20 0e 00 00 24 	movl   $0xe24,0xe20
+ 837:	0e 00 00 
     base.s.size = 0;
- 83a:	bf 50 0b 00 00       	mov    $0xb50,%edi
+ 83a:	bf 24 0e 00 00       	mov    $0xe24,%edi
     base.s.ptr = freep = prevp = &base;
- 83f:	c7 05 50 0b 00 00 50 	movl   $0xb50,0xb50
- 846:	0b 00 00 
+ 83f:	c7 05 24 0e 00 00 24 	movl   $0xe24,0xe24
+ 846:	0e 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
  849:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 84b:	c7 05 54 0b 00 00 00 	movl   $0x0,0xb54
+ 84b:	c7 05 28 0e 00 00 00 	movl   $0x0,0xe28
  852:	00 00 00 
     if(p->s.size >= nunits){
  855:	e9 36 ff ff ff       	jmp    790 <malloc+0x30>
@@ -1290,3 +1264,279 @@
  860:	8b 0a                	mov    (%edx),%ecx
  862:	89 08                	mov    %ecx,(%eax)
  864:	eb b1                	jmp    817 <malloc+0xb7>
+ 866:	66 90                	xchg   %ax,%ax
+ 868:	66 90                	xchg   %ax,%ax
+ 86a:	66 90                	xchg   %ax,%ax
+ 86c:	66 90                	xchg   %ax,%ax
+ 86e:	66 90                	xchg   %ax,%ax
+
+00000870 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 870:	f3 0f 1e fb          	endbr32 
+ 874:	55                   	push   %ebp
+ 875:	b8 44 0e 00 00       	mov    $0xe44,%eax
+ 87a:	89 e5                	mov    %esp,%ebp
+ 87c:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 87f:	89 15 40 0e 00 00    	mov    %edx,0xe40
+    for (mti=1; mti<N; mti++)
+ 885:	eb 0c                	jmp    893 <sgenrand+0x23>
+ 887:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 88e:	66 90                	xchg   %ax,%ax
+ 890:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 893:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 899:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 89b:	3d fc 17 00 00       	cmp    $0x17fc,%eax
+ 8a0:	75 ee                	jne    890 <sgenrand+0x20>
+ 8a2:	c7 05 14 0e 00 00 70 	movl   $0x270,0xe14
+ 8a9:	02 00 00 
+}
+ 8ac:	5d                   	pop    %ebp
+ 8ad:	c3                   	ret    
+ 8ae:	66 90                	xchg   %ax,%ax
+
+000008b0 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 8b0:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 8b4:	a1 14 0e 00 00       	mov    0xe14,%eax
+ 8b9:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8be:	7f 3c                	jg     8fc <genrand+0x4c>
+ 8c0:	8d 50 01             	lea    0x1(%eax),%edx
+ 8c3:	8b 04 85 40 0e 00 00 	mov    0xe40(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 8ca:	89 15 14 0e 00 00    	mov    %edx,0xe14
+    y ^= TEMPERING_SHIFT_U(y);
+ 8d0:	89 c2                	mov    %eax,%edx
+ 8d2:	c1 ea 0b             	shr    $0xb,%edx
+ 8d5:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 8d7:	89 d0                	mov    %edx,%eax
+ 8d9:	c1 e0 07             	shl    $0x7,%eax
+ 8dc:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 8e1:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 8e3:	89 d0                	mov    %edx,%eax
+ 8e5:	c1 e0 0f             	shl    $0xf,%eax
+ 8e8:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 8ed:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 8ef:	89 c2                	mov    %eax,%edx
+ 8f1:	c1 ea 12             	shr    $0x12,%edx
+ 8f4:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 8f6:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 8fb:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 8fc:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 901:	0f 84 d2 00 00 00    	je     9d9 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 907:	31 c0                	xor    %eax,%eax
+ 909:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 910:	8b 0c 85 40 0e 00 00 	mov    0xe40(,%eax,4),%ecx
+ 917:	83 c0 01             	add    $0x1,%eax
+ 91a:	8b 14 85 40 0e 00 00 	mov    0xe40(,%eax,4),%edx
+ 921:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 927:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 92d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 92f:	89 d1                	mov    %edx,%ecx
+ 931:	83 e2 01             	and    $0x1,%edx
+ 934:	d1 e9                	shr    %ecx
+ 936:	33 0c 85 70 14 00 00 	xor    0x1470(,%eax,4),%ecx
+ 93d:	33 0c 95 e0 0a 00 00 	xor    0xae0(,%edx,4),%ecx
+ 944:	89 0c 85 3c 0e 00 00 	mov    %ecx,0xe3c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 94b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 950:	75 be                	jne    910 <genrand+0x60>
+ 952:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 958:	8b 0c 85 40 0e 00 00 	mov    0xe40(,%eax,4),%ecx
+ 95f:	83 c0 01             	add    $0x1,%eax
+ 962:	8b 14 85 40 0e 00 00 	mov    0xe40(,%eax,4),%edx
+ 969:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 96f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 975:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 977:	89 d1                	mov    %edx,%ecx
+ 979:	83 e2 01             	and    $0x1,%edx
+ 97c:	d1 e9                	shr    %ecx
+ 97e:	33 0c 85 b0 0a 00 00 	xor    0xab0(,%eax,4),%ecx
+ 985:	33 0c 95 e0 0a 00 00 	xor    0xae0(,%edx,4),%ecx
+ 98c:	89 0c 85 3c 0e 00 00 	mov    %ecx,0xe3c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 993:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 998:	75 be                	jne    958 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 99a:	a1 40 0e 00 00       	mov    0xe40,%eax
+ 99f:	8b 0d fc 17 00 00    	mov    0x17fc,%ecx
+ 9a5:	89 c2                	mov    %eax,%edx
+ 9a7:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 9ad:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 9b3:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 9b5:	89 ca                	mov    %ecx,%edx
+ 9b7:	83 e1 01             	and    $0x1,%ecx
+ 9ba:	d1 ea                	shr    %edx
+ 9bc:	33 15 70 14 00 00    	xor    0x1470,%edx
+ 9c2:	33 14 8d e0 0a 00 00 	xor    0xae0(,%ecx,4),%edx
+ 9c9:	89 15 fc 17 00 00    	mov    %edx,0x17fc
+ 9cf:	ba 01 00 00 00       	mov    $0x1,%edx
+ 9d4:	e9 f1 fe ff ff       	jmp    8ca <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ 9d9:	b8 44 0e 00 00       	mov    $0xe44,%eax
+ 9de:	b9 fc 17 00 00       	mov    $0x17fc,%ecx
+ 9e3:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 9e8:	c7 05 40 0e 00 00 05 	movl   $0x1105,0xe40
+ 9ef:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 9f2:	eb 07                	jmp    9fb <genrand+0x14b>
+ 9f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 9f8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 9fb:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ a01:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ a03:	39 c1                	cmp    %eax,%ecx
+ a05:	75 f1                	jne    9f8 <genrand+0x148>
+ a07:	e9 fb fe ff ff       	jmp    907 <genrand+0x57>
+ a0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000a10 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ a10:	f3 0f 1e fb          	endbr32 
+ a14:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ a15:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ a17:	89 e5                	mov    %esp,%ebp
+ a19:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ a1a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ a1d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ a1e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ a23:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ a26:	89 d8                	mov    %ebx,%eax
+ a28:	f7 f1                	div    %ecx
+ a2a:	89 c6                	mov    %eax,%esi
+ a2c:	29 d3                	sub    %edx,%ebx
+ a2e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ a30:	e8 7b fe ff ff       	call   8b0 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ a35:	39 d8                	cmp    %ebx,%eax
+ a37:	73 f7                	jae    a30 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ a39:	31 d2                	xor    %edx,%edx
+}
+ a3b:	5b                   	pop    %ebx
+  return x/bin_size;
+ a3c:	f7 f6                	div    %esi
+}
+ a3e:	5e                   	pop    %esi
+ a3f:	5d                   	pop    %ebp
+ a40:	c3                   	ret    
+ a41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a4f:	90                   	nop
+
+00000a50 <randomrange>:
+
+int randomrange(int low, int high){
+ a50:	f3 0f 1e fb          	endbr32 
+ a54:	55                   	push   %ebp
+ a55:	89 e5                	mov    %esp,%ebp
+ a57:	57                   	push   %edi
+ a58:	56                   	push   %esi
+ a59:	53                   	push   %ebx
+ a5a:	83 ec 0c             	sub    $0xc,%esp
+ a5d:	8b 75 08             	mov    0x8(%ebp),%esi
+ a60:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ a63:	39 f0                	cmp    %esi,%eax
+ a65:	7d 06                	jge    a6d <randomrange+0x1d>
+ a67:	89 f2                	mov    %esi,%edx
+ a69:	89 c6                	mov    %eax,%esi
+ a6b:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ a6d:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ a6f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ a74:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ a76:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ a79:	89 d8                	mov    %ebx,%eax
+ a7b:	f7 f1                	div    %ecx
+ a7d:	89 c7                	mov    %eax,%edi
+ a7f:	29 d3                	sub    %edx,%ebx
+ a81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ a88:	e8 23 fe ff ff       	call   8b0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ a8d:	39 d8                	cmp    %ebx,%eax
+ a8f:	73 f7                	jae    a88 <randomrange+0x38>
+  return x/bin_size;
+ a91:	31 d2                	xor    %edx,%edx
+  return val;
+ a93:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ a96:	f7 f7                	div    %edi
+ a98:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ a99:	01 f0                	add    %esi,%eax
+ a9b:	5e                   	pop    %esi
+ a9c:	5f                   	pop    %edi
+ a9d:	5d                   	pop    %ebp
+ a9e:	c3                   	ret    
Binary files xv6-public/stressfs.o and xv6-public-partb/stressfs.o differ
diff -ruN xv6-public/stressfs.sym xv6-public-partb/stressfs.sym
--- xv6-public/stressfs.sym	2022-08-13 16:28:55.024116000 +0530
+++ xv6-public-partb/stressfs.sym	2022-10-31 11:09:00.749671182 +0530
@@ -1,7 +1,8 @@
 00000000 .text
-00000868 .rodata
-000008a8 .eh_frame
-00000b4c .bss
+00000aa0 .rodata
+00000ae8 .eh_frame
+00000e14 .data
+00000e20 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -14,11 +15,16 @@
 00000000 ulib.c
 00000000 printf.c
 00000450 printint
-00000894 digits.1085
+00000acc digits.1088
 00000000 umalloc.c
-00000b4c freep
-00000b50 base
+00000e20 freep
+00000e24 base
+00000000 random.c
+00000e40 mt
+00000e14 mti
+00000ae0 mag01.989
 00000140 strcpy
+00000870 sgenrand
 00000500 printf
 00000370 memmove
 000003eb mknod
@@ -26,6 +32,7 @@
 00000423 getpid
 00000760 malloc
 00000433 sleep
+00000a10 random_at_most
 000003b3 pipe
 000003c3 write
 000003fb fstat
@@ -38,20 +45,22 @@
 0000039b fork
 0000042b sbrk
 0000043b uptime
-00000b4c __bss_start
+00000e18 __bss_start
 00000200 memset
 00000000 main
 00000170 strcmp
 0000041b dup
+000008b0 genrand
 000002e0 stat
-00000b4c _edata
-00000b58 _end
+00000e18 _edata
+00001800 _end
 00000403 link
 000003a3 exit
 00000330 atoi
 000001c0 strlen
 000003e3 open
 00000220 strchr
+00000a50 randomrange
 0000040b mkdir
 000003cb close
 000006d0 free
Binary files xv6-public/syscall.o and xv6-public-partb/syscall.o differ
Binary files xv6-public/sysfile.o and xv6-public-partb/sysfile.o differ
Binary files xv6-public/sysproc.o and xv6-public-partb/sysproc.o differ
diff -ruN xv6-public/trap.c xv6-public-partb/trap.c
--- xv6-public/trap.c	2022-08-11 13:14:39.068070000 +0530
+++ xv6-public-partb/trap.c	2022-10-31 11:07:59.082853142 +0530
@@ -14,6 +14,30 @@
 struct spinlock tickslock;
 uint ticks;
 
+struct spinlock swap_in_lock;
+
+void handlePageFault(){
+  int addr=rcr2();
+  struct proc *p=myproc();
+  acquire(&swap_in_lock);
+  sleep(p,&swap_in_lock);
+  pde_t *pde = &(p->pgdir)[PDX(addr)];
+  pte_t *pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+
+  if((pgtab[PTX(addr)])&0x080){
+    //This means that the page was swapped out.
+    //virtual address for page
+    p->addr = addr;
+    rpush2(p);
+    if(!swap_in_process_exists){
+      swap_in_process_exists=1;
+      create_kernel_process("swap_in_process", &swap_in_process_function);
+    }
+  } else {
+    exit();
+  }
+}
+
 void
 tvinit(void)
 {
@@ -77,7 +101,9 @@
             cpuid(), tf->cs, tf->eip);
     lapiceoi();
     break;
-
+  case T_PGFLT:
+    handlePageFault();
+  break;
   //PAGEBREAK: 13
   default:
     if(myproc() == 0 || (tf->cs&3) == 0){
@@ -102,11 +128,11 @@
 
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
-  if(myproc() && myproc()->state == RUNNING &&
-     tf->trapno == T_IRQ0+IRQ_TIMER)
-    yield();
+  // if(myproc() && myproc()->state == RUNNING &&
+  //    tf->trapno == T_IRQ0+IRQ_TIMER)
+  //   yield();
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
     exit();
-}
+}
\ No newline at end of file
Binary files xv6-public/trap.o and xv6-public-partb/trap.o differ
Binary files xv6-public/uart.o and xv6-public-partb/uart.o differ
diff -ruN xv6-public/ulib.c xv6-public-partb/ulib.c
--- xv6-public/ulib.c	2022-08-11 13:14:39.068070000 +0530
+++ xv6-public-partb/ulib.c	2022-10-31 11:08:14.450533152 +0530
@@ -36,6 +36,7 @@
 void*
 memset(void *dst, int c, uint n)
 {
+
   stosb(dst, c, n);
   return dst;
 }
@@ -103,4 +104,4 @@
   while(n-- > 0)
     *dst++ = *src++;
   return vdst;
-}
+}
\ No newline at end of file
Binary files xv6-public/ulib.o and xv6-public-partb/ulib.o differ
Binary files xv6-public/umalloc.o and xv6-public-partb/umalloc.o differ
diff -ruN xv6-public/user.h xv6-public-partb/user.h
--- xv6-public/user.h	2022-08-13 16:28:15.738212000 +0530
+++ xv6-public-partb/user.h	2022-10-31 11:08:30.182395167 +0530
@@ -37,3 +37,4 @@
 void* malloc(uint);
 void free(void*);
 int atoi(const char*);
+int randomrange(int, int);
\ No newline at end of file
Binary files xv6-public/_usertests and xv6-public-partb/_usertests differ
diff -ruN xv6-public/usertests.asm xv6-public-partb/usertests.asm
--- xv6-public/usertests.asm	2022-08-13 16:28:55.495966000 +0530
+++ xv6-public-partb/usertests.asm	2022-10-31 11:09:01.341967184 +0530
@@ -20,7 +20,7 @@
       11:	51                   	push   %ecx
       12:	83 ec 0c             	sub    $0xc,%esp
   printf(1, "usertests starting\n");
-      15:	68 36 4e 00 00       	push   $0x4e36
+      15:	68 6e 50 00 00       	push   $0x506e
       1a:	6a 01                	push   $0x1
       1c:	e8 bf 3a 00 00       	call   3ae0 <printf>
 
@@ -28,7 +28,7 @@
       21:	59                   	pop    %ecx
       22:	58                   	pop    %eax
       23:	6a 00                	push   $0x0
-      25:	68 4a 4e 00 00       	push   $0x4e4a
+      25:	68 82 50 00 00       	push   $0x5082
       2a:	e8 94 39 00 00       	call   39c3 <open>
       2f:	83 c4 10             	add    $0x10,%esp
       32:	85 c0                	test   %eax,%eax
@@ -36,7 +36,7 @@
     printf(1, "already ran user tests -- rebuild fs.img\n");
       36:	52                   	push   %edx
       37:	52                   	push   %edx
-      38:	68 b4 55 00 00       	push   $0x55b4
+      38:	68 ec 57 00 00       	push   $0x57ec
       3d:	6a 01                	push   $0x1
       3f:	e8 9c 3a 00 00       	call   3ae0 <printf>
     exit();
@@ -46,7 +46,7 @@
       49:	50                   	push   %eax
       4a:	50                   	push   %eax
       4b:	68 00 02 00 00       	push   $0x200
-      50:	68 4a 4e 00 00       	push   $0x4e4a
+      50:	68 82 50 00 00       	push   $0x5082
       55:	e8 69 39 00 00       	call   39c3 <open>
       5a:	89 04 24             	mov    %eax,(%esp)
       5d:	e8 49 39 00 00       	call   39ab <close>
@@ -144,40 +144,40 @@
      125:	89 e5                	mov    %esp,%ebp
      127:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "iput test\n");
-     12a:	68 dc 3e 00 00       	push   $0x3edc
-     12f:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     12a:	68 14 41 00 00       	push   $0x4114
+     12f:	ff 35 a8 61 00 00    	pushl  0x61a8
      135:	e8 a6 39 00 00       	call   3ae0 <printf>
   if(mkdir("iputdir") < 0){
-     13a:	c7 04 24 6f 3e 00 00 	movl   $0x3e6f,(%esp)
+     13a:	c7 04 24 a7 40 00 00 	movl   $0x40a7,(%esp)
      141:	e8 a5 38 00 00       	call   39eb <mkdir>
      146:	83 c4 10             	add    $0x10,%esp
      149:	85 c0                	test   %eax,%eax
      14b:	78 58                	js     1a5 <iputtest+0x85>
   if(chdir("iputdir") < 0){
      14d:	83 ec 0c             	sub    $0xc,%esp
-     150:	68 6f 3e 00 00       	push   $0x3e6f
+     150:	68 a7 40 00 00       	push   $0x40a7
      155:	e8 99 38 00 00       	call   39f3 <chdir>
      15a:	83 c4 10             	add    $0x10,%esp
      15d:	85 c0                	test   %eax,%eax
      15f:	0f 88 85 00 00 00    	js     1ea <iputtest+0xca>
   if(unlink("../iputdir") < 0){
      165:	83 ec 0c             	sub    $0xc,%esp
-     168:	68 6c 3e 00 00       	push   $0x3e6c
+     168:	68 a4 40 00 00       	push   $0x40a4
      16d:	e8 61 38 00 00       	call   39d3 <unlink>
      172:	83 c4 10             	add    $0x10,%esp
      175:	85 c0                	test   %eax,%eax
      177:	78 5a                	js     1d3 <iputtest+0xb3>
   if(chdir("/") < 0){
      179:	83 ec 0c             	sub    $0xc,%esp
-     17c:	68 91 3e 00 00       	push   $0x3e91
+     17c:	68 c9 40 00 00       	push   $0x40c9
      181:	e8 6d 38 00 00       	call   39f3 <chdir>
      186:	83 c4 10             	add    $0x10,%esp
      189:	85 c0                	test   %eax,%eax
      18b:	78 2f                	js     1bc <iputtest+0x9c>
   printf(stdout, "iput test ok\n");
      18d:	83 ec 08             	sub    $0x8,%esp
-     190:	68 14 3f 00 00       	push   $0x3f14
-     195:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     190:	68 4c 41 00 00       	push   $0x414c
+     195:	ff 35 a8 61 00 00    	pushl  0x61a8
      19b:	e8 40 39 00 00       	call   3ae0 <printf>
 }
      1a0:	83 c4 10             	add    $0x10,%esp
@@ -186,32 +186,32 @@
     printf(stdout, "mkdir failed\n");
      1a5:	50                   	push   %eax
      1a6:	50                   	push   %eax
-     1a7:	68 48 3e 00 00       	push   $0x3e48
-     1ac:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     1a7:	68 80 40 00 00       	push   $0x4080
+     1ac:	ff 35 a8 61 00 00    	pushl  0x61a8
      1b2:	e8 29 39 00 00       	call   3ae0 <printf>
     exit();
      1b7:	e8 c7 37 00 00       	call   3983 <exit>
     printf(stdout, "chdir / failed\n");
      1bc:	50                   	push   %eax
      1bd:	50                   	push   %eax
-     1be:	68 93 3e 00 00       	push   $0x3e93
-     1c3:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     1be:	68 cb 40 00 00       	push   $0x40cb
+     1c3:	ff 35 a8 61 00 00    	pushl  0x61a8
      1c9:	e8 12 39 00 00       	call   3ae0 <printf>
     exit();
      1ce:	e8 b0 37 00 00       	call   3983 <exit>
     printf(stdout, "unlink ../iputdir failed\n");
      1d3:	52                   	push   %edx
      1d4:	52                   	push   %edx
-     1d5:	68 77 3e 00 00       	push   $0x3e77
-     1da:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     1d5:	68 af 40 00 00       	push   $0x40af
+     1da:	ff 35 a8 61 00 00    	pushl  0x61a8
      1e0:	e8 fb 38 00 00       	call   3ae0 <printf>
     exit();
      1e5:	e8 99 37 00 00       	call   3983 <exit>
     printf(stdout, "chdir iputdir failed\n");
      1ea:	51                   	push   %ecx
      1eb:	51                   	push   %ecx
-     1ec:	68 56 3e 00 00       	push   $0x3e56
-     1f1:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     1ec:	68 8e 40 00 00       	push   $0x408e
+     1f1:	ff 35 a8 61 00 00    	pushl  0x61a8
      1f7:	e8 e4 38 00 00       	call   3ae0 <printf>
     exit();
      1fc:	e8 82 37 00 00       	call   3983 <exit>
@@ -226,8 +226,8 @@
      215:	89 e5                	mov    %esp,%ebp
      217:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "exitiput test\n");
-     21a:	68 a3 3e 00 00       	push   $0x3ea3
-     21f:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     21a:	68 db 40 00 00       	push   $0x40db
+     21f:	ff 35 a8 61 00 00    	pushl  0x61a8
      225:	e8 b6 38 00 00       	call   3ae0 <printf>
   pid = fork();
      22a:	e8 4c 37 00 00       	call   397b <fork>
@@ -239,21 +239,21 @@
      23a:	75 4c                	jne    288 <exitiputtest+0x78>
     if(mkdir("iputdir") < 0){
      23c:	83 ec 0c             	sub    $0xc,%esp
-     23f:	68 6f 3e 00 00       	push   $0x3e6f
+     23f:	68 a7 40 00 00       	push   $0x40a7
      244:	e8 a2 37 00 00       	call   39eb <mkdir>
      249:	83 c4 10             	add    $0x10,%esp
      24c:	85 c0                	test   %eax,%eax
      24e:	0f 88 83 00 00 00    	js     2d7 <exitiputtest+0xc7>
     if(chdir("iputdir") < 0){
      254:	83 ec 0c             	sub    $0xc,%esp
-     257:	68 6f 3e 00 00       	push   $0x3e6f
+     257:	68 a7 40 00 00       	push   $0x40a7
      25c:	e8 92 37 00 00       	call   39f3 <chdir>
      261:	83 c4 10             	add    $0x10,%esp
      264:	85 c0                	test   %eax,%eax
      266:	0f 88 82 00 00 00    	js     2ee <exitiputtest+0xde>
     if(unlink("../iputdir") < 0){
      26c:	83 ec 0c             	sub    $0xc,%esp
-     26f:	68 6c 3e 00 00       	push   $0x3e6c
+     26f:	68 a4 40 00 00       	push   $0x40a4
      274:	e8 5a 37 00 00       	call   39d3 <unlink>
      279:	83 c4 10             	add    $0x10,%esp
      27c:	85 c0                	test   %eax,%eax
@@ -265,8 +265,8 @@
      288:	e8 fe 36 00 00       	call   398b <wait>
   printf(stdout, "exitiput test ok\n");
      28d:	83 ec 08             	sub    $0x8,%esp
-     290:	68 c6 3e 00 00       	push   $0x3ec6
-     295:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     290:	68 fe 40 00 00       	push   $0x40fe
+     295:	ff 35 a8 61 00 00    	pushl  0x61a8
      29b:	e8 40 38 00 00       	call   3ae0 <printf>
 }
      2a0:	83 c4 10             	add    $0x10,%esp
@@ -275,32 +275,32 @@
      2a5:	8d 76 00             	lea    0x0(%esi),%esi
       printf(stdout, "unlink ../iputdir failed\n");
      2a8:	83 ec 08             	sub    $0x8,%esp
-     2ab:	68 77 3e 00 00       	push   $0x3e77
-     2b0:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     2ab:	68 af 40 00 00       	push   $0x40af
+     2b0:	ff 35 a8 61 00 00    	pushl  0x61a8
      2b6:	e8 25 38 00 00       	call   3ae0 <printf>
       exit();
      2bb:	e8 c3 36 00 00       	call   3983 <exit>
     printf(stdout, "fork failed\n");
      2c0:	51                   	push   %ecx
      2c1:	51                   	push   %ecx
-     2c2:	68 89 4d 00 00       	push   $0x4d89
-     2c7:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     2c2:	68 c1 4f 00 00       	push   $0x4fc1
+     2c7:	ff 35 a8 61 00 00    	pushl  0x61a8
      2cd:	e8 0e 38 00 00       	call   3ae0 <printf>
     exit();
      2d2:	e8 ac 36 00 00       	call   3983 <exit>
       printf(stdout, "mkdir failed\n");
      2d7:	52                   	push   %edx
      2d8:	52                   	push   %edx
-     2d9:	68 48 3e 00 00       	push   $0x3e48
-     2de:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     2d9:	68 80 40 00 00       	push   $0x4080
+     2de:	ff 35 a8 61 00 00    	pushl  0x61a8
      2e4:	e8 f7 37 00 00       	call   3ae0 <printf>
       exit();
      2e9:	e8 95 36 00 00       	call   3983 <exit>
       printf(stdout, "child chdir failed\n");
      2ee:	50                   	push   %eax
      2ef:	50                   	push   %eax
-     2f0:	68 b2 3e 00 00       	push   $0x3eb2
-     2f5:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     2f0:	68 ea 40 00 00       	push   $0x40ea
+     2f5:	ff 35 a8 61 00 00    	pushl  0x61a8
      2fb:	e8 e0 37 00 00       	call   3ae0 <printf>
       exit();
      300:	e8 7e 36 00 00       	call   3983 <exit>
@@ -314,11 +314,11 @@
      315:	89 e5                	mov    %esp,%ebp
      317:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "openiput test\n");
-     31a:	68 d8 3e 00 00       	push   $0x3ed8
-     31f:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     31a:	68 10 41 00 00       	push   $0x4110
+     31f:	ff 35 a8 61 00 00    	pushl  0x61a8
      325:	e8 b6 37 00 00       	call   3ae0 <printf>
   if(mkdir("oidir") < 0){
-     32a:	c7 04 24 e7 3e 00 00 	movl   $0x3ee7,(%esp)
+     32a:	c7 04 24 1f 41 00 00 	movl   $0x411f,(%esp)
      331:	e8 b5 36 00 00       	call   39eb <mkdir>
      336:	83 c4 10             	add    $0x10,%esp
      339:	85 c0                	test   %eax,%eax
@@ -333,7 +333,7 @@
     int fd = open("oidir", O_RDWR);
      34c:	83 ec 08             	sub    $0x8,%esp
      34f:	6a 02                	push   $0x2
-     351:	68 e7 3e 00 00       	push   $0x3ee7
+     351:	68 1f 41 00 00       	push   $0x411f
      356:	e8 68 36 00 00       	call   39c3 <open>
     if(fd >= 0){
      35b:	83 c4 10             	add    $0x10,%esp
@@ -341,8 +341,8 @@
      360:	78 5e                	js     3c0 <openiputtest+0xb0>
       printf(stdout, "open directory for write succeeded\n");
      362:	83 ec 08             	sub    $0x8,%esp
-     365:	68 6c 4e 00 00       	push   $0x4e6c
-     36a:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     365:	68 a4 50 00 00       	push   $0x50a4
+     36a:	ff 35 a8 61 00 00    	pushl  0x61a8
      370:	e8 6b 37 00 00       	call   3ae0 <printf>
       exit();
      375:	e8 09 36 00 00       	call   3983 <exit>
@@ -352,7 +352,7 @@
      383:	6a 01                	push   $0x1
      385:	e8 89 36 00 00       	call   3a13 <sleep>
   if(unlink("oidir") != 0){
-     38a:	c7 04 24 e7 3e 00 00 	movl   $0x3ee7,(%esp)
+     38a:	c7 04 24 1f 41 00 00 	movl   $0x411f,(%esp)
      391:	e8 3d 36 00 00       	call   39d3 <unlink>
      396:	83 c4 10             	add    $0x10,%esp
      399:	85 c0                	test   %eax,%eax
@@ -361,8 +361,8 @@
      39d:	e8 e9 35 00 00       	call   398b <wait>
   printf(stdout, "openiput test ok\n");
      3a2:	83 ec 08             	sub    $0x8,%esp
-     3a5:	68 10 3f 00 00       	push   $0x3f10
-     3aa:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     3a5:	68 48 41 00 00       	push   $0x4148
+     3aa:	ff 35 a8 61 00 00    	pushl  0x61a8
      3b0:	e8 2b 37 00 00       	call   3ae0 <printf>
      3b5:	83 c4 10             	add    $0x10,%esp
 }
@@ -374,24 +374,24 @@
     printf(stdout, "fork failed\n");
      3c5:	52                   	push   %edx
      3c6:	52                   	push   %edx
-     3c7:	68 89 4d 00 00       	push   $0x4d89
-     3cc:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     3c7:	68 c1 4f 00 00       	push   $0x4fc1
+     3cc:	ff 35 a8 61 00 00    	pushl  0x61a8
      3d2:	e8 09 37 00 00       	call   3ae0 <printf>
     exit();
      3d7:	e8 a7 35 00 00       	call   3983 <exit>
     printf(stdout, "mkdir oidir failed\n");
      3dc:	51                   	push   %ecx
      3dd:	51                   	push   %ecx
-     3de:	68 ed 3e 00 00       	push   $0x3eed
-     3e3:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     3de:	68 25 41 00 00       	push   $0x4125
+     3e3:	ff 35 a8 61 00 00    	pushl  0x61a8
      3e9:	e8 f2 36 00 00       	call   3ae0 <printf>
     exit();
      3ee:	e8 90 35 00 00       	call   3983 <exit>
     printf(stdout, "unlink failed\n");
      3f3:	50                   	push   %eax
      3f4:	50                   	push   %eax
-     3f5:	68 01 3f 00 00       	push   $0x3f01
-     3fa:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     3f5:	68 39 41 00 00       	push   $0x4139
+     3fa:	ff 35 a8 61 00 00    	pushl  0x61a8
      400:	e8 db 36 00 00       	call   3ae0 <printf>
     exit();
      405:	e8 79 35 00 00       	call   3983 <exit>
@@ -404,14 +404,14 @@
      415:	89 e5                	mov    %esp,%ebp
      417:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "open test\n");
-     41a:	68 22 3f 00 00       	push   $0x3f22
-     41f:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     41a:	68 5a 41 00 00       	push   $0x415a
+     41f:	ff 35 a8 61 00 00    	pushl  0x61a8
      425:	e8 b6 36 00 00       	call   3ae0 <printf>
   fd = open("echo", 0);
      42a:	58                   	pop    %eax
      42b:	5a                   	pop    %edx
      42c:	6a 00                	push   $0x0
-     42e:	68 2d 3f 00 00       	push   $0x3f2d
+     42e:	68 65 41 00 00       	push   $0x4165
      433:	e8 8b 35 00 00       	call   39c3 <open>
   if(fd < 0){
      438:	83 c4 10             	add    $0x10,%esp
@@ -425,7 +425,7 @@
      448:	5a                   	pop    %edx
      449:	59                   	pop    %ecx
      44a:	6a 00                	push   $0x0
-     44c:	68 45 3f 00 00       	push   $0x3f45
+     44c:	68 7d 41 00 00       	push   $0x417d
      451:	e8 6d 35 00 00       	call   39c3 <open>
   if(fd >= 0){
      456:	83 c4 10             	add    $0x10,%esp
@@ -433,8 +433,8 @@
      45b:	79 2f                	jns    48c <opentest+0x7c>
   printf(stdout, "open test ok\n");
      45d:	83 ec 08             	sub    $0x8,%esp
-     460:	68 70 3f 00 00       	push   $0x3f70
-     465:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     460:	68 a8 41 00 00       	push   $0x41a8
+     465:	ff 35 a8 61 00 00    	pushl  0x61a8
      46b:	e8 70 36 00 00       	call   3ae0 <printf>
 }
      470:	83 c4 10             	add    $0x10,%esp
@@ -443,16 +443,16 @@
     printf(stdout, "open echo failed!\n");
      475:	50                   	push   %eax
      476:	50                   	push   %eax
-     477:	68 32 3f 00 00       	push   $0x3f32
-     47c:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     477:	68 6a 41 00 00       	push   $0x416a
+     47c:	ff 35 a8 61 00 00    	pushl  0x61a8
      482:	e8 59 36 00 00       	call   3ae0 <printf>
     exit();
      487:	e8 f7 34 00 00       	call   3983 <exit>
     printf(stdout, "open doesnotexist succeeded!\n");
      48c:	50                   	push   %eax
      48d:	50                   	push   %eax
-     48e:	68 52 3f 00 00       	push   $0x3f52
-     493:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     48e:	68 8a 41 00 00       	push   $0x418a
+     493:	ff 35 a8 61 00 00    	pushl  0x61a8
      499:	e8 42 36 00 00       	call   3ae0 <printf>
     exit();
      49e:	e8 e0 34 00 00       	call   3983 <exit>
@@ -468,14 +468,14 @@
      4b8:	53                   	push   %ebx
   printf(stdout, "small file test\n");
      4b9:	83 ec 08             	sub    $0x8,%esp
-     4bc:	68 7e 3f 00 00       	push   $0x3f7e
-     4c1:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     4bc:	68 b6 41 00 00       	push   $0x41b6
+     4c1:	ff 35 a8 61 00 00    	pushl  0x61a8
      4c7:	e8 14 36 00 00       	call   3ae0 <printf>
   fd = open("small", O_CREATE|O_RDWR);
      4cc:	58                   	pop    %eax
      4cd:	5a                   	pop    %edx
      4ce:	68 02 02 00 00       	push   $0x202
-     4d3:	68 8f 3f 00 00       	push   $0x3f8f
+     4d3:	68 c7 41 00 00       	push   $0x41c7
      4d8:	e8 e6 34 00 00       	call   39c3 <open>
   if(fd >= 0){
      4dd:	83 c4 10             	add    $0x10,%esp
@@ -487,15 +487,15 @@
   for(i = 0; i < 100; i++){
      4ed:	31 db                	xor    %ebx,%ebx
     printf(stdout, "creat small succeeded; ok\n");
-     4ef:	68 95 3f 00 00       	push   $0x3f95
-     4f4:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     4ef:	68 cd 41 00 00       	push   $0x41cd
+     4f4:	ff 35 a8 61 00 00    	pushl  0x61a8
      4fa:	e8 e1 35 00 00       	call   3ae0 <printf>
      4ff:	83 c4 10             	add    $0x10,%esp
      502:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(write(fd, "aaaaaaaaaa", 10) != 10){
      508:	83 ec 04             	sub    $0x4,%esp
      50b:	6a 0a                	push   $0xa
-     50d:	68 cc 3f 00 00       	push   $0x3fcc
+     50d:	68 04 42 00 00       	push   $0x4204
      512:	56                   	push   %esi
      513:	e8 8b 34 00 00       	call   39a3 <write>
      518:	83 c4 10             	add    $0x10,%esp
@@ -504,7 +504,7 @@
     if(write(fd, "bbbbbbbbbb", 10) != 10){
      524:	83 ec 04             	sub    $0x4,%esp
      527:	6a 0a                	push   $0xa
-     529:	68 d7 3f 00 00       	push   $0x3fd7
+     529:	68 0f 42 00 00       	push   $0x420f
      52e:	56                   	push   %esi
      52f:	e8 6f 34 00 00       	call   39a3 <write>
      534:	83 c4 10             	add    $0x10,%esp
@@ -516,8 +516,8 @@
      546:	75 c0                	jne    508 <writetest+0x58>
   printf(stdout, "writes ok\n");
      548:	83 ec 08             	sub    $0x8,%esp
-     54b:	68 e2 3f 00 00       	push   $0x3fe2
-     550:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     54b:	68 1a 42 00 00       	push   $0x421a
+     550:	ff 35 a8 61 00 00    	pushl  0x61a8
      556:	e8 85 35 00 00       	call   3ae0 <printf>
   close(fd);
      55b:	89 34 24             	mov    %esi,(%esp)
@@ -526,7 +526,7 @@
      563:	5b                   	pop    %ebx
      564:	5e                   	pop    %esi
      565:	6a 00                	push   $0x0
-     567:	68 8f 3f 00 00       	push   $0x3f8f
+     567:	68 c7 41 00 00       	push   $0x41c7
      56c:	e8 52 34 00 00       	call   39c3 <open>
   if(fd >= 0){
      571:	83 c4 10             	add    $0x10,%esp
@@ -537,13 +537,13 @@
      578:	0f 88 b1 00 00 00    	js     62f <writetest+0x17f>
     printf(stdout, "open small succeeded ok\n");
      57e:	83 ec 08             	sub    $0x8,%esp
-     581:	68 ed 3f 00 00       	push   $0x3fed
-     586:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     581:	68 25 42 00 00       	push   $0x4225
+     586:	ff 35 a8 61 00 00    	pushl  0x61a8
      58c:	e8 4f 35 00 00       	call   3ae0 <printf>
   i = read(fd, buf, 2000);
      591:	83 c4 0c             	add    $0xc,%esp
      594:	68 d0 07 00 00       	push   $0x7d0
-     599:	68 c0 86 00 00       	push   $0x86c0
+     599:	68 60 93 00 00       	push   $0x9360
      59e:	53                   	push   %ebx
      59f:	e8 f7 33 00 00       	call   399b <read>
   if(i == 2000){
@@ -552,22 +552,22 @@
      5ac:	0f 85 94 00 00 00    	jne    646 <writetest+0x196>
     printf(stdout, "read succeeded ok\n");
      5b2:	83 ec 08             	sub    $0x8,%esp
-     5b5:	68 21 40 00 00       	push   $0x4021
-     5ba:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     5b5:	68 59 42 00 00       	push   $0x4259
+     5ba:	ff 35 a8 61 00 00    	pushl  0x61a8
      5c0:	e8 1b 35 00 00       	call   3ae0 <printf>
   close(fd);
      5c5:	89 1c 24             	mov    %ebx,(%esp)
      5c8:	e8 de 33 00 00       	call   39ab <close>
   if(unlink("small") < 0){
-     5cd:	c7 04 24 8f 3f 00 00 	movl   $0x3f8f,(%esp)
+     5cd:	c7 04 24 c7 41 00 00 	movl   $0x41c7,(%esp)
      5d4:	e8 fa 33 00 00       	call   39d3 <unlink>
      5d9:	83 c4 10             	add    $0x10,%esp
      5dc:	85 c0                	test   %eax,%eax
      5de:	78 7d                	js     65d <writetest+0x1ad>
   printf(stdout, "small file test ok\n");
      5e0:	83 ec 08             	sub    $0x8,%esp
-     5e3:	68 49 40 00 00       	push   $0x4049
-     5e8:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     5e3:	68 81 42 00 00       	push   $0x4281
+     5e8:	ff 35 a8 61 00 00    	pushl  0x61a8
      5ee:	e8 ed 34 00 00       	call   3ae0 <printf>
 }
      5f3:	83 c4 10             	add    $0x10,%esp
@@ -579,48 +579,48 @@
       printf(stdout, "error: write aa %d new file failed\n", i);
      5fd:	83 ec 04             	sub    $0x4,%esp
      600:	53                   	push   %ebx
-     601:	68 90 4e 00 00       	push   $0x4e90
-     606:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     601:	68 c8 50 00 00       	push   $0x50c8
+     606:	ff 35 a8 61 00 00    	pushl  0x61a8
      60c:	e8 cf 34 00 00       	call   3ae0 <printf>
       exit();
      611:	e8 6d 33 00 00       	call   3983 <exit>
       printf(stdout, "error: write bb %d new file failed\n", i);
      616:	83 ec 04             	sub    $0x4,%esp
      619:	53                   	push   %ebx
-     61a:	68 b4 4e 00 00       	push   $0x4eb4
-     61f:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     61a:	68 ec 50 00 00       	push   $0x50ec
+     61f:	ff 35 a8 61 00 00    	pushl  0x61a8
      625:	e8 b6 34 00 00       	call   3ae0 <printf>
       exit();
      62a:	e8 54 33 00 00       	call   3983 <exit>
     printf(stdout, "error: open small failed!\n");
      62f:	51                   	push   %ecx
      630:	51                   	push   %ecx
-     631:	68 06 40 00 00       	push   $0x4006
-     636:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     631:	68 3e 42 00 00       	push   $0x423e
+     636:	ff 35 a8 61 00 00    	pushl  0x61a8
      63c:	e8 9f 34 00 00       	call   3ae0 <printf>
     exit();
      641:	e8 3d 33 00 00       	call   3983 <exit>
     printf(stdout, "read failed\n");
      646:	52                   	push   %edx
      647:	52                   	push   %edx
-     648:	68 4d 43 00 00       	push   $0x434d
-     64d:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     648:	68 85 45 00 00       	push   $0x4585
+     64d:	ff 35 a8 61 00 00    	pushl  0x61a8
      653:	e8 88 34 00 00       	call   3ae0 <printf>
     exit();
      658:	e8 26 33 00 00       	call   3983 <exit>
     printf(stdout, "unlink small failed\n");
      65d:	50                   	push   %eax
      65e:	50                   	push   %eax
-     65f:	68 34 40 00 00       	push   $0x4034
-     664:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     65f:	68 6c 42 00 00       	push   $0x426c
+     664:	ff 35 a8 61 00 00    	pushl  0x61a8
      66a:	e8 71 34 00 00       	call   3ae0 <printf>
     exit();
      66f:	e8 0f 33 00 00       	call   3983 <exit>
     printf(stdout, "error: creat small failed!\n");
      674:	50                   	push   %eax
      675:	50                   	push   %eax
-     676:	68 b0 3f 00 00       	push   $0x3fb0
-     67b:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     676:	68 e8 41 00 00       	push   $0x41e8
+     67b:	ff 35 a8 61 00 00    	pushl  0x61a8
      681:	e8 5a 34 00 00       	call   3ae0 <printf>
     exit();
      686:	e8 f8 32 00 00       	call   3983 <exit>
@@ -636,14 +636,14 @@
      698:	53                   	push   %ebx
   printf(stdout, "big files test\n");
      699:	83 ec 08             	sub    $0x8,%esp
-     69c:	68 5d 40 00 00       	push   $0x405d
-     6a1:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     69c:	68 95 42 00 00       	push   $0x4295
+     6a1:	ff 35 a8 61 00 00    	pushl  0x61a8
      6a7:	e8 34 34 00 00       	call   3ae0 <printf>
   fd = open("big", O_CREATE|O_RDWR);
      6ac:	58                   	pop    %eax
      6ad:	5a                   	pop    %edx
      6ae:	68 02 02 00 00       	push   $0x202
-     6b3:	68 d7 40 00 00       	push   $0x40d7
+     6b3:	68 0f 43 00 00       	push   $0x430f
      6b8:	e8 06 33 00 00       	call   39c3 <open>
   if(fd < 0){
      6bd:	83 c4 10             	add    $0x10,%esp
@@ -656,10 +656,10 @@
     if(write(fd, buf, 512) != 512){
      6d0:	83 ec 04             	sub    $0x4,%esp
     ((int*)buf)[0] = i;
-     6d3:	89 1d c0 86 00 00    	mov    %ebx,0x86c0
+     6d3:	89 1d 60 93 00 00    	mov    %ebx,0x9360
     if(write(fd, buf, 512) != 512){
      6d9:	68 00 02 00 00       	push   $0x200
-     6de:	68 c0 86 00 00       	push   $0x86c0
+     6de:	68 60 93 00 00       	push   $0x9360
      6e3:	56                   	push   %esi
      6e4:	e8 ba 32 00 00       	call   39a3 <write>
      6e9:	83 c4 10             	add    $0x10,%esp
@@ -677,7 +677,7 @@
      70b:	5b                   	pop    %ebx
      70c:	5e                   	pop    %esi
      70d:	6a 00                	push   $0x0
-     70f:	68 d7 40 00 00       	push   $0x40d7
+     70f:	68 0f 43 00 00       	push   $0x430f
      714:	e8 aa 32 00 00       	call   39c3 <open>
   if(fd < 0){
      719:	83 c4 10             	add    $0x10,%esp
@@ -694,7 +694,7 @@
      730:	3d 00 02 00 00       	cmp    $0x200,%eax
      735:	0f 85 9f 00 00 00    	jne    7da <writetest1+0x14a>
     if(((int*)buf)[0] != n){
-     73b:	a1 c0 86 00 00       	mov    0x86c0,%eax
+     73b:	a1 60 93 00 00       	mov    0x9360,%eax
      740:	39 f0                	cmp    %esi,%eax
      742:	75 7f                	jne    7c3 <writetest1+0x133>
     n++;
@@ -702,7 +702,7 @@
     i = read(fd, buf, 512);
      747:	83 ec 04             	sub    $0x4,%esp
      74a:	68 00 02 00 00       	push   $0x200
-     74f:	68 c0 86 00 00       	push   $0x86c0
+     74f:	68 60 93 00 00       	push   $0x9360
      754:	53                   	push   %ebx
      755:	e8 41 32 00 00       	call   399b <read>
     if(i == 0){
@@ -717,15 +717,15 @@
      770:	53                   	push   %ebx
      771:	e8 35 32 00 00       	call   39ab <close>
   if(unlink("big") < 0){
-     776:	c7 04 24 d7 40 00 00 	movl   $0x40d7,(%esp)
+     776:	c7 04 24 0f 43 00 00 	movl   $0x430f,(%esp)
      77d:	e8 51 32 00 00       	call   39d3 <unlink>
      782:	83 c4 10             	add    $0x10,%esp
      785:	85 c0                	test   %eax,%eax
      787:	0f 88 af 00 00 00    	js     83c <writetest1+0x1ac>
   printf(stdout, "big files ok\n");
      78d:	83 ec 08             	sub    $0x8,%esp
-     790:	68 fe 40 00 00       	push   $0x40fe
-     795:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     790:	68 36 43 00 00       	push   $0x4336
+     795:	ff 35 a8 61 00 00    	pushl  0x61a8
      79b:	e8 40 33 00 00       	call   3ae0 <printf>
 }
      7a0:	83 c4 10             	add    $0x10,%esp
@@ -737,56 +737,56 @@
       printf(stdout, "error: write big file failed\n", i);
      7aa:	83 ec 04             	sub    $0x4,%esp
      7ad:	53                   	push   %ebx
-     7ae:	68 87 40 00 00       	push   $0x4087
-     7b3:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     7ae:	68 bf 42 00 00       	push   $0x42bf
+     7b3:	ff 35 a8 61 00 00    	pushl  0x61a8
      7b9:	e8 22 33 00 00       	call   3ae0 <printf>
       exit();
      7be:	e8 c0 31 00 00       	call   3983 <exit>
       printf(stdout, "read content of block %d is %d\n",
      7c3:	50                   	push   %eax
      7c4:	56                   	push   %esi
-     7c5:	68 d8 4e 00 00       	push   $0x4ed8
-     7ca:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     7c5:	68 10 51 00 00       	push   $0x5110
+     7ca:	ff 35 a8 61 00 00    	pushl  0x61a8
      7d0:	e8 0b 33 00 00       	call   3ae0 <printf>
       exit();
      7d5:	e8 a9 31 00 00       	call   3983 <exit>
       printf(stdout, "read failed %d\n", i);
      7da:	83 ec 04             	sub    $0x4,%esp
      7dd:	50                   	push   %eax
-     7de:	68 db 40 00 00       	push   $0x40db
-     7e3:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     7de:	68 13 43 00 00       	push   $0x4313
+     7e3:	ff 35 a8 61 00 00    	pushl  0x61a8
      7e9:	e8 f2 32 00 00       	call   3ae0 <printf>
       exit();
      7ee:	e8 90 31 00 00       	call   3983 <exit>
         printf(stdout, "read only %d blocks from big", n);
      7f3:	52                   	push   %edx
      7f4:	68 8b 00 00 00       	push   $0x8b
-     7f9:	68 be 40 00 00       	push   $0x40be
-     7fe:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     7f9:	68 f6 42 00 00       	push   $0x42f6
+     7fe:	ff 35 a8 61 00 00    	pushl  0x61a8
      804:	e8 d7 32 00 00       	call   3ae0 <printf>
         exit();
      809:	e8 75 31 00 00       	call   3983 <exit>
     printf(stdout, "error: open big failed!\n");
      80e:	51                   	push   %ecx
      80f:	51                   	push   %ecx
-     810:	68 a5 40 00 00       	push   $0x40a5
-     815:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     810:	68 dd 42 00 00       	push   $0x42dd
+     815:	ff 35 a8 61 00 00    	pushl  0x61a8
      81b:	e8 c0 32 00 00       	call   3ae0 <printf>
     exit();
      820:	e8 5e 31 00 00       	call   3983 <exit>
     printf(stdout, "error: creat big failed!\n");
      825:	50                   	push   %eax
      826:	50                   	push   %eax
-     827:	68 6d 40 00 00       	push   $0x406d
-     82c:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     827:	68 a5 42 00 00       	push   $0x42a5
+     82c:	ff 35 a8 61 00 00    	pushl  0x61a8
      832:	e8 a9 32 00 00       	call   3ae0 <printf>
     exit();
      837:	e8 47 31 00 00       	call   3983 <exit>
     printf(stdout, "unlink big failed\n");
      83c:	50                   	push   %eax
      83d:	50                   	push   %eax
-     83e:	68 eb 40 00 00       	push   $0x40eb
-     843:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     83e:	68 23 43 00 00       	push   $0x4323
+     843:	ff 35 a8 61 00 00    	pushl  0x61a8
      849:	e8 92 32 00 00       	call   3ae0 <printf>
     exit();
      84e:	e8 30 31 00 00       	call   3983 <exit>
@@ -804,24 +804,24 @@
 {
      86d:	83 ec 0c             	sub    $0xc,%esp
   printf(stdout, "many creates, followed by unlink test\n");
-     870:	68 f8 4e 00 00       	push   $0x4ef8
-     875:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     870:	68 30 51 00 00       	push   $0x5130
+     875:	ff 35 a8 61 00 00    	pushl  0x61a8
      87b:	e8 60 32 00 00       	call   3ae0 <printf>
   name[0] = 'a';
-     880:	c6 05 c0 a6 00 00 61 	movb   $0x61,0xa6c0
+     880:	c6 05 60 b3 00 00 61 	movb   $0x61,0xb360
   name[2] = '\0';
      887:	83 c4 10             	add    $0x10,%esp
-     88a:	c6 05 c2 a6 00 00 00 	movb   $0x0,0xa6c2
+     88a:	c6 05 62 b3 00 00 00 	movb   $0x0,0xb362
   for(i = 0; i < 52; i++){
      891:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     fd = open(name, O_CREATE|O_RDWR);
      898:	83 ec 08             	sub    $0x8,%esp
     name[1] = '0' + i;
-     89b:	88 1d c1 a6 00 00    	mov    %bl,0xa6c1
+     89b:	88 1d 61 b3 00 00    	mov    %bl,0xb361
     fd = open(name, O_CREATE|O_RDWR);
      8a1:	83 c3 01             	add    $0x1,%ebx
      8a4:	68 02 02 00 00       	push   $0x202
-     8a9:	68 c0 a6 00 00       	push   $0xa6c0
+     8a9:	68 60 b3 00 00       	push   $0xb360
      8ae:	e8 10 31 00 00       	call   39c3 <open>
     close(fd);
      8b3:	89 04 24             	mov    %eax,(%esp)
@@ -831,20 +831,20 @@
      8be:	80 fb 64             	cmp    $0x64,%bl
      8c1:	75 d5                	jne    898 <createtest+0x38>
   name[0] = 'a';
-     8c3:	c6 05 c0 a6 00 00 61 	movb   $0x61,0xa6c0
+     8c3:	c6 05 60 b3 00 00 61 	movb   $0x61,0xb360
   name[2] = '\0';
      8ca:	bb 30 00 00 00       	mov    $0x30,%ebx
-     8cf:	c6 05 c2 a6 00 00 00 	movb   $0x0,0xa6c2
+     8cf:	c6 05 62 b3 00 00 00 	movb   $0x0,0xb362
   for(i = 0; i < 52; i++){
      8d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      8dd:	8d 76 00             	lea    0x0(%esi),%esi
     unlink(name);
      8e0:	83 ec 0c             	sub    $0xc,%esp
     name[1] = '0' + i;
-     8e3:	88 1d c1 a6 00 00    	mov    %bl,0xa6c1
+     8e3:	88 1d 61 b3 00 00    	mov    %bl,0xb361
     unlink(name);
      8e9:	83 c3 01             	add    $0x1,%ebx
-     8ec:	68 c0 a6 00 00       	push   $0xa6c0
+     8ec:	68 60 b3 00 00       	push   $0xb360
      8f1:	e8 dd 30 00 00       	call   39d3 <unlink>
   for(i = 0; i < 52; i++){
      8f6:	83 c4 10             	add    $0x10,%esp
@@ -852,8 +852,8 @@
      8fc:	75 e2                	jne    8e0 <createtest+0x80>
   printf(stdout, "many creates, followed by unlink; ok\n");
      8fe:	83 ec 08             	sub    $0x8,%esp
-     901:	68 20 4f 00 00       	push   $0x4f20
-     906:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     901:	68 58 51 00 00       	push   $0x5158
+     906:	ff 35 a8 61 00 00    	pushl  0x61a8
      90c:	e8 cf 31 00 00       	call   3ae0 <printf>
 }
      911:	8b 5d fc             	mov    -0x4(%ebp),%ebx
@@ -869,40 +869,40 @@
      925:	89 e5                	mov    %esp,%ebp
      927:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "mkdir test\n");
-     92a:	68 0c 41 00 00       	push   $0x410c
-     92f:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     92a:	68 44 43 00 00       	push   $0x4344
+     92f:	ff 35 a8 61 00 00    	pushl  0x61a8
      935:	e8 a6 31 00 00       	call   3ae0 <printf>
   if(mkdir("dir0") < 0){
-     93a:	c7 04 24 18 41 00 00 	movl   $0x4118,(%esp)
+     93a:	c7 04 24 50 43 00 00 	movl   $0x4350,(%esp)
      941:	e8 a5 30 00 00       	call   39eb <mkdir>
      946:	83 c4 10             	add    $0x10,%esp
      949:	85 c0                	test   %eax,%eax
      94b:	78 58                	js     9a5 <dirtest+0x85>
   if(chdir("dir0") < 0){
      94d:	83 ec 0c             	sub    $0xc,%esp
-     950:	68 18 41 00 00       	push   $0x4118
+     950:	68 50 43 00 00       	push   $0x4350
      955:	e8 99 30 00 00       	call   39f3 <chdir>
      95a:	83 c4 10             	add    $0x10,%esp
      95d:	85 c0                	test   %eax,%eax
      95f:	0f 88 85 00 00 00    	js     9ea <dirtest+0xca>
   if(chdir("..") < 0){
      965:	83 ec 0c             	sub    $0xc,%esp
-     968:	68 bd 46 00 00       	push   $0x46bd
+     968:	68 f5 48 00 00       	push   $0x48f5
      96d:	e8 81 30 00 00       	call   39f3 <chdir>
      972:	83 c4 10             	add    $0x10,%esp
      975:	85 c0                	test   %eax,%eax
      977:	78 5a                	js     9d3 <dirtest+0xb3>
   if(unlink("dir0") < 0){
      979:	83 ec 0c             	sub    $0xc,%esp
-     97c:	68 18 41 00 00       	push   $0x4118
+     97c:	68 50 43 00 00       	push   $0x4350
      981:	e8 4d 30 00 00       	call   39d3 <unlink>
      986:	83 c4 10             	add    $0x10,%esp
      989:	85 c0                	test   %eax,%eax
      98b:	78 2f                	js     9bc <dirtest+0x9c>
   printf(stdout, "mkdir test ok\n");
      98d:	83 ec 08             	sub    $0x8,%esp
-     990:	68 55 41 00 00       	push   $0x4155
-     995:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     990:	68 8d 43 00 00       	push   $0x438d
+     995:	ff 35 a8 61 00 00    	pushl  0x61a8
      99b:	e8 40 31 00 00       	call   3ae0 <printf>
 }
      9a0:	83 c4 10             	add    $0x10,%esp
@@ -911,32 +911,32 @@
     printf(stdout, "mkdir failed\n");
      9a5:	50                   	push   %eax
      9a6:	50                   	push   %eax
-     9a7:	68 48 3e 00 00       	push   $0x3e48
-     9ac:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     9a7:	68 80 40 00 00       	push   $0x4080
+     9ac:	ff 35 a8 61 00 00    	pushl  0x61a8
      9b2:	e8 29 31 00 00       	call   3ae0 <printf>
     exit();
      9b7:	e8 c7 2f 00 00       	call   3983 <exit>
     printf(stdout, "unlink dir0 failed\n");
      9bc:	50                   	push   %eax
      9bd:	50                   	push   %eax
-     9be:	68 41 41 00 00       	push   $0x4141
-     9c3:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     9be:	68 79 43 00 00       	push   $0x4379
+     9c3:	ff 35 a8 61 00 00    	pushl  0x61a8
      9c9:	e8 12 31 00 00       	call   3ae0 <printf>
     exit();
      9ce:	e8 b0 2f 00 00       	call   3983 <exit>
     printf(stdout, "chdir .. failed\n");
      9d3:	52                   	push   %edx
      9d4:	52                   	push   %edx
-     9d5:	68 30 41 00 00       	push   $0x4130
-     9da:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     9d5:	68 68 43 00 00       	push   $0x4368
+     9da:	ff 35 a8 61 00 00    	pushl  0x61a8
      9e0:	e8 fb 30 00 00       	call   3ae0 <printf>
     exit();
      9e5:	e8 99 2f 00 00       	call   3983 <exit>
     printf(stdout, "chdir dir0 failed\n");
      9ea:	51                   	push   %ecx
      9eb:	51                   	push   %ecx
-     9ec:	68 1d 41 00 00       	push   $0x411d
-     9f1:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     9ec:	68 55 43 00 00       	push   $0x4355
+     9f1:	ff 35 a8 61 00 00    	pushl  0x61a8
      9f7:	e8 e4 30 00 00       	call   3ae0 <printf>
     exit();
      9fc:	e8 82 2f 00 00       	call   3983 <exit>
@@ -951,14 +951,14 @@
      a15:	89 e5                	mov    %esp,%ebp
      a17:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "exec test\n");
-     a1a:	68 64 41 00 00       	push   $0x4164
-     a1f:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     a1a:	68 9c 43 00 00       	push   $0x439c
+     a1f:	ff 35 a8 61 00 00    	pushl  0x61a8
      a25:	e8 b6 30 00 00       	call   3ae0 <printf>
   if(exec("echo", echoargv) < 0){
      a2a:	5a                   	pop    %edx
      a2b:	59                   	pop    %ecx
-     a2c:	68 e4 5e 00 00       	push   $0x5ee4
-     a31:	68 2d 3f 00 00       	push   $0x3f2d
+     a2c:	68 ac 61 00 00       	push   $0x61ac
+     a31:	68 65 41 00 00       	push   $0x4165
      a36:	e8 80 2f 00 00       	call   39bb <exec>
      a3b:	83 c4 10             	add    $0x10,%esp
      a3e:	85 c0                	test   %eax,%eax
@@ -969,8 +969,8 @@
     printf(stdout, "exec echo failed\n");
      a44:	50                   	push   %eax
      a45:	50                   	push   %eax
-     a46:	68 6f 41 00 00       	push   $0x416f
-     a4b:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+     a46:	68 a7 43 00 00       	push   $0x43a7
+     a4b:	ff 35 a8 61 00 00    	pushl  0x61a8
      a51:	e8 8a 30 00 00       	call   3ae0 <printf>
     exit();
      a56:	e8 28 2f 00 00       	call   3983 <exit>
@@ -1017,7 +1017,7 @@
      aad:	83 c4 10             	add    $0x10,%esp
      ab0:	83 ec 04             	sub    $0x4,%esp
      ab3:	56                   	push   %esi
-     ab4:	68 c0 86 00 00       	push   $0x86c0
+     ab4:	68 60 93 00 00       	push   $0x9360
      ab9:	ff 75 e0             	pushl  -0x20(%ebp)
      abc:	e8 da 2e 00 00       	call   399b <read>
      ac1:	83 c4 10             	add    $0x10,%esp
@@ -1032,7 +1032,7 @@
         if((buf[i] & 0xff) != (seq++ & 0xff)){
      ad8:	89 da                	mov    %ebx,%edx
      ada:	83 c3 01             	add    $0x1,%ebx
-     add:	38 90 c0 86 00 00    	cmp    %dl,0x86c0(%eax)
+     add:	38 90 60 93 00 00    	cmp    %dl,0x9360(%eax)
      ae3:	75 1c                	jne    b01 <pipe1+0xa1>
       for(i = 0; i < n; i++){
      ae5:	83 c0 01             	add    $0x1,%eax
@@ -1048,7 +1048,7 @@
      aff:	eb af                	jmp    ab0 <pipe1+0x50>
           printf(1, "pipe1 oops 2\n");
      b01:	83 ec 08             	sub    $0x8,%esp
-     b04:	68 9e 41 00 00       	push   $0x419e
+     b04:	68 d6 43 00 00       	push   $0x43d6
      b09:	6a 01                	push   $0x1
      b0b:	e8 d0 2f 00 00       	call   3ae0 <printf>
           return;
@@ -1076,7 +1076,7 @@
       for(i = 0; i < 1033; i++)
      b33:	83 c0 01             	add    $0x1,%eax
         buf[i] = seq++;
-     b36:	88 90 bf 86 00 00    	mov    %dl,0x86bf(%eax)
+     b36:	88 90 5f 93 00 00    	mov    %dl,0x935f(%eax)
       for(i = 0; i < 1033; i++)
      b3c:	3d 09 04 00 00       	cmp    $0x409,%eax
      b41:	75 ed                	jne    b30 <pipe1+0xd0>
@@ -1084,7 +1084,7 @@
      b43:	83 ec 04             	sub    $0x4,%esp
      b46:	81 c3 09 04 00 00    	add    $0x409,%ebx
      b4c:	68 09 04 00 00       	push   $0x409
-     b51:	68 c0 86 00 00       	push   $0x86c0
+     b51:	68 60 93 00 00       	push   $0x9360
      b56:	ff 75 e4             	pushl  -0x1c(%ebp)
      b59:	e8 45 2e 00 00       	call   39a3 <write>
      b5e:	83 c4 10             	add    $0x10,%esp
@@ -1107,7 +1107,7 @@
   printf(1, "pipe1 ok\n");
      b8e:	5a                   	pop    %edx
      b8f:	59                   	pop    %ecx
-     b90:	68 c3 41 00 00       	push   $0x41c3
+     b90:	68 fb 43 00 00       	push   $0x43fb
      b95:	6a 01                	push   $0x1
      b97:	e8 44 2f 00 00       	call   3ae0 <printf>
      b9c:	83 c4 10             	add    $0x10,%esp
@@ -1115,7 +1115,7 @@
       printf(1, "pipe1 oops 3 total %d\n", total);
      ba4:	53                   	push   %ebx
      ba5:	ff 75 d4             	pushl  -0x2c(%ebp)
-     ba8:	68 ac 41 00 00       	push   $0x41ac
+     ba8:	68 e4 43 00 00       	push   $0x43e4
      bad:	6a 01                	push   $0x1
      baf:	e8 2c 2f 00 00       	call   3ae0 <printf>
       exit();
@@ -1123,7 +1123,7 @@
     printf(1, "pipe() failed\n");
      bb9:	57                   	push   %edi
      bba:	57                   	push   %edi
-     bbb:	68 81 41 00 00       	push   $0x4181
+     bbb:	68 b9 43 00 00       	push   $0x43b9
      bc0:	6a 01                	push   $0x1
      bc2:	e8 19 2f 00 00       	call   3ae0 <printf>
     exit();
@@ -1131,7 +1131,7 @@
     printf(1, "fork() failed\n");
      bcc:	50                   	push   %eax
      bcd:	50                   	push   %eax
-     bce:	68 cd 41 00 00       	push   $0x41cd
+     bce:	68 05 44 00 00       	push   $0x4405
      bd3:	6a 01                	push   $0x1
      bd5:	e8 06 2f 00 00       	call   3ae0 <printf>
     exit();
@@ -1139,7 +1139,7 @@
         printf(1, "pipe1 oops 1\n");
      bdf:	56                   	push   %esi
      be0:	56                   	push   %esi
-     be1:	68 90 41 00 00       	push   $0x4190
+     be1:	68 c8 43 00 00       	push   $0x43c8
      be6:	6a 01                	push   $0x1
      be8:	e8 f3 2e 00 00       	call   3ae0 <printf>
         exit();
@@ -1157,7 +1157,7 @@
      c09:	53                   	push   %ebx
      c0a:	83 ec 24             	sub    $0x24,%esp
   printf(1, "preempt: ");
-     c0d:	68 dc 41 00 00       	push   $0x41dc
+     c0d:	68 14 44 00 00       	push   $0x4414
      c12:	6a 01                	push   $0x1
      c14:	e8 c7 2e 00 00       	call   3ae0 <printf>
   pid1 = fork();
@@ -1201,7 +1201,7 @@
     if(write(pfds[1], "x", 1) != 1)
      c65:	83 c4 0c             	add    $0xc,%esp
      c68:	6a 01                	push   $0x1
-     c6a:	68 a1 47 00 00       	push   $0x47a1
+     c6a:	68 d9 49 00 00       	push   $0x49d9
      c6f:	ff 75 e4             	pushl  -0x1c(%ebp)
      c72:	e8 2c 2d 00 00       	call   39a3 <write>
      c77:	83 c4 10             	add    $0x10,%esp
@@ -1223,7 +1223,7 @@
   if(read(pfds[0], buf, sizeof(buf)) != 1){
      ca3:	83 c4 0c             	add    $0xc,%esp
      ca6:	68 00 20 00 00       	push   $0x2000
-     cab:	68 c0 86 00 00       	push   $0x86c0
+     cab:	68 60 93 00 00       	push   $0x9360
      cb0:	ff 75 e0             	pushl  -0x20(%ebp)
      cb3:	e8 e3 2c 00 00       	call   399b <read>
      cb8:	83 c4 10             	add    $0x10,%esp
@@ -1236,7 +1236,7 @@
   printf(1, "kill... ");
      ccb:	58                   	pop    %eax
      ccc:	5a                   	pop    %edx
-     ccd:	68 0d 42 00 00       	push   $0x420d
+     ccd:	68 45 44 00 00       	push   $0x4445
      cd2:	6a 01                	push   $0x1
      cd4:	e8 07 2e 00 00       	call   3ae0 <printf>
   kill(pid1);
@@ -1251,7 +1251,7 @@
   printf(1, "wait... ");
      cf1:	59                   	pop    %ecx
      cf2:	5b                   	pop    %ebx
-     cf3:	68 16 42 00 00       	push   $0x4216
+     cf3:	68 4e 44 00 00       	push   $0x444e
      cf8:	6a 01                	push   $0x1
      cfa:	e8 e1 2d 00 00       	call   3ae0 <printf>
   wait();
@@ -1263,7 +1263,7 @@
   printf(1, "preempt ok\n");
      d0e:	5e                   	pop    %esi
      d0f:	5f                   	pop    %edi
-     d10:	68 1f 42 00 00       	push   $0x421f
+     d10:	68 57 44 00 00       	push   $0x4457
      d15:	6a 01                	push   $0x1
      d17:	e8 c4 2d 00 00       	call   3ae0 <printf>
      d1c:	83 c4 10             	add    $0x10,%esp
@@ -1276,14 +1276,14 @@
      d26:	c3                   	ret    
       printf(1, "preempt write error");
      d27:	83 ec 08             	sub    $0x8,%esp
-     d2a:	68 e6 41 00 00       	push   $0x41e6
+     d2a:	68 1e 44 00 00       	push   $0x441e
      d2f:	6a 01                	push   $0x1
      d31:	e8 aa 2d 00 00       	call   3ae0 <printf>
      d36:	83 c4 10             	add    $0x10,%esp
      d39:	e9 45 ff ff ff       	jmp    c83 <preempt+0x83>
     printf(1, "preempt read error");
      d3e:	83 ec 08             	sub    $0x8,%esp
-     d41:	68 fa 41 00 00       	push   $0x41fa
+     d41:	68 32 44 00 00       	push   $0x4432
      d46:	6a 01                	push   $0x1
      d48:	e8 93 2d 00 00       	call   3ae0 <printf>
     return;
@@ -1318,7 +1318,7 @@
      d89:	79 e5                	jns    d70 <exitwait+0x10>
       printf(1, "fork failed\n");
      d8b:	83 ec 08             	sub    $0x8,%esp
-     d8e:	68 89 4d 00 00       	push   $0x4d89
+     d8e:	68 c1 4f 00 00       	push   $0x4fc1
      d93:	6a 01                	push   $0x1
      d95:	e8 46 2d 00 00       	call   3ae0 <printf>
       return;
@@ -1332,7 +1332,7 @@
      da4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         printf(1, "wait wrong pid\n");
      da8:	83 ec 08             	sub    $0x8,%esp
-     dab:	68 2b 42 00 00       	push   $0x422b
+     dab:	68 63 44 00 00       	push   $0x4463
      db0:	6a 01                	push   $0x1
      db2:	e8 29 2d 00 00       	call   3ae0 <printf>
         return;
@@ -1345,7 +1345,7 @@
      dc0:	c3                   	ret    
   printf(1, "exitwait ok\n");
      dc1:	83 ec 08             	sub    $0x8,%esp
-     dc4:	68 3b 42 00 00       	push   $0x423b
+     dc4:	68 73 44 00 00       	push   $0x4473
      dc9:	6a 01                	push   $0x1
      dcb:	e8 10 2d 00 00       	call   3ae0 <printf>
      dd0:	83 c4 10             	add    $0x10,%esp
@@ -1369,7 +1369,7 @@
      dea:	53                   	push   %ebx
   printf(1, "mem test\n");
      deb:	83 ec 08             	sub    $0x8,%esp
-     dee:	68 48 42 00 00       	push   $0x4248
+     dee:	68 80 44 00 00       	push   $0x4480
      df3:	6a 01                	push   $0x1
      df5:	e8 e6 2c 00 00       	call   3ae0 <printf>
   ppid = getpid();
@@ -1424,7 +1424,7 @@
     printf(1, "mem ok\n");
      e69:	58                   	pop    %eax
      e6a:	5a                   	pop    %edx
-     e6b:	68 6c 42 00 00       	push   $0x426c
+     e6b:	68 a4 44 00 00       	push   $0x44a4
      e70:	6a 01                	push   $0x1
      e72:	e8 69 2c 00 00       	call   3ae0 <printf>
     exit();
@@ -1432,7 +1432,7 @@
      e7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       printf(1, "couldn't allocate mem?!!\n");
      e80:	83 ec 08             	sub    $0x8,%esp
-     e83:	68 52 42 00 00       	push   $0x4252
+     e83:	68 8a 44 00 00       	push   $0x448a
      e88:	6a 01                	push   $0x1
      e8a:	e8 51 2c 00 00       	call   3ae0 <printf>
       kill(ppid);
@@ -1461,17 +1461,17 @@
      eb9:	53                   	push   %ebx
      eba:	83 ec 34             	sub    $0x34,%esp
   printf(1, "sharedfd test\n");
-     ebd:	68 74 42 00 00       	push   $0x4274
+     ebd:	68 ac 44 00 00       	push   $0x44ac
      ec2:	6a 01                	push   $0x1
      ec4:	e8 17 2c 00 00       	call   3ae0 <printf>
   unlink("sharedfd");
-     ec9:	c7 04 24 83 42 00 00 	movl   $0x4283,(%esp)
+     ec9:	c7 04 24 bb 44 00 00 	movl   $0x44bb,(%esp)
      ed0:	e8 fe 2a 00 00       	call   39d3 <unlink>
   fd = open("sharedfd", O_CREATE|O_RDWR);
      ed5:	5b                   	pop    %ebx
      ed6:	5e                   	pop    %esi
      ed7:	68 02 02 00 00       	push   $0x202
-     edc:	68 83 42 00 00       	push   $0x4283
+     edc:	68 bb 44 00 00       	push   $0x44bb
      ee1:	e8 dd 2a 00 00       	call   39c3 <open>
   if(fd < 0){
      ee6:	83 c4 10             	add    $0x10,%esp
@@ -1513,7 +1513,7 @@
      f37:	74 e7                	je     f20 <sharedfd+0x70>
       printf(1, "fstests: write sharedfd failed\n");
      f39:	83 ec 08             	sub    $0x8,%esp
-     f3c:	68 74 4f 00 00       	push   $0x4f74
+     f3c:	68 ac 51 00 00       	push   $0x51ac
      f41:	6a 01                	push   $0x1
      f43:	e8 98 2b 00 00       	call   3ae0 <printf>
       break;
@@ -1536,7 +1536,7 @@
      f69:	58                   	pop    %eax
      f6a:	5a                   	pop    %edx
      f6b:	6a 00                	push   $0x0
-     f6d:	68 83 42 00 00       	push   $0x4283
+     f6d:	68 bb 44 00 00       	push   $0x44bb
      f72:	e8 4c 2a 00 00       	call   39c3 <open>
   if(fd < 0){
      f77:	83 c4 10             	add    $0x10,%esp
@@ -1587,7 +1587,7 @@
      fd3:	ff 75 d0             	pushl  -0x30(%ebp)
      fd6:	e8 d0 29 00 00       	call   39ab <close>
   unlink("sharedfd");
-     fdb:	c7 04 24 83 42 00 00 	movl   $0x4283,(%esp)
+     fdb:	c7 04 24 bb 44 00 00 	movl   $0x44bb,(%esp)
      fe2:	e8 ec 29 00 00       	call   39d3 <unlink>
   if(nc == 10000 && np == 10000){
      fe7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
@@ -1598,7 +1598,7 @@
      ffb:	75 53                	jne    1050 <sharedfd+0x1a0>
     printf(1, "sharedfd ok\n");
      ffd:	83 ec 08             	sub    $0x8,%esp
-    1000:	68 8c 42 00 00       	push   $0x428c
+    1000:	68 c4 44 00 00       	push   $0x44c4
     1005:	6a 01                	push   $0x1
     1007:	e8 d4 2a 00 00       	call   3ae0 <printf>
     100c:	83 c4 10             	add    $0x10,%esp
@@ -1611,7 +1611,7 @@
     1016:	c3                   	ret    
     printf(1, "fstests: cannot open sharedfd for writing");
     1017:	83 ec 08             	sub    $0x8,%esp
-    101a:	68 48 4f 00 00       	push   $0x4f48
+    101a:	68 80 51 00 00       	push   $0x5180
     101f:	6a 01                	push   $0x1
     1021:	e8 ba 2a 00 00       	call   3ae0 <printf>
     return;
@@ -1625,7 +1625,7 @@
     1030:	c3                   	ret    
     printf(1, "fstests: cannot open sharedfd for reading\n");
     1031:	83 ec 08             	sub    $0x8,%esp
-    1034:	68 94 4f 00 00       	push   $0x4f94
+    1034:	68 cc 51 00 00       	push   $0x51cc
     1039:	6a 01                	push   $0x1
     103b:	e8 a0 2a 00 00       	call   3ae0 <printf>
     return;
@@ -1642,7 +1642,7 @@
     printf(1, "sharedfd oops %d %d\n", nc, np);
     1050:	53                   	push   %ebx
     1051:	52                   	push   %edx
-    1052:	68 99 42 00 00       	push   $0x4299
+    1052:	68 d1 44 00 00       	push   $0x44d1
     1057:	6a 01                	push   $0x1
     1059:	e8 82 2a 00 00       	call   3ae0 <printf>
     exit();
@@ -1658,7 +1658,7 @@
     1077:	57                   	push   %edi
     1078:	56                   	push   %esi
   printf(1, "fourfiles test\n");
-    1079:	be ae 42 00 00       	mov    $0x42ae,%esi
+    1079:	be e6 44 00 00       	mov    $0x44e6,%esi
 {
     107e:	53                   	push   %ebx
   for(pi = 0; pi < 4; pi++){
@@ -1666,14 +1666,14 @@
 {
     1081:	83 ec 34             	sub    $0x34,%esp
   char *names[] = { "f0", "f1", "f2", "f3" };
-    1084:	c7 45 d8 ae 42 00 00 	movl   $0x42ae,-0x28(%ebp)
+    1084:	c7 45 d8 e6 44 00 00 	movl   $0x44e6,-0x28(%ebp)
   printf(1, "fourfiles test\n");
-    108b:	68 b4 42 00 00       	push   $0x42b4
+    108b:	68 ec 44 00 00       	push   $0x44ec
     1090:	6a 01                	push   $0x1
   char *names[] = { "f0", "f1", "f2", "f3" };
-    1092:	c7 45 dc f7 43 00 00 	movl   $0x43f7,-0x24(%ebp)
-    1099:	c7 45 e0 fb 43 00 00 	movl   $0x43fb,-0x20(%ebp)
-    10a0:	c7 45 e4 b1 42 00 00 	movl   $0x42b1,-0x1c(%ebp)
+    1092:	c7 45 dc 2f 46 00 00 	movl   $0x462f,-0x24(%ebp)
+    1099:	c7 45 e0 33 46 00 00 	movl   $0x4633,-0x20(%ebp)
+    10a0:	c7 45 e4 e9 44 00 00 	movl   $0x44e9,-0x1c(%ebp)
   printf(1, "fourfiles test\n");
     10a7:	e8 34 2a 00 00       	call   3ae0 <printf>
     10ac:	83 c4 10             	add    $0x10,%esp
@@ -1724,7 +1724,7 @@
     110c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     1110:	83 ec 04             	sub    $0x4,%esp
     1113:	68 00 20 00 00       	push   $0x2000
-    1118:	68 c0 86 00 00       	push   $0x86c0
+    1118:	68 60 93 00 00       	push   $0x9360
     111d:	ff 75 d4             	pushl  -0x2c(%ebp)
     1120:	e8 76 28 00 00       	call   399b <read>
     1125:	83 c4 10             	add    $0x10,%esp
@@ -1735,7 +1735,7 @@
     112e:	66 90                	xchg   %ax,%ax
         if(buf[j] != '0'+i){
     1130:	83 fe 01             	cmp    $0x1,%esi
-    1133:	0f be ba c0 86 00 00 	movsbl 0x86c0(%edx),%edi
+    1133:	0f be ba 60 93 00 00 	movsbl 0x9360(%edx),%edi
     113a:	19 c9                	sbb    %ecx,%ecx
     113c:	83 c1 31             	add    $0x31,%ecx
     113f:	39 cf                	cmp    %ecx,%edi
@@ -1765,7 +1765,7 @@
     1179:	75 1a                	jne    1195 <fourfiles+0x125>
   printf(1, "fourfiles ok\n");
     117b:	83 ec 08             	sub    $0x8,%esp
-    117e:	68 f2 42 00 00       	push   $0x42f2
+    117e:	68 2a 45 00 00       	push   $0x452a
     1183:	6a 01                	push   $0x1
     1185:	e8 56 29 00 00       	call   3ae0 <printf>
 }
@@ -1780,7 +1780,7 @@
     119a:	e9 53 ff ff ff       	jmp    10f2 <fourfiles+0x82>
           printf(1, "wrong char\n");
     119f:	83 ec 08             	sub    $0x8,%esp
-    11a2:	68 d5 42 00 00       	push   $0x42d5
+    11a2:	68 0d 45 00 00       	push   $0x450d
     11a7:	6a 01                	push   $0x1
     11a9:	e8 32 29 00 00       	call   3ae0 <printf>
           exit();
@@ -1803,13 +1803,13 @@
     11d0:	68 00 02 00 00       	push   $0x200
     11d5:	53                   	push   %ebx
     11d6:	bb 0c 00 00 00       	mov    $0xc,%ebx
-    11db:	68 c0 86 00 00       	push   $0x86c0
+    11db:	68 60 93 00 00       	push   $0x9360
     11e0:	e8 fb 25 00 00       	call   37e0 <memset>
     11e5:	83 c4 10             	add    $0x10,%esp
         if((n = write(fd, buf, 500)) != 500){
     11e8:	83 ec 04             	sub    $0x4,%esp
     11eb:	68 f4 01 00 00       	push   $0x1f4
-    11f0:	68 c0 86 00 00       	push   $0x86c0
+    11f0:	68 60 93 00 00       	push   $0x9360
     11f5:	56                   	push   %esi
     11f6:	e8 a8 27 00 00       	call   39a3 <write>
     11fb:	83 c4 10             	add    $0x10,%esp
@@ -1823,7 +1823,7 @@
         printf(1, "create failed\n");
     120f:	51                   	push   %ecx
     1210:	51                   	push   %ecx
-    1211:	68 4f 45 00 00       	push   $0x454f
+    1211:	68 87 47 00 00       	push   $0x4787
     1216:	6a 01                	push   $0x1
     1218:	e8 c3 28 00 00       	call   3ae0 <printf>
         exit();
@@ -1831,7 +1831,7 @@
     1222:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       printf(1, "fork failed\n");
     1228:	83 ec 08             	sub    $0x8,%esp
-    122b:	68 89 4d 00 00       	push   $0x4d89
+    122b:	68 c1 4f 00 00       	push   $0x4fc1
     1230:	6a 01                	push   $0x1
     1232:	e8 a9 28 00 00       	call   3ae0 <printf>
       exit();
@@ -1839,7 +1839,7 @@
       printf(1, "wrong length %d\n", total);
     123c:	50                   	push   %eax
     123d:	53                   	push   %ebx
-    123e:	68 e1 42 00 00       	push   $0x42e1
+    123e:	68 19 45 00 00       	push   $0x4519
     1243:	6a 01                	push   $0x1
     1245:	e8 96 28 00 00       	call   3ae0 <printf>
       exit();
@@ -1847,7 +1847,7 @@
           printf(1, "write failed %d\n", n);
     124f:	52                   	push   %edx
     1250:	50                   	push   %eax
-    1251:	68 c4 42 00 00       	push   $0x42c4
+    1251:	68 fc 44 00 00       	push   $0x44fc
     1256:	6a 01                	push   $0x1
     1258:	e8 83 28 00 00       	call   3ae0 <printf>
           exit();
@@ -1868,7 +1868,7 @@
 {
     127c:	83 ec 44             	sub    $0x44,%esp
   printf(1, "createdelete test\n");
-    127f:	68 00 43 00 00       	push   $0x4300
+    127f:	68 38 45 00 00       	push   $0x4538
     1284:	6a 01                	push   $0x1
     1286:	e8 55 28 00 00       	call   3ae0 <printf>
     128b:	83 c4 10             	add    $0x10,%esp
@@ -1977,7 +1977,7 @@
     137f:	75 cf                	jne    1350 <createdelete+0xe0>
   printf(1, "createdelete ok\n");
     1381:	83 ec 08             	sub    $0x8,%esp
-    1384:	68 13 43 00 00       	push   $0x4313
+    1384:	68 4b 45 00 00       	push   $0x454b
     1389:	6a 01                	push   $0x1
     138b:	e8 50 27 00 00       	call   3ae0 <printf>
 }
@@ -2055,7 +2055,7 @@
             printf(1, "unlink failed\n");
     1422:	52                   	push   %edx
     1423:	52                   	push   %edx
-    1424:	68 01 3f 00 00       	push   $0x3f01
+    1424:	68 39 41 00 00       	push   $0x4139
     1429:	6a 01                	push   $0x1
     142b:	e8 b0 26 00 00       	call   3ae0 <printf>
             exit();
@@ -2067,21 +2067,21 @@
         printf(1, "oops createdelete %s didn't exist\n", name);
     1440:	83 ec 04             	sub    $0x4,%esp
     1443:	57                   	push   %edi
-    1444:	68 c0 4f 00 00       	push   $0x4fc0
+    1444:	68 f8 51 00 00       	push   $0x51f8
     1449:	6a 01                	push   $0x1
     144b:	e8 90 26 00 00       	call   3ae0 <printf>
         exit();
     1450:	e8 2e 25 00 00       	call   3983 <exit>
           printf(1, "create failed\n");
     1455:	83 ec 08             	sub    $0x8,%esp
-    1458:	68 4f 45 00 00       	push   $0x454f
+    1458:	68 87 47 00 00       	push   $0x4787
     145d:	6a 01                	push   $0x1
     145f:	e8 7c 26 00 00       	call   3ae0 <printf>
           exit();
     1464:	e8 1a 25 00 00       	call   3983 <exit>
       printf(1, "fork failed\n");
     1469:	83 ec 08             	sub    $0x8,%esp
-    146c:	68 89 4d 00 00       	push   $0x4d89
+    146c:	68 c1 4f 00 00       	push   $0x4fc1
     1471:	6a 01                	push   $0x1
     1473:	e8 68 26 00 00       	call   3ae0 <printf>
       exit();
@@ -2093,7 +2093,7 @@
         printf(1, "oops createdelete %s did exist\n", name);
     1488:	50                   	push   %eax
     1489:	57                   	push   %edi
-    148a:	68 e4 4f 00 00       	push   $0x4fe4
+    148a:	68 1c 52 00 00       	push   $0x521c
     148f:	6a 01                	push   $0x1
     1491:	e8 4a 26 00 00       	call   3ae0 <printf>
         exit();
@@ -2110,14 +2110,14 @@
     14a8:	53                   	push   %ebx
   printf(1, "unlinkread test\n");
     14a9:	83 ec 08             	sub    $0x8,%esp
-    14ac:	68 24 43 00 00       	push   $0x4324
+    14ac:	68 5c 45 00 00       	push   $0x455c
     14b1:	6a 01                	push   $0x1
     14b3:	e8 28 26 00 00       	call   3ae0 <printf>
   fd = open("unlinkread", O_CREATE | O_RDWR);
     14b8:	5b                   	pop    %ebx
     14b9:	5e                   	pop    %esi
     14ba:	68 02 02 00 00       	push   $0x202
-    14bf:	68 35 43 00 00       	push   $0x4335
+    14bf:	68 6d 45 00 00       	push   $0x456d
     14c4:	e8 fa 24 00 00       	call   39c3 <open>
   if(fd < 0){
     14c9:	83 c4 10             	add    $0x10,%esp
@@ -2127,7 +2127,7 @@
     14d4:	83 ec 04             	sub    $0x4,%esp
     14d7:	89 c3                	mov    %eax,%ebx
     14d9:	6a 05                	push   $0x5
-    14db:	68 5a 43 00 00       	push   $0x435a
+    14db:	68 92 45 00 00       	push   $0x4592
     14e0:	50                   	push   %eax
     14e1:	e8 bd 24 00 00       	call   39a3 <write>
   close(fd);
@@ -2137,7 +2137,7 @@
     14ee:	58                   	pop    %eax
     14ef:	5a                   	pop    %edx
     14f0:	6a 02                	push   $0x2
-    14f2:	68 35 43 00 00       	push   $0x4335
+    14f2:	68 6d 45 00 00       	push   $0x456d
     14f7:	e8 c7 24 00 00       	call   39c3 <open>
   if(fd < 0){
     14fc:	83 c4 10             	add    $0x10,%esp
@@ -2148,7 +2148,7 @@
     1503:	0f 88 10 01 00 00    	js     1619 <unlinkread+0x179>
   if(unlink("unlinkread") != 0){
     1509:	83 ec 0c             	sub    $0xc,%esp
-    150c:	68 35 43 00 00       	push   $0x4335
+    150c:	68 6d 45 00 00       	push   $0x456d
     1511:	e8 bd 24 00 00       	call   39d3 <unlink>
     1516:	83 c4 10             	add    $0x10,%esp
     1519:	85 c0                	test   %eax,%eax
@@ -2156,7 +2156,7 @@
   fd1 = open("unlinkread", O_CREATE | O_RDWR);
     1521:	83 ec 08             	sub    $0x8,%esp
     1524:	68 02 02 00 00       	push   $0x202
-    1529:	68 35 43 00 00       	push   $0x4335
+    1529:	68 6d 45 00 00       	push   $0x456d
     152e:	e8 90 24 00 00       	call   39c3 <open>
   write(fd1, "yyy", 3);
     1533:	83 c4 0c             	add    $0xc,%esp
@@ -2164,7 +2164,7 @@
   fd1 = open("unlinkread", O_CREATE | O_RDWR);
     1538:	89 c6                	mov    %eax,%esi
   write(fd1, "yyy", 3);
-    153a:	68 92 43 00 00       	push   $0x4392
+    153a:	68 ca 45 00 00       	push   $0x45ca
     153f:	50                   	push   %eax
     1540:	e8 5e 24 00 00       	call   39a3 <write>
   close(fd1);
@@ -2173,19 +2173,19 @@
   if(read(fd, buf, sizeof(buf)) != 5){
     154d:	83 c4 0c             	add    $0xc,%esp
     1550:	68 00 20 00 00       	push   $0x2000
-    1555:	68 c0 86 00 00       	push   $0x86c0
+    1555:	68 60 93 00 00       	push   $0x9360
     155a:	53                   	push   %ebx
     155b:	e8 3b 24 00 00       	call   399b <read>
     1560:	83 c4 10             	add    $0x10,%esp
     1563:	83 f8 05             	cmp    $0x5,%eax
     1566:	0f 85 87 00 00 00    	jne    15f3 <unlinkread+0x153>
   if(buf[0] != 'h'){
-    156c:	80 3d c0 86 00 00 68 	cmpb   $0x68,0x86c0
+    156c:	80 3d 60 93 00 00 68 	cmpb   $0x68,0x9360
     1573:	75 6b                	jne    15e0 <unlinkread+0x140>
   if(write(fd, buf, 10) != 10){
     1575:	83 ec 04             	sub    $0x4,%esp
     1578:	6a 0a                	push   $0xa
-    157a:	68 c0 86 00 00       	push   $0x86c0
+    157a:	68 60 93 00 00       	push   $0x9360
     157f:	53                   	push   %ebx
     1580:	e8 1e 24 00 00       	call   39a3 <write>
     1585:	83 c4 10             	add    $0x10,%esp
@@ -2196,12 +2196,12 @@
     1590:	53                   	push   %ebx
     1591:	e8 15 24 00 00       	call   39ab <close>
   unlink("unlinkread");
-    1596:	c7 04 24 35 43 00 00 	movl   $0x4335,(%esp)
+    1596:	c7 04 24 6d 45 00 00 	movl   $0x456d,(%esp)
     159d:	e8 31 24 00 00       	call   39d3 <unlink>
   printf(1, "unlinkread ok\n");
     15a2:	58                   	pop    %eax
     15a3:	5a                   	pop    %edx
-    15a4:	68 dd 43 00 00       	push   $0x43dd
+    15a4:	68 15 46 00 00       	push   $0x4615
     15a9:	6a 01                	push   $0x1
     15ab:	e8 30 25 00 00       	call   3ae0 <printf>
 }
@@ -2214,7 +2214,7 @@
     printf(1, "create unlinkread failed\n");
     15ba:	51                   	push   %ecx
     15bb:	51                   	push   %ecx
-    15bc:	68 40 43 00 00       	push   $0x4340
+    15bc:	68 78 45 00 00       	push   $0x4578
     15c1:	6a 01                	push   $0x1
     15c3:	e8 18 25 00 00       	call   3ae0 <printf>
     exit();
@@ -2222,7 +2222,7 @@
     printf(1, "unlinkread write failed\n");
     15cd:	51                   	push   %ecx
     15ce:	51                   	push   %ecx
-    15cf:	68 c4 43 00 00       	push   $0x43c4
+    15cf:	68 fc 45 00 00       	push   $0x45fc
     15d4:	6a 01                	push   $0x1
     15d6:	e8 05 25 00 00       	call   3ae0 <printf>
     exit();
@@ -2230,7 +2230,7 @@
     printf(1, "unlinkread wrong data\n");
     15e0:	53                   	push   %ebx
     15e1:	53                   	push   %ebx
-    15e2:	68 ad 43 00 00       	push   $0x43ad
+    15e2:	68 e5 45 00 00       	push   $0x45e5
     15e7:	6a 01                	push   $0x1
     15e9:	e8 f2 24 00 00       	call   3ae0 <printf>
     exit();
@@ -2238,7 +2238,7 @@
     printf(1, "unlinkread read failed");
     15f3:	56                   	push   %esi
     15f4:	56                   	push   %esi
-    15f5:	68 96 43 00 00       	push   $0x4396
+    15f5:	68 ce 45 00 00       	push   $0x45ce
     15fa:	6a 01                	push   $0x1
     15fc:	e8 df 24 00 00       	call   3ae0 <printf>
     exit();
@@ -2246,7 +2246,7 @@
     printf(1, "unlink unlinkread failed\n");
     1606:	50                   	push   %eax
     1607:	50                   	push   %eax
-    1608:	68 78 43 00 00       	push   $0x4378
+    1608:	68 b0 45 00 00       	push   $0x45b0
     160d:	6a 01                	push   $0x1
     160f:	e8 cc 24 00 00       	call   3ae0 <printf>
     exit();
@@ -2254,7 +2254,7 @@
     printf(1, "open unlinkread failed\n");
     1619:	50                   	push   %eax
     161a:	50                   	push   %eax
-    161b:	68 60 43 00 00       	push   $0x4360
+    161b:	68 98 45 00 00       	push   $0x4598
     1620:	6a 01                	push   $0x1
     1622:	e8 b9 24 00 00       	call   3ae0 <printf>
     exit();
@@ -2269,20 +2269,20 @@
     1637:	53                   	push   %ebx
     1638:	83 ec 0c             	sub    $0xc,%esp
   printf(1, "linktest\n");
-    163b:	68 ec 43 00 00       	push   $0x43ec
+    163b:	68 24 46 00 00       	push   $0x4624
     1640:	6a 01                	push   $0x1
     1642:	e8 99 24 00 00       	call   3ae0 <printf>
   unlink("lf1");
-    1647:	c7 04 24 f6 43 00 00 	movl   $0x43f6,(%esp)
+    1647:	c7 04 24 2e 46 00 00 	movl   $0x462e,(%esp)
     164e:	e8 80 23 00 00       	call   39d3 <unlink>
   unlink("lf2");
-    1653:	c7 04 24 fa 43 00 00 	movl   $0x43fa,(%esp)
+    1653:	c7 04 24 32 46 00 00 	movl   $0x4632,(%esp)
     165a:	e8 74 23 00 00       	call   39d3 <unlink>
   fd = open("lf1", O_CREATE|O_RDWR);
     165f:	58                   	pop    %eax
     1660:	5a                   	pop    %edx
     1661:	68 02 02 00 00       	push   $0x202
-    1666:	68 f6 43 00 00       	push   $0x43f6
+    1666:	68 2e 46 00 00       	push   $0x462e
     166b:	e8 53 23 00 00       	call   39c3 <open>
   if(fd < 0){
     1670:	83 c4 10             	add    $0x10,%esp
@@ -2292,7 +2292,7 @@
     167b:	83 ec 04             	sub    $0x4,%esp
     167e:	89 c3                	mov    %eax,%ebx
     1680:	6a 05                	push   $0x5
-    1682:	68 5a 43 00 00       	push   $0x435a
+    1682:	68 92 45 00 00       	push   $0x4592
     1687:	50                   	push   %eax
     1688:	e8 16 23 00 00       	call   39a3 <write>
     168d:	83 c4 10             	add    $0x10,%esp
@@ -2305,21 +2305,21 @@
   if(link("lf1", "lf2") < 0){
     16a2:	5b                   	pop    %ebx
     16a3:	58                   	pop    %eax
-    16a4:	68 fa 43 00 00       	push   $0x43fa
-    16a9:	68 f6 43 00 00       	push   $0x43f6
+    16a4:	68 32 46 00 00       	push   $0x4632
+    16a9:	68 2e 46 00 00       	push   $0x462e
     16ae:	e8 30 23 00 00       	call   39e3 <link>
     16b3:	83 c4 10             	add    $0x10,%esp
     16b6:	85 c0                	test   %eax,%eax
     16b8:	0f 88 60 01 00 00    	js     181e <linktest+0x1ee>
   unlink("lf1");
     16be:	83 ec 0c             	sub    $0xc,%esp
-    16c1:	68 f6 43 00 00       	push   $0x43f6
+    16c1:	68 2e 46 00 00       	push   $0x462e
     16c6:	e8 08 23 00 00       	call   39d3 <unlink>
   if(open("lf1", 0) >= 0){
     16cb:	58                   	pop    %eax
     16cc:	5a                   	pop    %edx
     16cd:	6a 00                	push   $0x0
-    16cf:	68 f6 43 00 00       	push   $0x43f6
+    16cf:	68 2e 46 00 00       	push   $0x462e
     16d4:	e8 ea 22 00 00       	call   39c3 <open>
     16d9:	83 c4 10             	add    $0x10,%esp
     16dc:	85 c0                	test   %eax,%eax
@@ -2327,7 +2327,7 @@
   fd = open("lf2", 0);
     16e4:	83 ec 08             	sub    $0x8,%esp
     16e7:	6a 00                	push   $0x0
-    16e9:	68 fa 43 00 00       	push   $0x43fa
+    16e9:	68 32 46 00 00       	push   $0x4632
     16ee:	e8 d0 22 00 00       	call   39c3 <open>
   if(fd < 0){
     16f3:	83 c4 10             	add    $0x10,%esp
@@ -2339,7 +2339,7 @@
   if(read(fd, buf, sizeof(buf)) != 5){
     1700:	83 ec 04             	sub    $0x4,%esp
     1703:	68 00 20 00 00       	push   $0x2000
-    1708:	68 c0 86 00 00       	push   $0x86c0
+    1708:	68 60 93 00 00       	push   $0x9360
     170d:	50                   	push   %eax
     170e:	e8 88 22 00 00       	call   399b <read>
     1713:	83 c4 10             	add    $0x10,%esp
@@ -2352,36 +2352,36 @@
   if(link("lf2", "lf2") >= 0){
     1728:	58                   	pop    %eax
     1729:	5a                   	pop    %edx
-    172a:	68 fa 43 00 00       	push   $0x43fa
-    172f:	68 fa 43 00 00       	push   $0x43fa
+    172a:	68 32 46 00 00       	push   $0x4632
+    172f:	68 32 46 00 00       	push   $0x4632
     1734:	e8 aa 22 00 00       	call   39e3 <link>
     1739:	83 c4 10             	add    $0x10,%esp
     173c:	85 c0                	test   %eax,%eax
     173e:	0f 89 8e 00 00 00    	jns    17d2 <linktest+0x1a2>
   unlink("lf2");
     1744:	83 ec 0c             	sub    $0xc,%esp
-    1747:	68 fa 43 00 00       	push   $0x43fa
+    1747:	68 32 46 00 00       	push   $0x4632
     174c:	e8 82 22 00 00       	call   39d3 <unlink>
   if(link("lf2", "lf1") >= 0){
     1751:	59                   	pop    %ecx
     1752:	5b                   	pop    %ebx
-    1753:	68 f6 43 00 00       	push   $0x43f6
-    1758:	68 fa 43 00 00       	push   $0x43fa
+    1753:	68 2e 46 00 00       	push   $0x462e
+    1758:	68 32 46 00 00       	push   $0x4632
     175d:	e8 81 22 00 00       	call   39e3 <link>
     1762:	83 c4 10             	add    $0x10,%esp
     1765:	85 c0                	test   %eax,%eax
     1767:	79 56                	jns    17bf <linktest+0x18f>
   if(link(".", "lf1") >= 0){
     1769:	83 ec 08             	sub    $0x8,%esp
-    176c:	68 f6 43 00 00       	push   $0x43f6
-    1771:	68 be 46 00 00       	push   $0x46be
+    176c:	68 2e 46 00 00       	push   $0x462e
+    1771:	68 f6 48 00 00       	push   $0x48f6
     1776:	e8 68 22 00 00       	call   39e3 <link>
     177b:	83 c4 10             	add    $0x10,%esp
     177e:	85 c0                	test   %eax,%eax
     1780:	79 2a                	jns    17ac <linktest+0x17c>
   printf(1, "linktest ok\n");
     1782:	83 ec 08             	sub    $0x8,%esp
-    1785:	68 94 44 00 00       	push   $0x4494
+    1785:	68 cc 46 00 00       	push   $0x46cc
     178a:	6a 01                	push   $0x1
     178c:	e8 4f 23 00 00       	call   3ae0 <printf>
 }
@@ -2392,7 +2392,7 @@
     printf(1, "create lf1 failed\n");
     1799:	50                   	push   %eax
     179a:	50                   	push   %eax
-    179b:	68 fe 43 00 00       	push   $0x43fe
+    179b:	68 36 46 00 00       	push   $0x4636
     17a0:	6a 01                	push   $0x1
     17a2:	e8 39 23 00 00       	call   3ae0 <printf>
     exit();
@@ -2400,7 +2400,7 @@
     printf(1, "link . lf1 succeeded! oops\n");
     17ac:	50                   	push   %eax
     17ad:	50                   	push   %eax
-    17ae:	68 78 44 00 00       	push   $0x4478
+    17ae:	68 b0 46 00 00       	push   $0x46b0
     17b3:	6a 01                	push   $0x1
     17b5:	e8 26 23 00 00       	call   3ae0 <printf>
     exit();
@@ -2408,7 +2408,7 @@
     printf(1, "link non-existant succeeded! oops\n");
     17bf:	52                   	push   %edx
     17c0:	52                   	push   %edx
-    17c1:	68 2c 50 00 00       	push   $0x502c
+    17c1:	68 64 52 00 00       	push   $0x5264
     17c6:	6a 01                	push   $0x1
     17c8:	e8 13 23 00 00       	call   3ae0 <printf>
     exit();
@@ -2416,7 +2416,7 @@
     printf(1, "link lf2 lf2 succeeded! oops\n");
     17d2:	50                   	push   %eax
     17d3:	50                   	push   %eax
-    17d4:	68 5a 44 00 00       	push   $0x445a
+    17d4:	68 92 46 00 00       	push   $0x4692
     17d9:	6a 01                	push   $0x1
     17db:	e8 00 23 00 00       	call   3ae0 <printf>
     exit();
@@ -2424,7 +2424,7 @@
     printf(1, "read lf2 failed\n");
     17e5:	51                   	push   %ecx
     17e6:	51                   	push   %ecx
-    17e7:	68 49 44 00 00       	push   $0x4449
+    17e7:	68 81 46 00 00       	push   $0x4681
     17ec:	6a 01                	push   $0x1
     17ee:	e8 ed 22 00 00       	call   3ae0 <printf>
     exit();
@@ -2432,7 +2432,7 @@
     printf(1, "open lf2 failed\n");
     17f8:	53                   	push   %ebx
     17f9:	53                   	push   %ebx
-    17fa:	68 38 44 00 00       	push   $0x4438
+    17fa:	68 70 46 00 00       	push   $0x4670
     17ff:	6a 01                	push   $0x1
     1801:	e8 da 22 00 00       	call   3ae0 <printf>
     exit();
@@ -2440,7 +2440,7 @@
     printf(1, "unlinked lf1 but it is still there!\n");
     180b:	50                   	push   %eax
     180c:	50                   	push   %eax
-    180d:	68 04 50 00 00       	push   $0x5004
+    180d:	68 3c 52 00 00       	push   $0x523c
     1812:	6a 01                	push   $0x1
     1814:	e8 c7 22 00 00       	call   3ae0 <printf>
     exit();
@@ -2448,7 +2448,7 @@
     printf(1, "link lf1 lf2 failed\n");
     181e:	51                   	push   %ecx
     181f:	51                   	push   %ecx
-    1820:	68 23 44 00 00       	push   $0x4423
+    1820:	68 5b 46 00 00       	push   $0x465b
     1825:	6a 01                	push   $0x1
     1827:	e8 b4 22 00 00       	call   3ae0 <printf>
     exit();
@@ -2456,7 +2456,7 @@
     printf(1, "write lf1 failed\n");
     1831:	50                   	push   %eax
     1832:	50                   	push   %eax
-    1833:	68 11 44 00 00       	push   $0x4411
+    1833:	68 49 46 00 00       	push   $0x4649
     1838:	6a 01                	push   $0x1
     183a:	e8 a1 22 00 00       	call   3ae0 <printf>
     exit();
@@ -2479,7 +2479,7 @@
     185c:	8d 5d ad             	lea    -0x53(%ebp),%ebx
     185f:	83 ec 64             	sub    $0x64,%esp
   printf(1, "concreate test\n");
-    1862:	68 a1 44 00 00       	push   $0x44a1
+    1862:	68 d9 46 00 00       	push   $0x46d9
     1867:	6a 01                	push   $0x1
     1869:	e8 72 22 00 00       	call   3ae0 <printf>
   file[0] = 'C';
@@ -2550,7 +2550,7 @@
         printf(1, "concreate create %s failed\n", file);
     1905:	83 ec 04             	sub    $0x4,%esp
     1908:	53                   	push   %ebx
-    1909:	68 b4 44 00 00       	push   $0x44b4
+    1909:	68 ec 46 00 00       	push   $0x46ec
     190e:	6a 01                	push   $0x1
     1910:	e8 cb 21 00 00       	call   3ae0 <printf>
         exit();
@@ -2559,7 +2559,7 @@
       link("C0", file);
     1920:	83 ec 08             	sub    $0x8,%esp
     1923:	53                   	push   %ebx
-    1924:	68 b1 44 00 00       	push   $0x44b1
+    1924:	68 e9 46 00 00       	push   $0x46e9
     1929:	e8 b5 20 00 00       	call   39e3 <link>
     192e:	83 c4 10             	add    $0x10,%esp
       exit();
@@ -2572,7 +2572,7 @@
     1943:	83 c6 01             	add    $0x1,%esi
       link("C0", file);
     1946:	53                   	push   %ebx
-    1947:	68 b1 44 00 00       	push   $0x44b1
+    1947:	68 e9 46 00 00       	push   $0x46e9
     194c:	e8 92 20 00 00       	call   39e3 <link>
     1951:	83 c4 10             	add    $0x10,%esp
       wait();
@@ -2591,7 +2591,7 @@
     1972:	5e                   	pop    %esi
     1973:	5f                   	pop    %edi
     1974:	6a 00                	push   $0x0
-    1976:	68 be 46 00 00       	push   $0x46be
+    1976:	68 f6 48 00 00       	push   $0x48f6
     197b:	8d 7d b0             	lea    -0x50(%ebp),%edi
     197e:	e8 40 20 00 00       	call   39c3 <open>
   n = 0;
@@ -2732,7 +2732,7 @@
     1acd:	8d 76 00             	lea    0x0(%esi),%esi
   printf(1, "concreate ok\n");
     1ad0:	83 ec 08             	sub    $0x8,%esp
-    1ad3:	68 06 45 00 00       	push   $0x4506
+    1ad3:	68 3e 47 00 00       	push   $0x473e
     1ad8:	6a 01                	push   $0x1
     1ada:	e8 01 20 00 00       	call   3ae0 <printf>
 }
@@ -2744,7 +2744,7 @@
     1ae6:	c3                   	ret    
       printf(1, "fork failed\n");
     1ae7:	83 ec 08             	sub    $0x8,%esp
-    1aea:	68 89 4d 00 00       	push   $0x4d89
+    1aea:	68 c1 4f 00 00       	push   $0x4fc1
     1aef:	6a 01                	push   $0x1
     1af1:	e8 ea 1f 00 00       	call   3ae0 <printf>
       exit();
@@ -2752,7 +2752,7 @@
     printf(1, "concreate not enough files in directory listing\n");
     1afb:	51                   	push   %ecx
     1afc:	51                   	push   %ecx
-    1afd:	68 50 50 00 00       	push   $0x5050
+    1afd:	68 88 52 00 00       	push   $0x5288
     1b02:	6a 01                	push   $0x1
     1b04:	e8 d7 1f 00 00       	call   3ae0 <printf>
     exit();
@@ -2761,7 +2761,7 @@
     1b0e:	83 ec 04             	sub    $0x4,%esp
     1b11:	8d 45 b2             	lea    -0x4e(%ebp),%eax
     1b14:	50                   	push   %eax
-    1b15:	68 e9 44 00 00       	push   $0x44e9
+    1b15:	68 21 47 00 00       	push   $0x4721
     1b1a:	6a 01                	push   $0x1
     1b1c:	e8 bf 1f 00 00       	call   3ae0 <printf>
         exit();
@@ -2770,7 +2770,7 @@
     1b26:	83 ec 04             	sub    $0x4,%esp
     1b29:	8d 45 b2             	lea    -0x4e(%ebp),%eax
     1b2c:	50                   	push   %eax
-    1b2d:	68 d0 44 00 00       	push   $0x44d0
+    1b2d:	68 08 47 00 00       	push   $0x4708
     1b32:	6a 01                	push   $0x1
     1b34:	e8 a7 1f 00 00       	call   3ae0 <printf>
         exit();
@@ -2793,11 +2793,11 @@
     1b59:	53                   	push   %ebx
     1b5a:	83 ec 24             	sub    $0x24,%esp
   printf(1, "linkunlink test\n");
-    1b5d:	68 14 45 00 00       	push   $0x4514
+    1b5d:	68 4c 47 00 00       	push   $0x474c
     1b62:	6a 01                	push   $0x1
     1b64:	e8 77 1f 00 00       	call   3ae0 <printf>
   unlink("x");
-    1b69:	c7 04 24 a1 47 00 00 	movl   $0x47a1,(%esp)
+    1b69:	c7 04 24 d9 49 00 00 	movl   $0x49d9,(%esp)
     1b70:	e8 5e 1e 00 00       	call   39d3 <unlink>
   pid = fork();
     1b75:	e8 01 1e 00 00       	call   397b <fork>
@@ -2823,7 +2823,7 @@
     1ba3:	74 7b                	je     1c20 <linkunlink+0xd0>
       unlink("x");
     1ba5:	83 ec 0c             	sub    $0xc,%esp
-    1ba8:	68 a1 47 00 00       	push   $0x47a1
+    1ba8:	68 d9 49 00 00       	push   $0x49d9
     1bad:	e8 21 1e 00 00       	call   39d3 <unlink>
     1bb2:	83 c4 10             	add    $0x10,%esp
   for(i = 0; i < 100; i++){
@@ -2845,7 +2845,7 @@
       close(open("x", O_RDWR | O_CREATE));
     1bd9:	83 ec 08             	sub    $0x8,%esp
     1bdc:	68 02 02 00 00       	push   $0x202
-    1be1:	68 a1 47 00 00       	push   $0x47a1
+    1be1:	68 d9 49 00 00       	push   $0x49d9
     1be6:	e8 d8 1d 00 00       	call   39c3 <open>
     1beb:	89 04 24             	mov    %eax,(%esp)
     1bee:	e8 b8 1d 00 00       	call   39ab <close>
@@ -2861,7 +2861,7 @@
     1c02:	e8 84 1d 00 00       	call   398b <wait>
   printf(1, "linkunlink ok\n");
     1c07:	83 ec 08             	sub    $0x8,%esp
-    1c0a:	68 29 45 00 00       	push   $0x4529
+    1c0a:	68 61 47 00 00       	push   $0x4761
     1c0f:	6a 01                	push   $0x1
     1c11:	e8 ca 1e 00 00       	call   3ae0 <printf>
 }
@@ -2874,15 +2874,15 @@
     1c1e:	66 90                	xchg   %ax,%ax
       link("cat", "x");
     1c20:	83 ec 08             	sub    $0x8,%esp
-    1c23:	68 a1 47 00 00       	push   $0x47a1
-    1c28:	68 25 45 00 00       	push   $0x4525
+    1c23:	68 d9 49 00 00       	push   $0x49d9
+    1c28:	68 5d 47 00 00       	push   $0x475d
     1c2d:	e8 b1 1d 00 00       	call   39e3 <link>
     1c32:	83 c4 10             	add    $0x10,%esp
     1c35:	e9 7b ff ff ff       	jmp    1bb5 <linkunlink+0x65>
     printf(1, "fork failed\n");
     1c3a:	52                   	push   %edx
     1c3b:	52                   	push   %edx
-    1c3c:	68 89 4d 00 00       	push   $0x4d89
+    1c3c:	68 c1 4f 00 00       	push   $0x4fc1
     1c41:	6a 01                	push   $0x1
     1c43:	e8 98 1e 00 00       	call   3ae0 <printf>
     exit();
@@ -2902,17 +2902,17 @@
     1c69:	53                   	push   %ebx
     1c6a:	83 ec 24             	sub    $0x24,%esp
   printf(1, "bigdir test\n");
-    1c6d:	68 38 45 00 00       	push   $0x4538
+    1c6d:	68 70 47 00 00       	push   $0x4770
     1c72:	6a 01                	push   $0x1
     1c74:	e8 67 1e 00 00       	call   3ae0 <printf>
   unlink("bd");
-    1c79:	c7 04 24 45 45 00 00 	movl   $0x4545,(%esp)
+    1c79:	c7 04 24 7d 47 00 00 	movl   $0x477d,(%esp)
     1c80:	e8 4e 1d 00 00       	call   39d3 <unlink>
   fd = open("bd", O_CREATE);
     1c85:	5a                   	pop    %edx
     1c86:	59                   	pop    %ecx
     1c87:	68 00 02 00 00       	push   $0x200
-    1c8c:	68 45 45 00 00       	push   $0x4545
+    1c8c:	68 7d 47 00 00       	push   $0x477d
     1c91:	e8 2d 1d 00 00       	call   39c3 <open>
   if(fd < 0){
     1c96:	83 c4 10             	add    $0x10,%esp
@@ -2941,7 +2941,7 @@
     name[1] = '0' + (i / 64);
     1cc5:	83 c0 30             	add    $0x30,%eax
     if(link("bd", name) != 0){
-    1cc8:	68 45 45 00 00       	push   $0x4545
+    1cc8:	68 7d 47 00 00       	push   $0x477d
     name[1] = '0' + (i / 64);
     1ccd:	88 45 df             	mov    %al,-0x21(%ebp)
     name[2] = '0' + (i % 64);
@@ -2964,7 +2964,7 @@
     1cf6:	75 c0                	jne    1cb8 <bigdir+0x58>
   unlink("bd");
     1cf8:	83 ec 0c             	sub    $0xc,%esp
-    1cfb:	68 45 45 00 00       	push   $0x4545
+    1cfb:	68 7d 47 00 00       	push   $0x477d
     1d00:	e8 ce 1c 00 00       	call   39d3 <unlink>
     1d05:	83 c4 10             	add    $0x10,%esp
     1d08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -3001,7 +3001,7 @@
     1d47:	75 c7                	jne    1d10 <bigdir+0xb0>
   printf(1, "bigdir ok\n");
     1d49:	83 ec 08             	sub    $0x8,%esp
-    1d4c:	68 87 45 00 00       	push   $0x4587
+    1d4c:	68 bf 47 00 00       	push   $0x47bf
     1d51:	6a 01                	push   $0x1
     1d53:	e8 88 1d 00 00       	call   3ae0 <printf>
     1d58:	83 c4 10             	add    $0x10,%esp
@@ -3014,14 +3014,14 @@
     1d62:	c3                   	ret    
       printf(1, "bigdir link failed\n");
     1d63:	83 ec 08             	sub    $0x8,%esp
-    1d66:	68 5e 45 00 00       	push   $0x455e
+    1d66:	68 96 47 00 00       	push   $0x4796
     1d6b:	6a 01                	push   $0x1
     1d6d:	e8 6e 1d 00 00       	call   3ae0 <printf>
       exit();
     1d72:	e8 0c 1c 00 00       	call   3983 <exit>
       printf(1, "bigdir unlink failed");
     1d77:	83 ec 08             	sub    $0x8,%esp
-    1d7a:	68 72 45 00 00       	push   $0x4572
+    1d7a:	68 aa 47 00 00       	push   $0x47aa
     1d7f:	6a 01                	push   $0x1
     1d81:	e8 5a 1d 00 00       	call   3ae0 <printf>
       exit();
@@ -3029,7 +3029,7 @@
     printf(1, "bigdir create failed\n");
     1d8b:	50                   	push   %eax
     1d8c:	50                   	push   %eax
-    1d8d:	68 48 45 00 00       	push   $0x4548
+    1d8d:	68 80 47 00 00       	push   $0x4780
     1d92:	6a 01                	push   $0x1
     1d94:	e8 47 1d 00 00       	call   3ae0 <printf>
     exit();
@@ -3044,14 +3044,14 @@
     1da7:	53                   	push   %ebx
     1da8:	83 ec 0c             	sub    $0xc,%esp
   printf(1, "subdir test\n");
-    1dab:	68 92 45 00 00       	push   $0x4592
+    1dab:	68 ca 47 00 00       	push   $0x47ca
     1db0:	6a 01                	push   $0x1
     1db2:	e8 29 1d 00 00       	call   3ae0 <printf>
   unlink("ff");
-    1db7:	c7 04 24 1b 46 00 00 	movl   $0x461b,(%esp)
+    1db7:	c7 04 24 53 48 00 00 	movl   $0x4853,(%esp)
     1dbe:	e8 10 1c 00 00       	call   39d3 <unlink>
   if(mkdir("dd") != 0){
-    1dc3:	c7 04 24 b8 46 00 00 	movl   $0x46b8,(%esp)
+    1dc3:	c7 04 24 f0 48 00 00 	movl   $0x48f0,(%esp)
     1dca:	e8 1c 1c 00 00       	call   39eb <mkdir>
     1dcf:	83 c4 10             	add    $0x10,%esp
     1dd2:	85 c0                	test   %eax,%eax
@@ -3059,7 +3059,7 @@
   fd = open("dd/ff", O_CREATE | O_RDWR);
     1dda:	83 ec 08             	sub    $0x8,%esp
     1ddd:	68 02 02 00 00       	push   $0x202
-    1de2:	68 f1 45 00 00       	push   $0x45f1
+    1de2:	68 29 48 00 00       	push   $0x4829
     1de7:	e8 d7 1b 00 00       	call   39c3 <open>
   if(fd < 0){
     1dec:	83 c4 10             	add    $0x10,%esp
@@ -3071,21 +3071,21 @@
   write(fd, "ff", 2);
     1df9:	83 ec 04             	sub    $0x4,%esp
     1dfc:	6a 02                	push   $0x2
-    1dfe:	68 1b 46 00 00       	push   $0x461b
+    1dfe:	68 53 48 00 00       	push   $0x4853
     1e03:	50                   	push   %eax
     1e04:	e8 9a 1b 00 00       	call   39a3 <write>
   close(fd);
     1e09:	89 1c 24             	mov    %ebx,(%esp)
     1e0c:	e8 9a 1b 00 00       	call   39ab <close>
   if(unlink("dd") >= 0){
-    1e11:	c7 04 24 b8 46 00 00 	movl   $0x46b8,(%esp)
+    1e11:	c7 04 24 f0 48 00 00 	movl   $0x48f0,(%esp)
     1e18:	e8 b6 1b 00 00       	call   39d3 <unlink>
     1e1d:	83 c4 10             	add    $0x10,%esp
     1e20:	85 c0                	test   %eax,%eax
     1e22:	0f 89 3f 05 00 00    	jns    2367 <subdir+0x5c7>
   if(mkdir("/dd/dd") != 0){
     1e28:	83 ec 0c             	sub    $0xc,%esp
-    1e2b:	68 cc 45 00 00       	push   $0x45cc
+    1e2b:	68 04 48 00 00       	push   $0x4804
     1e30:	e8 b6 1b 00 00       	call   39eb <mkdir>
     1e35:	83 c4 10             	add    $0x10,%esp
     1e38:	85 c0                	test   %eax,%eax
@@ -3093,7 +3093,7 @@
   fd = open("dd/dd/ff", O_CREATE | O_RDWR);
     1e40:	83 ec 08             	sub    $0x8,%esp
     1e43:	68 02 02 00 00       	push   $0x202
-    1e48:	68 ee 45 00 00       	push   $0x45ee
+    1e48:	68 26 48 00 00       	push   $0x4826
     1e4d:	e8 71 1b 00 00       	call   39c3 <open>
   if(fd < 0){
     1e52:	83 c4 10             	add    $0x10,%esp
@@ -3105,7 +3105,7 @@
   write(fd, "FF", 2);
     1e5f:	83 ec 04             	sub    $0x4,%esp
     1e62:	6a 02                	push   $0x2
-    1e64:	68 0f 46 00 00       	push   $0x460f
+    1e64:	68 47 48 00 00       	push   $0x4847
     1e69:	50                   	push   %eax
     1e6a:	e8 34 1b 00 00       	call   39a3 <write>
   close(fd);
@@ -3115,7 +3115,7 @@
     1e77:	58                   	pop    %eax
     1e78:	5a                   	pop    %edx
     1e79:	6a 00                	push   $0x0
-    1e7b:	68 12 46 00 00       	push   $0x4612
+    1e7b:	68 4a 48 00 00       	push   $0x484a
     1e80:	e8 3e 1b 00 00       	call   39c3 <open>
   if(fd < 0){
     1e85:	83 c4 10             	add    $0x10,%esp
@@ -3127,14 +3127,14 @@
   cc = read(fd, buf, sizeof(buf));
     1e92:	83 ec 04             	sub    $0x4,%esp
     1e95:	68 00 20 00 00       	push   $0x2000
-    1e9a:	68 c0 86 00 00       	push   $0x86c0
+    1e9a:	68 60 93 00 00       	push   $0x9360
     1e9f:	50                   	push   %eax
     1ea0:	e8 f6 1a 00 00       	call   399b <read>
   if(cc != 2 || buf[0] != 'f'){
     1ea5:	83 c4 10             	add    $0x10,%esp
     1ea8:	83 f8 02             	cmp    $0x2,%eax
     1eab:	0f 85 3a 03 00 00    	jne    21eb <subdir+0x44b>
-    1eb1:	80 3d c0 86 00 00 66 	cmpb   $0x66,0x86c0
+    1eb1:	80 3d 60 93 00 00 66 	cmpb   $0x66,0x9360
     1eb8:	0f 85 2d 03 00 00    	jne    21eb <subdir+0x44b>
   close(fd);
     1ebe:	83 ec 0c             	sub    $0xc,%esp
@@ -3143,15 +3143,15 @@
   if(link("dd/dd/ff", "dd/dd/ffff") != 0){
     1ec7:	59                   	pop    %ecx
     1ec8:	5b                   	pop    %ebx
-    1ec9:	68 52 46 00 00       	push   $0x4652
-    1ece:	68 ee 45 00 00       	push   $0x45ee
+    1ec9:	68 8a 48 00 00       	push   $0x488a
+    1ece:	68 26 48 00 00       	push   $0x4826
     1ed3:	e8 0b 1b 00 00       	call   39e3 <link>
     1ed8:	83 c4 10             	add    $0x10,%esp
     1edb:	85 c0                	test   %eax,%eax
     1edd:	0f 85 c6 03 00 00    	jne    22a9 <subdir+0x509>
   if(unlink("dd/dd/ff") != 0){
     1ee3:	83 ec 0c             	sub    $0xc,%esp
-    1ee6:	68 ee 45 00 00       	push   $0x45ee
+    1ee6:	68 26 48 00 00       	push   $0x4826
     1eeb:	e8 e3 1a 00 00       	call   39d3 <unlink>
     1ef0:	83 c4 10             	add    $0x10,%esp
     1ef3:	85 c0                	test   %eax,%eax
@@ -3159,35 +3159,35 @@
   if(open("dd/dd/ff", O_RDONLY) >= 0){
     1efb:	83 ec 08             	sub    $0x8,%esp
     1efe:	6a 00                	push   $0x0
-    1f00:	68 ee 45 00 00       	push   $0x45ee
+    1f00:	68 26 48 00 00       	push   $0x4826
     1f05:	e8 b9 1a 00 00       	call   39c3 <open>
     1f0a:	83 c4 10             	add    $0x10,%esp
     1f0d:	85 c0                	test   %eax,%eax
     1f0f:	0f 89 2c 04 00 00    	jns    2341 <subdir+0x5a1>
   if(chdir("dd") != 0){
     1f15:	83 ec 0c             	sub    $0xc,%esp
-    1f18:	68 b8 46 00 00       	push   $0x46b8
+    1f18:	68 f0 48 00 00       	push   $0x48f0
     1f1d:	e8 d1 1a 00 00       	call   39f3 <chdir>
     1f22:	83 c4 10             	add    $0x10,%esp
     1f25:	85 c0                	test   %eax,%eax
     1f27:	0f 85 01 04 00 00    	jne    232e <subdir+0x58e>
   if(chdir("dd/../../dd") != 0){
     1f2d:	83 ec 0c             	sub    $0xc,%esp
-    1f30:	68 86 46 00 00       	push   $0x4686
+    1f30:	68 be 48 00 00       	push   $0x48be
     1f35:	e8 b9 1a 00 00       	call   39f3 <chdir>
     1f3a:	83 c4 10             	add    $0x10,%esp
     1f3d:	85 c0                	test   %eax,%eax
     1f3f:	0f 85 b9 02 00 00    	jne    21fe <subdir+0x45e>
   if(chdir("dd/../../../dd") != 0){
     1f45:	83 ec 0c             	sub    $0xc,%esp
-    1f48:	68 ac 46 00 00       	push   $0x46ac
+    1f48:	68 e4 48 00 00       	push   $0x48e4
     1f4d:	e8 a1 1a 00 00       	call   39f3 <chdir>
     1f52:	83 c4 10             	add    $0x10,%esp
     1f55:	85 c0                	test   %eax,%eax
     1f57:	0f 85 a1 02 00 00    	jne    21fe <subdir+0x45e>
   if(chdir("./..") != 0){
     1f5d:	83 ec 0c             	sub    $0xc,%esp
-    1f60:	68 bb 46 00 00       	push   $0x46bb
+    1f60:	68 f3 48 00 00       	push   $0x48f3
     1f65:	e8 89 1a 00 00       	call   39f3 <chdir>
     1f6a:	83 c4 10             	add    $0x10,%esp
     1f6d:	85 c0                	test   %eax,%eax
@@ -3195,7 +3195,7 @@
   fd = open("dd/dd/ffff", 0);
     1f75:	83 ec 08             	sub    $0x8,%esp
     1f78:	6a 00                	push   $0x0
-    1f7a:	68 52 46 00 00       	push   $0x4652
+    1f7a:	68 8a 48 00 00       	push   $0x488a
     1f7f:	e8 3f 1a 00 00       	call   39c3 <open>
   if(fd < 0){
     1f84:	83 c4 10             	add    $0x10,%esp
@@ -3207,7 +3207,7 @@
   if(read(fd, buf, sizeof(buf)) != 2){
     1f91:	83 ec 04             	sub    $0x4,%esp
     1f94:	68 00 20 00 00       	push   $0x2000
-    1f99:	68 c0 86 00 00       	push   $0x86c0
+    1f99:	68 60 93 00 00       	push   $0x9360
     1f9e:	50                   	push   %eax
     1f9f:	e8 f7 19 00 00       	call   399b <read>
     1fa4:	83 c4 10             	add    $0x10,%esp
@@ -3221,7 +3221,7 @@
     1fb9:	58                   	pop    %eax
     1fba:	5a                   	pop    %edx
     1fbb:	6a 00                	push   $0x0
-    1fbd:	68 ee 45 00 00       	push   $0x45ee
+    1fbd:	68 26 48 00 00       	push   $0x4826
     1fc2:	e8 fc 19 00 00       	call   39c3 <open>
     1fc7:	83 c4 10             	add    $0x10,%esp
     1fca:	85 c0                	test   %eax,%eax
@@ -3229,7 +3229,7 @@
   if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
     1fd2:	83 ec 08             	sub    $0x8,%esp
     1fd5:	68 02 02 00 00       	push   $0x202
-    1fda:	68 06 47 00 00       	push   $0x4706
+    1fda:	68 3e 49 00 00       	push   $0x493e
     1fdf:	e8 df 19 00 00       	call   39c3 <open>
     1fe4:	83 c4 10             	add    $0x10,%esp
     1fe7:	85 c0                	test   %eax,%eax
@@ -3237,7 +3237,7 @@
   if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
     1fef:	83 ec 08             	sub    $0x8,%esp
     1ff2:	68 02 02 00 00       	push   $0x202
-    1ff7:	68 2b 47 00 00       	push   $0x472b
+    1ff7:	68 63 49 00 00       	push   $0x4963
     1ffc:	e8 c2 19 00 00       	call   39c3 <open>
     2001:	83 c4 10             	add    $0x10,%esp
     2004:	85 c0                	test   %eax,%eax
@@ -3245,7 +3245,7 @@
   if(open("dd", O_CREATE) >= 0){
     200c:	83 ec 08             	sub    $0x8,%esp
     200f:	68 00 02 00 00       	push   $0x200
-    2014:	68 b8 46 00 00       	push   $0x46b8
+    2014:	68 f0 48 00 00       	push   $0x48f0
     2019:	e8 a5 19 00 00       	call   39c3 <open>
     201e:	83 c4 10             	add    $0x10,%esp
     2021:	85 c0                	test   %eax,%eax
@@ -3253,7 +3253,7 @@
   if(open("dd", O_RDWR) >= 0){
     2029:	83 ec 08             	sub    $0x8,%esp
     202c:	6a 02                	push   $0x2
-    202e:	68 b8 46 00 00       	push   $0x46b8
+    202e:	68 f0 48 00 00       	push   $0x48f0
     2033:	e8 8b 19 00 00       	call   39c3 <open>
     2038:	83 c4 10             	add    $0x10,%esp
     203b:	85 c0                	test   %eax,%eax
@@ -3261,122 +3261,122 @@
   if(open("dd", O_WRONLY) >= 0){
     2043:	83 ec 08             	sub    $0x8,%esp
     2046:	6a 01                	push   $0x1
-    2048:	68 b8 46 00 00       	push   $0x46b8
+    2048:	68 f0 48 00 00       	push   $0x48f0
     204d:	e8 71 19 00 00       	call   39c3 <open>
     2052:	83 c4 10             	add    $0x10,%esp
     2055:	85 c0                	test   %eax,%eax
     2057:	0f 89 85 02 00 00    	jns    22e2 <subdir+0x542>
   if(link("dd/ff/ff", "dd/dd/xx") == 0){
     205d:	83 ec 08             	sub    $0x8,%esp
-    2060:	68 9a 47 00 00       	push   $0x479a
-    2065:	68 06 47 00 00       	push   $0x4706
+    2060:	68 d2 49 00 00       	push   $0x49d2
+    2065:	68 3e 49 00 00       	push   $0x493e
     206a:	e8 74 19 00 00       	call   39e3 <link>
     206f:	83 c4 10             	add    $0x10,%esp
     2072:	85 c0                	test   %eax,%eax
     2074:	0f 84 55 02 00 00    	je     22cf <subdir+0x52f>
   if(link("dd/xx/ff", "dd/dd/xx") == 0){
     207a:	83 ec 08             	sub    $0x8,%esp
-    207d:	68 9a 47 00 00       	push   $0x479a
-    2082:	68 2b 47 00 00       	push   $0x472b
+    207d:	68 d2 49 00 00       	push   $0x49d2
+    2082:	68 63 49 00 00       	push   $0x4963
     2087:	e8 57 19 00 00       	call   39e3 <link>
     208c:	83 c4 10             	add    $0x10,%esp
     208f:	85 c0                	test   %eax,%eax
     2091:	0f 84 25 02 00 00    	je     22bc <subdir+0x51c>
   if(link("dd/ff", "dd/dd/ffff") == 0){
     2097:	83 ec 08             	sub    $0x8,%esp
-    209a:	68 52 46 00 00       	push   $0x4652
-    209f:	68 f1 45 00 00       	push   $0x45f1
+    209a:	68 8a 48 00 00       	push   $0x488a
+    209f:	68 29 48 00 00       	push   $0x4829
     20a4:	e8 3a 19 00 00       	call   39e3 <link>
     20a9:	83 c4 10             	add    $0x10,%esp
     20ac:	85 c0                	test   %eax,%eax
     20ae:	0f 84 a9 01 00 00    	je     225d <subdir+0x4bd>
   if(mkdir("dd/ff/ff") == 0){
     20b4:	83 ec 0c             	sub    $0xc,%esp
-    20b7:	68 06 47 00 00       	push   $0x4706
+    20b7:	68 3e 49 00 00       	push   $0x493e
     20bc:	e8 2a 19 00 00       	call   39eb <mkdir>
     20c1:	83 c4 10             	add    $0x10,%esp
     20c4:	85 c0                	test   %eax,%eax
     20c6:	0f 84 7e 01 00 00    	je     224a <subdir+0x4aa>
   if(mkdir("dd/xx/ff") == 0){
     20cc:	83 ec 0c             	sub    $0xc,%esp
-    20cf:	68 2b 47 00 00       	push   $0x472b
+    20cf:	68 63 49 00 00       	push   $0x4963
     20d4:	e8 12 19 00 00       	call   39eb <mkdir>
     20d9:	83 c4 10             	add    $0x10,%esp
     20dc:	85 c0                	test   %eax,%eax
     20de:	0f 84 67 03 00 00    	je     244b <subdir+0x6ab>
   if(mkdir("dd/dd/ffff") == 0){
     20e4:	83 ec 0c             	sub    $0xc,%esp
-    20e7:	68 52 46 00 00       	push   $0x4652
+    20e7:	68 8a 48 00 00       	push   $0x488a
     20ec:	e8 fa 18 00 00       	call   39eb <mkdir>
     20f1:	83 c4 10             	add    $0x10,%esp
     20f4:	85 c0                	test   %eax,%eax
     20f6:	0f 84 3c 03 00 00    	je     2438 <subdir+0x698>
   if(unlink("dd/xx/ff") == 0){
     20fc:	83 ec 0c             	sub    $0xc,%esp
-    20ff:	68 2b 47 00 00       	push   $0x472b
+    20ff:	68 63 49 00 00       	push   $0x4963
     2104:	e8 ca 18 00 00       	call   39d3 <unlink>
     2109:	83 c4 10             	add    $0x10,%esp
     210c:	85 c0                	test   %eax,%eax
     210e:	0f 84 11 03 00 00    	je     2425 <subdir+0x685>
   if(unlink("dd/ff/ff") == 0){
     2114:	83 ec 0c             	sub    $0xc,%esp
-    2117:	68 06 47 00 00       	push   $0x4706
+    2117:	68 3e 49 00 00       	push   $0x493e
     211c:	e8 b2 18 00 00       	call   39d3 <unlink>
     2121:	83 c4 10             	add    $0x10,%esp
     2124:	85 c0                	test   %eax,%eax
     2126:	0f 84 e6 02 00 00    	je     2412 <subdir+0x672>
   if(chdir("dd/ff") == 0){
     212c:	83 ec 0c             	sub    $0xc,%esp
-    212f:	68 f1 45 00 00       	push   $0x45f1
+    212f:	68 29 48 00 00       	push   $0x4829
     2134:	e8 ba 18 00 00       	call   39f3 <chdir>
     2139:	83 c4 10             	add    $0x10,%esp
     213c:	85 c0                	test   %eax,%eax
     213e:	0f 84 bb 02 00 00    	je     23ff <subdir+0x65f>
   if(chdir("dd/xx") == 0){
     2144:	83 ec 0c             	sub    $0xc,%esp
-    2147:	68 9d 47 00 00       	push   $0x479d
+    2147:	68 d5 49 00 00       	push   $0x49d5
     214c:	e8 a2 18 00 00       	call   39f3 <chdir>
     2151:	83 c4 10             	add    $0x10,%esp
     2154:	85 c0                	test   %eax,%eax
     2156:	0f 84 90 02 00 00    	je     23ec <subdir+0x64c>
   if(unlink("dd/dd/ffff") != 0){
     215c:	83 ec 0c             	sub    $0xc,%esp
-    215f:	68 52 46 00 00       	push   $0x4652
+    215f:	68 8a 48 00 00       	push   $0x488a
     2164:	e8 6a 18 00 00       	call   39d3 <unlink>
     2169:	83 c4 10             	add    $0x10,%esp
     216c:	85 c0                	test   %eax,%eax
     216e:	0f 85 9d 00 00 00    	jne    2211 <subdir+0x471>
   if(unlink("dd/ff") != 0){
     2174:	83 ec 0c             	sub    $0xc,%esp
-    2177:	68 f1 45 00 00       	push   $0x45f1
+    2177:	68 29 48 00 00       	push   $0x4829
     217c:	e8 52 18 00 00       	call   39d3 <unlink>
     2181:	83 c4 10             	add    $0x10,%esp
     2184:	85 c0                	test   %eax,%eax
     2186:	0f 85 4d 02 00 00    	jne    23d9 <subdir+0x639>
   if(unlink("dd") == 0){
     218c:	83 ec 0c             	sub    $0xc,%esp
-    218f:	68 b8 46 00 00       	push   $0x46b8
+    218f:	68 f0 48 00 00       	push   $0x48f0
     2194:	e8 3a 18 00 00       	call   39d3 <unlink>
     2199:	83 c4 10             	add    $0x10,%esp
     219c:	85 c0                	test   %eax,%eax
     219e:	0f 84 22 02 00 00    	je     23c6 <subdir+0x626>
   if(unlink("dd/dd") < 0){
     21a4:	83 ec 0c             	sub    $0xc,%esp
-    21a7:	68 cd 45 00 00       	push   $0x45cd
+    21a7:	68 05 48 00 00       	push   $0x4805
     21ac:	e8 22 18 00 00       	call   39d3 <unlink>
     21b1:	83 c4 10             	add    $0x10,%esp
     21b4:	85 c0                	test   %eax,%eax
     21b6:	0f 88 f7 01 00 00    	js     23b3 <subdir+0x613>
   if(unlink("dd") < 0){
     21bc:	83 ec 0c             	sub    $0xc,%esp
-    21bf:	68 b8 46 00 00       	push   $0x46b8
+    21bf:	68 f0 48 00 00       	push   $0x48f0
     21c4:	e8 0a 18 00 00       	call   39d3 <unlink>
     21c9:	83 c4 10             	add    $0x10,%esp
     21cc:	85 c0                	test   %eax,%eax
     21ce:	0f 88 cc 01 00 00    	js     23a0 <subdir+0x600>
   printf(1, "subdir ok\n");
     21d4:	83 ec 08             	sub    $0x8,%esp
-    21d7:	68 9a 48 00 00       	push   $0x489a
+    21d7:	68 d2 4a 00 00       	push   $0x4ad2
     21dc:	6a 01                	push   $0x1
     21de:	e8 fd 18 00 00       	call   3ae0 <printf>
 }
@@ -3387,7 +3387,7 @@
     printf(1, "dd/dd/../ff wrong content\n");
     21eb:	50                   	push   %eax
     21ec:	50                   	push   %eax
-    21ed:	68 37 46 00 00       	push   $0x4637
+    21ed:	68 6f 48 00 00       	push   $0x486f
     21f2:	6a 01                	push   $0x1
     21f4:	e8 e7 18 00 00       	call   3ae0 <printf>
     exit();
@@ -3395,7 +3395,7 @@
     printf(1, "chdir dd/../../dd failed\n");
     21fe:	50                   	push   %eax
     21ff:	50                   	push   %eax
-    2200:	68 92 46 00 00       	push   $0x4692
+    2200:	68 ca 48 00 00       	push   $0x48ca
     2205:	6a 01                	push   $0x1
     2207:	e8 d4 18 00 00       	call   3ae0 <printf>
     exit();
@@ -3403,7 +3403,7 @@
     printf(1, "unlink dd/dd/ff failed\n");
     2211:	50                   	push   %eax
     2212:	50                   	push   %eax
-    2213:	68 5d 46 00 00       	push   $0x465d
+    2213:	68 95 48 00 00       	push   $0x4895
     2218:	6a 01                	push   $0x1
     221a:	e8 c1 18 00 00       	call   3ae0 <printf>
     exit();
@@ -3411,7 +3411,7 @@
     printf(1, "create dd/ff/ff succeeded!\n");
     2224:	51                   	push   %ecx
     2225:	51                   	push   %ecx
-    2226:	68 0f 47 00 00       	push   $0x470f
+    2226:	68 47 49 00 00       	push   $0x4947
     222b:	6a 01                	push   $0x1
     222d:	e8 ae 18 00 00       	call   3ae0 <printf>
     exit();
@@ -3419,7 +3419,7 @@
     printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
     2237:	53                   	push   %ebx
     2238:	53                   	push   %ebx
-    2239:	68 f4 50 00 00       	push   $0x50f4
+    2239:	68 2c 53 00 00       	push   $0x532c
     223e:	6a 01                	push   $0x1
     2240:	e8 9b 18 00 00       	call   3ae0 <printf>
     exit();
@@ -3427,7 +3427,7 @@
     printf(1, "mkdir dd/ff/ff succeeded!\n");
     224a:	51                   	push   %ecx
     224b:	51                   	push   %ecx
-    224c:	68 a3 47 00 00       	push   $0x47a3
+    224c:	68 db 49 00 00       	push   $0x49db
     2251:	6a 01                	push   $0x1
     2253:	e8 88 18 00 00       	call   3ae0 <printf>
     exit();
@@ -3435,7 +3435,7 @@
     printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
     225d:	53                   	push   %ebx
     225e:	53                   	push   %ebx
-    225f:	68 64 51 00 00       	push   $0x5164
+    225f:	68 9c 53 00 00       	push   $0x539c
     2264:	6a 01                	push   $0x1
     2266:	e8 75 18 00 00       	call   3ae0 <printf>
     exit();
@@ -3443,7 +3443,7 @@
     printf(1, "open dd/dd/../ff failed\n");
     2270:	50                   	push   %eax
     2271:	50                   	push   %eax
-    2272:	68 1e 46 00 00       	push   $0x461e
+    2272:	68 56 48 00 00       	push   $0x4856
     2277:	6a 01                	push   $0x1
     2279:	e8 62 18 00 00       	call   3ae0 <printf>
     exit();
@@ -3451,7 +3451,7 @@
     printf(1, "create dd/dd/ff failed\n");
     2283:	51                   	push   %ecx
     2284:	51                   	push   %ecx
-    2285:	68 f7 45 00 00       	push   $0x45f7
+    2285:	68 2f 48 00 00       	push   $0x482f
     228a:	6a 01                	push   $0x1
     228c:	e8 4f 18 00 00       	call   3ae0 <printf>
     exit();
@@ -3459,7 +3459,7 @@
     printf(1, "chdir ./.. failed\n");
     2296:	50                   	push   %eax
     2297:	50                   	push   %eax
-    2298:	68 c0 46 00 00       	push   $0x46c0
+    2298:	68 f8 48 00 00       	push   $0x48f8
     229d:	6a 01                	push   $0x1
     229f:	e8 3c 18 00 00       	call   3ae0 <printf>
     exit();
@@ -3467,7 +3467,7 @@
     printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
     22a9:	52                   	push   %edx
     22aa:	52                   	push   %edx
-    22ab:	68 ac 50 00 00       	push   $0x50ac
+    22ab:	68 e4 52 00 00       	push   $0x52e4
     22b0:	6a 01                	push   $0x1
     22b2:	e8 29 18 00 00       	call   3ae0 <printf>
     exit();
@@ -3475,7 +3475,7 @@
     printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
     22bc:	50                   	push   %eax
     22bd:	50                   	push   %eax
-    22be:	68 40 51 00 00       	push   $0x5140
+    22be:	68 78 53 00 00       	push   $0x5378
     22c3:	6a 01                	push   $0x1
     22c5:	e8 16 18 00 00       	call   3ae0 <printf>
     exit();
@@ -3483,7 +3483,7 @@
     printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
     22cf:	50                   	push   %eax
     22d0:	50                   	push   %eax
-    22d1:	68 1c 51 00 00       	push   $0x511c
+    22d1:	68 54 53 00 00       	push   $0x5354
     22d6:	6a 01                	push   $0x1
     22d8:	e8 03 18 00 00       	call   3ae0 <printf>
     exit();
@@ -3491,7 +3491,7 @@
     printf(1, "open dd wronly succeeded!\n");
     22e2:	50                   	push   %eax
     22e3:	50                   	push   %eax
-    22e4:	68 7f 47 00 00       	push   $0x477f
+    22e4:	68 b7 49 00 00       	push   $0x49b7
     22e9:	6a 01                	push   $0x1
     22eb:	e8 f0 17 00 00       	call   3ae0 <printf>
     exit();
@@ -3499,7 +3499,7 @@
     printf(1, "open dd rdwr succeeded!\n");
     22f5:	50                   	push   %eax
     22f6:	50                   	push   %eax
-    22f7:	68 66 47 00 00       	push   $0x4766
+    22f7:	68 9e 49 00 00       	push   $0x499e
     22fc:	6a 01                	push   $0x1
     22fe:	e8 dd 17 00 00       	call   3ae0 <printf>
     exit();
@@ -3507,7 +3507,7 @@
     printf(1, "create dd succeeded!\n");
     2308:	50                   	push   %eax
     2309:	50                   	push   %eax
-    230a:	68 50 47 00 00       	push   $0x4750
+    230a:	68 88 49 00 00       	push   $0x4988
     230f:	6a 01                	push   $0x1
     2311:	e8 ca 17 00 00       	call   3ae0 <printf>
     exit();
@@ -3515,7 +3515,7 @@
     printf(1, "create dd/xx/ff succeeded!\n");
     231b:	52                   	push   %edx
     231c:	52                   	push   %edx
-    231d:	68 34 47 00 00       	push   $0x4734
+    231d:	68 6c 49 00 00       	push   $0x496c
     2322:	6a 01                	push   $0x1
     2324:	e8 b7 17 00 00       	call   3ae0 <printf>
     exit();
@@ -3523,7 +3523,7 @@
     printf(1, "chdir dd failed\n");
     232e:	50                   	push   %eax
     232f:	50                   	push   %eax
-    2330:	68 75 46 00 00       	push   $0x4675
+    2330:	68 ad 48 00 00       	push   $0x48ad
     2335:	6a 01                	push   $0x1
     2337:	e8 a4 17 00 00       	call   3ae0 <printf>
     exit();
@@ -3531,7 +3531,7 @@
     printf(1, "open (unlinked) dd/dd/ff succeeded\n");
     2341:	50                   	push   %eax
     2342:	50                   	push   %eax
-    2343:	68 d0 50 00 00       	push   $0x50d0
+    2343:	68 08 53 00 00       	push   $0x5308
     2348:	6a 01                	push   $0x1
     234a:	e8 91 17 00 00       	call   3ae0 <printf>
     exit();
@@ -3539,7 +3539,7 @@
     printf(1, "subdir mkdir dd/dd failed\n");
     2354:	53                   	push   %ebx
     2355:	53                   	push   %ebx
-    2356:	68 d3 45 00 00       	push   $0x45d3
+    2356:	68 0b 48 00 00       	push   $0x480b
     235b:	6a 01                	push   $0x1
     235d:	e8 7e 17 00 00       	call   3ae0 <printf>
     exit();
@@ -3547,7 +3547,7 @@
     printf(1, "unlink dd (non-empty dir) succeeded!\n");
     2367:	50                   	push   %eax
     2368:	50                   	push   %eax
-    2369:	68 84 50 00 00       	push   $0x5084
+    2369:	68 bc 52 00 00       	push   $0x52bc
     236e:	6a 01                	push   $0x1
     2370:	e8 6b 17 00 00       	call   3ae0 <printf>
     exit();
@@ -3555,7 +3555,7 @@
     printf(1, "create dd/ff failed\n");
     237a:	50                   	push   %eax
     237b:	50                   	push   %eax
-    237c:	68 b7 45 00 00       	push   $0x45b7
+    237c:	68 ef 47 00 00       	push   $0x47ef
     2381:	6a 01                	push   $0x1
     2383:	e8 58 17 00 00       	call   3ae0 <printf>
     exit();
@@ -3563,7 +3563,7 @@
     printf(1, "subdir mkdir dd failed\n");
     238d:	50                   	push   %eax
     238e:	50                   	push   %eax
-    238f:	68 9f 45 00 00       	push   $0x459f
+    238f:	68 d7 47 00 00       	push   $0x47d7
     2394:	6a 01                	push   $0x1
     2396:	e8 45 17 00 00       	call   3ae0 <printf>
     exit();
@@ -3571,7 +3571,7 @@
     printf(1, "unlink dd failed\n");
     23a0:	50                   	push   %eax
     23a1:	50                   	push   %eax
-    23a2:	68 88 48 00 00       	push   $0x4888
+    23a2:	68 c0 4a 00 00       	push   $0x4ac0
     23a7:	6a 01                	push   $0x1
     23a9:	e8 32 17 00 00       	call   3ae0 <printf>
     exit();
@@ -3579,7 +3579,7 @@
     printf(1, "unlink dd/dd failed\n");
     23b3:	52                   	push   %edx
     23b4:	52                   	push   %edx
-    23b5:	68 73 48 00 00       	push   $0x4873
+    23b5:	68 ab 4a 00 00       	push   $0x4aab
     23ba:	6a 01                	push   $0x1
     23bc:	e8 1f 17 00 00       	call   3ae0 <printf>
     exit();
@@ -3587,7 +3587,7 @@
     printf(1, "unlink non-empty dd succeeded!\n");
     23c6:	51                   	push   %ecx
     23c7:	51                   	push   %ecx
-    23c8:	68 88 51 00 00       	push   $0x5188
+    23c8:	68 c0 53 00 00       	push   $0x53c0
     23cd:	6a 01                	push   $0x1
     23cf:	e8 0c 17 00 00       	call   3ae0 <printf>
     exit();
@@ -3595,7 +3595,7 @@
     printf(1, "unlink dd/ff failed\n");
     23d9:	53                   	push   %ebx
     23da:	53                   	push   %ebx
-    23db:	68 5e 48 00 00       	push   $0x485e
+    23db:	68 96 4a 00 00       	push   $0x4a96
     23e0:	6a 01                	push   $0x1
     23e2:	e8 f9 16 00 00       	call   3ae0 <printf>
     exit();
@@ -3603,7 +3603,7 @@
     printf(1, "chdir dd/xx succeeded!\n");
     23ec:	50                   	push   %eax
     23ed:	50                   	push   %eax
-    23ee:	68 46 48 00 00       	push   $0x4846
+    23ee:	68 7e 4a 00 00       	push   $0x4a7e
     23f3:	6a 01                	push   $0x1
     23f5:	e8 e6 16 00 00       	call   3ae0 <printf>
     exit();
@@ -3611,7 +3611,7 @@
     printf(1, "chdir dd/ff succeeded!\n");
     23ff:	50                   	push   %eax
     2400:	50                   	push   %eax
-    2401:	68 2e 48 00 00       	push   $0x482e
+    2401:	68 66 4a 00 00       	push   $0x4a66
     2406:	6a 01                	push   $0x1
     2408:	e8 d3 16 00 00       	call   3ae0 <printf>
     exit();
@@ -3619,7 +3619,7 @@
     printf(1, "unlink dd/ff/ff succeeded!\n");
     2412:	50                   	push   %eax
     2413:	50                   	push   %eax
-    2414:	68 12 48 00 00       	push   $0x4812
+    2414:	68 4a 4a 00 00       	push   $0x4a4a
     2419:	6a 01                	push   $0x1
     241b:	e8 c0 16 00 00       	call   3ae0 <printf>
     exit();
@@ -3627,7 +3627,7 @@
     printf(1, "unlink dd/xx/ff succeeded!\n");
     2425:	50                   	push   %eax
     2426:	50                   	push   %eax
-    2427:	68 f6 47 00 00       	push   $0x47f6
+    2427:	68 2e 4a 00 00       	push   $0x4a2e
     242c:	6a 01                	push   $0x1
     242e:	e8 ad 16 00 00       	call   3ae0 <printf>
     exit();
@@ -3635,7 +3635,7 @@
     printf(1, "mkdir dd/dd/ffff succeeded!\n");
     2438:	50                   	push   %eax
     2439:	50                   	push   %eax
-    243a:	68 d9 47 00 00       	push   $0x47d9
+    243a:	68 11 4a 00 00       	push   $0x4a11
     243f:	6a 01                	push   $0x1
     2441:	e8 9a 16 00 00       	call   3ae0 <printf>
     exit();
@@ -3643,7 +3643,7 @@
     printf(1, "mkdir dd/xx/ff succeeded!\n");
     244b:	52                   	push   %edx
     244c:	52                   	push   %edx
-    244d:	68 be 47 00 00       	push   $0x47be
+    244d:	68 f6 49 00 00       	push   $0x49f6
     2452:	6a 01                	push   $0x1
     2454:	e8 87 16 00 00       	call   3ae0 <printf>
     exit();
@@ -3651,7 +3651,7 @@
     printf(1, "read dd/dd/ffff wrong len\n");
     245e:	51                   	push   %ecx
     245f:	51                   	push   %ecx
-    2460:	68 eb 46 00 00       	push   $0x46eb
+    2460:	68 23 49 00 00       	push   $0x4923
     2465:	6a 01                	push   $0x1
     2467:	e8 74 16 00 00       	call   3ae0 <printf>
     exit();
@@ -3659,7 +3659,7 @@
     printf(1, "open dd/dd/ffff failed\n");
     2471:	53                   	push   %ebx
     2472:	53                   	push   %ebx
-    2473:	68 d3 46 00 00       	push   $0x46d3
+    2473:	68 0b 49 00 00       	push   $0x490b
     2478:	6a 01                	push   $0x1
     247a:	e8 61 16 00 00       	call   3ae0 <printf>
     exit();
@@ -3679,18 +3679,18 @@
     2499:	bb f3 01 00 00       	mov    $0x1f3,%ebx
   printf(1, "bigwrite test\n");
     249e:	83 ec 08             	sub    $0x8,%esp
-    24a1:	68 a5 48 00 00       	push   $0x48a5
+    24a1:	68 dd 4a 00 00       	push   $0x4add
     24a6:	6a 01                	push   $0x1
     24a8:	e8 33 16 00 00       	call   3ae0 <printf>
   unlink("bigwrite");
-    24ad:	c7 04 24 b4 48 00 00 	movl   $0x48b4,(%esp)
+    24ad:	c7 04 24 ec 4a 00 00 	movl   $0x4aec,(%esp)
     24b4:	e8 1a 15 00 00       	call   39d3 <unlink>
     24b9:	83 c4 10             	add    $0x10,%esp
     24bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     fd = open("bigwrite", O_CREATE | O_RDWR);
     24c0:	83 ec 08             	sub    $0x8,%esp
     24c3:	68 02 02 00 00       	push   $0x202
-    24c8:	68 b4 48 00 00       	push   $0x48b4
+    24c8:	68 ec 4a 00 00       	push   $0x4aec
     24cd:	e8 f1 14 00 00       	call   39c3 <open>
     if(fd < 0){
     24d2:	83 c4 10             	add    $0x10,%esp
@@ -3702,7 +3702,7 @@
       int cc = write(fd, buf, sz);
     24db:	83 ec 04             	sub    $0x4,%esp
     24de:	53                   	push   %ebx
-    24df:	68 c0 86 00 00       	push   $0x86c0
+    24df:	68 60 93 00 00       	push   $0x9360
     24e4:	50                   	push   %eax
     24e5:	e8 b9 14 00 00       	call   39a3 <write>
       if(cc != sz){
@@ -3712,7 +3712,7 @@
       int cc = write(fd, buf, sz);
     24f1:	83 ec 04             	sub    $0x4,%esp
     24f4:	53                   	push   %ebx
-    24f5:	68 c0 86 00 00       	push   $0x86c0
+    24f5:	68 60 93 00 00       	push   $0x9360
     24fa:	56                   	push   %esi
     24fb:	e8 a3 14 00 00       	call   39a3 <write>
       if(cc != sz){
@@ -3727,7 +3727,7 @@
     2510:	56                   	push   %esi
     2511:	e8 95 14 00 00       	call   39ab <close>
     unlink("bigwrite");
-    2516:	c7 04 24 b4 48 00 00 	movl   $0x48b4,(%esp)
+    2516:	c7 04 24 ec 4a 00 00 	movl   $0x4aec,(%esp)
     251d:	e8 b1 14 00 00       	call   39d3 <unlink>
   for(sz = 499; sz < 12*512; sz += 471){
     2522:	83 c4 10             	add    $0x10,%esp
@@ -3735,7 +3735,7 @@
     252b:	75 93                	jne    24c0 <bigwrite+0x30>
   printf(1, "bigwrite ok\n");
     252d:	83 ec 08             	sub    $0x8,%esp
-    2530:	68 e7 48 00 00       	push   $0x48e7
+    2530:	68 1f 4b 00 00       	push   $0x4b1f
     2535:	6a 01                	push   $0x1
     2537:	e8 a4 15 00 00       	call   3ae0 <printf>
 }
@@ -3748,14 +3748,14 @@
         printf(1, "write(%d) ret %d\n", sz, cc);
     2546:	50                   	push   %eax
     2547:	53                   	push   %ebx
-    2548:	68 d5 48 00 00       	push   $0x48d5
+    2548:	68 0d 4b 00 00       	push   $0x4b0d
     254d:	6a 01                	push   $0x1
     254f:	e8 8c 15 00 00       	call   3ae0 <printf>
         exit();
     2554:	e8 2a 14 00 00       	call   3983 <exit>
       printf(1, "cannot create bigwrite\n");
     2559:	83 ec 08             	sub    $0x8,%esp
-    255c:	68 bd 48 00 00       	push   $0x48bd
+    255c:	68 f5 4a 00 00       	push   $0x4af5
     2561:	6a 01                	push   $0x1
     2563:	e8 78 15 00 00       	call   3ae0 <printf>
       exit();
@@ -3772,17 +3772,17 @@
     2579:	53                   	push   %ebx
     257a:	83 ec 14             	sub    $0x14,%esp
   printf(1, "bigfile test\n");
-    257d:	68 f4 48 00 00       	push   $0x48f4
+    257d:	68 2c 4b 00 00       	push   $0x4b2c
     2582:	6a 01                	push   $0x1
     2584:	e8 57 15 00 00       	call   3ae0 <printf>
   unlink("bigfile");
-    2589:	c7 04 24 10 49 00 00 	movl   $0x4910,(%esp)
+    2589:	c7 04 24 48 4b 00 00 	movl   $0x4b48,(%esp)
     2590:	e8 3e 14 00 00       	call   39d3 <unlink>
   fd = open("bigfile", O_CREATE | O_RDWR);
     2595:	58                   	pop    %eax
     2596:	5a                   	pop    %edx
     2597:	68 02 02 00 00       	push   $0x202
-    259c:	68 10 49 00 00       	push   $0x4910
+    259c:	68 48 4b 00 00       	push   $0x4b48
     25a1:	e8 1d 14 00 00       	call   39c3 <open>
   if(fd < 0){
     25a6:	83 c4 10             	add    $0x10,%esp
@@ -3796,12 +3796,12 @@
     25b8:	83 ec 04             	sub    $0x4,%esp
     25bb:	68 58 02 00 00       	push   $0x258
     25c0:	53                   	push   %ebx
-    25c1:	68 c0 86 00 00       	push   $0x86c0
+    25c1:	68 60 93 00 00       	push   $0x9360
     25c6:	e8 15 12 00 00       	call   37e0 <memset>
     if(write(fd, buf, 600) != 600){
     25cb:	83 c4 0c             	add    $0xc,%esp
     25ce:	68 58 02 00 00       	push   $0x258
-    25d3:	68 c0 86 00 00       	push   $0x86c0
+    25d3:	68 60 93 00 00       	push   $0x9360
     25d8:	56                   	push   %esi
     25d9:	e8 c5 13 00 00       	call   39a3 <write>
     25de:	83 c4 10             	add    $0x10,%esp
@@ -3819,7 +3819,7 @@
     25fd:	5e                   	pop    %esi
     25fe:	5f                   	pop    %edi
     25ff:	6a 00                	push   $0x0
-    2601:	68 10 49 00 00       	push   $0x4910
+    2601:	68 48 4b 00 00       	push   $0x4b48
     2606:	e8 b8 13 00 00       	call   39c3 <open>
   if(fd < 0){
     260b:	83 c4 10             	add    $0x10,%esp
@@ -3839,11 +3839,11 @@
     2625:	0f 85 91 00 00 00    	jne    26bc <bigfile+0x14c>
     if(buf[0] != i/2 || buf[299] != i/2){
     262b:	89 fa                	mov    %edi,%edx
-    262d:	0f be 05 c0 86 00 00 	movsbl 0x86c0,%eax
+    262d:	0f be 05 60 93 00 00 	movsbl 0x9360,%eax
     2634:	d1 fa                	sar    %edx
     2636:	39 d0                	cmp    %edx,%eax
     2638:	75 6e                	jne    26a8 <bigfile+0x138>
-    263a:	0f be 15 eb 87 00 00 	movsbl 0x87eb,%edx
+    263a:	0f be 15 8b 94 00 00 	movsbl 0x948b,%edx
     2641:	39 d0                	cmp    %edx,%eax
     2643:	75 63                	jne    26a8 <bigfile+0x138>
     total += cc;
@@ -3853,7 +3853,7 @@
     cc = read(fd, buf, 300);
     264e:	83 ec 04             	sub    $0x4,%esp
     2651:	68 2c 01 00 00       	push   $0x12c
-    2656:	68 c0 86 00 00       	push   $0x86c0
+    2656:	68 60 93 00 00       	push   $0x9360
     265b:	56                   	push   %esi
     265c:	e8 3a 13 00 00       	call   399b <read>
     if(cc < 0){
@@ -3872,12 +3872,12 @@
     267c:	0f 85 9c 00 00 00    	jne    271e <bigfile+0x1ae>
   unlink("bigfile");
     2682:	83 ec 0c             	sub    $0xc,%esp
-    2685:	68 10 49 00 00       	push   $0x4910
+    2685:	68 48 4b 00 00       	push   $0x4b48
     268a:	e8 44 13 00 00       	call   39d3 <unlink>
   printf(1, "bigfile test ok\n");
     268f:	58                   	pop    %eax
     2690:	5a                   	pop    %edx
-    2691:	68 9f 49 00 00       	push   $0x499f
+    2691:	68 d7 4b 00 00       	push   $0x4bd7
     2696:	6a 01                	push   $0x1
     2698:	e8 43 14 00 00       	call   3ae0 <printf>
 }
@@ -3890,28 +3890,28 @@
     26a7:	c3                   	ret    
       printf(1, "read bigfile wrong data\n");
     26a8:	83 ec 08             	sub    $0x8,%esp
-    26ab:	68 6c 49 00 00       	push   $0x496c
+    26ab:	68 a4 4b 00 00       	push   $0x4ba4
     26b0:	6a 01                	push   $0x1
     26b2:	e8 29 14 00 00       	call   3ae0 <printf>
       exit();
     26b7:	e8 c7 12 00 00       	call   3983 <exit>
       printf(1, "short read bigfile\n");
     26bc:	83 ec 08             	sub    $0x8,%esp
-    26bf:	68 58 49 00 00       	push   $0x4958
+    26bf:	68 90 4b 00 00       	push   $0x4b90
     26c4:	6a 01                	push   $0x1
     26c6:	e8 15 14 00 00       	call   3ae0 <printf>
       exit();
     26cb:	e8 b3 12 00 00       	call   3983 <exit>
       printf(1, "read bigfile failed\n");
     26d0:	83 ec 08             	sub    $0x8,%esp
-    26d3:	68 43 49 00 00       	push   $0x4943
+    26d3:	68 7b 4b 00 00       	push   $0x4b7b
     26d8:	6a 01                	push   $0x1
     26da:	e8 01 14 00 00       	call   3ae0 <printf>
       exit();
     26df:	e8 9f 12 00 00       	call   3983 <exit>
       printf(1, "write bigfile failed\n");
     26e4:	83 ec 08             	sub    $0x8,%esp
-    26e7:	68 18 49 00 00       	push   $0x4918
+    26e7:	68 50 4b 00 00       	push   $0x4b50
     26ec:	6a 01                	push   $0x1
     26ee:	e8 ed 13 00 00       	call   3ae0 <printf>
       exit();
@@ -3919,7 +3919,7 @@
     printf(1, "cannot open bigfile\n");
     26f8:	53                   	push   %ebx
     26f9:	53                   	push   %ebx
-    26fa:	68 2e 49 00 00       	push   $0x492e
+    26fa:	68 66 4b 00 00       	push   $0x4b66
     26ff:	6a 01                	push   $0x1
     2701:	e8 da 13 00 00       	call   3ae0 <printf>
     exit();
@@ -3927,7 +3927,7 @@
     printf(1, "cannot create bigfile");
     270b:	50                   	push   %eax
     270c:	50                   	push   %eax
-    270d:	68 02 49 00 00       	push   $0x4902
+    270d:	68 3a 4b 00 00       	push   $0x4b3a
     2712:	6a 01                	push   $0x1
     2714:	e8 c7 13 00 00       	call   3ae0 <printf>
     exit();
@@ -3935,7 +3935,7 @@
     printf(1, "read bigfile wrong total\n");
     271e:	51                   	push   %ecx
     271f:	51                   	push   %ecx
-    2720:	68 85 49 00 00       	push   $0x4985
+    2720:	68 bd 4b 00 00       	push   $0x4bbd
     2725:	6a 01                	push   $0x1
     2727:	e8 b4 13 00 00       	call   3ae0 <printf>
     exit();
@@ -3951,18 +3951,18 @@
     2745:	89 e5                	mov    %esp,%ebp
     2747:	83 ec 10             	sub    $0x10,%esp
   printf(1, "fourteen test\n");
-    274a:	68 b0 49 00 00       	push   $0x49b0
+    274a:	68 e8 4b 00 00       	push   $0x4be8
     274f:	6a 01                	push   $0x1
     2751:	e8 8a 13 00 00       	call   3ae0 <printf>
   if(mkdir("12345678901234") != 0){
-    2756:	c7 04 24 eb 49 00 00 	movl   $0x49eb,(%esp)
+    2756:	c7 04 24 23 4c 00 00 	movl   $0x4c23,(%esp)
     275d:	e8 89 12 00 00       	call   39eb <mkdir>
     2762:	83 c4 10             	add    $0x10,%esp
     2765:	85 c0                	test   %eax,%eax
     2767:	0f 85 97 00 00 00    	jne    2804 <fourteen+0xc4>
   if(mkdir("12345678901234/123456789012345") != 0){
     276d:	83 ec 0c             	sub    $0xc,%esp
-    2770:	68 a8 51 00 00       	push   $0x51a8
+    2770:	68 e0 53 00 00       	push   $0x53e0
     2775:	e8 71 12 00 00       	call   39eb <mkdir>
     277a:	83 c4 10             	add    $0x10,%esp
     277d:	85 c0                	test   %eax,%eax
@@ -3970,7 +3970,7 @@
   fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
     2785:	83 ec 08             	sub    $0x8,%esp
     2788:	68 00 02 00 00       	push   $0x200
-    278d:	68 f8 51 00 00       	push   $0x51f8
+    278d:	68 30 54 00 00       	push   $0x5430
     2792:	e8 2c 12 00 00       	call   39c3 <open>
   if(fd < 0){
     2797:	83 c4 10             	add    $0x10,%esp
@@ -3984,7 +3984,7 @@
     27ab:	58                   	pop    %eax
     27ac:	5a                   	pop    %edx
     27ad:	6a 00                	push   $0x0
-    27af:	68 68 52 00 00       	push   $0x5268
+    27af:	68 a0 54 00 00       	push   $0x54a0
     27b4:	e8 0a 12 00 00       	call   39c3 <open>
   if(fd < 0){
     27b9:	83 c4 10             	add    $0x10,%esp
@@ -3995,21 +3995,21 @@
     27c3:	50                   	push   %eax
     27c4:	e8 e2 11 00 00       	call   39ab <close>
   if(mkdir("12345678901234/12345678901234") == 0){
-    27c9:	c7 04 24 dc 49 00 00 	movl   $0x49dc,(%esp)
+    27c9:	c7 04 24 14 4c 00 00 	movl   $0x4c14,(%esp)
     27d0:	e8 16 12 00 00       	call   39eb <mkdir>
     27d5:	83 c4 10             	add    $0x10,%esp
     27d8:	85 c0                	test   %eax,%eax
     27da:	74 4e                	je     282a <fourteen+0xea>
   if(mkdir("123456789012345/12345678901234") == 0){
     27dc:	83 ec 0c             	sub    $0xc,%esp
-    27df:	68 04 53 00 00       	push   $0x5304
+    27df:	68 3c 55 00 00       	push   $0x553c
     27e4:	e8 02 12 00 00       	call   39eb <mkdir>
     27e9:	83 c4 10             	add    $0x10,%esp
     27ec:	85 c0                	test   %eax,%eax
     27ee:	74 27                	je     2817 <fourteen+0xd7>
   printf(1, "fourteen ok\n");
     27f0:	83 ec 08             	sub    $0x8,%esp
-    27f3:	68 fa 49 00 00       	push   $0x49fa
+    27f3:	68 32 4c 00 00       	push   $0x4c32
     27f8:	6a 01                	push   $0x1
     27fa:	e8 e1 12 00 00       	call   3ae0 <printf>
 }
@@ -4019,7 +4019,7 @@
     printf(1, "mkdir 12345678901234 failed\n");
     2804:	50                   	push   %eax
     2805:	50                   	push   %eax
-    2806:	68 bf 49 00 00       	push   $0x49bf
+    2806:	68 f7 4b 00 00       	push   $0x4bf7
     280b:	6a 01                	push   $0x1
     280d:	e8 ce 12 00 00       	call   3ae0 <printf>
     exit();
@@ -4027,7 +4027,7 @@
     printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
     2817:	50                   	push   %eax
     2818:	50                   	push   %eax
-    2819:	68 24 53 00 00       	push   $0x5324
+    2819:	68 5c 55 00 00       	push   $0x555c
     281e:	6a 01                	push   $0x1
     2820:	e8 bb 12 00 00       	call   3ae0 <printf>
     exit();
@@ -4035,7 +4035,7 @@
     printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
     282a:	52                   	push   %edx
     282b:	52                   	push   %edx
-    282c:	68 d4 52 00 00       	push   $0x52d4
+    282c:	68 0c 55 00 00       	push   $0x550c
     2831:	6a 01                	push   $0x1
     2833:	e8 a8 12 00 00       	call   3ae0 <printf>
     exit();
@@ -4043,7 +4043,7 @@
     printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
     283d:	51                   	push   %ecx
     283e:	51                   	push   %ecx
-    283f:	68 98 52 00 00       	push   $0x5298
+    283f:	68 d0 54 00 00       	push   $0x54d0
     2844:	6a 01                	push   $0x1
     2846:	e8 95 12 00 00       	call   3ae0 <printf>
     exit();
@@ -4051,7 +4051,7 @@
     printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
     2850:	51                   	push   %ecx
     2851:	51                   	push   %ecx
-    2852:	68 28 52 00 00       	push   $0x5228
+    2852:	68 60 54 00 00       	push   $0x5460
     2857:	6a 01                	push   $0x1
     2859:	e8 82 12 00 00       	call   3ae0 <printf>
     exit();
@@ -4059,7 +4059,7 @@
     printf(1, "mkdir 12345678901234/123456789012345 failed\n");
     2863:	50                   	push   %eax
     2864:	50                   	push   %eax
-    2865:	68 c8 51 00 00       	push   $0x51c8
+    2865:	68 00 54 00 00       	push   $0x5400
     286a:	6a 01                	push   $0x1
     286c:	e8 6f 12 00 00       	call   3ae0 <printf>
     exit();
@@ -4074,67 +4074,67 @@
     2885:	89 e5                	mov    %esp,%ebp
     2887:	83 ec 10             	sub    $0x10,%esp
   printf(1, "rmdot test\n");
-    288a:	68 07 4a 00 00       	push   $0x4a07
+    288a:	68 3f 4c 00 00       	push   $0x4c3f
     288f:	6a 01                	push   $0x1
     2891:	e8 4a 12 00 00       	call   3ae0 <printf>
   if(mkdir("dots") != 0){
-    2896:	c7 04 24 13 4a 00 00 	movl   $0x4a13,(%esp)
+    2896:	c7 04 24 4b 4c 00 00 	movl   $0x4c4b,(%esp)
     289d:	e8 49 11 00 00       	call   39eb <mkdir>
     28a2:	83 c4 10             	add    $0x10,%esp
     28a5:	85 c0                	test   %eax,%eax
     28a7:	0f 85 b0 00 00 00    	jne    295d <rmdot+0xdd>
   if(chdir("dots") != 0){
     28ad:	83 ec 0c             	sub    $0xc,%esp
-    28b0:	68 13 4a 00 00       	push   $0x4a13
+    28b0:	68 4b 4c 00 00       	push   $0x4c4b
     28b5:	e8 39 11 00 00       	call   39f3 <chdir>
     28ba:	83 c4 10             	add    $0x10,%esp
     28bd:	85 c0                	test   %eax,%eax
     28bf:	0f 85 1d 01 00 00    	jne    29e2 <rmdot+0x162>
   if(unlink(".") == 0){
     28c5:	83 ec 0c             	sub    $0xc,%esp
-    28c8:	68 be 46 00 00       	push   $0x46be
+    28c8:	68 f6 48 00 00       	push   $0x48f6
     28cd:	e8 01 11 00 00       	call   39d3 <unlink>
     28d2:	83 c4 10             	add    $0x10,%esp
     28d5:	85 c0                	test   %eax,%eax
     28d7:	0f 84 f2 00 00 00    	je     29cf <rmdot+0x14f>
   if(unlink("..") == 0){
     28dd:	83 ec 0c             	sub    $0xc,%esp
-    28e0:	68 bd 46 00 00       	push   $0x46bd
+    28e0:	68 f5 48 00 00       	push   $0x48f5
     28e5:	e8 e9 10 00 00       	call   39d3 <unlink>
     28ea:	83 c4 10             	add    $0x10,%esp
     28ed:	85 c0                	test   %eax,%eax
     28ef:	0f 84 c7 00 00 00    	je     29bc <rmdot+0x13c>
   if(chdir("/") != 0){
     28f5:	83 ec 0c             	sub    $0xc,%esp
-    28f8:	68 91 3e 00 00       	push   $0x3e91
+    28f8:	68 c9 40 00 00       	push   $0x40c9
     28fd:	e8 f1 10 00 00       	call   39f3 <chdir>
     2902:	83 c4 10             	add    $0x10,%esp
     2905:	85 c0                	test   %eax,%eax
     2907:	0f 85 9c 00 00 00    	jne    29a9 <rmdot+0x129>
   if(unlink("dots/.") == 0){
     290d:	83 ec 0c             	sub    $0xc,%esp
-    2910:	68 5b 4a 00 00       	push   $0x4a5b
+    2910:	68 93 4c 00 00       	push   $0x4c93
     2915:	e8 b9 10 00 00       	call   39d3 <unlink>
     291a:	83 c4 10             	add    $0x10,%esp
     291d:	85 c0                	test   %eax,%eax
     291f:	74 75                	je     2996 <rmdot+0x116>
   if(unlink("dots/..") == 0){
     2921:	83 ec 0c             	sub    $0xc,%esp
-    2924:	68 79 4a 00 00       	push   $0x4a79
+    2924:	68 b1 4c 00 00       	push   $0x4cb1
     2929:	e8 a5 10 00 00       	call   39d3 <unlink>
     292e:	83 c4 10             	add    $0x10,%esp
     2931:	85 c0                	test   %eax,%eax
     2933:	74 4e                	je     2983 <rmdot+0x103>
   if(unlink("dots") != 0){
     2935:	83 ec 0c             	sub    $0xc,%esp
-    2938:	68 13 4a 00 00       	push   $0x4a13
+    2938:	68 4b 4c 00 00       	push   $0x4c4b
     293d:	e8 91 10 00 00       	call   39d3 <unlink>
     2942:	83 c4 10             	add    $0x10,%esp
     2945:	85 c0                	test   %eax,%eax
     2947:	75 27                	jne    2970 <rmdot+0xf0>
   printf(1, "rmdot ok\n");
     2949:	83 ec 08             	sub    $0x8,%esp
-    294c:	68 ae 4a 00 00       	push   $0x4aae
+    294c:	68 e6 4c 00 00       	push   $0x4ce6
     2951:	6a 01                	push   $0x1
     2953:	e8 88 11 00 00       	call   3ae0 <printf>
 }
@@ -4144,7 +4144,7 @@
     printf(1, "mkdir dots failed\n");
     295d:	50                   	push   %eax
     295e:	50                   	push   %eax
-    295f:	68 18 4a 00 00       	push   $0x4a18
+    295f:	68 50 4c 00 00       	push   $0x4c50
     2964:	6a 01                	push   $0x1
     2966:	e8 75 11 00 00       	call   3ae0 <printf>
     exit();
@@ -4152,7 +4152,7 @@
     printf(1, "unlink dots failed!\n");
     2970:	50                   	push   %eax
     2971:	50                   	push   %eax
-    2972:	68 99 4a 00 00       	push   $0x4a99
+    2972:	68 d1 4c 00 00       	push   $0x4cd1
     2977:	6a 01                	push   $0x1
     2979:	e8 62 11 00 00       	call   3ae0 <printf>
     exit();
@@ -4160,7 +4160,7 @@
     printf(1, "unlink dots/.. worked!\n");
     2983:	52                   	push   %edx
     2984:	52                   	push   %edx
-    2985:	68 81 4a 00 00       	push   $0x4a81
+    2985:	68 b9 4c 00 00       	push   $0x4cb9
     298a:	6a 01                	push   $0x1
     298c:	e8 4f 11 00 00       	call   3ae0 <printf>
     exit();
@@ -4168,7 +4168,7 @@
     printf(1, "unlink dots/. worked!\n");
     2996:	51                   	push   %ecx
     2997:	51                   	push   %ecx
-    2998:	68 62 4a 00 00       	push   $0x4a62
+    2998:	68 9a 4c 00 00       	push   $0x4c9a
     299d:	6a 01                	push   $0x1
     299f:	e8 3c 11 00 00       	call   3ae0 <printf>
     exit();
@@ -4176,7 +4176,7 @@
     printf(1, "chdir / failed\n");
     29a9:	50                   	push   %eax
     29aa:	50                   	push   %eax
-    29ab:	68 93 3e 00 00       	push   $0x3e93
+    29ab:	68 cb 40 00 00       	push   $0x40cb
     29b0:	6a 01                	push   $0x1
     29b2:	e8 29 11 00 00       	call   3ae0 <printf>
     exit();
@@ -4184,7 +4184,7 @@
     printf(1, "rm .. worked!\n");
     29bc:	50                   	push   %eax
     29bd:	50                   	push   %eax
-    29be:	68 4c 4a 00 00       	push   $0x4a4c
+    29be:	68 84 4c 00 00       	push   $0x4c84
     29c3:	6a 01                	push   $0x1
     29c5:	e8 16 11 00 00       	call   3ae0 <printf>
     exit();
@@ -4192,7 +4192,7 @@
     printf(1, "rm . worked!\n");
     29cf:	50                   	push   %eax
     29d0:	50                   	push   %eax
-    29d1:	68 3e 4a 00 00       	push   $0x4a3e
+    29d1:	68 76 4c 00 00       	push   $0x4c76
     29d6:	6a 01                	push   $0x1
     29d8:	e8 03 11 00 00       	call   3ae0 <printf>
     exit();
@@ -4200,7 +4200,7 @@
     printf(1, "chdir dots failed\n");
     29e2:	50                   	push   %eax
     29e3:	50                   	push   %eax
-    29e4:	68 2b 4a 00 00       	push   $0x4a2b
+    29e4:	68 63 4c 00 00       	push   $0x4c63
     29e9:	6a 01                	push   $0x1
     29eb:	e8 f0 10 00 00       	call   3ae0 <printf>
     exit();
@@ -4216,14 +4216,14 @@
     2a07:	53                   	push   %ebx
     2a08:	83 ec 0c             	sub    $0xc,%esp
   printf(1, "dir vs file\n");
-    2a0b:	68 b8 4a 00 00       	push   $0x4ab8
+    2a0b:	68 f0 4c 00 00       	push   $0x4cf0
     2a10:	6a 01                	push   $0x1
     2a12:	e8 c9 10 00 00       	call   3ae0 <printf>
   fd = open("dirfile", O_CREATE);
     2a17:	5b                   	pop    %ebx
     2a18:	58                   	pop    %eax
     2a19:	68 00 02 00 00       	push   $0x200
-    2a1e:	68 c5 4a 00 00       	push   $0x4ac5
+    2a1e:	68 fd 4c 00 00       	push   $0x4cfd
     2a23:	e8 9b 0f 00 00       	call   39c3 <open>
   if(fd < 0){
     2a28:	83 c4 10             	add    $0x10,%esp
@@ -4234,7 +4234,7 @@
     2a36:	50                   	push   %eax
     2a37:	e8 6f 0f 00 00       	call   39ab <close>
   if(chdir("dirfile") == 0){
-    2a3c:	c7 04 24 c5 4a 00 00 	movl   $0x4ac5,(%esp)
+    2a3c:	c7 04 24 fd 4c 00 00 	movl   $0x4cfd,(%esp)
     2a43:	e8 ab 0f 00 00       	call   39f3 <chdir>
     2a48:	83 c4 10             	add    $0x10,%esp
     2a4b:	85 c0                	test   %eax,%eax
@@ -4242,7 +4242,7 @@
   fd = open("dirfile/xx", 0);
     2a53:	83 ec 08             	sub    $0x8,%esp
     2a56:	6a 00                	push   $0x0
-    2a58:	68 fe 4a 00 00       	push   $0x4afe
+    2a58:	68 36 4d 00 00       	push   $0x4d36
     2a5d:	e8 61 0f 00 00       	call   39c3 <open>
   if(fd >= 0){
     2a62:	83 c4 10             	add    $0x10,%esp
@@ -4251,7 +4251,7 @@
   fd = open("dirfile/xx", O_CREATE);
     2a6d:	83 ec 08             	sub    $0x8,%esp
     2a70:	68 00 02 00 00       	push   $0x200
-    2a75:	68 fe 4a 00 00       	push   $0x4afe
+    2a75:	68 36 4d 00 00       	push   $0x4d36
     2a7a:	e8 44 0f 00 00       	call   39c3 <open>
   if(fd >= 0){
     2a7f:	83 c4 10             	add    $0x10,%esp
@@ -4259,29 +4259,29 @@
     2a84:	0f 89 c6 00 00 00    	jns    2b50 <dirfile+0x150>
   if(mkdir("dirfile/xx") == 0){
     2a8a:	83 ec 0c             	sub    $0xc,%esp
-    2a8d:	68 fe 4a 00 00       	push   $0x4afe
+    2a8d:	68 36 4d 00 00       	push   $0x4d36
     2a92:	e8 54 0f 00 00       	call   39eb <mkdir>
     2a97:	83 c4 10             	add    $0x10,%esp
     2a9a:	85 c0                	test   %eax,%eax
     2a9c:	0f 84 46 01 00 00    	je     2be8 <dirfile+0x1e8>
   if(unlink("dirfile/xx") == 0){
     2aa2:	83 ec 0c             	sub    $0xc,%esp
-    2aa5:	68 fe 4a 00 00       	push   $0x4afe
+    2aa5:	68 36 4d 00 00       	push   $0x4d36
     2aaa:	e8 24 0f 00 00       	call   39d3 <unlink>
     2aaf:	83 c4 10             	add    $0x10,%esp
     2ab2:	85 c0                	test   %eax,%eax
     2ab4:	0f 84 1b 01 00 00    	je     2bd5 <dirfile+0x1d5>
   if(link("README", "dirfile/xx") == 0){
     2aba:	83 ec 08             	sub    $0x8,%esp
-    2abd:	68 fe 4a 00 00       	push   $0x4afe
-    2ac2:	68 62 4b 00 00       	push   $0x4b62
+    2abd:	68 36 4d 00 00       	push   $0x4d36
+    2ac2:	68 9a 4d 00 00       	push   $0x4d9a
     2ac7:	e8 17 0f 00 00       	call   39e3 <link>
     2acc:	83 c4 10             	add    $0x10,%esp
     2acf:	85 c0                	test   %eax,%eax
     2ad1:	0f 84 eb 00 00 00    	je     2bc2 <dirfile+0x1c2>
   if(unlink("dirfile") != 0){
     2ad7:	83 ec 0c             	sub    $0xc,%esp
-    2ada:	68 c5 4a 00 00       	push   $0x4ac5
+    2ada:	68 fd 4c 00 00       	push   $0x4cfd
     2adf:	e8 ef 0e 00 00       	call   39d3 <unlink>
     2ae4:	83 c4 10             	add    $0x10,%esp
     2ae7:	85 c0                	test   %eax,%eax
@@ -4289,7 +4289,7 @@
   fd = open(".", O_RDWR);
     2aef:	83 ec 08             	sub    $0x8,%esp
     2af2:	6a 02                	push   $0x2
-    2af4:	68 be 46 00 00       	push   $0x46be
+    2af4:	68 f6 48 00 00       	push   $0x48f6
     2af9:	e8 c5 0e 00 00       	call   39c3 <open>
   if(fd >= 0){
     2afe:	83 c4 10             	add    $0x10,%esp
@@ -4298,7 +4298,7 @@
   fd = open(".", 0);
     2b09:	83 ec 08             	sub    $0x8,%esp
     2b0c:	6a 00                	push   $0x0
-    2b0e:	68 be 46 00 00       	push   $0x46be
+    2b0e:	68 f6 48 00 00       	push   $0x48f6
     2b13:	e8 ab 0e 00 00       	call   39c3 <open>
   if(write(fd, "x", 1) > 0){
     2b18:	83 c4 0c             	add    $0xc,%esp
@@ -4306,7 +4306,7 @@
   fd = open(".", 0);
     2b1d:	89 c3                	mov    %eax,%ebx
   if(write(fd, "x", 1) > 0){
-    2b1f:	68 a1 47 00 00       	push   $0x47a1
+    2b1f:	68 d9 49 00 00       	push   $0x49d9
     2b24:	50                   	push   %eax
     2b25:	e8 79 0e 00 00       	call   39a3 <write>
     2b2a:	83 c4 10             	add    $0x10,%esp
@@ -4319,7 +4319,7 @@
   printf(1, "dir vs file OK\n");
     2b3a:	58                   	pop    %eax
     2b3b:	5a                   	pop    %edx
-    2b3c:	68 95 4b 00 00       	push   $0x4b95
+    2b3c:	68 cd 4d 00 00       	push   $0x4dcd
     2b41:	6a 01                	push   $0x1
     2b43:	e8 98 0f 00 00       	call   3ae0 <printf>
 }
@@ -4330,7 +4330,7 @@
     printf(1, "create dirfile/xx succeeded!\n");
     2b50:	50                   	push   %eax
     2b51:	50                   	push   %eax
-    2b52:	68 09 4b 00 00       	push   $0x4b09
+    2b52:	68 41 4d 00 00       	push   $0x4d41
     2b57:	6a 01                	push   $0x1
     2b59:	e8 82 0f 00 00       	call   3ae0 <printf>
     exit();
@@ -4338,7 +4338,7 @@
     printf(1, "chdir dirfile succeeded!\n");
     2b63:	52                   	push   %edx
     2b64:	52                   	push   %edx
-    2b65:	68 e4 4a 00 00       	push   $0x4ae4
+    2b65:	68 1c 4d 00 00       	push   $0x4d1c
     2b6a:	6a 01                	push   $0x1
     2b6c:	e8 6f 0f 00 00       	call   3ae0 <printf>
     exit();
@@ -4346,7 +4346,7 @@
     printf(1, "create dirfile failed\n");
     2b76:	51                   	push   %ecx
     2b77:	51                   	push   %ecx
-    2b78:	68 cd 4a 00 00       	push   $0x4acd
+    2b78:	68 05 4d 00 00       	push   $0x4d05
     2b7d:	6a 01                	push   $0x1
     2b7f:	e8 5c 0f 00 00       	call   3ae0 <printf>
     exit();
@@ -4354,7 +4354,7 @@
     printf(1, "write . succeeded!\n");
     2b89:	51                   	push   %ecx
     2b8a:	51                   	push   %ecx
-    2b8b:	68 81 4b 00 00       	push   $0x4b81
+    2b8b:	68 b9 4d 00 00       	push   $0x4db9
     2b90:	6a 01                	push   $0x1
     2b92:	e8 49 0f 00 00       	call   3ae0 <printf>
     exit();
@@ -4362,7 +4362,7 @@
     printf(1, "open . for writing succeeded!\n");
     2b9c:	53                   	push   %ebx
     2b9d:	53                   	push   %ebx
-    2b9e:	68 78 53 00 00       	push   $0x5378
+    2b9e:	68 b0 55 00 00       	push   $0x55b0
     2ba3:	6a 01                	push   $0x1
     2ba5:	e8 36 0f 00 00       	call   3ae0 <printf>
     exit();
@@ -4370,7 +4370,7 @@
     printf(1, "unlink dirfile failed!\n");
     2baf:	50                   	push   %eax
     2bb0:	50                   	push   %eax
-    2bb1:	68 69 4b 00 00       	push   $0x4b69
+    2bb1:	68 a1 4d 00 00       	push   $0x4da1
     2bb6:	6a 01                	push   $0x1
     2bb8:	e8 23 0f 00 00       	call   3ae0 <printf>
     exit();
@@ -4378,7 +4378,7 @@
     printf(1, "link to dirfile/xx succeeded!\n");
     2bc2:	50                   	push   %eax
     2bc3:	50                   	push   %eax
-    2bc4:	68 58 53 00 00       	push   $0x5358
+    2bc4:	68 90 55 00 00       	push   $0x5590
     2bc9:	6a 01                	push   $0x1
     2bcb:	e8 10 0f 00 00       	call   3ae0 <printf>
     exit();
@@ -4386,7 +4386,7 @@
     printf(1, "unlink dirfile/xx succeeded!\n");
     2bd5:	50                   	push   %eax
     2bd6:	50                   	push   %eax
-    2bd7:	68 44 4b 00 00       	push   $0x4b44
+    2bd7:	68 7c 4d 00 00       	push   $0x4d7c
     2bdc:	6a 01                	push   $0x1
     2bde:	e8 fd 0e 00 00       	call   3ae0 <printf>
     exit();
@@ -4394,7 +4394,7 @@
     printf(1, "mkdir dirfile/xx succeeded!\n");
     2be8:	50                   	push   %eax
     2be9:	50                   	push   %eax
-    2bea:	68 27 4b 00 00       	push   $0x4b27
+    2bea:	68 5f 4d 00 00       	push   $0x4d5f
     2bef:	6a 01                	push   $0x1
     2bf1:	e8 ea 0e 00 00       	call   3ae0 <printf>
     exit();
@@ -4413,40 +4413,40 @@
 {
     2c0d:	83 ec 0c             	sub    $0xc,%esp
   printf(1, "empty file name\n");
-    2c10:	68 a5 4b 00 00       	push   $0x4ba5
+    2c10:	68 dd 4d 00 00       	push   $0x4ddd
     2c15:	6a 01                	push   $0x1
     2c17:	e8 c4 0e 00 00       	call   3ae0 <printf>
     2c1c:	83 c4 10             	add    $0x10,%esp
     2c1f:	90                   	nop
     if(mkdir("irefd") != 0){
     2c20:	83 ec 0c             	sub    $0xc,%esp
-    2c23:	68 b6 4b 00 00       	push   $0x4bb6
+    2c23:	68 ee 4d 00 00       	push   $0x4dee
     2c28:	e8 be 0d 00 00       	call   39eb <mkdir>
     2c2d:	83 c4 10             	add    $0x10,%esp
     2c30:	85 c0                	test   %eax,%eax
     2c32:	0f 85 bb 00 00 00    	jne    2cf3 <iref+0xf3>
     if(chdir("irefd") != 0){
     2c38:	83 ec 0c             	sub    $0xc,%esp
-    2c3b:	68 b6 4b 00 00       	push   $0x4bb6
+    2c3b:	68 ee 4d 00 00       	push   $0x4dee
     2c40:	e8 ae 0d 00 00       	call   39f3 <chdir>
     2c45:	83 c4 10             	add    $0x10,%esp
     2c48:	85 c0                	test   %eax,%eax
     2c4a:	0f 85 b7 00 00 00    	jne    2d07 <iref+0x107>
     mkdir("");
     2c50:	83 ec 0c             	sub    $0xc,%esp
-    2c53:	68 6b 42 00 00       	push   $0x426b
+    2c53:	68 a3 44 00 00       	push   $0x44a3
     2c58:	e8 8e 0d 00 00       	call   39eb <mkdir>
     link("README", "");
     2c5d:	59                   	pop    %ecx
     2c5e:	58                   	pop    %eax
-    2c5f:	68 6b 42 00 00       	push   $0x426b
-    2c64:	68 62 4b 00 00       	push   $0x4b62
+    2c5f:	68 a3 44 00 00       	push   $0x44a3
+    2c64:	68 9a 4d 00 00       	push   $0x4d9a
     2c69:	e8 75 0d 00 00       	call   39e3 <link>
     fd = open("", O_CREATE);
     2c6e:	58                   	pop    %eax
     2c6f:	5a                   	pop    %edx
     2c70:	68 00 02 00 00       	push   $0x200
-    2c75:	68 6b 42 00 00       	push   $0x426b
+    2c75:	68 a3 44 00 00       	push   $0x44a3
     2c7a:	e8 44 0d 00 00       	call   39c3 <open>
     if(fd >= 0)
     2c7f:	83 c4 10             	add    $0x10,%esp
@@ -4460,7 +4460,7 @@
     fd = open("xx", O_CREATE);
     2c92:	83 ec 08             	sub    $0x8,%esp
     2c95:	68 00 02 00 00       	push   $0x200
-    2c9a:	68 a0 47 00 00       	push   $0x47a0
+    2c9a:	68 d8 49 00 00       	push   $0x49d8
     2c9f:	e8 1f 0d 00 00       	call   39c3 <open>
     if(fd >= 0)
     2ca4:	83 c4 10             	add    $0x10,%esp
@@ -4473,7 +4473,7 @@
     2cb4:	83 c4 10             	add    $0x10,%esp
     unlink("xx");
     2cb7:	83 ec 0c             	sub    $0xc,%esp
-    2cba:	68 a0 47 00 00       	push   $0x47a0
+    2cba:	68 d8 49 00 00       	push   $0x49d8
     2cbf:	e8 0f 0d 00 00       	call   39d3 <unlink>
   for(i = 0; i < 50 + 1; i++){
     2cc4:	83 c4 10             	add    $0x10,%esp
@@ -4481,12 +4481,12 @@
     2cca:	0f 85 50 ff ff ff    	jne    2c20 <iref+0x20>
   chdir("/");
     2cd0:	83 ec 0c             	sub    $0xc,%esp
-    2cd3:	68 91 3e 00 00       	push   $0x3e91
+    2cd3:	68 c9 40 00 00       	push   $0x40c9
     2cd8:	e8 16 0d 00 00       	call   39f3 <chdir>
   printf(1, "empty file name OK\n");
     2cdd:	58                   	pop    %eax
     2cde:	5a                   	pop    %edx
-    2cdf:	68 e4 4b 00 00       	push   $0x4be4
+    2cdf:	68 1c 4e 00 00       	push   $0x4e1c
     2ce4:	6a 01                	push   $0x1
     2ce6:	e8 f5 0d 00 00       	call   3ae0 <printf>
 }
@@ -4496,14 +4496,14 @@
     2cf2:	c3                   	ret    
       printf(1, "mkdir irefd failed\n");
     2cf3:	83 ec 08             	sub    $0x8,%esp
-    2cf6:	68 bc 4b 00 00       	push   $0x4bbc
+    2cf6:	68 f4 4d 00 00       	push   $0x4df4
     2cfb:	6a 01                	push   $0x1
     2cfd:	e8 de 0d 00 00       	call   3ae0 <printf>
       exit();
     2d02:	e8 7c 0c 00 00       	call   3983 <exit>
       printf(1, "chdir irefd failed\n");
     2d07:	83 ec 08             	sub    $0x8,%esp
-    2d0a:	68 d0 4b 00 00       	push   $0x4bd0
+    2d0a:	68 08 4e 00 00       	push   $0x4e08
     2d0f:	6a 01                	push   $0x1
     2d11:	e8 ca 0d 00 00       	call   3ae0 <printf>
       exit();
@@ -4522,7 +4522,7 @@
 {
     2d2a:	83 ec 0c             	sub    $0xc,%esp
   printf(1, "fork test\n");
-    2d2d:	68 f8 4b 00 00       	push   $0x4bf8
+    2d2d:	68 30 4e 00 00       	push   $0x4e30
     2d32:	6a 01                	push   $0x1
     2d34:	e8 a7 0d 00 00       	call   3ae0 <printf>
     2d39:	83 c4 10             	add    $0x10,%esp
@@ -4556,7 +4556,7 @@
     2d76:	75 2d                	jne    2da5 <forktest+0x85>
   printf(1, "fork test OK\n");
     2d78:	83 ec 08             	sub    $0x8,%esp
-    2d7b:	68 2a 4c 00 00       	push   $0x4c2a
+    2d7b:	68 62 4e 00 00       	push   $0x4e62
     2d80:	6a 01                	push   $0x1
     2d82:	e8 59 0d 00 00       	call   3ae0 <printf>
 }
@@ -4567,7 +4567,7 @@
     2d8c:	e8 f2 0b 00 00       	call   3983 <exit>
       printf(1, "wait stopped early\n");
     2d91:	83 ec 08             	sub    $0x8,%esp
-    2d94:	68 03 4c 00 00       	push   $0x4c03
+    2d94:	68 3b 4e 00 00       	push   $0x4e3b
     2d99:	6a 01                	push   $0x1
     2d9b:	e8 40 0d 00 00       	call   3ae0 <printf>
       exit();
@@ -4575,7 +4575,7 @@
     printf(1, "wait got too many\n");
     2da5:	52                   	push   %edx
     2da6:	52                   	push   %edx
-    2da7:	68 17 4c 00 00       	push   $0x4c17
+    2da7:	68 4f 4e 00 00       	push   $0x4e4f
     2dac:	6a 01                	push   $0x1
     2dae:	e8 2d 0d 00 00       	call   3ae0 <printf>
     exit();
@@ -4583,7 +4583,7 @@
     printf(1, "fork claimed to work 1000 times!\n");
     2db8:	50                   	push   %eax
     2db9:	50                   	push   %eax
-    2dba:	68 98 53 00 00       	push   $0x5398
+    2dba:	68 d0 55 00 00       	push   $0x55d0
     2dbf:	6a 01                	push   $0x1
     2dc1:	e8 1a 0d 00 00       	call   3ae0 <printf>
     exit();
@@ -4604,8 +4604,8 @@
     2ddb:	53                   	push   %ebx
     2ddc:	83 ec 54             	sub    $0x54,%esp
   printf(stdout, "sbrk test\n");
-    2ddf:	68 38 4c 00 00       	push   $0x4c38
-    2de4:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    2ddf:	68 70 4e 00 00       	push   $0x4e70
+    2de4:	ff 35 a8 61 00 00    	pushl  0x61a8
     2dea:	e8 f1 0c 00 00       	call   3ae0 <printf>
   oldbrk = sbrk(0);
     2def:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
@@ -4834,8 +4834,8 @@
     302f:	72 61                	jb     3092 <sbrktest+0x2c2>
   printf(stdout, "sbrk test OK\n");
     3031:	83 ec 08             	sub    $0x8,%esp
-    3034:	68 e0 4c 00 00       	push   $0x4ce0
-    3039:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    3034:	68 18 4f 00 00       	push   $0x4f18
+    3039:	ff 35 a8 61 00 00    	pushl  0x61a8
     303f:	e8 9c 0a 00 00       	call   3ae0 <printf>
 }
     3044:	83 c4 10             	add    $0x10,%esp
@@ -4857,7 +4857,7 @@
       write(fds[1], "x", 1);
     306a:	83 c4 0c             	add    $0xc,%esp
     306d:	6a 01                	push   $0x1
-    306f:	68 a1 47 00 00       	push   $0x47a1
+    306f:	68 d9 49 00 00       	push   $0x49d9
     3074:	ff 75 bc             	pushl  -0x44(%ebp)
     3077:	e8 27 09 00 00       	call   39a3 <write>
     307c:	83 c4 10             	add    $0x10,%esp
@@ -4882,8 +4882,8 @@
     30ae:	50                   	push   %eax
     30af:	56                   	push   %esi
     30b0:	57                   	push   %edi
-    30b1:	68 43 4c 00 00       	push   $0x4c43
-    30b6:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    30b1:	68 7b 4e 00 00       	push   $0x4e7b
+    30b6:	ff 35 a8 61 00 00    	pushl  0x61a8
     30bc:	e8 1f 0a 00 00       	call   3ae0 <printf>
       exit();
     30c1:	83 c4 20             	add    $0x20,%esp
@@ -4891,15 +4891,15 @@
     printf(stdout, "failed sbrk leaked memory\n");
     30c9:	50                   	push   %eax
     30ca:	50                   	push   %eax
-    30cb:	68 c5 4c 00 00       	push   $0x4cc5
-    30d0:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    30cb:	68 fd 4e 00 00       	push   $0x4efd
+    30d0:	ff 35 a8 61 00 00    	pushl  0x61a8
     30d6:	e8 05 0a 00 00       	call   3ae0 <printf>
     exit();
     30db:	e8 a3 08 00 00       	call   3983 <exit>
     printf(1, "pipe() failed\n");
     30e0:	52                   	push   %edx
     30e1:	52                   	push   %edx
-    30e2:	68 81 41 00 00       	push   $0x4181
+    30e2:	68 b9 43 00 00       	push   $0x43b9
     30e7:	6a 01                	push   $0x1
     30e9:	e8 f2 09 00 00       	call   3ae0 <printf>
     exit();
@@ -4910,8 +4910,8 @@
     30f8:	0f be 06             	movsbl (%esi),%eax
     30fb:	50                   	push   %eax
     30fc:	56                   	push   %esi
-    30fd:	68 ac 4c 00 00       	push   $0x4cac
-    3102:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    30fd:	68 e4 4e 00 00       	push   $0x4ee4
+    3102:	ff 35 a8 61 00 00    	pushl  0x61a8
     3108:	e8 d3 09 00 00       	call   3ae0 <printf>
       kill(ppid);
     310d:	89 3c 24             	mov    %edi,(%esp)
@@ -4920,56 +4920,56 @@
     3115:	e8 69 08 00 00       	call   3983 <exit>
       printf(stdout, "fork failed\n");
     311a:	83 ec 08             	sub    $0x8,%esp
-    311d:	68 89 4d 00 00       	push   $0x4d89
-    3122:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    311d:	68 c1 4f 00 00       	push   $0x4fc1
+    3122:	ff 35 a8 61 00 00    	pushl  0x61a8
     3128:	e8 b3 09 00 00       	call   3ae0 <printf>
       exit();
     312d:	e8 51 08 00 00       	call   3983 <exit>
     printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
     3132:	50                   	push   %eax
     3133:	56                   	push   %esi
-    3134:	68 8c 54 00 00       	push   $0x548c
-    3139:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    3134:	68 c4 56 00 00       	push   $0x56c4
+    3139:	ff 35 a8 61 00 00    	pushl  0x61a8
     313f:	e8 9c 09 00 00       	call   3ae0 <printf>
     exit();
     3144:	e8 3a 08 00 00       	call   3983 <exit>
     printf(stdout, "sbrk de-allocation didn't really deallocate\n");
     3149:	51                   	push   %ecx
     314a:	51                   	push   %ecx
-    314b:	68 5c 54 00 00       	push   $0x545c
-    3150:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    314b:	68 94 56 00 00       	push   $0x5694
+    3150:	ff 35 a8 61 00 00    	pushl  0x61a8
     3156:	e8 85 09 00 00       	call   3ae0 <printf>
     exit();
     315b:	e8 23 08 00 00       	call   3983 <exit>
     printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
     3160:	57                   	push   %edi
     3161:	56                   	push   %esi
-    3162:	68 34 54 00 00       	push   $0x5434
-    3167:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    3162:	68 6c 56 00 00       	push   $0x566c
+    3167:	ff 35 a8 61 00 00    	pushl  0x61a8
     316d:	e8 6e 09 00 00       	call   3ae0 <printf>
     exit();
     3172:	e8 0c 08 00 00       	call   3983 <exit>
     printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
     3177:	50                   	push   %eax
     3178:	56                   	push   %esi
-    3179:	68 fc 53 00 00       	push   $0x53fc
-    317e:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    3179:	68 34 56 00 00       	push   $0x5634
+    317e:	ff 35 a8 61 00 00    	pushl  0x61a8
     3184:	e8 57 09 00 00       	call   3ae0 <printf>
     exit();
     3189:	e8 f5 07 00 00       	call   3983 <exit>
     printf(stdout, "sbrk could not deallocate\n");
     318e:	53                   	push   %ebx
     318f:	53                   	push   %ebx
-    3190:	68 91 4c 00 00       	push   $0x4c91
-    3195:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    3190:	68 c9 4e 00 00       	push   $0x4ec9
+    3195:	ff 35 a8 61 00 00    	pushl  0x61a8
     319b:	e8 40 09 00 00       	call   3ae0 <printf>
     exit();
     31a0:	e8 de 07 00 00       	call   3983 <exit>
     printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
     31a5:	56                   	push   %esi
     31a6:	56                   	push   %esi
-    31a7:	68 bc 53 00 00       	push   $0x53bc
-    31ac:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    31a7:	68 f4 55 00 00       	push   $0x55f4
+    31ac:	ff 35 a8 61 00 00    	pushl  0x61a8
     31b2:	e8 29 09 00 00       	call   3ae0 <printf>
     exit();
     31b7:	e8 c7 07 00 00       	call   3983 <exit>
@@ -4978,16 +4978,16 @@
     printf(stdout, "sbrk test failed post-fork\n");
     31c1:	57                   	push   %edi
     31c2:	57                   	push   %edi
-    31c3:	68 75 4c 00 00       	push   $0x4c75
-    31c8:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    31c3:	68 ad 4e 00 00       	push   $0x4ead
+    31c8:	ff 35 a8 61 00 00    	pushl  0x61a8
     31ce:	e8 0d 09 00 00       	call   3ae0 <printf>
     exit();
     31d3:	e8 ab 07 00 00       	call   3983 <exit>
     printf(stdout, "sbrk test fork failed\n");
     31d8:	50                   	push   %eax
     31d9:	50                   	push   %eax
-    31da:	68 5e 4c 00 00       	push   $0x4c5e
-    31df:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    31da:	68 96 4e 00 00       	push   $0x4e96
+    31df:	ff 35 a8 61 00 00    	pushl  0x61a8
     31e5:	e8 f6 08 00 00       	call   3ae0 <printf>
     exit();
     31ea:	e8 94 07 00 00       	call   3983 <exit>
@@ -5013,8 +5013,8 @@
     320a:	53                   	push   %ebx
   printf(stdout, "validate test\n");
     320b:	83 ec 08             	sub    $0x8,%esp
-    320e:	68 ee 4c 00 00       	push   $0x4cee
-    3213:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    320e:	68 26 4f 00 00       	push   $0x4f26
+    3213:	ff 35 a8 61 00 00    	pushl  0x61a8
     3219:	e8 c2 08 00 00       	call   3ae0 <printf>
     321e:	83 c4 10             	add    $0x10,%esp
     3221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -5039,7 +5039,7 @@
     3256:	58                   	pop    %eax
     3257:	5a                   	pop    %edx
     3258:	56                   	push   %esi
-    3259:	68 fd 4c 00 00       	push   $0x4cfd
+    3259:	68 35 4f 00 00       	push   $0x4f35
     325e:	e8 80 07 00 00       	call   39e3 <link>
     3263:	83 c4 10             	add    $0x10,%esp
     3266:	83 f8 ff             	cmp    $0xffffffff,%eax
@@ -5050,8 +5050,8 @@
     3277:	75 af                	jne    3228 <validatetest+0x28>
   printf(stdout, "validate ok\n");
     3279:	83 ec 08             	sub    $0x8,%esp
-    327c:	68 21 4d 00 00       	push   $0x4d21
-    3281:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    327c:	68 59 4f 00 00       	push   $0x4f59
+    3281:	ff 35 a8 61 00 00    	pushl  0x61a8
     3287:	e8 54 08 00 00       	call   3ae0 <printf>
 }
     328c:	83 c4 10             	add    $0x10,%esp
@@ -5064,8 +5064,8 @@
     3296:	e8 e8 06 00 00       	call   3983 <exit>
       printf(stdout, "link should not succeed\n");
     329b:	83 ec 08             	sub    $0x8,%esp
-    329e:	68 08 4d 00 00       	push   $0x4d08
-    32a3:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    329e:	68 40 4f 00 00       	push   $0x4f40
+    32a3:	ff 35 a8 61 00 00    	pushl  0x61a8
     32a9:	e8 32 08 00 00       	call   3ae0 <printf>
       exit();
     32ae:	e8 d0 06 00 00       	call   3983 <exit>
@@ -5079,15 +5079,15 @@
     32c5:	89 e5                	mov    %esp,%ebp
     32c7:	83 ec 10             	sub    $0x10,%esp
   printf(stdout, "bss test\n");
-    32ca:	68 2e 4d 00 00       	push   $0x4d2e
-    32cf:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    32ca:	68 66 4f 00 00       	push   $0x4f66
+    32cf:	ff 35 a8 61 00 00    	pushl  0x61a8
     32d5:	e8 06 08 00 00       	call   3ae0 <printf>
     32da:	83 c4 10             	add    $0x10,%esp
   for(i = 0; i < sizeof(uninit); i++){
     32dd:	31 c0                	xor    %eax,%eax
     32df:	90                   	nop
     if(uninit[i] != '\0'){
-    32e0:	80 b8 a0 5f 00 00 00 	cmpb   $0x0,0x5fa0(%eax)
+    32e0:	80 b8 40 6c 00 00 00 	cmpb   $0x0,0x6c40(%eax)
     32e7:	75 22                	jne    330b <bsstest+0x4b>
   for(i = 0; i < sizeof(uninit); i++){
     32e9:	83 c0 01             	add    $0x1,%eax
@@ -5095,8 +5095,8 @@
     32f1:	75 ed                	jne    32e0 <bsstest+0x20>
   printf(stdout, "bss test ok\n");
     32f3:	83 ec 08             	sub    $0x8,%esp
-    32f6:	68 49 4d 00 00       	push   $0x4d49
-    32fb:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    32f6:	68 81 4f 00 00       	push   $0x4f81
+    32fb:	ff 35 a8 61 00 00    	pushl  0x61a8
     3301:	e8 da 07 00 00       	call   3ae0 <printf>
 }
     3306:	83 c4 10             	add    $0x10,%esp
@@ -5104,8 +5104,8 @@
     330a:	c3                   	ret    
       printf(stdout, "bss test failed\n");
     330b:	83 ec 08             	sub    $0x8,%esp
-    330e:	68 38 4d 00 00       	push   $0x4d38
-    3313:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    330e:	68 70 4f 00 00       	push   $0x4f70
+    3313:	ff 35 a8 61 00 00    	pushl  0x61a8
     3319:	e8 c2 07 00 00       	call   3ae0 <printf>
       exit();
     331e:	e8 60 06 00 00       	call   3983 <exit>
@@ -5119,7 +5119,7 @@
     3335:	89 e5                	mov    %esp,%ebp
     3337:	83 ec 14             	sub    $0x14,%esp
   unlink("bigarg-ok");
-    333a:	68 56 4d 00 00       	push   $0x4d56
+    333a:	68 8e 4f 00 00       	push   $0x4f8e
     333f:	e8 8f 06 00 00       	call   39d3 <unlink>
   pid = fork();
     3344:	e8 32 06 00 00       	call   397b <fork>
@@ -5134,7 +5134,7 @@
   fd = open("bigarg-ok", 0);
     335b:	83 ec 08             	sub    $0x8,%esp
     335e:	6a 00                	push   $0x0
-    3360:	68 56 4d 00 00       	push   $0x4d56
+    3360:	68 8e 4f 00 00       	push   $0x4f8e
     3365:	e8 59 06 00 00       	call   39c3 <open>
   if(fd < 0){
     336a:	83 c4 10             	add    $0x10,%esp
@@ -5145,7 +5145,7 @@
     3378:	50                   	push   %eax
     3379:	e8 2d 06 00 00       	call   39ab <close>
   unlink("bigarg-ok");
-    337e:	c7 04 24 56 4d 00 00 	movl   $0x4d56,(%esp)
+    337e:	c7 04 24 8e 4f 00 00 	movl   $0x4f8e,(%esp)
     3385:	e8 49 06 00 00       	call   39d3 <unlink>
 }
     338a:	83 c4 10             	add    $0x10,%esp
@@ -5153,8 +5153,8 @@
     338e:	c3                   	ret    
     338f:	90                   	nop
       args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
-    3390:	c7 04 85 00 5f 00 00 	movl   $0x54b0,0x5f00(,%eax,4)
-    3397:	b0 54 00 00 
+    3390:	c7 04 85 e0 61 00 00 	movl   $0x56e8,0x61e0(,%eax,4)
+    3397:	e8 56 00 00 
     for(i = 0; i < MAXARG-1; i++)
     339b:	83 c0 01             	add    $0x1,%eax
     339e:	83 f8 1f             	cmp    $0x1f,%eax
@@ -5162,30 +5162,30 @@
     printf(stdout, "bigarg test\n");
     33a3:	51                   	push   %ecx
     33a4:	51                   	push   %ecx
-    33a5:	68 60 4d 00 00       	push   $0x4d60
-    33aa:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    33a5:	68 98 4f 00 00       	push   $0x4f98
+    33aa:	ff 35 a8 61 00 00    	pushl  0x61a8
     args[MAXARG-1] = 0;
-    33b0:	c7 05 7c 5f 00 00 00 	movl   $0x0,0x5f7c
+    33b0:	c7 05 5c 62 00 00 00 	movl   $0x0,0x625c
     33b7:	00 00 00 
     printf(stdout, "bigarg test\n");
     33ba:	e8 21 07 00 00       	call   3ae0 <printf>
     exec("echo", args);
     33bf:	58                   	pop    %eax
     33c0:	5a                   	pop    %edx
-    33c1:	68 00 5f 00 00       	push   $0x5f00
-    33c6:	68 2d 3f 00 00       	push   $0x3f2d
+    33c1:	68 e0 61 00 00       	push   $0x61e0
+    33c6:	68 65 41 00 00       	push   $0x4165
     33cb:	e8 eb 05 00 00       	call   39bb <exec>
     printf(stdout, "bigarg test ok\n");
     33d0:	59                   	pop    %ecx
     33d1:	58                   	pop    %eax
-    33d2:	68 6d 4d 00 00       	push   $0x4d6d
-    33d7:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    33d2:	68 a5 4f 00 00       	push   $0x4fa5
+    33d7:	ff 35 a8 61 00 00    	pushl  0x61a8
     33dd:	e8 fe 06 00 00       	call   3ae0 <printf>
     fd = open("bigarg-ok", O_CREATE);
     33e2:	58                   	pop    %eax
     33e3:	5a                   	pop    %edx
     33e4:	68 00 02 00 00       	push   $0x200
-    33e9:	68 56 4d 00 00       	push   $0x4d56
+    33e9:	68 8e 4f 00 00       	push   $0x4f8e
     33ee:	e8 d0 05 00 00       	call   39c3 <open>
     close(fd);
     33f3:	89 04 24             	mov    %eax,(%esp)
@@ -5195,16 +5195,16 @@
     printf(stdout, "bigarg test failed!\n");
     3400:	50                   	push   %eax
     3401:	50                   	push   %eax
-    3402:	68 96 4d 00 00       	push   $0x4d96
-    3407:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    3402:	68 ce 4f 00 00       	push   $0x4fce
+    3407:	ff 35 a8 61 00 00    	pushl  0x61a8
     340d:	e8 ce 06 00 00       	call   3ae0 <printf>
     exit();
     3412:	e8 6c 05 00 00       	call   3983 <exit>
     printf(stdout, "bigargtest: fork failed\n");
     3417:	52                   	push   %edx
     3418:	52                   	push   %edx
-    3419:	68 7d 4d 00 00       	push   $0x4d7d
-    341e:	ff 35 e0 5e 00 00    	pushl  0x5ee0
+    3419:	68 b5 4f 00 00       	push   $0x4fb5
+    341e:	ff 35 a8 61 00 00    	pushl  0x61a8
     3424:	e8 b7 06 00 00       	call   3ae0 <printf>
     exit();
     3429:	e8 55 05 00 00       	call   3983 <exit>
@@ -5223,7 +5223,7 @@
     343b:	53                   	push   %ebx
     343c:	83 ec 54             	sub    $0x54,%esp
   printf(1, "fsfull test\n");
-    343f:	68 ab 4d 00 00       	push   $0x4dab
+    343f:	68 e3 4f 00 00       	push   $0x4fe3
     3444:	6a 01                	push   $0x1
     3446:	e8 95 06 00 00       	call   3ae0 <printf>
     344b:	83 c4 10             	add    $0x10,%esp
@@ -5285,7 +5285,7 @@
     printf(1, "writing %s\n", name);
     34c0:	8d 45 a8             	lea    -0x58(%ebp),%eax
     34c3:	50                   	push   %eax
-    34c4:	68 b8 4d 00 00       	push   $0x4db8
+    34c4:	68 f0 4f 00 00       	push   $0x4ff0
     34c9:	6a 01                	push   $0x1
     34cb:	e8 10 06 00 00       	call   3ae0 <printf>
     int fd = open(name, O_CREATE|O_RDWR);
@@ -5311,7 +5311,7 @@
       int cc = write(fd, buf, 512);
     34f2:	83 ec 04             	sub    $0x4,%esp
     34f5:	68 00 02 00 00       	push   $0x200
-    34fa:	68 c0 86 00 00       	push   $0x86c0
+    34fa:	68 60 93 00 00       	push   $0x9360
     34ff:	57                   	push   %edi
     3500:	e8 9e 04 00 00       	call   39a3 <write>
       if(cc < 512)
@@ -5321,7 +5321,7 @@
     printf(1, "wrote %d bytes\n", total);
     350f:	83 ec 04             	sub    $0x4,%esp
     3512:	53                   	push   %ebx
-    3513:	68 d4 4d 00 00       	push   $0x4dd4
+    3513:	68 0c 50 00 00       	push   $0x500c
     3518:	6a 01                	push   $0x1
     351a:	e8 c1 05 00 00       	call   3ae0 <printf>
     close(fd);
@@ -5338,7 +5338,7 @@
     3536:	83 ec 04             	sub    $0x4,%esp
     3539:	8d 45 a8             	lea    -0x58(%ebp),%eax
     353c:	50                   	push   %eax
-    353d:	68 c4 4d 00 00       	push   $0x4dc4
+    353d:	68 fc 4f 00 00       	push   $0x4ffc
     3542:	6a 01                	push   $0x1
     3544:	e8 97 05 00 00       	call   3ae0 <printf>
       break;
@@ -5419,7 +5419,7 @@
     35e5:	0f 85 75 ff ff ff    	jne    3560 <fsfull+0x130>
   printf(1, "fsfull test finished\n");
     35eb:	83 ec 08             	sub    $0x8,%esp
-    35ee:	68 e4 4d 00 00       	push   $0x4de4
+    35ee:	68 1c 50 00 00       	push   $0x501c
     35f3:	6a 01                	push   $0x1
     35f5:	e8 e6 04 00 00       	call   3ae0 <printf>
 }
@@ -5440,7 +5440,7 @@
     3615:	89 e5                	mov    %esp,%ebp
     3617:	83 ec 10             	sub    $0x10,%esp
   printf(1, "uio test\n");
-    361a:	68 fa 4d 00 00       	push   $0x4dfa
+    361a:	68 32 50 00 00       	push   $0x5032
     361f:	6a 01                	push   $0x1
     3621:	e8 ba 04 00 00       	call   3ae0 <printf>
   pid = fork();
@@ -5455,7 +5455,7 @@
     3634:	e8 52 03 00 00       	call   398b <wait>
   printf(1, "uio test done\n");
     3639:	83 ec 08             	sub    $0x8,%esp
-    363c:	68 04 4e 00 00       	push   $0x4e04
+    363c:	68 3c 50 00 00       	push   $0x503c
     3641:	6a 01                	push   $0x1
     3643:	e8 98 04 00 00       	call   3ae0 <printf>
 }
@@ -5472,7 +5472,7 @@
     printf(1, "uio: uio succeeded; test FAILED\n");
     365e:	52                   	push   %edx
     365f:	52                   	push   %edx
-    3660:	68 90 55 00 00       	push   $0x5590
+    3660:	68 c8 57 00 00       	push   $0x57c8
     3665:	6a 01                	push   $0x1
     3667:	e8 74 04 00 00       	call   3ae0 <printf>
     exit();
@@ -5480,7 +5480,7 @@
     printf (1, "fork failed\n");
     3671:	50                   	push   %eax
     3672:	50                   	push   %eax
-    3673:	68 89 4d 00 00       	push   $0x4d89
+    3673:	68 c1 4f 00 00       	push   $0x4fc1
     3678:	6a 01                	push   $0x1
     367a:	e8 61 04 00 00       	call   3ae0 <printf>
     exit();
@@ -5498,7 +5498,7 @@
     3698:	83 ec 0c             	sub    $0xc,%esp
   fd = open("init", O_RDONLY);
     369b:	6a 00                	push   $0x0
-    369d:	68 13 4e 00 00       	push   $0x4e13
+    369d:	68 4b 50 00 00       	push   $0x504b
     36a2:	e8 1c 03 00 00       	call   39c3 <open>
   if (fd < 0) {
     36a7:	83 c4 10             	add    $0x10,%esp
@@ -5521,7 +5521,7 @@
   printf(1, "arg test passed\n");
     36d1:	58                   	pop    %eax
     36d2:	5a                   	pop    %edx
-    36d3:	68 25 4e 00 00       	push   $0x4e25
+    36d3:	68 5d 50 00 00       	push   $0x505d
     36d8:	6a 01                	push   $0x1
     36da:	e8 01 04 00 00       	call   3ae0 <printf>
 }
@@ -5532,7 +5532,7 @@
     printf(2, "open failed\n");
     36e7:	51                   	push   %ecx
     36e8:	51                   	push   %ecx
-    36e9:	68 18 4e 00 00       	push   $0x4e18
+    36e9:	68 50 50 00 00       	push   $0x5050
     36ee:	6a 02                	push   $0x2
     36f0:	e8 eb 03 00 00       	call   3ae0 <printf>
     exit();
@@ -5543,10 +5543,10 @@
 {
     3700:	f3 0f 1e fb          	endbr32 
   randstate = randstate * 1664525 + 1013904223;
-    3704:	69 05 dc 5e 00 00 0d 	imul   $0x19660d,0x5edc,%eax
+    3704:	69 05 a4 61 00 00 0d 	imul   $0x19660d,0x61a4,%eax
     370b:	66 19 00 
     370e:	05 5f f3 6e 3c       	add    $0x3c6ef35f,%eax
-    3713:	a3 dc 5e 00 00       	mov    %eax,0x5edc
+    3713:	a3 a4 61 00 00       	mov    %eax,0x61a4
 }
     3718:	c3                   	ret    
     3719:	66 90                	xchg   %ax,%ax
@@ -5692,6 +5692,7 @@
     37f1:	89 d7                	mov    %edx,%edi
     37f3:	fc                   	cld    
     37f4:	f3 aa                	rep stos %al,%es:(%edi)
+
   stosb(dst, c, n);
   return dst;
 }
@@ -5943,7 +5944,6 @@
     3971:	39 f8                	cmp    %edi,%eax
     3973:	75 fb                	jne    3970 <memmove+0x20>
   return vdst;
-}
     3975:	5e                   	pop    %esi
     3976:	89 d0                	mov    %edx,%eax
     3978:	5f                   	pop    %edi
@@ -5951,132 +5951,106 @@
     397a:	c3                   	ret    
 
 0000397b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
     397b:	b8 01 00 00 00       	mov    $0x1,%eax
     3980:	cd 40                	int    $0x40
     3982:	c3                   	ret    
 
 00003983 <exit>:
-SYSCALL(exit)
     3983:	b8 02 00 00 00       	mov    $0x2,%eax
     3988:	cd 40                	int    $0x40
     398a:	c3                   	ret    
 
 0000398b <wait>:
-SYSCALL(wait)
     398b:	b8 03 00 00 00       	mov    $0x3,%eax
     3990:	cd 40                	int    $0x40
     3992:	c3                   	ret    
 
 00003993 <pipe>:
-SYSCALL(pipe)
     3993:	b8 04 00 00 00       	mov    $0x4,%eax
     3998:	cd 40                	int    $0x40
     399a:	c3                   	ret    
 
 0000399b <read>:
-SYSCALL(read)
     399b:	b8 05 00 00 00       	mov    $0x5,%eax
     39a0:	cd 40                	int    $0x40
     39a2:	c3                   	ret    
 
 000039a3 <write>:
-SYSCALL(write)
     39a3:	b8 10 00 00 00       	mov    $0x10,%eax
     39a8:	cd 40                	int    $0x40
     39aa:	c3                   	ret    
 
 000039ab <close>:
-SYSCALL(close)
     39ab:	b8 15 00 00 00       	mov    $0x15,%eax
     39b0:	cd 40                	int    $0x40
     39b2:	c3                   	ret    
 
 000039b3 <kill>:
-SYSCALL(kill)
     39b3:	b8 06 00 00 00       	mov    $0x6,%eax
     39b8:	cd 40                	int    $0x40
     39ba:	c3                   	ret    
 
 000039bb <exec>:
-SYSCALL(exec)
     39bb:	b8 07 00 00 00       	mov    $0x7,%eax
     39c0:	cd 40                	int    $0x40
     39c2:	c3                   	ret    
 
 000039c3 <open>:
-SYSCALL(open)
     39c3:	b8 0f 00 00 00       	mov    $0xf,%eax
     39c8:	cd 40                	int    $0x40
     39ca:	c3                   	ret    
 
 000039cb <mknod>:
-SYSCALL(mknod)
     39cb:	b8 11 00 00 00       	mov    $0x11,%eax
     39d0:	cd 40                	int    $0x40
     39d2:	c3                   	ret    
 
 000039d3 <unlink>:
-SYSCALL(unlink)
     39d3:	b8 12 00 00 00       	mov    $0x12,%eax
     39d8:	cd 40                	int    $0x40
     39da:	c3                   	ret    
 
 000039db <fstat>:
-SYSCALL(fstat)
     39db:	b8 08 00 00 00       	mov    $0x8,%eax
     39e0:	cd 40                	int    $0x40
     39e2:	c3                   	ret    
 
 000039e3 <link>:
-SYSCALL(link)
     39e3:	b8 13 00 00 00       	mov    $0x13,%eax
     39e8:	cd 40                	int    $0x40
     39ea:	c3                   	ret    
 
 000039eb <mkdir>:
-SYSCALL(mkdir)
     39eb:	b8 14 00 00 00       	mov    $0x14,%eax
     39f0:	cd 40                	int    $0x40
     39f2:	c3                   	ret    
 
 000039f3 <chdir>:
-SYSCALL(chdir)
     39f3:	b8 09 00 00 00       	mov    $0x9,%eax
     39f8:	cd 40                	int    $0x40
     39fa:	c3                   	ret    
 
 000039fb <dup>:
-SYSCALL(dup)
     39fb:	b8 0a 00 00 00       	mov    $0xa,%eax
     3a00:	cd 40                	int    $0x40
     3a02:	c3                   	ret    
 
 00003a03 <getpid>:
-SYSCALL(getpid)
     3a03:	b8 0b 00 00 00       	mov    $0xb,%eax
     3a08:	cd 40                	int    $0x40
     3a0a:	c3                   	ret    
 
 00003a0b <sbrk>:
-SYSCALL(sbrk)
     3a0b:	b8 0c 00 00 00       	mov    $0xc,%eax
     3a10:	cd 40                	int    $0x40
     3a12:	c3                   	ret    
 
 00003a13 <sleep>:
-SYSCALL(sleep)
     3a13:	b8 0d 00 00 00       	mov    $0xd,%eax
     3a18:	cd 40                	int    $0x40
     3a1a:	c3                   	ret    
 
 00003a1b <uptime>:
-SYSCALL(uptime)
     3a1b:	b8 0e 00 00 00       	mov    $0xe,%eax
     3a20:	cd 40                	int    $0x40
     3a22:	c3                   	ret    
@@ -6134,7 +6108,7 @@
     3a62:	31 d2                	xor    %edx,%edx
     3a64:	89 cf                	mov    %ecx,%edi
     3a66:	f7 75 c4             	divl   -0x3c(%ebp)
-    3a69:	0f b6 92 e8 55 00 00 	movzbl 0x55e8(%edx),%edx
+    3a69:	0f b6 92 20 58 00 00 	movzbl 0x5820(%edx),%edx
     3a70:	89 45 c0             	mov    %eax,-0x40(%ebp)
     3a73:	89 d8                	mov    %ebx,%eax
     3a75:	8d 5b 01             	lea    0x1(%ebx),%ebx
@@ -6405,7 +6379,7 @@
     3c61:	8b 5d 08             	mov    0x8(%ebp),%ebx
     3c64:	eb 1a                	jmp    3c80 <printf+0x1a0>
           s = "(null)";
-    3c66:	bb de 55 00 00       	mov    $0x55de,%ebx
+    3c66:	bb 16 58 00 00       	mov    $0x5816,%ebx
         while(*s != 0){
     3c6b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
     3c6e:	b8 28 00 00 00       	mov    $0x28,%eax
@@ -6451,7 +6425,7 @@
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    3cb5:	a1 80 5f 00 00       	mov    0x5f80,%eax
+    3cb5:	a1 60 62 00 00       	mov    0x6260,%eax
 {
     3cba:	89 e5                	mov    %esp,%ebp
     3cbc:	57                   	push   %edi
@@ -6507,7 +6481,7 @@
 }
     3d01:	5b                   	pop    %ebx
   freep = p;
-    3d02:	a3 80 5f 00 00       	mov    %eax,0x5f80
+    3d02:	a3 60 62 00 00       	mov    %eax,0x6260
 }
     3d07:	5e                   	pop    %esi
     3d08:	5f                   	pop    %edi
@@ -6530,7 +6504,7 @@
     p->s.size += bp->s.size;
     3d27:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
-    3d2a:	a3 80 5f 00 00       	mov    %eax,0x5f80
+    3d2a:	a3 60 62 00 00       	mov    %eax,0x6260
     p->s.size += bp->s.size;
     3d2f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
@@ -6564,7 +6538,7 @@
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
     3d4d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
-    3d50:	8b 3d 80 5f 00 00    	mov    0x5f80,%edi
+    3d50:	8b 3d 60 62 00 00    	mov    0x6260,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
     3d56:	8d 70 07             	lea    0x7(%eax),%esi
     3d59:	c1 ee 03             	shr    $0x3,%esi
@@ -6595,7 +6569,7 @@
     3d92:	8b 4a 04             	mov    0x4(%edx),%ecx
     3d95:	39 f1                	cmp    %esi,%ecx
     3d97:	73 4f                	jae    3de8 <malloc+0xa8>
-    3d99:	8b 3d 80 5f 00 00    	mov    0x5f80,%edi
+    3d99:	8b 3d 60 62 00 00    	mov    0x6260,%edi
     3d9f:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
@@ -6621,7 +6595,7 @@
     3dc1:	50                   	push   %eax
     3dc2:	e8 e9 fe ff ff       	call   3cb0 <free>
   return freep;
-    3dc7:	a1 80 5f 00 00       	mov    0x5f80,%eax
+    3dc7:	a1 60 62 00 00       	mov    0x6260,%eax
       if((p = morecore(nunits)) == 0)
     3dcc:	83 c4 10             	add    $0x10,%esp
     3dcf:	85 c0                	test   %eax,%eax
@@ -6653,7 +6627,7 @@
         p->s.size = nunits;
     3df4:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
-    3df7:	a3 80 5f 00 00       	mov    %eax,0x5f80
+    3df7:	a3 60 62 00 00       	mov    %eax,0x6260
 }
     3dfc:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
@@ -6667,17 +6641,17 @@
     3e07:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     3e0e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
-    3e10:	c7 05 80 5f 00 00 84 	movl   $0x5f84,0x5f80
-    3e17:	5f 00 00 
+    3e10:	c7 05 60 62 00 00 64 	movl   $0x6264,0x6260
+    3e17:	62 00 00 
     base.s.size = 0;
-    3e1a:	bf 84 5f 00 00       	mov    $0x5f84,%edi
+    3e1a:	bf 64 62 00 00       	mov    $0x6264,%edi
     base.s.ptr = freep = prevp = &base;
-    3e1f:	c7 05 84 5f 00 00 84 	movl   $0x5f84,0x5f84
-    3e26:	5f 00 00 
+    3e1f:	c7 05 64 62 00 00 64 	movl   $0x6264,0x6264
+    3e26:	62 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
     3e29:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
-    3e2b:	c7 05 88 5f 00 00 00 	movl   $0x0,0x5f88
+    3e2b:	c7 05 68 62 00 00 00 	movl   $0x0,0x6268
     3e32:	00 00 00 
     if(p->s.size >= nunits){
     3e35:	e9 36 ff ff ff       	jmp    3d70 <malloc+0x30>
@@ -6686,3 +6660,279 @@
     3e40:	8b 0a                	mov    (%edx),%ecx
     3e42:	89 08                	mov    %ecx,(%eax)
     3e44:	eb b1                	jmp    3df7 <malloc+0xb7>
+    3e46:	66 90                	xchg   %ax,%ax
+    3e48:	66 90                	xchg   %ax,%ax
+    3e4a:	66 90                	xchg   %ax,%ax
+    3e4c:	66 90                	xchg   %ax,%ax
+    3e4e:	66 90                	xchg   %ax,%ax
+
+00003e50 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+    3e50:	f3 0f 1e fb          	endbr32 
+    3e54:	55                   	push   %ebp
+    3e55:	b8 84 62 00 00       	mov    $0x6284,%eax
+    3e5a:	89 e5                	mov    %esp,%ebp
+    3e5c:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+    3e5f:	89 15 80 62 00 00    	mov    %edx,0x6280
+    for (mti=1; mti<N; mti++)
+    3e65:	eb 0c                	jmp    3e73 <sgenrand+0x23>
+    3e67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3e6e:	66 90                	xchg   %ax,%ax
+    3e70:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+    3e73:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+    3e79:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+    3e7b:	3d 3c 6c 00 00       	cmp    $0x6c3c,%eax
+    3e80:	75 ee                	jne    3e70 <sgenrand+0x20>
+    3e82:	c7 05 c0 61 00 00 70 	movl   $0x270,0x61c0
+    3e89:	02 00 00 
+}
+    3e8c:	5d                   	pop    %ebp
+    3e8d:	c3                   	ret    
+    3e8e:	66 90                	xchg   %ax,%ax
+
+00003e90 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+    3e90:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+    3e94:	a1 c0 61 00 00       	mov    0x61c0,%eax
+    3e99:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+    3e9e:	7f 3c                	jg     3edc <genrand+0x4c>
+    3ea0:	8d 50 01             	lea    0x1(%eax),%edx
+    3ea3:	8b 04 85 80 62 00 00 	mov    0x6280(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+    3eaa:	89 15 c0 61 00 00    	mov    %edx,0x61c0
+    y ^= TEMPERING_SHIFT_U(y);
+    3eb0:	89 c2                	mov    %eax,%edx
+    3eb2:	c1 ea 0b             	shr    $0xb,%edx
+    3eb5:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+    3eb7:	89 d0                	mov    %edx,%eax
+    3eb9:	c1 e0 07             	shl    $0x7,%eax
+    3ebc:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+    3ec1:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+    3ec3:	89 d0                	mov    %edx,%eax
+    3ec5:	c1 e0 0f             	shl    $0xf,%eax
+    3ec8:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+    3ecd:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+    3ecf:	89 c2                	mov    %eax,%edx
+    3ed1:	c1 ea 12             	shr    $0x12,%edx
+    3ed4:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+    3ed6:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+    3edb:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+    3edc:	3d 71 02 00 00       	cmp    $0x271,%eax
+    3ee1:	0f 84 d2 00 00 00    	je     3fb9 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+    3ee7:	31 c0                	xor    %eax,%eax
+    3ee9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+    3ef0:	8b 0c 85 80 62 00 00 	mov    0x6280(,%eax,4),%ecx
+    3ef7:	83 c0 01             	add    $0x1,%eax
+    3efa:	8b 14 85 80 62 00 00 	mov    0x6280(,%eax,4),%edx
+    3f01:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+    3f07:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+    3f0d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+    3f0f:	89 d1                	mov    %edx,%ecx
+    3f11:	83 e2 01             	and    $0x1,%edx
+    3f14:	d1 e9                	shr    %ecx
+    3f16:	33 0c 85 b0 68 00 00 	xor    0x68b0(,%eax,4),%ecx
+    3f1d:	33 0c 95 34 58 00 00 	xor    0x5834(,%edx,4),%ecx
+    3f24:	89 0c 85 7c 62 00 00 	mov    %ecx,0x627c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+    3f2b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+    3f30:	75 be                	jne    3ef0 <genrand+0x60>
+    3f32:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+    3f38:	8b 0c 85 80 62 00 00 	mov    0x6280(,%eax,4),%ecx
+    3f3f:	83 c0 01             	add    $0x1,%eax
+    3f42:	8b 14 85 80 62 00 00 	mov    0x6280(,%eax,4),%edx
+    3f49:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+    3f4f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+    3f55:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+    3f57:	89 d1                	mov    %edx,%ecx
+    3f59:	83 e2 01             	and    $0x1,%edx
+    3f5c:	d1 e9                	shr    %ecx
+    3f5e:	33 0c 85 f0 5e 00 00 	xor    0x5ef0(,%eax,4),%ecx
+    3f65:	33 0c 95 34 58 00 00 	xor    0x5834(,%edx,4),%ecx
+    3f6c:	89 0c 85 7c 62 00 00 	mov    %ecx,0x627c(,%eax,4)
+        for (;kk<N-1;kk++) {
+    3f73:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+    3f78:	75 be                	jne    3f38 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+    3f7a:	a1 80 62 00 00       	mov    0x6280,%eax
+    3f7f:	8b 0d 3c 6c 00 00    	mov    0x6c3c,%ecx
+    3f85:	89 c2                	mov    %eax,%edx
+    3f87:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+    3f8d:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+    3f93:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+    3f95:	89 ca                	mov    %ecx,%edx
+    3f97:	83 e1 01             	and    $0x1,%ecx
+    3f9a:	d1 ea                	shr    %edx
+    3f9c:	33 15 b0 68 00 00    	xor    0x68b0,%edx
+    3fa2:	33 14 8d 34 58 00 00 	xor    0x5834(,%ecx,4),%edx
+    3fa9:	89 15 3c 6c 00 00    	mov    %edx,0x6c3c
+    3faf:	ba 01 00 00 00       	mov    $0x1,%edx
+    3fb4:	e9 f1 fe ff ff       	jmp    3eaa <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+    3fb9:	b8 84 62 00 00       	mov    $0x6284,%eax
+    3fbe:	b9 3c 6c 00 00       	mov    $0x6c3c,%ecx
+    3fc3:	ba 05 11 00 00       	mov    $0x1105,%edx
+    3fc8:	c7 05 80 62 00 00 05 	movl   $0x1105,0x6280
+    3fcf:	11 00 00 
+    for (mti=1; mti<N; mti++)
+    3fd2:	eb 07                	jmp    3fdb <genrand+0x14b>
+    3fd4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3fd8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+    3fdb:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+    3fe1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+    3fe3:	39 c1                	cmp    %eax,%ecx
+    3fe5:	75 f1                	jne    3fd8 <genrand+0x148>
+    3fe7:	e9 fb fe ff ff       	jmp    3ee7 <genrand+0x57>
+    3fec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003ff0 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+    3ff0:	f3 0f 1e fb          	endbr32 
+    3ff4:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+    3ff5:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+    3ff7:	89 e5                	mov    %esp,%ebp
+    3ff9:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+    3ffa:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+    3ffd:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+    3ffe:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+    4003:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+    4006:	89 d8                	mov    %ebx,%eax
+    4008:	f7 f1                	div    %ecx
+    400a:	89 c6                	mov    %eax,%esi
+    400c:	29 d3                	sub    %edx,%ebx
+    400e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+    4010:	e8 7b fe ff ff       	call   3e90 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+    4015:	39 d8                	cmp    %ebx,%eax
+    4017:	73 f7                	jae    4010 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+    4019:	31 d2                	xor    %edx,%edx
+}
+    401b:	5b                   	pop    %ebx
+  return x/bin_size;
+    401c:	f7 f6                	div    %esi
+}
+    401e:	5e                   	pop    %esi
+    401f:	5d                   	pop    %ebp
+    4020:	c3                   	ret    
+    4021:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    4028:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    402f:	90                   	nop
+
+00004030 <randomrange>:
+
+int randomrange(int low, int high){
+    4030:	f3 0f 1e fb          	endbr32 
+    4034:	55                   	push   %ebp
+    4035:	89 e5                	mov    %esp,%ebp
+    4037:	57                   	push   %edi
+    4038:	56                   	push   %esi
+    4039:	53                   	push   %ebx
+    403a:	83 ec 0c             	sub    $0xc,%esp
+    403d:	8b 75 08             	mov    0x8(%ebp),%esi
+    4040:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+    4043:	39 f0                	cmp    %esi,%eax
+    4045:	7d 06                	jge    404d <randomrange+0x1d>
+    4047:	89 f2                	mov    %esi,%edx
+    4049:	89 c6                	mov    %eax,%esi
+    404b:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+    404d:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+    404f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    4054:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+    4056:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+    4059:	89 d8                	mov    %ebx,%eax
+    405b:	f7 f1                	div    %ecx
+    405d:	89 c7                	mov    %eax,%edi
+    405f:	29 d3                	sub    %edx,%ebx
+    4061:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+    4068:	e8 23 fe ff ff       	call   3e90 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+    406d:	39 d8                	cmp    %ebx,%eax
+    406f:	73 f7                	jae    4068 <randomrange+0x38>
+  return x/bin_size;
+    4071:	31 d2                	xor    %edx,%edx
+  return val;
+    4073:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+    4076:	f7 f7                	div    %edi
+    4078:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+    4079:	01 f0                	add    %esi,%eax
+    407b:	5e                   	pop    %esi
+    407c:	5f                   	pop    %edi
+    407d:	5d                   	pop    %ebp
+    407e:	c3                   	ret    
Binary files xv6-public/usertests.o and xv6-public-partb/usertests.o differ
diff -ruN xv6-public/usertests.sym xv6-public-partb/usertests.sym
--- xv6-public/usertests.sym	2022-08-13 16:28:55.499964000 +0530
+++ xv6-public-partb/usertests.sym	2022-10-31 11:09:01.357975184 +0530
@@ -1,8 +1,8 @@
 00000000 .text
-00003e48 .rodata
-000055fc .eh_frame
-00005edc .data
-00005f00 .bss
+00004080 .rodata
+0000583c .eh_frame
+000061a4 .data
+000061e0 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -12,18 +12,23 @@
 00000000 .debug_loc
 00000000 .debug_ranges
 00000000 usertests.c
-00005f00 args.1449
+000061e0 args.1452
 00000000 ulib.c
 00000000 printf.c
 00003a30 printint
-000055e8 digits.1085
+00005820 digits.1088
 00000000 umalloc.c
-00005f80 freep
-00005f84 base
+00006260 freep
+00006264 base
+00000000 random.c
+00006280 mt
+000061c0 mti
+00005834 mag01.989
 00003720 strcpy
 00000d60 exitwait
+00003e50 sgenrand
 00003ae0 printf
-00005ee0 stdout
+000061a8 stdout
 00003330 bigargtest
 00003950 memmove
 00000310 openiputtest
@@ -37,17 +42,18 @@
 00000210 exitiputtest
 00003430 fsfull
 00001c60 bigdir
+00003ff0 random_at_most
 00002d20 forktest
 00000690 writetest1
 00002490 bigwrite
 00000eb0 sharedfd
-00005edc randstate
+000061a4 randstate
 00003993 pipe
-00005fa0 uninit
+00006c40 uninit
 00002a00 dirfile
 000039a3 write
 000032c0 bsstest
-00005ee4 echoargv
+000061ac echoargv
 000039db fstat
 000039b3 kill
 00003200 validatetest
@@ -65,7 +71,7 @@
 0000397b fork
 00003a0b sbrk
 00003a1b uptime
-00005ef8 __bss_start
+000061c4 __bss_start
 000037e0 memset
 00000860 createtest
 00000000 main
@@ -78,23 +84,25 @@
 00001da0 subdir
 00003610 uio
 00001630 linktest
-000086c0 buf
+00009360 buf
 00000920 dirtest
+00003e90 genrand
 00000120 iputtest
 000038c0 stat
 00002570 bigfile
-00005ef8 _edata
-0000a6c4 _end
+000061c4 _edata
+0000b364 _end
 000014a0 unlinkread
 000039e3 link
 00003983 exit
 00003910 atoi
 00001b50 linkunlink
-0000a6c0 name
+0000b360 name
 000037a0 strlen
 000039c3 open
 00003800 strchr
 00001850 concreate
+00004030 randomrange
 00002740 fourteen
 000031f0 validateint
 00001070 fourfiles
diff -ruN xv6-public/vm.c xv6-public-partb/vm.c
--- xv6-public/vm.c	2022-08-11 13:14:39.072072000 +0530
+++ xv6-public-partb/vm.c	2022-10-31 11:08:42.216409170 +0530
@@ -6,10 +6,15 @@
 #include "mmu.h"
 #include "proc.h"
 #include "elf.h"
+#include "spinlock.h"
 
 extern char data[];  // defined by kernel.ld
 pde_t *kpgdir;  // for use in scheduler()
 
+struct spinlock sleeping_channel_lock;
+int sleeping_channel_count=0;
+char * sleeping_channel;
+
 // Set up CPU's kernel segment descriptors.
 // Run once on entry on each CPU.
 void
@@ -57,7 +62,7 @@
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
 // be page-aligned.
-static int
+int
 mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
 {
   char *a, *last;
@@ -233,8 +238,22 @@
   for(; a < newsz; a += PGSIZE){
     mem = kalloc();
     if(mem == 0){
-      cprintf("allocuvm out of memory\n");
+      // cprintf("allocuvm out of memory\n");
       deallocuvm(pgdir, newsz, oldsz);
+
+      //SLEEP
+      myproc()->state=SLEEPING;
+      acquire(&sleeping_channel_lock);
+      myproc()->chan=sleeping_channel;
+      sleeping_channel_count++;
+      release(&sleeping_channel_lock);
+
+	     rpush(myproc());
+      if(!swap_out_process_exists){
+        swap_out_process_exists=1;
+        create_kernel_process("swap_out_process", &swap_out_process_function);
+      }
+      
       return 0;
     }
     memset(mem, 0, PGSIZE);
@@ -391,4 +410,3 @@
 // Blank page.
 //PAGEBREAK!
 // Blank page.
-
diff -ruN xv6-public/vm.d xv6-public-partb/vm.d
--- xv6-public/vm.d	2022-08-13 16:28:45.391079000 +0530
+++ xv6-public-partb/vm.d	2022-10-31 11:09:07.364977183 +0530
@@ -1,2 +1,2 @@
 vm.o: vm.c /usr/include/stdc-predef.h param.h types.h defs.h x86.h \
- memlayout.h mmu.h proc.h elf.h
+ memlayout.h mmu.h proc.h elf.h spinlock.h
Binary files xv6-public/vm.o and xv6-public-partb/vm.o differ
Binary files xv6-public/_wc and xv6-public-partb/_wc differ
diff -ruN xv6-public/wc.asm xv6-public-partb/wc.asm
--- xv6-public/wc.asm	2022-08-13 16:28:55.547949000 +0530
+++ xv6-public-partb/wc.asm	2022-10-31 11:09:01.470031183 +0530
@@ -72,7 +72,7 @@
       printf(1, "wc: cannot open %s\n", argv[i]);
   6b:	50                   	push   %eax
   6c:	ff 33                	pushl  (%ebx)
-  6e:	68 db 08 00 00       	push   $0x8db
+  6e:	68 13 0b 00 00       	push   $0xb13
   73:	6a 01                	push   $0x1
   75:	e8 d6 04 00 00       	call   550 <printf>
       exit();
@@ -80,7 +80,7 @@
     wc(0, "");
   7f:	52                   	push   %edx
   80:	52                   	push   %edx
-  81:	68 cd 08 00 00       	push   $0x8cd
+  81:	68 05 0b 00 00       	push   $0xb05
   86:	6a 00                	push   $0x0
   88:	e8 13 00 00 00       	call   a0 <wc>
     exit();
@@ -114,7 +114,7 @@
   while((n = read(fd, buf, sizeof(buf))) > 0){
   c8:	83 ec 04             	sub    $0x4,%esp
   cb:	68 00 02 00 00       	push   $0x200
-  d0:	68 00 0c 00 00       	push   $0xc00
+  d0:	68 a0 18 00 00       	push   $0x18a0
   d5:	ff 75 08             	pushl  0x8(%ebp)
   d8:	e8 2e 03 00 00       	call   40b <read>
   dd:	83 c4 10             	add    $0x10,%esp
@@ -132,7 +132,7 @@
   fa:	39 fe                	cmp    %edi,%esi
   fc:	74 42                	je     140 <wc+0xa0>
       if(buf[i] == '\n')
-  fe:	0f be 87 00 0c 00 00 	movsbl 0xc00(%edi),%eax
+  fe:	0f be 87 a0 18 00 00 	movsbl 0x18a0(%edi),%eax
         l++;
  105:	31 c9                	xor    %ecx,%ecx
  107:	3c 0a                	cmp    $0xa,%al
@@ -143,7 +143,7 @@
         l++;
  110:	01 cb                	add    %ecx,%ebx
       if(strchr(" \r\t\n\v", buf[i]))
- 112:	68 b8 08 00 00       	push   $0x8b8
+ 112:	68 f0 0a 00 00       	push   $0xaf0
  117:	e8 54 01 00 00       	call   270 <strchr>
  11c:	83 c4 10             	add    $0x10,%esp
  11f:	85 c0                	test   %eax,%eax
@@ -173,7 +173,7 @@
  150:	ff 75 dc             	pushl  -0x24(%ebp)
  153:	ff 75 e0             	pushl  -0x20(%ebp)
  156:	53                   	push   %ebx
- 157:	68 ce 08 00 00       	push   $0x8ce
+ 157:	68 06 0b 00 00       	push   $0xb06
  15c:	6a 01                	push   $0x1
  15e:	e8 ed 03 00 00       	call   550 <printf>
 }
@@ -187,7 +187,7 @@
     printf(1, "wc: read error\n");
  16e:	50                   	push   %eax
  16f:	50                   	push   %eax
- 170:	68 be 08 00 00       	push   $0x8be
+ 170:	68 f6 0a 00 00       	push   $0xaf6
  175:	6a 01                	push   $0x1
  177:	e8 d4 03 00 00       	call   550 <printf>
     exit();
@@ -339,6 +339,7 @@
  261:	89 d7                	mov    %edx,%edi
  263:	fc                   	cld    
  264:	f3 aa                	rep stos %al,%es:(%edi)
+
   stosb(dst, c, n);
   return dst;
 }
@@ -590,7 +591,6 @@
  3e1:	39 f8                	cmp    %edi,%eax
  3e3:	75 fb                	jne    3e0 <memmove+0x20>
   return vdst;
-}
  3e5:	5e                   	pop    %esi
  3e6:	89 d0                	mov    %edx,%eax
  3e8:	5f                   	pop    %edi
@@ -598,132 +598,106 @@
  3ea:	c3                   	ret    
 
 000003eb <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  3eb:	b8 01 00 00 00       	mov    $0x1,%eax
  3f0:	cd 40                	int    $0x40
  3f2:	c3                   	ret    
 
 000003f3 <exit>:
-SYSCALL(exit)
  3f3:	b8 02 00 00 00       	mov    $0x2,%eax
  3f8:	cd 40                	int    $0x40
  3fa:	c3                   	ret    
 
 000003fb <wait>:
-SYSCALL(wait)
  3fb:	b8 03 00 00 00       	mov    $0x3,%eax
  400:	cd 40                	int    $0x40
  402:	c3                   	ret    
 
 00000403 <pipe>:
-SYSCALL(pipe)
  403:	b8 04 00 00 00       	mov    $0x4,%eax
  408:	cd 40                	int    $0x40
  40a:	c3                   	ret    
 
 0000040b <read>:
-SYSCALL(read)
  40b:	b8 05 00 00 00       	mov    $0x5,%eax
  410:	cd 40                	int    $0x40
  412:	c3                   	ret    
 
 00000413 <write>:
-SYSCALL(write)
  413:	b8 10 00 00 00       	mov    $0x10,%eax
  418:	cd 40                	int    $0x40
  41a:	c3                   	ret    
 
 0000041b <close>:
-SYSCALL(close)
  41b:	b8 15 00 00 00       	mov    $0x15,%eax
  420:	cd 40                	int    $0x40
  422:	c3                   	ret    
 
 00000423 <kill>:
-SYSCALL(kill)
  423:	b8 06 00 00 00       	mov    $0x6,%eax
  428:	cd 40                	int    $0x40
  42a:	c3                   	ret    
 
 0000042b <exec>:
-SYSCALL(exec)
  42b:	b8 07 00 00 00       	mov    $0x7,%eax
  430:	cd 40                	int    $0x40
  432:	c3                   	ret    
 
 00000433 <open>:
-SYSCALL(open)
  433:	b8 0f 00 00 00       	mov    $0xf,%eax
  438:	cd 40                	int    $0x40
  43a:	c3                   	ret    
 
 0000043b <mknod>:
-SYSCALL(mknod)
  43b:	b8 11 00 00 00       	mov    $0x11,%eax
  440:	cd 40                	int    $0x40
  442:	c3                   	ret    
 
 00000443 <unlink>:
-SYSCALL(unlink)
  443:	b8 12 00 00 00       	mov    $0x12,%eax
  448:	cd 40                	int    $0x40
  44a:	c3                   	ret    
 
 0000044b <fstat>:
-SYSCALL(fstat)
  44b:	b8 08 00 00 00       	mov    $0x8,%eax
  450:	cd 40                	int    $0x40
  452:	c3                   	ret    
 
 00000453 <link>:
-SYSCALL(link)
  453:	b8 13 00 00 00       	mov    $0x13,%eax
  458:	cd 40                	int    $0x40
  45a:	c3                   	ret    
 
 0000045b <mkdir>:
-SYSCALL(mkdir)
  45b:	b8 14 00 00 00       	mov    $0x14,%eax
  460:	cd 40                	int    $0x40
  462:	c3                   	ret    
 
 00000463 <chdir>:
-SYSCALL(chdir)
  463:	b8 09 00 00 00       	mov    $0x9,%eax
  468:	cd 40                	int    $0x40
  46a:	c3                   	ret    
 
 0000046b <dup>:
-SYSCALL(dup)
  46b:	b8 0a 00 00 00       	mov    $0xa,%eax
  470:	cd 40                	int    $0x40
  472:	c3                   	ret    
 
 00000473 <getpid>:
-SYSCALL(getpid)
  473:	b8 0b 00 00 00       	mov    $0xb,%eax
  478:	cd 40                	int    $0x40
  47a:	c3                   	ret    
 
 0000047b <sbrk>:
-SYSCALL(sbrk)
  47b:	b8 0c 00 00 00       	mov    $0xc,%eax
  480:	cd 40                	int    $0x40
  482:	c3                   	ret    
 
 00000483 <sleep>:
-SYSCALL(sleep)
  483:	b8 0d 00 00 00       	mov    $0xd,%eax
  488:	cd 40                	int    $0x40
  48a:	c3                   	ret    
 
 0000048b <uptime>:
-SYSCALL(uptime)
  48b:	b8 0e 00 00 00       	mov    $0xe,%eax
  490:	cd 40                	int    $0x40
  492:	c3                   	ret    
@@ -781,7 +755,7 @@
  4d2:	31 d2                	xor    %edx,%edx
  4d4:	89 cf                	mov    %ecx,%edi
  4d6:	f7 75 c4             	divl   -0x3c(%ebp)
- 4d9:	0f b6 92 f8 08 00 00 	movzbl 0x8f8(%edx),%edx
+ 4d9:	0f b6 92 30 0b 00 00 	movzbl 0xb30(%edx),%edx
  4e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
  4e3:	89 d8                	mov    %ebx,%eax
  4e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
@@ -1052,7 +1026,7 @@
  6d1:	8b 5d 08             	mov    0x8(%ebp),%ebx
  6d4:	eb 1a                	jmp    6f0 <printf+0x1a0>
           s = "(null)";
- 6d6:	bb ef 08 00 00       	mov    $0x8ef,%ebx
+ 6d6:	bb 27 0b 00 00       	mov    $0xb27,%ebx
         while(*s != 0){
  6db:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  6de:	b8 28 00 00 00       	mov    $0x28,%eax
@@ -1098,7 +1072,7 @@
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 725:	a1 e0 0b 00 00       	mov    0xbe0,%eax
+ 725:	a1 c0 0e 00 00       	mov    0xec0,%eax
 {
  72a:	89 e5                	mov    %esp,%ebp
  72c:	57                   	push   %edi
@@ -1154,7 +1128,7 @@
 }
  771:	5b                   	pop    %ebx
   freep = p;
- 772:	a3 e0 0b 00 00       	mov    %eax,0xbe0
+ 772:	a3 c0 0e 00 00       	mov    %eax,0xec0
 }
  777:	5e                   	pop    %esi
  778:	5f                   	pop    %edi
@@ -1177,7 +1151,7 @@
     p->s.size += bp->s.size;
  797:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 79a:	a3 e0 0b 00 00       	mov    %eax,0xbe0
+ 79a:	a3 c0 0e 00 00       	mov    %eax,0xec0
     p->s.size += bp->s.size;
  79f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
@@ -1211,7 +1185,7 @@
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  7bd:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 7c0:	8b 3d e0 0b 00 00    	mov    0xbe0,%edi
+ 7c0:	8b 3d c0 0e 00 00    	mov    0xec0,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  7c6:	8d 70 07             	lea    0x7(%eax),%esi
  7c9:	c1 ee 03             	shr    $0x3,%esi
@@ -1242,7 +1216,7 @@
  802:	8b 4a 04             	mov    0x4(%edx),%ecx
  805:	39 f1                	cmp    %esi,%ecx
  807:	73 4f                	jae    858 <malloc+0xa8>
- 809:	8b 3d e0 0b 00 00    	mov    0xbe0,%edi
+ 809:	8b 3d c0 0e 00 00    	mov    0xec0,%edi
  80f:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
@@ -1268,7 +1242,7 @@
  831:	50                   	push   %eax
  832:	e8 e9 fe ff ff       	call   720 <free>
   return freep;
- 837:	a1 e0 0b 00 00       	mov    0xbe0,%eax
+ 837:	a1 c0 0e 00 00       	mov    0xec0,%eax
       if((p = morecore(nunits)) == 0)
  83c:	83 c4 10             	add    $0x10,%esp
  83f:	85 c0                	test   %eax,%eax
@@ -1300,7 +1274,7 @@
         p->s.size = nunits;
  864:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 867:	a3 e0 0b 00 00       	mov    %eax,0xbe0
+ 867:	a3 c0 0e 00 00       	mov    %eax,0xec0
 }
  86c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
@@ -1314,17 +1288,17 @@
  877:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  87e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 880:	c7 05 e0 0b 00 00 e4 	movl   $0xbe4,0xbe0
- 887:	0b 00 00 
+ 880:	c7 05 c0 0e 00 00 c4 	movl   $0xec4,0xec0
+ 887:	0e 00 00 
     base.s.size = 0;
- 88a:	bf e4 0b 00 00       	mov    $0xbe4,%edi
+ 88a:	bf c4 0e 00 00       	mov    $0xec4,%edi
     base.s.ptr = freep = prevp = &base;
- 88f:	c7 05 e4 0b 00 00 e4 	movl   $0xbe4,0xbe4
- 896:	0b 00 00 
+ 88f:	c7 05 c4 0e 00 00 c4 	movl   $0xec4,0xec4
+ 896:	0e 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
  899:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 89b:	c7 05 e8 0b 00 00 00 	movl   $0x0,0xbe8
+ 89b:	c7 05 c8 0e 00 00 00 	movl   $0x0,0xec8
  8a2:	00 00 00 
     if(p->s.size >= nunits){
  8a5:	e9 36 ff ff ff       	jmp    7e0 <malloc+0x30>
@@ -1333,3 +1307,279 @@
  8b0:	8b 0a                	mov    (%edx),%ecx
  8b2:	89 08                	mov    %ecx,(%eax)
  8b4:	eb b1                	jmp    867 <malloc+0xb7>
+ 8b6:	66 90                	xchg   %ax,%ax
+ 8b8:	66 90                	xchg   %ax,%ax
+ 8ba:	66 90                	xchg   %ax,%ax
+ 8bc:	66 90                	xchg   %ax,%ax
+ 8be:	66 90                	xchg   %ax,%ax
+
+000008c0 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 8c0:	f3 0f 1e fb          	endbr32 
+ 8c4:	55                   	push   %ebp
+ 8c5:	b8 e4 0e 00 00       	mov    $0xee4,%eax
+ 8ca:	89 e5                	mov    %esp,%ebp
+ 8cc:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 8cf:	89 15 e0 0e 00 00    	mov    %edx,0xee0
+    for (mti=1; mti<N; mti++)
+ 8d5:	eb 0c                	jmp    8e3 <sgenrand+0x23>
+ 8d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8de:	66 90                	xchg   %ax,%ax
+ 8e0:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 8e3:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 8e9:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 8eb:	3d 9c 18 00 00       	cmp    $0x189c,%eax
+ 8f0:	75 ee                	jne    8e0 <sgenrand+0x20>
+ 8f2:	c7 05 a8 0e 00 00 70 	movl   $0x270,0xea8
+ 8f9:	02 00 00 
+}
+ 8fc:	5d                   	pop    %ebp
+ 8fd:	c3                   	ret    
+ 8fe:	66 90                	xchg   %ax,%ax
+
+00000900 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 900:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 904:	a1 a8 0e 00 00       	mov    0xea8,%eax
+ 909:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 90e:	7f 3c                	jg     94c <genrand+0x4c>
+ 910:	8d 50 01             	lea    0x1(%eax),%edx
+ 913:	8b 04 85 e0 0e 00 00 	mov    0xee0(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 91a:	89 15 a8 0e 00 00    	mov    %edx,0xea8
+    y ^= TEMPERING_SHIFT_U(y);
+ 920:	89 c2                	mov    %eax,%edx
+ 922:	c1 ea 0b             	shr    $0xb,%edx
+ 925:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 927:	89 d0                	mov    %edx,%eax
+ 929:	c1 e0 07             	shl    $0x7,%eax
+ 92c:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 931:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 933:	89 d0                	mov    %edx,%eax
+ 935:	c1 e0 0f             	shl    $0xf,%eax
+ 938:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 93d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 93f:	89 c2                	mov    %eax,%edx
+ 941:	c1 ea 12             	shr    $0x12,%edx
+ 944:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 946:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 94b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 94c:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 951:	0f 84 d2 00 00 00    	je     a29 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 957:	31 c0                	xor    %eax,%eax
+ 959:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 960:	8b 0c 85 e0 0e 00 00 	mov    0xee0(,%eax,4),%ecx
+ 967:	83 c0 01             	add    $0x1,%eax
+ 96a:	8b 14 85 e0 0e 00 00 	mov    0xee0(,%eax,4),%edx
+ 971:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 977:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 97d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 97f:	89 d1                	mov    %edx,%ecx
+ 981:	83 e2 01             	and    $0x1,%edx
+ 984:	d1 e9                	shr    %ecx
+ 986:	33 0c 85 10 15 00 00 	xor    0x1510(,%eax,4),%ecx
+ 98d:	33 0c 95 44 0b 00 00 	xor    0xb44(,%edx,4),%ecx
+ 994:	89 0c 85 dc 0e 00 00 	mov    %ecx,0xedc(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 99b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 9a0:	75 be                	jne    960 <genrand+0x60>
+ 9a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 9a8:	8b 0c 85 e0 0e 00 00 	mov    0xee0(,%eax,4),%ecx
+ 9af:	83 c0 01             	add    $0x1,%eax
+ 9b2:	8b 14 85 e0 0e 00 00 	mov    0xee0(,%eax,4),%edx
+ 9b9:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 9bf:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 9c5:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 9c7:	89 d1                	mov    %edx,%ecx
+ 9c9:	83 e2 01             	and    $0x1,%edx
+ 9cc:	d1 e9                	shr    %ecx
+ 9ce:	33 0c 85 50 0b 00 00 	xor    0xb50(,%eax,4),%ecx
+ 9d5:	33 0c 95 44 0b 00 00 	xor    0xb44(,%edx,4),%ecx
+ 9dc:	89 0c 85 dc 0e 00 00 	mov    %ecx,0xedc(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 9e3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 9e8:	75 be                	jne    9a8 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 9ea:	a1 e0 0e 00 00       	mov    0xee0,%eax
+ 9ef:	8b 0d 9c 18 00 00    	mov    0x189c,%ecx
+ 9f5:	89 c2                	mov    %eax,%edx
+ 9f7:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 9fd:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ a03:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ a05:	89 ca                	mov    %ecx,%edx
+ a07:	83 e1 01             	and    $0x1,%ecx
+ a0a:	d1 ea                	shr    %edx
+ a0c:	33 15 10 15 00 00    	xor    0x1510,%edx
+ a12:	33 14 8d 44 0b 00 00 	xor    0xb44(,%ecx,4),%edx
+ a19:	89 15 9c 18 00 00    	mov    %edx,0x189c
+ a1f:	ba 01 00 00 00       	mov    $0x1,%edx
+ a24:	e9 f1 fe ff ff       	jmp    91a <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ a29:	b8 e4 0e 00 00       	mov    $0xee4,%eax
+ a2e:	b9 9c 18 00 00       	mov    $0x189c,%ecx
+ a33:	ba 05 11 00 00       	mov    $0x1105,%edx
+ a38:	c7 05 e0 0e 00 00 05 	movl   $0x1105,0xee0
+ a3f:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ a42:	eb 07                	jmp    a4b <genrand+0x14b>
+ a44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ a48:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ a4b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ a51:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ a53:	39 c1                	cmp    %eax,%ecx
+ a55:	75 f1                	jne    a48 <genrand+0x148>
+ a57:	e9 fb fe ff ff       	jmp    957 <genrand+0x57>
+ a5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000a60 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ a60:	f3 0f 1e fb          	endbr32 
+ a64:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ a65:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ a67:	89 e5                	mov    %esp,%ebp
+ a69:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ a6a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ a6d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ a6e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ a73:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ a76:	89 d8                	mov    %ebx,%eax
+ a78:	f7 f1                	div    %ecx
+ a7a:	89 c6                	mov    %eax,%esi
+ a7c:	29 d3                	sub    %edx,%ebx
+ a7e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ a80:	e8 7b fe ff ff       	call   900 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ a85:	39 d8                	cmp    %ebx,%eax
+ a87:	73 f7                	jae    a80 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ a89:	31 d2                	xor    %edx,%edx
+}
+ a8b:	5b                   	pop    %ebx
+  return x/bin_size;
+ a8c:	f7 f6                	div    %esi
+}
+ a8e:	5e                   	pop    %esi
+ a8f:	5d                   	pop    %ebp
+ a90:	c3                   	ret    
+ a91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a98:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a9f:	90                   	nop
+
+00000aa0 <randomrange>:
+
+int randomrange(int low, int high){
+ aa0:	f3 0f 1e fb          	endbr32 
+ aa4:	55                   	push   %ebp
+ aa5:	89 e5                	mov    %esp,%ebp
+ aa7:	57                   	push   %edi
+ aa8:	56                   	push   %esi
+ aa9:	53                   	push   %ebx
+ aaa:	83 ec 0c             	sub    $0xc,%esp
+ aad:	8b 75 08             	mov    0x8(%ebp),%esi
+ ab0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ ab3:	39 f0                	cmp    %esi,%eax
+ ab5:	7d 06                	jge    abd <randomrange+0x1d>
+ ab7:	89 f2                	mov    %esi,%edx
+ ab9:	89 c6                	mov    %eax,%esi
+ abb:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ abd:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ abf:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ ac4:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ ac6:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ ac9:	89 d8                	mov    %ebx,%eax
+ acb:	f7 f1                	div    %ecx
+ acd:	89 c7                	mov    %eax,%edi
+ acf:	29 d3                	sub    %edx,%ebx
+ ad1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ ad8:	e8 23 fe ff ff       	call   900 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ add:	39 d8                	cmp    %ebx,%eax
+ adf:	73 f7                	jae    ad8 <randomrange+0x38>
+  return x/bin_size;
+ ae1:	31 d2                	xor    %edx,%edx
+  return val;
+ ae3:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ ae6:	f7 f7                	div    %edi
+ ae8:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ ae9:	01 f0                	add    %esi,%eax
+ aeb:	5e                   	pop    %esi
+ aec:	5f                   	pop    %edi
+ aed:	5d                   	pop    %ebp
+ aee:	c3                   	ret    
Binary files xv6-public/wc.o and xv6-public-partb/wc.o differ
diff -ruN xv6-public/wc.sym xv6-public-partb/wc.sym
--- xv6-public/wc.sym	2022-08-13 16:28:55.551948000 +0530
+++ xv6-public-partb/wc.sym	2022-10-31 11:09:01.486039183 +0530
@@ -1,7 +1,8 @@
 00000000 .text
-000008b8 .rodata
-0000090c .eh_frame
-00000be0 .bss
+00000af0 .rodata
+00000b4c .eh_frame
+00000ea8 .data
+00000ec0 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -14,11 +15,16 @@
 00000000 ulib.c
 00000000 printf.c
 000004a0 printint
-000008f8 digits.1085
+00000b30 digits.1088
 00000000 umalloc.c
-00000be0 freep
-00000be4 base
+00000ec0 freep
+00000ec4 base
+00000000 random.c
+00000ee0 mt
+00000ea8 mti
+00000b44 mag01.989
 00000190 strcpy
+000008c0 sgenrand
 00000550 printf
 000003c0 memmove
 0000043b mknod
@@ -26,6 +32,7 @@
 00000473 getpid
 000007b0 malloc
 00000483 sleep
+00000a60 random_at_most
 00000403 pipe
 00000413 write
 0000044b fstat
@@ -39,21 +46,23 @@
 000003eb fork
 0000047b sbrk
 0000048b uptime
-00000be0 __bss_start
+00000eac __bss_start
 00000250 memset
 00000000 main
 000001c0 strcmp
 0000046b dup
-00000c00 buf
+000018a0 buf
+00000900 genrand
 00000330 stat
-00000be0 _edata
-00000e00 _end
+00000eac _edata
+00001aa0 _end
 00000453 link
 000003f3 exit
 00000380 atoi
 00000210 strlen
 00000433 open
 00000270 strchr
+00000aa0 randomrange
 0000045b mkdir
 0000041b close
 00000720 free
Binary files xv6-public/xv6.img and xv6-public-partb/xv6.img differ
Binary files xv6-public/_zombie and xv6-public-partb/_zombie differ
diff -ruN xv6-public/zombie.asm xv6-public-partb/zombie.asm
--- xv6-public/zombie.asm	2022-08-13 16:28:55.603931000 +0530
+++ xv6-public-partb/zombie.asm	2022-10-31 11:09:01.618105183 +0530
@@ -169,6 +169,7 @@
  101:	89 d7                	mov    %edx,%edi
  103:	fc                   	cld    
  104:	f3 aa                	rep stos %al,%es:(%edi)
+
   stosb(dst, c, n);
   return dst;
 }
@@ -420,7 +421,6 @@
  281:	39 f8                	cmp    %edi,%eax
  283:	75 fb                	jne    280 <memmove+0x20>
   return vdst;
-}
  285:	5e                   	pop    %esi
  286:	89 d0                	mov    %edx,%eax
  288:	5f                   	pop    %edi
@@ -428,132 +428,106 @@
  28a:	c3                   	ret    
 
 0000028b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
  28b:	b8 01 00 00 00       	mov    $0x1,%eax
  290:	cd 40                	int    $0x40
  292:	c3                   	ret    
 
 00000293 <exit>:
-SYSCALL(exit)
  293:	b8 02 00 00 00       	mov    $0x2,%eax
  298:	cd 40                	int    $0x40
  29a:	c3                   	ret    
 
 0000029b <wait>:
-SYSCALL(wait)
  29b:	b8 03 00 00 00       	mov    $0x3,%eax
  2a0:	cd 40                	int    $0x40
  2a2:	c3                   	ret    
 
 000002a3 <pipe>:
-SYSCALL(pipe)
  2a3:	b8 04 00 00 00       	mov    $0x4,%eax
  2a8:	cd 40                	int    $0x40
  2aa:	c3                   	ret    
 
 000002ab <read>:
-SYSCALL(read)
  2ab:	b8 05 00 00 00       	mov    $0x5,%eax
  2b0:	cd 40                	int    $0x40
  2b2:	c3                   	ret    
 
 000002b3 <write>:
-SYSCALL(write)
  2b3:	b8 10 00 00 00       	mov    $0x10,%eax
  2b8:	cd 40                	int    $0x40
  2ba:	c3                   	ret    
 
 000002bb <close>:
-SYSCALL(close)
  2bb:	b8 15 00 00 00       	mov    $0x15,%eax
  2c0:	cd 40                	int    $0x40
  2c2:	c3                   	ret    
 
 000002c3 <kill>:
-SYSCALL(kill)
  2c3:	b8 06 00 00 00       	mov    $0x6,%eax
  2c8:	cd 40                	int    $0x40
  2ca:	c3                   	ret    
 
 000002cb <exec>:
-SYSCALL(exec)
  2cb:	b8 07 00 00 00       	mov    $0x7,%eax
  2d0:	cd 40                	int    $0x40
  2d2:	c3                   	ret    
 
 000002d3 <open>:
-SYSCALL(open)
  2d3:	b8 0f 00 00 00       	mov    $0xf,%eax
  2d8:	cd 40                	int    $0x40
  2da:	c3                   	ret    
 
 000002db <mknod>:
-SYSCALL(mknod)
  2db:	b8 11 00 00 00       	mov    $0x11,%eax
  2e0:	cd 40                	int    $0x40
  2e2:	c3                   	ret    
 
 000002e3 <unlink>:
-SYSCALL(unlink)
  2e3:	b8 12 00 00 00       	mov    $0x12,%eax
  2e8:	cd 40                	int    $0x40
  2ea:	c3                   	ret    
 
 000002eb <fstat>:
-SYSCALL(fstat)
  2eb:	b8 08 00 00 00       	mov    $0x8,%eax
  2f0:	cd 40                	int    $0x40
  2f2:	c3                   	ret    
 
 000002f3 <link>:
-SYSCALL(link)
  2f3:	b8 13 00 00 00       	mov    $0x13,%eax
  2f8:	cd 40                	int    $0x40
  2fa:	c3                   	ret    
 
 000002fb <mkdir>:
-SYSCALL(mkdir)
  2fb:	b8 14 00 00 00       	mov    $0x14,%eax
  300:	cd 40                	int    $0x40
  302:	c3                   	ret    
 
 00000303 <chdir>:
-SYSCALL(chdir)
  303:	b8 09 00 00 00       	mov    $0x9,%eax
  308:	cd 40                	int    $0x40
  30a:	c3                   	ret    
 
 0000030b <dup>:
-SYSCALL(dup)
  30b:	b8 0a 00 00 00       	mov    $0xa,%eax
  310:	cd 40                	int    $0x40
  312:	c3                   	ret    
 
 00000313 <getpid>:
-SYSCALL(getpid)
  313:	b8 0b 00 00 00       	mov    $0xb,%eax
  318:	cd 40                	int    $0x40
  31a:	c3                   	ret    
 
 0000031b <sbrk>:
-SYSCALL(sbrk)
  31b:	b8 0c 00 00 00       	mov    $0xc,%eax
  320:	cd 40                	int    $0x40
  322:	c3                   	ret    
 
 00000323 <sleep>:
-SYSCALL(sleep)
  323:	b8 0d 00 00 00       	mov    $0xd,%eax
  328:	cd 40                	int    $0x40
  32a:	c3                   	ret    
 
 0000032b <uptime>:
-SYSCALL(uptime)
  32b:	b8 0e 00 00 00       	mov    $0xe,%eax
  330:	cd 40                	int    $0x40
  332:	c3                   	ret    
@@ -611,7 +585,7 @@
  372:	31 d2                	xor    %edx,%edx
  374:	89 cf                	mov    %ecx,%edi
  376:	f7 75 c4             	divl   -0x3c(%ebp)
- 379:	0f b6 92 60 07 00 00 	movzbl 0x760(%edx),%edx
+ 379:	0f b6 92 98 09 00 00 	movzbl 0x998(%edx),%edx
  380:	89 45 c0             	mov    %eax,-0x40(%ebp)
  383:	89 d8                	mov    %ebx,%eax
  385:	8d 5b 01             	lea    0x1(%ebx),%ebx
@@ -882,7 +856,7 @@
  571:	8b 5d 08             	mov    0x8(%ebp),%ebx
  574:	eb 1a                	jmp    590 <printf+0x1a0>
           s = "(null)";
- 576:	bb 58 07 00 00       	mov    $0x758,%ebx
+ 576:	bb 90 09 00 00       	mov    $0x990,%ebx
         while(*s != 0){
  57b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
  57e:	b8 28 00 00 00       	mov    $0x28,%eax
@@ -928,7 +902,7 @@
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5c5:	a1 08 0a 00 00       	mov    0xa08,%eax
+ 5c5:	a1 e0 0c 00 00       	mov    0xce0,%eax
 {
  5ca:	89 e5                	mov    %esp,%ebp
  5cc:	57                   	push   %edi
@@ -984,7 +958,7 @@
 }
  611:	5b                   	pop    %ebx
   freep = p;
- 612:	a3 08 0a 00 00       	mov    %eax,0xa08
+ 612:	a3 e0 0c 00 00       	mov    %eax,0xce0
 }
  617:	5e                   	pop    %esi
  618:	5f                   	pop    %edi
@@ -1007,7 +981,7 @@
     p->s.size += bp->s.size;
  637:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
- 63a:	a3 08 0a 00 00       	mov    %eax,0xa08
+ 63a:	a3 e0 0c 00 00       	mov    %eax,0xce0
     p->s.size += bp->s.size;
  63f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
@@ -1041,7 +1015,7 @@
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  65d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 660:	8b 3d 08 0a 00 00    	mov    0xa08,%edi
+ 660:	8b 3d e0 0c 00 00    	mov    0xce0,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
  666:	8d 70 07             	lea    0x7(%eax),%esi
  669:	c1 ee 03             	shr    $0x3,%esi
@@ -1072,7 +1046,7 @@
  6a2:	8b 4a 04             	mov    0x4(%edx),%ecx
  6a5:	39 f1                	cmp    %esi,%ecx
  6a7:	73 4f                	jae    6f8 <malloc+0xa8>
- 6a9:	8b 3d 08 0a 00 00    	mov    0xa08,%edi
+ 6a9:	8b 3d e0 0c 00 00    	mov    0xce0,%edi
  6af:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
@@ -1098,7 +1072,7 @@
  6d1:	50                   	push   %eax
  6d2:	e8 e9 fe ff ff       	call   5c0 <free>
   return freep;
- 6d7:	a1 08 0a 00 00       	mov    0xa08,%eax
+ 6d7:	a1 e0 0c 00 00       	mov    0xce0,%eax
       if((p = morecore(nunits)) == 0)
  6dc:	83 c4 10             	add    $0x10,%esp
  6df:	85 c0                	test   %eax,%eax
@@ -1130,7 +1104,7 @@
         p->s.size = nunits;
  704:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
- 707:	a3 08 0a 00 00       	mov    %eax,0xa08
+ 707:	a3 e0 0c 00 00       	mov    %eax,0xce0
 }
  70c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
@@ -1144,17 +1118,17 @@
  717:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
  71e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
- 720:	c7 05 08 0a 00 00 0c 	movl   $0xa0c,0xa08
- 727:	0a 00 00 
+ 720:	c7 05 e0 0c 00 00 e4 	movl   $0xce4,0xce0
+ 727:	0c 00 00 
     base.s.size = 0;
- 72a:	bf 0c 0a 00 00       	mov    $0xa0c,%edi
+ 72a:	bf e4 0c 00 00       	mov    $0xce4,%edi
     base.s.ptr = freep = prevp = &base;
- 72f:	c7 05 0c 0a 00 00 0c 	movl   $0xa0c,0xa0c
- 736:	0a 00 00 
+ 72f:	c7 05 e4 0c 00 00 e4 	movl   $0xce4,0xce4
+ 736:	0c 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
  739:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
- 73b:	c7 05 10 0a 00 00 00 	movl   $0x0,0xa10
+ 73b:	c7 05 e8 0c 00 00 00 	movl   $0x0,0xce8
  742:	00 00 00 
     if(p->s.size >= nunits){
  745:	e9 36 ff ff ff       	jmp    680 <malloc+0x30>
@@ -1163,3 +1137,279 @@
  750:	8b 0a                	mov    (%edx),%ecx
  752:	89 08                	mov    %ecx,(%eax)
  754:	eb b1                	jmp    707 <malloc+0xb7>
+ 756:	66 90                	xchg   %ax,%ax
+ 758:	66 90                	xchg   %ax,%ax
+ 75a:	66 90                	xchg   %ax,%ax
+ 75c:	66 90                	xchg   %ax,%ax
+ 75e:	66 90                	xchg   %ax,%ax
+
+00000760 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 760:	f3 0f 1e fb          	endbr32 
+ 764:	55                   	push   %ebp
+ 765:	b8 04 0d 00 00       	mov    $0xd04,%eax
+ 76a:	89 e5                	mov    %esp,%ebp
+ 76c:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 76f:	89 15 00 0d 00 00    	mov    %edx,0xd00
+    for (mti=1; mti<N; mti++)
+ 775:	eb 0c                	jmp    783 <sgenrand+0x23>
+ 777:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 77e:	66 90                	xchg   %ax,%ax
+ 780:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 783:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 789:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 78b:	3d bc 16 00 00       	cmp    $0x16bc,%eax
+ 790:	75 ee                	jne    780 <sgenrand+0x20>
+ 792:	c7 05 d0 0c 00 00 70 	movl   $0x270,0xcd0
+ 799:	02 00 00 
+}
+ 79c:	5d                   	pop    %ebp
+ 79d:	c3                   	ret    
+ 79e:	66 90                	xchg   %ax,%ax
+
+000007a0 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 7a0:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 7a4:	a1 d0 0c 00 00       	mov    0xcd0,%eax
+ 7a9:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 7ae:	7f 3c                	jg     7ec <genrand+0x4c>
+ 7b0:	8d 50 01             	lea    0x1(%eax),%edx
+ 7b3:	8b 04 85 00 0d 00 00 	mov    0xd00(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 7ba:	89 15 d0 0c 00 00    	mov    %edx,0xcd0
+    y ^= TEMPERING_SHIFT_U(y);
+ 7c0:	89 c2                	mov    %eax,%edx
+ 7c2:	c1 ea 0b             	shr    $0xb,%edx
+ 7c5:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 7c7:	89 d0                	mov    %edx,%eax
+ 7c9:	c1 e0 07             	shl    $0x7,%eax
+ 7cc:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 7d1:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 7d3:	89 d0                	mov    %edx,%eax
+ 7d5:	c1 e0 0f             	shl    $0xf,%eax
+ 7d8:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 7dd:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 7df:	89 c2                	mov    %eax,%edx
+ 7e1:	c1 ea 12             	shr    $0x12,%edx
+ 7e4:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 7e6:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 7eb:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 7ec:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 7f1:	0f 84 d2 00 00 00    	je     8c9 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 7f7:	31 c0                	xor    %eax,%eax
+ 7f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 800:	8b 0c 85 00 0d 00 00 	mov    0xd00(,%eax,4),%ecx
+ 807:	83 c0 01             	add    $0x1,%eax
+ 80a:	8b 14 85 00 0d 00 00 	mov    0xd00(,%eax,4),%edx
+ 811:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 817:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 81d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 81f:	89 d1                	mov    %edx,%ecx
+ 821:	83 e2 01             	and    $0x1,%edx
+ 824:	d1 e9                	shr    %ecx
+ 826:	33 0c 85 30 13 00 00 	xor    0x1330(,%eax,4),%ecx
+ 82d:	33 0c 95 ac 09 00 00 	xor    0x9ac(,%edx,4),%ecx
+ 834:	89 0c 85 fc 0c 00 00 	mov    %ecx,0xcfc(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 83b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 840:	75 be                	jne    800 <genrand+0x60>
+ 842:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 848:	8b 0c 85 00 0d 00 00 	mov    0xd00(,%eax,4),%ecx
+ 84f:	83 c0 01             	add    $0x1,%eax
+ 852:	8b 14 85 00 0d 00 00 	mov    0xd00(,%eax,4),%edx
+ 859:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 85f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 865:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 867:	89 d1                	mov    %edx,%ecx
+ 869:	83 e2 01             	and    $0x1,%edx
+ 86c:	d1 e9                	shr    %ecx
+ 86e:	33 0c 85 70 09 00 00 	xor    0x970(,%eax,4),%ecx
+ 875:	33 0c 95 ac 09 00 00 	xor    0x9ac(,%edx,4),%ecx
+ 87c:	89 0c 85 fc 0c 00 00 	mov    %ecx,0xcfc(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 883:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 888:	75 be                	jne    848 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 88a:	a1 00 0d 00 00       	mov    0xd00,%eax
+ 88f:	8b 0d bc 16 00 00    	mov    0x16bc,%ecx
+ 895:	89 c2                	mov    %eax,%edx
+ 897:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 89d:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8a3:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8a5:	89 ca                	mov    %ecx,%edx
+ 8a7:	83 e1 01             	and    $0x1,%ecx
+ 8aa:	d1 ea                	shr    %edx
+ 8ac:	33 15 30 13 00 00    	xor    0x1330,%edx
+ 8b2:	33 14 8d ac 09 00 00 	xor    0x9ac(,%ecx,4),%edx
+ 8b9:	89 15 bc 16 00 00    	mov    %edx,0x16bc
+ 8bf:	ba 01 00 00 00       	mov    $0x1,%edx
+ 8c4:	e9 f1 fe ff ff       	jmp    7ba <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ 8c9:	b8 04 0d 00 00       	mov    $0xd04,%eax
+ 8ce:	b9 bc 16 00 00       	mov    $0x16bc,%ecx
+ 8d3:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 8d8:	c7 05 00 0d 00 00 05 	movl   $0x1105,0xd00
+ 8df:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 8e2:	eb 07                	jmp    8eb <genrand+0x14b>
+ 8e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 8e8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 8eb:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 8f1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 8f3:	39 c1                	cmp    %eax,%ecx
+ 8f5:	75 f1                	jne    8e8 <genrand+0x148>
+ 8f7:	e9 fb fe ff ff       	jmp    7f7 <genrand+0x57>
+ 8fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000900 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 900:	f3 0f 1e fb          	endbr32 
+ 904:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 905:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 907:	89 e5                	mov    %esp,%ebp
+ 909:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 90a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 90d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 90e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 913:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 916:	89 d8                	mov    %ebx,%eax
+ 918:	f7 f1                	div    %ecx
+ 91a:	89 c6                	mov    %eax,%esi
+ 91c:	29 d3                	sub    %edx,%ebx
+ 91e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ 920:	e8 7b fe ff ff       	call   7a0 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 925:	39 d8                	cmp    %ebx,%eax
+ 927:	73 f7                	jae    920 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 929:	31 d2                	xor    %edx,%edx
+}
+ 92b:	5b                   	pop    %ebx
+  return x/bin_size;
+ 92c:	f7 f6                	div    %esi
+}
+ 92e:	5e                   	pop    %esi
+ 92f:	5d                   	pop    %ebp
+ 930:	c3                   	ret    
+ 931:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 938:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 93f:	90                   	nop
+
+00000940 <randomrange>:
+
+int randomrange(int low, int high){
+ 940:	f3 0f 1e fb          	endbr32 
+ 944:	55                   	push   %ebp
+ 945:	89 e5                	mov    %esp,%ebp
+ 947:	57                   	push   %edi
+ 948:	56                   	push   %esi
+ 949:	53                   	push   %ebx
+ 94a:	83 ec 0c             	sub    $0xc,%esp
+ 94d:	8b 75 08             	mov    0x8(%ebp),%esi
+ 950:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 953:	39 f0                	cmp    %esi,%eax
+ 955:	7d 06                	jge    95d <randomrange+0x1d>
+ 957:	89 f2                	mov    %esi,%edx
+ 959:	89 c6                	mov    %eax,%esi
+ 95b:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 95d:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 95f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 964:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 966:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 969:	89 d8                	mov    %ebx,%eax
+ 96b:	f7 f1                	div    %ecx
+ 96d:	89 c7                	mov    %eax,%edi
+ 96f:	29 d3                	sub    %edx,%ebx
+ 971:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ 978:	e8 23 fe ff ff       	call   7a0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 97d:	39 d8                	cmp    %ebx,%eax
+ 97f:	73 f7                	jae    978 <randomrange+0x38>
+  return x/bin_size;
+ 981:	31 d2                	xor    %edx,%edx
+  return val;
+ 983:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ 986:	f7 f7                	div    %edi
+ 988:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ 989:	01 f0                	add    %esi,%eax
+ 98b:	5e                   	pop    %esi
+ 98c:	5f                   	pop    %edi
+ 98d:	5d                   	pop    %ebp
+ 98e:	c3                   	ret    
Binary files xv6-public/zombie.o and xv6-public-partb/zombie.o differ
diff -ruN xv6-public/zombie.sym xv6-public-partb/zombie.sym
--- xv6-public/zombie.sym	2022-08-13 16:28:55.615927000 +0530
+++ xv6-public-partb/zombie.sym	2022-10-31 11:09:01.654123184 +0530
@@ -1,7 +1,8 @@
 00000000 .text
-00000758 .rodata
-00000774 .eh_frame
-00000a08 .bss
+00000990 .rodata
+000009b4 .eh_frame
+00000cd0 .data
+00000ce0 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -14,11 +15,16 @@
 00000000 ulib.c
 00000000 printf.c
 00000340 printint
-00000760 digits.1085
+00000998 digits.1088
 00000000 umalloc.c
-00000a08 freep
-00000a0c base
+00000ce0 freep
+00000ce4 base
+00000000 random.c
+00000d00 mt
+00000cd0 mti
+000009ac mag01.989
 00000030 strcpy
+00000760 sgenrand
 000003f0 printf
 00000260 memmove
 000002db mknod
@@ -26,6 +32,7 @@
 00000313 getpid
 00000650 malloc
 00000323 sleep
+00000900 random_at_most
 000002a3 pipe
 000002b3 write
 000002eb fstat
@@ -38,20 +45,22 @@
 0000028b fork
 0000031b sbrk
 0000032b uptime
-00000a08 __bss_start
+00000cd4 __bss_start
 000000f0 memset
 00000000 main
 00000060 strcmp
 0000030b dup
+000007a0 genrand
 000001d0 stat
-00000a08 _edata
-00000a14 _end
+00000cd4 _edata
+000016c0 _end
 000002f3 link
 00000293 exit
 00000220 atoi
 000000b0 strlen
 000002d3 open
 00000110 strchr
+00000940 randomrange
 000002fb mkdir
 000002bb close
 000005c0 free
